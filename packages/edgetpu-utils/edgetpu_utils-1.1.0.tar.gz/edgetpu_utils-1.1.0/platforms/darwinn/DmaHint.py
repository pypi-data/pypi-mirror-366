# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DmaHint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DmaHint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDmaHint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DmaHintBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # DmaHint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DmaHint
    def AnyHintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DmaHint
    def AnyHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # DmaHint
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(3)
def DmaHintStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAnyHintType(builder, anyHintType): builder.PrependUint8Slot(0, anyHintType, 0)
def DmaHintAddAnyHintType(builder, anyHintType):
    """This method is deprecated. Please switch to AddAnyHintType."""
    return AddAnyHintType(builder, anyHintType)
def AddAnyHint(builder, anyHint): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(anyHint), 0)
def DmaHintAddAnyHint(builder, anyHint):
    """This method is deprecated. Please switch to AddAnyHint."""
    return AddAnyHint(builder, anyHint)
def AddDirection(builder, direction): builder.PrependInt16Slot(2, direction, 0)
def DmaHintAddDirection(builder, direction):
    """This method is deprecated. Please switch to AddDirection."""
    return AddDirection(builder, direction)
def End(builder): return builder.EndObject()
def DmaHintEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)