# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Layer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Layer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LayerBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # Layer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Layer
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def SizeBytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def YDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def XDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def ZDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def Numerics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from platforms.darwinn.NumericsConstants import NumericsConstants
            obj = NumericsConstants()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Layer
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Layer
    def AnyLayerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Layer
    def AnyLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Layer
    def ExecutionCountPerInference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Layer
    def CacheOnDram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Layer
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from platforms.darwinn.TensorShape import TensorShape
            obj = TensorShape()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(12)
def LayerStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def LayerAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddSizeBytes(builder, sizeBytes): builder.PrependInt32Slot(1, sizeBytes, 0)
def LayerAddSizeBytes(builder, sizeBytes):
    """This method is deprecated. Please switch to AddSizeBytes."""
    return AddSizeBytes(builder, sizeBytes)
def AddYDim(builder, yDim): builder.PrependInt32Slot(2, yDim, 0)
def LayerAddYDim(builder, yDim):
    """This method is deprecated. Please switch to AddYDim."""
    return AddYDim(builder, yDim)
def AddXDim(builder, xDim): builder.PrependInt32Slot(3, xDim, 0)
def LayerAddXDim(builder, xDim):
    """This method is deprecated. Please switch to AddXDim."""
    return AddXDim(builder, xDim)
def AddZDim(builder, zDim): builder.PrependInt32Slot(4, zDim, 0)
def LayerAddZDim(builder, zDim):
    """This method is deprecated. Please switch to AddZDim."""
    return AddZDim(builder, zDim)
def AddNumerics(builder, numerics): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(numerics), 0)
def LayerAddNumerics(builder, numerics):
    """This method is deprecated. Please switch to AddNumerics."""
    return AddNumerics(builder, numerics)
def AddDataType(builder, dataType): builder.PrependInt16Slot(6, dataType, 0)
def LayerAddDataType(builder, dataType):
    """This method is deprecated. Please switch to AddDataType."""
    return AddDataType(builder, dataType)
def AddAnyLayerType(builder, anyLayerType): builder.PrependUint8Slot(7, anyLayerType, 0)
def LayerAddAnyLayerType(builder, anyLayerType):
    """This method is deprecated. Please switch to AddAnyLayerType."""
    return AddAnyLayerType(builder, anyLayerType)
def AddAnyLayer(builder, anyLayer): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(anyLayer), 0)
def LayerAddAnyLayer(builder, anyLayer):
    """This method is deprecated. Please switch to AddAnyLayer."""
    return AddAnyLayer(builder, anyLayer)
def AddExecutionCountPerInference(builder, executionCountPerInference): builder.PrependInt32Slot(9, executionCountPerInference, 1)
def LayerAddExecutionCountPerInference(builder, executionCountPerInference):
    """This method is deprecated. Please switch to AddExecutionCountPerInference."""
    return AddExecutionCountPerInference(builder, executionCountPerInference)
def AddCacheOnDram(builder, cacheOnDram): builder.PrependBoolSlot(10, cacheOnDram, 0)
def LayerAddCacheOnDram(builder, cacheOnDram):
    """This method is deprecated. Please switch to AddCacheOnDram."""
    return AddCacheOnDram(builder, cacheOnDram)
def AddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def LayerAddShape(builder, shape):
    """This method is deprecated. Please switch to AddShape."""
    return AddShape(builder, shape)
def End(builder): return builder.EndObject()
def LayerEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)