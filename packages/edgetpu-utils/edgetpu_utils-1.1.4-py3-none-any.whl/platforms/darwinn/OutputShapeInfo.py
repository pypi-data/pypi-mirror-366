# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OutputShapeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OutputShapeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOutputShapeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OutputShapeInfoBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # OutputShapeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OutputShapeInfo
    def SliceLayout(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.TensorLayout import TensorLayout
            obj = TensorLayout()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OutputShapeInfo
    def SliceLayoutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputShapeInfo
    def SliceLayoutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # OutputShapeInfo
    def SliceOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputShapeInfo
    def SliceOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputShapeInfo
    def SliceOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputShapeInfo
    def SliceOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def OutputShapeInfoStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSliceLayout(builder, sliceLayout): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sliceLayout), 0)
def OutputShapeInfoAddSliceLayout(builder, sliceLayout):
    """This method is deprecated. Please switch to AddSliceLayout."""
    return AddSliceLayout(builder, sliceLayout)
def StartSliceLayoutVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputShapeInfoStartSliceLayoutVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSliceLayoutVector(builder, numElems)
def AddSliceOffset(builder, sliceOffset): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sliceOffset), 0)
def OutputShapeInfoAddSliceOffset(builder, sliceOffset):
    """This method is deprecated. Please switch to AddSliceOffset."""
    return AddSliceOffset(builder, sliceOffset)
def StartSliceOffsetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputShapeInfoStartSliceOffsetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSliceOffsetVector(builder, numElems)
def End(builder): return builder.EndObject()
def OutputShapeInfoEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)