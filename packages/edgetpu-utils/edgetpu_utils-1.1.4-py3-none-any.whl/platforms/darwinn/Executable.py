# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Executable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Executable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExecutable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ExecutableBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # Executable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Executable
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Executable
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Executable
    def SerializedModel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Executable
    def SerializedModelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Executable
    def SerializedModelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Executable
    def SerializedModelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Executable
    def BatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Executable
    def ScratchSizeBytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Executable
    def InstructionBitstreams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.InstructionBitstream import InstructionBitstream
            obj = InstructionBitstream()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Executable
    def InstructionBitstreamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Executable
    def InstructionBitstreamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Executable
    def Parameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Executable
    def ParametersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Executable
    def ParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Executable
    def ParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Executable
    def DmaHints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from platforms.darwinn.DmaHints import DmaHints
            obj = DmaHints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Executable
    def InputLayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.Layer import Layer
            obj = Layer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Executable
    def InputLayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Executable
    def InputLayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Executable
    def OutputLayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.Layer import Layer
            obj = Layer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Executable
    def OutputLayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Executable
    def OutputLayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Executable
    def Chip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Executable
    def EstimatedCycles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Executable
    def UsedNarrowMemoryBytesPerTile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Executable
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Executable
    def ParameterCachingToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Executable
    def UseTpuDramForParameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Executable
    def EstimatedCycles64bit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(17)
def ExecutableStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddVersion(builder, version): builder.PrependInt32Slot(0, version, 0)
def ExecutableAddVersion(builder, version):
    """This method is deprecated. Please switch to AddVersion."""
    return AddVersion(builder, version)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ExecutableAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddSerializedModel(builder, serializedModel): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(serializedModel), 0)
def ExecutableAddSerializedModel(builder, serializedModel):
    """This method is deprecated. Please switch to AddSerializedModel."""
    return AddSerializedModel(builder, serializedModel)
def StartSerializedModelVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ExecutableStartSerializedModelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSerializedModelVector(builder, numElems)
def AddBatchSize(builder, batchSize): builder.PrependInt32Slot(3, batchSize, 0)
def ExecutableAddBatchSize(builder, batchSize):
    """This method is deprecated. Please switch to AddBatchSize."""
    return AddBatchSize(builder, batchSize)
def AddScratchSizeBytes(builder, scratchSizeBytes): builder.PrependInt32Slot(4, scratchSizeBytes, 0)
def ExecutableAddScratchSizeBytes(builder, scratchSizeBytes):
    """This method is deprecated. Please switch to AddScratchSizeBytes."""
    return AddScratchSizeBytes(builder, scratchSizeBytes)
def AddInstructionBitstreams(builder, instructionBitstreams): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(instructionBitstreams), 0)
def ExecutableAddInstructionBitstreams(builder, instructionBitstreams):
    """This method is deprecated. Please switch to AddInstructionBitstreams."""
    return AddInstructionBitstreams(builder, instructionBitstreams)
def StartInstructionBitstreamsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ExecutableStartInstructionBitstreamsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInstructionBitstreamsVector(builder, numElems)
def AddParameters(builder, parameters): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def ExecutableAddParameters(builder, parameters):
    """This method is deprecated. Please switch to AddParameters."""
    return AddParameters(builder, parameters)
def StartParametersVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ExecutableStartParametersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartParametersVector(builder, numElems)
def AddDmaHints(builder, dmaHints): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dmaHints), 0)
def ExecutableAddDmaHints(builder, dmaHints):
    """This method is deprecated. Please switch to AddDmaHints."""
    return AddDmaHints(builder, dmaHints)
def AddInputLayers(builder, inputLayers): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(inputLayers), 0)
def ExecutableAddInputLayers(builder, inputLayers):
    """This method is deprecated. Please switch to AddInputLayers."""
    return AddInputLayers(builder, inputLayers)
def StartInputLayersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ExecutableStartInputLayersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInputLayersVector(builder, numElems)
def AddOutputLayers(builder, outputLayers): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(outputLayers), 0)
def ExecutableAddOutputLayers(builder, outputLayers):
    """This method is deprecated. Please switch to AddOutputLayers."""
    return AddOutputLayers(builder, outputLayers)
def StartOutputLayersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ExecutableStartOutputLayersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOutputLayersVector(builder, numElems)
def AddChip(builder, chip): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(chip), 0)
def ExecutableAddChip(builder, chip):
    """This method is deprecated. Please switch to AddChip."""
    return AddChip(builder, chip)
def AddEstimatedCycles(builder, estimatedCycles): builder.PrependInt32Slot(11, estimatedCycles, 0)
def ExecutableAddEstimatedCycles(builder, estimatedCycles):
    """This method is deprecated. Please switch to AddEstimatedCycles."""
    return AddEstimatedCycles(builder, estimatedCycles)
def AddUsedNarrowMemoryBytesPerTile(builder, usedNarrowMemoryBytesPerTile): builder.PrependInt32Slot(12, usedNarrowMemoryBytesPerTile, 0)
def ExecutableAddUsedNarrowMemoryBytesPerTile(builder, usedNarrowMemoryBytesPerTile):
    """This method is deprecated. Please switch to AddUsedNarrowMemoryBytesPerTile."""
    return AddUsedNarrowMemoryBytesPerTile(builder, usedNarrowMemoryBytesPerTile)
def AddType(builder, type): builder.PrependInt16Slot(13, type, 0)
def ExecutableAddType(builder, type):
    """This method is deprecated. Please switch to AddType."""
    return AddType(builder, type)
def AddParameterCachingToken(builder, parameterCachingToken): builder.PrependUint64Slot(14, parameterCachingToken, 0)
def ExecutableAddParameterCachingToken(builder, parameterCachingToken):
    """This method is deprecated. Please switch to AddParameterCachingToken."""
    return AddParameterCachingToken(builder, parameterCachingToken)
def AddUseTpuDramForParameters(builder, useTpuDramForParameters): builder.PrependBoolSlot(15, useTpuDramForParameters, 0)
def ExecutableAddUseTpuDramForParameters(builder, useTpuDramForParameters):
    """This method is deprecated. Please switch to AddUseTpuDramForParameters."""
    return AddUseTpuDramForParameters(builder, useTpuDramForParameters)
def AddEstimatedCycles64bit(builder, estimatedCycles64bit): builder.PrependInt64Slot(16, estimatedCycles64bit, 0)
def ExecutableAddEstimatedCycles64bit(builder, estimatedCycles64bit):
    """This method is deprecated. Please switch to AddEstimatedCycles64bit."""
    return AddEstimatedCycles64bit(builder, estimatedCycles64bit)
def End(builder): return builder.EndObject()
def ExecutableEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)