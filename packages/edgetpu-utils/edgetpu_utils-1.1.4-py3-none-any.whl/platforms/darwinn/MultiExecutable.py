# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MultiExecutable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MultiExecutable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMultiExecutable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MultiExecutableBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # MultiExecutable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MultiExecutable
    def SerializedExecutables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MultiExecutable
    def SerializedExecutablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MultiExecutable
    def SerializedExecutablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def MultiExecutableStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSerializedExecutables(builder, serializedExecutables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(serializedExecutables), 0)
def MultiExecutableAddSerializedExecutables(builder, serializedExecutables):
    """This method is deprecated. Please switch to AddSerializedExecutables."""
    return AddSerializedExecutables(builder, serializedExecutables)
def StartSerializedExecutablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MultiExecutableStartSerializedExecutablesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSerializedExecutablesVector(builder, numElems)
def End(builder): return builder.EndObject()
def MultiExecutableEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)