# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DmaHints(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DmaHints()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDmaHints(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DmaHintsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # DmaHints
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DmaHints
    def Hints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.DmaHint import DmaHint
            obj = DmaHint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DmaHints
    def HintsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DmaHints
    def HintsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DmaHints
    def FullyDeterministic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(2)
def DmaHintsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddHints(builder, hints): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hints), 0)
def DmaHintsAddHints(builder, hints):
    """This method is deprecated. Please switch to AddHints."""
    return AddHints(builder, hints)
def StartHintsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DmaHintsStartHintsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartHintsVector(builder, numElems)
def AddFullyDeterministic(builder, fullyDeterministic): builder.PrependBoolSlot(1, fullyDeterministic, 0)
def DmaHintsAddFullyDeterministic(builder, fullyDeterministic):
    """This method is deprecated. Please switch to AddFullyDeterministic."""
    return AddFullyDeterministic(builder, fullyDeterministic)
def End(builder): return builder.EndObject()
def DmaHintsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)