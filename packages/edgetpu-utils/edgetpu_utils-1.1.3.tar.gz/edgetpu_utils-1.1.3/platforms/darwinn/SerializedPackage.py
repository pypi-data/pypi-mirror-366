# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SerializedPackage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SerializedPackage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSerializedPackage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SerializedPackageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # SerializedPackage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SerializedPackage
    def SerializedPackage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SerializedPackage
    def SerializedPackageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SerializedPackage
    def SerializedPackageNestedRoot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            from platforms.darwinn.Package import Package
            return Package.GetRootAs(self._tab.Bytes, self._tab.Vector(o))
        return 0

    # SerializedPackage
    def SerializedPackageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerializedPackage
    def SerializedPackageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def SerializedPackageStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSerializedPackage(builder, serializedPackage): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(serializedPackage), 0)
def SerializedPackageAddSerializedPackage(builder, serializedPackage):
    """This method is deprecated. Please switch to AddSerializedPackage."""
    return AddSerializedPackage(builder, serializedPackage)
def StartSerializedPackageVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def SerializedPackageStartSerializedPackageVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSerializedPackageVector(builder, numElems)
def MakeVectorFromBytes(builder, bytes):
    builder.StartVector(1, len(bytes), 1)
    builder.head = builder.head - len(bytes)
    builder.Bytes[builder.head : builder.head + len(bytes)] = bytes
    return builder.EndVector()
def MakeSerializedPackageVectorFromBytes(builder, bytes):
    builder.StartVector(1, len(bytes), 1)
    builder.head = builder.head - len(bytes)
    builder.Bytes[builder.head : builder.head + len(bytes)] = bytes
    return builder.EndVector()
def End(builder): return builder.EndObject()
def SerializedPackageEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)