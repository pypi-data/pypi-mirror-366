# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InstructionBitstream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InstructionBitstream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstructionBitstream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def InstructionBitstreamBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # InstructionBitstream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InstructionBitstream
    def Bitstream(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # InstructionBitstream
    def BitstreamAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # InstructionBitstream
    def BitstreamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InstructionBitstream
    def BitstreamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # InstructionBitstream
    def FieldOffsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.FieldOffset import FieldOffset
            obj = FieldOffset()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InstructionBitstream
    def FieldOffsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InstructionBitstream
    def FieldOffsetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def InstructionBitstreamStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddBitstream(builder, bitstream): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bitstream), 0)
def InstructionBitstreamAddBitstream(builder, bitstream):
    """This method is deprecated. Please switch to AddBitstream."""
    return AddBitstream(builder, bitstream)
def StartBitstreamVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def InstructionBitstreamStartBitstreamVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBitstreamVector(builder, numElems)
def AddFieldOffsets(builder, fieldOffsets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fieldOffsets), 0)
def InstructionBitstreamAddFieldOffsets(builder, fieldOffsets):
    """This method is deprecated. Please switch to AddFieldOffsets."""
    return AddFieldOffsets(builder, fieldOffsets)
def StartFieldOffsetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InstructionBitstreamStartFieldOffsetsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFieldOffsetsVector(builder, numElems)
def End(builder): return builder.EndObject()
def InstructionBitstreamEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)