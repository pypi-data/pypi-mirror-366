# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OutputLayout(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OutputLayout()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOutputLayout(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OutputLayoutBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # OutputLayout
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OutputLayout
    def YCoordinateToLinearTileIdMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def YCoordinateToLinearTileIdMapAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def YCoordinateToLinearTileIdMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def YCoordinateToLinearTileIdMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # OutputLayout
    def XCoordinateToLinearTileIdMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def XCoordinateToLinearTileIdMapAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def XCoordinateToLinearTileIdMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def XCoordinateToLinearTileIdMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OutputLayout
    def LinearizedTileByteOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def LinearizedTileByteOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def LinearizedTileByteOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def LinearizedTileByteOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # OutputLayout
    def XCoordinateToLocalByteOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def XCoordinateToLocalByteOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def XCoordinateToLocalByteOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def XCoordinateToLocalByteOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OutputLayout
    def YCoordinateToLocalYOffset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def YCoordinateToLocalYOffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def YCoordinateToLocalYOffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def YCoordinateToLocalYOffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # OutputLayout
    def XCoordinateToLocalYRowSize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OutputLayout
    def XCoordinateToLocalYRowSizeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # OutputLayout
    def XCoordinateToLocalYRowSizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OutputLayout
    def XCoordinateToLocalYRowSizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def Start(builder): builder.StartObject(6)
def OutputLayoutStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddYCoordinateToLinearTileIdMap(builder, yCoordinateToLinearTileIdMap): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(yCoordinateToLinearTileIdMap), 0)
def OutputLayoutAddYCoordinateToLinearTileIdMap(builder, yCoordinateToLinearTileIdMap):
    """This method is deprecated. Please switch to AddYCoordinateToLinearTileIdMap."""
    return AddYCoordinateToLinearTileIdMap(builder, yCoordinateToLinearTileIdMap)
def StartYCoordinateToLinearTileIdMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartYCoordinateToLinearTileIdMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartYCoordinateToLinearTileIdMapVector(builder, numElems)
def AddXCoordinateToLinearTileIdMap(builder, xCoordinateToLinearTileIdMap): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(xCoordinateToLinearTileIdMap), 0)
def OutputLayoutAddXCoordinateToLinearTileIdMap(builder, xCoordinateToLinearTileIdMap):
    """This method is deprecated. Please switch to AddXCoordinateToLinearTileIdMap."""
    return AddXCoordinateToLinearTileIdMap(builder, xCoordinateToLinearTileIdMap)
def StartXCoordinateToLinearTileIdMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartXCoordinateToLinearTileIdMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartXCoordinateToLinearTileIdMapVector(builder, numElems)
def AddLinearizedTileByteOffset(builder, linearizedTileByteOffset): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linearizedTileByteOffset), 0)
def OutputLayoutAddLinearizedTileByteOffset(builder, linearizedTileByteOffset):
    """This method is deprecated. Please switch to AddLinearizedTileByteOffset."""
    return AddLinearizedTileByteOffset(builder, linearizedTileByteOffset)
def StartLinearizedTileByteOffsetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartLinearizedTileByteOffsetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLinearizedTileByteOffsetVector(builder, numElems)
def AddXCoordinateToLocalByteOffset(builder, xCoordinateToLocalByteOffset): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(xCoordinateToLocalByteOffset), 0)
def OutputLayoutAddXCoordinateToLocalByteOffset(builder, xCoordinateToLocalByteOffset):
    """This method is deprecated. Please switch to AddXCoordinateToLocalByteOffset."""
    return AddXCoordinateToLocalByteOffset(builder, xCoordinateToLocalByteOffset)
def StartXCoordinateToLocalByteOffsetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartXCoordinateToLocalByteOffsetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartXCoordinateToLocalByteOffsetVector(builder, numElems)
def AddYCoordinateToLocalYOffset(builder, yCoordinateToLocalYOffset): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(yCoordinateToLocalYOffset), 0)
def OutputLayoutAddYCoordinateToLocalYOffset(builder, yCoordinateToLocalYOffset):
    """This method is deprecated. Please switch to AddYCoordinateToLocalYOffset."""
    return AddYCoordinateToLocalYOffset(builder, yCoordinateToLocalYOffset)
def StartYCoordinateToLocalYOffsetVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartYCoordinateToLocalYOffsetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartYCoordinateToLocalYOffsetVector(builder, numElems)
def AddXCoordinateToLocalYRowSize(builder, xCoordinateToLocalYRowSize): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(xCoordinateToLocalYRowSize), 0)
def OutputLayoutAddXCoordinateToLocalYRowSize(builder, xCoordinateToLocalYRowSize):
    """This method is deprecated. Please switch to AddXCoordinateToLocalYRowSize."""
    return AddXCoordinateToLocalYRowSize(builder, xCoordinateToLocalYRowSize)
def StartXCoordinateToLocalYRowSizeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OutputLayoutStartXCoordinateToLocalYRowSizeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartXCoordinateToLocalYRowSizeVector(builder, numElems)
def End(builder): return builder.EndObject()
def OutputLayoutEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)