# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Package(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Package()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPackage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PackageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x57\x4E\x31", size_prefixed=size_prefixed)

    # Package
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Package
    def MinRuntimeVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Package
    def SerializedMultiExecutable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Package
    def SerializedMultiExecutableAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Package
    def SerializedMultiExecutableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Package
    def SerializedMultiExecutableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Package
    def Signature(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Package
    def SignatureAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Package
    def SignatureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Package
    def SignatureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Package
    def KeypairVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Package
    def CompilerVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Package
    def VirtualChipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Package
    def MultiChipPackage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from platforms.darwinn.SerializedPackage import SerializedPackage
            obj = SerializedPackage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Package
    def MultiChipPackageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Package
    def MultiChipPackageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Package
    def ModelIdentifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(8)
def PackageStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMinRuntimeVersion(builder, minRuntimeVersion): builder.PrependInt32Slot(0, minRuntimeVersion, 0)
def PackageAddMinRuntimeVersion(builder, minRuntimeVersion):
    """This method is deprecated. Please switch to AddMinRuntimeVersion."""
    return AddMinRuntimeVersion(builder, minRuntimeVersion)
def AddSerializedMultiExecutable(builder, serializedMultiExecutable): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(serializedMultiExecutable), 0)
def PackageAddSerializedMultiExecutable(builder, serializedMultiExecutable):
    """This method is deprecated. Please switch to AddSerializedMultiExecutable."""
    return AddSerializedMultiExecutable(builder, serializedMultiExecutable)
def StartSerializedMultiExecutableVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PackageStartSerializedMultiExecutableVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSerializedMultiExecutableVector(builder, numElems)
def AddSignature(builder, signature): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(signature), 0)
def PackageAddSignature(builder, signature):
    """This method is deprecated. Please switch to AddSignature."""
    return AddSignature(builder, signature)
def StartSignatureVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PackageStartSignatureVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSignatureVector(builder, numElems)
def AddKeypairVersion(builder, keypairVersion): builder.PrependInt32Slot(3, keypairVersion, 0)
def PackageAddKeypairVersion(builder, keypairVersion):
    """This method is deprecated. Please switch to AddKeypairVersion."""
    return AddKeypairVersion(builder, keypairVersion)
def AddCompilerVersion(builder, compilerVersion): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(compilerVersion), 0)
def PackageAddCompilerVersion(builder, compilerVersion):
    """This method is deprecated. Please switch to AddCompilerVersion."""
    return AddCompilerVersion(builder, compilerVersion)
def AddVirtualChipId(builder, virtualChipId): builder.PrependInt32Slot(5, virtualChipId, 0)
def PackageAddVirtualChipId(builder, virtualChipId):
    """This method is deprecated. Please switch to AddVirtualChipId."""
    return AddVirtualChipId(builder, virtualChipId)
def AddMultiChipPackage(builder, multiChipPackage): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(multiChipPackage), 0)
def PackageAddMultiChipPackage(builder, multiChipPackage):
    """This method is deprecated. Please switch to AddMultiChipPackage."""
    return AddMultiChipPackage(builder, multiChipPackage)
def StartMultiChipPackageVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PackageStartMultiChipPackageVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMultiChipPackageVector(builder, numElems)
def AddModelIdentifier(builder, modelIdentifier): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(modelIdentifier), 0)
def PackageAddModelIdentifier(builder, modelIdentifier):
    """This method is deprecated. Please switch to AddModelIdentifier."""
    return AddModelIdentifier(builder, modelIdentifier)
def End(builder): return builder.EndObject()
def PackageEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)