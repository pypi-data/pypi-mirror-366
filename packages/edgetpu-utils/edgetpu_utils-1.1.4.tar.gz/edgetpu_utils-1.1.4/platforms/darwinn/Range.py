# automatically generated by the FlatBuffers compiler, do not modify

# namespace: darwinn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Range(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # Range
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Range
    def Start(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Range
    def End(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateRange(builder, start, end):
    builder.Prep(4, 8)
    builder.PrependInt32(end)
    builder.PrependInt32(start)
    return builder.Offset()
