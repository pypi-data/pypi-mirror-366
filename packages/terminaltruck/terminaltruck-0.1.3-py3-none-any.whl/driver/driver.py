import time
import random
class Driver():
    def __init__(self):
        self.world = [['\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'],
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;9m [ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ] \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ! \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                      ['\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m']]
        self.fuelstation = [['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'], 
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;0;48;5;0m \\ \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;8;48;5;8m _ \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;8;48;5;8m _ \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;15;48;5;196m = \x1b[0m', '\x1b[38;5;8;48;5;8m _ \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;8;48;5;8m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m'],
                            ['\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;8;48;5;8m | \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m', '\x1b[38;5;226;48;5;15m * \x1b[0m']]
        self.bed = [['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;15;48;5;15m = \x1b[0m',  '\x1b[38;5;15;48;5;15m = \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;10;48;5;10m - \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;10;48;5;10m - \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;12;48;5;12m - \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'], 
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;12;48;5;12m - \x1b[0m',  '\x1b[38;5;12;48;5;12m - \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;10;48;5;10m - \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;10;48;5;10m - \x1b[0m', '\x1b[38;5;9;48;5;9m - \x1b[0m', '\x1b[38;5;12;48;5;12m - \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'], 
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;94m | \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m',  '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;94m | \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;94m | \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;94m | \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m'],
                    ['\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m', '\x1b[38;5;226;48;5;0m * \x1b[0m']]
        self.dream = [0, 15, 8, 12, 21, 10, 0]
        self.Nizhny = [226, 13]
        self.Moscow = [9, 226]
        self.Minsk = [12, 11]
        self.Warsaw = [226, 0]
        self.town_dict = {"[226, 13]": "Nizhny", "[9, 226]": "Moscow", "[12, 11]": "Minsk", "[226, 0]": "Warsaw", "[0, 0]": "Town"}
        self.night = [0, 0]
        self.km = 0
        self.tree = [94, 10]
        self.cargo = ["oil", "uranium", "ketchup", "cement", "sand"]
        self.player = '\x1b[38;5;15;48;5;15m i \x1b[0m'
        self.energy = 250
        self.money = 0
    def game(self):
        print("Disclaimer! Please, don`t sleep while driving. It`s dangerous for life. Have a nice game!\nДисклеймер! Пожалуйста, не спите во время вождения. Это опасно для жизни. Приятной игры!\n")
        cargo = random.randint(0, len(self.cargo) - 1)
        cargo = self.cargo[cargo]
        start = 0
        if cargo == "ketchup" or cargo == "sand":  
            truck_hp = 70
            cargo_hp = 50
        elif cargo == "oil" or cargo == "cement":
            truck_hp = 50
            cargo_hp = 30
        else:
            truck_hp = 30
            cargo_hp = 10
        fuel = 105
        towns = [self.Nizhny, self.Moscow, self.Minsk, self.Warsaw]
        random_town = random.randint(0, len(towns) - 1)
        if time.localtime().tm_hour < 5:
            town = self.night
        else:
            town = towns[random_town]
        print("Cargo\Груз: ", cargo, "To\До: ", self.town_dict[str(town)])
        order_time = random.randint(600, 1800)
        start_time = time.perf_counter()
        random_km = random.randint(1, 100)
        startrand = 0
        player = '\x1b[38;5;0;48;5;196m U \x1b[0m'
        while True:
            random_biom = random.randint(1, 3)
            luck = random.randint(1, 3)
            if luck == 2:
                random_fuel = random.randint(self.km, random_km + 1)
            to_sleep = random.randint(self.km, random_km + 1)
            if random_biom == 1:
                while self.km <= random_km:
                    for i in range(len(self.world)):
                        for j in range(len(self.world[i])):
                            if 0 < i < 4 and 0 < j < 10:
                                random_color = random.randint(0, 1)
                                self.world[i][j] = f'\x1b[38;5;{town[random_color]};48;5;{town[random_color]}m * \x1b[0m'
                            if 3 < i < 9:
                                if j == 5:
                                    self.world[i][j - start] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                    self.world[i][j + start] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                    start += 1
                                if 5 - start < j and 5 + start > j:
                                    self.world[i][j] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                else:
                                    if 0 < j < 10:
                                        self.world[i][j] = '\x1b[38;5;15;48;5;15m . \x1b[0m'
                            house = random.randint(1, 10)
                            if (self.km % 10)*2 == house:
                                place = random.randint(1, 5)
                                if place == 2:
                                    self.world[3][7] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[3][8] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                                    self.world[3][9] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[2][7] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                                    self.world[2][8] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[2][9] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                                if place == 3:
                                    self.world[3][1] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[3][2] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                                    self.world[3][3] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[2][1] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                                    self.world[2][2] = '\x1b[38;5;8;48;5;8m _ \x1b[0m'
                                    self.world[2][3] = '\x1b[38;5;11;48;5;214m + \x1b[0m'
                    start = 0
                    divide = random.randint(1, 20)
                    start_world = self.world
                    turn_right = False
                    turn_left = False
                    if self.km % 5 == divide:
                        self.world = [['\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'],
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;9m [ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ] \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ! \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m']]
                        print("Turn right\nПоворот направо\n")
                        turn_right = True
                        if time.localtime().tm_hour < 5:
                            town = self.night
                        else:
                            random_town = random.randint(0, len(towns) - 1)
                            town = towns[random_town]
                        for row in self.world:
                            print("".join(row))
                        divide = random.randint(1, 20)
                        self.world = start_world
                    if self.km % 3 == divide:
                        self.world = [['\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'],
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;9m [ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ] \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;0;48;5;9m _ \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m | \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', f'\x1b[38;5;{self.tree[random_color]};48;5;{self.tree[random_color]}m \\ \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;9m ! \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;11;48;5;11m . \x1b[0m', '\x1b[38;5;0;48;5;0m | \x1b[0m'], 
                            ['\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m']]
                        print("Turn left\nПоворот налево\n")
                        turn_left = True
                        if time.localtime().tm_hour < 5:
                            town = self.night
                        else:
                            random_town = random.randint(0, len(towns) - 1)
                            town = towns[random_town]
                        for row in self.world:
                            print("".join(row))
                        self.world = start_world
                    w = input("If right - d. If left - a. Forward - w. Back - s.\nНаправо - d. Налево - a. Вперёд - w. Назад - s.\n")
                    if w == "s" or w == "S":
                        self.km -= 1
                        for row in self.world:
                            print("".join(row))
                    elif w == "d" or w == "D":
                        if turn_right:
                            self.km += 1
                        else:
                            damage = random.randint(0, 1)
                            if damage == 0:
                                truck_hp -= 10
                                print("The truck is damaged.\nМашина повреждена.\n")
                            else:
                                cargo_hp -= 10
                                print("The cargo is damaged.\nГруз повреждён.\n")
                        for row in self.world:
                            print("".join(row))
                    elif w == "a" or w == "A":
                        if turn_left:
                            self.km += 1
                        else:
                            damage = random.randint(0, 1)
                            if damage == 0:
                                truck_hp -= 10
                                print("The truck is damaged.\nМашина повреждена.\n")
                            else:
                                cargo_hp -= 10
                                print("The cargo is damaged.\nГруз повреждён.\n")
                        for row in self.world:
                            print("".join(row))
                    else:
                        if turn_right == False and turn_left == False:
                            self.km += 1
                        else:
                            damage = random.randint(0, 1)
                            if damage == 0:
                                truck_hp -= 10
                                print("The truck is damaged.\nМашина повреждена.\n")
                            else:
                                cargo_hp -= 10
                                print("The cargo is damaged.\nГруз повреждён.\n")
                        for row in self.world:
                            print("".join(row))
                    self.energy -= 2 
                    fuel -= 1
                    print("Distance\Расстояние: ", self.km)
                    print("Truck HP\ХП машины: ", truck_hp)
                    print("Cargo HP\ХП груза: ", cargo_hp)
                    print("Fuel/Топливо: ", fuel)
                    print("Energy/Энергия: ", self.energy)
                    if cargo_hp <= 0:
                        print("The cargo is lost.\nГруз утерян.\n")
                        break
                    if truck_hp <= 0 and cargo_hp > 0:
                        print("The truck is broken. Wait for tow truck...\nМашина сломана. Подождите эвакуатор...\n")
                        wait = random.randint(30, 60)
                        time.sleep(wait)
                        truck_hp = 70
                    if fuel == 0:
                        print("The fuel is 0. Wait for tow truck...\nБензин закончился. Подождите эвакуатор...")
                        wait = random.randint(30, 60)
                        time.sleep(wait)
                        fuel = 50
                    if luck == 2:
                        if self.km == random_fuel:
                            for row in self.fuelstation:
                                print("".join(row))
                            refuel = input("\nThere`s a fuel station. Do you want to refuel? If yes, say something. It will cost you 100 money.\nElse, skip (press Enter).\n")
                            if refuel != "":
                                fuel = 100
                                self.money -= 100
                    if self.energy <= 0:
                        sleep = random.randint(self.km, self.km + 10)
                        if self.km == sleep:
                            self.world = [['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m']]
                    if self.km == to_sleep:
                        for row in self.bed:
                            print("".join(row))
                        sleep_yesorno = input("You found place for sleeping! Do you want to sleep? If yes, say something. Else, skip.\nВы нашли место для сна! Хотите отдохнуть? Если да, скажите что нибудь. Если нет, пропустите.\n")
                        if sleep_yesorno != "":
                            for yes in range(len(self.bed)):
                                for no in range(len(self.bed[0])):
                                    random_dream = random.randint(0, len(self.dream) - 1)
                                    self.bed[yes][no] = f'\x1b[38;5;{self.dream[random_dream]};48;5;{self.dream[random_dream]}m . \x1b[0m'
                                    for row in self.bed:
                                        print("".join(row))
                            self.energy += 100
                    if self.km == random_km:
                        startrand = random_km
                        random_km = random.randint(self.km, 100)
                        random_biom = random.randint(1, 3)
                        if random_biom == 1:
                            for wd in range(10):
                                self.world[0][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[9][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[wd][0] = '\x1b[38;5;0;48;5;0m | \x1b[0m'
                            if wd == 9:
                                break
            elif random_biom == 2:
                car1 = '\x1b[38;5;226;48;5;226m o \x1b[0m'
                car2 = '\x1b[38;5;226;48;5;10m o \x1b[0m'
                car3 = '\x1b[38;5;226;48;5;12m o \x1b[0m'
                car4 = '\x1b[38;5;226;48;5;9m o \x1b[0m'
                car5 = '\x1b[38;5;226;48;5;201m o \x1b[0m'
                car6 = '\x1b[38;5;226;48;5;226m o \x1b[0m'
                car7 = '\x1b[38;5;226;48;5;10m o \x1b[0m'
                car8 = '\x1b[38;5;226;48;5;12m o \x1b[0m'
                car9 = '\x1b[38;5;226;48;5;9m o \x1b[0m'
                cars = [car1, car2, car3, car4, car5, car6, car7, car8, car9]
                cars_coords = [[random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))],
                               [random.randint(0, len(self.world) - 1), random.randint(1, int(len(self.world[0])/2-2))]]
                player_coords = [4, 5]
                ctrl = ["w", "a", "s", "d"]
                while self.km != random_km:
                    for i2 in range(len(self.world)):
                        for j2 in range(len(self.world[i2])):
                            if j2 < 10:
                                random_color = random.randint(0, 1)
                                self.world[i2][j2] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                    for o in range(len(cars)):
                        random_ctrl = random.randint(0, len(ctrl) - 1)
                        if ctrl[random_ctrl] == "w":
                            if cars_coords[o][0] > 0:
                                cars_coords[o][0] -= 1
                                self.world[cars_coords[o][0] + 1][cars_coords[o][1]] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        elif ctrl[random_ctrl] == "a":
                            if cars_coords[o][1] > 0:
                                cars_coords[o][1] -= 1
                                self.world[cars_coords[o][0]][cars_coords[o][1] + 1] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        elif ctrl[random_ctrl] == "s":
                            if cars_coords[o][0] < len(self.world) - 1:
                                cars_coords[o][0] += 1
                                self.world[cars_coords[o][0] - 1][cars_coords[o][1]] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        else:
                            if cars_coords[o][1] < len(self.world[0])/2-2:
                                cars_coords[o][1] += 1
                                self.world[cars_coords[o][0]][cars_coords[o][1] - 1] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        self.world[cars_coords[o][0]][cars_coords[o][1]] = cars[o]
                    what = input("If right - d. If left - a. Forward - w. Back - s.\nНаправо - d. Налево - a. Вперёд - w. Назад - s.\n")
                    if what == "d" or what == "D":
                        if player_coords[1] < 9:
                            player_coords[1] += 1
                            self.world[player_coords[0]][player_coords[1] - 1] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        else:
                            player_coords[1] -= 1
                    elif what == "a" or what == "A":
                        if player_coords[1] > 0:
                            player_coords[1] -= 1
                            self.world[player_coords[0]][player_coords[1] + 1] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        else:
                            player_coords[1] += 1
                    elif what == "s" or what == "S":
                        if player_coords[0] < 8:
                            player_coords[0] += 1
                            self.world[player_coords[0] - 1][player_coords[1]] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        else:
                            player_coords[0] -= 1
                    else:
                        if player_coords[0] > 1:
                            player_coords[0] -= 1
                            self.world[player_coords[0] + 1][player_coords[1]] = '\x1b[38;5;8;48;5;8m | \x1b[0m'
                        else:
                            player_coords[0] += 1
                    self.world[player_coords[0]][player_coords[1]] = player
                    for how in range(len(cars)):
                        if ((self.world[player_coords[0] - 1][player_coords[1]] == cars[how] and (ctrl[random_ctrl] == "s" or (what != "s" and what != "S" and what != "d" and what != "D" and what != "a" and what != "A"))) or (self.world[player_coords[0]][player_coords[1] - 1] == cars[how] and (ctrl[random_ctrl] == "d" or what == "a" or what == "A")) or (self.world[player_coords[0] + 1][player_coords[1]] == cars[how] and (ctrl[random_ctrl] == "w" or what == "s" or what == "S")) or (self.world[player_coords[0]][player_coords[1] + 1] == cars[how] and (ctrl[random_ctrl] == "a" or what == "d" or what == "D"))) and self.km > startrand + 1:
                            truck_hp -= 20
                            cargo_hp -= 10
                            print("Car accident!\nАвария!\n")
                    if cargo_hp <= 0:
                        print("The cargo is lost.\nГруз утерян.\n")
                        break
                    if truck_hp <= 0 and cargo_hp != 0:
                        print("The truck is broken. Wait for tow truck...\nМашина сломана. Подождите эвакуатор...\n")
                        wait = random.randint(30, 60)
                        time.sleep(wait)
                        truck_hp = 70
                    if fuel == 0:
                        print("You have no fuel. Wait for tow truck...\nТоплива нет. Подождите эвакуатор...\n")
                        t_wait = random.randint(30, 60)
                        time.sleep(t_wait)
                        fuel = 70
                    if self.energy <= 0:
                        sleep = random.randint(self.km, self.km + 10)
                        if self.km == sleep:
                            self.world = [['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m']]
                    if self.km == to_sleep:
                        for row in self.bed:
                            print("".join(row))
                        sleep_yesorno = input("You found place for sleeping! Do you want to sleep? If yes, say something. Else, skip.\nВы нашли место для сна! Хотите отдохнуть? Если да, скажите что нибудь. Если нет, пропустите.\n")
                        if sleep_yesorno != "":
                            for yes in range(len(self.bed)):
                                for no in range(len(self.bed[0])):
                                    random_dream = random.randint(0, len(self.dream) - 1)
                                    self.bed[yes][no] = f'\x1b[38;5;{self.dream[random_dream]};48;5;{self.dream[random_dream]}m . \x1b[0m'
                                    for row in self.bed:
                                        print("".join(row))
                                    time.sleep(1)
                            self.energy += 100
                    if luck == 2:
                        if self.km == random_fuel:
                            for row in self.fuelstation:
                                print("".join(row))
                            refuel = input("\nThere`s a fuel station. Do you want to refuel? If yes, say something. It will cost you 100 money.\nElse, skip (press Enter).\n")
                            if refuel != "":
                                fuel += 100
                                self.money -= 100
                    for row in self.world:
                        print("".join(row))
                    self.km += 1
                    fuel -= 1
                    self.energy -= 5
                    print("Distance\Расстояние: ", self.km)
                    print("Truck HP\ХП машины: ", truck_hp)
                    print("Cargo HP\ХП груза: ", cargo_hp)
                    print("Fuel/Топливо: ", fuel)
                    print("Energy/Энергия: ", self.energy)
                    if self.km == random_km:
                        startrand = random_km
                        random_km = random.randint(self.km, 100)
                        random_biom = random.randint(1, 3)
                        if random_biom == 1:
                            for wd in range(10):
                                self.world[0][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[9][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[wd][0] = '\x1b[38;5;0;48;5;0m | \x1b[0m'
                            if wd == 9:
                                break
            else:
                mount = random.randint(1, 3)
                if mount == 1 or mount == 3:
                    player_coords = [1, 1]
                else:
                    player_coords = [3, 8]
                while self.km != random_km:
                    for idk in range(len(self.world)):
                        for hi in range(len(self.world[idk])):
                            random_color = random.randint(0, 1)
                            if mount == 1:
                                if hi <= idk:
                                    self.world[idk][hi] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                if hi > idk and hi < 10:
                                    self.world[idk][hi] = f'\x1b[38;5;{town[random_color]};48;5;{town[random_color]}m * \x1b[0m'
                            elif mount == 2:
                                if idk < 4 and hi < 10:
                                    self.world[idk][hi] = '\x1b[38;5;15;48;5;15m . \x1b[0m'
                                if idk >= 4 and hi < 10:
                                    self.world[idk][hi] = f'\x1b[38;5;{town[random_color]};48;5;{town[random_color]}m * \x1b[0m'
                            else:
                                if hi >= idk and hi < 10:
                                    self.world[idk][hi] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                if hi <= idk and hi < 10:
                                    self.world[idk][hi] = f'\x1b[38;5;{town[random_color]};48;5;{town[random_color]}m * \x1b[0m'
                    if mount == 1:
                        to_do = input("Forward - w. Back - s.\nВперёд - w. Назад - s.\n")
                        if to_do == "s":
                            if player_coords[0] > 0 and player_coords[1] > 0:
                                player_coords[0] -= 1
                                player_coords[1] -= 1
                                self.world[player_coords[0] + 1][player_coords[1] + 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                        else:
                            if player_coords[0] < 10 and player_coords[1] < 8:
                                player_coords[0] += 1
                                player_coords[1] += 1
                                self.world[player_coords[0] - 1][player_coords[1] - 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                self.km += 1
                    elif mount == 2:
                        tm2_1 = time.perf_counter()
                        to_do = input("Back - w. Forward - s.\nНазад - w. Вперёд - s.\n")
                        tm2_2 = time.perf_counter()
                        if (to_do == "s" or to_do == "S") and tm2_2 - tm2_1 <= 2:
                            if player_coords[1] > 0:
                                player_coords[1] -= 1
                                self.world[player_coords[0]][player_coords[1] + 1] = '\x1b[38;5;15;48;5;15m . \x1b[0m'
                                self.km += 1
                        elif (to_do == "w" or to_do == "W") and tm2_2 - tm2_1 <= 2:
                            if player_coords[1] < 8:
                                player_coords[1] += 1
                                self.world[player_coords[0]][player_coords[1] - 1] = '\x1b[38;5;15;48;5;15m . \x1b[0m'
                        else:
                            if self.km > startrand + 1:
                                truck_hp = 0
                                cargo_hp = 0
                                print("The truck is fell. Cargo is lost.\nМашина упала. Груз утерян(\n")
                                break
                    else:
                        tm3_1 = time.perf_counter()
                        to_do = input("Forward - w. Back - s.\nВперёд - w. Назад - s.\n")
                        tm3_2 = time.perf_counter()
                        if (to_do == "s" or to_do == "S") and tm3_2 - tm3_1 <= 2:
                            if player_coords[0] > 0 and player_coords[1] > 0:
                                player_coords[0] -= 1
                                player_coords[1] -= 1
                                self.world[player_coords[0] + 1][player_coords[1] + 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                        elif (to_do == "w" or to_do == "W") and tm3_2 - tm3_1 <= 2:
                            if player_coords[0] < 10 and player_coords[1] < 8:
                                player_coords[0] += 1
                                player_coords[1] += 1
                                self.world[player_coords[0] - 1][player_coords[1] - 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                self.km += 1
                        else:
                            if self.km > startrand + 1:
                                truck_hp = 0
                                cargo_hp = 0  
                                print("The truck is fell. Cargo is lost.\nМашина упала. Груз утерян(\n")
                                break
                    self.world[player_coords[0]][player_coords[1]] = player
                    for row in self.world:
                        print("".join(row))
                    if mount == 2:
                        if player_coords[1] == 0:
                            mount = random.randint(1, 3)
                            if mount == 1 or mount == 3:
                                player_coords = [1, 1]
                            else:
                                player_coords = [3, 8]
                    if mount == 1 or mount == 3:
                        if player_coords[1] == 8:
                            mount = random.randint(1, 3)
                            if mount == 1 or mount == 3:
                                player_coords = [1, 1]
                            else:
                                player_coords = [3, 8]
                    self.energy -= 3
                    fuel -= 1
                    if fuel == 0:
                        if mount == 1:
                            print("You have no fuel. Wait for tow truck...\nТоплива нет. Подождите эвакуатор...\n")
                        else:
                            print("You have no fuel. Let`s turn off gravity and wait for tow truck...\nТоплива нет. Давайте отключим гравитацию и подождём эвакуатор...\n")
                        t_wait = random.randint(30, 60)
                        time.sleep(t_wait)
                        fuel = 70
                    if self.energy <= 0:
                        sleep = random.randint(self.km, self.km + 10)
                        if self.km == sleep:
                            self.world = [['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m'],
                                        ['\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m', '\x1b[38;5;0;48;5;0m . \x1b[0m']]
                    if self.km == to_sleep:
                        for row in self.bed:
                            print("".join(row))
                        sleep_yesorno = input("You found place for sleeping! Do you want to sleep? If yes, say something. Else, skip.\nВы нашли место для сна! Хотите отдохнуть? Если да, скажите что нибудь. Если нет, пропустите.\n")
                        if sleep_yesorno != "":
                            for yes in range(len(self.bed)):
                                for no in range(len(self.bed[0])):
                                    random_dream = random.randint(0, len(self.dream) - 1)
                                    self.bed[yes][no] = f'\x1b[38;5;{self.dream[random_dream]};48;5;{self.dream[random_dream]}m . \x1b[0m'
                                    for row in self.bed:
                                        print("".join(row))
                                    time.sleep(1)
                            self.energy += 100
                    if luck == 2:
                        if self.km == random_fuel:
                            for row in self.fuelstation:
                                print("".join(row))
                            refuel = input("\nThere`s a fuel station. Do you want to refuel? If yes, say something. It will cost you 100 money.\nElse, skip (press Enter).\n")
                            if refuel != "":
                                fuel += 100
                                self.money -= 100
                    print("Distance\Расстояние: ", self.km)
                    print("Truck HP\ХП машины: ", truck_hp)
                    print("Cargo HP\ХП груза: ", cargo_hp)
                    print("Fuel/Топливо: ", fuel)
                    print("Energy/Энергия: ", self.energy)
                    if self.km == random_km:
                        startrand = random_km
                        random_km = random.randint(self.km, 100)
                        random_biom = random.randint(1, 3)
                        if random_biom == 1:
                            for wd in range(10):
                                self.world[0][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[9][wd] = '\x1b[38;5;0;48;5;0m - \x1b[0m'
                                self.world[wd][0] = '\x1b[38;5;0;48;5;0m | \x1b[0m'
                            if wd == 9:
                                break
            if self.km >= 100:
                fuel += 100
                end_time = time.perf_counter()
                delta = end_time - start_time
                self.money += int(1/delta*order_time*fuel)
                print("Your money/Зарплата: ", self.money)
                order_time = time.perf_counter()
                if cargo == "oil" or cargo == "ketchup":
                    print(f"You`re in {self.town_dict[str(town)]}. Wait for the finish of {cargo} drain and take the new cargo\nВы в {self.town_dict[str(town)]}. Подождите пока сольют {cargo}. Затем возьмите новый груз.\n")
                    time.sleep(30)
                elif cargo == "sand" or cargo == "cement" or cargo == "uranium":
                    print(f"You`re in {self.town_dict[str(town)]}. Now, unload the {cargo} and take the new cargo.\nВы в {self.town_dict[str(town)]}. Теперь выгрузите {cargo}. Затем возьмите новый груз.\n")
                    world2 = [['\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m', '\x1b[38;5;0;48;5;0m - \x1b[0m'], 
                    ['\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'],
                    ['\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;0;48;5;9m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;0m O \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m', '\x1b[38;5;8;48;5;10m = \x1b[0m'], 
                    ['\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m', '\x1b[38;5;8;48;5;8m = \x1b[0m'], 
                    ['\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m', '\x1b[38;5;0;48;5;0m _ \x1b[0m']]
                    world2[6][5] = self.player
                    coords_list = [6, 5]
                    withbag = False
                    bags = 0
                    while bags <= 10:
                        for a in range(len(world2)):
                            for y in range(len(world2[a])):
                                if world2[a][y] == self.player:
                                    coords_list = [a, y]
                        for row in world2:
                            print("".join(row))
                        action = input("W - up. A - left. S - down. D - right.\n")
                        if action == "w" or action == "W":
                            if [coords_list[0] - 1] != 0:
                                world2[coords_list[0] - 1][coords_list[1]] = self.player
                            else:
                                world2[coords_list[0]][coords_list[1]] = self.player
                        elif action == "a" or action == "A":
                            if world2[coords_list[0]][coords_list[1] - 1] != '\x1b[38;5;0;48;5;9m = \x1b[0m':
                                world2[coords_list[0]][coords_list[1] - 1] = self.player
                            else:
                                world2[coords_list[0]][coords_list[1]] = self.player
                        elif action == "s" or action == "S":
                            if coords_list[0] + 1 != len(world2) - 1:
                                world2[coords_list[0] + 1][coords_list[1]] = self.player
                            else:
                                world2[coords_list[0]][coords_list[1]] = self.player
                        else:
                            if coords_list[1] < len(world2[0]) - 1 and world2[coords_list[0]][coords_list[1] + 1] != '\x1b[38;5;8;48;5;10m = \x1b[0m':
                                world2[coords_list[0]][coords_list[1] + 1] = self.player
                            else:
                                world2[coords_list[0]][coords_list[1]] = self.player
                        world2[coords_list[0]][coords_list[1]] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                        if world2[coords_list[0]][coords_list[1] - 1] == '\x1b[38;5;0;48;5;9m = \x1b[0m':
                            withbag = True
                            bag = '\x1b[38;5;0;48;5;226m _ \x1b[0m'
                        if withbag == True:
                            world2[coords_list[0] - 1][coords_list[1]] = bag
                            if coords_list[1] > 2:
                                world2[coords_list[0] - 1][coords_list[1] - 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                                if 0 < coords_list[1] < 15:
                                    world2[coords_list[0] - 1][coords_list[1] + 1] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                            if action == "s" or action == "S":
                                world2[coords_list[0] - 1][coords_list[1]] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                            if action == "w" or action == "W":
                                world2[coords_list[0] + 1][coords_list[1]] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                        if withbag == True and coords_list[1] == len(world2[0]) - 4:
                            withbag = False
                            bags += 1
                            world2[coords_list[0] - 1][coords_list[1]] = '\x1b[38;5;8;48;5;8m = \x1b[0m'
                cargo = random.randint(0, len(self.cargo) - 1)
                cargo = self.cargo[cargo]
                if time.localtime().tm_hour < 5:
                    town = self.night
                else:
                    town = towns[random_town]
                print("Cargo\Груз: ", cargo, "To\До: ", self.town_dict[str(town)])
                self.km = 0
                fuel = 70
            if cargo_hp <= 0:
                break
def run():
    Driver().game()