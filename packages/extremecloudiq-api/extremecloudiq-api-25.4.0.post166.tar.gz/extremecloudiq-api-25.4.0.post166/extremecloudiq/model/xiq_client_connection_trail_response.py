# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqClientConnectionTrailResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqTopologyViewLink']:
                        return XiqTopologyViewLink
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqTopologyViewLink'], typing.List['XiqTopologyViewLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqTopologyViewLink':
                    return super().__getitem__(i)
            
            
            class nodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqTopologyViewNode']:
                        return XiqTopologyViewNode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqTopologyViewNode'], typing.List['XiqTopologyViewNode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nodes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqTopologyViewNode':
                    return super().__getitem__(i)
            baseline = schemas.BoolSchema
            user_initiated = schemas.BoolSchema
            created_at = schemas.Int64Schema
            zoom = schemas.Float64Schema
        
            @staticmethod
            def pan() -> typing.Type['XiqPosition']:
                return XiqPosition
            
            
            class neighbors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqNeighborAp']:
                        return XiqNeighborAp
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqNeighborAp'], typing.List['XiqNeighborAp']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'neighbors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqNeighborAp':
                    return super().__getitem__(i)
            __annotations__ = {
                "links": links,
                "nodes": nodes,
                "baseline": baseline,
                "user_initiated": user_initiated,
                "created_at": created_at,
                "zoom": zoom,
                "pan": pan,
                "neighbors": neighbors,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseline"]) -> MetaOapg.properties.baseline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_initiated"]) -> MetaOapg.properties.user_initiated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoom"]) -> MetaOapg.properties.zoom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pan"]) -> 'XiqPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbors"]) -> MetaOapg.properties.neighbors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["links", "nodes", "baseline", "user_initiated", "created_at", "zoom", "pan", "neighbors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseline"]) -> typing.Union[MetaOapg.properties.baseline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_initiated"]) -> typing.Union[MetaOapg.properties.user_initiated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoom"]) -> typing.Union[MetaOapg.properties.zoom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pan"]) -> typing.Union['XiqPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbors"]) -> typing.Union[MetaOapg.properties.neighbors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["links", "nodes", "baseline", "user_initiated", "created_at", "zoom", "pan", "neighbors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, list, tuple, schemas.Unset] = schemas.unset,
        baseline: typing.Union[MetaOapg.properties.baseline, bool, schemas.Unset] = schemas.unset,
        user_initiated: typing.Union[MetaOapg.properties.user_initiated, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        zoom: typing.Union[MetaOapg.properties.zoom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pan: typing.Union['XiqPosition', schemas.Unset] = schemas.unset,
        neighbors: typing.Union[MetaOapg.properties.neighbors, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqClientConnectionTrailResponse':
        return super().__new__(
            cls,
            *_args,
            links=links,
            nodes=nodes,
            baseline=baseline,
            user_initiated=user_initiated,
            created_at=created_at,
            zoom=zoom,
            pan=pan,
            neighbors=neighbors,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_neighbor_ap import XiqNeighborAp
from extremecloudiq.model.xiq_position import XiqPosition
from extremecloudiq.model.xiq_topology_view_link import XiqTopologyViewLink
from extremecloudiq.model.xiq_topology_view_node import XiqTopologyViewNode
