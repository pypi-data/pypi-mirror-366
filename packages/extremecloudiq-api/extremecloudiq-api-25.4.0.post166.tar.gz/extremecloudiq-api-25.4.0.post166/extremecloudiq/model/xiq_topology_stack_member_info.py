# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTopologyStackMemberInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            stack_member_id = schemas.Int64Schema
            device_id = schemas.Int64Schema
            serial_number = schemas.StrSchema
            unit_number = schemas.Int32Schema
            member_type = schemas.StrSchema
        
            @staticmethod
            def poe_info() -> typing.Type['XiqTopologyViewNodePoeInfo']:
                return XiqTopologyViewNodePoeInfo
            __annotations__ = {
                "stack_member_id": stack_member_id,
                "device_id": device_id,
                "serial_number": serial_number,
                "unit_number": unit_number,
                "member_type": member_type,
                "poe_info": poe_info,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stack_member_id"]) -> MetaOapg.properties.stack_member_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_number"]) -> MetaOapg.properties.unit_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["member_type"]) -> MetaOapg.properties.member_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_info"]) -> 'XiqTopologyViewNodePoeInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stack_member_id", "device_id", "serial_number", "unit_number", "member_type", "poe_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stack_member_id"]) -> typing.Union[MetaOapg.properties.stack_member_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_number"]) -> typing.Union[MetaOapg.properties.unit_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["member_type"]) -> typing.Union[MetaOapg.properties.member_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_info"]) -> typing.Union['XiqTopologyViewNodePoeInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stack_member_id", "device_id", "serial_number", "unit_number", "member_type", "poe_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        stack_member_id: typing.Union[MetaOapg.properties.stack_member_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        unit_number: typing.Union[MetaOapg.properties.unit_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        member_type: typing.Union[MetaOapg.properties.member_type, str, schemas.Unset] = schemas.unset,
        poe_info: typing.Union['XiqTopologyViewNodePoeInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTopologyStackMemberInfo':
        return super().__new__(
            cls,
            *_args,
            stack_member_id=stack_member_id,
            device_id=device_id,
            serial_number=serial_number,
            unit_number=unit_number,
            member_type=member_type,
            poe_info=poe_info,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_topology_view_node_poe_info import XiqTopologyViewNodePoeInfo
