# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTopologyViewLink(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            source = schemas.Int64Schema
            source_port_id = schemas.StrSchema
            source_lag = schemas.StrSchema
            destination = schemas.Int64Schema
            destination_port_id = schemas.StrSchema
            destination_lag = schemas.StrSchema
            index = schemas.Int32Schema
            connected = schemas.BoolSchema
            
            
            class connection_mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LLDP": "LLDP",
                        "CLIENT": "CLIENT",
                        "UNKNOWNDEVICE": "UNKNOWNDEVICE",
                        "MESH": "MESH",
                        "VGVA": "VGVA",
                        "FAKEGATEWAY": "FAKEGATEWAY",
                    }
                
                @schemas.classproperty
                def LLDP(cls):
                    return cls("LLDP")
                
                @schemas.classproperty
                def CLIENT(cls):
                    return cls("CLIENT")
                
                @schemas.classproperty
                def UNKNOWNDEVICE(cls):
                    return cls("UNKNOWNDEVICE")
                
                @schemas.classproperty
                def MESH(cls):
                    return cls("MESH")
                
                @schemas.classproperty
                def VGVA(cls):
                    return cls("VGVA")
                
                @schemas.classproperty
                def FAKEGATEWAY(cls):
                    return cls("FAKEGATEWAY")
            __annotations__ = {
                "source": source,
                "source_port_id": source_port_id,
                "source_lag": source_lag,
                "destination": destination,
                "destination_port_id": destination_port_id,
                "destination_lag": destination_lag,
                "index": index,
                "connected": connected,
                "connection_mode": connection_mode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_port_id"]) -> MetaOapg.properties.source_port_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_lag"]) -> MetaOapg.properties.source_lag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> MetaOapg.properties.destination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_port_id"]) -> MetaOapg.properties.destination_port_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_lag"]) -> MetaOapg.properties.destination_lag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_mode"]) -> MetaOapg.properties.connection_mode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "source_port_id", "source_lag", "destination", "destination_port_id", "destination_lag", "index", "connected", "connection_mode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_port_id"]) -> typing.Union[MetaOapg.properties.source_port_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_lag"]) -> typing.Union[MetaOapg.properties.source_lag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union[MetaOapg.properties.destination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_port_id"]) -> typing.Union[MetaOapg.properties.destination_port_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_lag"]) -> typing.Union[MetaOapg.properties.destination_lag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_mode"]) -> typing.Union[MetaOapg.properties.connection_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "source_port_id", "source_lag", "destination", "destination_port_id", "destination_lag", "index", "connected", "connection_mode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        source: typing.Union[MetaOapg.properties.source, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source_port_id: typing.Union[MetaOapg.properties.source_port_id, str, schemas.Unset] = schemas.unset,
        source_lag: typing.Union[MetaOapg.properties.source_lag, str, schemas.Unset] = schemas.unset,
        destination: typing.Union[MetaOapg.properties.destination, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        destination_port_id: typing.Union[MetaOapg.properties.destination_port_id, str, schemas.Unset] = schemas.unset,
        destination_lag: typing.Union[MetaOapg.properties.destination_lag, str, schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, bool, schemas.Unset] = schemas.unset,
        connection_mode: typing.Union[MetaOapg.properties.connection_mode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTopologyViewLink':
        return super().__new__(
            cls,
            *_args,
            source=source,
            source_port_id=source_port_id,
            source_lag=source_lag,
            destination=destination,
            destination_port_id=destination_port_id,
            destination_lag=destination_lag,
            index=index,
            connected=connected,
            connection_mode=connection_mode,
            _configuration=_configuration,
            **kwargs,
        )
