# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTopologyViewNodeVlanInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            mgmt_vlan = schemas.Int32Schema
            native_vlan = schemas.Int32Schema
            
            
            class access_port_vlans(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_port_vlans':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class trunk_port_vlans(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trunk_port_vlans':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_profile_vlans(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_profile_vlans':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "mgmt_vlan": mgmt_vlan,
                "native_vlan": native_vlan,
                "access_port_vlans": access_port_vlans,
                "trunk_port_vlans": trunk_port_vlans,
                "user_profile_vlans": user_profile_vlans,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmt_vlan"]) -> MetaOapg.properties.mgmt_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_vlan"]) -> MetaOapg.properties.native_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_port_vlans"]) -> MetaOapg.properties.access_port_vlans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trunk_port_vlans"]) -> MetaOapg.properties.trunk_port_vlans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profile_vlans"]) -> MetaOapg.properties.user_profile_vlans: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mgmt_vlan", "native_vlan", "access_port_vlans", "trunk_port_vlans", "user_profile_vlans", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmt_vlan"]) -> typing.Union[MetaOapg.properties.mgmt_vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_vlan"]) -> typing.Union[MetaOapg.properties.native_vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_port_vlans"]) -> typing.Union[MetaOapg.properties.access_port_vlans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trunk_port_vlans"]) -> typing.Union[MetaOapg.properties.trunk_port_vlans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profile_vlans"]) -> typing.Union[MetaOapg.properties.user_profile_vlans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mgmt_vlan", "native_vlan", "access_port_vlans", "trunk_port_vlans", "user_profile_vlans", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mgmt_vlan: typing.Union[MetaOapg.properties.mgmt_vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        native_vlan: typing.Union[MetaOapg.properties.native_vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        access_port_vlans: typing.Union[MetaOapg.properties.access_port_vlans, list, tuple, schemas.Unset] = schemas.unset,
        trunk_port_vlans: typing.Union[MetaOapg.properties.trunk_port_vlans, list, tuple, schemas.Unset] = schemas.unset,
        user_profile_vlans: typing.Union[MetaOapg.properties.user_profile_vlans, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTopologyViewNodeVlanInfo':
        return super().__new__(
            cls,
            *_args,
            mgmt_vlan=mgmt_vlan,
            native_vlan=native_vlan,
            access_port_vlans=access_port_vlans,
            trunk_port_vlans=trunk_port_vlans,
            user_profile_vlans=user_profile_vlans,
            _configuration=_configuration,
            **kwargs,
        )
