# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTopologyViewNodePoeInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class power_state(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'power_state':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            unit_power_available = schemas.Float64Schema
            unit_power_consumed = schemas.Float64Schema
            unit_power_threshold = schemas.Float64Schema
            poe_power_available = schemas.Float64Schema
            poe_power_consumed = schemas.Float64Schema
            poe_power_threshold = schemas.Float64Schema
            __annotations__ = {
                "power_state": power_state,
                "unit_power_available": unit_power_available,
                "unit_power_consumed": unit_power_consumed,
                "unit_power_threshold": unit_power_threshold,
                "poe_power_available": poe_power_available,
                "poe_power_consumed": poe_power_consumed,
                "poe_power_threshold": poe_power_threshold,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_state"]) -> MetaOapg.properties.power_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_power_available"]) -> MetaOapg.properties.unit_power_available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_power_consumed"]) -> MetaOapg.properties.unit_power_consumed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_power_threshold"]) -> MetaOapg.properties.unit_power_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_power_available"]) -> MetaOapg.properties.poe_power_available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_power_consumed"]) -> MetaOapg.properties.poe_power_consumed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_power_threshold"]) -> MetaOapg.properties.poe_power_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["power_state", "unit_power_available", "unit_power_consumed", "unit_power_threshold", "poe_power_available", "poe_power_consumed", "poe_power_threshold", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_state"]) -> typing.Union[MetaOapg.properties.power_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_power_available"]) -> typing.Union[MetaOapg.properties.unit_power_available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_power_consumed"]) -> typing.Union[MetaOapg.properties.unit_power_consumed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_power_threshold"]) -> typing.Union[MetaOapg.properties.unit_power_threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_power_available"]) -> typing.Union[MetaOapg.properties.poe_power_available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_power_consumed"]) -> typing.Union[MetaOapg.properties.poe_power_consumed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_power_threshold"]) -> typing.Union[MetaOapg.properties.poe_power_threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["power_state", "unit_power_available", "unit_power_consumed", "unit_power_threshold", "poe_power_available", "poe_power_consumed", "poe_power_threshold", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        power_state: typing.Union[MetaOapg.properties.power_state, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        unit_power_available: typing.Union[MetaOapg.properties.unit_power_available, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unit_power_consumed: typing.Union[MetaOapg.properties.unit_power_consumed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unit_power_threshold: typing.Union[MetaOapg.properties.unit_power_threshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        poe_power_available: typing.Union[MetaOapg.properties.poe_power_available, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        poe_power_consumed: typing.Union[MetaOapg.properties.poe_power_consumed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        poe_power_threshold: typing.Union[MetaOapg.properties.poe_power_threshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTopologyViewNodePoeInfo':
        return super().__new__(
            cls,
            *_args,
            power_state=power_state,
            unit_power_available=unit_power_available,
            unit_power_consumed=unit_power_consumed,
            unit_power_threshold=unit_power_threshold,
            poe_power_available=poe_power_available,
            poe_power_consumed=poe_power_consumed,
            poe_power_threshold=poe_power_threshold,
            _configuration=_configuration,
            **kwargs,
        )
