# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.0-166
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTopologyViewNode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            hostname = schemas.StrSchema
            mac_address = schemas.StrSchema
            ip_address = schemas.StrSchema
            port_number = schemas.StrSchema
            radio_info = schemas.StrSchema
            health_score = schemas.Int32Schema
            client_count = schemas.Int64Schema
            last_node = schemas.BoolSchema
            topology_start_node = schemas.BoolSchema
            connected = schemas.BoolSchema
        
            @staticmethod
            def vlan_info() -> typing.Type['XiqTopologyViewNodeVlanInfo']:
                return XiqTopologyViewNodeVlanInfo
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WIRELESS_CLIENT": "WIRELESS_CLIENT",
                        "WIRED_CLIENT": "WIRED_CLIENT",
                        "UNKNOWN": "UNKNOWN",
                        "AP": "AP",
                        "MESHAP": "MESHAP",
                        "PORTALAP": "PORTALAP",
                        "SWITCH": "SWITCH",
                        "ROUTER": "ROUTER",
                        "VAASL2VG": "VAASL2VG",
                        "VAASL3VG": "VAASL3VG",
                        "GATEWAY": "GATEWAY",
                        "STACK": "STACK",
                        "APASROUTER": "APASROUTER",
                        "XMCSERVER": "XMCSERVER",
                    }
                
                @schemas.classproperty
                def WIRELESS_CLIENT(cls):
                    return cls("WIRELESS_CLIENT")
                
                @schemas.classproperty
                def WIRED_CLIENT(cls):
                    return cls("WIRED_CLIENT")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
                
                @schemas.classproperty
                def AP(cls):
                    return cls("AP")
                
                @schemas.classproperty
                def MESHAP(cls):
                    return cls("MESHAP")
                
                @schemas.classproperty
                def PORTALAP(cls):
                    return cls("PORTALAP")
                
                @schemas.classproperty
                def SWITCH(cls):
                    return cls("SWITCH")
                
                @schemas.classproperty
                def ROUTER(cls):
                    return cls("ROUTER")
                
                @schemas.classproperty
                def VAASL2VG(cls):
                    return cls("VAASL2VG")
                
                @schemas.classproperty
                def VAASL3VG(cls):
                    return cls("VAASL3VG")
                
                @schemas.classproperty
                def GATEWAY(cls):
                    return cls("GATEWAY")
                
                @schemas.classproperty
                def STACK(cls):
                    return cls("STACK")
                
                @schemas.classproperty
                def APASROUTER(cls):
                    return cls("APASROUTER")
                
                @schemas.classproperty
                def XMCSERVER(cls):
                    return cls("XMCSERVER")
            critical_alarms = schemas.Int64Schema
            not_current_location_node = schemas.BoolSchema
        
            @staticmethod
            def unknown_device() -> typing.Type['XiqTopologyUnknownDevice']:
                return XiqTopologyUnknownDevice
            wired_interface_name = schemas.StrSchema
            connected_port = schemas.StrSchema
            
            
            class stack_member_info(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqTopologyStackMemberInfo']:
                        return XiqTopologyStackMemberInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqTopologyStackMemberInfo'], typing.List['XiqTopologyStackMemberInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stack_member_info':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqTopologyStackMemberInfo':
                    return super().__getitem__(i)
            make = schemas.StrSchema
        
            @staticmethod
            def position() -> typing.Type['XiqPosition']:
                return XiqPosition
        
            @staticmethod
            def poe_info() -> typing.Type['XiqTopologyViewNodePoeInfo']:
                return XiqTopologyViewNodePoeInfo
            product_type = schemas.StrSchema
            is_locally_managed = schemas.BoolSchema
            sim_type = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "hostname": hostname,
                "mac_address": mac_address,
                "ip_address": ip_address,
                "port_number": port_number,
                "radio_info": radio_info,
                "health_score": health_score,
                "client_count": client_count,
                "last_node": last_node,
                "topology_start_node": topology_start_node,
                "connected": connected,
                "vlan_info": vlan_info,
                "type": type,
                "critical_alarms": critical_alarms,
                "not_current_location_node": not_current_location_node,
                "unknown_device": unknown_device,
                "wired_interface_name": wired_interface_name,
                "connected_port": connected_port,
                "stack_member_info": stack_member_info,
                "make": make,
                "position": position,
                "poe_info": poe_info,
                "product_type": product_type,
                "is_locally_managed": is_locally_managed,
                "sim_type": sim_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_info"]) -> MetaOapg.properties.radio_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["health_score"]) -> MetaOapg.properties.health_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_count"]) -> MetaOapg.properties.client_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_node"]) -> MetaOapg.properties.last_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topology_start_node"]) -> MetaOapg.properties.topology_start_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlan_info"]) -> 'XiqTopologyViewNodeVlanInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["critical_alarms"]) -> MetaOapg.properties.critical_alarms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not_current_location_node"]) -> MetaOapg.properties.not_current_location_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unknown_device"]) -> 'XiqTopologyUnknownDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wired_interface_name"]) -> MetaOapg.properties.wired_interface_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_port"]) -> MetaOapg.properties.connected_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stack_member_info"]) -> MetaOapg.properties.stack_member_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> 'XiqPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_info"]) -> 'XiqTopologyViewNodePoeInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_locally_managed"]) -> MetaOapg.properties.is_locally_managed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sim_type"]) -> MetaOapg.properties.sim_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "hostname", "mac_address", "ip_address", "port_number", "radio_info", "health_score", "client_count", "last_node", "topology_start_node", "connected", "vlan_info", "type", "critical_alarms", "not_current_location_node", "unknown_device", "wired_interface_name", "connected_port", "stack_member_info", "make", "position", "poe_info", "product_type", "is_locally_managed", "sim_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_number"]) -> typing.Union[MetaOapg.properties.port_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_info"]) -> typing.Union[MetaOapg.properties.radio_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["health_score"]) -> typing.Union[MetaOapg.properties.health_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_count"]) -> typing.Union[MetaOapg.properties.client_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_node"]) -> typing.Union[MetaOapg.properties.last_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topology_start_node"]) -> typing.Union[MetaOapg.properties.topology_start_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlan_info"]) -> typing.Union['XiqTopologyViewNodeVlanInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["critical_alarms"]) -> typing.Union[MetaOapg.properties.critical_alarms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not_current_location_node"]) -> typing.Union[MetaOapg.properties.not_current_location_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unknown_device"]) -> typing.Union['XiqTopologyUnknownDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wired_interface_name"]) -> typing.Union[MetaOapg.properties.wired_interface_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_port"]) -> typing.Union[MetaOapg.properties.connected_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stack_member_info"]) -> typing.Union[MetaOapg.properties.stack_member_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union['XiqPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_info"]) -> typing.Union['XiqTopologyViewNodePoeInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_locally_managed"]) -> typing.Union[MetaOapg.properties.is_locally_managed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sim_type"]) -> typing.Union[MetaOapg.properties.sim_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "hostname", "mac_address", "ip_address", "port_number", "radio_info", "health_score", "client_count", "last_node", "topology_start_node", "connected", "vlan_info", "type", "critical_alarms", "not_current_location_node", "unknown_device", "wired_interface_name", "connected_port", "stack_member_info", "make", "position", "poe_info", "product_type", "is_locally_managed", "sim_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        port_number: typing.Union[MetaOapg.properties.port_number, str, schemas.Unset] = schemas.unset,
        radio_info: typing.Union[MetaOapg.properties.radio_info, str, schemas.Unset] = schemas.unset,
        health_score: typing.Union[MetaOapg.properties.health_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        client_count: typing.Union[MetaOapg.properties.client_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_node: typing.Union[MetaOapg.properties.last_node, bool, schemas.Unset] = schemas.unset,
        topology_start_node: typing.Union[MetaOapg.properties.topology_start_node, bool, schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, bool, schemas.Unset] = schemas.unset,
        vlan_info: typing.Union['XiqTopologyViewNodeVlanInfo', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        critical_alarms: typing.Union[MetaOapg.properties.critical_alarms, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        not_current_location_node: typing.Union[MetaOapg.properties.not_current_location_node, bool, schemas.Unset] = schemas.unset,
        unknown_device: typing.Union['XiqTopologyUnknownDevice', schemas.Unset] = schemas.unset,
        wired_interface_name: typing.Union[MetaOapg.properties.wired_interface_name, str, schemas.Unset] = schemas.unset,
        connected_port: typing.Union[MetaOapg.properties.connected_port, str, schemas.Unset] = schemas.unset,
        stack_member_info: typing.Union[MetaOapg.properties.stack_member_info, list, tuple, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        position: typing.Union['XiqPosition', schemas.Unset] = schemas.unset,
        poe_info: typing.Union['XiqTopologyViewNodePoeInfo', schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        is_locally_managed: typing.Union[MetaOapg.properties.is_locally_managed, bool, schemas.Unset] = schemas.unset,
        sim_type: typing.Union[MetaOapg.properties.sim_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTopologyViewNode':
        return super().__new__(
            cls,
            *_args,
            id=id,
            hostname=hostname,
            mac_address=mac_address,
            ip_address=ip_address,
            port_number=port_number,
            radio_info=radio_info,
            health_score=health_score,
            client_count=client_count,
            last_node=last_node,
            topology_start_node=topology_start_node,
            connected=connected,
            vlan_info=vlan_info,
            type=type,
            critical_alarms=critical_alarms,
            not_current_location_node=not_current_location_node,
            unknown_device=unknown_device,
            wired_interface_name=wired_interface_name,
            connected_port=connected_port,
            stack_member_info=stack_member_info,
            make=make,
            position=position,
            poe_info=poe_info,
            product_type=product_type,
            is_locally_managed=is_locally_managed,
            sim_type=sim_type,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_position import XiqPosition
from extremecloudiq.model.xiq_topology_stack_member_info import XiqTopologyStackMemberInfo
from extremecloudiq.model.xiq_topology_unknown_device import XiqTopologyUnknownDevice
from extremecloudiq.model.xiq_topology_view_node_poe_info import XiqTopologyViewNodePoeInfo
from extremecloudiq.model.xiq_topology_view_node_vlan_info import XiqTopologyViewNodeVlanInfo
