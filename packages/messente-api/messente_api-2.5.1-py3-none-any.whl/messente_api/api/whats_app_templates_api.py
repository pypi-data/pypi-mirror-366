# coding: utf-8

"""
    Messente API

    [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

    The version of the OpenAPI document: 2.0.0
    Contact: messente@messente.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from messente_api.models.whatsapp_create_template_request import WhatsappCreateTemplateRequest
from messente_api.models.whatsapp_create_template_response import WhatsappCreateTemplateResponse
from messente_api.models.whatsapp_list_templates_response import WhatsappListTemplatesResponse
from messente_api.models.whatsapp_template_category import WhatsappTemplateCategory
from messente_api.models.whatsapp_template_response import WhatsappTemplateResponse
from messente_api.models.whatsapp_template_status import WhatsappTemplateStatus
from messente_api.models.whatsapp_update_template_request import WhatsappUpdateTemplateRequest

from messente_api.api_client import ApiClient, RequestSerialized
from messente_api.api_response import ApiResponse
from messente_api.rest import RESTResponseType


class WhatsAppTemplatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_whatsapp_template(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        whatsapp_create_template_request: Annotated[WhatsappCreateTemplateRequest, Field(description="The WhatsApp template to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WhatsappCreateTemplateResponse:
        """Creates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param whatsapp_create_template_request: The WhatsApp template to create (required)
        :type whatsapp_create_template_request: WhatsappCreateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_whatsapp_template_serialize(
            waba_id=waba_id,
            whatsapp_create_template_request=whatsapp_create_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappCreateTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_whatsapp_template_with_http_info(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        whatsapp_create_template_request: Annotated[WhatsappCreateTemplateRequest, Field(description="The WhatsApp template to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WhatsappCreateTemplateResponse]:
        """Creates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param whatsapp_create_template_request: The WhatsApp template to create (required)
        :type whatsapp_create_template_request: WhatsappCreateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_whatsapp_template_serialize(
            waba_id=waba_id,
            whatsapp_create_template_request=whatsapp_create_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappCreateTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_whatsapp_template_without_preload_content(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        whatsapp_create_template_request: Annotated[WhatsappCreateTemplateRequest, Field(description="The WhatsApp template to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param whatsapp_create_template_request: The WhatsApp template to create (required)
        :type whatsapp_create_template_request: WhatsappCreateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_whatsapp_template_serialize(
            waba_id=waba_id,
            whatsapp_create_template_request=whatsapp_create_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappCreateTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_whatsapp_template_serialize(
        self,
        waba_id,
        whatsapp_create_template_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if waba_id is not None:
            _path_params['wabaId'] = waba_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if whatsapp_create_template_request is not None:
            _body_params = whatsapp_create_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/whatsapp/wabas/{wabaId}/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_whatsapp_template(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        name: Annotated[StrictStr, Field(description="The name of the template to delete")],
        hsm_id: Annotated[Optional[StrictStr], Field(description="The ID of the template to delete")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Deletes a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param name: The name of the template to delete (required)
        :type name: str
        :param hsm_id: The ID of the template to delete
        :type hsm_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_whatsapp_template_serialize(
            waba_id=waba_id,
            name=name,
            hsm_id=hsm_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_whatsapp_template_with_http_info(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        name: Annotated[StrictStr, Field(description="The name of the template to delete")],
        hsm_id: Annotated[Optional[StrictStr], Field(description="The ID of the template to delete")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Deletes a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param name: The name of the template to delete (required)
        :type name: str
        :param hsm_id: The ID of the template to delete
        :type hsm_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_whatsapp_template_serialize(
            waba_id=waba_id,
            name=name,
            hsm_id=hsm_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_whatsapp_template_without_preload_content(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        name: Annotated[StrictStr, Field(description="The name of the template to delete")],
        hsm_id: Annotated[Optional[StrictStr], Field(description="The ID of the template to delete")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param name: The name of the template to delete (required)
        :type name: str
        :param hsm_id: The ID of the template to delete
        :type hsm_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_whatsapp_template_serialize(
            waba_id=waba_id,
            name=name,
            hsm_id=hsm_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_whatsapp_template_serialize(
        self,
        waba_id,
        name,
        hsm_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if waba_id is not None:
            _path_params['wabaId'] = waba_id
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if hsm_id is not None:
            
            _query_params.append(('hsmId', hsm_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/whatsapp/wabas/{wabaId}/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_whatsapp_template_by_id(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WhatsappTemplateResponse:
        """Requests a WhatsApp template with the given ID


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to retrieve (required)
        :type template_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whatsapp_template_by_id_serialize(
            waba_id=waba_id,
            template_id=template_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_whatsapp_template_by_id_with_http_info(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WhatsappTemplateResponse]:
        """Requests a WhatsApp template with the given ID


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to retrieve (required)
        :type template_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whatsapp_template_by_id_serialize(
            waba_id=waba_id,
            template_id=template_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_whatsapp_template_by_id_without_preload_content(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Requests a WhatsApp template with the given ID


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to retrieve (required)
        :type template_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whatsapp_template_by_id_serialize(
            waba_id=waba_id,
            template_id=template_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappTemplateResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_whatsapp_template_by_id_serialize(
        self,
        waba_id,
        template_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if waba_id is not None:
            _path_params['wabaId'] = waba_id
        if template_id is not None:
            _path_params['templateId'] = template_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/whatsapp/wabas/{wabaId}/templates/{templateId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_whatsapp_templates(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate backwards from.")] = None,
        after: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate forwards from.")] = None,
        category: Annotated[Optional[WhatsappTemplateCategory], Field(description="A filter for returning only templates matching a specific category.")] = None,
        content: Annotated[Optional[StrictStr], Field(description="A search filter representing the content of a template. Only matching templates will be returned in the list.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.")] = None,
        status: Annotated[Optional[WhatsappTemplateStatus], Field(description="A filter for returning only templates matching a specific status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WhatsappListTemplatesResponse:
        """Requests a list of WhatsApp templates


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param limit: The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.
        :type limit: int
        :param before: A cursor point used for a paginated request to indicate the template to paginate backwards from.
        :type before: str
        :param after: A cursor point used for a paginated request to indicate the template to paginate forwards from.
        :type after: str
        :param category: A filter for returning only templates matching a specific category.
        :type category: WhatsappTemplateCategory
        :param content: A search filter representing the content of a template. Only matching templates will be returned in the list.
        :type content: str
        :param language: A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
        :type language: str
        :param name: A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
        :type name: str
        :param status: A filter for returning only templates matching a specific status.
        :type status: WhatsappTemplateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_whatsapp_templates_serialize(
            waba_id=waba_id,
            limit=limit,
            before=before,
            after=after,
            category=category,
            content=content,
            language=language,
            name=name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappListTemplatesResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_whatsapp_templates_with_http_info(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate backwards from.")] = None,
        after: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate forwards from.")] = None,
        category: Annotated[Optional[WhatsappTemplateCategory], Field(description="A filter for returning only templates matching a specific category.")] = None,
        content: Annotated[Optional[StrictStr], Field(description="A search filter representing the content of a template. Only matching templates will be returned in the list.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.")] = None,
        status: Annotated[Optional[WhatsappTemplateStatus], Field(description="A filter for returning only templates matching a specific status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WhatsappListTemplatesResponse]:
        """Requests a list of WhatsApp templates


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param limit: The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.
        :type limit: int
        :param before: A cursor point used for a paginated request to indicate the template to paginate backwards from.
        :type before: str
        :param after: A cursor point used for a paginated request to indicate the template to paginate forwards from.
        :type after: str
        :param category: A filter for returning only templates matching a specific category.
        :type category: WhatsappTemplateCategory
        :param content: A search filter representing the content of a template. Only matching templates will be returned in the list.
        :type content: str
        :param language: A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
        :type language: str
        :param name: A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
        :type name: str
        :param status: A filter for returning only templates matching a specific status.
        :type status: WhatsappTemplateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_whatsapp_templates_serialize(
            waba_id=waba_id,
            limit=limit,
            before=before,
            after=after,
            category=category,
            content=content,
            language=language,
            name=name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappListTemplatesResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_whatsapp_templates_without_preload_content(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate backwards from.")] = None,
        after: Annotated[Optional[StrictStr], Field(description="A cursor point used for a paginated request to indicate the template to paginate forwards from.")] = None,
        category: Annotated[Optional[WhatsappTemplateCategory], Field(description="A filter for returning only templates matching a specific category.")] = None,
        content: Annotated[Optional[StrictStr], Field(description="A search filter representing the content of a template. Only matching templates will be returned in the list.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) ")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.")] = None,
        status: Annotated[Optional[WhatsappTemplateStatus], Field(description="A filter for returning only templates matching a specific status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Requests a list of WhatsApp templates


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param limit: The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25.
        :type limit: int
        :param before: A cursor point used for a paginated request to indicate the template to paginate backwards from.
        :type before: str
        :param after: A cursor point used for a paginated request to indicate the template to paginate forwards from.
        :type after: str
        :param category: A filter for returning only templates matching a specific category.
        :type category: WhatsappTemplateCategory
        :param content: A search filter representing the content of a template. Only matching templates will be returned in the list.
        :type content: str
        :param language: A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
        :type language: str
        :param name: A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
        :type name: str
        :param status: A filter for returning only templates matching a specific status.
        :type status: WhatsappTemplateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_whatsapp_templates_serialize(
            waba_id=waba_id,
            limit=limit,
            before=before,
            after=after,
            category=category,
            content=content,
            language=language,
            name=name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhatsappListTemplatesResponse",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_whatsapp_templates_serialize(
        self,
        waba_id,
        limit,
        before,
        after,
        category,
        content,
        language,
        name,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if waba_id is not None:
            _path_params['wabaId'] = waba_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if after is not None:
            
            _query_params.append(('after', after))
            
        if category is not None:
            
            _query_params.append(('category', category.value))
            
        if content is not None:
            
            _query_params.append(('content', content))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if status is not None:
            
            _query_params.append(('status', status.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/whatsapp/wabas/{wabaId}/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_whatsapp_template(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to update")],
        whatsapp_update_template_request: Annotated[Optional[WhatsappUpdateTemplateRequest], Field(description="The template data to be updated")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Updates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to update (required)
        :type template_id: str
        :param whatsapp_update_template_request: The template data to be updated (required)
        :type whatsapp_update_template_request: WhatsappUpdateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_whatsapp_template_serialize(
            waba_id=waba_id,
            template_id=template_id,
            whatsapp_update_template_request=whatsapp_update_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_whatsapp_template_with_http_info(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to update")],
        whatsapp_update_template_request: Annotated[Optional[WhatsappUpdateTemplateRequest], Field(description="The template data to be updated")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Updates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to update (required)
        :type template_id: str
        :param whatsapp_update_template_request: The template data to be updated (required)
        :type whatsapp_update_template_request: WhatsappUpdateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_whatsapp_template_serialize(
            waba_id=waba_id,
            template_id=template_id,
            whatsapp_update_template_request=whatsapp_update_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_whatsapp_template_without_preload_content(
        self,
        waba_id: Annotated[StrictStr, Field(description="The ID of the WABA")],
        template_id: Annotated[StrictStr, Field(description="The ID of the template to update")],
        whatsapp_update_template_request: Annotated[Optional[WhatsappUpdateTemplateRequest], Field(description="The template data to be updated")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a WhatsApp template


        :param waba_id: The ID of the WABA (required)
        :type waba_id: str
        :param template_id: The ID of the template to update (required)
        :type template_id: str
        :param whatsapp_update_template_request: The template data to be updated (required)
        :type whatsapp_update_template_request: WhatsappUpdateTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_whatsapp_template_serialize(
            waba_id=waba_id,
            template_id=template_id,
            whatsapp_update_template_request=whatsapp_update_template_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ErrorOmnichannel",
            '401': "ErrorOmnichannel",
            '403': "ErrorOmnichannel",
            '500': "ErrorOmnichannel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_whatsapp_template_serialize(
        self,
        waba_id,
        template_id,
        whatsapp_update_template_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if waba_id is not None:
            _path_params['wabaId'] = waba_id
        if template_id is not None:
            _path_params['templateId'] = template_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if whatsapp_update_template_request is not None:
            _body_params = whatsapp_update_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/whatsapp/wabas/{wabaId}/templates/{templateId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


