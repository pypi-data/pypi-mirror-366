# coding: utf-8

"""
    Messente API

    [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

    The version of the OpenAPI document: 2.0.0
    Contact: messente@messente.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

from messente_api.api_client import ApiClient, RequestSerialized
from messente_api.api_response import ApiResponse
from messente_api.rest import RESTResponseType


class NumberVerificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def verify_number(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        to: Annotated[StrictStr, Field(description="Receiver's phone number with the country code")],
        template: Annotated[Optional[StrictStr], Field(description="Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". ")] = None,
        pin_length: Annotated[Optional[StrictStr], Field(description="Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.")] = None,
        max_tries: Annotated[Optional[StrictStr], Field(description="Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  ")] = None,
        retry_delay: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.")] = None,
        validity: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> str:
        """verify number


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param to: Receiver's phone number with the country code (required)
        :type to: str
        :param template: Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". 
        :type template: str
        :param pin_length: Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
        :type pin_length: str
        :param var_from: Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.
        :type var_from: str
        :param max_tries: Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  
        :type max_tries: str
        :param retry_delay: For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
        :type retry_delay: str
        :param validity: For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
        :type validity: str
        :param ip: IP address of the client making verification request.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_number_serialize(
            username=username,
            password=password,
            to=to,
            template=template,
            pin_length=pin_length,
            var_from=var_from,
            max_tries=max_tries,
            retry_delay=retry_delay,
            validity=validity,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_number_with_http_info(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        to: Annotated[StrictStr, Field(description="Receiver's phone number with the country code")],
        template: Annotated[Optional[StrictStr], Field(description="Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". ")] = None,
        pin_length: Annotated[Optional[StrictStr], Field(description="Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.")] = None,
        max_tries: Annotated[Optional[StrictStr], Field(description="Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  ")] = None,
        retry_delay: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.")] = None,
        validity: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[str]:
        """verify number


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param to: Receiver's phone number with the country code (required)
        :type to: str
        :param template: Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". 
        :type template: str
        :param pin_length: Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
        :type pin_length: str
        :param var_from: Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.
        :type var_from: str
        :param max_tries: Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  
        :type max_tries: str
        :param retry_delay: For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
        :type retry_delay: str
        :param validity: For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
        :type validity: str
        :param ip: IP address of the client making verification request.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_number_serialize(
            username=username,
            password=password,
            to=to,
            template=template,
            pin_length=pin_length,
            var_from=var_from,
            max_tries=max_tries,
            retry_delay=retry_delay,
            validity=validity,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_number_without_preload_content(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        to: Annotated[StrictStr, Field(description="Receiver's phone number with the country code")],
        template: Annotated[Optional[StrictStr], Field(description="Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". ")] = None,
        pin_length: Annotated[Optional[StrictStr], Field(description="Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.")] = None,
        max_tries: Annotated[Optional[StrictStr], Field(description="Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  ")] = None,
        retry_delay: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.")] = None,
        validity: Annotated[Optional[StrictStr], Field(description="For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """verify number


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param to: Receiver's phone number with the country code (required)
        :type to: str
        :param template: Template of the message, including PIN code. Placeholder for PIN code is <PIN>. When not set, default template is used: \"Your Verification PIN code is <PIN>\". 
        :type template: str
        :param pin_length: Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
        :type pin_length: str
        :param var_from: Sender name. When not set, the default Sender name \"Verigator\" is used. This sender ID also needs to be added to your account beforehand.
        :type var_from: str
        :param max_tries: Maximum number of times the PIN code is sent in total. Defaults to \"2\" - initial PIN code and one retry. It is discouraged to set this value to \"1\" as only the initial PIN code is sent and retry is disabled.  
        :type max_tries: str
        :param retry_delay: For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
        :type retry_delay: str
        :param validity: For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
        :type validity: str
        :param ip: IP address of the client making verification request.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_number_serialize(
            username=username,
            password=password,
            to=to,
            template=template,
            pin_length=pin_length,
            var_from=var_from,
            max_tries=max_tries,
            retry_delay=retry_delay,
            validity=validity,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_number_serialize(
        self,
        username,
        password,
        to,
        template,
        pin_length,
        var_from,
        max_tries,
        retry_delay,
        validity,
        ip,
        browser,
        cookie,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api2.messente.com'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if username is not None:
            
            _query_params.append(('username', username))
            
        if password is not None:
            
            _query_params.append(('password', password))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if template is not None:
            
            _query_params.append(('template', template))
            
        if pin_length is not None:
            
            _query_params.append(('pin_length', pin_length))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if max_tries is not None:
            
            _query_params.append(('max_tries', max_tries))
            
        if retry_delay is not None:
            
            _query_params.append(('retry_delay', retry_delay))
            
        if validity is not None:
            
            _query_params.append(('validity', validity))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if browser is not None:
            
            _query_params.append(('browser', browser))
            
        if cookie is not None:
            
            _query_params.append(('cookie', cookie))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiPassword', 
            'apiUsername'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/verify/start',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_pin(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        verification_id: Annotated[StrictStr, Field(description="Verification ID returned by the successful verification request.")],
        pin: Annotated[StrictStr, Field(description="PIN code entered by the user.")],
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> str:
        """verified the PIN code entered by the user.


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param verification_id: Verification ID returned by the successful verification request. (required)
        :type verification_id: str
        :param pin: PIN code entered by the user. (required)
        :type pin: str
        :param ip: IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_pin_serialize(
            username=username,
            password=password,
            verification_id=verification_id,
            pin=pin,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_pin_with_http_info(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        verification_id: Annotated[StrictStr, Field(description="Verification ID returned by the successful verification request.")],
        pin: Annotated[StrictStr, Field(description="PIN code entered by the user.")],
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[str]:
        """verified the PIN code entered by the user.


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param verification_id: Verification ID returned by the successful verification request. (required)
        :type verification_id: str
        :param pin: PIN code entered by the user. (required)
        :type pin: str
        :param ip: IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_pin_serialize(
            username=username,
            password=password,
            verification_id=verification_id,
            pin=pin,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_pin_without_preload_content(
        self,
        username: Annotated[StrictStr, Field(description="The API username")],
        password: Annotated[StrictStr, Field(description="The API password")],
        verification_id: Annotated[StrictStr, Field(description="Verification ID returned by the successful verification request.")],
        pin: Annotated[StrictStr, Field(description="PIN code entered by the user.")],
        ip: Annotated[Optional[StrictStr], Field(description="IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.")] = None,
        browser: Annotated[Optional[StrictStr], Field(description="User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".")] = None,
        cookie: Annotated[Optional[StrictStr], Field(description="Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """verified the PIN code entered by the user.


        :param username: The API username (required)
        :type username: str
        :param password: The API password (required)
        :type password: str
        :param verification_id: Verification ID returned by the successful verification request. (required)
        :type verification_id: str
        :param pin: PIN code entered by the user. (required)
        :type pin: str
        :param ip: IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
        :type ip: str
        :param browser: User Agent of the browser. For example \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\".
        :type browser: str
        :param cookie: Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_pin_serialize(
            username=username,
            password=password,
            verification_id=verification_id,
            pin=pin,
            ip=ip,
            browser=browser,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_pin_serialize(
        self,
        username,
        password,
        verification_id,
        pin,
        ip,
        browser,
        cookie,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api2.messente.com'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if username is not None:
            
            _query_params.append(('username', username))
            
        if password is not None:
            
            _query_params.append(('password', password))
            
        if verification_id is not None:
            
            _query_params.append(('verification_id', verification_id))
            
        if pin is not None:
            
            _query_params.append(('pin', pin))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if browser is not None:
            
            _query_params.append(('browser', browser))
            
        if cookie is not None:
            
            _query_params.append(('cookie', cookie))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiPassword', 
            'apiUsername'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/verify/pin',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


