# coding: utf-8

"""
    Messente API

    [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

    The version of the OpenAPI document: 2.0.0
    Contact: messente@messente.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from messente_api.models.whatsapp_component_type import WhatsappComponentType
from messente_api.models.whatsapp_header_format import WhatsappHeaderFormat
from messente_api.models.whatsapp_template_button import WhatsappTemplateButton
from messente_api.models.whatsapp_template_example import WhatsappTemplateExample
from typing import Optional, Set
from typing_extensions import Self

class WhatsappTemplateComponent(BaseModel):
    """
    Template component object
    """ # noqa: E501
    type: Optional[WhatsappComponentType] = None
    format: Optional[WhatsappHeaderFormat] = None
    text: Optional[StrictStr] = Field(default=None, description="Text content of the component")
    example: Optional[WhatsappTemplateExample] = None
    buttons: Optional[List[WhatsappTemplateButton]] = Field(default=None, description="List of buttons for the component")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "format", "text", "example", "buttons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhatsappTemplateComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of example
        if self.example:
            _dict['example'] = self.example.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in buttons (list)
        _items = []
        if self.buttons:
            for _item_buttons in self.buttons:
                if _item_buttons:
                    _items.append(_item_buttons.to_dict())
            _dict['buttons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhatsappTemplateComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "format": obj.get("format"),
            "text": obj.get("text"),
            "example": WhatsappTemplateExample.from_dict(obj["example"]) if obj.get("example") is not None else None,
            "buttons": [WhatsappTemplateButton.from_dict(_item) for _item in obj["buttons"]] if obj.get("buttons") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


