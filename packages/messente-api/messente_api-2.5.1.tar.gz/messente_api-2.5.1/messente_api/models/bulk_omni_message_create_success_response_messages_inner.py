# coding: utf-8

"""
    Messente API

    [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

    The version of the OpenAPI document: 2.0.0
    Contact: messente@messente.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from messente_api.models.error_omnichannel import ErrorOmnichannel
from messente_api.models.omni_message_create_success_response import OmniMessageCreateSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BULKOMNIMESSAGECREATESUCCESSRESPONSEMESSAGESINNER_ONE_OF_SCHEMAS = ["ErrorOmnichannel", "OmniMessageCreateSuccessResponse"]

class BulkOmniMessageCreateSuccessResponseMessagesInner(BaseModel):
    """
    BulkOmniMessageCreateSuccessResponseMessagesInner
    """
    # data type: OmniMessageCreateSuccessResponse
    oneof_schema_1_validator: Optional[OmniMessageCreateSuccessResponse] = None
    # data type: ErrorOmnichannel
    oneof_schema_2_validator: Optional[ErrorOmnichannel] = None
    actual_instance: Optional[Union[ErrorOmnichannel, OmniMessageCreateSuccessResponse]] = None
    one_of_schemas: Set[str] = { "ErrorOmnichannel", "OmniMessageCreateSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BulkOmniMessageCreateSuccessResponseMessagesInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: OmniMessageCreateSuccessResponse
        if not isinstance(v, OmniMessageCreateSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OmniMessageCreateSuccessResponse`")
        else:
            match += 1
        # validate data type: ErrorOmnichannel
        if not isinstance(v, ErrorOmnichannel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorOmnichannel`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BulkOmniMessageCreateSuccessResponseMessagesInner with oneOf schemas: ErrorOmnichannel, OmniMessageCreateSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BulkOmniMessageCreateSuccessResponseMessagesInner with oneOf schemas: ErrorOmnichannel, OmniMessageCreateSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into OmniMessageCreateSuccessResponse
        try:
            instance.actual_instance = OmniMessageCreateSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorOmnichannel
        try:
            instance.actual_instance = ErrorOmnichannel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BulkOmniMessageCreateSuccessResponseMessagesInner with oneOf schemas: ErrorOmnichannel, OmniMessageCreateSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BulkOmniMessageCreateSuccessResponseMessagesInner with oneOf schemas: ErrorOmnichannel, OmniMessageCreateSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ErrorOmnichannel, OmniMessageCreateSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


