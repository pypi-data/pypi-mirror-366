# src/glgrpa/SAP.py

# Importaciones necesarias
from selenium.webdriver.common.by import By

from .Chrome import Chrome
from .Terminal import Terminal
from .Windows import Windows

class SAP(Chrome, Windows, Terminal):    
    def __init__(self, base_url: str, usuario: str, clave: str, dev: bool = False, driver=None):
        super().__init__(dev=dev, driver=driver)
        self.base_url = base_url
        
        self.autentificacion_http_activo = False
        self.autentificacion_sap_activo = False
        self.autentificacion_microsoft_activo = False

        self.usuario_sap = usuario
        self.clave_sap = clave
        self.set_credenciales_usuario(usuario, clave)

        self.sap_iniciado = False
        
        self.mapa_transacciones = {
            'OB08': "#Shell-startGUI?sap-ui2-tcode=OB08&sap-system=FIORI_MENU",
            'FB03': '#Shell-startGUI?sap-ui2-tcode=FB03&sap-system=FIORI_MENU',
            # Agrega m√°s transacciones seg√∫n sea necesario
        }
        
    def set_credenciales_usuario(self, usuario: str, clave: str) -> dict:
        """
        Configura las credenciales del usuario de SAP.
        
        Al inicializar la clase se setean las credenciales del usuario y la clave de SAP pero se pueden cambiar en cualquier momento.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.set_credenciales_usuario('nuevo_usuario', 'nueva_clave')
        ```
        >>> {'usuario': 'nuevo_usuario', 'clave': 'nueva_clave'}
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario est√° vac√≠o.
        - Si la clave est√° vac√≠a.
        """
        
        if usuario == '':
            raise ValueError("El usuario no puede estar vac√≠o")
        if clave == '':
            raise ValueError("La clave no puede estar vac√≠a")
        
        self.usuario_sap = usuario
        self.clave_sap = clave
        self.mostrar(f"Credenciales configuradas para {self.usuario_sap}")
        
        return {
            'usuario': self.usuario_sap,
            'clave': self.clave_sap
        }
        
    def obtener_usuario_sap(self) -> str:
        """ 
        Obtiene el usuario de SAP configurado.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.obtener_usuario_sap()
        ```
        >>> 'usuario'
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario SAP no est√° configurado.
        """
        if not self.usuario_sap:
            raise ValueError("Usuario SAP no configurado. Use set_credenciales_usuario() para configurarlo.")
        
        return self.usuario_sap
    
    def obtener_clave_sap(self) -> str:
        """
        Obtiene la clave de SAP configurada.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.obtener_clave_sap()
        ```
        >>> 'clave'

        ---
        ### Raises
        #### ValueError
        - Si la clave SAP no est√° configurada.
        """
        if not self.clave_sap:
            raise ValueError("Clave SAP no configurada. Use set_credenciales_usuario() para configurarla.")
        return self.clave_sap
            
    def navegar_inicio_SAP(self) -> bool:
        """
        Navega a la p√°gina de inicio de SAP.
        
        Obtiene el driver activo, navega a la URL base de SAP y activa la ventana. Luego depende el login que se deba realizar,
        realiza la autenticaci√≥n HTTP, SAP o Microsoft seg√∫n corresponda.
        
        ---
        ### Cuidado
        Este m√©todo utiliza `pyautogui` para simular teclas, por lo que es importante que la ventana de SAP est√© activa y visible.  
        Si bien se pone en foco de forma autom√°tica, es recomendable que el usuario no interact√∫e con el teclado o el mouse durante la ejecuci√≥n de este m√©todo.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.navegar_inicio_SAP()
        ```
        >>> True  # Si SAP se inici√≥ correctamente
        
        ---
        ### Raises
        #### ValueError
        - Las opciones del driver no est√°n configuradas. Por favor, inicializa el objeto Chrome correctamente.
        - El navegador no est√° abierto. Por favor, abre el navegador antes de navegar.
        
        #### Exception
        - No se pudo obtener el PID del proceso de Chrome.
        - No se pudo activar la ventana de SAP.

        """
        self.driver = self.obtener_driver()
        self.navegar(self.base_url)
        self.activar_ventana()
        
        # Verificaci√≥n r√°pida inicial del estado
        if self.__en_pagina_de_inicio():
            self.sap_iniciado = True
            self.mostrar("‚úÖ SAP ya iniciado - sesi√≥n activa detectada")
            return self.sap_iniciado
        
        # Proceder con autenticaci√≥n seg√∫n el tipo detectado
        self.mostrar("üîê Iniciando proceso de autenticaci√≥n...")
        
        if self._autentificacion_http():
            self.mostrar("üåê Autenticaci√≥n HTTP detectada")
            import pyautogui
            pyautogui.hotkey('shift', 'tab')
            pyautogui.press('enter')
            self.demora()
            self.autentificacion_http_activo = False
            
        if self._autentificacion_sap():
            self.mostrar("üè¢ Autenticaci√≥n SAP detectada")
            self._ingresar_usuario()
            self._ingresar_contrasena(enter=True)
            self.autentificacion_sap_activo = False
        
        if self._autentificacion_microsoft():
            self.mostrar("üîê Autenticaci√≥n Microsoft detectada")
            self._ingresar_usuario()
            self._ingresar_contrasena()
            self._no_mantener_sesion_iniciada()
            self.autentificacion_microsoft_activo = False
            
        self.sap_iniciado = True
        self.mostrar("‚úÖ SAP iniciado correctamente")
        return self.sap_iniciado
    
    def __en_pagina_de_inicio(self) -> bool:
        """
        Verifica si se est√° en la p√°gina de inicio de SAP.

        Comprueba si el t√≠tulo de la p√°gina es "P√°gina de inicio", lo que indica que se ha iniciado sesi√≥n correctamente.

        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.

        ---
        ### Ejemplo
        ```python
        self.__en_pagina_de_inicio():
        ```
        >>> True
        """
        return self.driver.title == "P√°gina de inicio"
    
    def _autentificacion_http(self) -> bool:
        """
        Verifica si la autenticaci√≥n HTTP est√° activa.

        Comprueba si el t√≠tulo de la p√°gina es "SAP Logon - SAP GUI for Windows", lo que indica que se requiere autenticaci√≥n de SAP.

        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.
        
        ---
        ### Ejemplo
        ```python
        self._autentificacion_http():
        ```
        >>> True  # Si la autenticaci√≥n HTTP est√° activa
        """
        self.autentificacion_http_activo = True if self.driver.title == "" else False
        return self.autentificacion_http_activo
    
    def _autentificacion_sap(self) -> bool:
        """ 
        Verifica si la autenticaci√≥n de SAP est√° activa. 
        
        Comprueba si existe el elemento HTML "<main id="LOGIN_MAIN"></main>", lo que indica que se requiere autenticaci√≥n de SAP.
        
        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.
        
        ---
        ### Ejemplo
        ```python
        self._autentificacion_sap():
        ```
        >>> True  # Si la autenticaci√≥n SAP est√° activa
        """
        try:
            # Verificar si existe el elemento main con id LOGIN_MAIN
            login_main_element = self.encontrar_elemento(By.ID, 'LOGIN_MAIN', tiene_que_estar=False)
            self.autentificacion_sap_activo = login_main_element is not None
            
            if self.autentificacion_sap_activo:
                self.mostrar("üîç Elemento LOGIN_MAIN detectado - Autenticaci√≥n SAP requerida")
            
            return self.autentificacion_sap_activo
        except Exception as e:
            self.mostrar(f"‚ùå Error al verificar autenticaci√≥n SAP: {str(e)}", True)
            self.autentificacion_sap_activo = False
            return self.autentificacion_sap_activo
    
    def _autentificacion_microsoft(self) -> bool:
        """
        Verifica si la autenticaci√≥n de Microsoft est√° activa.
        
        Comprueba si el t√≠tulo de la p√°gina es "Iniciar sesi√≥n en la cuenta", lo que indica que se requiere autenticaci√≥n de Microsoft. 
        
        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.
            
        ---
        ### Ejemplo
        ```python
        self._autentificacion_microsoft():
        ```
        >>> True  # Si la autenticaci√≥n Microsoft est√° activa    
        """
        self.autentificacion_microsoft_activo = True if self.driver.title == "Iniciar sesi√≥n en la cuenta" else False
        return self.autentificacion_microsoft_activo
            
    def _ingresar_usuario(self, tab: bool = False) -> bool:
        """
        Ingresa el usuario de SAP.
        
        En caso de autenticaci√≥n Microsoft, ingresa el usuario en el campo correspondiente y hace clic en "Siguiente".
        En caso de autenticaci√≥n SAP, ingresa el usuario en el campo correspondiente y hace clic en "Continuar".
        
        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.
        
        ---
        ### Ejemplo
        ```python
        self._ingresar_usuario():
        ```
        >>> True  # Si el usuario se ingres√≥ correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario SAP no est√° configurado.
        - Si hay un error al ingresar el usuario de SAP con autenticaci√≥n Microsoft o SAP.
        """
        self.mostrar("Ingresando usuario de SAP")
        
        # Autenticaci√≥n Microsoft
        if self.autentificacion_microsoft_activo:
            self.ingresar_texto(By.NAME ,'loginfmt', self.obtener_usuario_sap()) 
            self.click_button("Siguiente", By.ID, 'idSIButton9')
            
            # Peque√±a demora para permitir que la p√°gina se actualice
            self.demora(1 if self.dev else 2)
            
            if self._ingreso_correcto():
                self.mostrar("Usuario ingresado correctamente")
                return True
            
            raise ValueError("Error al ingresar el usuario de SAP con autenticaci√≥n Microsoft.")
        
        # Autenticaci√≥n SAP
        if self.autentificacion_sap_activo:
            try:
                self.ingresar_texto(By.ID, 'USERNAME_FIELD-inner', self.obtener_usuario_sap())
                self.mostrar("Usuario ingresado correctamente")
                return True
            except Exception as e:
                raise ValueError("Error al ingresar el usuario de SAP con autenticaci√≥n SAP.") from e
        
        if tab:
            import pyautogui
            pyautogui.press('tab')
        
        return False
    
    def _ingresar_contrasena(self, enter: bool = False) -> bool:
        """
        Ingresa la contrase√±a de SAP.

        En caso de autenticaci√≥n Microsoft, ingresa la contrase√±a en el campo correspondiente y hace clic en "Iniciar sesi√≥n".
        En caso de autenticaci√≥n SAP, ingresa la contrase√±a en el campo correspondiente y hace clic en "Continuar".

        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.

        ---
        ### Ejemplo
        ```python
        self._ingresar_contrasena():
        ```
        >>> True  # Si la contrase√±a se ingres√≥ correctamente

        ---
        ### Raises
        #### ValueError
        - Si la contrase√±a SAP no est√° configurada.
        - Si hay un error al ingresar la contrase√±a de SAP con autenticaci√≥n Microsoft o SAP.
        """
        self.mostrar("Ingresando contrase√±a de SAP")
        
        # Autenticaci√≥n Microsoft
        if self.autentificacion_microsoft_activo:
            self.ingresar_texto(By.ID, 'i0118', self.obtener_clave_sap())
            self.click_button("Iniciar sesi√≥n", By.ID, 'idSIButton9')
            
            # Demora m√°s larga para autenticaci√≥n (proceso m√°s complejo)
            self.demora(2 if self.dev else 3)
            
            if self._ingreso_correcto():
                self.mostrar("Contrase√±a ingresada correctamente")
                return True

            raise ValueError("Error al ingresar la contrase√±a de SAP con autenticaci√≥n Microsoft.")
            
        # Autenticaci√≥n SAP
        if self.autentificacion_sap_activo:
            try:
                self.ingresar_texto(By.ID, 'PASSWORD_FIELD-inner', self.obtener_clave_sap())
                self.mostrar("Contrase√±a ingresada correctamente")
                return True
            except Exception as e:
                raise ValueError("Error al ingresar la contrase√±a de SAP con autenticaci√≥n SAP.") from e

        if enter:
            import pyautogui
            pyautogui.press('enter')
        
        return False
    
    def _no_mantener_sesion_iniciada(self) -> None:
        """
        Selecciona la opci√≥n de no mantener la sesi√≥n iniciada.

        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()` y solo cuando en caso de autenticaci√≥n Microsoft.

        ---
        ### Ejemplo
        ```python
        self._no_mantener_sesion_iniciada():
        ```
        >>> None  # Si la opci√≥n de no mantener sesi√≥n iniciada se seleccion√≥ correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si hay un error al seleccionar la opci√≥n de no mantener sesi√≥n iniciada.
        """
        self.mostrar("Seleccionando opci√≥n de no mantener sesi√≥n iniciada")
        
        self.click_button("No", By.ID, 'idBtn_Back')
        
        # Peque√±a demora para que se procese la selecci√≥n
        self.demora(1 if self.dev else 2)
        
        if self._ingreso_correcto():
            self.mostrar("Opci√≥n de no mantener sesi√≥n iniciada seleccionada correctamente")
            return

        raise ValueError("Error al seleccionar la opci√≥n de no mantener sesi√≥n iniciada.")

    def _ingreso_correcto(self) -> bool:
        """
        Verifica que se haya ingresado correctamente cada paso de autenticaci√≥n.
        
        Este m√©todo comprueba si se ha llegado a la p√°gina de inicio de SAP o si se ha encontrado un elemento espec√≠fico que indica que el ingreso fue exitoso.
        
        ---
        Se utiliza dentro de los m√©todos `_ingresar_usuario()`, `_ingresar_contrasena()` y `_no_mantener_sesion_iniciada()`.
        
        ---
        ### Ejemplo
        ```python
        self._ingreso_correcto():
        ```
        >>> True  # Si el ingreso fue correcto
        """
        # Usar verificaci√≥n r√°pida primero
        exitoso, descripcion = self._verificacion_rapida_login()
        
        if exitoso:
            self.mostrar(f"‚úÖ {descripcion}")
            return True
        
        # Si la verificaci√≥n r√°pida indica error definitivo, no continuar
        if "error" in descripcion.lower():
            self.mostrar(f"‚ùå {descripcion}", True)
            return False
        
        # Solo si estamos en estado intermedio, hacer verificaci√≥n completa pero r√°pida
        self.mostrar(f"üîç {descripcion} - Verificando elementos espec√≠ficos...")
        
        try:
            # Reducir timeout para verificaciones espec√≠ficas
            timeout_original = self.tiempo_demora
            self.tiempo_demora = 1  # 1 segundo para verificaciones r√°pidas
            
            # Verificar elementos de √©xito espec√≠ficos
            if self.encontrar_elemento(By.XPATH, '//*[@id="loginHeader"]/div', False):
                return True
            if self.encontrar_elemento(By.XPATH, '//*[@id="lightbox"]/div[3]/div/div[2]/div/div[1]', False):
                return True
                
        finally:
            # Restaurar timeout original
            self.tiempo_demora = timeout_original
        
        return False
    
    def _verificacion_rapida_login(self) -> tuple[bool, str]:
        """
        Verificaci√≥n r√°pida y optimizada del estado de login.
        
        Utiliza una estrategia de verificaci√≥n por prioridad:
        1. Verificaci√≥n de t√≠tulo (m√°s r√°pida)
        2. Verificaci√≥n de URL actual
        3. B√∫squeda r√°pida de elementos clave
        
        Returns:
            tuple[bool, str]: (estado_exitoso, descripcion_estado)
        """
        # 1. Verificaci√≥n m√°s r√°pida: t√≠tulo de p√°gina
        titulo_actual = self.driver.title
        if titulo_actual == "P√°gina de inicio":
            return True, "Login exitoso - P√°gina de inicio alcanzada"
        
        # 2. Verificaci√≥n de URL actual para detectar redirecciones
        url_actual = self.driver.current_url.lower()
        if "inicio" in url_actual or "home" in url_actual or "dashboard" in url_actual:
            return True, "Login exitoso - URL de inicio detectada"
        
        # 3. Verificaci√≥n r√°pida de elementos de error (timeout muy reducido)
        try:
            timeout_original = self.tiempo_demora
            # Timeout ultra-r√°pido: 0.3s en dev, 0.5s en prod
            self.tiempo_demora = 0.3 if self.dev else 0.5
            
            if self.encontrar_elemento(By.ID, 'usernameError', False):
                return False, "Error de usuario detectado"
            if self.encontrar_elemento(By.ID, 'passwordError', False):
                return False, "Error de contrase√±a detectado"
                
        finally:
            self.tiempo_demora = timeout_original
        
        # 4. Verificar si estamos en una p√°gina de login/autenticaci√≥n
        if any(keyword in titulo_actual.lower() for keyword in ["login", "iniciar", "autenticaci√≥n", "sign"]):
            return False, f"A√∫n en p√°gina de login: {titulo_actual}"
        
        # 5. Verificar indicadores de carga o progreso
        if any(keyword in titulo_actual.lower() for keyword in ["cargando", "loading", "procesando"]):
            return False, f"P√°gina en proceso de carga: {titulo_actual}"
        
        # 6. Si llegamos aqu√≠, asumir progreso pero no confirmar √©xito total
        return False, f"Estado intermedio - T√≠tulo: {titulo_actual}"
                
    def ir_a_transaccion(self, codigo_transaccion: str) -> None:
        """
        Navega a una transacci√≥n espec√≠fica en SAP a trav√©s de su c√≥digo.
        
        Busca la transacci√≥n en el mapa de transacciones y navega a la URL correspondiente comprobando el acceso correcto al mismo.
        
        ---
        ### Ejemplo
        ```python
        codigo_transaccion = 'OB08'
        sap = SAP(base_url='https://sap.example.com')
        sap.set_credenciales_usuario('usuario', 'clave')
        sap.navegar_inicio_SAP()
        sap.ir_a_transaccion(codigo_transaccion)
        ```
        >>> None  # Si la transacci√≥n se navega correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si SAP no ha sido iniciado
        - Si la transacci√≥n no se encuentra en el mapa de transacciones.
        - Si se encuentra una alerta desconocida.
        #### PermissionError
        - Si no se tiene acceso a la transacci√≥n.
        - Si los datos est√°n bloqueados para la transacci√≥n.        
        """
        
        if self.sap_iniciado is False:
            raise ValueError("SAP no ha sido iniciado. Use navegar_inicio_SAP() primero.")
        
        self.mostrar(f"Navegando a la transacci√≥n {codigo_transaccion}")

        transaccion = self.__obtener_transaccion_por_codigo(codigo_transaccion)
        self.navegar(f"{self.base_url}{transaccion}")
        self.__comprobar_acceso_transaccion()
        
        self.mostrar(f"Transacci√≥n {codigo_transaccion} navegada correctamente")
        
    def __obtener_transaccion_por_codigo(self, codigo_transaccion: str) -> str:
        """ 
        Obtiene la url relativa de la transacci√≥n por su c√≥digo si es que existe en el mapa de transacciones.
        Si no se encuentra, lanza una excepci√≥n.
        
        ---
        Se utiliza dentro del metodo `ir_a_transaccion()`.
        
        ---
        Ejemplo
        ```python
        codigo = 'OB08'
        transaccion = self.__obtener_transaccion_por_codigo(codigo)
        ```
        >>> "Shell-startGUI?sap-ui2-tcode=OB08&sap-system=FIORI_MENU"

        ---
        ### Raises 
        #### ValueError: 
        - Si la transacci√≥n no se encuentra en el mapa de transacciones.
        """
        
        transaccion = self.mapa_transacciones.get(codigo_transaccion)
        
        if transaccion is None:
            raise ValueError(f"Transacci√≥n {codigo_transaccion} no encontrada en el mapa de transacciones")

        return transaccion
    
    def __comprobar_acceso_transaccion(self) -> None:
        """
        Comprueba el acceso a la transacci√≥n.
        
        ---
        Se utiliza dentro del metodo `ir_a_transaccion()`.
        
        ---
        Ejemplo
        ```python
        codigo_transaccion = 'OB08'
        transaccion = self.__obtener_transaccion_por_codigo(codigo_transaccion)
        self.navegar(f"{self.base_url}{transaccion}")
        self.__comprobar_acceso_transaccion()
        ```
        >>> None  # Si el acceso a la transacci√≥n se verifica correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si se encuentra una alerta desconocida.
        #### PermissionError
        - Si no se tiene autorizaci√≥n para la transacci√≥n.
        - Si los datos est√°n bloqueados para la transacci√≥n.
        """
        self.mostrar("Comprobando acceso a la transacci√≥n")
        
        alerta = self.__buscar_alertas()
        if alerta:
            self.mostrar(f"Alerta encontrada: {alerta}", True)
            if 'No tiene autorizaci√≥n' in alerta:
                raise PermissionError("No tiene autorizaci√≥n para esta transacci√≥n")
            elif 'Datos bloqueados' in alerta:
                raise PermissionError("Datos bloqueados para esta transacci√≥n")
            else:
                raise ValueError(f"Alerta desconocida: {alerta}")   
            
        self.mostrar("Acceso verificado correctamente")         
    
    def __buscar_alertas(self) -> str|None:
        """ 
        Busca alertas emergentes en SAP. 
        
        En caso de encontrar una alerta, devuelve el texto de la alerta.
        
        ---
        Se utiliza dentro del metodo `__comprobar_acceso_transaccion()`.
        
        ---
        Ejemplo
        ```python
        alerta = self.__buscar_alertas()
        ```
        >>> "Alerta\\nNo tiene autorizaci√≥n para esta transacci√≥n\\nAcepter\\nCancelar"  # Si se encuentra una alerta
        """
        span_alerta, texto_alerta = self.buscar_elemento_en_iframes(By.CLASS_NAME, 'lsPWNew', False)
        
        if span_alerta and texto_alerta:
            return texto_alerta.strip().split('\n')[0]
        
        return None
    
    def buscar_alerta_transaccion(self) -> dict[str, bool | str] | None:
        """ 
        Busca una alerta de transacci√≥n en SAP.
        
        Busca un elemento con la clase `lsMessageBar` en los iframes de la p√°gina y verifica si contiene una alerta de error o una alerta de transacci√≥n.  
        En caso de encontrar una alerta, evalua si es un error buscando clases como `lsMessageBar__icon--Error` o `lsMessageBar__image--Error` en los hijos del elemento encontrado.
        
        ---
        Ejemplo
        ```python
        alerta = self.buscar_alerta_transaccion()
        ```
        >>> {'isError': True, 'content': 'Alerta de error encontrada'}
        >>> {'isError': False, 'content': 'Alerta de transacci√≥n encontrada'}
        
        """
        self.mostrar("Obteniendo alerta de transacci√≥n")
        span_alerta, texto_alerta = self.buscar_elemento_en_iframes(By.CLASS_NAME, 'lsMessageBar')
        
        if span_alerta and texto_alerta:
            # Verifica si alg√∫n hijo tiene clase de error
            hijos = span_alerta.find_elements(By.XPATH, ".//*")
            for h in hijos:
                clase_hijo = h.get_attribute("class")
                if clase_hijo is not None:
                    if "lsMessageBar__icon--Error" in clase_hijo or "lsMessageBar__image--Error" in clase_hijo:
                        self.mostrar("Alerta de error encontrada", True)
                        isError = True
                        break    
            else:
                self.mostrar("Alerta de transacci√≥n encontrada", True)
                isError = False
            
            return {'isError': isError, 'content': texto_alerta.strip().split('\n')[0]}
        
        self.mostrar("No se encontr√≥ alerta de transacci√≥n", True)
        return None