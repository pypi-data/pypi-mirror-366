#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    This material is the confidential, proprietary, unpublished property
    of Fair Isaac Corporation.  Receipt or possession of this material
    does not convey rights to divulge, reproduce, use, or allow others
    to use it without the specific written authorization of Fair Isaac
    Corporation and use must conform strictly to the license agreement.

    Copyright (c) 2020-2025 Fair Isaac Corporation. All rights reserved.
"""
# pylint: skip-file


import pprint
import re  # noqa: F401

import six

from xpressinsight.interface.apprunner_rest_client.configuration import Configuration


class InsightContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'insighturl': 'str',
        'traceid': 'str',
        'spanid': 'str',
        'parentspanid': 'str',
        'sampled': 'str',
        'dmp': 'InsightDmpContext'
    }

    attribute_map = {
        'insighturl': 'insighturl',
        'traceid': 'traceid',
        'spanid': 'spanid',
        'parentspanid': 'parentspanid',
        'sampled': 'sampled',
        'dmp': 'dmp'
    }

    def __init__(self, insighturl=None, traceid=None, spanid=None, parentspanid=None, sampled=None, dmp=None, local_vars_configuration=None):  # noqa: E501
        """InsightContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._insighturl = None
        self._traceid = None
        self._spanid = None
        self._parentspanid = None
        self._sampled = None
        self._dmp = None
        self.discriminator = None

        if insighturl is not None:
            self.insighturl = insighturl
        if traceid is not None:
            self.traceid = traceid
        if spanid is not None:
            self.spanid = spanid
        if parentspanid is not None:
            self.parentspanid = parentspanid
        if sampled is not None:
            self.sampled = sampled
        if dmp is not None:
            self.dmp = dmp

    @property
    def insighturl(self):
        """Gets the insighturl of this InsightContext.  # noqa: E501

        Insight server URL.  # noqa: E501

        :return: The insighturl of this InsightContext.  # noqa: E501
        :rtype: str
        """
        return self._insighturl

    @insighturl.setter
    def insighturl(self, insighturl):
        """Sets the insighturl of this InsightContext.

        Insight server URL.  # noqa: E501

        :param insighturl: The insighturl of this InsightContext.  # noqa: E501
        :type: str
        """

        self._insighturl = insighturl

    @property
    def traceid(self):
        """Gets the traceid of this InsightContext.  # noqa: E501

        The B3 Propagation TraceId field.  # noqa: E501

        :return: The traceid of this InsightContext.  # noqa: E501
        :rtype: str
        """
        return self._traceid

    @traceid.setter
    def traceid(self, traceid):
        """Sets the traceid of this InsightContext.

        The B3 Propagation TraceId field.  # noqa: E501

        :param traceid: The traceid of this InsightContext.  # noqa: E501
        :type: str
        """

        self._traceid = traceid

    @property
    def spanid(self):
        """Gets the spanid of this InsightContext.  # noqa: E501

        The B3 Propagation SpanId field.  # noqa: E501

        :return: The spanid of this InsightContext.  # noqa: E501
        :rtype: str
        """
        return self._spanid

    @spanid.setter
    def spanid(self, spanid):
        """Sets the spanid of this InsightContext.

        The B3 Propagation SpanId field.  # noqa: E501

        :param spanid: The spanid of this InsightContext.  # noqa: E501
        :type: str
        """

        self._spanid = spanid

    @property
    def parentspanid(self):
        """Gets the parentspanid of this InsightContext.  # noqa: E501

        The B3 Propagation ParentSpanId field.  # noqa: E501

        :return: The parentspanid of this InsightContext.  # noqa: E501
        :rtype: str
        """
        return self._parentspanid

    @parentspanid.setter
    def parentspanid(self, parentspanid):
        """Sets the parentspanid of this InsightContext.

        The B3 Propagation ParentSpanId field.  # noqa: E501

        :param parentspanid: The parentspanid of this InsightContext.  # noqa: E501
        :type: str
        """

        self._parentspanid = parentspanid

    @property
    def sampled(self):
        """Gets the sampled of this InsightContext.  # noqa: E501

        The B3 Propagation Sampled field.  # noqa: E501

        :return: The sampled of this InsightContext.  # noqa: E501
        :rtype: str
        """
        return self._sampled

    @sampled.setter
    def sampled(self, sampled):
        """Sets the sampled of this InsightContext.

        The B3 Propagation Sampled field.  # noqa: E501

        :param sampled: The sampled of this InsightContext.  # noqa: E501
        :type: str
        """

        self._sampled = sampled

    @property
    def dmp(self):
        """Gets the dmp of this InsightContext.  # noqa: E501


        :return: The dmp of this InsightContext.  # noqa: E501
        :rtype: InsightDmpContext
        """
        return self._dmp

    @dmp.setter
    def dmp(self, dmp):
        """Sets the dmp of this InsightContext.


        :param dmp: The dmp of this InsightContext.  # noqa: E501
        :type: InsightDmpContext
        """

        self._dmp = dmp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InsightContext):
            return True

        return self.to_dict() != other.to_dict()
