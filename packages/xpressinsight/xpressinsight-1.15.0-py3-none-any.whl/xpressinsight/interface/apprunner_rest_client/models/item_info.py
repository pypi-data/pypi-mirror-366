#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    This material is the confidential, proprietary, unpublished property
    of Fair Isaac Corporation.  Receipt or possession of this material
    does not convey rights to divulge, reproduce, use, or allow others
    to use it without the specific written authorization of Fair Isaac
    Corporation and use must conform strictly to the license agreement.

    Copyright (c) 2020-2025 Fair Isaac Corporation. All rights reserved.
"""
# pylint: skip-file


import pprint
import re  # noqa: F401

import six

from xpressinsight.interface.apprunner_rest_client.configuration import Configuration


class ItemInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'path': 'str',
        'parentpath': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'path': 'path',
        'parentpath': 'parentpath'
    }

    def __init__(self, id=None, type=None, name=None, path=None, parentpath=None, local_vars_configuration=None):  # noqa: E501
        """ItemInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._name = None
        self._path = None
        self._parentpath = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if parentpath is not None:
            self.parentpath = parentpath

    @property
    def id(self):
        """Gets the id of this ItemInfo.  # noqa: E501

        Item id.  # noqa: E501

        :return: The id of this ItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemInfo.

        Item id.  # noqa: E501

        :param id: The id of this ItemInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ItemInfo.  # noqa: E501

        Item type (`\"FOLDER\"` or scenario type identifier).  # noqa: E501

        :return: The type of this ItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemInfo.

        Item type (`\"FOLDER\"` or scenario type identifier).  # noqa: E501

        :param type: The type of this ItemInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ItemInfo.  # noqa: E501

        Item name.  # noqa: E501

        :return: The name of this ItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemInfo.

        Item name.  # noqa: E501

        :param name: The name of this ItemInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ItemInfo.  # noqa: E501

        Item path.  # noqa: E501

        :return: The path of this ItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ItemInfo.

        Item path.  # noqa: E501

        :param path: The path of this ItemInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def parentpath(self):
        """Gets the parentpath of this ItemInfo.  # noqa: E501

        Item parent path.  # noqa: E501

        :return: The parentpath of this ItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._parentpath

    @parentpath.setter
    def parentpath(self, parentpath):
        """Sets the parentpath of this ItemInfo.

        Item parent path.  # noqa: E501

        :param parentpath: The parentpath of this ItemInfo.  # noqa: E501
        :type: str
        """

        self._parentpath = parentpath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemInfo):
            return True

        return self.to_dict() != other.to_dict()
