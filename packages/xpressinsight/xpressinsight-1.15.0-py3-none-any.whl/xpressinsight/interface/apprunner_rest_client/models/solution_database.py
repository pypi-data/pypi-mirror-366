#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    This material is the confidential, proprietary, unpublished property
    of Fair Isaac Corporation.  Receipt or possession of this material
    does not convey rights to divulge, reproduce, use, or allow others
    to use it without the specific written authorization of Fair Isaac
    Corporation and use must conform strictly to the license agreement.

    Copyright (c) 2020-2025 Fair Isaac Corporation. All rights reserved.
"""
# pylint: skip-file


import pprint
import re  # noqa: F401

import six

from xpressinsight.interface.apprunner_rest_client.configuration import Configuration


class SolutionDatabase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drivername': 'str',
        'server': 'str',
        'port': 'int',
        'username': 'str',
        'password': 'str',
        'database': 'str',
        'odbcparams': 'dict(str, str)'
    }

    attribute_map = {
        'drivername': 'drivername',
        'server': 'server',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'database': 'database',
        'odbcparams': 'odbcparams'
    }

    def __init__(self, drivername=None, server=None, port=None, username=None, password=None, database=None, odbcparams=None, local_vars_configuration=None):  # noqa: E501
        """SolutionDatabase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._drivername = None
        self._server = None
        self._port = None
        self._username = None
        self._password = None
        self._database = None
        self._odbcparams = None
        self.discriminator = None

        if drivername is not None:
            self.drivername = drivername
        if server is not None:
            self.server = server
        if port is not None:
            self.port = port
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if database is not None:
            self.database = database
        if odbcparams is not None:
            self.odbcparams = odbcparams

    @property
    def drivername(self):
        """Gets the drivername of this SolutionDatabase.  # noqa: E501

        ODBC driver name.  # noqa: E501

        :return: The drivername of this SolutionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._drivername

    @drivername.setter
    def drivername(self, drivername):
        """Sets the drivername of this SolutionDatabase.

        ODBC driver name.  # noqa: E501

        :param drivername: The drivername of this SolutionDatabase.  # noqa: E501
        :type: str
        """

        self._drivername = drivername

    @property
    def server(self):
        """Gets the server of this SolutionDatabase.  # noqa: E501

        Database server name.  # noqa: E501

        :return: The server of this SolutionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this SolutionDatabase.

        Database server name.  # noqa: E501

        :param server: The server of this SolutionDatabase.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def port(self):
        """Gets the port of this SolutionDatabase.  # noqa: E501

        Database server port number, 0 to use default.  # noqa: E501

        :return: The port of this SolutionDatabase.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SolutionDatabase.

        Database server port number, 0 to use default.  # noqa: E501

        :param port: The port of this SolutionDatabase.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def username(self):
        """Gets the username of this SolutionDatabase.  # noqa: E501

        Database username.  # noqa: E501

        :return: The username of this SolutionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SolutionDatabase.

        Database username.  # noqa: E501

        :param username: The username of this SolutionDatabase.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this SolutionDatabase.  # noqa: E501

        Database password.  # noqa: E501

        :return: The password of this SolutionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SolutionDatabase.

        Database password.  # noqa: E501

        :param password: The password of this SolutionDatabase.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def database(self):
        """Gets the database of this SolutionDatabase.  # noqa: E501

        Database name.  # noqa: E501

        :return: The database of this SolutionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this SolutionDatabase.

        Database name.  # noqa: E501

        :param database: The database of this SolutionDatabase.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def odbcparams(self):
        """Gets the odbcparams of this SolutionDatabase.  # noqa: E501


        :return: The odbcparams of this SolutionDatabase.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._odbcparams

    @odbcparams.setter
    def odbcparams(self, odbcparams):
        """Sets the odbcparams of this SolutionDatabase.


        :param odbcparams: The odbcparams of this SolutionDatabase.  # noqa: E501
        :type: dict(str, str)
        """

        self._odbcparams = odbcparams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolutionDatabase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolutionDatabase):
            return True

        return self.to_dict() != other.to_dict()
