#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    This material is the confidential, proprietary, unpublished property
    of Fair Isaac Corporation.  Receipt or possession of this material
    does not convey rights to divulge, reproduce, use, or allow others
    to use it without the specific written authorization of Fair Isaac
    Corporation and use must conform strictly to the license agreement.

    Copyright (c) 2020-2025 Fair Isaac Corporation. All rights reserved.
"""
# pylint: skip-file


import pprint
import re  # noqa: F401

import six

from xpressinsight.interface.apprunner_rest_client.configuration import Configuration


class ResourceLimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'threads': 'int',
        'memory': 'int'
    }

    attribute_map = {
        'threads': 'threads',
        'memory': 'memory'
    }

    def __init__(self, threads=None, memory=None, local_vars_configuration=None):  # noqa: E501
        """ResourceLimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._threads = None
        self._memory = None
        self.discriminator = None

        if threads is not None:
            self.threads = threads
        if memory is not None:
            self.memory = memory

    @property
    def threads(self):
        """Gets the threads of this ResourceLimits.  # noqa: E501

        The number of threads available for use during scenario execution.  # noqa: E501

        :return: The threads of this ResourceLimits.  # noqa: E501
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this ResourceLimits.

        The number of threads available for use during scenario execution.  # noqa: E501

        :param threads: The threads of this ResourceLimits.  # noqa: E501
        :type: int
        """

        self._threads = threads

    @property
    def memory(self):
        """Gets the memory of this ResourceLimits.  # noqa: E501

        The amount of memory in megabytes available for use during scenario execution.  # noqa: E501

        :return: The memory of this ResourceLimits.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ResourceLimits.

        The amount of memory in megabytes available for use during scenario execution.  # noqa: E501

        :param memory: The memory of this ResourceLimits.  # noqa: E501
        :type: int
        """

        self._memory = memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceLimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceLimits):
            return True

        return self.to_dict() != other.to_dict()
