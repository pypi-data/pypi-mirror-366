#

"""
    Python Insight API

    This is an internal REST API between Python and Mosel  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech

    This material is the confidential, proprietary, unpublished property
    of Fair Isaac Corporation.  Receipt or possession of this material
    does not convey rights to divulge, reproduce, use, or allow others
    to use it without the specific written authorization of Fair Isaac
    Corporation and use must conform strictly to the license agreement.

    Copyright (c) 2020-2025 Fair Isaac Corporation. All rights reserved.
"""
# pylint: skip-file


import pprint
import re  # noqa: F401

import six

from xpressinsight.interface.apprunner_rest_client.configuration import Configuration


class InsightDmpContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ispopulated': 'bool',
        'managerurl': 'str',
        'environment': 'str',
        'tenantid': 'str',
        'solutionid': 'str',
        'componentid': 'str',
        'compinstid': 'str',
        'soltoken': 'str',
        'soltokenexpiry': 'int',
        'soltokenenv': 'str',
        'pftoken': 'str',
        'pftokenexpiry': 'int'
    }

    attribute_map = {
        'ispopulated': 'ispopulated',
        'managerurl': 'managerurl',
        'environment': 'environment',
        'tenantid': 'tenantid',
        'solutionid': 'solutionid',
        'componentid': 'componentid',
        'compinstid': 'compinstid',
        'soltoken': 'soltoken',
        'soltokenexpiry': 'soltokenexpiry',
        'soltokenenv': 'soltokenenv',
        'pftoken': 'pftoken',
        'pftokenexpiry': 'pftokenexpiry'
    }

    def __init__(self, ispopulated=None, managerurl=None, environment=None, tenantid=None, solutionid=None, componentid=None, compinstid=None, soltoken=None, soltokenexpiry=None, soltokenenv=None, pftoken=None, pftokenexpiry=None, local_vars_configuration=None):  # noqa: E501
        """InsightDmpContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ispopulated = None
        self._managerurl = None
        self._environment = None
        self._tenantid = None
        self._solutionid = None
        self._componentid = None
        self._compinstid = None
        self._soltoken = None
        self._soltokenexpiry = None
        self._soltokenenv = None
        self._pftoken = None
        self._pftokenexpiry = None
        self.discriminator = None

        if ispopulated is not None:
            self.ispopulated = ispopulated
        if managerurl is not None:
            self.managerurl = managerurl
        if environment is not None:
            self.environment = environment
        if tenantid is not None:
            self.tenantid = tenantid
        if solutionid is not None:
            self.solutionid = solutionid
        if componentid is not None:
            self.componentid = componentid
        if compinstid is not None:
            self.compinstid = compinstid
        if soltoken is not None:
            self.soltoken = soltoken
        if soltokenexpiry is not None:
            self.soltokenexpiry = soltokenexpiry
        if soltokenenv is not None:
            self.soltokenenv = soltokenenv
        if pftoken is not None:
            self.pftoken = pftoken
        if pftokenexpiry is not None:
            self.pftokenexpiry = pftokenexpiry

    @property
    def ispopulated(self):
        """Gets the ispopulated of this InsightDmpContext.  # noqa: E501

        Whether the other fields of this record are populated.  # noqa: E501

        :return: The ispopulated of this InsightDmpContext.  # noqa: E501
        :rtype: bool
        """
        return self._ispopulated

    @ispopulated.setter
    def ispopulated(self, ispopulated):
        """Sets the ispopulated of this InsightDmpContext.

        Whether the other fields of this record are populated.  # noqa: E501

        :param ispopulated: The ispopulated of this InsightDmpContext.  # noqa: E501
        :type: bool
        """

        self._ispopulated = ispopulated

    @property
    def managerurl(self):
        """Gets the managerurl of this InsightDmpContext.  # noqa: E501

        DMP Manager URL.  # noqa: E501

        :return: The managerurl of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._managerurl

    @managerurl.setter
    def managerurl(self, managerurl):
        """Sets the managerurl of this InsightDmpContext.

        DMP Manager URL.  # noqa: E501

        :param managerurl: The managerurl of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._managerurl = managerurl

    @property
    def environment(self):
        """Gets the environment of this InsightDmpContext.  # noqa: E501

        DMP component lifecycle environment.  # noqa: E501

        :return: The environment of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this InsightDmpContext.

        DMP component lifecycle environment.  # noqa: E501

        :param environment: The environment of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def tenantid(self):
        """Gets the tenantid of this InsightDmpContext.  # noqa: E501

        Tenant ID.  # noqa: E501

        :return: The tenantid of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._tenantid

    @tenantid.setter
    def tenantid(self, tenantid):
        """Sets the tenantid of this InsightDmpContext.

        Tenant ID.  # noqa: E501

        :param tenantid: The tenantid of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._tenantid = tenantid

    @property
    def solutionid(self):
        """Gets the solutionid of this InsightDmpContext.  # noqa: E501

        Solution ID.  # noqa: E501

        :return: The solutionid of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._solutionid

    @solutionid.setter
    def solutionid(self, solutionid):
        """Sets the solutionid of this InsightDmpContext.

        Solution ID.  # noqa: E501

        :param solutionid: The solutionid of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._solutionid = solutionid

    @property
    def componentid(self):
        """Gets the componentid of this InsightDmpContext.  # noqa: E501

        Component ID.  # noqa: E501

        :return: The componentid of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._componentid

    @componentid.setter
    def componentid(self, componentid):
        """Sets the componentid of this InsightDmpContext.

        Component ID.  # noqa: E501

        :param componentid: The componentid of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._componentid = componentid

    @property
    def compinstid(self):
        """Gets the compinstid of this InsightDmpContext.  # noqa: E501

        Component Instance ID.  # noqa: E501

        :return: The compinstid of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._compinstid

    @compinstid.setter
    def compinstid(self, compinstid):
        """Sets the compinstid of this InsightDmpContext.

        Component Instance ID.  # noqa: E501

        :param compinstid: The compinstid of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._compinstid = compinstid

    @property
    def soltoken(self):
        """Gets the soltoken of this InsightDmpContext.  # noqa: E501

        Token that can be used to authorizes requests to DMP webservices as the solution user.  # noqa: E501

        :return: The soltoken of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._soltoken

    @soltoken.setter
    def soltoken(self, soltoken):
        """Sets the soltoken of this InsightDmpContext.

        Token that can be used to authorizes requests to DMP webservices as the solution user.  # noqa: E501

        :param soltoken: The soltoken of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._soltoken = soltoken

    @property
    def soltokenexpiry(self):
        """Gets the soltokenexpiry of this InsightDmpContext.  # noqa: E501

        The expiry time of the solution token, as milliseconds since 1/1/1970.  # noqa: E501

        :return: The soltokenexpiry of this InsightDmpContext.  # noqa: E501
        :rtype: int
        """
        return self._soltokenexpiry

    @soltokenexpiry.setter
    def soltokenexpiry(self, soltokenexpiry):
        """Sets the soltokenexpiry of this InsightDmpContext.

        The expiry time of the solution token, as milliseconds since 1/1/1970.  # noqa: E501

        :param soltokenexpiry: The soltokenexpiry of this InsightDmpContext.  # noqa: E501
        :type: int
        """

        self._soltokenexpiry = soltokenexpiry

    @property
    def soltokenenv(self):
        """Gets the soltokenenv of this InsightDmpContext.  # noqa: E501

        The lifecycle environment for which the solution token is valid.  # noqa: E501

        :return: The soltokenenv of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._soltokenenv

    @soltokenenv.setter
    def soltokenenv(self, soltokenenv):
        """Sets the soltokenenv of this InsightDmpContext.

        The lifecycle environment for which the solution token is valid.  # noqa: E501

        :param soltokenenv: The soltokenenv of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._soltokenenv = soltokenenv

    @property
    def pftoken(self):
        """Gets the pftoken of this InsightDmpContext.  # noqa: E501

        A bearer token that can be used to authorize requests for the platform resources, under the authority of the platform client id.  # noqa: E501

        :return: The pftoken of this InsightDmpContext.  # noqa: E501
        :rtype: str
        """
        return self._pftoken

    @pftoken.setter
    def pftoken(self, pftoken):
        """Sets the pftoken of this InsightDmpContext.

        A bearer token that can be used to authorize requests for the platform resources, under the authority of the platform client id.  # noqa: E501

        :param pftoken: The pftoken of this InsightDmpContext.  # noqa: E501
        :type: str
        """

        self._pftoken = pftoken

    @property
    def pftokenexpiry(self):
        """Gets the pftokenexpiry of this InsightDmpContext.  # noqa: E501

        The expiry time of the given platform token, expressed in milliseconds since 1/1/1970.  # noqa: E501

        :return: The pftokenexpiry of this InsightDmpContext.  # noqa: E501
        :rtype: int
        """
        return self._pftokenexpiry

    @pftokenexpiry.setter
    def pftokenexpiry(self, pftokenexpiry):
        """Sets the pftokenexpiry of this InsightDmpContext.

        The expiry time of the given platform token, expressed in milliseconds since 1/1/1970.  # noqa: E501

        :param pftokenexpiry: The pftokenexpiry of this InsightDmpContext.  # noqa: E501
        :type: int
        """

        self._pftokenexpiry = pftokenexpiry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightDmpContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InsightDmpContext):
            return True

        return self.to_dict() != other.to_dict()
