# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.models.error import Error
from ipstack.utilities.xml_utilities import XmlUtilities


class M101InvalidAccessKey(object):

    """Implementation of the '101 invalid_access_key' model.

    Attributes:
        success (bool): The model property of type bool.
        error (Error): The model property of type Error.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "success": 'success',
        "error": 'error'
    }

    def __init__(self,
                 success=None,
                 error=None):
        """Constructor for the M101InvalidAccessKey class"""

        # Initialize members of the class
        self.success = success 
        self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        success = dictionary.get("success") if "success" in dictionary.keys() else None
        error = Error.from_dictionary(dictionary.get('error')) if dictionary.get('error') else None
        # Return an object of this model
        return cls(success,
                   error)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        success = XmlUtilities.value_from_xml_element(root.find('success'), bool)
        error = XmlUtilities.value_from_xml_element(root.find('Error'), Error)

        return cls(success,
                   error)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.success, 'success')
        XmlUtilities.add_as_subelement(root, self.error, 'Error')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'success={self.success!r}, '
                f'error={self.error!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'success={self.success!s}, '
                f'error={self.error!s})')
