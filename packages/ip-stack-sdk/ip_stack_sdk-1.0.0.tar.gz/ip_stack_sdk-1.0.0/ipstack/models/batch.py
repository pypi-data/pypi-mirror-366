# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.models.result_1 import Result1
from ipstack.utilities.xml_utilities import XmlUtilities


class Batch(object):

    """Implementation of the 'batch' model.

    Attributes:
        result (List[Result1]): The model property of type List[Result1].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "result": 'result'
    }

    def __init__(self,
                 result=None):
        """Constructor for the Batch class"""

        # Initialize members of the class
        self.result = result 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        result = None
        if dictionary.get('result') is not None:
            result = [Result1.from_dictionary(x) for x in dictionary.get('result')]
        # Return an object of this model
        return cls(result)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        result = XmlUtilities.list_from_xml_element(root, 'result', Result1)

        return cls(result)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_list_as_subelement(root, self.result, 'result')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'result={self.result!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'result={self.result!s})')
