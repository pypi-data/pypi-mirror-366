# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from ipstack.api_helper import APIHelper
from ipstack.configuration import Server
from ipstack.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from ipstack.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from ipstack.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from ipstack.models.m_200_ok_basic_standard_ip_lookup import M200OKBasicStandardIPLookup
from ipstack.models.m_200_ok_hostname import M200OKHostname
from ipstack.models.m_200_ok_response_in_different_language import M200OKResponseInDifferentLanguage
from ipstack.models.m_200_ok_specific_response_with_fields_parameter import M200OKSpecificResponseWithFieldsParameter
from ipstack.models.result import Result


class StandardIPLookupController(BaseController):

    """A Controller to access Endpoints in the ipstack API."""
    def __init__(self, config):
        super(StandardIPLookupController, self).__init__(config)

    def basic_standard_ip_lookup(self):
        """Does a GET request to /134.201.250.155.

        This is the prime endpoint of IPstack API and used to look up single
        IPv4 or IPv6 addresses. To call this endpoint, simply attach any IPv4
        or IPv6 address to the API's base URL.

        Returns:
            M200OKBasicStandardIPLookup: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/134.201.250.155')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKBasicStandardIPLookup.from_dictionary)
        ).execute()

    def hostname(self,
                 hostname):
        """Does a GET request to /160.39.144.19.

        Add "Hostname" \[optional\] and set to `1` to enable Hostname Lookup.

        Args:
            hostname (int): [optional] Set to 1 to see the Hostname.

        Returns:
            M200OKHostname: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/160.39.144.19')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKHostname.from_dictionary)
        ).execute()

    def response_wrapped_inside_a_callback(self,
                                           callback):
        """Does a GET request to /134.201.250.155.

        Specify a JSONP callback \[Optional\] function name according to the
        JSONP Callbacks section.

        Args:
            callback (str): Resposne will be wrapped inside this function name

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/134.201.250.155')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('callback')
                         .value(callback))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def response_in_different_language(self,
                                       language):
        """Does a GET request to /134.201.250.155.

        \[optional\] Set to a 2-letter "language" code according to the
        Specify Output Language section to change output language.
        **Supported languages:**
        - `en` - English/US
        - `de` - German
        - `es` - Spanish
        - `fr` - French
        - `ja` - Japanese
        - `pt-br` - Portugues (Brazil)
        - `ru` - Russian
        - `zh` - Chinese

        Args:
            language (str): Supported languages:  en - English/US de - German
                es - Spanish fr - French ja - Japanese pt-br - Portugues
                (Brazil) ru - Russian zh - Chinese

        Returns:
            M200OKResponseInDifferentLanguage: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/134.201.250.155')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('language')
                         .value(language))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKResponseInDifferentLanguage.from_dictionary)
        ).execute()

    def specific_response_with_fields_parameter(self,
                                                fields):
        """Does a GET request to /134.201.250.155.

        \[optional\] Set to your preferred output "field(s)" according to the
        Specify Output Fields section.

        Args:
            fields (str): [optional] Set to your preferred output field(s)
                according to the Specify Output Fields section.

        Returns:
            M200OKSpecificResponseWithFieldsParameter: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/134.201.250.155')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKSpecificResponseWithFieldsParameter.from_dictionary)
        ).execute()

    def xml_output(self,
                   output):
        """Does a GET request to /160.39.144.19.

        \[optional\] Set "output" to json or xml to choose between output
        formats.

        Args:
            output (str): [optional] Set to json or xml to choose between
                output formats.

        Returns:
            Result: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/160.39.144.19')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('output')
                         .value(output))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(Result)
            .is_xml_response(True)
        ).execute()
