# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.utilities.xml_utilities import XmlUtilities


class M200OKSpecificResponseWithFieldsParameter1(object):

    """Implementation of the '200 OK – Specific Response with Fields Parameter1' model.

    Attributes:
        zip (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "zip": 'zip'
    }

    def __init__(self,
                 zip=None):
        """Constructor for the M200OKSpecificResponseWithFieldsParameter1 class"""

        # Initialize members of the class
        self.zip = zip 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        zip = dictionary.get("zip") if dictionary.get("zip") else None
        # Return an object of this model
        return cls(zip)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        zip = XmlUtilities.value_from_xml_element(root.find('zip'), str)

        return cls(zip)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.zip, 'zip')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'zip={self.zip!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'zip={self.zip!s})')
