# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.utilities.xml_utilities import XmlUtilities


class Connection3(object):

    """Implementation of the 'connection3' model.

    Attributes:
        asn (int): The model property of type int.
        isp (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asn": 'asn',
        "isp": 'isp'
    }

    def __init__(self,
                 asn=None,
                 isp=None):
        """Constructor for the Connection3 class"""

        # Initialize members of the class
        self.asn = asn 
        self.isp = isp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asn = dictionary.get("asn") if dictionary.get("asn") else None
        isp = dictionary.get("isp") if dictionary.get("isp") else None
        # Return an object of this model
        return cls(asn,
                   isp)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        asn = XmlUtilities.value_from_xml_element(root.find('asn'), int)
        isp = XmlUtilities.value_from_xml_element(root.find('isp'), str)

        return cls(asn,
                   isp)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.asn, 'asn')
        XmlUtilities.add_as_subelement(root, self.isp, 'isp')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asn={self.asn!r}, '
                f'isp={self.isp!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asn={self.asn!s}, '
                f'isp={self.isp!s})')
