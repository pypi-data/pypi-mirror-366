# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.utilities.xml_utilities import XmlUtilities


class TimeZone(object):

    """Implementation of the 'TimeZone' model.

    Attributes:
        id (str): The model property of type str.
        current_time (str): The model property of type str.
        gmt_offset (int): The model property of type int.
        code (str): The model property of type str.
        is_daylight_saving (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "current_time": 'current_time',
        "gmt_offset": 'gmt_offset',
        "code": 'code',
        "is_daylight_saving": 'is_daylight_saving'
    }

    def __init__(self,
                 id=None,
                 current_time=None,
                 gmt_offset=None,
                 code=None,
                 is_daylight_saving=None):
        """Constructor for the TimeZone class"""

        # Initialize members of the class
        self.id = id 
        self.current_time = current_time 
        self.gmt_offset = gmt_offset 
        self.code = code 
        self.is_daylight_saving = is_daylight_saving 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        current_time = dictionary.get("current_time") if dictionary.get("current_time") else None
        gmt_offset = dictionary.get("gmt_offset") if dictionary.get("gmt_offset") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        is_daylight_saving = dictionary.get("is_daylight_saving") if "is_daylight_saving" in dictionary.keys() else None
        # Return an object of this model
        return cls(id,
                   current_time,
                   gmt_offset,
                   code,
                   is_daylight_saving)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        id = XmlUtilities.value_from_xml_element(root.find('id'), str)
        current_time = XmlUtilities.value_from_xml_element(root.find('current_time'), str)
        gmt_offset = XmlUtilities.value_from_xml_element(root.find('gmt_offset'), int)
        code = XmlUtilities.value_from_xml_element(root.find('code'), str)
        is_daylight_saving = XmlUtilities.value_from_xml_element(root.find('is_daylight_saving'), bool)

        return cls(id,
                   current_time,
                   gmt_offset,
                   code,
                   is_daylight_saving)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.id, 'id')
        XmlUtilities.add_as_subelement(root, self.current_time, 'current_time')
        XmlUtilities.add_as_subelement(root, self.gmt_offset, 'gmt_offset')
        XmlUtilities.add_as_subelement(root, self.code, 'code')
        XmlUtilities.add_as_subelement(root, self.is_daylight_saving, 'is_daylight_saving')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'current_time={self.current_time!r}, '
                f'gmt_offset={self.gmt_offset!r}, '
                f'code={self.code!r}, '
                f'is_daylight_saving={self.is_daylight_saving!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'current_time={self.current_time!s}, '
                f'gmt_offset={self.gmt_offset!s}, '
                f'code={self.code!s}, '
                f'is_daylight_saving={self.is_daylight_saving!s})')
