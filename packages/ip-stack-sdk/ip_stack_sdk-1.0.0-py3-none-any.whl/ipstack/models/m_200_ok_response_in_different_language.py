# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.models.connection import Connection
from ipstack.models.currency import Currency
from ipstack.models.location import Location
from ipstack.models.time_zone import TimeZone
from ipstack.utilities.xml_utilities import XmlUtilities


class M200OKResponseInDifferentLanguage(object):

    """Implementation of the '200 OK – Response in different language' model.

    Attributes:
        ip (str): The model property of type str.
        mtype (str): The model property of type str.
        continent_code (str): The model property of type str.
        continent_name (str): The model property of type str.
        country_code (str): The model property of type str.
        country_name (str): The model property of type str.
        region_code (str): The model property of type str.
        region_name (str): The model property of type str.
        city (str): The model property of type str.
        zip (str): The model property of type str.
        latitude (float): The model property of type float.
        longitude (float): The model property of type float.
        location (Location): The model property of type Location.
        time_zone (TimeZone): The model property of type TimeZone.
        currency (Currency): The model property of type Currency.
        connection (Connection): The model property of type Connection.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ip": 'ip',
        "mtype": 'type',
        "continent_code": 'continent_code',
        "continent_name": 'continent_name',
        "country_code": 'country_code',
        "country_name": 'country_name',
        "region_code": 'region_code',
        "region_name": 'region_name',
        "city": 'city',
        "zip": 'zip',
        "latitude": 'latitude',
        "longitude": 'longitude',
        "location": 'location',
        "time_zone": 'time_zone',
        "currency": 'currency',
        "connection": 'connection'
    }

    def __init__(self,
                 ip=None,
                 mtype=None,
                 continent_code=None,
                 continent_name=None,
                 country_code=None,
                 country_name=None,
                 region_code=None,
                 region_name=None,
                 city=None,
                 zip=None,
                 latitude=None,
                 longitude=None,
                 location=None,
                 time_zone=None,
                 currency=None,
                 connection=None):
        """Constructor for the M200OKResponseInDifferentLanguage class"""

        # Initialize members of the class
        self.ip = ip 
        self.mtype = mtype 
        self.continent_code = continent_code 
        self.continent_name = continent_name 
        self.country_code = country_code 
        self.country_name = country_name 
        self.region_code = region_code 
        self.region_name = region_name 
        self.city = city 
        self.zip = zip 
        self.latitude = latitude 
        self.longitude = longitude 
        self.location = location 
        self.time_zone = time_zone 
        self.currency = currency 
        self.connection = connection 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        continent_code = dictionary.get("continent_code") if dictionary.get("continent_code") else None
        continent_name = dictionary.get("continent_name") if dictionary.get("continent_name") else None
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        country_name = dictionary.get("country_name") if dictionary.get("country_name") else None
        region_code = dictionary.get("region_code") if dictionary.get("region_code") else None
        region_name = dictionary.get("region_name") if dictionary.get("region_name") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        zip = dictionary.get("zip") if dictionary.get("zip") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        time_zone = TimeZone.from_dictionary(dictionary.get('time_zone')) if dictionary.get('time_zone') else None
        currency = Currency.from_dictionary(dictionary.get('currency')) if dictionary.get('currency') else None
        connection = Connection.from_dictionary(dictionary.get('connection')) if dictionary.get('connection') else None
        # Return an object of this model
        return cls(ip,
                   mtype,
                   continent_code,
                   continent_name,
                   country_code,
                   country_name,
                   region_code,
                   region_name,
                   city,
                   zip,
                   latitude,
                   longitude,
                   location,
                   time_zone,
                   currency,
                   connection)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        ip = XmlUtilities.value_from_xml_element(root.find('ip'), str)
        mtype = XmlUtilities.value_from_xml_element(root.find('type'), str)
        continent_code = XmlUtilities.value_from_xml_element(root.find('continent_code'), str)
        continent_name = XmlUtilities.value_from_xml_element(root.find('continent_name'), str)
        country_code = XmlUtilities.value_from_xml_element(root.find('country_code'), str)
        country_name = XmlUtilities.value_from_xml_element(root.find('country_name'), str)
        region_code = XmlUtilities.value_from_xml_element(root.find('region_code'), str)
        region_name = XmlUtilities.value_from_xml_element(root.find('region_name'), str)
        city = XmlUtilities.value_from_xml_element(root.find('city'), str)
        zip = XmlUtilities.value_from_xml_element(root.find('zip'), str)
        latitude = XmlUtilities.value_from_xml_element(root.find('latitude'), float)
        longitude = XmlUtilities.value_from_xml_element(root.find('longitude'), float)
        location = XmlUtilities.value_from_xml_element(root.find('Location'), Location)
        time_zone = XmlUtilities.value_from_xml_element(root.find('TimeZone'), TimeZone)
        currency = XmlUtilities.value_from_xml_element(root.find('Currency'), Currency)
        connection = XmlUtilities.value_from_xml_element(root.find('Connection'), Connection)

        return cls(ip,
                   mtype,
                   continent_code,
                   continent_name,
                   country_code,
                   country_name,
                   region_code,
                   region_name,
                   city,
                   zip,
                   latitude,
                   longitude,
                   location,
                   time_zone,
                   currency,
                   connection)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.ip, 'ip')
        XmlUtilities.add_as_subelement(root, self.mtype, 'type')
        XmlUtilities.add_as_subelement(root, self.continent_code, 'continent_code')
        XmlUtilities.add_as_subelement(root, self.continent_name, 'continent_name')
        XmlUtilities.add_as_subelement(root, self.country_code, 'country_code')
        XmlUtilities.add_as_subelement(root, self.country_name, 'country_name')
        XmlUtilities.add_as_subelement(root, self.region_code, 'region_code')
        XmlUtilities.add_as_subelement(root, self.region_name, 'region_name')
        XmlUtilities.add_as_subelement(root, self.city, 'city')
        XmlUtilities.add_as_subelement(root, self.zip, 'zip')
        XmlUtilities.add_as_subelement(root, self.latitude, 'latitude')
        XmlUtilities.add_as_subelement(root, self.longitude, 'longitude')
        XmlUtilities.add_as_subelement(root, self.location, 'Location')
        XmlUtilities.add_as_subelement(root, self.time_zone, 'TimeZone')
        XmlUtilities.add_as_subelement(root, self.currency, 'Currency')
        XmlUtilities.add_as_subelement(root, self.connection, 'Connection')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'ip={self.ip!r}, '
                f'mtype={self.mtype!r}, '
                f'continent_code={self.continent_code!r}, '
                f'continent_name={self.continent_name!r}, '
                f'country_code={self.country_code!r}, '
                f'country_name={self.country_name!r}, '
                f'region_code={self.region_code!r}, '
                f'region_name={self.region_name!r}, '
                f'city={self.city!r}, '
                f'zip={self.zip!r}, '
                f'latitude={self.latitude!r}, '
                f'longitude={self.longitude!r}, '
                f'location={self.location!r}, '
                f'time_zone={self.time_zone!r}, '
                f'currency={self.currency!r}, '
                f'connection={self.connection!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'ip={self.ip!s}, '
                f'mtype={self.mtype!s}, '
                f'continent_code={self.continent_code!s}, '
                f'continent_name={self.continent_name!s}, '
                f'country_code={self.country_code!s}, '
                f'country_name={self.country_name!s}, '
                f'region_code={self.region_code!s}, '
                f'region_name={self.region_name!s}, '
                f'city={self.city!s}, '
                f'zip={self.zip!s}, '
                f'latitude={self.latitude!s}, '
                f'longitude={self.longitude!s}, '
                f'location={self.location!s}, '
                f'time_zone={self.time_zone!s}, '
                f'currency={self.currency!s}, '
                f'connection={self.connection!s})')
