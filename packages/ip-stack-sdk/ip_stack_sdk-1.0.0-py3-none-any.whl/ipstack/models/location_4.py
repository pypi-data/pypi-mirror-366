# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstack.models.languages_1 import Languages1
from ipstack.utilities.xml_utilities import XmlUtilities


class Location4(object):

    """Implementation of the 'Location4' model.

    Attributes:
        geoname_id (int): The model property of type int.
        capital (str): The model property of type str.
        languages (List[Languages1]): The model property of type
            List[Languages1].
        country_flag (str): The model property of type str.
        country_flag_emoji (str): The model property of type str.
        country_flag_emoji_unicode (str): The model property of type str.
        calling_code (str): The model property of type str.
        is_eu (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "geoname_id": 'geoname_id',
        "capital": 'capital',
        "languages": 'languages',
        "country_flag": 'country_flag',
        "country_flag_emoji": 'country_flag_emoji',
        "country_flag_emoji_unicode": 'country_flag_emoji_unicode',
        "calling_code": 'calling_code',
        "is_eu": 'is_eu'
    }

    def __init__(self,
                 geoname_id=None,
                 capital=None,
                 languages=None,
                 country_flag=None,
                 country_flag_emoji=None,
                 country_flag_emoji_unicode=None,
                 calling_code=None,
                 is_eu=None):
        """Constructor for the Location4 class"""

        # Initialize members of the class
        self.geoname_id = geoname_id 
        self.capital = capital 
        self.languages = languages 
        self.country_flag = country_flag 
        self.country_flag_emoji = country_flag_emoji 
        self.country_flag_emoji_unicode = country_flag_emoji_unicode 
        self.calling_code = calling_code 
        self.is_eu = is_eu 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        geoname_id = dictionary.get("geoname_id") if dictionary.get("geoname_id") else None
        capital = dictionary.get("capital") if dictionary.get("capital") else None
        languages = None
        if dictionary.get('languages') is not None:
            languages = [Languages1.from_dictionary(x) for x in dictionary.get('languages')]
        country_flag = dictionary.get("country_flag") if dictionary.get("country_flag") else None
        country_flag_emoji = dictionary.get("country_flag_emoji") if dictionary.get("country_flag_emoji") else None
        country_flag_emoji_unicode = dictionary.get("country_flag_emoji_unicode") if dictionary.get("country_flag_emoji_unicode") else None
        calling_code = dictionary.get("calling_code") if dictionary.get("calling_code") else None
        is_eu = dictionary.get("is_eu") if "is_eu" in dictionary.keys() else None
        # Return an object of this model
        return cls(geoname_id,
                   capital,
                   languages,
                   country_flag,
                   country_flag_emoji,
                   country_flag_emoji_unicode,
                   calling_code,
                   is_eu)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        geoname_id = XmlUtilities.value_from_xml_element(root.find('geoname_id'), int)
        capital = XmlUtilities.value_from_xml_element(root.find('capital'), str)
        languages = XmlUtilities.list_from_xml_element(root, 'Languages1', Languages1)
        country_flag = XmlUtilities.value_from_xml_element(root.find('country_flag'), str)
        country_flag_emoji = XmlUtilities.value_from_xml_element(root.find('country_flag_emoji'), str)
        country_flag_emoji_unicode = XmlUtilities.value_from_xml_element(root.find('country_flag_emoji_unicode'), str)
        calling_code = XmlUtilities.value_from_xml_element(root.find('calling_code'), str)
        is_eu = XmlUtilities.value_from_xml_element(root.find('is_eu'), bool)

        return cls(geoname_id,
                   capital,
                   languages,
                   country_flag,
                   country_flag_emoji,
                   country_flag_emoji_unicode,
                   calling_code,
                   is_eu)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.geoname_id, 'geoname_id')
        XmlUtilities.add_as_subelement(root, self.capital, 'capital')
        XmlUtilities.add_list_as_subelement(root, self.languages, 'Languages1')
        XmlUtilities.add_as_subelement(root, self.country_flag, 'country_flag')
        XmlUtilities.add_as_subelement(root, self.country_flag_emoji, 'country_flag_emoji')
        XmlUtilities.add_as_subelement(root, self.country_flag_emoji_unicode, 'country_flag_emoji_unicode')
        XmlUtilities.add_as_subelement(root, self.calling_code, 'calling_code')
        XmlUtilities.add_as_subelement(root, self.is_eu, 'is_eu')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'geoname_id={self.geoname_id!r}, '
                f'capital={self.capital!r}, '
                f'languages={self.languages!r}, '
                f'country_flag={self.country_flag!r}, '
                f'country_flag_emoji={self.country_flag_emoji!r}, '
                f'country_flag_emoji_unicode={self.country_flag_emoji_unicode!r}, '
                f'calling_code={self.calling_code!r}, '
                f'is_eu={self.is_eu!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'geoname_id={self.geoname_id!s}, '
                f'capital={self.capital!s}, '
                f'languages={self.languages!s}, '
                f'country_flag={self.country_flag!s}, '
                f'country_flag_emoji={self.country_flag_emoji!s}, '
                f'country_flag_emoji_unicode={self.country_flag_emoji_unicode!s}, '
                f'calling_code={self.calling_code!s}, '
                f'is_eu={self.is_eu!s})')
