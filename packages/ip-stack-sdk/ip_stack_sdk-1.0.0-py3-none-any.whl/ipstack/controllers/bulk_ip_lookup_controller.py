# -*- coding: utf-8 -*-

"""
ipstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from ipstack.api_helper import APIHelper
from ipstack.configuration import Server
from ipstack.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from ipstack.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from ipstack.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from ipstack.models.m_200_ok_bulk_ip_lookup import M200OKBulkIPLookup
from ipstack.models.m_200_ok_hostname_1 import M200OKHostname1
from ipstack.models.m_200_ok_response_in_different_language_copy import M200OKResponseInDifferentLanguageCopy
from ipstack.models.m_200_ok_specific_response_with_fields_parameter_1 import M200OKSpecificResponseWithFieldsParameter1
from ipstack.models.batch import Batch


class BulkIPLookupController(BaseController):

    """A Controller to access Endpoints in the ipstack API."""
    def __init__(self, config):
        super(BulkIPLookupController, self).__init__(config)

    def bulk_ip_lookup(self):
        """Does a GET request to /72.229.28.185,110.174.165.78.

        The ipstack API offers the ability to request data for multiple IPv4
        or IPv6 addresses at the same time. In order to process IP addresses
        in bulk, simply append multiple comma-separated IP addresses to the
        API's base URL.

        Returns:
            List[M200OKBulkIPLookup]: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKBulkIPLookup.from_dictionary)
        ).execute()

    def hostnam(self,
                hostname):
        """Does a GET request to /72.229.28.185,110.174.165.78.

        Add "Hostname" \[optional\] and set to `1` to enable Hostname Lookup.

        Args:
            hostname (int): The request query parameter.

        Returns:
            List[M200OKHostname1]: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKHostname1.from_dictionary)
        ).execute()

    def response_wrapped_inside_a_callback(self,
                                           callback):
        """Does a GET request to /134.201.250.155,72.229.28.185,110.174.165.78.

        Specify a JSONP callback \[Optional\] function name according to the
        JSONP Callbacks section.

        Args:
            callback (str): Resposne will be wrapped inside this function name

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/134.201.250.155,72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('callback')
                         .value(callback))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def response_in_different_language(self,
                                       language):
        """Does a GET request to /72.229.28.185,110.174.165.78.

        \[optional\] Set to a 2-letter "language" code according to the
        Specify Output Language section to change output language.
        **Supported languages:**
        - `en` - English/US

        - `de` - German

        - `es` - Spanish

        - `fr` - French

        - `ja` - Japanese

        - `pt-br` - Portugues (Brazil)

        - `ru` - Russian

        - `zh` - Chinese

        Args:
            language (str): Supported languages:  en - English/US de - German
                es - Spanish fr - French ja - Japanese pt-br - Portugues
                (Brazil) ru - Russian zh - Chinese

        Returns:
            List[M200OKResponseInDifferentLanguageCopy]: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('language')
                         .value(language))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKResponseInDifferentLanguageCopy.from_dictionary)
        ).execute()

    def specific_response_with_fields_parameter(self,
                                                fields):
        """Does a GET request to /72.229.28.185,110.174.165.78.

        \[optional\] Set to your preferred output "field(s)" according to the
        Specify Output Fields section.

        Args:
            fields (str): [optional] Set to your preferred output field(s)
                according to the Specify Output Fields section.

        Returns:
            List[M200OKSpecificResponseWithFieldsParameter1]: Response from
                the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OKSpecificResponseWithFieldsParameter1.from_dictionary)
        ).execute()

    def xml_output(self,
                   output):
        """Does a GET request to /72.229.28.185,110.174.165.78.

        \[optional\] Set "output" to json or xml to choose between output
        formats.

        Args:
            output (str): The request query parameter.

        Returns:
            Batch: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/72.229.28.185,110.174.165.78')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('output')
                         .value(output))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(Batch)
            .is_xml_response(True)
        ).execute()
