{
  "language": "de",
  "intents": {
    "HassTurnOff": {
      "data": [
        {
          "sentences": [
            "(<schalten>|<machen>) <name>[ <area>] <aus>",
            "stoppe <name>[ <area>]",
            "<deaktivieren> <name>[ <area>]",
            "<name>[ <area>] <deaktivieren>",
            "<name>[ <area>] <aus>[schalten|machen]"
          ],
          "excludes_context": {
            "domain": [
              "binary_sensor",
              "cover",
              "lock",
              "scene",
              "script",
              "sensor"
            ]
          }
        },
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>|<alle_lichter>) <area> (aus|ab)",
            "(<schalten>|<machen>) <area> (<licht>|<lichter>|<alle_lichter>) (aus|ab)",
            "(<licht>|<lichter>|<alle_lichter>) <area> ((aus|ab)[schalten]|ausmachen)",
            "(<licht>|<lichter>|<alle_lichter>) ((aus|ab)[schalten]|ausmachen) <area>",
            "<area> (<licht>|<lichter>|<alle_lichter>) ((aus|ab)[schalten]|ausmachen)",
            "(<schalten>|<machen>) <alle_lichter> (aus|ab)",
            "<alle_lichter> ((aus|ab)[schalten]|ausmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>)[ hier] (aus|ab)",
            "(<schalten>|<machen>) hier (<licht>|<lichter>) (aus|ab)",
            "(<licht>|<lichter>)[ hier] ((aus|ab)[schalten]|ausmachen)",
            "hier (<licht>|<lichter>) ((aus|ab)[schalten]|ausmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>|<alle_lichter>) <floor> (aus|ab)",
            "(<schalten>|<machen>) <floor> (<licht>|<lichter>|<alle_lichter>) (aus|ab)",
            "(<licht>|<lichter>|<alle_lichter>) <floor> ((aus|ab)[schalten]|ausmachen)",
            "(<licht>|<lichter>|<alle_lichter>) ((aus|ab)[schalten]|ausmachen) <floor>",
            "<floor> (<licht>|<lichter>|<alle_lichter>) ((aus|ab)[schalten]|ausmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "<schliessen> <name>",
            "<name> <schliessen_end_of_sentence>",
            "(<machen>|<fahren>) <name> <zu>",
            "<name> <zu>[(machen|fahren)]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "slots": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<schliessen> <area_floor> (<abdeckung>|<tor>|<garage>)",
            "<schliessen> (<abdeckung>|<tor>|<garage>) <area_floor>",
            "(<abdeckung>|<tor>|<garage>) <area_floor> <schliessen_end_of_sentence>",
            "(<machen>|<fahren>) <area_floor> (<abdeckung>|<tor>|<garage>) <zu>",
            "(<machen>|<fahren>) (<abdeckung>|<tor>|<garage>) <area_floor> <zu>",
            "(<abdeckung>|<tor>|<garage>) <area_floor> <zu>[ (machen|fahren)]",
            "<area_floor> (<abdeckung>|<tor>|<garage>) <schliessen_end_of_sentence>",
            "<area_floor> (<abdeckung>|<tor>|<garage>) <zu> (machen|fahren)"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<schliessen>[ <area_floor>] (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)",
            "<schliessen> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>]",
            "(<machen>|<fahren>)[ <area_floor>] (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <zu>",
            "(<machen>|<fahren>) (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>] <zu>",
            "<area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <zu>[ (machen|fahren)]",
            "<area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <schliessen_end_of_sentence>",
            "(<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>] <zu>[ (machen|fahren)]",
            "(<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>] <schliessen_end_of_sentence>"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "close_all"
        },
        {
          "sentences": [
            "<schalten> <luefter> <area> <aus>",
            "<schalten> <area> <luefter> <aus>",
            "stoppe <luefter> <area>[ <aus>]",
            "stoppe <area> <luefter>[ <aus>]",
            "<machen> <luefter> <area> <aus>",
            "<machen> <area> <luefter> <aus>",
            "<luefter> <area> <aus>[schalten|machen]",
            "<area> <luefter> <aus>[schalten|machen]",
            "<schalten> <alle_luefter>[ <area>] <aus>",
            "<schalten> <area> <alle_luefter> <aus>",
            "stoppe <alle_luefter>[ <area>][ <aus>]",
            "stoppe[ <area>] <alle_luefter>[ <aus>]",
            "<machen> <alle_luefter>[ <area>] <aus>",
            "<machen> <area> <alle_luefter> <aus>",
            "<alle_luefter>[ <area>] <aus>[schalten|machen]",
            "<area> <alle_luefter> <aus>[schalten|machen]"
          ],
          "slots": {
            "domain": "fan"
          },
          "response": "fan_all"
        },
        {
          "sentences": [
            "<entsperren> <name>[ <area>]",
            "<entsperren> <area> <name>",
            "(<sperren>|<machen>) <name>[ <area>] auf",
            "(<sperren>|<machen>) <area> <name> auf",
            "<name>[ <area>] (auf[machen]|<entsperren>)",
            "<area> <name> (auf[machen]|<entsperren>)"
          ],
          "requires_context": {
            "domain": "lock"
          },
          "response": "lock"
        },
        {
          "sentences": [
            "<entsperren>[ <alle>] (<tuer>|<schloss>) <area>",
            "<entsperren> <area>[ <alle>] (<tuer>|<schloss>)",
            "(<sperren>|<machen>)[ <alle>] (<tuer>|<schloss>) <area> auf",
            "(<sperren>|<machen>) <area>[ <alle>] (<tuer>|<schloss>) auf",
            "[<alle> ](<tuer>|<schloss>) <area> (auf[machen]|<entsperren>)",
            "<area>[ <alle>] (<tuer>|<schloss>) (auf[machen]|<entsperren>)"
          ],
          "requires_context": {
            "domain": "lock"
          },
          "response": "lock"
        },
        {
          "sentences": [
            "<schliessen> <name>",
            "<name> <schliessen_end_of_sentence>",
            "<name> ([zu|ab][ ]drehen)"
          ],
          "requires_context": {
            "domain": "valve"
          },
          "slots": {
            "domain": "valve"
          },
          "response": "valve"
        }
      ]
    },
    "HassGetState": {
      "data": [
        {
          "sentences": [
            "wo (ist|befindet sich) <name>",
            "wo hält sich <name> auf"
          ],
          "response": "wo",
          "requires_context": {
            "domain": "person"
          },
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "(ist|befindet sich) <name> <im_bereich>",
            "hält sich <name> <im_bereich> auf"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "person"
          },
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "(ist|befindet sich) <name> <im_zuhause>",
            "hält sich <name> <im_zuhause> auf"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "person"
          },
          "slots": {
            "domain": "person",
            "state": "home"
          }
        },
        {
          "sentences": [
            "(ist|befindet sich) [irgend]jemand <im_bereich>",
            "hält sich [irgend]jemand <im_bereich> auf"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "(ist|befindet sich) [irgend]jemand <im_zuhause>",
            "hält sich [irgend]jemand <im_zuhause> auf"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "person",
            "state": "home"
          }
        },
        {
          "sentences": [
            "((ist|befindet sich) jeder|(sind|befinden sich) alle) <im_bereich>",
            "halten sich alle <im_bereich> auf"
          ],
          "response": "alle",
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "((ist|befindet sich) jeder|(sind|befinden sich) alle) <im_zuhause>",
            "halten sich alle <im_zuhause> auf"
          ],
          "response": "alle",
          "slots": {
            "domain": "person",
            "state": "home"
          }
        },
        {
          "sentences": [
            "wer (ist|befindet sich) <im_bereich>",
            "wer hält sich <im_bereich> auf"
          ],
          "response": "wer",
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "wer (ist|befindet sich) <im_zuhause>",
            "wer hält sich <im_zuhause> auf"
          ],
          "response": "wer",
          "slots": {
            "domain": "person",
            "state": "home"
          }
        },
        {
          "sentences": [
            "wie viele [(Leute|Personen) ](sind|befinden sich) <im_bereich>",
            "wie viele [(Leute|Personen) ]halten sich <im_bereich> auf"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "person"
          }
        },
        {
          "sentences": [
            "wie viele [(Leute|Personen) ](sind|befinden sich) <im_zuhause>",
            "wie viele [(Leute|Personen) ]halten sich <im_zuhause> auf"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "person",
            "state": "home"
          }
        },
        {
          "sentences": [
            "ist <name> {lock_states:state}[ <area>]",
            "ist <name> <area> {lock_states:state}",
            "ist <area> <name> {lock_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "lock"
          },
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(gibt(s| es))[ <irgend>] {lock_domains:domain} die {lock_states:state} sind[ <area>]",
            "(gibt(s| es)) <area>[ <irgend>] {lock_domains:domain} die {lock_states:state} sind",
            "(gibt(s| es))[ <irgend>] {lock_domains:domain} <area> die {lock_states:state} sind",
            "(ist|sind)[ <irgend>] {lock_domains:domain} {lock_states:state}[ <area>]",
            "(ist|sind)[ <irgend>] {lock_domains:domain} <area> {lock_states:state}",
            "(ist|sind) <area>[ <irgend>] {lock_domains:domain} {lock_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(sind|ist) <alle> {lock_domains:domain} {lock_states:state}[ <area>]",
            "(sind|ist) <alle> {lock_domains:domain} <area> {lock_states:state}",
            "(sind|ist) <area> <alle> {lock_domains:domain} {lock_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "<welche> {lock_domains:domain} (ist|sind) {lock_states:state}[ <area>]",
            "<welche> {lock_domains:domain} (ist|sind) <area> {lock_states:state}",
            "<welche> {lock_domains:domain} <area> (ist|sind) {lock_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "<wieviel> {lock_domains:domain} (ist|sind) {lock_states:state}[ <area>]",
            "<wieviel> {lock_domains:domain} (ist|sind) <area> {lock_states:state}",
            "<wieviel> {lock_domains:domain} <area> (ist|sind) {lock_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(wie|was) ist[ [der ]Zustand <von_dem>] <name>[ <area_floor>]"
          ],
          "response": "einzeln",
          "excludes_context": {
            "domain": [
              "person",
              "scene",
              "script"
            ]
          }
        },
        {
          "sentences": [
            "ist <name> {on_off_states:state}[ <area_floor>]",
            "ist <name>[ <area_floor>] {on_off_states:state}",
            "ist[ <area_floor>] <name> {on_off_states:state}"
          ],
          "response": "einzeln_janein",
          "excludes_context": {
            "domain": [
              "cover"
            ]
          }
        },
        {
          "sentences": [
            "sind[ <irgend>] {on_off_domains:domain} {on_off_states:state}[ <area_floor>]",
            "sind[ <irgend>] {on_off_domains:domain}[ <area_floor>] {on_off_states:state}",
            "sind[ <area_floor>][ <irgend>] {on_off_domains:domain} {on_off_states:state}"
          ],
          "response": "irgendeins"
        },
        {
          "sentences": [
            "(sind|ist) <alle> {on_off_domains:domain} {on_off_states:state}[ <area_floor>]",
            "(sind|ist) <alle> {on_off_domains:domain}[ <area_floor>] {on_off_states:state}",
            "(sind|ist)[ <area_floor>] <alle> {on_off_domains:domain} {on_off_states:state}"
          ],
          "response": "alle"
        },
        {
          "sentences": [
            "<welche> {on_off_domains:domain} (ist|sind) {on_off_states:state}[ <area_floor>]",
            "<welche> {on_off_domains:domain} (ist|sind)[ <area_floor>] {on_off_states:state}",
            "<welche> {on_off_domains:domain}[ <area_floor>] (ist|sind) {on_off_states:state}"
          ],
          "response": "welches"
        },
        {
          "sentences": [
            "<wieviel> {on_off_domains:domain} (ist|sind) {on_off_states:state}[ <area_floor>]",
            "<wieviel> {on_off_domains:domain} (ist|sind)[ <area_floor>] {on_off_states:state}",
            "<wieviel> {on_off_domains:domain}[ <area_floor>] (ist|sind) {on_off_states:state}"
          ],
          "response": "wie_viele"
        },
        {
          "sentences": [
            "ist <name> {cover_states:state}[ <area_floor>]",
            "ist <name> <area_floor> {cover_states:state}",
            "ist <area_floor> <name> {cover_states:state}",
            "{cover_states:state}[ sich] <name>[ <area_floor>]"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "cover"
          },
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "sind[ <irgend>] {cover_classes:device_class} {cover_states:state}[ <area_floor>]",
            "sind[ <irgend>] {cover_classes:device_class} <area_floor> {cover_states:state}",
            "sind <area_floor>[ <irgend>] {cover_classes:device_class} {cover_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(sind|ist) <alle> {cover_classes:device_class} {cover_states:state}[ <area_floor>]",
            "(sind|ist) <alle> {cover_classes:device_class} <area_floor> {cover_states:state}",
            "(sind|ist) <alle> <area_floor> {cover_classes:device_class} {cover_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "<welche> {cover_classes:device_class} (ist|sind) {cover_states:state}[ <area_floor>]",
            "<welche> {cover_classes:device_class} (ist|sind) <area_floor> {cover_states:state}",
            "<welche> {cover_classes:device_class} <area_floor> (ist|sind) {cover_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "<wieviel> {cover_classes:device_class} (ist|sind) {cover_states:state}[ <area_floor>]",
            "<wieviel> {cover_classes:device_class} (ist|sind) <area_floor> {cover_states:state}",
            "<wieviel> {cover_classes:device_class} <area_floor> (ist|sind) {cover_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "ist <name>[ <batterie>][ <area>] {bs_battery_states:state}",
            "ist[ <ladestand>] <batterie> <von_dem> <name>[ <area>] {bs_battery_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "battery"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "(ist|sind)[ <irgend>] <batterie>[ <area>] {bs_battery_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "sind <alle> <batterie>[ <area>] {bs_battery_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "<welche> <batterie>[ <area>] (ist|sind) {bs_battery_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "<wieviel> <batterie>[ <area>] (ist|sind) {bs_battery_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "wird <name>[ <batterie>][ <area>] {bs_battery_charging_states:state}",
            "{bs_battery_charging_states:state} <name>[ <batterie>][ <area>][ auf]"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "(wird|werden)[ <irgend>] <batterie>[ <area>] {bs_battery_charging_states:state}",
            "{bs_battery_charging_states:state}[ <irgend>] <batterie>[ <area>][ auf]"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "werden <alle> <batterie>[ <area>] {bs_battery_charging_states:state}",
            "{bs_battery_charging_states:state} <alle> <batterie>[ <area>][ auf]"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "<welche> <batterie>[ <area>][ (wird|werden)] {bs_battery_charging_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "<wieviel> <batterie>[ <area>][ werden] {bs_battery_charging_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "(ist|wurde) <name>[ <area>] {bs_carbon_monoxide_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "(ist|sind|wurde[n])[ <irgend>] <co_sensor>[ <area>] {bs_carbon_monoxide_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "(gibt es|ist)[ <irgend>] <co> <area>",
            "(wird|wurde)[ <irgend>] <co> <area> {bs_carbon_monoxide_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide",
            "state": "on"
          }
        },
        {
          "sentences": [
            "(sind|wurden) <alle> <co_sensor>[ <area>] {bs_carbon_monoxide_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "<welche> <co_sensor> (ist|sind|wurde[n])[ <area>] {bs_carbon_monoxide_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "<wieviel> <co_sensor> (sind|wurden)[ <area>] {bs_carbon_monoxide_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "ist <name>[ <area>] {bs_cold_states:state}",
            "ist <area> <name> {bs_cold_states:state}",
            "ist <name> {bs_cold_states:state} <area>"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "cold"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold"
          }
        },
        {
          "sentences": [
            "(ist|sind)[ <irgend>] <ding>[ <area>] kalt",
            "(ist|sind)[ <irgend>] <ding> kalt <area>",
            "(ist|sind) <area>[ <irgend>] <ding> kalt",
            "ist <etwas>[ <area>] kalt",
            "ist <etwas> kalt <area>",
            "ist <area> <etwas> kalt"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold",
            "state": "on"
          }
        },
        {
          "sentences": [
            "sind <alle> <ding>[ <area>] kalt",
            "sind <alle> <ding> kalt <area>",
            "sind <area> <alle> <ding> kalt"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<welche> <ding> (ist|sind)[ <area>] kalt",
            "<welche> <ding> (ist|sind) kalt <area>",
            "<welche> <ding> <area> (ist|sind) kalt"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<wieviel> <ding> sind[ <area>] kalt",
            "<wieviel> <ding> sind kalt <area>",
            "<wieviel> <ding> <area> sind kalt"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold",
            "state": "on"
          }
        },
        {
          "sentences": [
            "ist <name>[ <area>] {bs_connectivity_states:state}",
            "ist <area> <name> {bs_connectivity_states:state}",
            "ist <name> {bs_connectivity_states:state} <area>"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "(ist|sind) ([<irgend>] <ding>|<etwas>)[ <area>] {bs_connectivity_states:state}",
            "(ist|sind) ([<irgend>] <ding>|<etwas>) {bs_connectivity_states:state} <area>",
            "(ist|sind) <area> ([<irgend>] <ding>|<etwas>) {bs_connectivity_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "sind <alle> <ding>[ <area>] {bs_connectivity_states:state}",
            "sind <alle> <ding> {bs_connectivity_states:state} <area>",
            "sind <area> <alle> <ding> {bs_connectivity_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "<welche> <ding>[ <area>] (ist|sind) {bs_connectivity_states:state}",
            "<welche> <ding> (ist|sind) <area> {bs_connectivity_states:state}",
            "<welche> <ding> (ist|sind) {bs_connectivity_states:state} <area>"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "<wieviel> <ding>[ <area>] sind {bs_connectivity_states:state}",
            "<wieviel> <ding> sind <area> {bs_connectivity_states:state}",
            "<wieviel> <ding> sind {bs_connectivity_states:state} <area>"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "(ist|steht) <name>[ <area>] {bs_door_states:state}",
            "(ist|steht) <name> {bs_door_states:state} <area>",
            "(ist|steht) <area> <name> {bs_door_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "door"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "door"
          }
        },
        {
          "sentences": [
            "(sind|stehen) <alle> türen[ <area>] {bs_door_states:state}",
            "(sind|stehen) <alle> türen {bs_door_states:state} <area>",
            "(sind|stehen) <area> <alle> türen {bs_door_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "door"
          }
        },
        {
          "sentences": [
            "<wieviel> türen[ <area>] sind {bs_door_states:state}",
            "<wieviel> türen sind <area> {bs_door_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "door"
          }
        },
        {
          "sentences": [
            "(ist|steht) <name>[ <area>] {bs_garage_door_states:state}",
            "(ist|steht) <name> {bs_garage_door_states:state} <area>",
            "(ist|steht) <area> <name> {bs_garage_door_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "garage_door"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "garage_door"
          }
        },
        {
          "sentences": [
            "(ist|steht) <name>[ <area>] {bs_window_states:state}",
            "(ist|steht) <name> {bs_window_states:state} <area>",
            "(ist|steht) <area> <name> {bs_window_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "window"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "window"
          }
        },
        {
          "sentences": [
            "(sind|stehen) <alle> fenster[ <area>] {bs_window_states:state}",
            "(sind|stehen) <alle> fenster {bs_window_states:state} <area>",
            "(sind|stehen) <area> <alle> fenster {bs_window_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "window"
          }
        },
        {
          "sentences": [
            "<wieviel> fenster[ <area>] sind {bs_window_states:state}",
            "<wieviel> fenster sind <area> {bs_window_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "window"
          }
        },
        {
          "sentences": [
            "(ist|wurde) <name>[ <area>] {bs_gas_states:state}",
            "(ist|wurde) <name> {bs_gas_states:state} <area>",
            "(ist|wurde) <area> <name> {bs_gas_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "gas"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "(ist|sind|wurde[n])[ <irgend>] <gas_sensor>[ <area>] {bs_gas_states:state}",
            "(ist|sind|wurde[n])[ <irgend>] <gas_sensor> {bs_gas_states:state} <area>",
            "(ist|sind|wurde[n]) <area>[ <irgend>] <gas_sensor> {bs_gas_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "(gibt es|ist[ da])[ <irgend>] Gas <area>",
            "(wird|wurde)[ <irgend>] Gas <area> {bs_gas_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas",
            "state": "on"
          }
        },
        {
          "sentences": [
            "(sind|wurden) <alle> <gas_sensor>[ <area>] {bs_gas_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "<welche> <gas_sensor> (ist|sind|wurde[n])[ <area>] {bs_gas_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "<wieviel> <gas_sensor> (sind|wurden)[ <area>] {bs_gas_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "ist <name>[ <area>] {bs_heat_states:state}",
            "ist <area> <name> {bs_heat_states:state}",
            "ist <name> {bs_heat_states:state} <area>"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "heat"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat"
          }
        },
        {
          "sentences": [
            "(ist|sind)[ <irgend>] <ding>[ <area>] hei(ß|ss)",
            "(ist|sind)[ <irgend>] <ding> hei(ß|ss) <area>",
            "(ist|sind) <area>[ <irgend>] <ding> hei(ß|ss)",
            "ist <etwas>[ <area>] hei(ß|ss)",
            "ist <etwas> hei(ß|ss) <area>",
            "ist <area> <etwas> hei(ß|ss)"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat",
            "state": "on"
          }
        },
        {
          "sentences": [
            "sind <alle> <ding>[ <area>] hei(ß|ss)",
            "sind <alle> <ding> hei(ß|ss) <area>",
            "sind <area> <alle> <ding> hei(ß|ss)"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<welche> <ding> (ist|sind)[ <area>] hei(ß|ss)",
            "<welche> <ding> (ist|sind) hei(ß|ss) <area>",
            "<welche> <ding> <area> (ist|sind) hei(ß|ss)"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<wieviel> <ding> sind[ <area>] hei(ß|ss)",
            "<wieviel> <ding> sind hei(ß|ss) <area>",
            "<wieviel> <ding> <area> sind hei(ß|ss)"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<ist_wurde> <name>[ <area>] {bs_light_states:state}",
            "<ist_wurde> <name> {bs_light_states:state} <area>",
            "<ist_wurde> <area> <name> {bs_light_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "light"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "(<ist_wurde>|<sind_wurden>)[ <irgend>] Licht[er][ <area>] {bs_light_states:state}",
            "(<ist_wurde>|<sind_wurden>)[ <irgend>] Licht[er] {bs_light_states:state} <area>",
            "(<ist_wurde>|<sind_wurden>) <area>[ <irgend>] Licht[er] {bs_light_states:state}",
            "(<ist_wurde>|<sind_wurden>)[ <irgend>] <area> Licht[er] {bs_light_states:state}"
          ],
          "response": "irgendeins",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "<sind_wurden> <alle> Licht[er][ <area>] {bs_light_states:state}",
            "<sind_wurden> <alle> Licht[er] {bs_light_states:state} <area>",
            "<sind_wurden> <area> <alle> Licht[er] {bs_light_states:state}"
          ],
          "response": "alle",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "<welche> Licht[er] (<ist_wurde>|<sind_wurden>)[ <area>] {bs_light_states:state}",
            "<welche> Licht[er] (<ist_wurde>|<sind_wurden>) {bs_light_states:state} <area>",
            "<welche> Licht[er] <area> (<ist_wurde>|<sind_wurden>) {bs_light_states:state}"
          ],
          "response": "welches",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "<wieviel> Licht[er] (<ist_wurde>|<sind_wurden>)[ <area>] {bs_light_states:state}",
            "<wieviel> Licht[er] (<ist_wurde>|<sind_wurden>) {bs_light_states:state} <area>",
            "<wieviel> Licht[er] <area> (<ist_wurde>|<sind_wurden>) {bs_light_states:state}"
          ],
          "response": "wie_viele",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "Gibt es[ <irgend>] Problem[e] mit <name>[ <area>]",
            "Hat der <name>[ <area>][ <irgend>] Problem[e]"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "problem"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "problem",
            "state": "on"
          }
        },
        {
          "sentences": [
            "(ist|sind) <name> {bs_safety_states:state}[ <area>]",
            "(ist|sind) <name> <area> {bs_safety_states:state}",
            "(ist|sind) <area> <name> {bs_safety_states:state}"
          ],
          "response": "einzeln_janein",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "safety"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "safety"
          }
        }
      ]
    },
    "HassCancelTimer": {
      "data": [
        {
          "sentences": [
            "<timer_cancel>[ (den|meinen)] Timer",
            "<timer_cancel>[ (den|meinen)] <timer_start> Timer",
            "<timer_cancel>[ (den|meinen)] Timer für <timer_start>",
            "<timer_cancel>[ (den|meinen)] {area} Timer",
            "<timer_cancel>[ (den|meinen)] Timer <area>",
            "<timer_cancel>[ (den|meinen)] {timer_name:name} Timer",
            "<timer_cancel>[ (den|meinen)] Timer für {timer_name:name}",
            "[(den|meinen) ][<timer_start> ]Timer <timer_cancel_end_of_sentence>"
          ]
        }
      ]
    },
    "HassTimerStatus": {
      "data": [
        {
          "sentences": [
            "Timer Status",
            "Status (des|meines) Timers",
            "wie lange (läuft|braucht|hat|dauert) (der|mein) Timer noch",
            "was macht (der|mein) Timer",
            "<timer_start> Timer Status",
            "Status (des|meines) <timer_start> Timers",
            "wie lange (läuft|braucht|hat|dauert) (der|mein) <timer_start> Timer noch",
            "was macht (der|mein) <timer_start> Timer",
            "{area} Timer Status",
            "Status (des|meines) {area} Timers",
            "Status (des|meines) Timers <area>",
            "wie lange (läuft|braucht|hat|dauert) (der|mein) {area} Timer noch",
            "wie lange (läuft|braucht|hat|dauert) (der|mein) Timer <area> noch",
            "was macht (der|mein) {area} Timer",
            "was macht (der|mein) Timer <area>",
            "{timer_name:name} Timer Status",
            "Status (des|meines) {timer_name:name} Timers",
            "wie lange (läuft|braucht|hat|dauert) (der|mein) {timer_name:name} Timer noch",
            "was macht (der|mein) {timer_name:name} Timer"
          ]
        }
      ]
    },
    "HassGetWeather": {
      "data": [
        {
          "sentences": [
            "wie ist[ das] Wetter"
          ]
        },
        {
          "sentences": [
            "wie ist[ das] Wetter[ (für|in) <name>]",
            "wie ist[ das] <name>[er|s] Wetter",
            "was für[ ein] Wetter (ist|hat es) in <name>"
          ],
          "requires_context": {
            "domain": "weather"
          }
        }
      ]
    },
    "HassGetCurrentTime": {
      "data": [
        {
          "sentences": [
            "wie spät ist es",
            "(wie viel|wieviel) uhr (ist es|haben wir)",
            "(nenn[e]|gib|gebe|sag[e]|verrat[e]) mir die[ aktuelle] uhrzeit"
          ]
        }
      ]
    },
    "HassTurnOn": {
      "data": [
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>|<alle_lichter>) <area> (an|ein)",
            "(<schalten>|<machen>) <area> (<licht>|<lichter>|<alle_lichter>) (an|ein)",
            "(<licht>|<lichter>|<alle_lichter>) <area> ((an|ein)[schalten]|anmachen)",
            "(<licht>|<lichter>|<alle_lichter>) ((an|ein)[schalten]|anmachen) <area>",
            "<area> (<licht>|<lichter>|<alle_lichter>) ((an|ein)[schalten]|anmachen)",
            "(<schalten>|<machen>) <alle_lichter> (an|ein)",
            "<alle_lichter> ((an|ein)[schalten]|anmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>)[ hier] (an|ein)",
            "(<schalten>|<machen>) hier (<licht>|<lichter>) (an|ein)",
            "(<licht>|<lichter>)[ hier] ((an|ein)[schalten]|anmachen)",
            "hier (<licht>|<lichter>) ((an|ein)[schalten]|anmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "(<schalten>|<machen>) (<licht>|<lichter>|<alle_lichter>) <floor> (an|ein)",
            "(<schalten>|<machen>) <floor> (<licht>|<lichter>|<alle_lichter>) (an|ein)",
            "(<licht>|<lichter>|<alle_lichter>) <floor> ((an|ein)[schalten]|anmachen)",
            "(<licht>|<lichter>|<alle_lichter>) ((an|ein)[schalten]|anmachen) <floor>",
            "<floor> (<licht>|<lichter>|<alle_lichter>) ((an|ein)[schalten]|anmachen)"
          ],
          "response": "light",
          "slots": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "<schalten> <luefter> <area> <an>",
            "<schalten> <area> <luefter> <an>",
            "starte <luefter> <area>[ <an>]",
            "starte <area> <luefter>[ <an>]",
            "<machen> <luefter> <area> <an>",
            "<machen> <area> <luefter> <an>",
            "<luefter> <area> <an>[schalten|machen]",
            "<area> <luefter> <an>[schalten|machen]",
            "starte <alle_luefter>[ <area>][ <an>]",
            "starte[ <area>] <alle_luefter>[ <an>]",
            "<schalten> <alle_luefter>[ <area>] <an>",
            "<schalten> <area> <alle_luefter> <an>",
            "<machen> <alle_luefter>[ <area>] <an>",
            "<machen> <area> <alle_luefter> <an>",
            "<alle_luefter>[ <area>] <an>[schalten|machen]",
            "<area> <alle_luefter> <an>[schalten|machen]"
          ],
          "slots": {
            "domain": "fan"
          },
          "response": "fan_all"
        },
        {
          "sentences": [
            "[<skript> ]<name> (<ausfuehren>|<aktivieren>)",
            "<name> <skript> (<ausfuehren>|<aktivieren>)",
            "führe[ <skript>] <name> aus",
            "führe <name> <skript> aus",
            "<aktivieren>[ <skript>] <name>",
            "<aktivieren> <name> <skript>"
          ],
          "requires_context": {
            "domain": "script"
          },
          "slots": {
            "domain": "script"
          },
          "response": "script"
        },
        {
          "sentences": [
            "[<szene> ]<name>[(<aktivieren>|<ausfuehren>|<an>)]",
            "<name> <szene> (<aktivieren>|<ausfuehren>|<an>)",
            "führe[ <szene>] <name> aus",
            "führe <name> <szene> aus",
            "<aktivieren>[ <szene>] <name>",
            "<aktivieren> <name> <szene>"
          ],
          "requires_context": {
            "domain": "scene"
          },
          "slots": {
            "domain": "scene"
          },
          "response": "scene"
        },
        {
          "sentences": [
            "[<szene> ]<name> <area>[ (<aktivieren>|<ausfuehren>|<an>)]",
            "<name> <szene> <area> (<aktivieren>|<ausfuehren>|<an>)",
            "führe[ <szene>] <name> <area> aus",
            "führe <name> <szene> <area> aus",
            "<aktivieren>[ <szene>] <name> <area>",
            "<aktivieren> <name> <szene> <area>"
          ],
          "slots": {
            "domain": "scene"
          },
          "response": "scene"
        },
        {
          "sentences": [
            "öffne <name>",
            "<name> <öffnen_end_of_sentence>",
            "<name> auf(machen|[ ]drehen)"
          ],
          "requires_context": {
            "domain": "valve"
          },
          "slots": {
            "domain": "valve"
          },
          "response": "valve"
        },
        {
          "sentences": [
            "(<sperren>|<machen>) <name>[ <area>][ (zu|ab)]",
            "(<sperren>|<machen>) <area> <name>[ (zu|ab)]",
            "<name>[ <area>] (zu[machen]|<absperren>)",
            "<area> <name> (zu[machen]|<absperren>)",
            "<absperren> <name>[ <area>]",
            "<absperren> <area> <name>"
          ],
          "requires_context": {
            "domain": "lock"
          },
          "response": "lock"
        },
        {
          "sentences": [
            "(<sperren>|<machen>)[ <alle>] (<tuer>|<schloss>) <area>[ (zu|ab)]",
            "(<sperren>|<machen>) <area>[ <alle>] (<tuer>|<schloss>)[ (zu|ab)]",
            "[<alle> ](<tuer>|<schloss>) <area> (zu[machen]|<absperren>)",
            "<area>[ <alle>] (<tuer>|<schloss>) (zu[machen]|<absperren>)",
            "<absperren>[ <alle>] (<tuer>|<schloss>) <area>",
            "<absperren> <area>[ <alle>] (<tuer>|<schloss>)"
          ],
          "requires_context": {
            "domain": "lock"
          },
          "response": "lock"
        },
        {
          "sentences": [
            "(<schalten>|<machen>) <name>[ <area>] <an>",
            "starte <name>[ <area>]",
            "<aktivieren> <name>[ <area>]",
            "<name>[ <area>] <aktivieren>",
            "<name>[ <area>] <an>[schalten|machen]"
          ],
          "excludes_context": {
            "domain": [
              "binary_sensor",
              "cover",
              "lock",
              "scene",
              "script",
              "sensor",
              "vacuum",
              "valve"
            ]
          }
        },
        {
          "sentences": [
            "öffne <name>",
            "<name> <öffnen_end_of_sentence>",
            "(<machen>|<fahren>) <name> <auf>",
            "<name> <auf>[(machen|fahren)]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "slots": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "öffne <area_floor> (<abdeckung>|<tor>|<garage>)",
            "öffne (<abdeckung>|<tor>|<garage>) <area_floor>",
            "<area_floor> (<abdeckung>|<tor>|<garage>) <öffnen_end_of_sentence>",
            "(<abdeckung>|<tor>|<garage>) <area_floor> <öffnen_end_of_sentence>",
            "(<machen>|<fahren>) <area_floor> (<abdeckung>|<tor>|<garage>) <auf>",
            "(<machen>|<fahren>) (<abdeckung>|<tor>|<garage>) <area_floor> <auf>",
            "(<abdeckung>|<tor>|<garage>) <area_floor> <auf>[ (machen|fahren)]",
            "<area_floor> (<abdeckung>|<tor>|<garage>) <auf>[ (machen|fahren)]"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "öffne <area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)",
            "öffne (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <area_floor>",
            "<area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <öffnen_end_of_sentence>",
            "<area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <auf>[ (machen|fahren)]",
            "(<machen>|<fahren>) <area_floor> (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <auf>",
            "(<machen>|<fahren>) (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <area_floor> <auf>",
            "öffne (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>]",
            "(<machen>|<fahren>)[ <area_floor>] (<alle_abdeckungen>|<alle_tore>|<alle_garagen>) <auf>",
            "(<machen>|<fahren>) (<alle_abdeckungen>|<alle_tore>|<alle_garagen>)[ <area_floor>] <auf>",
            "(<alle_abdeckungen>|<alle_tore>|<alle_garagen>) (<auf> [(machen|fahren)]|<öffnen_end_of_sentence>)"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "open_all"
        }
      ]
    },
    "HassMediaUnpause": {
      "data": [
        {
          "sentences": [
            "[(am|auf) ]<name> weiter[ (machen|<local_play>)]",
            "[(am|auf) ]<name> weiter(machen|schauen|hören|spielen|laufen lassen)",
            "<name> fortsetzen",
            "<name> wieder (starten|[ab]spielen|laufen lassen)"
          ],
          "requires_context": {
            "domain": "media_player"
          },
          "expansion_rules": {
            "local_play": "(laufen lassen|[an]hören|[ab]spielen|[an]schauen)"
          }
        },
        {
          "sentences": [
            "[[(die|das|mein|meine) ]<media_type> ](fortsetzen|weiter[ (machen|<local_play>)]|wieder <local_play>)",
            "[[(die|das|mein|meine) ]<media_type> ]weiter(machen|schauen|hören|spielen|laufen lassen)",
            "lass [(die|das|mein|meine) ]<media_type> wieder (starten|[ab]spielen|laufen)",
            "lass [(die|das|mein|meine) ]<media_type> weiter ([ab]spielen|laufen)",
            "lass [(die|das|mein|meine) ]<media_type> weiter(spielen|laufen)",
            "(Ich (will|mag|möchte)|wir (wollen|mögen|möchten)) weiter (hören|schauen)",
            "(Ich (will|mag|möchte)|wir (wollen|mögen|möchten)) weiter(hören|schauen)"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          },
          "expansion_rules": {
            "local_play": "(laufen lassen|[an]hören|[ab]spielen|[an]schauen)"
          }
        },
        {
          "sentences": [
            "[(die|das|mein|meine) ]<media_type> <area> (fortsetzen|weiter[ (machen|<local_play>)])",
            "[(die|das|mein|meine) ]<media_type> <area> weiter(machen|schauen|hören|spielen|laufen lassen)",
            "setz[e] [(die|das|mein|meine) ]<media_type> <area> fort",
            "spiel[e] [(die|das|mein|meine) ]<media_type> <area> (wieder ab|weiter[ ab])",
            "[(die|das|mein|meine) ]<media_type> <area> wieder (starten|[ab]spielen|laufen lassen)",
            "[(die|das|mein|meine) ]<media_type> <area> weiter[ ]([ab]spielen|laufen lassen)",
            "lass [(die|das|mein|meine) ]<media_type> <area> wieder (starten|[ab]spielen|laufen)",
            "lass [(die|das|mein|meine) ]<media_type> <area> weiter ([ab]spielen|laufen)",
            "lass [(die|das|mein|meine) ]<media_type> <area> weiter(spielen|laufen)"
          ],
          "expansion_rules": {
            "local_play": "(laufen lassen|[an]hören|[ab]spielen|[an]schauen)"
          }
        }
      ]
    },
    "HassShoppingListAddItem": {
      "data": [
        {
          "sentences": [
            "füge <item>[ (zu|zur)] <meine_liste_dativ> hinzu",
            "füge <item>[ (zu|zum)] <mein_einkauf_dativ> hinzu",
            "füge[ (zu|zur)] <meine_liste_dativ> <item> hinzu",
            "füge[ (zu|zum)] <mein_einkauf_dativ> <item> hinzu",
            "(setz[e]|schreib[e]|nehme|nimm) <item> (auf|in) <meine_liste_akkusativ>",
            "<item> (auf|in) <meine_liste_akkusativ>[ (setzen|schreiben|nehmen)]",
            "<item>[ (zu|zur)] <meine_liste_dativ> hinzufügen",
            "<item>[ (zu|zum)] <mein_einkauf_dativ> hinzufügen",
            "<item>[ (auf|in)] <meine_liste_akkusativ> hinzufügen"
          ],
          "response": "item_added",
          "expansion_rules": {
            "mein_einkauf_dativ": "[meinem|dem] Einkauf",
            "meine_liste_dativ": "[meiner|der] [Einkaufs]Liste",
            "meine_liste_akkusativ": "[meine|die] [Einkaufs]Liste",
            "item": "{shopping_list_item:item}"
          }
        }
      ]
    },
    "HassCancelAllTimers": {
      "data": [
        {
          "sentences": [
            "<timer_cancel> (alle[ meine]|sämtliche) Timer",
            "(alle[ meine]|sämtliche[ meiner]) Timer <timer_cancel_end_of_sentence>"
          ]
        },
        {
          "sentences": [
            "<timer_cancel> (alle[ meine]|sämtliche) Timer <area>",
            "<timer_cancel> <area> (alle[ meine]|sämtliche) Timer",
            "(alle[ meine]|sämtliche[ meiner]) Timer <area> <timer_cancel_end_of_sentence>"
          ],
          "response": "area"
        },
        {
          "sentences": [
            "<timer_cancel> (alle[ meine]|sämtliche) Timer (hier|in diesem [Bereich|Raum])",
            "<timer_cancel> (hier|in diesem [Bereich|Raum]) (alle[ meine]|sämtliche) Timer",
            "(alle[ meine]|sämtliche[ meiner]) Timer (hier|in diesem [Bereich|Raum]) <timer_cancel_end_of_sentence>"
          ],
          "response": "area",
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        }
      ]
    },
    "HassNevermind": {
      "data": [
        {
          "sentences": [
            "vergiss es",
            "egal",
            "abbrechen",
            "Abbruch",
            "[doch ](nicht[s]|nix)"
          ]
        }
      ]
    },
    "HassGetCurrentDate": {
      "data": [
        {
          "sentences": [
            "<welche> (tag|datum) (ist|haben wir)[ heute]",
            "was (ist|haben wir) [heute ]für ein[en] (Tag|Datum)",
            "(nenn[e]|gib|gebe|sag[e]|verrat[e]) mir das([ heutige] Datum|[ aktuelle] Datum[ von heute])"
          ]
        }
      ]
    },
    "HassIncreaseTimer": {
      "data": [
        {
          "sentences": [
            "verlängere[ (den|meinen)] Timer um <timer_duration>",
            "verlängere[ (den|meinen)] <timer_start> Timer um <timer_duration>",
            "verlängere[ (den|meinen)] Timer für <timer_start> um <timer_duration>",
            "verlängere[ (den|meinen)] {area} Timer um <timer_duration>",
            "verlängere[ (den|meinen)] Timer <area> um <timer_duration>",
            "verlängere[ (den|meinen)] {timer_name:name} Timer um <timer_duration>",
            "verlängere[ (den|meinen)] Timer (namens|für) {timer_name:name} um <timer_duration>",
            "[(den|meinen) ]Timer um <timer_duration> verlängern",
            "[(den|meinen) ]<timer_start> Timer um <timer_duration> verlängern",
            "[(den|meinen) ]Timer für <timer_start> um <timer_duration> verlängern",
            "[(den|meinen) ]{area} Timer um <timer_duration> verlängern",
            "[(den|meinen) ]Timer <area> um <timer_duration> verlängern",
            "[(den|meinen) ]{timer_name:name} Timer um <timer_duration> verlängern",
            "[(den|meinen) ]Timer (namens|für) {timer_name:name} um <timer_duration> verlängern"
          ]
        }
      ]
    },
    "HassSetPosition": {
      "data": [
        {
          "sentences": [
            "<setzen> [die ]Position[ von] <name>[ auf] <position>[ ein]",
            "[die ]Position[ von] <name>[ auf] <position>[ <setzen_end_of_sentence>]",
            "<name>[ (auf|zu)] <position>[ <setzen_end_of_sentence>]",
            "<name> Position[ (auf|zu)] <position>[ <setzen_end_of_sentence>]"
          ],
          "requires_context": {
            "domain": [
              "cover",
              "valve"
            ]
          }
        },
        {
          "sentences": [
            "<setzen> <name> auf [(die|das) ]{position_level:position}[ (Position|Stufe)][ ein]",
            "<setzen> [die ]Position[ <von_dem>] <name> auf [(die|das) ]{position_level:position}[ Stufe][ ein]",
            "[die ]Position[ <von_dem>] <name> auf [(die|das) ]{position_level:position}[ Stufe] <setzen_end_of_sentence>",
            "<name> auf [(die|das) ]{position_level:position}[ (Position|Stufe)] <setzen_end_of_sentence>"
          ],
          "requires_context": {
            "domain": [
              "cover",
              "valve"
            ]
          }
        }
      ]
    },
    "HassLightSet": {
      "data": [
        {
          "sentences": [
            "<setze> [die ]Helligkeit[ von] <name>[ auf] <brightness>",
            "<stelle> [die ]Helligkeit[ von] <name>[ auf] <brightness>[ ein]",
            "[die ]Helligkeit[ von] <name>[ auf] <brightness>[ <setzen_end_of_sentence>]",
            "dimme[ [die ]Helligkeit[ von]] <name>[ (auf|zu)] <brightness>",
            "<name>[ (auf|zu)] <brightness>[ dimmen]",
            "<name> Helligkeit[ (auf|zu)] <brightness>"
          ],
          "requires_context": {
            "domain": "light"
          },
          "response": "brightness"
        },
        {
          "sentences": [
            "[<setze> ][die ]Helligkeit[ (<licht>|<lichtes>|<lichter>|<alle_lichter>)][ <area>][ auf] <brightness>",
            "<stelle> [die ]Helligkeit[ (<licht>|<lichtes>|<lichter>|<alle_lichter>)][ <area>][ auf] <brightness>[ ein]",
            "[die ]Helligkeit[ (<licht>|<lichtes>|<lichter>|<alle_lichter>)][ <area>] auf <brightness> <setzen_end_of_sentence>",
            "dimme[ (<licht>|<lichter>|<alle_lichter>)][ <area>][ (auf|zu)] <brightness>",
            "[<licht>|<lichter>|<alle_lichter>][ <area>][ (auf|zu)] <brightness> dimmen"
          ],
          "response": "brightness"
        },
        {
          "sentences": [
            "[<setzen> ][die ]Helligkeit [<hier> ]auf <brightness>",
            "[die ]Helligkeit [<hier> ]auf <brightness> dimmen"
          ],
          "expansion_rules": {
            "hier": "(hier|im Raum)"
          },
          "response": "brightness",
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "[<setzen> ][[die ]Farbe[ von] ]<name>[ auf] {color}",
            "(änder[e]|veränder[e]) [[die ]Farbe[ von] ]<name> zu {color}",
            "[[die ]Farbe[ von] ]<name>[ (auf|zu)] {color} <setzen_end_of_sentence>",
            "<name>[ Farbe][ (auf|zu)] {color}[ <setzen_end_of_sentence>]",
            "Lass[e] <name> {color}[ er]leuchten",
            "<name> {color} <leuchten_lassen>",
            "Färbe <name> {color}[ ein]"
          ],
          "requires_context": {
            "domain": "light"
          },
          "response": "color"
        },
        {
          "sentences": [
            "[<setzen> ][(<licht>|[[die ]Farbe ][(<lichtes>|<lichter>|<alle_lichter>)])][ <area>][ auf] {color}",
            "(änder[e]|veränder[e]) (<licht>|[[die ]Farbe ][(<lichtes>|<lichter>|<alle_lichter>)])[ <area>] zu {color}",
            "[die ]Farbe[ (<licht>|<lichtes>|<lichter>|<alle_lichter>)][ <area>][ (auf|zu)] {color} <setzen_end_of_sentence>",
            "[<licht>|<lichtes>|<lichter>|<alle_lichter> ][<area> ] Farbe[ (auf|zu)] {color}[ <setzen_end_of_sentence>]",
            "[<licht>|<lichter>|<alle_lichter> ][<area> ][Farbe ]{color} <leuchten_lassen>",
            "Färbe[ (<licht>|<lichter>|<alle_lichter>)][ <area>] {color}[ ein]"
          ],
          "response": "color"
        },
        {
          "sentences": [
            "<setze> <name> auf [(die|das) ]{brightness_level:brightness}[ (Helligkeit|Stufe)]",
            "<stelle> <name> auf [(die|das) ]{brightness_level:brightness}[ (Helligkeit|Stufe)][ ein]",
            "<setze> [die ]Helligkeit[ <von_dem>] <name> auf [(die|das) ]{brightness_level:brightness}[ Stufe]",
            "<stelle> [die ]Helligkeit[ <von_dem>] <name> auf [(die|das) ]{brightness_level:brightness}[ Stufe][ ein]",
            "[die ]Helligkeit[ <von_dem>] <name> auf [(die|das) ]{brightness_level:brightness}[ Stufe] <setzen_end_of_sentence>",
            "<name> auf [(die|das) ]{brightness_level:brightness}[ (Helligkeit|Stufe)] <setzen_end_of_sentence>"
          ],
          "requires_context": {
            "domain": "light"
          },
          "response": "brightness"
        }
      ]
    },
    "HassMediaNext": {
      "data": [
        {
          "sentences": [
            "[<starte> ][<artikel_bestimmt> ]<naechster>[ <song>][ ((an|auf)[ dem]|am)] <name>",
            "[<artikel_bestimmt> ]<naechster>[ <song>][ ((an|auf)[ dem]|am)] <name> <starten_end_of_sentence>",
            "[(spring[e]|spul[e]) ]ein[en] <song> (vor[wärts]|weiter)[ ((an|auf)[ dem]|am)] <name>",
            "ein[en] <song> (vor[wärts]|weiter)[ ](springen|spulen)[ ((an|auf)[ dem]|am)] <name>",
            "[(spring[e]|spul[e]) ]<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)][ ((an|auf)[ dem]|am)] <name>",
            "[(spring[e]|spul[e]) ][((an|auf)[ dem]|am) ]<name> <zu_dem> <naechster> <song>[ (vor[wärts]|weiter)]",
            "<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)] (springen|spulen)[ ((an|auf)[ dem]|am)] <name>",
            "[((an|auf)[ dem]|am) ]<name> <zu_dem> <naechster> <song>[ (vor[wärts]|weiter)][ ](springen|spulen)",
            "überspring[e] ((das|dieses)[ eine]|ein) <song> [((an|auf)[ dem]|am) ]<name>",
            "[((an|auf)[ dem]|am) ]<name> ((das|dieses)[ eine]|ein) <song> überspringen"
          ],
          "requires_context": {
            "domain": "media_player"
          }
        },
        {
          "sentences": [
            "[<starte> ][<artikel_bestimmt> ]<naechster>[ <song>]",
            "[<artikel_bestimmt> ]<naechster>[ <song>] <starten_end_of_sentence>",
            "[(spring[e]|spul[e]) ]ein[en] <song> (vor[wärts]|weiter)",
            "ein[en] <song> (vor[wärts]|weiter)[ ](springen|spulen)",
            "[(spring[e]|spul[e]) ]<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)]",
            "<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)][ ](springen|spulen)",
            "überspring[e] ((das|dieses)[ eine]|ein) <song>"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "[<starte> ][<artikel_bestimmt> ]<naechster>[ <song>] <area>",
            "[<starte> ]<area>[ <artikel_bestimmt>] <naechster>[ <song>]",
            "[<artikel_bestimmt> ]<naechster>[ <song>] <area> <starten_end_of_sentence>",
            "<area> [<artikel_bestimmt> ]<naechster>[ <song>] <starten_end_of_sentence>",
            "[(spring[e]|spul[e]) ]<area> ein[en] <song> (vor[wärts]|weiter)",
            "ein[en] <song> (vor[wärts]|weiter)[ ][(springen|spulen)] <area>",
            "(spring[e]|spul[e]) ein[en] <song> (vor[wärts]|weiter) <area>",
            "<area> ein[en] <song> (vor[wärts]|weiter)[ ](springen|spulen)",
            "[(spring[e]|spul[e]) ]<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)] <area>",
            "[(spring[e]|spul[e]) ]<area> <zu_dem> <naechster> <song>[ (vor[wärts]|weiter)]",
            "<zu_dem> <naechster> <song>[ (vor[wärts]|weiter)] (springen|spulen) <area>",
            "<area> <zu_dem> <naechster> <song>[ (vor[wärts]|weiter)][ ](springen|spulen)",
            "überspring[e] ((das|dieses)[ eine]|ein) <song> <area>",
            "<area> ((das|dieses)[ eine]|ein) <song> überspringen"
          ]
        }
      ]
    },
    "HassPauseTimer": {
      "data": [
        {
          "sentences": [
            "pausiere[ (den|meinen)] Timer",
            "pausiere[ (den|meinen)] <timer_start> Timer",
            "pausiere[ (den|meinen)] Timer für <timer_start>",
            "pausiere[ (den|meinen)] {area} Timer",
            "pausiere[ (den|meinen)] Timer <area>",
            "pausiere[ (den|meinen)] {timer_name:name} Timer",
            "pausiere[ (den|meinen)] Timer (namens|für) {timer_name:name}",
            "[(den|meinen) ]Timer pausieren",
            "[(den|meinen) ]<timer_start> Timer pausieren",
            "[(den|meinen) ] {area} Timer pausieren",
            "[(den|meinen) ]Timer <area> pausieren",
            "[(den|meinen) ]{timer_name:name} Timer pausieren",
            "[(den|meinen) ]Timer (namens|für) {timer_name:name} pausieren"
          ]
        }
      ]
    },
    "HassDecreaseTimer": {
      "data": [
        {
          "sentences": [
            "<timer_decrease>[ (den|meinen)] Timer um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] <timer_start> Timer um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] Timer für <timer_start> um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] {area} Timer um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] Timer <area> um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] {timer_name:name} Timer um <timer_duration>",
            "<timer_decrease>[ (den|meinen)] Timer (namens|für) {timer_name:name} um <timer_duration>",
            "[(den|meinen) ]Timer um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]<timer_start> Timer um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]Timer für <timer_start> um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]{area} Timer um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]Timer <area> um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]{timer_name:name} Timer um <timer_duration> <timer_decrease_end_of_sentence>",
            "[(den|meinen) ]Timer (namens|für) {timer_name:name} um <timer_duration> <timer_decrease_end_of_sentence>"
          ]
        }
      ]
    },
    "HassMediaPause": {
      "data": [
        {
          "sentences": [
            "(pausiere|pause|stop[p]|stoppe) <name>",
            "halt[e] <name> an",
            "<name> (pausieren|pause|anhalten|stop[p]|stoppen|halt)"
          ],
          "requires_context": {
            "domain": "media_player"
          }
        },
        {
          "sentences": [
            "(pausiere[n]|pause|anhalten|stop[p]|stoppen|halt[(e an| an)])",
            "pausiere[ (die|das|mein|meine)] <media_type>",
            "(stopp[e]|halt[e])[ (die|das|mein|meine)] <media_type>[ an]",
            "[(die|das|mein|meine) ]<media_type> (pausieren|pause|anhalten|stop[p]|stoppen|aus[schalten])"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "pausiere[ (die|das|mein|meine)] <media_type> <area>",
            "(stopp[e]|halt[e])[ (die|das|mein|meine)] <media_type> <area>[ an]",
            "[(die|das|mein|meine) ]<media_type> <area> (pausieren|pause|anhalten|stop[p]|stoppen|aus[schalten])",
            "[(die|das|mein|meine) ]<media_type> (pausieren|pause|anhalten|stop[p][en]|aus[schalten]) <area>",
            "<area> [(die|das|mein|meine) ]<media_type> (pausieren|pause|anhalten|stop[p]|stoppen|aus[schalten])"
          ]
        },
        {
          "sentences": [
            "<area> (pausieren|pause|anhalten|stop[p]|stoppen|halt)",
            "(pausieren|pause|anhalten|stop[p][en]) <area>"
          ]
        }
      ]
    },
    "HassUnpauseTimer": {
      "data": [
        {
          "sentences": [
            "setze[ (den|meinen)] Timer fort",
            "setze[ (den|meinen)] <timer_start> Timer fort",
            "setze[ (den|meinen)] Timer für <timer_start> fort",
            "setze[ (den|meinen)] {area} Timer fort",
            "setze[ (den|meinen)] Timer <area> fort",
            "setze[ (den|meinen)] Timer (namens|für) {timer_name:name} fort",
            "setze[ (den|meinen)] {timer_name:name} Timer fort",
            "[(den|meinen) ]Timer fortsetzen",
            "[(den|meinen) ]<timer_start> Timer fortsetzen",
            "[(den|meinen) ]Timer für <timer_start> fortsetzen",
            "[(den|meinen) ]{area} Timer fortsetzen",
            "[(den|meinen) ]Timer <area> fortsetzen",
            "[(den|meinen) ]Timer (namens|für) {timer_name:name} fortsetzen",
            "[(den|meinen) ]{timer_name:name} Timer fortsetzen"
          ]
        }
      ]
    },
    "HassStartTimer": {
      "data": [
        {
          "sentences": [
            "<timer_duration> Timer",
            "Timer[ (auf|für)] <timer_duration>",
            "<timer_duration> Timer für {timer_name:name}",
            "Timer[ (auf|für)] <timer_duration> (namens|für) {timer_name:name}",
            "{timer_name:name} Timer[ (auf|für)] <timer_duration>",
            "<timer_set>[ einen] <timer_duration> Timer",
            "<timer_set>[ einen] Timer (auf|für) <timer_duration>",
            "<timer_set>[ einen][ Timer (auf|für)] <timer_duration>[ Timer] namens {timer_name:name}",
            "<timer_set>[ einen][ Timer namens] {timer_name:name}[ Timer] (auf|für) <timer_duration>"
          ]
        },
        {
          "sentences": [
            "{timer_command:conversation_command} in <timer_duration>",
            "in <timer_duration> {timer_command:conversation_command}"
          ],
          "response": "command"
        }
      ]
    },
    "HassClimateGetTemperature": {
      "data": [
        {
          "sentences": [
            "Wie[ (hoch|niedrig)] ist die Temperatur[ hier]",
            "Wie[ (hoch|niedrig)] ist hier die Temperatur",
            "Wie (warm|kalt) ist es[ hier]",
            "<wieviel> Grad (hat|sind) es[ hier]",
            "Auf (<wieviel> Grad|welche Temperatur) ist (die Heizung|(der|das) Thermostat)[ hier] [ein]gestellt"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "Wie[ (hoch|niedrig)] ist die Temperatur <area>",
            "Wie[ (hoch|niedrig)] ist <area> die Temperatur",
            "Wie[ (hoch|niedrig)] ist die Temperatur <von_dem> Thermostat <area>",
            "Wie[ (hoch|niedrig)] ist die Temperatur des Thermostat[s] <area>",
            "Wie (warm|kalt) ist es <area>",
            "<wieviel> Grad (hat|sind) es <area>",
            "Auf (<wieviel> Grad|welche Temperatur) ist[ (die Heizung|(der|das) Thermostat)] <area> [ein]gestellt"
          ]
        },
        {
          "sentences": [
            "Wie[ (hoch|niedrig)] ist die Temperatur[ <von_dem>] <name>",
            "Wie[ (hoch|niedrig)] ist die Temperatur des <name>[s]",
            "Auf (<wieviel> Grad|welche Temperatur) ist[ (die Heizung|(der|das) Thermostat)] <name> [ein]gestellt"
          ]
        }
      ]
    },
    "HassVacuumReturnToBase": {
      "data": [
        {
          "sentences": [
            "[(schicke|befehle) ]<name> zurück[ (zur|(in|an) die) (Basis[station]|Ladestation)]",
            "[(schicke|befehle) ]<name> (zur|(in|an) die) (Basis[station]|Ladestation) zurück",
            "<name>[s] <cleaning> (abbrechen|beenden|stop[p]|stoppen)",
            "(beende|stoppe) <name>[s] (Reinigungs|Saug|Putz|wisch)vorgang",
            "breche <name>[s] (Reinigungs|Saug|Putz|wisch)vorgang ab"
          ],
          "requires_context": {
            "domain": "vacuum"
          },
          "expansion_rules": {
            "cleaning": "(Reinigung[svorgang]|putz[en|vorgang]|saug[en|vorgang]|staub[ ]saugen|wisch[en|vorgang])"
          }
        }
      ]
    },
    "HassVacuumStart": {
      "data": [
        {
          "sentences": [
            "(<schalten>|<machen>) <name> <an>",
            "(<ausfuehren>|<aktivieren>) <name>",
            "schick[e] <name>[ los]",
            "<name> (<ausfuehren>|<aktivieren>|[los]schicken)",
            "<name> <an>[schalten|machen]"
          ],
          "requires_context": {
            "domain": "vacuum"
          }
        }
      ]
    },
    "HassRespond": {
      "data": [
        {
          "sentences": [
            "(Hallo|Hi|Hey|Guten Tag) [Home Assistant]"
          ],
          "response": "hello"
        },
        {
          "sentences": [
            "Hörst du [eigentlich ](die ganze Zeit|ständig|permanent) zu",
            "(Nimmst|Zeichnest) du [eigentlich ](die ganze Zeit|ständig|permanent) auf"
          ],
          "response": "listening"
        },
        {
          "sentences": [
            "Wo (sind|gehen) [eigentlich ](meine|die) Daten[ hin]"
          ],
          "response": "data"
        },
        {
          "sentences": [
            "Was kann ich dich [eigentlich ][alles ]fragen",
            "Was kann ich dir [eigentlich ][alles ]sagen"
          ],
          "response": "commands"
        },
        {
          "sentences": [
            "Wer hat dich [eigentlich ](gemacht|hergestellt|erfunden|erschaffen)"
          ],
          "response": "creator"
        }
      ]
    },
    "HassBroadcast": {
      "data": [
        {
          "sentences": [
            "((gib|gebe) [allen ](bekannt|durch)|lass alle (wissen|hören)) {message}",
            "verkünde[ (überall|allen)] {message}",
            "sag[e] (überall|allen)[ Bescheid] {message}",
            "(gib|gebe)[ (überall|allen)] Bescheid {message}"
          ]
        }
      ]
    },
    "HassMediaPrevious": {
      "data": [
        {
          "sentences": [
            "[(<starte>[ <artikel_bestimmt>]|<wiederhole>) ]<vorheriger_letzter>[ <song>][ ((an|auf)[ dem]|am)] <name>",
            "[<artikel_bestimmt> ]<vorheriger_letzter>[ <song>][ ((an|auf)[ dem]|am)] <name> [nochmal ](<starten_end_of_sentence>|wiederholen)",
            "[(<starte>[ <artikel_bestimmt>]|<wiederhole>) ]<song>[ ((an|auf)[ dem]|am)] <name> nochmal[ ab]",
            "[(spring[e]|spul[e]) ]ein[en] <song> (zurück|rückwärts)[ ((an|auf)[ dem]|am)] <name>",
            "ein[en] <song> (zurück|rückwärts)[ ](springen|spulen)[ ((an|auf)[ dem]|am)] <name>",
            "<wiederhole> [<artikel_bestimmt> ]<song>[ ((an|auf)[ dem]|am)] <name>[ nochmal]",
            "[<artikel_bestimmt> ]<song>[ ((an|auf)[ dem]|am)] <name> (nochmal <starten_end_of_sentence>|[nochmal ]wiederholen)",
            "[(spring[e]|spul[e]) ]ein[en] <song> (zurück|rückwärts)[ ((an|auf)[ dem]|am)] <name>",
            "[(spring[e]|spul[e]) ]<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)][ ((an|auf)[ dem]|am)] <name>",
            "[(spring[e]|spul[e]) ][((an|auf)[ dem]|am) ]<name> <zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)]",
            "<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)] (springen|spulen)[ ((an|auf)[ dem]|am)] <name>",
            "[((an|auf)[ dem]|am) ]<name> <zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)][ ](springen|spulen)"
          ],
          "requires_context": {
            "domain": "media_player"
          }
        },
        {
          "sentences": [
            "[(<starte>[ <artikel_bestimmt>]|<wiederhole>) ]<vorheriger_letzter>[ <song>]",
            "[<artikel_bestimmt> ]<vorheriger_letzter>[ <song>][ nochmal] (<starten_end_of_sentence>|wiederholen)",
            "[(<starte>[ <artikel_bestimmt>]|<wiederhole>) ][<vorheriger_letzter> ]<song> nochmal[ ab]",
            "[<artikel_bestimmt> ]<song> (nochmal <starten_end_of_sentence>|[nochmal ]wiederholen)",
            "[(spring[e]|spul[e]) ]ein[en] <song> (zurück|rückwärts)",
            "ein[en] <song> (zurück|rückwärts)[ ](springen|spulen)",
            "[(spring[e]|spul[e]) ]<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)]",
            "<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)][ ](springen|spulen)",
            "<wiederhole> <song>[ nochmal]"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "[(<starte>[ <artikel_bestimmt>]|<wiederhole>) ]<vorheriger_letzter>[ <song>] <area>",
            "[(<starte>|<wiederhole>) ]<area>[ <artikel_bestimmt>] <vorheriger_letzter>[ <song>]",
            "[<artikel_bestimmt> ]<vorheriger_letzter>[ <song>] <area>[ nochmal][ (<starten_end_of_sentence>|wiederholen)]",
            "<area> [<artikel_bestimmt> ]<vorheriger_letzter>[ <song>][ nochmal] (<starten_end_of_sentence>|wiederholen)",
            "[<artikel_bestimmt> ]<song> <area> (nochmal <starten_end_of_sentence>|[nochmal ]wiederholen)",
            "[<artikel_bestimmt> ]<song> (nochmal <starten_end_of_sentence>|[nochmal ]wiederholen) <area>",
            "[(spring[e]|spul[e]) ]<area> ein[en] <song> (zurück|rückwärts)",
            "[(spring[e]|spul[e]) ]ein[en] <song> (zurück|rückwärts) <area>",
            "<area> ein[en] <song> (zurück[[ ](springen|spulen)]|rückwärts)",
            "ein[en] <song> (zurück|rückwärts)[ ](springen|spulen) <area>",
            "[(spring[e]|spul[e]) ]<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)] <area>",
            "[(spring[e]|spul[e]) ]<area> <zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)]",
            "<zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)][ ](springen|spulen) <area>",
            "<area> <zu_dem> <vorheriger_letzter> <song>[ (zurück|rückwärts)][ ](springen|spulen)",
            "<wiederhole> <song> <area>[ nochmal]"
          ]
        }
      ]
    },
    "HassListAddItem": {
      "data": [
        {
          "sentences": [
            "füge <item>[ (zu|zur|zum)] <meine_liste_dativ> hinzu",
            "füge[ (zu|zur|zum)] <meine_liste_dativ> <item> hinzu",
            "(setz[e]|schreib[e]|nehme|nimm) <item> (auf|in) <meine_liste_akkusativ>",
            "<item> (auf|in) <meine_liste_akkusativ>[ (setzen|schreiben|nehmen)]",
            "<item>[ (zu|zur|zum)] <meine_liste_dativ> hinzufügen",
            "<item>[ (auf|in)] <meine_liste_akkusativ> hinzufügen"
          ],
          "response": "item_added",
          "requires_context": {
            "domain": "todo"
          },
          "expansion_rules": {
            "meine_liste_dativ": "[meiner|der] ({name}[ Liste]|[Liste] {name})",
            "meine_liste_akkusativ": "[meine|die] ({name}[ Liste]|[Liste] {name})",
            "item": "{todo_list_item:item}"
          }
        }
      ]
    },
    "HassSetVolume": {
      "data": [
        {
          "sentences": [
            "<setzen> [die ]Lautstärke[ von] <name>[ auf] <volume>[ ein]",
            "[die ]Lautstärke[ von] <name>[ auf] <volume>[ <setzen_end_of_sentence>]",
            "<name>[ (auf|zu)] <volume>[ <setzen_end_of_sentence>]",
            "<name> Lautstärke[ (auf|zu)] <volume>[ <setzen_end_of_sentence>]"
          ],
          "requires_context": {
            "domain": "media_player"
          }
        },
        {
          "sentences": [
            "<setzen> <name> auf [(die|das) ]{volume_mapping:volume_level}[ (Lautstärke|Stufe)][ ein]",
            "<setzen> [die ]Lautstärke[ <von_dem>] <name> auf [(die|das) ]{volume_mapping:volume_level}[ Stufe][ ein]",
            "[die ]Lautstärke[ <von_dem>] <name> auf [(die|das) ]{volume_mapping:volume_level}[ Stufe] <setzen_end_of_sentence>",
            "<name> auf [(die|das) ]{volume_mapping:volume_level}[ (Lautstärke|Stufe)] <setzen_end_of_sentence>"
          ],
          "requires_context": {
            "domain": "media_player"
          }
        },
        {
          "sentences": [
            "<setzen> [die ]Lautstärke[ auf] <volume>[ ein]",
            "[die ]Lautstärke[ auf] <volume>[ <setzen_end_of_sentence>]",
            "Lautstärke[ (auf|zu)] <volume>[ <setzen_end_of_sentence>]"
          ],
          "requires_context": {
            "area": {
              "slot": true
            }
          }
        },
        {
          "sentences": [
            "<setzen> [die ]Lautstärke[ (in|im)] <area>[ auf] <volume>[ ein]",
            "[die ]Lautstärke[ (in|im)] <area>[ auf] <volume>[ <setzen_end_of_sentence>]"
          ]
        }
      ]
    },
    "HassClimateSetTemperature": {
      "data": [
        {
          "sentences": [
            "<setzen> <heizung> <von_dem> <name> auf <temperature>",
            "<setzen> <heizung> <name>[s] auf <temperature>",
            "<heizung>[ (<area>|[<von_dem> ]<name>)] auf <temperature>[ <setzen_end_of_sentence>]",
            "<area> auf <temperature> [be]heizen",
            "<setzen>[ <area>] <heizung> auf <temperature>",
            "<setzen> <heizung> <area> auf <temperature>",
            "<setzen> <area_heizung> auf <temperature>",
            "<area_heizung> auf <temperature>[ <setzen_end_of_sentence>]"
          ],
          "expansion_rules": {
            "heizung": "([die ]temperatur|[die ]heizung|[(das|den) ]thermostat|[die ]klima(anlage|tisierung)|[das ]klima)",
            "area_heizung": "([die ]{area}[ ]temperatur|[die ]{area}[ ]heizung|[(das|den) ]{area}[ ]thermostat|[die ]{area}[ ]klima(anlage|tisierung)|[das ]{area}[ ]klima)"
          }
        }
      ]
    }
  },
  "settings": {
    "filter_with_regex": false
  },
  "responses": {
    "errors": {
      "no_intent": "Entschuldigung, das habe ich nicht verstanden",
      "handle_error": "Es ist ein unerwarteter Fehler aufgetreten",
      "no_area": "Kein Bereich mit dem Namen {{ area }} vorhanden",
      "no_floor": "Keine Etage mit dem Namen {{ floor }} vorhanden",
      "no_domain": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  Es wurde {{ translations[domain] }} gefunden\n{%- else -%}\n  Es wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_domain_in_area": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  Im Bereich {{ area }} wurde {{ translations[domain] }} gefunden\n{%- else -%}\n  Im Bereich {{ area }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_domain_in_floor": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  In der Etage {{ floor }} wurde {{ translations[domain] }} gefunden\n{%- else -%}\n  In der Etage {{ floor }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  Es wurde {{ translations[device_class] }} gefunden\n{%- else -%}\n  Es wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class_in_area": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  Im Bereich {{ area }} wurde {{ translations[device_class] }} gefunden\n{%- else -%}\n  Im Bereich {{ area }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class_in_floor": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  In der Etage {{ floor }} wurde {{ translations[device_class] }} gefunden\n{%- else -%}\n  In der Etage {{ floor }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_entity": "{{ entity }} existiert nicht",
      "no_entity_in_area": "{{ entity }} ist im Bereich {{ area }} nicht vorhanden",
      "no_entity_in_floor": "{{ entity }} ist in der Etage {{ floor }} nicht vorhanden",
      "entity_wrong_state": "Kein Gerät hat den Status {{ state | lower }}",
      "feature_not_supported": "Kein Gerät unterstützt die benötigte Funktion",
      "no_entity_exposed": "{{ entity }} ist nicht freigegeben",
      "no_entity_in_area_exposed": "{{ entity }} ist im Bereich {{ area }} nicht freigegeben",
      "no_entity_in_floor_exposed": "{{ entity }} ist in der Etage {{ floor }} nicht freigegeben",
      "no_domain_exposed": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  Es ist {{ translations[domain] }} freigegeben\n{%- else -%}\n  Es wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_domain_in_area_exposed": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  Im Bereich {{ area }} ist {{ translations[domain] }} freigegeben\n{%- else -%}\n  Im Bereich {{ area }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_domain_in_floor_exposed": "{% set translations = {\n  \"alarm_control_panel\": \"keine Alarmzentrale\",\n  \"automation\": \"keine Automatisierung\",\n  \"button\": \"keine Taste\",\n  \"camera\": \"keine Kamera\",\n  \"climate\": \"kein Thermostat\",\n  \"fan\": \"kein Ventilator\",\n  \"humidifier\": \"kein Luftbefeuchter\",\n  \"input_boolean\": \"kein Schalter-Helfer\",\n  \"input_button\": \"kein Tasten-Helfer\",\n  \"lawn_mower\": \"kein Rasenmäher\",\n  \"light\": \"keine Leuchte\",\n  \"lock\": \"kein Schloss\",\n  \"media_player\": \"kein Media-Player\",\n  \"remote\": \"keine Fernbedienung\",\n  \"scene\": \"keine Szene\",\n  \"script\": \"kein Skript\",\n  \"siren\": \"keine Sirene\",\n  \"switch\": \"kein Schalter\",\n  \"vacuum\": \"kein Staubsauger\",\n  \"valve\": \"kein Ventil\",\n  \"water_heater\": \"kein Warmwasserbereiter\",\n  \"weather\": \"kein Wetter\"\n  } %}\n{% if domain in translations -%}\n  In der Etage {{ floor }} ist {{ translations[domain] }} freigegeben\n{%- else -%}\n  In der Etage {{ floor }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class_exposed": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  Es ist {{ translations[device_class] }} freigegeben\n{%- else -%}\n  Es wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class_in_area_exposed": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  Im Bereich {{ area }} ist {{ translations[device_class] }} freigegeben\n{%- else -%}\n  Im Bereich {{ area }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "no_device_class_in_floor_exposed": "{% set translations = {\n  \"awning\": \"keine Markise\",\n  \"blind\": \"keine Jalousie\",\n  \"curtain\": \"kein Vorhang\",\n  \"door\": \"keine Tür\",\n  \"garage\": \"kein Garagentor\",\n  \"gate\": \"kein Tor\",\n  \"shade\": \"kein Schirm\",\n  \"shutter\": \"kein Rollladen\",\n  \"window\": \"kein Fenster\"\n  } %}\n{% if device_class in translations -%}\n  In der Etage {{ floor }} ist {{ translations[device_class] }} freigegeben\n{%- else -%}\n  In der Etage {{ floor }} wurde keine Übereinstimmung gefunden\n{%- endif %}\n",
      "duplicate_entities": "Es wurden mehrere {{ entity }} gefunden",
      "duplicate_entities_in_area": "Im Bereich {{ area }} wurden mehrere {{ entity }} gefunden",
      "duplicate_entities_in_floor": "In der Etage {{ floor }} wurden mehrere {{ entity }} gefunden",
      "timer_not_found": "Diesen Timer konnte ich nicht finden",
      "multiple_timers_matched": "Es können nicht mehrere Timer gesteuert werden",
      "no_timer_support": "Timer werden auf diesem Gerät nicht unterstützt"
    },
    "intents": {
      "HassGetState": {
        "einzeln": "{{ slots.name | capitalize }} ist {{ state.state_with_unit | replace(\".\", \",\") if state.state|float(state.state) is number else state.state_with_unit }}\n",
        "einzeln_janein": "{% if query.matched %}\n  Ja\n{% else %}\n  Nein\n{% endif %}\n",
        "irgendeins": "{% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Ja, {{ match[:3] | join(\", \") }} und {{ (match | length - 3) }} weitere\n  {%- else -%}\n    Ja,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  Nein\n{% endif %}\n",
        "alle": "{% if not query.unmatched: %}\n  Ja\n{% else %}\n  {% set no_match = query.unmatched | map(attribute=\"name\") | sort | list %}\n  {% if no_match | length > 4 %}\n    Nein, {{ no_match[:3] | join(\", \") }} und {{ (no_match | length - 3) }} weitere sind es nicht\n  {%- else -%}\n    Nein,\n    {% for name in no_match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}\n      {{ name }}\n    {%- endfor %} {% if no_match | length == 1 %}ist{% else %}sind{% endif %} es nicht\n  {% endif %}\n{% endif %}\n",
        "welches": "{% if not query.matched %}\n  Keins\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} und {{ (match | length - 3) }} weitere\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n",
        "wie_viele": "{{ query.matched | length }}\n",
        "wo": "{% if state.state == \"home\" %}\n  {{ slots.name | capitalize }} ist zu Hause\n{% elif state.state == \"not_home\" %}\n  {{ slots.name | capitalize }} ist unterwegs\n{% else %}\n  {{ slots.name | capitalize }} ist im Bereich {{ state.state }}\n{% endif %}\n",
        "wer": "{% if not query.matched %}\n  Niemand\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} und {{ (match | length - 3) }} weitere\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n"
      },
      "HassTurnOff": {
        "default": "{{ slots.name }} ausgeschaltet",
        "light": "Licht ausgeschaltet",
        "fan_all": "Die Ventilatoren sind ausgeschaltet",
        "cover": "geschlossen",
        "close_all": "alle geschlossen",
        "lock": "entsperrt",
        "valve": "geschlossen"
      },
      "HassClimateSetTemperature": {
        "default": "Temperatur auf {{ slots.temperature }} Grad gestellt"
      },
      "HassStartTimer": {
        "default": "{% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' Stunde' if h in [ \"1\", 'eine'] else ' Stunden') if h else '' %} {% set m_text = m ~ (' Minute' if m in [ \"1\", 'eine'] else ' Minuten') if m else '' %} {% set s_text = s ~ (' Sekunde' if s in [ \"1\", 'eine'] else ' Sekunden') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' und ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' und ') %} {% set name = (' namens ' ~ slots.name | trim) if slots.name is defined else '' %} Timer{{ name }} für {{ text }} gestartet\n",
        "command": "{% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' Stunde' if h in [ \"1\", 'eine'] else ' Stunden') if h else '' %} {% set m_text = m ~ (' Minute' if m in [ \"1\", 'eine'] else ' Minuten') if m else '' %} {% set s_text = s ~ (' Sekunde' if s in [ \"1\", 'eine'] else ' Sekunden') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' and ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' and ') %} Anweisung wird in {{ text }} ausgeführt\n"
      },
      "HassShoppingListAddItem": {
        "item_added": "{{ slots.item }} hinzugefügt"
      },
      "HassTurnOn": {
        "default": "{{ slots.name }} eingeschaltet",
        "light": "Licht eingeschaltet",
        "fan_all": "Die Ventilatoren sind eingeschaltet",
        "cover": "geöffnet",
        "open_all": "alle geöffnet",
        "lock": "abgeschlossen",
        "scene": "{{ slots.name }} aktiviert",
        "script": "{{ slots.name }} gestartet",
        "valve": "geöffnet"
      },
      "HassMediaPause": {
        "default": "Pausiert"
      },
      "HassGetCurrentTime": {
        "default": "{% set hour_str = '{0:02d}'.format(slots.time.hour) %} {% set minute_str = '{0:02d}'.format(slots.time.minute) %} Es ist {{ hour_str }}:{{ minute_str }}\n"
      },
      "HassPauseTimer": {
        "default": "Timer pausiert"
      },
      "HassTimerStatus": {
        "default": "{% set num_timers = slots.timers | length %}\n{% set active_timers = slots.timers | selectattr('is_active') | list %}\n{% set num_active_timers = active_timers | length %}\n{% set paused_timers = slots.timers | rejectattr('is_active') | list %}\n{% set num_paused_timers = paused_timers | length %}\n{% set next_timer = None %}\n\n{% if num_timers == 0: %}\n  Es laufen keine Timer.\n{% elif num_active_timers == 0: %}\n  {# No active timers #}\n  {% if num_paused_timers == 1: %}\n    {% set next_timer = paused_timers[0] %}\n    Timer ist pausiert.\n  {% else: %}\n    {{ num_paused_timers }} pausierte Timer.\n  {% endif %}\n{% else: %}\n  {# At least one active timer #}\n  {% if num_active_timers == 1: %}\n    {% set next_timer = active_timers[0] %}\n  {% else: %}\n    {# Get active timer that will finish soonest #}\n    {% set sorted_timers = active_timers | sort(attribute='total_seconds_left') %}\n    {% set next_timer = sorted_timers[0] %}\n    {{ num_active_timers }} laufende Timer.\n  {% endif %}\n\n  {% if num_paused_timers == 1: %}\n    1 pausierter Timer.\n  {% elif num_paused_timers > 0: %}\n    {{ num_paused_timers }} pausierte Timer.\n  {% endif %}\n{% endif %}\n\n{% if next_timer: %}\n  {# At least one active timer #}\n  {% if (next_timer.rounded_hours_left == 1) and (next_timer.rounded_minutes_left > 0): %}\n    1 Stunde und {{ next_timer.rounded_minutes_left }} Minuten\n  {% elif (next_timer.rounded_hours_left == 1): %}\n    1 Stunde\n  {% elif (next_timer.rounded_hours_left > 1) and (next_timer.rounded_minutes_left > 0): %}\n    {{ next_timer.rounded_hours_left }} Stunden und {{ next_timer.rounded_minutes_left }} Minuten\n  {% elif (next_timer.rounded_hours_left > 1): %}\n    {{ next_timer.rounded_hours_left }} Stunden\n  {% elif (next_timer.rounded_minutes_left == 1) and (next_timer.rounded_seconds_left > 0): %}\n    1 Minute und {{ next_timer.rounded_seconds_left }} Sekunden\n  {% elif (next_timer.rounded_minutes_left == 1): %}\n    1 Minute\n  {% elif (next_timer.rounded_minutes_left > 1) and (next_timer.rounded_seconds_left > 0): %}\n    {{ next_timer.rounded_minutes_left }} Minuten und {{ next_timer.rounded_seconds_left }} Sekunden\n  {% elif (next_timer.rounded_minutes_left > 1): %}\n    {{ next_timer.rounded_minutes_left }} Minuten\n  {% elif (next_timer.rounded_seconds_left == 1): %}\n    1 Sekunde\n  {% elif (next_timer.rounded_seconds_left > 1): %}\n    {{ next_timer.rounded_seconds_left }} Sekunden\n  {% endif %}\n\n  {% if num_timers > 1: %}\n    {# Give some extra information to disambiguate #}\n    {% set hoursSingularPlural = \"Stunden\" if (next_timer.start_hours > 1) else \"Stunde\" %}\n    {% set minutesSingularPlural = \"Minuten\" if (next_timer.start_minutes > 1) else \"Minute\" %}\n    {% set secondsSingularPlural = \"Sekunden\" if (next_timer.start_seconds > 1) else \"Sekunde\" %}\n    verbleiben auf\n    {% if (next_timer.start_hours > 0) and (next_timer.start_minutes > 0): %}\n      {{ next_timer.start_hours }} {{ hoursSingularPlural }} und {{ next_timer.start_minutes }} {{ minutesSingularPlural }}\n    {% elif (next_timer.start_hours > 0): %}\n      {{ next_timer.start_hours }} {{ hoursSingularPlural }}\n    {% elif (next_timer.start_minutes > 0) and (next_timer.start_seconds > 0): %}\n      {{ next_timer.start_minutes }} {{ minutesSingularPlural }} und {{ next_timer.start_seconds }} {{ secondsSingularPlural }}\n    {% elif (next_timer.start_minutes > 0): %}\n      {{ next_timer.start_minutes }} {{ minutesSingularPlural }}\n    {% elif (next_timer.start_seconds > 0): %}\n      {{ next_timer.start_seconds }} {{ secondsSingularPlural }}\n    {% endif %}\n    {% if next_timer.name: %}\n      {{ next_timer.name }}\n    {% elif next_timer.area: %}\n      {{ next_timer.area }}\n    {% endif %}\n\n    Timer.\n  {% else: %}\n    verbleiben.\n  {% endif %}\n{% endif %}\n"
      },
      "HassListAddItem": {
        "item_added": "{{ slots.item }} hinzugefügt"
      },
      "HassGetCurrentDate": {
        "default": "{% set months = {\n   1: 'Januar',\n   2: 'Februar',\n   3: 'März',\n   4: 'April',\n   5: 'Mai',\n   6: 'Juni',\n   7: 'Juli',\n   8: 'August',\n   9: 'September',\n   10: 'Oktober',\n   11: 'November',\n   12: 'Dezember',\n} %} {% set weekday = [\n  'Montag',\n  'Dienstag',\n  'Mittwoch',\n  'Donnerstag',\n  'Freitag',\n  'Samstag',\n  'Sonntag'\n] %} Es ist {{ weekday[slots.date.weekday()] }} der {{ slots.date.day }}. {{ months[slots.date.month] }} {{ slots.date.year }}\n"
      },
      "HassUnpauseTimer": {
        "default": "Timer fortgesetzt"
      },
      "HassMediaPrevious": {
        "default": "Spiele vorheriges"
      },
      "HassGetWeather": {
        "default": "{% set weather_condition = {\n  'clear': 'und klar',\n  'clear-night': 'und klare Nacht',\n  'cloudy': 'und bewölkt',\n  'exceptional': 'und außergewöhnlich',\n  'fog': 'mit Nebel',\n  'hail': 'mit Hagel',\n  'lightning': 'mit Gewitter',\n  'lightning-rainy': 'mit Gewitter und Regen',\n  'partlycloudy': 'und teilweise bewölkt',\n  'pouring': 'und strömender Regen',\n  'rainy': 'und regnerisch',\n  'snowy': 'und verschneit',\n  'snowy-rainy': 'mit Schnee und Regen',\n  'sunny': 'und sonnig',\n  'windy': 'und windig',\n  'windy-variant': 'mit Wind und Wolken'\n} %} {{ state.attributes.get('temperature') }} {{ state.attributes.get('temperature_unit') }} {{ weather_condition.get((state.state | string).lower(), \"\") }}\n"
      },
      "HassLightSet": {
        "brightness": "Helligkeit eingestellt",
        "color": "Farbe eingestellt"
      },
      "HassCancelAllTimers": {
        "default": "{% if slots.canceled < 1: %} Keine Timer gestoppt. {% else: %} {{ slots.canceled }} Timer gestoppt. {% endif %}\n",
        "area": "{% if slots.canceled < 1: %} Keine Timer im Bereich {{ slots.area }} gestoppt. {% else: %} {{ slots.canceled }} Timer im Bereich {{ slots.area }} gestoppt. {% endif %}\n"
      },
      "HassBroadcast": {
        "default": "Nachricht wurde gesendet"
      },
      "HassVacuumStart": {
        "default": "Gestartet"
      },
      "HassMediaUnpause": {
        "default": "Fortgesetzt"
      },
      "HassSetPosition": {
        "default": "Position festgelegt"
      },
      "HassMediaNext": {
        "default": "Nächstes"
      },
      "HassCancelTimer": {
        "default": "Timer gestoppt"
      },
      "HassClimateGetTemperature": {
        "default": "{% set current_temperature = state_attr(state.entity_id, 'current_temperature') %} {% set temperature = state.state if current_temperature is none else current_temperature %} {{ temperature }} Grad\n"
      },
      "HassSetVolume": {
        "default": "Lautstärke festgelegt"
      },
      "HassDecreaseTimer": {
        "default": "{% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' Stunde' if h in [ \"1\", 'eine'] else ' Stunden') if h else '' %} {% set m_text = m ~ (' Minute' if m in [ \"1\", 'eine'] else ' Minuten') if m else '' %} {% set s_text = s ~ (' Sekunde' if s in [ \"1\", 'eine'] else ' Sekunden') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' und ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' und ') %} {% set name = (' namens ' ~ slots.name | trim) if slots.name is defined else '' %} Timer{{ name }} um {{ text }} verringert\n"
      },
      "HassIncreaseTimer": {
        "default": "{% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' Stunde' if h in [ \"1\", 'eine'] else ' Stunden') if h else '' %} {% set m_text = m ~ (' Minute' if m in [ \"1\", 'eine'] else ' Minuten') if m else '' %} {% set s_text = s ~ (' Sekunde' if s in [ \"1\", 'eine'] else ' Sekunden') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' und ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' und ') %} {% set name = (' namens ' ~ slots.name | trim) if slots.name is defined else '' %} Timer{{ name }} um {{ text }} verlängert\n"
      },
      "HassVacuumReturnToBase": {
        "default": "Kehrt zurück"
      },
      "HassRespond": {
        "hello": "Hallo vom Home Assistant.",
        "listening": "Nein, ich höre nur zu, wenn du das Signalwort sprichst.",
        "data": "Deine Daten liegen auf deinem Home Assistant server.",
        "commands": "Um zu erfahren, was du alles fragen oder sagen kannst, besuche Home Minus Assistant Punkt I.O. Slash voice.",
        "creator": "Ich wurde von der großartigen Home Assistant-Community entwickelt, welche sich aus Bastlern aus aller Welt zusammensetzt."
      }
    }
  },
  "lists": {
    "color": {
      "values": [
        {
          "in": "wei(ß|ss)",
          "out": "white"
        },
        {
          "in": "schwarz",
          "out": "black"
        },
        {
          "in": "rot",
          "out": "red"
        },
        {
          "in": "orange",
          "out": "orange"
        },
        {
          "in": "gelb",
          "out": "yellow"
        },
        {
          "in": "grün",
          "out": "green"
        },
        {
          "in": "blau",
          "out": "blue"
        },
        {
          "in": "violett",
          "out": "purple"
        },
        {
          "in": "braun",
          "out": "brown"
        }
      ]
    },
    "brightness": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "brightness_level": {
      "values": [
        {
          "in": "(max[imal[e]|imum]|höchste|volle)",
          "out": 100
        },
        {
          "in": "(min[imal[e]|imum]|niedrigste)",
          "out": 1
        }
      ]
    },
    "cover_states": {
      "values": [
        {
          "in": "(offen|auf|oben|geöffnet)",
          "out": "open"
        },
        {
          "in": "(geschlossen|zu|unten)",
          "out": "closed"
        },
        {
          "in": "([am ]öffnen|öffnet)",
          "out": "opening"
        },
        {
          "in": "([am ]schlie(ß|ss)en|schlie(ß|ss)t)",
          "out": "closing"
        }
      ]
    },
    "cover_classes": {
      "values": [
        {
          "in": "(Markise[n]|Beschattung[en])",
          "out": "awning"
        },
        {
          "in": "(Jalousie[n]|Rollo[s])",
          "out": "blind"
        },
        {
          "in": "(Gardine[n]|Vorhang|Vorhänge)",
          "out": "curtain"
        },
        {
          "in": "Tür[e|en]",
          "out": "door"
        },
        {
          "in": "(Garagentür[e|en]|Garagentor[e])",
          "out": "garage"
        },
        {
          "in": "Tor[e]",
          "out": "gate"
        },
        {
          "in": "Schirm[e]",
          "out": "shade"
        },
        {
          "in": "(Roll[l](a|ä)den)",
          "out": "shutter"
        },
        {
          "in": "Fenster",
          "out": "window"
        }
      ]
    },
    "lock_domains": {
      "values": [
        {
          "in": "(Schloss|Schlösser|Tür[e|en]|Tor[e])",
          "out": "lock"
        }
      ]
    },
    "lock_states": {
      "values": [
        {
          "in": "(([ab|zu]ge|ver)(schlossen|sperrt)|verriegelt|nicht (ent(riegelt|sperrt)|aufge(sperrt|schlossen)))",
          "out": "locked"
        },
        {
          "in": "(nicht (([ab|zu]ge|ver)(schlossen|sperrt)|verriegelt)|ent(riegelt|sperrt)|aufge(sperrt|schlossen))",
          "out": "unlocked"
        }
      ]
    },
    "on_off_domains": {
      "values": [
        {
          "in": "(Lampe[n]|Licht[er]|Leuchte[n]|Beleuchtung[en])",
          "out": "light"
        },
        {
          "in": "(Ventilator[en]|Lüfter)",
          "out": "fan"
        },
        {
          "in": "Schalter",
          "out": "switch"
        }
      ]
    },
    "on_off_states": {
      "values": [
        {
          "in": "((an|ein)[geschaltet]|auf)",
          "out": "on"
        },
        {
          "in": "((aus|ab)[geschaltet]|zu)",
          "out": "off"
        }
      ]
    },
    "temperature": {
      "range": {
        "type": "temperature",
        "from": 0,
        "to": 100
      }
    },
    "bs_battery_states": {
      "values": [
        {
          "in": "(niedrig|gering|schwach)",
          "out": "on"
        },
        {
          "in": "normal",
          "out": "off"
        }
      ]
    },
    "bs_battery_charging_states": {
      "values": [
        {
          "in": "(lädt|[auf][ge]laden)[ auf]",
          "out": "on"
        },
        {
          "in": "(lädt nicht|nicht[ auf][ge]laden|laden nicht)[ auf]",
          "out": "off"
        }
      ]
    },
    "bs_carbon_monoxide_states": {
      "values": [
        {
          "in": "<erkannt>",
          "out": "on"
        },
        {
          "in": "(klar|rein|sauber|sicher)",
          "out": "off"
        }
      ]
    },
    "bs_cold_states": {
      "values": [
        {
          "in": "kalt",
          "out": "on"
        },
        {
          "in": "normal",
          "out": "off"
        }
      ]
    },
    "bs_connectivity_states": {
      "values": [
        {
          "in": "verbunden",
          "out": "on"
        },
        {
          "in": "getrennt",
          "out": "off"
        }
      ]
    },
    "bs_door_states": {
      "values": [
        {
          "in": "(auf|offen|geöffnet)",
          "out": "on"
        },
        {
          "in": "(zu|geschlossen)",
          "out": "off"
        }
      ]
    },
    "bs_garage_door_states": {
      "values": [
        {
          "in": "(auf|offen|geöffnet|oben)",
          "out": "on"
        },
        {
          "in": "(zu|geschlossen|unten)",
          "out": "off"
        }
      ]
    },
    "bs_window_states": {
      "values": [
        {
          "in": "(auf|offen|geöffnet|gekippt)",
          "out": "on"
        },
        {
          "in": "(zu|geschlossen)",
          "out": "off"
        }
      ]
    },
    "bs_gas_states": {
      "values": [
        {
          "in": "<erkannt>",
          "out": "on"
        },
        {
          "in": "(klar|rein|sauber|sicher)",
          "out": "off"
        }
      ]
    },
    "bs_heat_states": {
      "values": [
        {
          "in": "hei(ß|ss)",
          "out": "on"
        },
        {
          "in": "normal",
          "out": "off"
        }
      ]
    },
    "bs_light_states": {
      "values": [
        {
          "in": "<erkannt>",
          "out": "on"
        },
        {
          "in": "kein Licht",
          "out": "off"
        }
      ]
    },
    "bs_problem_states": {
      "values": [
        {
          "in": "<erkannt>",
          "out": "on"
        },
        {
          "in": "(ok[ay]|normal)",
          "out": "off"
        }
      ]
    },
    "bs_safety_states": {
      "values": [
        {
          "in": "(unsicher|gefährlich)",
          "out": "on"
        },
        {
          "in": "(sicher|ungefährlich)",
          "out": "off"
        }
      ]
    },
    "shopping_list_item": {
      "wildcard": true
    },
    "todo_list_item": {
      "wildcard": true
    },
    "zone": {
      "wildcard": true
    },
    "position": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "position_level": {
      "values": [
        {
          "in": "(max[imal[e]|imum]|höchste)",
          "out": 100
        },
        {
          "in": "(min[imal[e]|imum]|niedrigste)",
          "out": 1
        }
      ]
    },
    "volume_level": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "volume_mapping": {
      "values": [
        {
          "in": "(max[imal[e]|imum]|höchste|volle)",
          "out": 100
        },
        {
          "in": "(min[imal[e]|imum]|niedrigste)",
          "out": 1
        }
      ]
    },
    "timer_seconds": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_minutes": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_hours": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_name": {
      "wildcard": true
    },
    "timer_command": {
      "wildcard": true
    },
    "message": {
      "wildcard": true
    },
    "search_query": {
      "wildcard": true
    }
  },
  "expansion_rules": {
    "artikel_bestimmt": "[(der|die|das|dem|den|des)]",
    "artikel_unbestimmt": "[(ein|eine|eines|einer|einem|einen)]",
    "artikel": "[<artikel_bestimmt>|<artikel_unbestimmt>]",
    "name": "<artikel_bestimmt> {name}",
    "area": "[([(in|an|auf|bei) ][<artikel_bestimmt> ]|(im|am|<von_dem>) )]{area}[s]",
    "floor": "[((in|auf)[ <artikel_bestimmt>]|im|<von_dem>) ]{floor}[ Geschoss]",
    "area_floor": "(<area>|<floor>)",
    "an": "(an|ein|auf)",
    "aus": "(aus|ab|zu)",
    "auf": "(auf|hoch|[he]rauf|nach oben)",
    "zu": "(zu|[he]runter|nach unten)",
    "von_dem": "(von[ dem]|vom)",
    "zu_dem": "(zu[ dem]|zum)",
    "alle": "((alle|sämtliche)[r]|jede[r|s|n]|(die|der) (ganze|komplette|sämtliche)[n])[ der]",
    "schliessen": "schlie(ß|ss)[e]",
    "schliessen_end_of_sentence": "(schlie(ß|ss)en|zumachen|zu machen)",
    "öffnen_end_of_sentence": "(öffnen|aufmachen|auf machen)",
    "schalten": "(schalt[e|et])",
    "machen": "(mach[e|t])",
    "fahren": "(fahr[e|t])",
    "setzen": "(<setze>|<stelle>)",
    "setze": "(setz[e]|änder[e]|veränder[e])",
    "stelle": "stell[e]",
    "setzen_end_of_sentence": "(setzen|stellen|einstellen|ändern|verändern)",
    "abdeckung": "[(das|die|der|den) ](Rollo[s]|Abdeckung[en]|Roll[l](a|ä)den|Jalousie[n]|Raffstore[s]|Markise[n]|Vorhang|Vorhänge|Beschattung[en])",
    "alle_abdeckungen": "<alle> (Rollos|Abdeckungen|Roll[l](a|ä)den|Jalousien|Raffstores|Markisen|Vorhänge|Beschattungen)",
    "garage": "([die ]Garage[n]|[das ]Garagentor|[die ]Garagentore)",
    "alle_garagen": "<alle> (Garagen[tore])",
    "tor": "([das ]Tor|[die ]Tore)",
    "alle_tore": "<alle> Tore",
    "luefter": "([(der|den) ]Ventilator|[die ]Ventilatoren|[(der|die|den) ]Lüfter)",
    "alle_luefter": "<alle> (Ventilatoren|Lüfter)",
    "brightness": "{brightness}[ (Prozent|%)]",
    "temperature": "{temperature}[ ][°|Grad]",
    "licht": "[(das|die) ](Licht|Lampe|Beleuchtung)",
    "lichtes": "([des ](Lichts|Lichtes)|[der ](Lampe|Beleuchtung))",
    "lichter": "[(die|der|von den) ](Lichter|Lichtern|Lampen|Leuchten|Beleuchtungen)",
    "alle_lichter": "(<alle> (<lichter>|Beleuchtung)|von allen[ (Lichtern|Lampen|Leuchten|Beleuchtungen)])",
    "leuchten_lassen": "([er]leuchten lassen|[ein]färben)",
    "tuer": "[die ]Tür[e|en]",
    "schloss": "([das ]Schloss|[die ]Schlösser)",
    "sperren": "(sperr|schlie(ss|ß))[e|en]",
    "entsperren": "(entsperr[e|en]|aufschlie(ss|ß)[e|en]|öffne[n]|entrieg(el[n]|le))",
    "absperren": "(zu|ab)<sperren>|verrieg(el|le)[n]",
    "aktivieren": "aktivier[e|en]",
    "deaktivieren": "de<aktivieren>",
    "ausfuehren": "(start[e|en]|ausführen)",
    "szene": "[die ]Szene",
    "skript": "[das ]Skript",
    "batterie": "([der ]Batterie[n]|[des ]Akku[s])",
    "irgend": "(irgend(ein[s]|eine[s]|einer|einem|einen)[ der]|(irgendwelche[s][ (der|die|des)])|(irgendwo|einige[s]|manche[s]|ein[s]|eine[s]|einer|einem|einen) <artikel_bestimmt>)",
    "etwas": "[irgend][et]was",
    "welche": "(welche[r|s|n]|was für[ <artikel_unbestimmt>[s]]) <artikel_bestimmt>",
    "wieviel": "(wie[ ]viel[e]|welche Anzahl[ (an|von)])",
    "ladestand": "[der][ Lade][zu]Stand",
    "co": "Kohlen[stoff]monoxid",
    "co_sensor": "<co>[-]Sensor[en]",
    "gas_sensor": "Gas[-]Sensor[en]",
    "ding": "((Ding|Gerät)[e|en]|Sensor[en]|Gegenstand|Gegenstände[n])",
    "erkannt": "(entdeckt|ausgelöst|erkannt|an)",
    "ist_wurde": "(ist|wurde)",
    "sind_wurden": "(sind|wurden)",
    "position": "{position}[ (Prozent|%)]",
    "volume": "{volume_level}[ (Prozent|%)]",
    "im_bereich": "[((in|auf)[ <artikel_bestimmt>]|im)] {zone:state}",
    "im_zuhause": "(zu Hause|[im ]Zuhause)",
    "timer_set": "(starte|setze|stelle|erstelle)",
    "timer_cancel": "(beende|stopp[e]|lösch[e])",
    "timer_cancel_end_of_sentence": "(ausschalten|deaktivieren|abbrechen|stoppen|aus)",
    "timer_duration_seconds": "{timer_seconds:seconds} Sekunde[n]",
    "timer_duration_minutes": "{timer_minutes:minutes} Minute[n][ [und]{timer_seconds:seconds} Sekunde[n]]",
    "timer_duration_hours": "{timer_hours:hours} Stunde[n][ [und]{timer_minutes:minutes} Minute[n]][ [und]{timer_seconds:seconds} Sekunde[n]]",
    "timer_duration": "<timer_duration_seconds>|<timer_duration_minutes>|<timer_duration_hours>",
    "timer_decrease": "(verringere|verkürze|reduziere)",
    "timer_decrease_end_of_sentence": "(verringern|verkürzen|reduzieren)",
    "timer_start_seconds": "{timer_seconds:start_seconds} Sekunde[n]",
    "timer_start_minutes": "{timer_minutes:start_minutes} Minute[n][ [und]{timer_seconds:start_seconds} Sekunde[n]]",
    "timer_start_hours": "{timer_hours:start_hours} Stunde[n][ [und]{timer_minutes:start_minutes} Minute[n]][ [und]{timer_seconds:start_seconds} Sekunde[n]]",
    "timer_start": "<timer_start_seconds>|<timer_start_minutes>|<timer_start_hours>",
    "naechster": "nächste[r|s|n]",
    "vorheriger_letzter": "(vorherige|letzte)[r|s|n]",
    "starte": "(starte|spiel[e])",
    "starten_end_of_sentence": "([ab]spielen|[an](schauen|hören)|wiedergeben|starten)",
    "wiederhole": "(wiederhol[e][ <artikel_bestimmt>]|zurück <zu_dem>)",
    "song": "(Titel|Lied|Song|Track|Stück)",
    "media_type": "(musik|[fernseh]sendung|gerät[e])"
  },
  "skip_words": [
    "bitte",
    "danke",
    "gefälligst",
    "jetzt",
    "sofort",
    "gleich",
    "gerade",
    "momentan",
    "im Moment",
    "derzeit",
    "aktuell",
    "mal",
    "eben",
    "kannst du",
    "könntest du",
    "würdest du",
    "du sollst",
    "ähm",
    "äh"
  ]
}