"use strict";(self.webpackChunkjupyter_copilot=self.webpackChunkjupyter_copilot||[]).push([[487],{487:(e,t,n)=>{n.r(t),n.d(t,{GLOBAL_SETTINGS:()=>b,default:()=>v});var o=n(598),s=n(748),i=n(907);class l{constructor(e,t){this.pendingCompletions=new Map,this.isReconnecting=!1,this.handleSocketClose=()=>{this.isReconnecting||(this.isReconnecting=!0,this.initializeWebSocket(),console.debug("Socket closed, reconnecting..."),setTimeout((()=>{this.isReconnecting=!1}),4e3))},this.wsUrl=`${t}?path=${encodeURIComponent(e)}`,this.initializeWebSocket()}initializeWebSocket(){this.socket=new WebSocket(this.wsUrl),this.setupSocketEventHandlers()}setupSocketEventHandlers(){this.socket&&(this.socket.onmessage=this.handleMessage.bind(this),this.socket.onopen=()=>this.sendMessage("sync_request",{}),this.socket.onclose=this.handleSocketClose)}handleMessage(e){const t=JSON.parse(e.data);switch(t.type){case"sync_response":break;case"completion":{const e=this.pendingCompletions.get(t.req_id);e&&(e.resolve(t.completions),this.pendingCompletions.delete(t.req_id))}break;case"connection_established":console.debug("Copilot connected to extension server...");break;default:console.error("Unknown message type:",t)}}sendCellUpdate(e,t){this.sendMessage("cell_update",{cell_id:e,content:t})}sendCellDelete(e){this.sendMessage("cell_delete",{cell_id:e})}sendCellAdd(e,t){this.sendMessage("cell_add",{cell_id:e,content:t})}sendUpdateLSPVersion(){this.sendMessage("update_lsp_version",{})}async getCopilotCompletion(e,t,n){return new Promise(((o,s)=>{const i=`${e}-${t}-${n}-${Date.now()}`;this.pendingCompletions.set(i,{resolve:o,reject:s}),this.sendMessage("get_completion",{req_id:i,cell_id:e,line:t,character:n}),setTimeout((()=>{this.pendingCompletions.has(i)&&(this.pendingCompletions.delete(i),s(new Error("Completion request timed out")))}),1e4)}))}sendMessage(e,t){var n;null===(n=this.socket)||void 0===n||n.send(JSON.stringify({type:e,...t}))}sendPathChange(e){this.sendMessage("change_path",{new_path:e})}setNotebookLanguage(e){this.sendMessage("set_language",{language:e})}dispose(){var e;null===(e=this.socket)||void 0===e||e.close(),console.debug("socket connection closed")}}var a=n(246),d=n(876);const c=async(e,t)=>{try{const n=s.ServerConnection.makeSettings(),o=i.URLExt.join(n.baseUrl,"jupyter-copilot",e);console.debug("requestUrl:",o);const l={method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:`token ${n.token}`}},a=await s.ServerConnection.makeRequest(o,l,n);if(!a.ok){console.error("Response not OK:",a.status,a.statusText);const e=await a.text();throw console.error("Error data:",e),new Error(`HTTP error! status: ${a.status}`)}return await a.text()}catch(e){throw console.error(`The jupyter_copilot server extension appears to be missing or the request failed.\n${e}`),e}};var r=n(256);const p="\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n      color: #333;\n      background-color: #fff;\n      padding: 30px;\n      max-width: 400px;\n      margin: 0 auto;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      text-align: center;\n",u=e=>{const t=new r.Widget,n=document.createElement("div");n.style.cssText=p,n.innerHTML=`\n            <h2 style="font-size: 24px; margin-bottom: 20px; color: #0366d6;">GitHub Copilot Authentication</h2>\n            <p style="margin-bottom: 10px;">Enter this code on GitHub:</p>\n            <div style="font-size: 32px; font-weight: bold; background-color: #f6f8fa; color: #0366d6; padding: 15px; border-radius: 5px; margin: 20px 0; letter-spacing: 2px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);">${e.userCode}</div>\n            <p style="margin-bottom: 10px;">Go to: <a href="${e.verificationUri}" target="_blank" style="color: #0366d6; text-decoration: none;">${e.verificationUri}</a></p>\n            <p style="font-size: 14px; color: #666;">This code will expire in <span id="timer" style="font-weight: bold;">${e.expiresIn}</span> seconds.</p>\n          `,t.node.appendChild(n);const o=new a.MainAreaWidget({content:t});return o.id="apod-jupyterlab",o.title.label="Sign In",o.title.closable=!0,o},h=e=>{const t=new r.Widget,n=document.createElement("div");n.style.cssText=p,n.innerHTML=`\n            <h2 style="font-size: 24px; margin-bottom: 20px;">Copilot already signed in as: <span style="color: #2366d6;">${e}</span></h2>\n          `,t.node.appendChild(n);const o=new a.MainAreaWidget({content:t});return o.id="apod-jupyterlab",o.title.label="Already Signed In",o.title.closable=!0,o},g=()=>{const e=new r.Widget,t=document.createElement("div");t.style.cssText=p,t.innerHTML='\n            <h2 style="font-size: 24px; margin-bottom: 20px; color: #2366d6;">Successfully signed out with GitHub!</h2>\n          ',e.node.appendChild(t);const n=new a.MainAreaWidget({content:e});return n.id="apod-jupyterlab",n.title.label="Sign Out Successful",n.title.closable=!0,n};var m=n(912);const b=new class{constructor(){this.enabled=!0,this.completionBind="Ctrl J",this.authenticated=!1,c("login",{}).then((e=>{const t=JSON.parse(e);this.authenticated="AlreadySignedIn"===t.status,console.log(this.authenticated)})).catch((e=>{console.error("Error checking authentication state:",e)}))}setEnabled(e){this.enabled=e}setCompletionBind(e){this.completionBind=e}setAuthenticated(e){this.authenticated=e}};class C{constructor(e){this.name="GitHub Copilot",this.identifier="jupyter_copilot:provider",this.rank=1e3,this.lastRequestTime=0,this.timeout=null,this.lastResolved=()=>{},this.requestInProgress=!1,this.notebookClients=e}async fetch(e,t){if(!b.enabled||!b.authenticated)return{items:[]};const n=Date.now();return this.requestInProgress||n-this.lastRequestTime<150?(this.lastRequestTime=n,this.lastResolved({items:[]}),clearTimeout(this.timeout),new Promise((n=>{this.lastResolved=n,this.timeout=setTimeout((async()=>{this.requestInProgress=!0,this.lastRequestTime=Date.now();const o=await this.fetchCompletion(e,t);n(o)}),200)}))):(this.requestInProgress=!0,this.lastRequestTime=n,await this.fetchCompletion(e,t))}async fetchCompletion(e,t){const n=t.editor,o=t.widget._content._activeCellIndex,s=this.notebookClients.get(t.widget.id),i=null==n?void 0:n.getCursorPosition(),{line:l,column:a}=i;null==s||s.sendUpdateLSPVersion();const d=[],c=await(null==s?void 0:s.getCopilotCompletion(o,l,a));return null==c||c.forEach((e=>{d.push({insertText:e.displayText.replace("```",""),isIncomplete:!1})})),this.requestInProgress=!1,{items:d}}}const y={id:"jupyter_copilot:plugin",description:"GitHub Copilot for Jupyter",autoStart:!0,requires:[o.INotebookTracker,d.ICompletionProviderManager,a.ICommandPalette,m.ISettingRegistry],activate:(e,t,n,o,a)=>{console.debug("Jupyter Copilot Extension Activated");const d="jupyter_copilot:completion";e.commands.addCommand(d,{label:"Copilot Completion",execute:()=>{var e,o;const s=null===(e=t.currentWidget)||void 0===e?void 0:e.id;null===(o=n.inline)||void 0===o||o.accept(s||"")}}),Promise.all([e.restored,a.load(y.id)]).then((([,t])=>{let n=null;const s=t=>{var o;const s=t.get("flag").composite,i=t.get("keybind").composite;if(b.setEnabled(s),b.setCompletionBind(i),console.debug("Settings loaded:",s,i),n){const t=null===(o=e.commands.keyBindings.find((e=>e.command===d)))||void 0===o?void 0:o.keys;console.debug("Disposing old keybinding ",t),n.dispose(),n=null}n=e.commands.addKeyBinding({command:d,keys:[i],selector:".cm-editor"})};s(t),t.changed.connect(s);const i="Copilot: Sign In";e.commands.addCommand(i,{label:"Copilot: Sign In With GitHub",iconClass:"cpgithub-icon",execute:()=>(e=>{c("login",{}).then((t=>{const n=JSON.parse(t);if("AlreadySignedIn"===n.status){let t=h(n.user);return t.isDisposed||(t.dispose(),t=h(n.user)),void(t.isAttached||e.shell.add(t,"main"))}b.setAuthenticated(!0);let o=u(n);o.isDisposed||(o.dispose(),o=u(n)),o.isAttached||e.shell.add(o,"main");let s=n.expiresIn;const i=setInterval((()=>{if(s<=0)return clearInterval(i),void o.dispose();const e=o.node.querySelector("#timer");e&&(e.textContent=s.toString()),s--}),1e3);e.shell.activateById(o.id)}))})(e)});const l="Copilot: Sign Out";e.commands.addCommand(l,{label:"Copilot: Sign Out With GitHub",iconClass:"cpgithub-icon",execute:()=>(e=>{c("signout",{}).then((t=>{if("NotSignedIn"===JSON.parse(t).status){let t=g();b.setAuthenticated(!1),t.isDisposed||(t.dispose(),t=g()),t.isAttached||e.shell.add(t,"main")}}))})(e)}),o.addItem({command:i,category:"GitHub Copilot",rank:0}),o.addItem({command:l,category:"GitHub Copilot",rank:1})}));const r=new Map,p=new C(r);n.registerInlineProvider(p);const m=s.ServerConnection.makeSettings();t.widgetAdded.connect((async(e,t)=>{var n;await t.context.ready;const o=i.URLExt.join(m.wsUrl,"jupyter-copilot","ws"),s=new l(t.context.path,o);r.set(t.id,s),t.sessionContext.ready.then((()=>{var e,n;null===(n=null===(e=t.sessionContext.session)||void 0===e?void 0:e.kernel)||void 0===n||n.info.then((e=>{s.setNotebookLanguage(e.language_info.name)})),t.sessionContext.kernelChanged.connect((async(e,t)=>{var n;const o=await(null===(n=t.newValue)||void 0===n?void 0:n.info);s.setNotebookLanguage(null==o?void 0:o.language_info.name)}))}));const a=(e,n)=>{if(n.sourceChange){const n=e.source;s.sendCellUpdate(t.content.activeCellIndex,n)}};let d=t.content.activeCell;null==d||d.model.sharedModel.changed.connect(a),t.disposed.connect((()=>{s.dispose(),r.delete(t.id)})),null===(n=t.model)||void 0===n||n.cells.changed.connect(((e,t)=>{if("remove"===t.type)s.sendCellDelete(t.oldIndex);else if("add"===t.type){const e=t.newValues[0].sharedModel.getSource();s.sendCellAdd(t.newIndex,e)}})),t.context.pathChanged.connect(((e,t)=>{s.sendPathChange(t)})),t.content.activeCellChanged.connect(((e,t)=>{null==d||d.model.sharedModel.changed.disconnect(a),d=t,null==d||d.model.sharedModel.changed.connect(a)}))}))}},v=y}}]);