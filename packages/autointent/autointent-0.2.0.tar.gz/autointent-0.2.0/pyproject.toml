[project]
name = "autointent"
version = "0.2.0"
description = "A tool for automatically configuring a text classification pipeline for intent prediction."
license = { text = "Apache 2.0" }
authors = [
    { name = "Alexeev Ilya", email = "ilya_alekseev_2016@list.ru" },
    { name = "Kuznetsov Denis", email = "kuznetsov.den.p@gmail.com" },
]
maintainers = [
    { name = "Alexeev Ilya", email = "ilya_alekseev_2016@list.ru" },
    { name = "Solomatin Roman", email = "risolomatin@gmail.com" },
]
readme = "README.md"
keywords = ["nlp", "dialog-systems", "transformers", "auto-ml"]
classifiers=[
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Natural Language :: Russian',
    'Operating System :: POSIX :: Linux',
    'Operating System :: Microsoft :: Windows',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Text Processing :: Linguistic',
    'Topic :: Utilities',
    'Framework :: Pytest',
    'Framework :: Sphinx',
    'Typing :: Typed',
]
requires-python = ">=3.10,<4.0"
dependencies = [
    "sentence-transformers (>=3,<4)",
    "scikit-learn (>=1.5,<2.0)",
    "scikit-multilearn (==0.2.0)",
    "appdirs (>=1.4,<2.0)",
    "optuna (>=4.0.0,<5.0.0)",
    "pathlib (>=1.0.1,<2.0.0)",
    "pydantic (>=2.10.5,<3.0.0)",
    "faiss-cpu (>=1.9.0,<2.0.0)",
    "openai (>=1.59.6,<2.0.0)",
    "datasets (>=3.2.0,<4.0.0)",
    "xxhash (>=3.5.0,<4.0.0)",
    "python-dotenv (>=1.0.1,<2.0.0)",
    "transformers[torch] (>=4.49.0,<5.0.0)",
    "peft (>= 0.10.0, !=0.15.0, !=0.15.1, <1.0.0)",
    "catboost (>=1.2.8,<2.0.0)",
    "aiometer (>=1.0.0,<2.0.0)",
    "aiofiles (>=24.1.0,<25.0.0)",
]

[project.optional-dependencies]
dev = [
    "tach (>=0.11.3,<1.0.0)",
    "ipykernel (>=6.29.5,<7.0.0)",
    "ipywidgets (>=8.1.5,<9.0.0)",
    "ruff (==0.8.4)",
    "sentencepiece (>=0.2.0,<0.3.0)",
]
test = [
    "pytest (>=8.3.2,<9.0.0)",
    "pytest-cov (>=5.0.0,<6.0.0)",
    "coverage (>=7.6.1,<8.0.0)",
    "pytest-asyncio (>=0.24.0,<1.0.0)",
    "pytest-rerunfailures (>=15.0,<16.0)",
    "pytest-xdist (>=3.6.1,<4.0.0)",
]
typing = [
    "mypy (>=1,<2)",
    "types-pyyaml (>=6.0.12.20240917,<7.0.0)",
    "types-pygments (>=2.18.0.20240506,<3.0.0)",
    "types-setuptools (>=75.2.0.20241019,<76.0.0)",
    "joblib-stubs (>=1.4.2.5.20240918,<2.0.0)",
    "pandas-stubs (>= 2.2.3.250527, <3.0.0)",
    "types-aiofiles (>=24.1.0.20250606)",
]
docs = [
    "sphinx (>=8.1.3,<9.0.0)",
    "pydata-sphinx-theme (>=0.16.0,<1.0.0)",
    "jupytext (>=1.16.4,<2.0.0)",
    "nbsphinx (>=0.9.5,<1.0.0)",
    "sphinx-autodoc-typehints (>=2.5.0,<3.0.0)",
    "sphinx-copybutton (>=0.5.2,<1.0.0)",
    "sphinx-autoapi (>=3.3.3,<4.0.0)",
    "ipykernel (>=6.29.5,<7.0.0)",
    "tensorboardx (>=2.6.2.2,<3.0.0)",
    "sphinx-multiversion (>=0.2.4,<1.0.0)",
    "sphinx-toolbox  (>=4.0.0,<5.0.0)",
    "sphinx-llms-txt (>=0.3.0,<0.4.0)"
]
dspy = [
    "dspy (>=2.6.5,<3.0.0)",
]
wandb = [
    "wandb (>=0.19.10,<1.0.0)",
]
codecarbon = [
    "codecarbon (>=3.0.2, <3.1.0)",
    "pynvml (>=8.0.4, <12.0.0)", # to avoid "attribute nvmlDeviceGetTotalEnergyConsumption not found" error
]

[project.urls]
Homepage = "https://deeppavlov.github.io/AutoIntent/"
Repository = "https://github.com/deeppavlov/AutoIntent"
Documentation = "https://deeppavlov.github.io/AutoIntent/"

[project.scripts]
"basic-aug" = "autointent.generation.utterances.basic.cli:main"
"evolution-aug" = "autointent.generation.utterances.evolution.cli:main"

[tool.ruff]
line-length = 120
indent-width = 4
exclude = ["experiments", "scripts"]
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "TD",      # todos
    "FIX",     # fixmes
    "S311",    # random usage
    "COM812",  # trailing commas
    "ISC001",  # implicit string concatenation
    "ERA001",  # commented code
    "FBT",     # boolean trap
    "RUF001",  # ambiguous unicode character
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"autointent/__init__.py" = ["I001"]
"autointent/_wrappers/__init__.py" = ["I001"]
"tests/*.py" = ["S", "PLR2004", "ERA", "D", "ANN", "SLF"]
"tests/context/datahandler/test_data_handler.py" = ["PT011"]
"autointent/modules/*" = ["ARG002", "ARG003"]  # unused argument
"docs/*" = ["INP001", "A001", "D"]
"*/utils.py" = ["D104", "D100"]
"*user_guides/*" = ["B018", "E501", "INP001", "T", "D", "E402", "I001", "W292", "ANN202", "ANN001", "ANN201", "PLR2004"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.pydocstyle]
convention = "google"


[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [
    "tests",
]
pythonpath = "autointent"
# `--cov` option breaks pycharm's test debugger
addopts = """
    -m "not transformers"
    -ra
    --reruns 3
    --only-rerun requests.exceptions.ReadTimeout
    --only-rerun huggingface_hub.errors.HfHubHTTPError
    --only-rerun huggingface_hub.errors.LocalEntryNotFoundError
    --only-rerun FileNotFoundError
    --only-rerun OSError
    --durations 5
    --reruns-delay 10
"""
markers = [
    "transformers: qwen and deberta are too memory-consuming"
]
# --reruns 3 -> # Retry failed tests 3 times
# requests.exceptions.ReadTimeout -> # HF Read timed out
# huggingface_hub.errors.HfHubHTTPError -> # HF is unavailable
# huggingface_hub.errors.LocalEntryNotFoundError -> # Gateway Time-out from HF
# FileNotFoundError -> HF Cache is broken
# --reruns-delay 10 -> Delay between reruns in seconds to avoid running into the same issue again

[tool.coverage.run]
branch = true
omit = [
    "__init__.py",
    "*/site-packages/*",
    "*/dist-packages/*",
    "*/venv/*",
    "*/.env/*",
    "*/.venv/*",
    "*/virtualenv/*",
    "*/tests/*",
    "*/tmp/*",
]

[tool.coverage.paths]
source = [
    "autointent/",
]

[tool.coverage.report]
skip_empty = true


[tool.mypy]
python_version = "3.10"
strict = true
warn_redundant_casts = true
# align with mypy 2.0 release
warn_unreachable = true
local_partial_types = true
plugins = [
    "pydantic.mypy",
]
mypy_path = "autointent"
disable_error_code = ["override"]

[[tool.mypy.overrides]]
module = [
    "scipy",
    "sklearn",
    "sklearn.*",
    "xeger",
    "appdirs",
    "sre_yield",
    "skmultilearn.model_selection",
    "hydra",
    "hydra.*",
    "transformers",
    "faiss",
    "datasets",
    "joblib",
    "torch.utils.tensorboard",
    "tensorboardX",
    "wandb",
    "dspy",
    "dspy.evaluate.auto_evaluation",
    "codecarbon",
    "catboost",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "autointent._callbacks.*",
    "autointent.modules.abc.*",
]
warn_unreachable = false

