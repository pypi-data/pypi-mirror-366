# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from upstream_api_client.models.py_tas_allocation import PyTASAllocation
from upstream_api_client.models.py_taspi import PyTASPi
from typing import Optional, Set
from typing_extensions import Self

class PyTASProject(BaseModel):
    """
    PyTASProject
    """ # noqa: E501
    id: StrictInt
    title: StrictStr
    description: StrictStr
    charge_code: StrictStr = Field(alias="chargeCode")
    gid: StrictInt
    source: Optional[Any]
    field_id: StrictInt = Field(alias="fieldId")
    var_field: StrictStr = Field(alias="field")
    type_id: StrictInt = Field(alias="typeId")
    type: StrictStr
    pi_id: StrictInt = Field(alias="piId")
    pi: PyTASPi
    allocations: List[PyTASAllocation]
    nickname: Optional[Any]
    __properties: ClassVar[List[str]] = ["id", "title", "description", "chargeCode", "gid", "source", "fieldId", "field", "typeId", "type", "piId", "pi", "allocations", "nickname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PyTASProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pi
        if self.pi:
            _dict['pi'] = self.pi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allocations (list)
        _items = []
        if self.allocations:
            for _item_allocations in self.allocations:
                if _item_allocations:
                    _items.append(_item_allocations.to_dict())
            _dict['allocations'] = _items
        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if nickname (nullable) is None
        # and model_fields_set contains the field
        if self.nickname is None and "nickname" in self.model_fields_set:
            _dict['nickname'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PyTASProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "chargeCode": obj.get("chargeCode"),
            "gid": obj.get("gid"),
            "source": obj.get("source"),
            "fieldId": obj.get("fieldId"),
            "field": obj.get("field"),
            "typeId": obj.get("typeId"),
            "type": obj.get("type"),
            "piId": obj.get("piId"),
            "pi": PyTASPi.from_dict(obj["pi"]) if obj.get("pi") is not None else None,
            "allocations": [PyTASAllocation.from_dict(_item) for _item in obj["allocations"]] if obj.get("allocations") is not None else None,
            "nickname": obj.get("nickname")
        })
        return _obj


