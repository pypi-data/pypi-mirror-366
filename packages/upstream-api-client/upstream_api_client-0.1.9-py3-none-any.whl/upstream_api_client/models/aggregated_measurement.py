# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class AggregatedMeasurement(BaseModel):
    """
    AggregatedMeasurement
    """ # noqa: E501
    measurement_time: datetime
    value: Union[StrictFloat, StrictInt]
    median_value: Union[StrictFloat, StrictInt]
    point_count: StrictInt
    lower_bound: Union[StrictFloat, StrictInt]
    upper_bound: Union[StrictFloat, StrictInt]
    parametric_lower_bound: Union[StrictFloat, StrictInt]
    parametric_upper_bound: Union[StrictFloat, StrictInt]
    std_dev: Union[StrictFloat, StrictInt]
    min_value: Union[StrictFloat, StrictInt]
    max_value: Union[StrictFloat, StrictInt]
    percentile_25: Union[StrictFloat, StrictInt]
    percentile_75: Union[StrictFloat, StrictInt]
    ci_method: StrictStr
    confidence_level: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["measurement_time", "value", "median_value", "point_count", "lower_bound", "upper_bound", "parametric_lower_bound", "parametric_upper_bound", "std_dev", "min_value", "max_value", "percentile_25", "percentile_75", "ci_method", "confidence_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregatedMeasurement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregatedMeasurement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "measurement_time": obj.get("measurement_time"),
            "value": obj.get("value"),
            "median_value": obj.get("median_value"),
            "point_count": obj.get("point_count"),
            "lower_bound": obj.get("lower_bound"),
            "upper_bound": obj.get("upper_bound"),
            "parametric_lower_bound": obj.get("parametric_lower_bound"),
            "parametric_upper_bound": obj.get("parametric_upper_bound"),
            "std_dev": obj.get("std_dev"),
            "min_value": obj.get("min_value"),
            "max_value": obj.get("max_value"),
            "percentile_25": obj.get("percentile_25"),
            "percentile_75": obj.get("percentile_75"),
            "ci_method": obj.get("ci_method"),
            "confidence_level": obj.get("confidence_level")
        })
        return _obj


