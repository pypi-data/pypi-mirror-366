# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SensorStatistics(BaseModel):
    """
    SensorStatistics
    """ # noqa: E501
    max_value: Optional[Union[StrictFloat, StrictInt]] = None
    min_value: Optional[Union[StrictFloat, StrictInt]] = None
    avg_value: Optional[Union[StrictFloat, StrictInt]] = None
    stddev_value: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_90: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_95: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_99: Optional[Union[StrictFloat, StrictInt]] = None
    count: Optional[StrictInt] = None
    first_measurement_value: Optional[Union[StrictFloat, StrictInt]] = None
    first_measurement_collectiontime: Optional[datetime] = None
    last_measurement_time: Optional[datetime] = None
    last_measurement_value: Optional[Union[StrictFloat, StrictInt]] = None
    stats_last_updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["max_value", "min_value", "avg_value", "stddev_value", "percentile_90", "percentile_95", "percentile_99", "count", "first_measurement_value", "first_measurement_collectiontime", "last_measurement_time", "last_measurement_value", "stats_last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_value (nullable) is None
        # and model_fields_set contains the field
        if self.max_value is None and "max_value" in self.model_fields_set:
            _dict['max_value'] = None

        # set to None if min_value (nullable) is None
        # and model_fields_set contains the field
        if self.min_value is None and "min_value" in self.model_fields_set:
            _dict['min_value'] = None

        # set to None if avg_value (nullable) is None
        # and model_fields_set contains the field
        if self.avg_value is None and "avg_value" in self.model_fields_set:
            _dict['avg_value'] = None

        # set to None if stddev_value (nullable) is None
        # and model_fields_set contains the field
        if self.stddev_value is None and "stddev_value" in self.model_fields_set:
            _dict['stddev_value'] = None

        # set to None if percentile_90 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_90 is None and "percentile_90" in self.model_fields_set:
            _dict['percentile_90'] = None

        # set to None if percentile_95 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_95 is None and "percentile_95" in self.model_fields_set:
            _dict['percentile_95'] = None

        # set to None if percentile_99 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_99 is None and "percentile_99" in self.model_fields_set:
            _dict['percentile_99'] = None

        # set to None if count (nullable) is None
        # and model_fields_set contains the field
        if self.count is None and "count" in self.model_fields_set:
            _dict['count'] = None

        # set to None if first_measurement_value (nullable) is None
        # and model_fields_set contains the field
        if self.first_measurement_value is None and "first_measurement_value" in self.model_fields_set:
            _dict['first_measurement_value'] = None

        # set to None if first_measurement_collectiontime (nullable) is None
        # and model_fields_set contains the field
        if self.first_measurement_collectiontime is None and "first_measurement_collectiontime" in self.model_fields_set:
            _dict['first_measurement_collectiontime'] = None

        # set to None if last_measurement_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_measurement_time is None and "last_measurement_time" in self.model_fields_set:
            _dict['last_measurement_time'] = None

        # set to None if last_measurement_value (nullable) is None
        # and model_fields_set contains the field
        if self.last_measurement_value is None and "last_measurement_value" in self.model_fields_set:
            _dict['last_measurement_value'] = None

        # set to None if stats_last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.stats_last_updated is None and "stats_last_updated" in self.model_fields_set:
            _dict['stats_last_updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "avg_value": obj.get("avg_value"),
            "stddev_value": obj.get("stddev_value"),
            "percentile_90": obj.get("percentile_90"),
            "percentile_95": obj.get("percentile_95"),
            "percentile_99": obj.get("percentile_99"),
            "count": obj.get("count"),
            "first_measurement_value": obj.get("first_measurement_value"),
            "first_measurement_collectiontime": obj.get("first_measurement_collectiontime"),
            "last_measurement_time": obj.get("last_measurement_time"),
            "last_measurement_value": obj.get("last_measurement_value"),
            "stats_last_updated": obj.get("stats_last_updated")
        })
        return _obj


