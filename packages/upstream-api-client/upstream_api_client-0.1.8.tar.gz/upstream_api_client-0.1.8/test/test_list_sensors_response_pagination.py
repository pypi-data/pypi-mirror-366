# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from upstream_client.models.list_sensors_response_pagination import ListSensorsResponsePagination

class TestListSensorsResponsePagination(unittest.TestCase):
    """ListSensorsResponsePagination unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSensorsResponsePagination:
        """Test ListSensorsResponsePagination
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSensorsResponsePagination`
        """
        model = ListSensorsResponsePagination()
        if include_optional:
            return ListSensorsResponsePagination(
                items = [
                    upstream_client.models.sensor_item.SensorItem(
                        id = 56, 
                        alias = '', 
                        description = '', 
                        postprocess = True, 
                        postprocessscript = '', 
                        units = '', 
                        variablename = '', 
                        statistics = upstream_client.models.sensor_statistics.SensorStatistics(
                            max_value = 1.337, 
                            min_value = 1.337, 
                            avg_value = 1.337, 
                            stddev_value = 1.337, 
                            percentile_90 = 1.337, 
                            percentile_95 = 1.337, 
                            percentile_99 = 1.337, 
                            count = 56, 
                            first_measurement_value = 1.337, 
                            first_measurement_collectiontime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_measurement_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_measurement_value = 1.337, 
                            stats_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
                total = 56,
                page = 56,
                size = 56,
                pages = 56
            )
        else:
            return ListSensorsResponsePagination(
                items = [
                    upstream_client.models.sensor_item.SensorItem(
                        id = 56, 
                        alias = '', 
                        description = '', 
                        postprocess = True, 
                        postprocessscript = '', 
                        units = '', 
                        variablename = '', 
                        statistics = upstream_client.models.sensor_statistics.SensorStatistics(
                            max_value = 1.337, 
                            min_value = 1.337, 
                            avg_value = 1.337, 
                            stddev_value = 1.337, 
                            percentile_90 = 1.337, 
                            percentile_95 = 1.337, 
                            percentile_99 = 1.337, 
                            count = 56, 
                            first_measurement_value = 1.337, 
                            first_measurement_collectiontime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_measurement_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_measurement_value = 1.337, 
                            stats_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
                total = 56,
                page = 56,
                size = 56,
                pages = 56,
        )
        """

    def testListSensorsResponsePagination(self):
        """Test ListSensorsResponsePagination"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
