# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from upstream_client.models.py_tas_project import PyTASProject

class TestPyTASProject(unittest.TestCase):
    """PyTASProject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PyTASProject:
        """Test PyTASProject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PyTASProject`
        """
        model = PyTASProject()
        if include_optional:
            return PyTASProject(
                id = 56,
                title = '',
                description = '',
                charge_code = '',
                gid = 56,
                source = None,
                field_id = 56,
                var_field = '',
                type_id = 56,
                type = '',
                pi_id = 56,
                pi = upstream_client.models.py_taspi.PyTASPi(
                    id = 56, 
                    username = '', 
                    email = '', 
                    first_name = '', 
                    last_name = '', 
                    institution = '', 
                    institution_id = 56, 
                    department = '', 
                    department_id = 56, 
                    citizenship = '', 
                    citizenship_id = 56, 
                    source = '', 
                    uid = 56, 
                    home_directory = '', 
                    gid = 56, ),
                allocations = [
                    upstream_client.models.py_tas_allocation.PyTASAllocation(
                        id = 56, 
                        start = '', 
                        end = '', 
                        status = '', 
                        justification = '', 
                        decision_summary = '', 
                        date_requested = '', 
                        date_reviewed = '', 
                        compute_requested = 56, 
                        compute_allocated = 56, 
                        storage_requested = 56, 
                        storage_allocated = 56, 
                        memory_requested = 56, 
                        memory_allocated = 56, 
                        resource_id = 56, 
                        resource = '', 
                        project_id = 56, 
                        project = '', 
                        requestor_id = 56, 
                        requestor = '', 
                        reviewer_id = 56, 
                        reviewer = null, 
                        compute_used = 1.337, )
                    ],
                nickname = None
            )
        else:
            return PyTASProject(
                id = 56,
                title = '',
                description = '',
                charge_code = '',
                gid = 56,
                source = None,
                field_id = 56,
                var_field = '',
                type_id = 56,
                type = '',
                pi_id = 56,
                pi = upstream_client.models.py_taspi.PyTASPi(
                    id = 56, 
                    username = '', 
                    email = '', 
                    first_name = '', 
                    last_name = '', 
                    institution = '', 
                    institution_id = 56, 
                    department = '', 
                    department_id = 56, 
                    citizenship = '', 
                    citizenship_id = 56, 
                    source = '', 
                    uid = 56, 
                    home_directory = '', 
                    gid = 56, ),
                allocations = [
                    upstream_client.models.py_tas_allocation.PyTASAllocation(
                        id = 56, 
                        start = '', 
                        end = '', 
                        status = '', 
                        justification = '', 
                        decision_summary = '', 
                        date_requested = '', 
                        date_reviewed = '', 
                        compute_requested = 56, 
                        compute_allocated = 56, 
                        storage_requested = 56, 
                        storage_allocated = 56, 
                        memory_requested = 56, 
                        memory_allocated = 56, 
                        resource_id = 56, 
                        resource = '', 
                        project_id = 56, 
                        project = '', 
                        requestor_id = 56, 
                        requestor = '', 
                        reviewer_id = 56, 
                        reviewer = null, 
                        compute_used = 1.337, )
                    ],
                nickname = None,
        )
        """

    def testPyTASProject(self):
        """Test PyTASProject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
