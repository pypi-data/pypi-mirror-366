# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from upstream_client.models.aggregated_measurement import AggregatedMeasurement

class TestAggregatedMeasurement(unittest.TestCase):
    """AggregatedMeasurement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AggregatedMeasurement:
        """Test AggregatedMeasurement
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AggregatedMeasurement`
        """
        model = AggregatedMeasurement()
        if include_optional:
            return AggregatedMeasurement(
                measurement_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                value = 1.337,
                median_value = 1.337,
                point_count = 56,
                lower_bound = 1.337,
                upper_bound = 1.337,
                parametric_lower_bound = 1.337,
                parametric_upper_bound = 1.337,
                std_dev = 1.337,
                min_value = 1.337,
                max_value = 1.337,
                percentile_25 = 1.337,
                percentile_75 = 1.337,
                ci_method = '',
                confidence_level = 1.337
            )
        else:
            return AggregatedMeasurement(
                measurement_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                value = 1.337,
                median_value = 1.337,
                point_count = 56,
                lower_bound = 1.337,
                upper_bound = 1.337,
                parametric_lower_bound = 1.337,
                parametric_upper_bound = 1.337,
                std_dev = 1.337,
                min_value = 1.337,
                max_value = 1.337,
                percentile_25 = 1.337,
                percentile_75 = 1.337,
                ci_method = '',
                confidence_level = 1.337,
        )
        """

    def testAggregatedMeasurement(self):
        """Test AggregatedMeasurement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
