# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from upstream_client.models.get_campaign_response import GetCampaignResponse

class TestGetCampaignResponse(unittest.TestCase):
    """GetCampaignResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetCampaignResponse:
        """Test GetCampaignResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetCampaignResponse`
        """
        model = GetCampaignResponse()
        if include_optional:
            return GetCampaignResponse(
                id = 56,
                name = '',
                description = '',
                contact_name = '',
                contact_email = '',
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                allocation = '',
                location = upstream_client.models.location.Location(
                    bbox_west = 1.337, 
                    bbox_east = 1.337, 
                    bbox_south = 1.337, 
                    bbox_north = 1.337, ),
                summary = upstream_client.models.summary_get_campaign.SummaryGetCampaign(
                    station_count = 56, 
                    sensor_count = 56, 
                    sensor_types = [
                        ''
                        ], 
                    sensor_variables = [
                        ''
                        ], ),
                geometry = None,
                stations = [
                    upstream_client.models.stations_list_response_item.StationsListResponseItem(
                        id = 56, 
                        name = '', 
                        description = '', 
                        contact_name = '', 
                        contact_email = '', 
                        active = True, 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        geometry = null, 
                        sensors = [
                            upstream_client.models.sensor_summary_for_stations.SensorSummaryForStations(
                                id = 56, 
                                variable_name = '', 
                                measurement_unit = '', )
                            ], )
                    ]
            )
        else:
            return GetCampaignResponse(
                id = 56,
                name = '',
                allocation = '',
                summary = upstream_client.models.summary_get_campaign.SummaryGetCampaign(
                    station_count = 56, 
                    sensor_count = 56, 
                    sensor_types = [
                        ''
                        ], 
                    sensor_variables = [
                        ''
                        ], ),
        )
        """

    def testGetCampaignResponse(self):
        """Test GetCampaignResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
