# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PyTASAllocation(BaseModel):
    """
    PyTASAllocation
    """ # noqa: E501
    id: StrictInt
    start: StrictStr
    end: StrictStr
    status: StrictStr
    justification: StrictStr
    decision_summary: Optional[StrictStr] = Field(alias="decisionSummary")
    date_requested: StrictStr = Field(alias="dateRequested")
    date_reviewed: Optional[StrictStr] = Field(alias="dateReviewed")
    compute_requested: StrictInt = Field(alias="computeRequested")
    compute_allocated: StrictInt = Field(alias="computeAllocated")
    storage_requested: StrictInt = Field(alias="storageRequested")
    storage_allocated: StrictInt = Field(alias="storageAllocated")
    memory_requested: StrictInt = Field(alias="memoryRequested")
    memory_allocated: StrictInt = Field(alias="memoryAllocated")
    resource_id: StrictInt = Field(alias="resourceId")
    resource: StrictStr
    project_id: StrictInt = Field(alias="projectId")
    project: StrictStr
    requestor_id: StrictInt = Field(alias="requestorId")
    requestor: StrictStr
    reviewer_id: StrictInt = Field(alias="reviewerId")
    reviewer: Optional[Any]
    compute_used: Union[StrictFloat, StrictInt] = Field(alias="computeUsed")
    __properties: ClassVar[List[str]] = ["id", "start", "end", "status", "justification", "decisionSummary", "dateRequested", "dateReviewed", "computeRequested", "computeAllocated", "storageRequested", "storageAllocated", "memoryRequested", "memoryAllocated", "resourceId", "resource", "projectId", "project", "requestorId", "requestor", "reviewerId", "reviewer", "computeUsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PyTASAllocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if decision_summary (nullable) is None
        # and model_fields_set contains the field
        if self.decision_summary is None and "decision_summary" in self.model_fields_set:
            _dict['decisionSummary'] = None

        # set to None if date_reviewed (nullable) is None
        # and model_fields_set contains the field
        if self.date_reviewed is None and "date_reviewed" in self.model_fields_set:
            _dict['dateReviewed'] = None

        # set to None if reviewer (nullable) is None
        # and model_fields_set contains the field
        if self.reviewer is None and "reviewer" in self.model_fields_set:
            _dict['reviewer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PyTASAllocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "status": obj.get("status"),
            "justification": obj.get("justification"),
            "decisionSummary": obj.get("decisionSummary"),
            "dateRequested": obj.get("dateRequested"),
            "dateReviewed": obj.get("dateReviewed"),
            "computeRequested": obj.get("computeRequested"),
            "computeAllocated": obj.get("computeAllocated"),
            "storageRequested": obj.get("storageRequested"),
            "storageAllocated": obj.get("storageAllocated"),
            "memoryRequested": obj.get("memoryRequested"),
            "memoryAllocated": obj.get("memoryAllocated"),
            "resourceId": obj.get("resourceId"),
            "resource": obj.get("resource"),
            "projectId": obj.get("projectId"),
            "project": obj.get("project"),
            "requestorId": obj.get("requestorId"),
            "requestor": obj.get("requestor"),
            "reviewerId": obj.get("reviewerId"),
            "reviewer": obj.get("reviewer"),
            "computeUsed": obj.get("computeUsed")
        })
        return _obj


