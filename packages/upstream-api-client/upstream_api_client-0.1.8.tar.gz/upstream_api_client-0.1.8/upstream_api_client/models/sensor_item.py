# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from upstream_api_client.models.sensor_statistics import SensorStatistics
from typing import Optional, Set
from typing_extensions import Self

class SensorItem(BaseModel):
    """
    SensorItem
    """ # noqa: E501
    id: StrictInt
    alias: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    postprocess: Optional[StrictBool] = None
    postprocessscript: Optional[StrictStr] = None
    units: Optional[StrictStr] = None
    variablename: Optional[StrictStr] = None
    statistics: Optional[SensorStatistics] = None
    __properties: ClassVar[List[str]] = ["id", "alias", "description", "postprocess", "postprocessscript", "units", "variablename", "statistics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict['alias'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if postprocess (nullable) is None
        # and model_fields_set contains the field
        if self.postprocess is None and "postprocess" in self.model_fields_set:
            _dict['postprocess'] = None

        # set to None if postprocessscript (nullable) is None
        # and model_fields_set contains the field
        if self.postprocessscript is None and "postprocessscript" in self.model_fields_set:
            _dict['postprocessscript'] = None

        # set to None if units (nullable) is None
        # and model_fields_set contains the field
        if self.units is None and "units" in self.model_fields_set:
            _dict['units'] = None

        # set to None if variablename (nullable) is None
        # and model_fields_set contains the field
        if self.variablename is None and "variablename" in self.model_fields_set:
            _dict['variablename'] = None

        # set to None if statistics (nullable) is None
        # and model_fields_set contains the field
        if self.statistics is None and "statistics" in self.model_fields_set:
            _dict['statistics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "alias": obj.get("alias"),
            "description": obj.get("description"),
            "postprocess": obj.get("postprocess"),
            "postprocessscript": obj.get("postprocessscript"),
            "units": obj.get("units"),
            "variablename": obj.get("variablename"),
            "statistics": SensorStatistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None
        })
        return _obj


