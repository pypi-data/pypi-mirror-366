# coding: utf-8

"""
    Upstream Sensor Storage

    Sensor Storage for Upstream data

    The version of the OpenAPI document: 0.0.1
    Contact: wmobley@tacc.utexas.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from upstream_api_client.models.measurement_item import MeasurementItem
from typing import Optional, Set
from typing_extensions import Self

class ListMeasurementsResponsePagination(BaseModel):
    """
    ListMeasurementsResponsePagination
    """ # noqa: E501
    items: List[MeasurementItem]
    total: StrictInt
    page: StrictInt
    size: StrictInt
    pages: StrictInt
    min_value: Union[StrictFloat, StrictInt]
    max_value: Union[StrictFloat, StrictInt]
    average_value: Union[StrictFloat, StrictInt]
    downsampled: StrictBool
    downsampled_total: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["items", "total", "page", "size", "pages", "min_value", "max_value", "average_value", "downsampled", "downsampled_total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListMeasurementsResponsePagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # set to None if downsampled_total (nullable) is None
        # and model_fields_set contains the field
        if self.downsampled_total is None and "downsampled_total" in self.model_fields_set:
            _dict['downsampled_total'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListMeasurementsResponsePagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [MeasurementItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "total": obj.get("total"),
            "page": obj.get("page"),
            "size": obj.get("size"),
            "pages": obj.get("pages"),
            "min_value": obj.get("min_value"),
            "max_value": obj.get("max_value"),
            "average_value": obj.get("average_value"),
            "downsampled": obj.get("downsampled"),
            "downsampled_total": obj.get("downsampled_total")
        })
        return _obj


