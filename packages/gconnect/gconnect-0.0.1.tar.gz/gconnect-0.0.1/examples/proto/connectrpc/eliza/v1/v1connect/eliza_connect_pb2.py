# Generated by the protoc-gen-connect-python. DO NOT EDIT!
# source: examples/proto/connectrpc/eliza/v1/v1connect/eliza.proto
# Protobuf Python Version: v5.29.2
# protoc-gen-connect-python version: (devel)
"""Generated connect code."""

import abc
from enum import Enum

from gconnect import (
    Client,
    ClientOptions,
    Handler,
    HandlerContext,
    HandlerOptions,
    IdempotencyLevel,
    StreamRequest,
    StreamResponse,
    UnaryRequest,
    UnaryResponse,
)
from gconnect.connection_pool import AsyncConnectionPool
from gconnect.handler import BidiStreamHandler, ClientStreamHandler, ServerStreamHandler, UnaryHandler
from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor

from .. import eliza_pb2
from ..eliza_pb2 import (
    ConverseRequest,
    ConverseResponse,
    IntroduceRequest,
    IntroduceResponse,
    ReflectRequest,
    ReflectResponse,
    SayRequest,
    SayResponse,
)


class ElizaServiceProcedures(Enum):
    """Procedures for the ElizaService service."""

    Say = "/connectrpc.eliza.v1.ElizaService/Say"
    Converse = "/connectrpc.eliza.v1.ElizaService/Converse"
    Introduce = "/connectrpc.eliza.v1.ElizaService/Introduce"
    Reflect = "/connectrpc.eliza.v1.ElizaService/Reflect"


ElizaService_service_descriptor: ServiceDescriptor = eliza_pb2.DESCRIPTOR.services_by_name["ElizaService"]

ElizaServiceSay_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Say"]
ElizaServiceConverse_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Converse"]
ElizaServiceIntroduce_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Introduce"]
ElizaServiceReflect_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Reflect"]


class ElizaServiceClient:
    def __init__(self, base_url: str, pool: AsyncConnectionPool, options: ClientOptions | None = None) -> None:
        base_url = base_url.removesuffix("/")

        self.Say = Client[SayRequest, SayResponse](
            pool, base_url + ElizaServiceProcedures.Say.value, SayRequest, SayResponse, ClientOptions(idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS, enable_get=True).merge(options)
        ).call_unary
        self.Converse = Client[ConverseRequest, ConverseResponse](
            pool, base_url + ElizaServiceProcedures.Converse.value, ConverseRequest, ConverseResponse, options
        ).call_server_stream
        self.Introduce = Client[IntroduceRequest, IntroduceResponse](
            pool, base_url + ElizaServiceProcedures.Introduce.value, IntroduceRequest, IntroduceResponse, options
        ).call_bidi_stream
        self.Reflect = Client[ReflectRequest, ReflectResponse](
            pool, base_url + ElizaServiceProcedures.Reflect.value, ReflectRequest, ReflectResponse, options
        ).call_client_stream


class ElizaServiceHandler(metaclass=abc.ABCMeta):
    """Handler for the eliza service."""

    async def Say(self, request: UnaryRequest[SayRequest], context: HandlerContext) -> UnaryResponse[SayResponse]:
        raise NotImplementedError()

    async def Converse(
        self, request: StreamRequest[eliza_pb2.ConverseRequest], context: HandlerContext
    ) -> StreamResponse[eliza_pb2.ConverseResponse]:
        raise NotImplementedError()

    async def Introduce(
        self, request: StreamRequest[IntroduceRequest], context: HandlerContext
    ) -> StreamResponse[IntroduceResponse]:
        raise NotImplementedError()

    async def Reflect(
        self, request: StreamRequest[ReflectRequest], context: HandlerContext
    ) -> StreamResponse[ReflectResponse]:
        raise NotImplementedError()


def create_ElizaService_handlers(service: ElizaServiceHandler, options: HandlerOptions | None = None) -> list[Handler]:
    handlers = [
        UnaryHandler(
            procedure=ElizaServiceProcedures.Say.value,
            unary=service.Say,
            input=SayRequest,
            output=SayResponse,
            options=HandlerOptions(idempotency_level=IdempotencyLevel.NO_SIDE_EFFECTS).merge(options),
        ),
        BidiStreamHandler(
            procedure=ElizaServiceProcedures.Converse.value,
            stream=service.Converse,
            input=ConverseRequest,
            output=ConverseResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.Introduce.value,
            stream=service.Introduce,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
        ClientStreamHandler(
            procedure=ElizaServiceProcedures.Reflect.value,
            stream=service.Reflect,
            input=ReflectRequest,
            output=ReflectResponse,
            options=options,
        ),
    ]
    return handlers
