"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022-2023 The Connect Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import examples.proto.connectrpc.eliza.v1.eliza_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ElizaServiceStub:
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Say: grpc.UnaryUnaryMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.SayRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.SayResponse,
    ]
    """Say is a unary RPC. Eliza responds to the prompt with a single sentence."""

    Converse: grpc.StreamStreamMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseResponse,
    ]
    """Converse is a bidirectional RPC. The caller may exchange multiple
    back-and-forth messages with Eliza over a long-lived connection. Eliza
    responds to each ConverseRequest with a ConverseResponse.
    """

    Introduce: grpc.UnaryStreamMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceResponse,
    ]
    """Introduce is a server streaming RPC. Given the caller's name, Eliza
    returns a stream of sentences to introduce itself.
    """

    Reflect: grpc.StreamUnaryMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectResponse,
    ]
    """Reflect is a client streaming RPC. Given a stream of sentences, Eliza
    returns a single sentence that reflects the input back to the caller.
    """

class ElizaServiceAsyncStub:
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    Say: grpc.aio.UnaryUnaryMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.SayRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.SayResponse,
    ]
    """Say is a unary RPC. Eliza responds to the prompt with a single sentence."""

    Converse: grpc.aio.StreamStreamMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseResponse,
    ]
    """Converse is a bidirectional RPC. The caller may exchange multiple
    back-and-forth messages with Eliza over a long-lived connection. Eliza
    responds to each ConverseRequest with a ConverseResponse.
    """

    Introduce: grpc.aio.UnaryStreamMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceResponse,
    ]
    """Introduce is a server streaming RPC. Given the caller's name, Eliza
    returns a stream of sentences to introduce itself.
    """

    Reflect: grpc.aio.StreamUnaryMultiCallable[
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectRequest,
        examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectResponse,
    ]
    """Reflect is a client streaming RPC. Given a stream of sentences, Eliza
    returns a single sentence that reflects the input back to the caller.
    """

class ElizaServiceServicer(metaclass=abc.ABCMeta):
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    @abc.abstractmethod
    def Say(
        self,
        request: examples.proto.connectrpc.eliza.v1.eliza_pb2.SayRequest,
        context: _ServicerContext,
    ) -> typing.Union[examples.proto.connectrpc.eliza.v1.eliza_pb2.SayResponse, collections.abc.Awaitable[examples.proto.connectrpc.eliza.v1.eliza_pb2.SayResponse]]:
        """Say is a unary RPC. Eliza responds to the prompt with a single sentence."""

    @abc.abstractmethod
    def Converse(
        self,
        request_iterator: _MaybeAsyncIterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseResponse], collections.abc.AsyncIterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.ConverseResponse]]:
        """Converse is a bidirectional RPC. The caller may exchange multiple
        back-and-forth messages with Eliza over a long-lived connection. Eliza
        responds to each ConverseRequest with a ConverseResponse.
        """

    @abc.abstractmethod
    def Introduce(
        self,
        request: examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceResponse], collections.abc.AsyncIterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.IntroduceResponse]]:
        """Introduce is a server streaming RPC. Given the caller's name, Eliza
        returns a stream of sentences to introduce itself.
        """

    @abc.abstractmethod
    def Reflect(
        self,
        request_iterator: _MaybeAsyncIterator[examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectRequest],
        context: _ServicerContext,
    ) -> typing.Union[examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectResponse, collections.abc.Awaitable[examples.proto.connectrpc.eliza.v1.eliza_pb2.ReflectResponse]]:
        """Reflect is a client streaming RPC. Given a stream of sentences, Eliza
        returns a single sentence that reflects the input back to the caller.
        """

def add_ElizaServiceServicer_to_server(servicer: ElizaServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
