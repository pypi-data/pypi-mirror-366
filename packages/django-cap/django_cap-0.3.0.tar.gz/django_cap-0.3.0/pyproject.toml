[project]
name = "django-cap"
version = "0.3.0"
description = "Django implementation of Cap.js Server for Proof of Work captcha"
authors = [{ name = "Somiona", email = "somionat@gmail.com" }]
readme = "README.md"
license = { text = "Apache-2.0" }
keywords = ["django", "captcha", "proof-of-work", "cap", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.11"
dependencies = ["cryptography>=45.0", "django>=5.0"]

[project.urls]
Homepage = "https://github.com/somiona/django_cap"
Repository = "https://github.com/somiona/django_cap"
"Bug Tracker" = "https://github.com/somiona/django-cap/issues"
Documentation = "https://github.com/somiona/django-cap#readme"

[project.optional-dependencies]
ninja = ["django-ninja>=1.4"]
drf = ["djangorestframework>=3.16"]
unfold = ["django-unfold>=0.62"]


[dependency-groups]
optional = [
    "django-unfold>=0.62.0",
    "django-ninja>=1.4",
    "djangorestframework>=3.16.0",
]
dev = [
    "django-debug-toolbar",
    "django-types",
    "djlint>=1.36",
    "ruff>=0.12.4",
    "timeit-decorator>=2.1.2",
    "twine>=6.1.0",
    "ty>=0.0.1a14",
    "vpdb>=1.0.0",
    "django-cors-headers>=4.7.0",
    "pdm>=2.25.4",
    "pre-commit>=4.2.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-django>=4.11.1",
    "pytest-cov>=6.2.1",
]

# [build-system]
# requires = ["pdm-backend"]
# build-backend = "pdm.backend"

[build-system]
requires = ["maturin>=1.9,<2.0"]
build-backend = "maturin"

[tool.uv]
default-groups = ["dev", "test", "optional"]

[tool.pdm.scripts]
vpdb = "uv run vpdb"
lint = "uv run ruff check"
lint-fix = "uv run ruff check --fix"
format = "uv run ruff format"
type-check = "uv run ty check"
test = "uv run pytest"
start = "uv run manage.py runserver"
dev = "uv run maturin develop -r"
dev-debug = "uv run maturin develop"
migrate = "uv run manage.py migrate"
createsuperuser = "uv run manage.py createsuperuser"
shell = "uv run manage.py shell"
coverage = "uv run pytest --cov --cov-report json"
twine = "uv run twine check dist/*.whl dist/*.tar.gz"

[tool.pdm.build]
includes = ["django_cap"]
excludes = [
    "**/__pycache__/**",
    "**/*.pyc",
    "**/*.pyo",
    "**/test_*.py",
    "**/tests.py",
    "**/tests/**",
]

[tool.maturin]
include = [
    "django_cap/**/*.py",      # Include all Python files in django_cap
    "django_cap/templates/**", # Include templates
]
python-source = "."
module-name = "django_cap.cap_core._cap_rust"
features = ["pyo3/extension-module"]
exclude = [
    "**/__pycache__/**",
    "**/*.pyc",
    "**/*.pyo",
    "**/test_*.py",
    "**/tests.py",
    "**/tests/**",
    "dev/**",
    "settings/**",
    "*.sqlite3",
    "manage.py",
    "maturin_generated_ci.yml",
    "RELEASE_CHECKLIST.md",
    "validate_dev_tools.py",
    "uv.lock",
]

[tool.ty.environment]
python = "./.venv"

[tool.ruff]
target-version = "py311"
extend-exclude = ["*/migrations/*"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle wargitnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "settings.django_settings"
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests", "cap_core"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["django_cap", "cap_core", "ninja_api"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
