name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.x, v0.2.x)'
        required: true
        type: string
      base_branch:
        description: 'Base branch to create release from'
        required: false
        default: 'main'
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Get Version Bumper app token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.VERSION_BUMPER_APP_ID }}
          private-key: ${{ secrets.VERSION_BUMPER_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.x$ ]]; then
            echo "Invalid version format. Expected: v{major}.{minor}.x (e.g., v0.1.x)"
            exit 1
          fi

      - name: Set up UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Update mcp-kit version in examples
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Extract major.minor from version (e.g., v0.1.x -> 0.1)
          if [[ $VERSION =~ ^v([0-9]+)\.([0-9]+)\.x$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            TARGET_VERSION="${MAJOR}.${MINOR}.0"
          else
            echo "Failed to extract version components"
            exit 1
          fi

          echo "Updating mcp-kit to version >=${TARGET_VERSION} in examples"

          # Iterate through all direct subdirectories in examples/
          for example_dir in examples/*/; do
            if [ -d "$example_dir" ] && [ -f "${example_dir}pyproject.toml" ]; then
              echo "Updating ${example_dir}"
              cd "$example_dir"
              uv add "mcp-kit>=${TARGET_VERSION}" --frozen
              cd - > /dev/null
            fi
          done

      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add examples/*/pyproject.toml examples/*/uv.lock
            git commit -m "Release branch ${TARGET_VERSION} prep"
            git push origin ${{ github.event.inputs.base_branch }}
            echo "Committed and pushed version updates"
          fi

      - name: Create release branch
        run: |
          BRANCH_NAME="release/${{ github.event.inputs.version }}"

          # Check if branch already exists
          if git ls-remote --exit-code --heads origin $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists!"
            exit 1
          fi

          # Create and push branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

          echo "Created release branch: $BRANCH_NAME"

