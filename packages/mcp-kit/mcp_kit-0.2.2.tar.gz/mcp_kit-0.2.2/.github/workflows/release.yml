name: Release

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.3)'
        required: true
        type: string
      publish_pypi:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read
  id-token: write  # Required for PyPI trusted publishing

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for dynamic versioning

      - name: Set up UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Extract version from branch or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract from branch name: release/v0.1.x -> get latest patch
            BRANCH_NAME="${{ github.ref_name }}"
            if [[ $BRANCH_NAME =~ ^release/v([0-9]+)\.([0-9]+)\.x$ ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}

              # Find the latest patch version for this major.minor
              LATEST_PATCH=$(git tag -l "v${MAJOR}.${MINOR}.*" --sort=-version:refname | head -n1 | sed 's/v[0-9]*\.[0-9]*\.//')
              if [ -z "$LATEST_PATCH" ]; then
                NEXT_PATCH=0
              else
                NEXT_PATCH=$((LATEST_PATCH + 1))
              fi
              VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
            else
              echo "Invalid branch name format. Expected: release/v{major}.{minor}.x"
              exit 1
            fi
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_without_v=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: Check if tag already exists
        run: |
          if git rev-parse "refs/tags/${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.version }} already exists!"
            exit 1
          fi

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests
        run: uv run pytest

      - name: Run linting
        run: |
          uv run ruff check
          uv run ruff format --check

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Build package
        run: uv build

      - name: Generate manual release notes section
        id: manual_release_notes
        run: |
          # Create release notes for GitHub
          cat > MANUAL_RELEASE_NOTES.md << EOF
          **Docs permalink**: https://docs.agentiqs.ai/mcp-kit-python/${{ steps.version.outputs.version_without_v }}/docs
          EOF

          echo "manual_release_notes_file=MANUAL_RELEASE_NOTES.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          # this will be prepended to the automatically generated release notes
          body_path: ${{ steps.manual_release_notes.outputs.manual_release_notes_file }}
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false

      - name: Publish to PyPI
        if: github.event.inputs.publish_pypi == 'true' || contains(github.ref_name, 'release/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Using trusted publishing - no API token needed
          skip-existing: true

  notify:
    needs: release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.release.outputs.version }} completed successfully!"

      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          exit 1
