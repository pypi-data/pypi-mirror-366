name: Run Examples

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  discover-examples:
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.find-examples.outputs.examples }}
      should-run: ${{ steps.changes.outputs.code }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          code:
            - 'src/**'
            - 'examples/**'
            - 'pyproject.toml'
            - '.github/workflows/run-examples.yml'

    - name: Find example directories
      id: find-examples
      if: steps.changes.outputs.code == 'true'
      run: |
        # Find all directories in examples/ and validate they have required files
        valid_examples=()
        invalid_examples=()

        for dir in examples/*/; do
          if [ "$dir" = "examples/*/" ]; then
            # No subdirectories found
            continue
          fi

          example_name=$(basename "$dir")
          has_pyproject=false
          has_main=false

          if [ -f "$dir/pyproject.toml" ]; then
            has_pyproject=true
          fi

          if [ -f "$dir/main.py" ]; then
            has_main=true
          fi

          if [ "$has_pyproject" = true ] && [ "$has_main" = true ]; then
            valid_examples+=("$example_name")
            echo "‚úÖ $example_name: has both pyproject.toml and main.py"
          else
            invalid_examples+=("$example_name")
            echo "‚ùå $example_name: missing files -"
            if [ "$has_pyproject" = false ]; then
              echo "   - pyproject.toml not found"
            fi
            if [ "$has_main" = false ]; then
              echo "   - main.py not found"
            fi
          fi
        done

        # Fail if any examples are invalid
        if [ ${#invalid_examples[@]} -gt 0 ]; then
          echo ""
          echo "üí• Found invalid example directories:"
          printf '   - %s\n' "${invalid_examples[@]}"
          echo ""
          echo "All example directories must contain both pyproject.toml and main.py"
          exit 1
        fi

        # Convert valid examples to JSON array
        if [ ${#valid_examples[@]} -eq 0 ]; then
          echo "‚ö†Ô∏è No valid examples found"
          examples="[]"
        else
          examples=$(printf '%s\n' "${valid_examples[@]}" | jq -R -s -c 'split("\n")[:-1]')
        fi

        echo "Found valid examples: $examples"
        echo "examples=$examples" >> $GITHUB_OUTPUT

    - name: Set empty examples when skipped
      id: set-empty
      if: steps.changes.outputs.code == 'false'
      run: |
        echo "No code changes detected, skipping examples"
        echo "examples=[]" >> $GITHUB_OUTPUT

  run-examples:
    runs-on: ubuntu-latest
    needs: discover-examples
    if: needs.discover-examples.outputs.should-run == 'true' && needs.discover-examples.outputs.examples != '[]'
    strategy:
      matrix:
        example: ${{ fromJson(needs.discover-examples.outputs.examples) }}
      fail-fast: false  # Continue running other examples even if one fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install example dependencies
      working-directory: examples/${{ matrix.example }}
      run: uv sync

    - name: Create .env file with API keys
      working-directory: examples/${{ matrix.example }}
      run: |
        # Only create .env file if .env.example exists
        if [ -f ".env.example" ]; then
          echo "üìù Found .env.example, creating .env file with API keys..."
          cp .env.example .env

          # Replace all API key placeholders regardless of which example this is
          if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
            sed -i 's/your_google_api_key_here/${{ secrets.GOOGLE_API_KEY }}/g' .env
            echo "‚úÖ Set GOOGLE_API_KEY"
          fi

          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            sed -i 's/your_anthropic_api_key_here/${{ secrets.ANTHROPIC_API_KEY }}/g' .env
            echo "‚úÖ Set ANTHROPIC_API_KEY"
          fi

          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            sed -i 's/your_openai_api_key_here/${{ secrets.OPENAI_API_KEY }}/g' .env
            echo "‚úÖ Set OPENAI_API_KEY"
          fi
        else
          echo "‚ÑπÔ∏è No .env.example found, skipping .env creation"
        fi

    - name: Run example
      working-directory: examples/${{ matrix.example }}
      timeout-minutes: 10
      run: |
        echo "üöÄ Running ${{ matrix.example }} example..."
        uv add --editable ../../
        uv run python main.py

    - name: Clean up .env file
      if: always()
      working-directory: examples/${{ matrix.example }}
      run: |
        # Remove the .env file to avoid accidentally committing secrets (only if it exists)
        if [ -f ".env" ]; then
          rm -f .env
          echo "üßπ Cleaned up .env file"
        fi

  examples-summary:
    runs-on: ubuntu-latest
    needs: [discover-examples, run-examples]
    if: always()  # Run even if some examples failed
    steps:
    - name: Check all examples passed
      run: |
        # Check if we should have run examples
        if [ "${{ needs.discover-examples.outputs.should-run }}" = "false" ]; then
          echo "‚úÖ Examples skipped - no relevant code changes detected"
          exit 0
        fi

        # Check if the run-examples job succeeded
        if [ "${{ needs.run-examples.result }}" != "success" ] && [ "${{ needs.run-examples.result }}" != "skipped" ]; then
          echo "‚ùå Some examples failed or were cancelled"
          echo "Examples job result: ${{ needs.run-examples.result }}"
          exit 1
        fi

        # Check if we actually found and ran examples
        examples='${{ needs.discover-examples.outputs.examples }}'
        example_count=$(echo "$examples" | jq length)

        if [ "$example_count" -eq 0 ]; then
          echo "‚ö†Ô∏è No examples were found to run"
          exit 1
        fi

        echo "‚úÖ All $example_count examples passed successfully!"
        echo "Examples run: $examples"
