"""
API views for {{ app_name }} app
Generated by DJ Maker CLI
"""

from rest_framework import viewsets, filters, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from django_filters.rest_framework import DjangoFilterBackend
from typing import Any, Dict, List

from .models import {{ model_name }}
from .serializers import {{ model_name }}Serializer


class {{ model_name }}ViewSet(viewsets.ModelViewSet):
    """
    ViewSet for {{ model_name }} model
    Provides CRUD operations via REST API
    """
    queryset = {{ model_name }}.objects.all()
    serializer_class = {{ model_name }}Serializer
    permission_classes = [IsAuthenticated]

    # Add filtering and search
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = [
        {% for field in fields %}
        {% if field.type in ['CharField', 'BooleanField', 'DateTimeField'] %}
        '{{ field.name }}',
        {% endif %}
        {% endfor %}
    ]
    search_fields = [
        {% for field in fields %}
        {% if field.type in ['CharField', 'TextField'] %}
        '{{ field.name }}',
        {% endif %}
        {% endfor %}
    ]
    ordering_fields = ['id', 'created_at'] if 'created_at' in [f.name for f in {{ model_name }}._meta.fields] else ['id']
    ordering = ['-id']

    def get_queryset(self):
        """Custom queryset with optional filtering"""
        queryset = super().get_queryset()

        # Add custom filters here
        # Example: Filter by user if model has user field
        {% for field in fields %}
        {% if field.name == 'user' %}
        if not self.request.user.is_staff:
            queryset = queryset.filter(user=self.request.user)
        {% endif %}
        {% endfor %}

        return queryset

    @action(detail=False, methods=['get'])
    def stats(self, request) -> Response:
        """Get statistics for {{ model_name_lower }}s"""
        total_count = self.get_queryset().count()

        stats_data: Dict[str, Any] = {
            'total_count': total_count,
            {% for field in fields %}
            {% if field.type == 'BooleanField' %}
            '{{ field.name }}_true_count': self.get_queryset().filter({{ field.name }}=True).count(),
            '{{ field.name }}_false_count': self.get_queryset().filter({{ field.name }}=False).count(),
            {% endif %}
            {% endfor %}
        }

        return Response(stats_data)

    @action(detail=True, methods=['post'])
    def toggle_status(self, request, pk=None) -> Response:
        """Toggle boolean status field if available"""
        obj = self.get_object()

        # Example for common status fields
        {% for field in fields %}
        {% if field.type == 'BooleanField' and field.name in ['is_active', 'is_published', 'status'] %}
        if hasattr(obj, '{{ field.name }}'):
            obj.{{ field.name }} = not obj.{{ field.name }}
            obj.save()
            serializer = self.get_serializer(obj)
            return Response(serializer.data)
        {% endif %}
        {% endfor %}

        return Response(
            {'error': 'No toggleable status field found'},
            status=status.HTTP_400_BAD_REQUEST
        )


class {{ model_name }}SearchView(APIView):
    """
    Advanced search view for {{ model_name }}
    """
    permission_classes = [IsAuthenticated]

    def get(self, request) -> Response:
        """Perform advanced search"""
        query = request.GET.get('q', '')

        if not query:
            return Response({'results': []})

        # Perform search across multiple fields
        queryset = {{ model_name }}.objects.filter(
            {% for field in fields %}
            {% if field.type in ['CharField', 'TextField'] %}
            {{ field.name }}__icontains=query{% if not loop.last %} |{% endif %}
            {% endif %}
            {% endfor %}
        )[:20]  # Limit results

        serializer = {{ model_name }}Serializer(queryset, many=True)

        return Response({
            'query': query,
            'count': queryset.count(),
            'results': serializer.data
        })


class {{ model_name }}BulkActionView(APIView):
    """
    Bulk actions for {{ model_name }}
    """
    permission_classes = [IsAuthenticated]

    def post(self, request) -> Response:
        """Perform bulk actions"""
        action = request.data.get('action')
        ids = request.data.get('ids', [])

        if not action or not ids:
            return Response(
                {'error': 'Action and ids are required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        queryset = {{ model_name }}.objects.filter(id__in=ids)

        if action == 'delete':
            count = queryset.count()
            queryset.delete()
            return Response({'message': f'Deleted {count} {{ model_name_lower }}s'})

        {% for field in fields %}
        {% if field.type == 'BooleanField' %}
        elif action == 'toggle_{{ field.name }}':
            for obj in queryset:
                obj.{{ field.name }} = not obj.{{ field.name }}
                obj.save()
            return Response({'message': f'Toggled {{ field.name }} for {queryset.count()} {{ model_name_lower }}s'})
        {% endif %}
        {% endfor %}

        return Response(
            {'error': f'Unknown action: {action}'},
            status=status.HTTP_400_BAD_REQUEST
        )
