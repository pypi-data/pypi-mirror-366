"""
Serializers for {{ app_name }} app
Generated by DJ Maker CLI
"""

from rest_framework import serializers
from typing import Dict, Any

from .models import {{ model_name }}


class {{ model_name }}Serializer(serializers.ModelSerializer):
    """Serializer for {{ model_name }} model"""

    class Meta:
        model = {{ model_name }}
        fields = [
            {% for field in fields %}
            '{{ field.name }}',
            {% endfor %}
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']

    def validate(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Custom validation"""
        # Add custom validation logic here
        return data

    {% for field in fields %}
    {% if field.type == 'EmailField' %}
    def validate_{{ field.name }}(self, value: str) -> str:
        """Validate {{ field.name }}"""
        if {{ model_name }}.objects.filter({{ field.name }}=value).exclude(pk=self.instance.pk if self.instance else None).exists():
            raise serializers.ValidationError("This {{ field.name }} is already in use.")
        return value
    {% endif %}
    {% endfor %}


class {{ model_name }}CreateSerializer({{ model_name }}Serializer):
    """Serializer for creating {{ model_name }}"""

    class Meta({{ model_name }}Serializer.Meta):
        # Remove read-only fields for creation
        read_only_fields = ['id']


class {{ model_name }}UpdateSerializer({{ model_name }}Serializer):
    """Serializer for updating {{ model_name }}"""

    class Meta({{ model_name }}Serializer.Meta):
        # Make some fields optional for updates
        pass


class {{ model_name }}ListSerializer(serializers.ModelSerializer):
    """Simplified serializer for list views"""

    class Meta:
        model = {{ model_name }}
        fields = [
            'id',
            {% for field in fields[:3] %}  {# Show only first 3 fields in list #}
            '{{ field.name }}',
            {% endfor %}
        ]
