"""
Class-based views for {{ app_name }} app
Generated by DJ Maker CLI
"""

from django.views.generic import (
    ListView, DetailView, CreateView, UpdateView, DeleteView
)
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.urls import reverse_lazy
from django.db.models import QuerySet
from typing import Any, Dict

from .models import {{ model_name }}
from .forms import {{ model_name }}Form


class {{ model_name }}ListView(ListView):
    """List all {{ model_name_lower }}s"""
    model = {{ model_name }}
    template_name = '{{ app_name }}/{{ model_name_lower }}_list.html'
    context_object_name = '{{ model_name_lower }}s'
    paginate_by = 20

    def get_queryset(self) -> QuerySet[{{ model_name }}]:
        """Get queryset with optional filtering"""
        queryset = super().get_queryset()

        # Add search functionality
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                # Adjust this based on your model fields
                {% for field in fields %}
                {% if field.type in ['CharField', 'TextField'] %}
                {{ field.name }}__icontains=search{% if not loop.last %} |{% endif %}
                {% endif %}
                {% endfor %}
            )

        return queryset.order_by('-id')

    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]:
        """Add extra context"""
        context = super().get_context_data(**kwargs)
        context['search'] = self.request.GET.get('search', '')
        return context


class {{ model_name }}DetailView(DetailView):
    """Show {{ model_name_lower }} detail"""
    model = {{ model_name }}
    template_name = '{{ app_name }}/{{ model_name_lower }}_detail.html'
    context_object_name = '{{ model_name_lower }}'


class {{ model_name }}CreateView(LoginRequiredMixin, CreateView):
    """Create new {{ model_name_lower }}"""
    model = {{ model_name }}
    form_class = {{ model_name }}Form
    template_name = '{{ app_name }}/{{ model_name_lower }}_form.html'
    success_url = reverse_lazy('{{ app_name }}:{{ model_name_lower }}-list')

    def form_valid(self, form: {{ model_name }}Form) -> Any:
        """Add success message"""
        response = super().form_valid(form)
        messages.success(
            self.request,
            f'{{ model_name }} "{self.object}" was created successfully.'
        )
        return response

    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]:
        """Add extra context"""
        context = super().get_context_data(**kwargs)
        context['title'] = 'Create {{ model_name }}'
        context['submit_text'] = 'Create'
        return context


class {{ model_name }}UpdateView(LoginRequiredMixin, UpdateView):
    """Update existing {{ model_name_lower }}"""
    model = {{ model_name }}
    form_class = {{ model_name }}Form
    template_name = '{{ app_name }}/{{ model_name_lower }}_form.html'

    def get_success_url(self) -> str:
        """Redirect to detail view after update"""
        return reverse_lazy('{{ app_name }}:{{ model_name_lower }}-detail', kwargs={'pk': self.object.pk})

    def form_valid(self, form: {{ model_name }}Form) -> Any:
        """Add success message"""
        response = super().form_valid(form)
        messages.success(
            self.request,
            f'{{ model_name }} "{self.object}" was updated successfully.'
        )
        return response

    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]:
        """Add extra context"""
        context = super().get_context_data(**kwargs)
        context['title'] = f'Update {{ model_name }} "{self.object}"'
        context['submit_text'] = 'Update'
        return context


class {{ model_name }}DeleteView(LoginRequiredMixin, DeleteView):
    """Delete {{ model_name_lower }}"""
    model = {{ model_name }}
    template_name = '{{ app_name }}/{{ model_name_lower }}_confirm_delete.html'
    success_url = reverse_lazy('{{ app_name }}:{{ model_name_lower }}-list')
    context_object_name = '{{ model_name_lower }}'

    def delete(self, request: Any, *args: Any, **kwargs: Any) -> Any:
        """Add success message"""
        obj = self.get_object()
        name = str(obj)
        response = super().delete(request, *args, **kwargs)
        messages.success(request, f'{{ model_name }} "{name}" was deleted successfully.')
        return response

    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]:
        """Add extra context"""
        context = super().get_context_data(**kwargs)
        context['title'] = f'Delete {{ model_name }} "{self.object}"'
        return context
