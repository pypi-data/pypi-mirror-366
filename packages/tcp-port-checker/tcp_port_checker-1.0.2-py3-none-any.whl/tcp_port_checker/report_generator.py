"""
Report generation class
Creates detailed reports in TXT and HTML formats
"""

from datetime import datetime
import os


class ReportGenerator:
    """Class for managing report generation operations"""
    
    def __init__(self):
        """Initialize ReportGenerator"""
        self.report_version = "1.0"
        self.encoding = 'utf-8'
    
    def _calculate_summary(self, results):
        """
        Calculate comprehensive summary statistics from results
        
        Args:
            results (list): List of check results
            
        Returns:
            dict: Summary statistics dictionary
        """
        if not results:
            return {
                'ping_ok': 0, 'port_ok': 0, 'full_access': 0, 'total_hosts': 0,
                'ping_fail': 0, 'port_fail': 0, 'no_access': 0, 'partial_access': 0,
                'ping_success_rate': 0, 'port_success_rate': 0, 'full_access_rate': 0
            }
        
        # Count different result types
        ping_ok = len([r for r in results if "PING ‚úì" in r])
        port_ok = len([r for r in results if "TCP" in r and "‚úì" in r])
        full_access = len([r for r in results if "FULL ACCESS" in r])
        partial_access = len([r for r in results if "PING OK, PORT CLOSED" in r])
        no_access = len([r for r in results if "NO ACCESS" in r])
        total_hosts = len(results)
        
        # Calculate rates
        ping_success_rate = (ping_ok / total_hosts * 100) if total_hosts > 0 else 0
        port_success_rate = (port_ok / total_hosts * 100) if total_hosts > 0 else 0
        full_access_rate = (full_access / total_hosts * 100) if total_hosts > 0 else 0
        
        return {
            'ping_ok': ping_ok,
            'port_ok': port_ok,
            'full_access': full_access,
            'partial_access': partial_access,
            'no_access': no_access,
            'total_hosts': total_hosts,
            'ping_fail': total_hosts - ping_ok,
            'port_fail': total_hosts - port_ok,
            'ping_success_rate': ping_success_rate,
            'port_success_rate': port_success_rate,
            'full_access_rate': full_access_rate
        }
    
    def _categorize_results(self, results):
        """
        Categorize results by connection status type
        
        Args:
            results (list): List of check results
            
        Returns:
            dict: Categorized results dictionary
        """
        categories = {
            'full_access': [],      # Both ping and port working
            'ping_only': [],        # Ping works, port closed
            'port_only': [],        # Port open, ping failed
            'no_access': [],        # Neither ping nor port working
            'errors': []            # Errors and timeouts
        }
        
        for result in results:
            if "FULL ACCESS" in result:
                categories['full_access'].append(result)
            elif "PING OK, PORT CLOSED" in result:
                categories['ping_only'].append(result)
            elif "PING FAILED, PORT OPEN" in result:
                categories['port_only'].append(result)
            elif "NO ACCESS" in result:
                categories['no_access'].append(result)
            elif any(keyword in result for keyword in ["ERROR", "TIMEOUT"]):
                categories['errors'].append(result)
            else:
                # Unknown states - treat as no access
                categories['no_access'].append(result)
        
        return categories
    
    def generate_txt_report(self, results, filename):
        """
        Generate comprehensive TXT format report
        
        Args:
            results (list): List of check results
            filename (str): Output file name
        """
        summary = self._calculate_summary(results)
        categories = self._categorize_results(results)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        try:
            with open(filename, 'w', encoding=self.encoding) as file:
                # Header and general information
                file.write("üåê TCP PORT AND PING CHECK REPORT\n")
                file.write("=" * 70 + "\n")
                file.write(f"Report Date     : {current_time}\n")
                file.write(f"Report Version  : {self.report_version}\n")
                file.write(f"Hosts Checked   : {summary['total_hosts']} hosts\n")
                file.write(f"Generated by    : TCP Port and Ping Checker\n")
                file.write("=" * 70 + "\n\n")
                
                # Executive Summary
                file.write("üìä EXECUTIVE SUMMARY\n")
                file.write("-" * 40 + "\n")
                file.write(f"Overall Success Rate    : {summary['full_access_rate']:5.1f}%\n")
                file.write(f"Network Connectivity    : {summary['ping_success_rate']:5.1f}%\n")
                file.write(f"Service Availability    : {summary['port_success_rate']:5.1f}%\n")
                file.write("\n")
                
                # Detailed Statistics
                file.write("üìà DETAILED STATISTICS\n")
                file.write("-" * 40 + "\n")
                file.write(f"Total Hosts Tested      : {summary['total_hosts']:3d}\n")
                file.write(f"Ping Successful         : {summary['ping_ok']:3d} ({summary['ping_success_rate']:5.1f}%)\n")
                file.write(f"Port Accessible         : {summary['port_ok']:3d} ({summary['port_success_rate']:5.1f}%)\n")
                file.write(f"Full Access             : {summary['full_access']:3d} ({summary['full_access_rate']:5.1f}%)\n")
                file.write(f"Partial Access          : {summary['partial_access']:3d}\n")
                file.write(f"No Access               : {summary['no_access']:3d}\n")
                file.write(f"Ping Failures           : {summary['ping_fail']:3d}\n")
                file.write(f"Port Failures           : {summary['port_fail']:3d}\n")
                file.write("\n")
                
                # Detailed Results Table
                file.write("üìã DETAILED RESULTS\n")
                file.write("-" * 70 + "\n")
                file.write(f"{'IP ADDRESS':15} | {'PING':8} | {'PORT':10} | STATUS\n")
                file.write("-" * 70 + "\n")
                
                # Group results by category for better readability
                if categories['full_access']:
                    file.write("# FULL ACCESS HOSTS (Ping ‚úì + Port ‚úì)\n")
                    for result in categories['full_access']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['ping_only']:
                    file.write("# PING ACCESS ONLY (Ping ‚úì + Port ‚úó)\n")
                    for result in categories['ping_only']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['port_only']:
                    file.write("# PORT ACCESS ONLY (Ping ‚úó + Port ‚úì)\n")
                    for result in categories['port_only']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['no_access']:
                    file.write("# NO ACCESS HOSTS (Ping ‚úó + Port ‚úó)\n")
                    for result in categories['no_access']:
                        file.write(result + "\n")
                    file.write("\n")
                
                if categories['errors']:
                    file.write("# ERRORS AND TIMEOUTS\n")
                    for result in categories['errors']:
                        file.write(result + "\n")
                    file.write("\n")
                
                # Analysis and Insights
                file.write("=" * 70 + "\n")
                file.write("üîç ANALYSIS AND INSIGHTS\n")
                file.write("=" * 70 + "\n")
                
                # Recommendations
                recommendations = self._generate_recommendations(summary, categories)
                file.write("üí° RECOMMENDATIONS\n")
                file.write("-" * 20 + "\n")
                for recommendation in recommendations:
                    file.write(f"‚Ä¢ {recommendation}\n")
                
                # Footer
                file.write(f"\n" + "=" * 70 + "\n")
                file.write(f"Report generated: {current_time}\n")
                file.write(f"Total records processed: {len(results)}\n")
                file.write(f"Report format: TXT v{self.report_version}\n")
                
            print(f"‚úÖ TXT report generated: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error generating TXT report: {str(e)}")
            raise
    
    def generate_html_report(self, results, filename):
        """
        Generate interactive HTML format report
        
        Args:
            results (list): List of check results
            filename (str): Output file name
        """
        summary = self._calculate_summary(results)
        categories = self._categorize_results(results)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        try:
            # Create HTML content using string concatenation to avoid f-string issues
            html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TCP Port Check Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
        h1 { color: #333; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 8px 12px; text-align: left; border: 1px solid #ddd; }
        th { background-color: #007acc; color: white; }
        .status-ok { background-color: #d4edda; }
        .status-partial { background-color: #fff3cd; }
        .status-error { background-color: #f8d7da; }
        .summary { margin: 20px 0; padding: 15px; background-color: #e9ecef; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåê Network Connectivity Report</h1>"""
            
            html_content += f"""
        <p><strong>Date:</strong> {current_time}</p>
        
        <div class="summary">
            <h3>üìä Summary</h3>
            <p><strong>Total Hosts:</strong> {summary['total_hosts']}</p>
            <p><strong>Ping Success:</strong> {summary['ping_ok']} ({summary['ping_success_rate']:.1f}%)</p>
            <p><strong>Port Open:</strong> {summary['port_ok']} ({summary['port_success_rate']:.1f}%)</p>
            <p><strong>Full Access:</strong> {summary['full_access']} ({summary['full_access_rate']:.1f}%)</p>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>IP Address</th>
                    <th>Ping</th>
                    <th>Port</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>"""
            
            # Generate table rows
            for result in results:
                parts = result.split(" | ")
                if len(parts) >= 4:
                    ip = parts[0].strip()
                    ping = parts[1].strip()
                    port = parts[2].strip()
                    status = parts[3].strip()
                    
                    # Determine row class
                    if "FULL ACCESS" in status:
                        row_class = "status-ok"
                    elif "PING OK" in status:
                        row_class = "status-partial"
                    else:
                        row_class = "status-error"
                    
                    html_content += f"""
                    <tr class="{row_class}">
                        <td><strong>{ip}</strong></td>
                        <td>{ping}</td>
                        <td>{port}</td>
                        <td>{status}</td>
                    </tr>"""
            
            html_content += f"""
            </tbody>
        </table>
    </div>
    
    <div style="text-align: center; margin-top: 20px; color: #666;">
        <p><strong>Report generated by TCP Port and Ping Checker v{self.report_version}</strong></p>
        <p>Generated on {current_time} | Total records: {len(results)}</p>
    </div>
</body>
</html>"""
            
            with open(filename, 'w', encoding=self.encoding) as file:
                file.write(html_content)
            
            print(f"‚úÖ HTML report generated: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error generating HTML report: {str(e)}")
            raise
    
    def _generate_recommendations(self, summary, categories):
        """
        Generate actionable recommendations based on results
        
        Args:
            summary (dict): Summary statistics
            categories (dict): Categorized results
            
        Returns:
            list: List of recommendation strings
        """
        recommendations = []
        
        # Overall health recommendations
        if summary['full_access_rate'] < 50:
            recommendations.append("Critical: Less than 50% success rate - immediate investigation required")
        
        # Network-specific recommendations
        if summary['ping_fail'] > summary['port_fail']:
            recommendations.append("Focus on network infrastructure: ping failures exceed port failures")
            recommendations.append("Check routers, switches, and network connectivity")
        
        # Service-specific recommendations
        if summary['port_fail'] > summary['ping_fail']:
            recommendations.append("Focus on service configuration: port failures exceed ping failures")
            recommendations.append("Verify services are running on target ports")
        
        # Success rate specific advice
        if summary['full_access_rate'] >= 90:
            recommendations.append("Excellent connectivity - maintain current network configuration")
        elif summary['full_access_rate'] >= 70:
            recommendations.append("Good connectivity - minor optimizations may help")
        else:
            recommendations.append("Poor connectivity - comprehensive network review recommended")
        
        return recommendations