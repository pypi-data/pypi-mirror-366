name: Build and Publish to PyPI

# on:
#   pull_request:
#     branches: [ main ]
#     types: [ closed ]  # Only run when PR is closed
#   workflow_dispatch:  # Allow manual triggering

on:
  push:
    branches: [ "**" ]

jobs:
  publish:
    runs-on: ubuntu-latest
    # Only run if PR was merged (not just closed)
    # if: github.event.pull_request.merged == true
    permissions:
      contents: write  # Required for creating tags and releases
      pull-requests: write  # Required for creating pull requests
      issues: write  # Required for PR creation
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version bumping
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      run: |
        # Get current version
        current_version=$(python -c "from src.fdq.__about__ import __version__; print(__version__)")
        echo "Current version: $current_version"
        
        # Bump patch version (0.0.52 -> 0.0.53)
        bump2version patch src/fdq/__about__.py --current-version=$current_version --no-commit --no-tag
        
        # Get new version
        new_version=$(python -c "from src.fdq.__about__ import __version__; print(__version__)")
        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Create version tag
      run: |
        # Create tag with the new version
        git tag "v${{ env.NEW_VERSION }}"
        git push origin "v${{ env.NEW_VERSION }}"

    - name: Create version bump PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Bump version to ${{ env.NEW_VERSION }}"
        title: "ðŸš€ Bump version to ${{ env.NEW_VERSION }}"
        body: |
          Automated version bump to ${{ env.NEW_VERSION }}
          
          This PR was created automatically after a successful release.
          
          **Changes:**
          - Updated version in `src/fdq/__about__.py` to ${{ env.NEW_VERSION }}
          
          **Auto-merge:** This PR can be safely merged as it only contains the version update.
        branch: version-bump-${{ env.NEW_VERSION }}
        delete-branch: true
        add-paths: |
          src/fdq/__about__.py

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m twine upload dist/*

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          Automated release v${{ env.NEW_VERSION }}
          
          Changes in this release:
          - Version bump to ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false
