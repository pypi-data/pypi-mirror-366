[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "upstream-sdk"
version = "1.0.2"
description = "Python SDK for Upstream environmental sensor data platform and CKAN integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "In-For-Disaster-Analytics Team", email = "info@tacc.utexas.edu"}
]
maintainers = [
    {name = "In-For-Disaster-Analytics Team", email = "info@tacc.utexas.edu"}
]
keywords = ["environmental", "sensors", "data", "api", "ckan", "upstream"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.25.0",
    "pyyaml>=6.0",
    "python-dateutil>=2.8.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
    "pydantic>=2.0.0",
    "urllib3>=1.25.3",
    "upstream-api-client>=0.1.8"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.6.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "tox>=4.0.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "twine>=4.0.0",
    "build>=0.8.0",
]
data = [
    "pandas>=1.3.0",
    "numpy>=1.20.0",
]
examples = [
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]
all = [
    "upstream-sdk[dev,data,examples]",
]

[project.urls]
Homepage = "https://github.com/In-For-Disaster-Analytics/upstream-python-sdk"
Documentation = "https://upstream-python-sdk.readthedocs.io"
Repository = "https://github.com/In-For-Disaster-Analytics/upstream-python-sdk"
Issues = "https://github.com/In-For-Disaster-Analytics/upstream-python-sdk/issues"
Changelog = "https://github.com/In-For-Disaster-Analytics/upstream-python-sdk/blob/main/CHANGELOG.md"

[project.scripts]
upstream-cli = "upstream.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["upstream*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
upstream = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
exclude = "^upstream/ckan\\.py$"

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=upstream",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["upstream"]
branch = true
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/docs/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg",
]

[tool.pylint.messages_control]
disable = ["W0707", "W1203"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,lint,typing
isolated_build = true

[testenv]
deps =
    pytest
    pytest-cov
    pytest-mock
extras = dev
commands = pytest {posargs}

[testenv:lint]
deps =
    black
    flake8
commands =
    black --check --diff .
    flake8 .

[testenv:typing]
deps = mypy
commands = mypy upstream

[testenv:docs]
deps =
    sphinx
    sphinx-rtd-theme
commands = sphinx-build -b html docs docs/_build/html
"""