Metadata-Version: 2.4
Name: log-to-loki
Version: 0.1.0
Summary: Python library for sending logs to Grafana Loki with batching support
Home-page: https://github.com/yyunoshev/log-to-loki
Author: Yunoshev Yaroslav
Author-email: Yunoshev Yaroslav <yunoshev.dev@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/yyunoshev/log-to-loki
Project-URL: Bug Tracker, https://github.com/yyunoshev/log-to-loki/issues
Project-URL: Documentation, https://github.com/yyunoshev/log-to-loki#readme
Project-URL: Source Code, https://github.com/yyunoshev/log-to-loki
Keywords: logging,loki,grafana,observability,monitoring
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: System :: Logging
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: build; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Loki Logger

Python библиотека для отправки логов в Grafana Loki с поддержкой батчинга и автоматического определения вызывающей функции.

## Установка

```bash
pip install log-to-loki
```

## Быстрый старт

```python
from log_to_loki import LokiLogger

# Создание логгера
logger = LokiLogger(
    name='my-app',
    loki_url='http://localhost:3100',
    username='admin',
    password='admin',
    labels={'environment': 'production'}
)

# Использование
logger.info("Приложение запущено")
logger.error("Произошла ошибка")
```


## Возможности
✅ Батчинг логов для производительности
✅ Автоматическое определение вызывающей функции
✅ Поддержка консольного вывода
✅ Настраиваемые метки (labels)
✅ Многопоточная отправка логов
✅ Переиспользование HTTP соединений
