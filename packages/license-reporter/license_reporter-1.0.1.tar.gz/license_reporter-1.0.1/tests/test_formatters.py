"""
Tests for the formatters module.
"""

import json

import pytest

from license_reporter.formatters import (
    JSONFormatter,
    MarkdownFormatter,
    TextFormatter,
    get_formatter,
)


class TestTextFormatter:
    """Tests for TextFormatter class."""

    def test_format_basic(self, sample_report_data):
        """Test basic text formatting."""
        formatter = TextFormatter()
        output = formatter.format(sample_report_data)

        # Check that key information is present
        assert "THIRD-PARTY SOFTWARE LICENSES" in output
        assert "test-project" in output
        assert "requests" in output
        assert "click" in output
        assert "Apache Software License" in output
        assert "BSD License" in output

    def test_format_summary_section(self, sample_report_data):
        """Test that summary section is formatted correctly."""
        formatter = TextFormatter()
        output = formatter.format(sample_report_data)

        assert "SUMMARY:" in output
        assert "Total packages: 2" in output
        assert "Runtime packages: 2" in output
        assert "Packages requiring attribution: 2" in output

    def test_format_package_details(self, sample_report_data):
        """Test that package details are formatted correctly."""
        formatter = TextFormatter()
        output = formatter.format(sample_report_data)

        assert "PACKAGE DETAILS" in output
        assert "Package: requests" in output
        assert "Version: 2.28.1" in output
        assert "License: Apache Software License" in output
        assert "Requires Attribution: Yes" in output


class TestJSONFormatter:
    """Tests for JSONFormatter class."""

    def test_format_basic(self, sample_report_data):
        """Test basic JSON formatting."""
        formatter = JSONFormatter()
        output = formatter.format(sample_report_data)

        # Should be valid JSON
        parsed = json.loads(output)
        assert parsed == sample_report_data

    def test_format_indented(self, sample_report_data):
        """Test that JSON output is properly indented."""
        formatter = JSONFormatter()
        output = formatter.format(sample_report_data)

        # Should contain indentation
        assert "  " in output
        assert "\n" in output


class TestMarkdownFormatter:
    """Tests for MarkdownFormatter class."""

    def test_format_basic(self, sample_report_data):
        """Test basic Markdown formatting."""
        formatter = MarkdownFormatter()
        output = formatter.format(sample_report_data)

        # Check for Markdown headers
        assert "# Third-Party Software Licenses" in output
        assert "## Summary" in output
        assert "## Package Details" in output
        assert "## Detailed License Information" in output

    def test_format_project_info(self, sample_report_data):
        """Test that project information is formatted correctly."""
        formatter = MarkdownFormatter()
        output = formatter.format(sample_report_data)

        assert "**Project:** test-project" in output
        assert "**Project Path:** `/path/to/project`" in output
        assert "**Generated by:** Universal Python License Reporter" in output

    def test_format_summary_list(self, sample_report_data):
        """Test that summary is formatted as a list."""
        formatter = MarkdownFormatter()
        output = formatter.format(sample_report_data)

        assert "- **Total packages:** 2" in output
        assert "- **Runtime packages:** 2" in output
        assert "- **Packages requiring attribution:** 2" in output

    def test_format_package_table(self, sample_report_data):
        """Test that package table is formatted correctly."""
        formatter = MarkdownFormatter()
        output = formatter.format(sample_report_data)

        # Check for table headers
        assert "| Package | Version | Type | License | Attribution Required |" in output
        assert "|---------|---------|------|---------|---------------------|" in output

        # Check for table rows
        assert (
            "| requests | 2.28.1 | runtime | Apache Software License | Yes |" in output
        )
        assert "| click | 8.1.3 | runtime | BSD License | Yes |" in output

    def test_format_detailed_sections(self, sample_report_data):
        """Test that detailed package sections are formatted correctly."""
        formatter = MarkdownFormatter()
        output = formatter.format(sample_report_data)

        assert "### requests" in output
        assert "### click" in output
        assert "- **Version:** 2.28.1" in output
        assert "- **License:** Apache Software License" in output
        assert "- **Homepage:** https://requests.readthedocs.io" in output


class TestGetFormatter:
    """Tests for get_formatter function."""

    def test_get_text_formatter(self):
        """Test getting text formatter."""
        formatter = get_formatter("text")
        assert isinstance(formatter, TextFormatter)

    def test_get_json_formatter(self):
        """Test getting JSON formatter."""
        formatter = get_formatter("json")
        assert isinstance(formatter, JSONFormatter)

    def test_get_markdown_formatter(self):
        """Test getting Markdown formatter."""
        formatter = get_formatter("markdown")
        assert isinstance(formatter, MarkdownFormatter)

    def test_get_invalid_formatter(self):
        """Test getting invalid formatter raises error."""
        with pytest.raises(ValueError) as exc_info:
            get_formatter("invalid")

        assert "Unsupported format: invalid" in str(exc_info.value)
        assert "text" in str(exc_info.value)
        assert "json" in str(exc_info.value)
        assert "markdown" in str(exc_info.value)


class TestFormatterIntegration:
    """Integration tests for formatters."""

    def test_all_formatters_handle_empty_packages(self):
        """Test that all formatters handle reports with no packages."""
        empty_report = {
            "project": "empty-project",
            "project_path": "/path/to/project",
            "generated_by": "Universal Python License Reporter",
            "report_type": "Runtime Dependencies",
            "dependency_files": [],
            "packages": [],
            "summary": {
                "total_packages": 0,
                "runtime_packages": 0,
                "dev_packages": 0,
                "optional_packages": 0,
                "requires_attribution": 0,
                "unknown_licenses": 0,
            },
            "excluded_build_tools": [],
            "filters_applied": {
                "include_dev": False,
                "include_optional": False,
                "runtime_only": False,
                "exclude_patterns": [],
            },
        }

        # All formatters should handle empty reports without errors
        text_formatter = TextFormatter()
        json_formatter = JSONFormatter()
        markdown_formatter = MarkdownFormatter()

        text_output = text_formatter.format(empty_report)
        json_output = json_formatter.format(empty_report)
        markdown_output = markdown_formatter.format(empty_report)

        assert "empty-project" in text_output
        assert "empty-project" in json_output
        assert "empty-project" in markdown_output

        # JSON should be valid
        parsed_json = json.loads(json_output)
        assert parsed_json["project"] == "empty-project"

    def test_formatters_handle_missing_optional_fields(self):
        """Test that formatters handle missing optional fields gracefully."""
        minimal_report = {
            "project": "minimal-project",
            "project_path": "/path/to/project",
            "generated_by": "Universal Python License Reporter",
            "report_type": "Runtime Dependencies",
            "packages": [
                {
                    "name": "requests",
                    "version": "2.28.1",
                    "license": "Apache Software License",
                    "author": "Kenneth Reitz",
                    "homepage": "unknown",
                    "requires_attribution": True,
                }
            ],
            "summary": {
                "total_packages": 1,
                "requires_attribution": 1,
                "unknown_licenses": 0,
            },
        }

        # All formatters should handle minimal reports
        text_formatter = TextFormatter()
        json_formatter = JSONFormatter()
        markdown_formatter = MarkdownFormatter()

        text_output = text_formatter.format(minimal_report)
        json_output = json_formatter.format(minimal_report)
        markdown_output = markdown_formatter.format(minimal_report)

        # Should not raise errors
        assert "requests" in text_output
        assert "requests" in json_output
        assert "requests" in markdown_output
