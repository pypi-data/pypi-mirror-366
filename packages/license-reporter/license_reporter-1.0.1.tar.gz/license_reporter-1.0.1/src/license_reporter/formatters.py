"""
Output formatters for license reports.

This module provides different formatters for license reports including
text, JSON, and Markdown formats.
"""

import json
from typing import Dict


class BaseFormatter:
    """
    Base class for report formatters.

    This abstract base class defines the interface for all report formatters.
    Subclasses must implement the format method to convert report dictionaries
    into their specific output format.
    """

    def format(self, report: Dict) -> str:
        """Format a report dictionary.

        Args:
            report: Report dictionary containing license information

        Returns:
            Formatted report string

        Raises:
            NotImplementedError: If called on the base class
        """
        raise NotImplementedError("Subclasses must implement format method")


class TextFormatter(BaseFormatter):
    """
    Format reports as human-readable text.

    This formatter produces a structured text report suitable for console output
    or text files. The output includes project information, summary statistics,
    and detailed package information in a readable format.

    Example output:
        ================================================================================
        THIRD-PARTY SOFTWARE LICENSES
        ================================================================================

        Project: my-project
        ...
    """

    def format(self, report: Dict) -> str:
        """Format report as human-readable text.

        Args:
            report: Report dictionary containing license information

        Returns:
            Text-formatted report with headers, summaries, and package details
        """
        lines = []
        lines.append("=" * 80)
        lines.append("THIRD-PARTY SOFTWARE LICENSES")
        lines.append("=" * 80)
        lines.append("")
        lines.append(f"Project: {report['project']}")
        lines.append(f"Project Path: {report['project_path']}")
        lines.append(f"Generated by: {report['generated_by']}")
        lines.append(f"Report Type: {report['report_type']}")
        lines.append("")

        # Dependency files analyzed
        if report.get("dependency_files"):
            lines.append("DEPENDENCY FILES ANALYZED:")
            for file_path in report["dependency_files"]:
                lines.append(f"  - {file_path}")
            lines.append("")

        # Summary statistics
        summary = report["summary"]
        lines.append("SUMMARY:")
        lines.append(f"  Total packages: {summary['total_packages']}")
        if summary.get("runtime_packages", 0) > 0:
            lines.append(f"  Runtime packages: {summary['runtime_packages']}")
        if summary.get("dev_packages", 0) > 0:
            lines.append(f"  Development packages: {summary['dev_packages']}")
        if summary.get("optional_packages", 0) > 0:
            lines.append(f"  Optional packages: {summary['optional_packages']}")
        lines.append(
            f"  Packages requiring attribution: {summary['requires_attribution']}"
        )
        lines.append(f"  Packages with unknown licenses: {summary['unknown_licenses']}")
        lines.append("")

        # Filters applied
        filters = report.get("filters_applied", {})
        if any(filters.values()):
            lines.append("FILTERS APPLIED:")
            if filters.get("runtime_only"):
                lines.append(
                    "  - Runtime dependencies only (PyInstaller compliance mode)"
                )
            if filters.get("include_dev"):
                lines.append("  - Development dependencies included")
            if filters.get("include_optional"):
                lines.append("  - Optional dependencies included")
            if filters.get("exclude_patterns"):
                lines.append(
                    f"  - Excluded patterns: {', '.join(filters['exclude_patterns'])}"
                )
            lines.append("")

        # Excluded build tools
        if report.get("excluded_build_tools"):
            lines.append("EXCLUDED BUILD-TIME DEPENDENCIES:")
            lines.append("The following build tools are excluded as they are not")
            lines.append("distributed with the PyInstaller executable:")
            excluded = ", ".join(sorted(report["excluded_build_tools"]))
            lines.append(f"{excluded}")
            lines.append("")

        lines.append("=" * 80)
        lines.append("PACKAGE DETAILS")
        lines.append("=" * 80)
        lines.append("")

        for package in report["packages"]:
            lines.append(f"Package: {package['name']}")
            lines.append(f"Version: {package['version']}")
            if package.get("version_spec"):
                lines.append(f"Version Spec: {package['version_spec']}")
            lines.append(
                f"Dependency Type: {package.get('dependency_type', 'unknown')}"
            )
            lines.append(f"License: {package['license']}")
            lines.append(f"Author: {package['author']}")
            lines.append(f"Homepage: {package['homepage']}")
            lines.append(
                f"Requires Attribution: {'Yes' if package['requires_attribution'] else 'No'}"
            )
            lines.append("-" * 40)
            lines.append("")

        return "\n".join(lines)


class JSONFormatter(BaseFormatter):
    """Format reports as JSON."""

    def format(self, report: Dict) -> str:
        """Format report as JSON.

        Args:
            report: Report dictionary to format

        Returns:
            JSON-formatted report
        """
        return json.dumps(report, indent=2)


class MarkdownFormatter(BaseFormatter):
    """Format reports as Markdown."""

    def format(self, report: Dict) -> str:
        """Format report as Markdown.

        Args:
            report: Report dictionary to format

        Returns:
            Markdown-formatted report
        """
        lines = []
        lines.append("# Third-Party Software Licenses")
        lines.append("")
        lines.append(f"**Project:** {report['project']}")
        lines.append(f"**Project Path:** `{report['project_path']}`")
        lines.append(f"**Generated by:** {report['generated_by']}")
        lines.append(f"**Report Type:** {report['report_type']}")
        lines.append("")

        # Summary
        summary = report["summary"]
        lines.append("## Summary")
        lines.append("")
        lines.append(f"- **Total packages:** {summary['total_packages']}")
        if summary.get("runtime_packages", 0) > 0:
            lines.append(f"- **Runtime packages:** {summary['runtime_packages']}")
        if summary.get("dev_packages", 0) > 0:
            lines.append(f"- **Development packages:** {summary['dev_packages']}")
        if summary.get("optional_packages", 0) > 0:
            lines.append(f"- **Optional packages:** {summary['optional_packages']}")
        lines.append(
            f"- **Packages requiring attribution:** {summary['requires_attribution']}"
        )
        lines.append(
            f"- **Packages with unknown licenses:** {summary['unknown_licenses']}"
        )
        lines.append("")

        # Dependency files
        if report.get("dependency_files"):
            lines.append("## Dependency Files Analyzed")
            lines.append("")
            for file_path in report["dependency_files"]:
                lines.append(f"- `{file_path}`")
            lines.append("")

        # Package details table
        lines.append("## Package Details")
        lines.append("")
        lines.append("| Package | Version | Type | License | Attribution Required |")
        lines.append("|---------|---------|------|---------|---------------------|")

        for package in report["packages"]:
            name = package["name"]
            version = package["version"]
            dep_type = package.get("dependency_type", "unknown")
            license_info = package["license"]
            attribution = "Yes" if package["requires_attribution"] else "No"

            lines.append(
                f"| {name} | {version} | {dep_type} | {license_info} | {attribution} |"
            )

        lines.append("")

        # Detailed license information
        lines.append("## Detailed License Information")
        lines.append("")

        for package in report["packages"]:
            lines.append(f"### {package['name']}")
            lines.append("")
            lines.append(f"- **Version:** {package['version']}")
            if package.get("version_spec"):
                lines.append(
                    f"- **Version Specification:** `{package['version_spec']}`"
                )
            lines.append(
                f"- **Dependency Type:** {package.get('dependency_type', 'unknown')}"
            )
            lines.append(f"- **License:** {package['license']}")
            lines.append(f"- **Author:** {package['author']}")
            if package["homepage"] != "unknown":
                lines.append(f"- **Homepage:** {package['homepage']}")
            lines.append(
                f"- **Requires Attribution:** {'Yes' if package['requires_attribution'] else 'No'}"
            )
            lines.append("")

        return "\n".join(lines)


def get_formatter(format_type: str) -> BaseFormatter:
    """Get a formatter instance for the specified format.

    Args:
        format_type: Type of formatter ('text', 'json', 'markdown')

    Returns:
        Formatter instance

    Raises:
        ValueError: If format_type is not supported
    """
    formatters = {
        "text": TextFormatter,
        "json": JSONFormatter,
        "markdown": MarkdownFormatter,
    }

    if format_type not in formatters:
        raise ValueError(
            f"Unsupported format: {format_type}. Supported formats: {list(formatters.keys())}"
        )

    return formatters[format_type]()
