# This file has been auto-generated by setup.py.
import os
import sys
import logging
from typing import Dict, TYPE_CHECKING
from visiongraph.model._LazyImport import _LazyImport

LOGLEVEL = os.environ.get("VISIONGRAPH_LOGLEVEL", "WARNING").upper()
logging.basicConfig(level=LOGLEVEL)

if TYPE_CHECKING:
    from visiongraph.AsyncGraphNode import AsyncGraphNode  # noqa
    from visiongraph.BaseGraph import BaseGraph  # noqa
    from visiongraph.GraphNode import GraphNode  # noqa
    from visiongraph.Processable import Processable  # noqa
    from visiongraph.VisionGraph import VisionGraph  # noqa
    from visiongraph.VisionGraphBuilder import add_breakpoint  # noqa
    from visiongraph.VisionGraphBuilder import create_graph  # noqa
    from visiongraph.VisionGraphBuilder import custom  # noqa
    from visiongraph.VisionGraphBuilder import extract  # noqa
    from visiongraph.VisionGraphBuilder import passthrough  # noqa
    from visiongraph.VisionGraphBuilder import sequence  # noqa
    from visiongraph.data.Asset import Asset  # noqa
    from visiongraph.data.LocalAsset import LocalAsset  # noqa
    from visiongraph.data.RepositoryAsset import RepositoryAsset  # noqa
    from visiongraph.dsp.BaseFilterNumpy import BaseFilterNumpy  # noqa
    from visiongraph.dsp.LandmarkSmoothFilter import LandmarkSmoothFilter  # noqa
    from visiongraph.dsp.OneEuroFilter import OneEuroFilter  # noqa
    from visiongraph.dsp.OneEuroFilterNumpy import OneEuroFilterNumpy  # noqa
    from visiongraph.dsp.VectorNumpySmoothFilter import VectorNumpySmoothFilter  # noqa
    from visiongraph.estimator.BaseClassifier import BaseClassifier  # noqa
    from visiongraph.estimator.BaseEstimator import BaseEstimator  # noqa
    from visiongraph.estimator.BaseVisionEngine import BaseVisionEngine  # noqa
    from visiongraph.estimator.ChainEstimator import ChainEstimator  # noqa
    from visiongraph.estimator.ScoreThresholdEstimator import ScoreThresholdEstimator  # noqa
    from visiongraph.estimator.VisionClassifier import VisionClassifier  # noqa
    from visiongraph.estimator.VisionEstimator import VisionEstimator  # noqa
    from visiongraph.estimator.calculator.UndistortionCalculator import UndistortionCalculator  # noqa
    from visiongraph.estimator.embedding.LandmarkEmbedder import LandmarkEmbedder  # noqa
    from visiongraph.estimator.embedding.knn.BaseKNNClassifier import BaseKNNClassifier  # noqa
    try:
        from visiongraph.estimator.embedding.knn.FaissKNNClassifier import FaissKNNClassifier
    except ModuleNotFoundError as ex:
        logging.info(f"Module FaissKNNClassifier not found")
    from visiongraph.estimator.engine.InferenceEngineFactory import InferenceEngine  # noqa
    from visiongraph.estimator.engine.InferenceEngineFactory import InferenceEngineFactory  # noqa
    from visiongraph.estimator.inpaint.BaseInpainter import BaseInpainter  # noqa
    try:
        from visiongraph.estimator.inpaint.GMCNNInpainter import GMCNNConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module GMCNNConfig not found")
    try:
        from visiongraph.estimator.inpaint.GMCNNInpainter import GMCNNInpainter
    except ModuleNotFoundError as ex:
        logging.info(f"Module GMCNNInpainter not found")
    try:
        from visiongraph.estimator.onnx.ONNXVisionEngine import ONNXVisionEngine
    except ModuleNotFoundError as ex:
        logging.info(f"Module ONNXVisionEngine not found")
    try:
        from visiongraph.estimator.openvino.OpenVinoEngine import OpenVinoEngine
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenVinoEngine not found")
    from visiongraph.estimator.openvino.OpenVinoObjectDetector import OpenVinoObjectDetector  # noqa
    from visiongraph.estimator.openvino.SyncInferencePipeline import SyncInferencePipeline  # noqa
    try:
        from visiongraph.estimator.spatial.CenterNetDetector import CenterNetConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module CenterNetConfig not found")
    try:
        from visiongraph.estimator.spatial.CenterNetDetector import CenterNetDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module CenterNetDetector not found")
    from visiongraph.estimator.spatial.CrowdHumanDetector import CrowdHumanConfig  # noqa
    from visiongraph.estimator.spatial.CrowdHumanDetector import CrowdHumanDetector  # noqa
    try:
        from visiongraph.estimator.spatial.DETRDetector import DETRConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module DETRConfig not found")
    try:
        from visiongraph.estimator.spatial.DETRDetector import DETRDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module DETRDetector not found")
    from visiongraph.estimator.spatial.InstanceSegmentationEstimator import InstanceSegmentationEstimator  # noqa
    from visiongraph.estimator.spatial.LandmarkEstimator import LandmarkEstimator  # noqa
    from visiongraph.estimator.spatial.ObjectDetector import ObjectDetector  # noqa
    from visiongraph.estimator.spatial.RoiEstimator import RoiEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.SSDDetector import SSDConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module SSDConfig not found")
    try:
        from visiongraph.estimator.spatial.SSDDetector import SSDDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module SSDDetector not found")
    from visiongraph.estimator.spatial.SlidingWindowEstimator import SlidingWindowEstimator  # noqa
    from visiongraph.estimator.spatial.SpatialCascadeEstimator import SpatialCascadeEstimator  # noqa
    from visiongraph.estimator.spatial.UltralyticsYOLODetector import UltralyticsYOLODetector  # noqa
    try:
        from visiongraph.estimator.spatial.YOLODetector import YOLOArchitecture
    except ModuleNotFoundError as ex:
        logging.info(f"Module YOLOArchitecture not found")
    try:
        from visiongraph.estimator.spatial.YOLODetector import YOLOConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module YOLOConfig not found")
    try:
        from visiongraph.estimator.spatial.YOLODetector import YOLODetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module YOLODetector not found")
    from visiongraph.estimator.spatial.YOLOXE2EDetector import YOLOXE2EDetector  # noqa
    from visiongraph.estimator.spatial.YOLOv5Detector import YOLOv5Config  # noqa
    from visiongraph.estimator.spatial.YOLOv5Detector import YOLOv5Detector  # noqa
    from visiongraph.estimator.spatial.YOLOv8Detector import YOLOv8Config  # noqa
    from visiongraph.estimator.spatial.YOLOv8Detector import YOLOv8Detector  # noqa
    from visiongraph.estimator.spatial.YOLOv8OBBDetector import YOLOv8OBBConfig  # noqa
    from visiongraph.estimator.spatial.YOLOv8OBBDetector import YOLOv8OBBDetector  # noqa
    try:
        from visiongraph.estimator.spatial.camera.ArUcoCameraPoseEstimator import ArUcoCameraPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module ArUcoCameraPoseEstimator not found")
    from visiongraph.estimator.spatial.camera.BoardCameraCalibrator import BoardCameraCalibrator  # noqa
    try:
        from visiongraph.estimator.spatial.camera.ChArUcoCalibrator import ChArUcoCalibrator
    except ModuleNotFoundError as ex:
        logging.info(f"Module ChArUcoCalibrator not found")
    from visiongraph.estimator.spatial.camera.ChessboardCalibrator import ChessboardCalibrator  # noqa
    try:
        from visiongraph.estimator.spatial.face.AdasFaceDetector import AdasFaceConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module AdasFaceConfig not found")
    try:
        from visiongraph.estimator.spatial.face.AdasFaceDetector import AdasFaceDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module AdasFaceDetector not found")
    from visiongraph.estimator.spatial.face.FaceDetector import FaceDetector  # noqa
    try:
        from visiongraph.estimator.spatial.face.OpenVinoFaceDetector import OpenVinoFaceConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenVinoFaceConfig not found")
    try:
        from visiongraph.estimator.spatial.face.OpenVinoFaceDetector import OpenVinoFaceDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenVinoFaceDetector not found")
    try:
        from visiongraph.estimator.spatial.face.emotion.AffectNetEmotionClassifier import AffectNetEmotionClassifier
    except ModuleNotFoundError as ex:
        logging.info(f"Module AffectNetEmotionClassifier not found")
    from visiongraph.estimator.spatial.face.emotion.FERPlusEmotionClassifier import FERPlusEmotionClassifier  # noqa
    from visiongraph.estimator.spatial.face.emotion.FaceEmotionEstimator import FaceEmotionEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.face.eye.EyeOpenClosedEstimator import EyeOpenClosedEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module EyeOpenClosedEstimator not found")
    from visiongraph.estimator.spatial.face.landmark.FaceLandmarkEstimator import FaceLandmarkEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.face.landmark.IrisDistanceCalculator import IrisDistanceCalculator
    except ModuleNotFoundError as ex:
        logging.info(f"Module IrisDistanceCalculator not found")
    try:
        from visiongraph.estimator.spatial.face.landmark.MediaPipeFaceDetector import MediaPipeFaceDetector
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeFaceDetector not found")
    try:
        from visiongraph.estimator.spatial.face.landmark.MediaPipeFaceDetector import MediaPipeFaceModel
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeFaceModel not found")
    try:
        from visiongraph.estimator.spatial.face.landmark.RegressionLandmarkEstimator import RegressionLandmarkEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module RegressionLandmarkEstimator not found")
    try:
        from visiongraph.estimator.spatial.face.pose.AdasHeadPoseEstimator import AdasHeadPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module AdasHeadPoseEstimator not found")
    from visiongraph.estimator.spatial.face.pose.HeadPoseEstimator import HeadPoseEstimator  # noqa
    from visiongraph.estimator.spatial.face.recognition.FaceRecognitionEstimator import FaceRecognitionEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.face.recognition.FaceReidentificationEstimator import FaceReidentificationConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module FaceReidentificationConfig not found")
    try:
        from visiongraph.estimator.spatial.face.recognition.FaceReidentificationEstimator import FaceReidentificationEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module FaceReidentificationEstimator not found")
    try:
        from visiongraph.estimator.spatial.face.vad.VivaVAD import VivaVAD
    except ModuleNotFoundError as ex:
        logging.info(f"Module VivaVAD not found")
    try:
        from visiongraph.estimator.spatial.face.vad.VivaVAD import VivaVADConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module VivaVADConfig not found")
    from visiongraph.estimator.spatial.hand.HandDetector import HandDetector  # noqa
    from visiongraph.estimator.spatial.hand.landmark.HandLandmarkEstimator import HandLandmarkEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.hand.landmark.MediaPipeHandEstimator import HandModelComplexity
    except ModuleNotFoundError as ex:
        logging.info(f"Module HandModelComplexity not found")
    try:
        from visiongraph.estimator.spatial.hand.landmark.MediaPipeHandEstimator import MediaPipeHandEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeHandEstimator not found")
    try:
        from visiongraph.estimator.spatial.hand.landmark.OpenPoseHandEstimator import OpenPoseHandEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenPoseHandEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.AEPoseEstimator import AEPoseConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module AEPoseConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.AEPoseEstimator import AEPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module AEPoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.EfficientPoseEstimator import EfficientPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module EfficientPoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.EfficientPoseEstimator import EfficientPoseEstimatorConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module EfficientPoseEstimatorConfig not found")
    from visiongraph.estimator.spatial.pose.KAPAOPoseEstimator import KAPAOPoseConfig  # noqa
    from visiongraph.estimator.spatial.pose.KAPAOPoseEstimator import KAPAOPoseEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.pose.LiteHRNetEstimator import LiteHRNetConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module LiteHRNetConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.LiteHRNetEstimator import LiteHRNetPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module LiteHRNetPoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.LitePoseEstimator import LitePoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module LitePoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.LitePoseEstimator import LitePoseEstimatorConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module LitePoseEstimatorConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.MediaPipeHolisticEstimator import MediaPipeHolisticEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeHolisticEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.MediaPipePoseEstimator import MediaPipePoseConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipePoseConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.MediaPipePoseEstimator import MediaPipePoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipePoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.MediaPipePoseEstimatorLegacy import MediaPipePoseEstimatorLegacy
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipePoseEstimatorLegacy not found")
    try:
        from visiongraph.estimator.spatial.pose.MobileHumanPoseEstimator import MobileHumanPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MobileHumanPoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.MobileNetV2PoseEstimator import MobileNetV2PoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MobileNetV2PoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.MobileNetV2PoseEstimator import MobileNetV2PoseEstimatorConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module MobileNetV2PoseEstimatorConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.MoveNetPoseEstimator import MoveNetConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module MoveNetConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.MoveNetPoseEstimator import MoveNetPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MoveNetPoseEstimator not found")
    try:
        from visiongraph.estimator.spatial.pose.OpenPoseEstimator import OpenPoseConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenPoseConfig not found")
    try:
        from visiongraph.estimator.spatial.pose.OpenPoseEstimator import OpenPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenPoseEstimator not found")
    from visiongraph.estimator.spatial.pose.PoseEstimator import PoseEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.pose.TopDownPoseEstimator import TopDownPoseEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module TopDownPoseEstimator not found")
    from visiongraph.estimator.spatial.pose.UltralyticsPoseEstimator import UltralyticsPoseConfig  # noqa
    from visiongraph.estimator.spatial.pose.UltralyticsPoseEstimator import UltralyticsPoseEstimator  # noqa
    from visiongraph.estimator.spatial.pose.__init__ import add_pose_estimation_step_choices  # noqa
    from visiongraph.estimator.spatial.segmentation.MODNetEstimator import ModNetConfig  # noqa
    from visiongraph.estimator.spatial.segmentation.MODNetEstimator import ModNetEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.segmentation.MaskRCNNEstimator import MaskRCNNConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module MaskRCNNConfig not found")
    try:
        from visiongraph.estimator.spatial.segmentation.MaskRCNNEstimator import MaskRCNNEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MaskRCNNEstimator not found")
    try:
        from visiongraph.estimator.spatial.segmentation.MediaPipeSelfieSegmentation import MediaPipeSelfieSegmentation
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeSelfieSegmentation not found")
    try:
        from visiongraph.estimator.spatial.segmentation.MediaPipeSelfieSegmentation import SelfieSegmentationModel
    except ModuleNotFoundError as ex:
        logging.info(f"Module SelfieSegmentationModel not found")
    from visiongraph.estimator.spatial.segmentation.YOLOv8SegmentationEstimator import YOLOv8SegmentationConfig  # noqa
    from visiongraph.estimator.spatial.segmentation.YOLOv8SegmentationEstimator import YOLOv8SegmentationEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.segmentation.YolactEstimator import YolactConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module YolactConfig not found")
    try:
        from visiongraph.estimator.spatial.segmentation.YolactEstimator import YolcatEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module YolcatEstimator not found")
    try:
        from visiongraph.estimator.translation.DeblurGANv2 import DeblurGANv2
    except ModuleNotFoundError as ex:
        logging.info(f"Module DeblurGANv2 not found")
    try:
        from visiongraph.estimator.translation.DeblurGANv2 import DeblurGANv2Config
    except ModuleNotFoundError as ex:
        logging.info(f"Module DeblurGANv2Config not found")
    from visiongraph.estimator.translation.DepthEstimator import DepthEstimator  # noqa
    from visiongraph.estimator.translation.MBLLENEstimator import MBLLENConfig  # noqa
    from visiongraph.estimator.translation.MBLLENEstimator import MBLLENEstimator  # noqa
    try:
        from visiongraph.estimator.translation.MidasDepthEstimator import MidasConfig
    except ModuleNotFoundError as ex:
        logging.info(f"Module MidasConfig not found")
    try:
        from visiongraph.estimator.translation.MidasDepthEstimator import MidasDepthEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MidasDepthEstimator not found")
    try:
        from visiongraph.input.AzureKinectInput import AzureKinectInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module AzureKinectInput not found")
    from visiongraph.input.BaseCamera import BaseCamera  # noqa
    from visiongraph.input.BaseDepthCamera import BaseDepthCamera  # noqa
    from visiongraph.input.BaseDepthInput import BaseDepthInput  # noqa
    from visiongraph.input.BaseInput import BaseInput  # noqa
    try:
        from visiongraph.input.CamGearInput import CamGearInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module CamGearInput not found")
    try:
        from visiongraph.input.DepthAIBaseInput import DepthAIBaseInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module DepthAIBaseInput not found")
    from visiongraph.input.ImageInput import ImageInput  # noqa
    try:
        from visiongraph.input.Oak1Input import Oak1Input
    except ModuleNotFoundError as ex:
        logging.info(f"Module Oak1Input not found")
    try:
        from visiongraph.input.OakDInput import OakDFrameAlignment
    except ModuleNotFoundError as ex:
        logging.info(f"Module OakDFrameAlignment not found")
    try:
        from visiongraph.input.OakDInput import OakDInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module OakDInput not found")
    try:
        from visiongraph.input.RealSenseInput import RealSenseInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module RealSenseInput not found")
    from visiongraph.input.VideoCaptureInput import VideoCaptureInput  # noqa
    try:
        from visiongraph.input.ZEDInput import ZEDCapture
    except ModuleNotFoundError as ex:
        logging.info(f"Module ZEDCapture not found")
    try:
        from visiongraph.input.ZEDInput import ZEDInput
    except ModuleNotFoundError as ex:
        logging.info(f"Module ZEDInput not found")
    from visiongraph.model.CameraIntrinsics import CameraIntrinsics  # noqa
    from visiongraph.model.CameraStreamType import CameraStreamType  # noqa
    from visiongraph.model.DepthBuffer import DepthBuffer  # noqa
    from visiongraph.model.RollingBufferNumpy import RollingBufferNumpy  # noqa
    from visiongraph.model.VisionEngineModelLayer import VisionEngineModelLayer  # noqa
    from visiongraph.model.VisionEngineOutput import VisionEngineOutput  # noqa
    from visiongraph.model.geometry.BoundingBox2D import BoundingBox2D  # noqa
    from visiongraph.model.geometry.Size2D import Size2D  # noqa
    from visiongraph.model.parameter.ArgumentConfigurable import ArgumentConfigurable  # noqa
    from visiongraph.model.tracker.Trackable import Trackable  # noqa
    from visiongraph.model.types.InputShapeOrder import InputShapeOrder  # noqa
    from visiongraph.model.types.MediaPipePoseModelComplexity import PoseModelComplexity  # noqa
    from visiongraph.model.types.ModelPrecision import ModelPrecision  # noqa
    from visiongraph.model.types.RealSenseColorScheme import RealSenseColorScheme  # noqa
    from visiongraph.node.ApplyNode import ApplyNode  # noqa
    from visiongraph.node.BreakpointNode import BreakpointNode  # noqa
    from visiongraph.node.CustomNode import CustomNode  # noqa
    from visiongraph.node.ExtractNode import ExtractNode  # noqa
    from visiongraph.node.PassThroughNode import PassThroughNode  # noqa
    from visiongraph.node.SequenceNode import SequenceNode  # noqa
    from visiongraph.output.ImagePreview import ImagePreview  # noqa
    from visiongraph.output.fbs.FrameBufferSharingServer import FrameBufferSharingServer  # noqa
    try:
        from visiongraph.output.fbs.SpoutServer import SpoutServer
    except ModuleNotFoundError as ex:
        logging.info(f"Module SpoutServer not found")
    try:
        from visiongraph.output.fbs.SyphonServer import SyphonServer
    except ModuleNotFoundError as ex:
        logging.info(f"Module SyphonServer not found")
    from visiongraph.recorder.AsyncFrameSetRecorder import AsyncFrameSetRecorder  # noqa
    from visiongraph.recorder.BaseFrameRecorder import BaseFrameRecorder  # noqa
    from visiongraph.recorder.CV2VideoRecorder import CV2VideoRecorder  # noqa
    from visiongraph.recorder.FrameSetRecorder import FrameSetRecorder  # noqa
    try:
        from visiongraph.recorder.MoviePyVideoRecorder import MoviePyVideoRecorder
    except ModuleNotFoundError as ex:
        logging.info(f"Module MoviePyVideoRecorder not found")
    try:
        from visiongraph.recorder.VidGearVideoRecorder import VidGearVideoRecorder
    except ModuleNotFoundError as ex:
        logging.info(f"Module VidGearVideoRecorder not found")
    from visiongraph.result.ArUcoCameraPose import ArUcoCameraPose  # noqa
    from visiongraph.result.ArUcoMarkerDetection import ArUcoMarkerDetection  # noqa
    from visiongraph.result.BaseResult import BaseResult  # noqa
    from visiongraph.result.CameraPoseResult import CameraPoseResult  # noqa
    from visiongraph.result.ClassificationResult import ClassificationResult  # noqa
    from visiongraph.result.DepthMap import DepthMap  # noqa
    from visiongraph.result.EmbeddingResult import EmbeddingResult  # noqa
    from visiongraph.result.HeadPoseResult import HeadPoseResult  # noqa
    from visiongraph.result.ImageResult import ImageResult  # noqa
    from visiongraph.result.LandmarkEmbeddingResult import LandmarkEmbeddingResult  # noqa
    from visiongraph.result.ResultAnnotator import ResultAnnotator  # noqa
    from visiongraph.result.ResultDict import ResultDict  # noqa
    from visiongraph.result.ResultList import ResultList  # noqa
    from visiongraph.result.spatial.CrowdHumanResult import CrowdHumanResult  # noqa
    from visiongraph.result.spatial.InstanceSegmentationResult import InstanceSegmentationResult  # noqa
    from visiongraph.result.spatial.LandmarkDetectionResult import LandmarkDetectionResult  # noqa
    from visiongraph.result.spatial.ObjectDetectionResult import ObjectDetectionResult  # noqa
    from visiongraph.result.spatial.OrientedObjectDetectionResult import OrientedObjectDetectionResult  # noqa
    from visiongraph.result.spatial.SpatialCascadeResult import SpatialCascadeResult  # noqa
    from visiongraph.result.spatial.face.BlazeFace import BlazeFace  # noqa
    try:
        from visiongraph.result.spatial.face.BlazeFaceMesh import BlazeFaceMesh
    except ModuleNotFoundError as ex:
        logging.info(f"Module BlazeFaceMesh not found")
    from visiongraph.result.spatial.face.BlendShape import BlendShape  # noqa
    from visiongraph.result.spatial.face.EmotionClassificationResult import EmotionClassificationResult  # noqa
    from visiongraph.result.spatial.face.EyeOpenClosedResult import EyeOpenClosedResult  # noqa
    from visiongraph.result.spatial.face.FaceDetectionResult import FaceDetectionResult  # noqa
    from visiongraph.result.spatial.face.FaceLandmarkResult import FaceLandmarkResult  # noqa
    from visiongraph.result.spatial.face.IrisDistanceResult import IrisDistanceResult  # noqa
    from visiongraph.result.spatial.face.IrisDistanceResult import IrisParameter  # noqa
    from visiongraph.result.spatial.face.RegressionFace import RegressionFace  # noqa
    from visiongraph.result.spatial.face.VivaVADResult import VivaVADResult  # noqa
    try:
        from visiongraph.result.spatial.hand.BlazeHand import BlazeHand
    except ModuleNotFoundError as ex:
        logging.info(f"Module BlazeHand not found")
    from visiongraph.result.spatial.hand.HandDetectionResult import HandDetectionResult  # noqa
    from visiongraph.result.spatial.hand.HandLandmarkResult import HandLandmarkResult  # noqa
    from visiongraph.result.spatial.hand.Handedness import Handedness  # noqa
    try:
        from visiongraph.result.spatial.hand.OpenPoseHand import OpenPoseHand
    except ModuleNotFoundError as ex:
        logging.info(f"Module OpenPoseHand not found")
    try:
        from visiongraph.result.spatial.pose.BlazePose import BlazePose
    except ModuleNotFoundError as ex:
        logging.info(f"Module BlazePose not found")
    try:
        from visiongraph.result.spatial.pose.BlazePoseSegmentation import BlazePoseSegmentation
    except ModuleNotFoundError as ex:
        logging.info(f"Module BlazePoseSegmentation not found")
    from visiongraph.result.spatial.pose.COCOOpenPose import COCOOpenPose  # noqa
    from visiongraph.result.spatial.pose.COCOPose import COCOPose  # noqa
    from visiongraph.result.spatial.pose.EfficientPose import EfficientPose  # noqa
    try:
        from visiongraph.result.spatial.pose.HolisticPose import HolisticPose
    except ModuleNotFoundError as ex:
        logging.info(f"Module HolisticPose not found")
    from visiongraph.result.spatial.pose.MobileHumanPose import MobileHumanPose  # noqa
    from visiongraph.result.spatial.pose.PoseLandmarkResult import PoseLandmarkResult  # noqa
    from visiongraph.tracker.BaseObjectDetectionTracker import BaseObjectDetectionTracker  # noqa
    from visiongraph.tracker.CentroidTracker import CentroidTracker  # noqa
    from visiongraph.tracker.FlateTracker import FlateTracker  # noqa
    from visiongraph.tracker.MotpyTracker import MotpyTracker  # noqa
    from visiongraph.tracker.ObjectAssignmentSolver import ObjectAssignmentResult  # noqa
    from visiongraph.tracker.ObjectAssignmentSolver import ObjectAssignmentSolver  # noqa
    from visiongraph.tracker.storage.SimpleTrackingStorage import SimpleTrackingStorage  # noqa
    from visiongraph.tracker.storage.SimpleTrackingStorage import Trackable  # noqa
    from visiongraph.tracker.storage.TrackingStorage import TrackingStorage  # noqa
    from visiongraph.util.ArgUtils import PipelineNodeFactory  # noqa
    from visiongraph.util.ArgUtils import add_dict_choice_argument  # noqa
    from visiongraph.util.ArgUtils import add_enum_choice_argument  # noqa
    from visiongraph.util.ArgUtils import add_step_choice_argument  # noqa
    from visiongraph.util.ArgUtils import dict_choice  # noqa
    from visiongraph.util.ArgUtils import float_range  # noqa
    from visiongraph.util.CodeUtils import deprecated  # noqa
    from visiongraph.util.CollectionUtils import default_value_dict  # noqa
    from visiongraph.util.CommonArgs import add_source_argument  # noqa
    from visiongraph.util.DrawingUtils import draw_axis  # noqa
    from visiongraph.util.DrawingUtils import draw_bbox  # noqa
    from visiongraph.util.DrawingUtils import draw_landmark  # noqa
    from visiongraph.util.DrawingUtils import draw_text  # noqa
    from visiongraph.util.DrawingUtils import draw_text_normalized  # noqa
    from visiongraph.util.ImageUtils import align_image  # noqa
    from visiongraph.util.ImageUtils import apply_mask  # noqa
    from visiongraph.util.ImageUtils import extract_roi_safe  # noqa
    from visiongraph.util.ImageUtils import resize_and_letter_box  # noqa
    from visiongraph.util.ImageUtils import resize_and_pad  # noqa
    from visiongraph.util.ImageUtils import roi  # noqa
    from visiongraph.util.ImageUtils import roi_safe  # noqa
    from visiongraph.util.LinalgUtils import project_pixel_to_point  # noqa
    from visiongraph.util.LinalgUtils import project_pixels_to_points  # noqa
    from visiongraph.util.LinalgUtils import project_point_to_pixel  # noqa
    from visiongraph.util.LinalgUtils import project_points_to_pixels  # noqa
    from visiongraph.util.LoggingUtils import add_logging_parameter  # noqa
    from visiongraph.util.LoggingUtils import setup_logging  # noqa
    from visiongraph.util.MathUtils import StreamingMovingAverage  # noqa
    from visiongraph.util.MathUtils import constrain  # noqa
    from visiongraph.util.MathUtils import decompose_transformation_matrix  # noqa
    from visiongraph.util.MathUtils import intersection_over_union  # noqa
    from visiongraph.util.MathUtils import map_value  # noqa
    from visiongraph.util.MathUtils import rotate_2d  # noqa
    from visiongraph.util.MathUtils import sigmoid  # noqa
    from visiongraph.util.MathUtils import transform_coordinates  # noqa
    from visiongraph.util.MediaPipeUtils import mediapipe_landmarks_to_score_and_vector4d  # noqa
    from visiongraph.util.MediaPipeUtils import mediapipe_landmarks_to_vector4d  # noqa
    from visiongraph.util.NetworkUtils import HTTPDownloadError  # noqa
    from visiongraph.util.NetworkUtils import download_file  # noqa
    from visiongraph.util.NetworkUtils import handle_redirects  # noqa
    from visiongraph.util.NetworkUtils import prepare_data_file  # noqa
    from visiongraph.util.NetworkUtils import prepare_openvino_model  # noqa
    from visiongraph.util.OSUtils import isLinux  # noqa
    from visiongraph.util.OSUtils import isMacOSX  # noqa
    from visiongraph.util.OSUtils import isWindows  # noqa
    try:
        from visiongraph.util.OpenVinoUtils import get_inference_engine_device
    except ModuleNotFoundError as ex:
        logging.info(f"Module get_inference_engine_device not found")
    from visiongraph.util.PoseUtils import embed_pose  # noqa
    from visiongraph.util.ResultUtils import bbox_from_landmarks  # noqa
    from visiongraph.util.ResultUtils import extract_object_detection_roi  # noqa
    from visiongraph.util.ResultUtils import non_maximum_suppression  # noqa
    from visiongraph.util.TimeUtils import FPSTracer  # noqa
    from visiongraph.util.TimeUtils import HighPrecisionTimer  # noqa
    from visiongraph.util.TimeUtils import ProfileWatch  # noqa
    from visiongraph.util.TimeUtils import Watch  # noqa
    from visiongraph.util.TimeUtils import current_millis  # noqa
    from visiongraph.util.VectorUtils import array_to_vector  # noqa
    from visiongraph.util.VectorUtils import landmarks_center_by_indices  # noqa
    from visiongraph.util.VectorUtils import lerp4d  # noqa
    from visiongraph.util.VectorUtils import lerp_vector_2d  # noqa
    from visiongraph.util.VectorUtils import lerp_vector_3d  # noqa
    from visiongraph.util.VectorUtils import lerp_vector_4d  # noqa
    from visiongraph.util.VectorUtils import list_of_vector2D  # noqa
    from visiongraph.util.VectorUtils import list_of_vector3D  # noqa
    from visiongraph.util.VectorUtils import list_of_vector4D  # noqa
    from visiongraph.util.VectorUtils import vector_as_list  # noqa
    from visiongraph.util.VectorUtils import vector_distance  # noqa
    from visiongraph.util.VectorUtils import vector_to_array  # noqa
    try:
        from visiongraph.dsp.OneEuroFilterNumba import OneEuroFilterNumba
    except ModuleNotFoundError as ex:
        logging.info(f"Module OneEuroFilterNumba not found")
    from visiongraph.estimator.openvino.OpenVinoPoseEstimator import OpenVinoPoseEstimator  # noqa
    try:
        from visiongraph.estimator.spatial.face.landmark.MediaPipeFaceMeshEstimator import MediaPipeFaceMeshEstimator
    except ModuleNotFoundError as ex:
        logging.info(f"Module MediaPipeFaceMeshEstimator not found")


_visiongraph_imports: Dict[str, _LazyImport] = {
    "AsyncGraphNode": _LazyImport("AsyncGraphNode", "visiongraph.AsyncGraphNode", False),
    "BaseGraph": _LazyImport("BaseGraph", "visiongraph.BaseGraph", False),
    "GraphNode": _LazyImport("GraphNode", "visiongraph.GraphNode", False),
    "Processable": _LazyImport("Processable", "visiongraph.Processable", False),
    "VisionGraph": _LazyImport("VisionGraph", "visiongraph.VisionGraph", False),
    "add_breakpoint": _LazyImport("add_breakpoint", "visiongraph.VisionGraphBuilder", False),
    "create_graph": _LazyImport("create_graph", "visiongraph.VisionGraphBuilder", False),
    "custom": _LazyImport("custom", "visiongraph.VisionGraphBuilder", False),
    "extract": _LazyImport("extract", "visiongraph.VisionGraphBuilder", False),
    "passthrough": _LazyImport("passthrough", "visiongraph.VisionGraphBuilder", False),
    "sequence": _LazyImport("sequence", "visiongraph.VisionGraphBuilder", False),
    "Asset": _LazyImport("Asset", "visiongraph.data.Asset", False),
    "LocalAsset": _LazyImport("LocalAsset", "visiongraph.data.LocalAsset", False),
    "RepositoryAsset": _LazyImport("RepositoryAsset", "visiongraph.data.RepositoryAsset", False),
    "BaseFilterNumpy": _LazyImport("BaseFilterNumpy", "visiongraph.dsp.BaseFilterNumpy", False),
    "LandmarkSmoothFilter": _LazyImport("LandmarkSmoothFilter", "visiongraph.dsp.LandmarkSmoothFilter", False),
    "OneEuroFilter": _LazyImport("OneEuroFilter", "visiongraph.dsp.OneEuroFilter", False),
    "OneEuroFilterNumpy": _LazyImport("OneEuroFilterNumpy", "visiongraph.dsp.OneEuroFilterNumpy", False),
    "VectorNumpySmoothFilter": _LazyImport("VectorNumpySmoothFilter", "visiongraph.dsp.VectorNumpySmoothFilter", False),
    "BaseClassifier": _LazyImport("BaseClassifier", "visiongraph.estimator.BaseClassifier", False),
    "BaseEstimator": _LazyImport("BaseEstimator", "visiongraph.estimator.BaseEstimator", False),
    "BaseVisionEngine": _LazyImport("BaseVisionEngine", "visiongraph.estimator.BaseVisionEngine", False),
    "ChainEstimator": _LazyImport("ChainEstimator", "visiongraph.estimator.ChainEstimator", False),
    "ScoreThresholdEstimator": _LazyImport("ScoreThresholdEstimator", "visiongraph.estimator.ScoreThresholdEstimator", False),
    "VisionClassifier": _LazyImport("VisionClassifier", "visiongraph.estimator.VisionClassifier", False),
    "VisionEstimator": _LazyImport("VisionEstimator", "visiongraph.estimator.VisionEstimator", False),
    "UndistortionCalculator": _LazyImport("UndistortionCalculator", "visiongraph.estimator.calculator.UndistortionCalculator", False),
    "LandmarkEmbedder": _LazyImport("LandmarkEmbedder", "visiongraph.estimator.embedding.LandmarkEmbedder", False),
    "BaseKNNClassifier": _LazyImport("BaseKNNClassifier", "visiongraph.estimator.embedding.knn.BaseKNNClassifier", False),
    "FaissKNNClassifier": _LazyImport("FaissKNNClassifier", "visiongraph.estimator.embedding.knn.FaissKNNClassifier", True),
    "InferenceEngine": _LazyImport("InferenceEngine", "visiongraph.estimator.engine.InferenceEngineFactory", False),
    "InferenceEngineFactory": _LazyImport("InferenceEngineFactory", "visiongraph.estimator.engine.InferenceEngineFactory", False),
    "BaseInpainter": _LazyImport("BaseInpainter", "visiongraph.estimator.inpaint.BaseInpainter", False),
    "GMCNNConfig": _LazyImport("GMCNNConfig", "visiongraph.estimator.inpaint.GMCNNInpainter", True),
    "GMCNNInpainter": _LazyImport("GMCNNInpainter", "visiongraph.estimator.inpaint.GMCNNInpainter", True),
    "ONNXVisionEngine": _LazyImport("ONNXVisionEngine", "visiongraph.estimator.onnx.ONNXVisionEngine", True),
    "OpenVinoEngine": _LazyImport("OpenVinoEngine", "visiongraph.estimator.openvino.OpenVinoEngine", True),
    "OpenVinoObjectDetector": _LazyImport("OpenVinoObjectDetector", "visiongraph.estimator.openvino.OpenVinoObjectDetector", False),
    "SyncInferencePipeline": _LazyImport("SyncInferencePipeline", "visiongraph.estimator.openvino.SyncInferencePipeline", False),
    "CenterNetConfig": _LazyImport("CenterNetConfig", "visiongraph.estimator.spatial.CenterNetDetector", True),
    "CenterNetDetector": _LazyImport("CenterNetDetector", "visiongraph.estimator.spatial.CenterNetDetector", True),
    "CrowdHumanConfig": _LazyImport("CrowdHumanConfig", "visiongraph.estimator.spatial.CrowdHumanDetector", False),
    "CrowdHumanDetector": _LazyImport("CrowdHumanDetector", "visiongraph.estimator.spatial.CrowdHumanDetector", False),
    "DETRConfig": _LazyImport("DETRConfig", "visiongraph.estimator.spatial.DETRDetector", True),
    "DETRDetector": _LazyImport("DETRDetector", "visiongraph.estimator.spatial.DETRDetector", True),
    "InstanceSegmentationEstimator": _LazyImport("InstanceSegmentationEstimator", "visiongraph.estimator.spatial.InstanceSegmentationEstimator", False),
    "LandmarkEstimator": _LazyImport("LandmarkEstimator", "visiongraph.estimator.spatial.LandmarkEstimator", False),
    "ObjectDetector": _LazyImport("ObjectDetector", "visiongraph.estimator.spatial.ObjectDetector", False),
    "RoiEstimator": _LazyImport("RoiEstimator", "visiongraph.estimator.spatial.RoiEstimator", False),
    "SSDConfig": _LazyImport("SSDConfig", "visiongraph.estimator.spatial.SSDDetector", True),
    "SSDDetector": _LazyImport("SSDDetector", "visiongraph.estimator.spatial.SSDDetector", True),
    "SlidingWindowEstimator": _LazyImport("SlidingWindowEstimator", "visiongraph.estimator.spatial.SlidingWindowEstimator", False),
    "SpatialCascadeEstimator": _LazyImport("SpatialCascadeEstimator", "visiongraph.estimator.spatial.SpatialCascadeEstimator", False),
    "UltralyticsYOLODetector": _LazyImport("UltralyticsYOLODetector", "visiongraph.estimator.spatial.UltralyticsYOLODetector", False),
    "YOLOArchitecture": _LazyImport("YOLOArchitecture", "visiongraph.estimator.spatial.YOLODetector", True),
    "YOLOConfig": _LazyImport("YOLOConfig", "visiongraph.estimator.spatial.YOLODetector", True),
    "YOLODetector": _LazyImport("YOLODetector", "visiongraph.estimator.spatial.YOLODetector", True),
    "YOLOXE2EDetector": _LazyImport("YOLOXE2EDetector", "visiongraph.estimator.spatial.YOLOXE2EDetector", False),
    "YOLOv5Config": _LazyImport("YOLOv5Config", "visiongraph.estimator.spatial.YOLOv5Detector", False),
    "YOLOv5Detector": _LazyImport("YOLOv5Detector", "visiongraph.estimator.spatial.YOLOv5Detector", False),
    "YOLOv8Config": _LazyImport("YOLOv8Config", "visiongraph.estimator.spatial.YOLOv8Detector", False),
    "YOLOv8Detector": _LazyImport("YOLOv8Detector", "visiongraph.estimator.spatial.YOLOv8Detector", False),
    "YOLOv8OBBConfig": _LazyImport("YOLOv8OBBConfig", "visiongraph.estimator.spatial.YOLOv8OBBDetector", False),
    "YOLOv8OBBDetector": _LazyImport("YOLOv8OBBDetector", "visiongraph.estimator.spatial.YOLOv8OBBDetector", False),
    "ArUcoCameraPoseEstimator": _LazyImport("ArUcoCameraPoseEstimator", "visiongraph.estimator.spatial.camera.ArUcoCameraPoseEstimator", True),
    "BoardCameraCalibrator": _LazyImport("BoardCameraCalibrator", "visiongraph.estimator.spatial.camera.BoardCameraCalibrator", False),
    "ChArUcoCalibrator": _LazyImport("ChArUcoCalibrator", "visiongraph.estimator.spatial.camera.ChArUcoCalibrator", True),
    "ChessboardCalibrator": _LazyImport("ChessboardCalibrator", "visiongraph.estimator.spatial.camera.ChessboardCalibrator", False),
    "AdasFaceConfig": _LazyImport("AdasFaceConfig", "visiongraph.estimator.spatial.face.AdasFaceDetector", True),
    "AdasFaceDetector": _LazyImport("AdasFaceDetector", "visiongraph.estimator.spatial.face.AdasFaceDetector", True),
    "FaceDetector": _LazyImport("FaceDetector", "visiongraph.estimator.spatial.face.FaceDetector", False),
    "OpenVinoFaceConfig": _LazyImport("OpenVinoFaceConfig", "visiongraph.estimator.spatial.face.OpenVinoFaceDetector", True),
    "OpenVinoFaceDetector": _LazyImport("OpenVinoFaceDetector", "visiongraph.estimator.spatial.face.OpenVinoFaceDetector", True),
    "AffectNetEmotionClassifier": _LazyImport("AffectNetEmotionClassifier", "visiongraph.estimator.spatial.face.emotion.AffectNetEmotionClassifier", True),
    "FERPlusEmotionClassifier": _LazyImport("FERPlusEmotionClassifier", "visiongraph.estimator.spatial.face.emotion.FERPlusEmotionClassifier", False),
    "FaceEmotionEstimator": _LazyImport("FaceEmotionEstimator", "visiongraph.estimator.spatial.face.emotion.FaceEmotionEstimator", False),
    "EyeOpenClosedEstimator": _LazyImport("EyeOpenClosedEstimator", "visiongraph.estimator.spatial.face.eye.EyeOpenClosedEstimator", True),
    "FaceLandmarkEstimator": _LazyImport("FaceLandmarkEstimator", "visiongraph.estimator.spatial.face.landmark.FaceLandmarkEstimator", False),
    "IrisDistanceCalculator": _LazyImport("IrisDistanceCalculator", "visiongraph.estimator.spatial.face.landmark.IrisDistanceCalculator", True),
    "MediaPipeFaceDetector": _LazyImport("MediaPipeFaceDetector", "visiongraph.estimator.spatial.face.landmark.MediaPipeFaceDetector", True),
    "MediaPipeFaceModel": _LazyImport("MediaPipeFaceModel", "visiongraph.estimator.spatial.face.landmark.MediaPipeFaceDetector", True),
    "RegressionLandmarkEstimator": _LazyImport("RegressionLandmarkEstimator", "visiongraph.estimator.spatial.face.landmark.RegressionLandmarkEstimator", True),
    "AdasHeadPoseEstimator": _LazyImport("AdasHeadPoseEstimator", "visiongraph.estimator.spatial.face.pose.AdasHeadPoseEstimator", True),
    "HeadPoseEstimator": _LazyImport("HeadPoseEstimator", "visiongraph.estimator.spatial.face.pose.HeadPoseEstimator", False),
    "FaceRecognitionEstimator": _LazyImport("FaceRecognitionEstimator", "visiongraph.estimator.spatial.face.recognition.FaceRecognitionEstimator", False),
    "FaceReidentificationConfig": _LazyImport("FaceReidentificationConfig", "visiongraph.estimator.spatial.face.recognition.FaceReidentificationEstimator", True),
    "FaceReidentificationEstimator": _LazyImport("FaceReidentificationEstimator", "visiongraph.estimator.spatial.face.recognition.FaceReidentificationEstimator", True),
    "VivaVAD": _LazyImport("VivaVAD", "visiongraph.estimator.spatial.face.vad.VivaVAD", True),
    "VivaVADConfig": _LazyImport("VivaVADConfig", "visiongraph.estimator.spatial.face.vad.VivaVAD", True),
    "HandDetector": _LazyImport("HandDetector", "visiongraph.estimator.spatial.hand.HandDetector", False),
    "HandLandmarkEstimator": _LazyImport("HandLandmarkEstimator", "visiongraph.estimator.spatial.hand.landmark.HandLandmarkEstimator", False),
    "HandModelComplexity": _LazyImport("HandModelComplexity", "visiongraph.estimator.spatial.hand.landmark.MediaPipeHandEstimator", True),
    "MediaPipeHandEstimator": _LazyImport("MediaPipeHandEstimator", "visiongraph.estimator.spatial.hand.landmark.MediaPipeHandEstimator", True),
    "OpenPoseHandEstimator": _LazyImport("OpenPoseHandEstimator", "visiongraph.estimator.spatial.hand.landmark.OpenPoseHandEstimator", True),
    "AEPoseConfig": _LazyImport("AEPoseConfig", "visiongraph.estimator.spatial.pose.AEPoseEstimator", True),
    "AEPoseEstimator": _LazyImport("AEPoseEstimator", "visiongraph.estimator.spatial.pose.AEPoseEstimator", True),
    "EfficientPoseEstimator": _LazyImport("EfficientPoseEstimator", "visiongraph.estimator.spatial.pose.EfficientPoseEstimator", True),
    "EfficientPoseEstimatorConfig": _LazyImport("EfficientPoseEstimatorConfig", "visiongraph.estimator.spatial.pose.EfficientPoseEstimator", True),
    "KAPAOPoseConfig": _LazyImport("KAPAOPoseConfig", "visiongraph.estimator.spatial.pose.KAPAOPoseEstimator", False),
    "KAPAOPoseEstimator": _LazyImport("KAPAOPoseEstimator", "visiongraph.estimator.spatial.pose.KAPAOPoseEstimator", False),
    "LiteHRNetConfig": _LazyImport("LiteHRNetConfig", "visiongraph.estimator.spatial.pose.LiteHRNetEstimator", True),
    "LiteHRNetPoseEstimator": _LazyImport("LiteHRNetPoseEstimator", "visiongraph.estimator.spatial.pose.LiteHRNetEstimator", True),
    "LitePoseEstimator": _LazyImport("LitePoseEstimator", "visiongraph.estimator.spatial.pose.LitePoseEstimator", True),
    "LitePoseEstimatorConfig": _LazyImport("LitePoseEstimatorConfig", "visiongraph.estimator.spatial.pose.LitePoseEstimator", True),
    "MediaPipeHolisticEstimator": _LazyImport("MediaPipeHolisticEstimator", "visiongraph.estimator.spatial.pose.MediaPipeHolisticEstimator", True),
    "MediaPipePoseConfig": _LazyImport("MediaPipePoseConfig", "visiongraph.estimator.spatial.pose.MediaPipePoseEstimator", True),
    "MediaPipePoseEstimator": _LazyImport("MediaPipePoseEstimator", "visiongraph.estimator.spatial.pose.MediaPipePoseEstimator", True),
    "MediaPipePoseEstimatorLegacy": _LazyImport("MediaPipePoseEstimatorLegacy", "visiongraph.estimator.spatial.pose.MediaPipePoseEstimatorLegacy", True),
    "MobileHumanPoseEstimator": _LazyImport("MobileHumanPoseEstimator", "visiongraph.estimator.spatial.pose.MobileHumanPoseEstimator", True),
    "MobileNetV2PoseEstimator": _LazyImport("MobileNetV2PoseEstimator", "visiongraph.estimator.spatial.pose.MobileNetV2PoseEstimator", True),
    "MobileNetV2PoseEstimatorConfig": _LazyImport("MobileNetV2PoseEstimatorConfig", "visiongraph.estimator.spatial.pose.MobileNetV2PoseEstimator", True),
    "MoveNetConfig": _LazyImport("MoveNetConfig", "visiongraph.estimator.spatial.pose.MoveNetPoseEstimator", True),
    "MoveNetPoseEstimator": _LazyImport("MoveNetPoseEstimator", "visiongraph.estimator.spatial.pose.MoveNetPoseEstimator", True),
    "OpenPoseConfig": _LazyImport("OpenPoseConfig", "visiongraph.estimator.spatial.pose.OpenPoseEstimator", True),
    "OpenPoseEstimator": _LazyImport("OpenPoseEstimator", "visiongraph.estimator.spatial.pose.OpenPoseEstimator", True),
    "PoseEstimator": _LazyImport("PoseEstimator", "visiongraph.estimator.spatial.pose.PoseEstimator", False),
    "TopDownPoseEstimator": _LazyImport("TopDownPoseEstimator", "visiongraph.estimator.spatial.pose.TopDownPoseEstimator", True),
    "UltralyticsPoseConfig": _LazyImport("UltralyticsPoseConfig", "visiongraph.estimator.spatial.pose.UltralyticsPoseEstimator", False),
    "UltralyticsPoseEstimator": _LazyImport("UltralyticsPoseEstimator", "visiongraph.estimator.spatial.pose.UltralyticsPoseEstimator", False),
    "add_pose_estimation_step_choices": _LazyImport("add_pose_estimation_step_choices", "visiongraph.estimator.spatial.pose.__init__", False),
    "ModNetConfig": _LazyImport("ModNetConfig", "visiongraph.estimator.spatial.segmentation.MODNetEstimator", False),
    "ModNetEstimator": _LazyImport("ModNetEstimator", "visiongraph.estimator.spatial.segmentation.MODNetEstimator", False),
    "MaskRCNNConfig": _LazyImport("MaskRCNNConfig", "visiongraph.estimator.spatial.segmentation.MaskRCNNEstimator", True),
    "MaskRCNNEstimator": _LazyImport("MaskRCNNEstimator", "visiongraph.estimator.spatial.segmentation.MaskRCNNEstimator", True),
    "MediaPipeSelfieSegmentation": _LazyImport("MediaPipeSelfieSegmentation", "visiongraph.estimator.spatial.segmentation.MediaPipeSelfieSegmentation", True),
    "SelfieSegmentationModel": _LazyImport("SelfieSegmentationModel", "visiongraph.estimator.spatial.segmentation.MediaPipeSelfieSegmentation", True),
    "YOLOv8SegmentationConfig": _LazyImport("YOLOv8SegmentationConfig", "visiongraph.estimator.spatial.segmentation.YOLOv8SegmentationEstimator", False),
    "YOLOv8SegmentationEstimator": _LazyImport("YOLOv8SegmentationEstimator", "visiongraph.estimator.spatial.segmentation.YOLOv8SegmentationEstimator", False),
    "YolactConfig": _LazyImport("YolactConfig", "visiongraph.estimator.spatial.segmentation.YolactEstimator", True),
    "YolcatEstimator": _LazyImport("YolcatEstimator", "visiongraph.estimator.spatial.segmentation.YolactEstimator", True),
    "DeblurGANv2": _LazyImport("DeblurGANv2", "visiongraph.estimator.translation.DeblurGANv2", True),
    "DeblurGANv2Config": _LazyImport("DeblurGANv2Config", "visiongraph.estimator.translation.DeblurGANv2", True),
    "DepthEstimator": _LazyImport("DepthEstimator", "visiongraph.estimator.translation.DepthEstimator", False),
    "MBLLENConfig": _LazyImport("MBLLENConfig", "visiongraph.estimator.translation.MBLLENEstimator", False),
    "MBLLENEstimator": _LazyImport("MBLLENEstimator", "visiongraph.estimator.translation.MBLLENEstimator", False),
    "MidasConfig": _LazyImport("MidasConfig", "visiongraph.estimator.translation.MidasDepthEstimator", True),
    "MidasDepthEstimator": _LazyImport("MidasDepthEstimator", "visiongraph.estimator.translation.MidasDepthEstimator", True),
    "AzureKinectInput": _LazyImport("AzureKinectInput", "visiongraph.input.AzureKinectInput", True),
    "BaseCamera": _LazyImport("BaseCamera", "visiongraph.input.BaseCamera", False),
    "BaseDepthCamera": _LazyImport("BaseDepthCamera", "visiongraph.input.BaseDepthCamera", False),
    "BaseDepthInput": _LazyImport("BaseDepthInput", "visiongraph.input.BaseDepthInput", False),
    "BaseInput": _LazyImport("BaseInput", "visiongraph.input.BaseInput", False),
    "CamGearInput": _LazyImport("CamGearInput", "visiongraph.input.CamGearInput", True),
    "DepthAIBaseInput": _LazyImport("DepthAIBaseInput", "visiongraph.input.DepthAIBaseInput", True),
    "ImageInput": _LazyImport("ImageInput", "visiongraph.input.ImageInput", False),
    "Oak1Input": _LazyImport("Oak1Input", "visiongraph.input.Oak1Input", True),
    "OakDFrameAlignment": _LazyImport("OakDFrameAlignment", "visiongraph.input.OakDInput", True),
    "OakDInput": _LazyImport("OakDInput", "visiongraph.input.OakDInput", True),
    "RealSenseInput": _LazyImport("RealSenseInput", "visiongraph.input.RealSenseInput", True),
    "VideoCaptureInput": _LazyImport("VideoCaptureInput", "visiongraph.input.VideoCaptureInput", False),
    "ZEDCapture": _LazyImport("ZEDCapture", "visiongraph.input.ZEDInput", True),
    "ZEDInput": _LazyImport("ZEDInput", "visiongraph.input.ZEDInput", True),
    "CameraIntrinsics": _LazyImport("CameraIntrinsics", "visiongraph.model.CameraIntrinsics", False),
    "CameraStreamType": _LazyImport("CameraStreamType", "visiongraph.model.CameraStreamType", False),
    "DepthBuffer": _LazyImport("DepthBuffer", "visiongraph.model.DepthBuffer", False),
    "RollingBufferNumpy": _LazyImport("RollingBufferNumpy", "visiongraph.model.RollingBufferNumpy", False),
    "VisionEngineModelLayer": _LazyImport("VisionEngineModelLayer", "visiongraph.model.VisionEngineModelLayer", False),
    "VisionEngineOutput": _LazyImport("VisionEngineOutput", "visiongraph.model.VisionEngineOutput", False),
    "BoundingBox2D": _LazyImport("BoundingBox2D", "visiongraph.model.geometry.BoundingBox2D", False),
    "Size2D": _LazyImport("Size2D", "visiongraph.model.geometry.Size2D", False),
    "ArgumentConfigurable": _LazyImport("ArgumentConfigurable", "visiongraph.model.parameter.ArgumentConfigurable", False),
    "Trackable": _LazyImport("Trackable", "visiongraph.model.tracker.Trackable", False),
    "InputShapeOrder": _LazyImport("InputShapeOrder", "visiongraph.model.types.InputShapeOrder", False),
    "PoseModelComplexity": _LazyImport("PoseModelComplexity", "visiongraph.model.types.MediaPipePoseModelComplexity", False),
    "ModelPrecision": _LazyImport("ModelPrecision", "visiongraph.model.types.ModelPrecision", False),
    "RealSenseColorScheme": _LazyImport("RealSenseColorScheme", "visiongraph.model.types.RealSenseColorScheme", False),
    "ApplyNode": _LazyImport("ApplyNode", "visiongraph.node.ApplyNode", False),
    "BreakpointNode": _LazyImport("BreakpointNode", "visiongraph.node.BreakpointNode", False),
    "CustomNode": _LazyImport("CustomNode", "visiongraph.node.CustomNode", False),
    "ExtractNode": _LazyImport("ExtractNode", "visiongraph.node.ExtractNode", False),
    "PassThroughNode": _LazyImport("PassThroughNode", "visiongraph.node.PassThroughNode", False),
    "SequenceNode": _LazyImport("SequenceNode", "visiongraph.node.SequenceNode", False),
    "ImagePreview": _LazyImport("ImagePreview", "visiongraph.output.ImagePreview", False),
    "FrameBufferSharingServer": _LazyImport("FrameBufferSharingServer", "visiongraph.output.fbs.FrameBufferSharingServer", False),
    "SpoutServer": _LazyImport("SpoutServer", "visiongraph.output.fbs.SpoutServer", True),
    "SyphonServer": _LazyImport("SyphonServer", "visiongraph.output.fbs.SyphonServer", True),
    "AsyncFrameSetRecorder": _LazyImport("AsyncFrameSetRecorder", "visiongraph.recorder.AsyncFrameSetRecorder", False),
    "BaseFrameRecorder": _LazyImport("BaseFrameRecorder", "visiongraph.recorder.BaseFrameRecorder", False),
    "CV2VideoRecorder": _LazyImport("CV2VideoRecorder", "visiongraph.recorder.CV2VideoRecorder", False),
    "FrameSetRecorder": _LazyImport("FrameSetRecorder", "visiongraph.recorder.FrameSetRecorder", False),
    "MoviePyVideoRecorder": _LazyImport("MoviePyVideoRecorder", "visiongraph.recorder.MoviePyVideoRecorder", True),
    "VidGearVideoRecorder": _LazyImport("VidGearVideoRecorder", "visiongraph.recorder.VidGearVideoRecorder", True),
    "ArUcoCameraPose": _LazyImport("ArUcoCameraPose", "visiongraph.result.ArUcoCameraPose", False),
    "ArUcoMarkerDetection": _LazyImport("ArUcoMarkerDetection", "visiongraph.result.ArUcoMarkerDetection", False),
    "BaseResult": _LazyImport("BaseResult", "visiongraph.result.BaseResult", False),
    "CameraPoseResult": _LazyImport("CameraPoseResult", "visiongraph.result.CameraPoseResult", False),
    "ClassificationResult": _LazyImport("ClassificationResult", "visiongraph.result.ClassificationResult", False),
    "DepthMap": _LazyImport("DepthMap", "visiongraph.result.DepthMap", False),
    "EmbeddingResult": _LazyImport("EmbeddingResult", "visiongraph.result.EmbeddingResult", False),
    "HeadPoseResult": _LazyImport("HeadPoseResult", "visiongraph.result.HeadPoseResult", False),
    "ImageResult": _LazyImport("ImageResult", "visiongraph.result.ImageResult", False),
    "LandmarkEmbeddingResult": _LazyImport("LandmarkEmbeddingResult", "visiongraph.result.LandmarkEmbeddingResult", False),
    "ResultAnnotator": _LazyImport("ResultAnnotator", "visiongraph.result.ResultAnnotator", False),
    "ResultDict": _LazyImport("ResultDict", "visiongraph.result.ResultDict", False),
    "ResultList": _LazyImport("ResultList", "visiongraph.result.ResultList", False),
    "CrowdHumanResult": _LazyImport("CrowdHumanResult", "visiongraph.result.spatial.CrowdHumanResult", False),
    "InstanceSegmentationResult": _LazyImport("InstanceSegmentationResult", "visiongraph.result.spatial.InstanceSegmentationResult", False),
    "LandmarkDetectionResult": _LazyImport("LandmarkDetectionResult", "visiongraph.result.spatial.LandmarkDetectionResult", False),
    "ObjectDetectionResult": _LazyImport("ObjectDetectionResult", "visiongraph.result.spatial.ObjectDetectionResult", False),
    "OrientedObjectDetectionResult": _LazyImport("OrientedObjectDetectionResult", "visiongraph.result.spatial.OrientedObjectDetectionResult", False),
    "SpatialCascadeResult": _LazyImport("SpatialCascadeResult", "visiongraph.result.spatial.SpatialCascadeResult", False),
    "BlazeFace": _LazyImport("BlazeFace", "visiongraph.result.spatial.face.BlazeFace", False),
    "BlazeFaceMesh": _LazyImport("BlazeFaceMesh", "visiongraph.result.spatial.face.BlazeFaceMesh", True),
    "BlendShape": _LazyImport("BlendShape", "visiongraph.result.spatial.face.BlendShape", False),
    "EmotionClassificationResult": _LazyImport("EmotionClassificationResult", "visiongraph.result.spatial.face.EmotionClassificationResult", False),
    "EyeOpenClosedResult": _LazyImport("EyeOpenClosedResult", "visiongraph.result.spatial.face.EyeOpenClosedResult", False),
    "FaceDetectionResult": _LazyImport("FaceDetectionResult", "visiongraph.result.spatial.face.FaceDetectionResult", False),
    "FaceLandmarkResult": _LazyImport("FaceLandmarkResult", "visiongraph.result.spatial.face.FaceLandmarkResult", False),
    "IrisDistanceResult": _LazyImport("IrisDistanceResult", "visiongraph.result.spatial.face.IrisDistanceResult", False),
    "IrisParameter": _LazyImport("IrisParameter", "visiongraph.result.spatial.face.IrisDistanceResult", False),
    "RegressionFace": _LazyImport("RegressionFace", "visiongraph.result.spatial.face.RegressionFace", False),
    "VivaVADResult": _LazyImport("VivaVADResult", "visiongraph.result.spatial.face.VivaVADResult", False),
    "BlazeHand": _LazyImport("BlazeHand", "visiongraph.result.spatial.hand.BlazeHand", True),
    "HandDetectionResult": _LazyImport("HandDetectionResult", "visiongraph.result.spatial.hand.HandDetectionResult", False),
    "HandLandmarkResult": _LazyImport("HandLandmarkResult", "visiongraph.result.spatial.hand.HandLandmarkResult", False),
    "Handedness": _LazyImport("Handedness", "visiongraph.result.spatial.hand.Handedness", False),
    "OpenPoseHand": _LazyImport("OpenPoseHand", "visiongraph.result.spatial.hand.OpenPoseHand", True),
    "BlazePose": _LazyImport("BlazePose", "visiongraph.result.spatial.pose.BlazePose", True),
    "BlazePoseSegmentation": _LazyImport("BlazePoseSegmentation", "visiongraph.result.spatial.pose.BlazePoseSegmentation", True),
    "COCOOpenPose": _LazyImport("COCOOpenPose", "visiongraph.result.spatial.pose.COCOOpenPose", False),
    "COCOPose": _LazyImport("COCOPose", "visiongraph.result.spatial.pose.COCOPose", False),
    "EfficientPose": _LazyImport("EfficientPose", "visiongraph.result.spatial.pose.EfficientPose", False),
    "HolisticPose": _LazyImport("HolisticPose", "visiongraph.result.spatial.pose.HolisticPose", True),
    "MobileHumanPose": _LazyImport("MobileHumanPose", "visiongraph.result.spatial.pose.MobileHumanPose", False),
    "PoseLandmarkResult": _LazyImport("PoseLandmarkResult", "visiongraph.result.spatial.pose.PoseLandmarkResult", False),
    "BaseObjectDetectionTracker": _LazyImport("BaseObjectDetectionTracker", "visiongraph.tracker.BaseObjectDetectionTracker", False),
    "CentroidTracker": _LazyImport("CentroidTracker", "visiongraph.tracker.CentroidTracker", False),
    "FlateTracker": _LazyImport("FlateTracker", "visiongraph.tracker.FlateTracker", False),
    "MotpyTracker": _LazyImport("MotpyTracker", "visiongraph.tracker.MotpyTracker", False),
    "ObjectAssignmentResult": _LazyImport("ObjectAssignmentResult", "visiongraph.tracker.ObjectAssignmentSolver", False),
    "ObjectAssignmentSolver": _LazyImport("ObjectAssignmentSolver", "visiongraph.tracker.ObjectAssignmentSolver", False),
    "SimpleTrackingStorage": _LazyImport("SimpleTrackingStorage", "visiongraph.tracker.storage.SimpleTrackingStorage", False),
    "Trackable": _LazyImport("Trackable", "visiongraph.tracker.storage.SimpleTrackingStorage", False),
    "TrackingStorage": _LazyImport("TrackingStorage", "visiongraph.tracker.storage.TrackingStorage", False),
    "PipelineNodeFactory": _LazyImport("PipelineNodeFactory", "visiongraph.util.ArgUtils", False),
    "add_dict_choice_argument": _LazyImport("add_dict_choice_argument", "visiongraph.util.ArgUtils", False),
    "add_enum_choice_argument": _LazyImport("add_enum_choice_argument", "visiongraph.util.ArgUtils", False),
    "add_step_choice_argument": _LazyImport("add_step_choice_argument", "visiongraph.util.ArgUtils", False),
    "dict_choice": _LazyImport("dict_choice", "visiongraph.util.ArgUtils", False),
    "float_range": _LazyImport("float_range", "visiongraph.util.ArgUtils", False),
    "deprecated": _LazyImport("deprecated", "visiongraph.util.CodeUtils", False),
    "default_value_dict": _LazyImport("default_value_dict", "visiongraph.util.CollectionUtils", False),
    "add_source_argument": _LazyImport("add_source_argument", "visiongraph.util.CommonArgs", False),
    "draw_axis": _LazyImport("draw_axis", "visiongraph.util.DrawingUtils", False),
    "draw_bbox": _LazyImport("draw_bbox", "visiongraph.util.DrawingUtils", False),
    "draw_landmark": _LazyImport("draw_landmark", "visiongraph.util.DrawingUtils", False),
    "draw_text": _LazyImport("draw_text", "visiongraph.util.DrawingUtils", False),
    "draw_text_normalized": _LazyImport("draw_text_normalized", "visiongraph.util.DrawingUtils", False),
    "align_image": _LazyImport("align_image", "visiongraph.util.ImageUtils", False),
    "apply_mask": _LazyImport("apply_mask", "visiongraph.util.ImageUtils", False),
    "extract_roi_safe": _LazyImport("extract_roi_safe", "visiongraph.util.ImageUtils", False),
    "resize_and_letter_box": _LazyImport("resize_and_letter_box", "visiongraph.util.ImageUtils", False),
    "resize_and_pad": _LazyImport("resize_and_pad", "visiongraph.util.ImageUtils", False),
    "roi": _LazyImport("roi", "visiongraph.util.ImageUtils", False),
    "roi_safe": _LazyImport("roi_safe", "visiongraph.util.ImageUtils", False),
    "project_pixel_to_point": _LazyImport("project_pixel_to_point", "visiongraph.util.LinalgUtils", False),
    "project_pixels_to_points": _LazyImport("project_pixels_to_points", "visiongraph.util.LinalgUtils", False),
    "project_point_to_pixel": _LazyImport("project_point_to_pixel", "visiongraph.util.LinalgUtils", False),
    "project_points_to_pixels": _LazyImport("project_points_to_pixels", "visiongraph.util.LinalgUtils", False),
    "add_logging_parameter": _LazyImport("add_logging_parameter", "visiongraph.util.LoggingUtils", False),
    "setup_logging": _LazyImport("setup_logging", "visiongraph.util.LoggingUtils", False),
    "StreamingMovingAverage": _LazyImport("StreamingMovingAverage", "visiongraph.util.MathUtils", False),
    "constrain": _LazyImport("constrain", "visiongraph.util.MathUtils", False),
    "decompose_transformation_matrix": _LazyImport("decompose_transformation_matrix", "visiongraph.util.MathUtils", False),
    "intersection_over_union": _LazyImport("intersection_over_union", "visiongraph.util.MathUtils", False),
    "map_value": _LazyImport("map_value", "visiongraph.util.MathUtils", False),
    "rotate_2d": _LazyImport("rotate_2d", "visiongraph.util.MathUtils", False),
    "sigmoid": _LazyImport("sigmoid", "visiongraph.util.MathUtils", False),
    "transform_coordinates": _LazyImport("transform_coordinates", "visiongraph.util.MathUtils", False),
    "mediapipe_landmarks_to_score_and_vector4d": _LazyImport("mediapipe_landmarks_to_score_and_vector4d", "visiongraph.util.MediaPipeUtils", False),
    "mediapipe_landmarks_to_vector4d": _LazyImport("mediapipe_landmarks_to_vector4d", "visiongraph.util.MediaPipeUtils", False),
    "HTTPDownloadError": _LazyImport("HTTPDownloadError", "visiongraph.util.NetworkUtils", False),
    "download_file": _LazyImport("download_file", "visiongraph.util.NetworkUtils", False),
    "handle_redirects": _LazyImport("handle_redirects", "visiongraph.util.NetworkUtils", False),
    "prepare_data_file": _LazyImport("prepare_data_file", "visiongraph.util.NetworkUtils", False),
    "prepare_openvino_model": _LazyImport("prepare_openvino_model", "visiongraph.util.NetworkUtils", False),
    "isLinux": _LazyImport("isLinux", "visiongraph.util.OSUtils", False),
    "isMacOSX": _LazyImport("isMacOSX", "visiongraph.util.OSUtils", False),
    "isWindows": _LazyImport("isWindows", "visiongraph.util.OSUtils", False),
    "get_inference_engine_device": _LazyImport("get_inference_engine_device", "visiongraph.util.OpenVinoUtils", True),
    "embed_pose": _LazyImport("embed_pose", "visiongraph.util.PoseUtils", False),
    "bbox_from_landmarks": _LazyImport("bbox_from_landmarks", "visiongraph.util.ResultUtils", False),
    "extract_object_detection_roi": _LazyImport("extract_object_detection_roi", "visiongraph.util.ResultUtils", False),
    "non_maximum_suppression": _LazyImport("non_maximum_suppression", "visiongraph.util.ResultUtils", False),
    "FPSTracer": _LazyImport("FPSTracer", "visiongraph.util.TimeUtils", False),
    "HighPrecisionTimer": _LazyImport("HighPrecisionTimer", "visiongraph.util.TimeUtils", False),
    "ProfileWatch": _LazyImport("ProfileWatch", "visiongraph.util.TimeUtils", False),
    "Watch": _LazyImport("Watch", "visiongraph.util.TimeUtils", False),
    "current_millis": _LazyImport("current_millis", "visiongraph.util.TimeUtils", False),
    "array_to_vector": _LazyImport("array_to_vector", "visiongraph.util.VectorUtils", False),
    "landmarks_center_by_indices": _LazyImport("landmarks_center_by_indices", "visiongraph.util.VectorUtils", False),
    "lerp4d": _LazyImport("lerp4d", "visiongraph.util.VectorUtils", False),
    "lerp_vector_2d": _LazyImport("lerp_vector_2d", "visiongraph.util.VectorUtils", False),
    "lerp_vector_3d": _LazyImport("lerp_vector_3d", "visiongraph.util.VectorUtils", False),
    "lerp_vector_4d": _LazyImport("lerp_vector_4d", "visiongraph.util.VectorUtils", False),
    "list_of_vector2D": _LazyImport("list_of_vector2D", "visiongraph.util.VectorUtils", False),
    "list_of_vector3D": _LazyImport("list_of_vector3D", "visiongraph.util.VectorUtils", False),
    "list_of_vector4D": _LazyImport("list_of_vector4D", "visiongraph.util.VectorUtils", False),
    "vector_as_list": _LazyImport("vector_as_list", "visiongraph.util.VectorUtils", False),
    "vector_distance": _LazyImport("vector_distance", "visiongraph.util.VectorUtils", False),
    "vector_to_array": _LazyImport("vector_to_array", "visiongraph.util.VectorUtils", False),
    "OneEuroFilterNumba": _LazyImport("OneEuroFilterNumba", "visiongraph.dsp.OneEuroFilterNumba", True),
    "OpenVinoPoseEstimator": _LazyImport("OpenVinoPoseEstimator", "visiongraph.estimator.openvino.OpenVinoPoseEstimator", False),
    "MediaPipeFaceMeshEstimator": _LazyImport("MediaPipeFaceMeshEstimator", "visiongraph.estimator.spatial.face.landmark.MediaPipeFaceMeshEstimator", True),
}

_CURRENT_MODULE = sys.modules[__name__]


def __getattr__(name):
    if name not in _visiongraph_imports:
        raise AttributeError(f"'vg' object has no attribute '{name}'")
    attribute = _visiongraph_imports[name].attribute
    _CURRENT_MODULE.__setattr__(name, attribute)
    return attribute
