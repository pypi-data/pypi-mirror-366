from abc import ABC, abstractmethod
from argparse import Namespace
from typing import TypeVar

from visiongraph.Processable import Processable
from visiongraph.model.parameter.ArgumentConfigurable import ArgumentConfigurable

NodeType = TypeVar("NodeType", bound="GraphNode")
InputType = TypeVar("InputType")
OutputType = TypeVar("OutputType")


class GraphNode(Processable[InputType, OutputType], ArgumentConfigurable, ABC):
    """
    Abstract base class for nodes in a graph that can be configured and processed.
    """

    @abstractmethod
    def setup(self) -> None:
        """
        Initializes the node by setting up its internal state.

        Subclasses must implement this method to configure and initialize their components.
        """

    @abstractmethod
    def process(self, data: InputType) -> OutputType:
        """
        Processes input data through the node's logic.

        :param data: The input data to be processed by the node.

        :return: The output data generated by processing the input.
        """

    @abstractmethod
    def release(self) -> None:
        """
        Releases resources held by the node after processing is complete.
        """

    def configure_and_setup(self, args: Namespace) -> None:
        """
        Configures the node using provided arguments and sets up its internal state.

        :param args: The configuration arguments to be applied to the node.
        """
        self.configure(args)
        self.setup()

    def __enter__(self) -> NodeType:
        self.setup()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release()
