[build-system]
requires = ["setuptools>=78.1.1", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vector-db-query"
version = "1.0.0"
description = "CLI application for vector database queries using LLMs via MCP"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Vector DB Query Team", email = "team@example.com"},
]
keywords = ["vector-database", "llm", "mcp", "embeddings", "qdrant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "google-generativeai>=0.8.0",
    "qdrant-client>=1.7.0",
    "mcp>=1.0.0",
    "click>=8.1.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "numpy>=1.24.0",
    "docker>=7.0.0",
    "requests>=2.32.4",
    "rich>=13.7.0",
    "questionary>=2.0.1",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "aiohttp>=3.12.14",
    "urllib3>=2.5.0",
    "tqdm>=4.66.3",
    "cryptography>=44.0.1",
    "jinja2>=3.1.6",
    "pyjwt>=2.8.0",
    "pypdf2>=3.0.0",
    "python-docx>=1.1.0",
    "chardet>=5.2.0",
    "python-json-logger>=2.0.0",
    "openai>=1.0.0",
    "cohere>=5.0.0",
    # Spreadsheet support
    "openpyxl>=3.1.0",
    "xlrd>=2.0.0",
    "pandas>=2.0.0",
    # Presentation support
    "python-pptx>=0.6.0",
    # Email support (removed email-parser - not available on PyPI)
    # Web content support
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "html2text>=2020.1.16",
    # Image OCR support
    "pillow>=10.0.0",
    "pytesseract>=0.3.0",
    "pdf2image>=1.16.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/vector-db-query"
"Documentation" = "https://vector-db-query.readthedocs.io"
"Repository" = "https://github.com/yourusername/vector-db-query"
"Issues" = "https://github.com/yourusername/vector-db-query/issues"
"Changelog" = "https://github.com/yourusername/vector-db-query/blob/main/CHANGELOG.md"

[project.scripts]
vector-db-query = "vector_db_query.__main__:main"
vdq = "vector_db_query.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=24.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.2",
]
monitoring = [
    "streamlit>=1.29.0",
    "plotly>=5.18.0",
    "psutil>=5.9.0",
    "watchdog>=3.0.0",
    "starlette>=0.47.2",
    "transformers>=4.52.1",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N", "UP", "YTT", "B", "A", "C4", "ISC", "ICN", "PIE", "PT", "Q", "RET", "SIM", "TID", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "B008", "RUF009"]
target-version = "py39"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "langchain.*",
    "pdfplumber.*",
    "python_docx.*",
    "questionary.*",
    "rich.*",
    "psutil.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true