namespace Conect2AI {
namespace TensorFlores {
class MultilayerPerceptron {
public: 

float predict(float *x) { 
float y_pred = 0;
static const float center_bias[10] = {-0.009598999868377102, 0.008761852875022819, -0.004046224867536197, 0.0012219358209525342, -0.015582056445792039, 0.020483117977357468, 0.0063056027567376435, -0.0009781707871177419, 0.010889836801382755, 0.003704912859671092};

static const float centers_weights[110] = {-0.10940148061877757, 1.5018800063241295, 1.4563900079823395, 2.485611518934096, 1.44672478778409, -2.7866812544379806, -1.241305696134429, 1.4746209240375752, -0.9728255327727872, 1.1031430486796636, -0.8224112838985033, 1.3026129213060025, -0.9778687929058569, -1.0935966078970152, 1.2092028471045886, -0.7700673867395007, 1.1392475013634498, 1.1809950202488912, -1.6618199459360117, 1.2391240109167398, 0.8348225347407953, 1.9910831205064137, -1.0085503978733108, 1.116635008713201, 1.0102292672725561, 1.2547210736366836, 1.0414994898562566, 2.0979128794616053, -0.9441392957123559, 0.7561621982059054, 0.6152131928814151, -0.9419777413424323, -1.1015919098659233, 0.6699094525939755, -1.7938438142587554, -0.9955378494486227, 0.6985938355761101, -1.1656855330407871, 1.7636809048670008, -0.7304675691115415, -1.5941530682113296, 1.3439467966653762, 1.5432795962406813, 1.354966068886118, -0.9075132587846512, 0.8814396473790075, 1.0077904811716305, 1.532732528696962, 0.6765907336904919, 1.6773548969042098, -1.5774350462048385, 0.8724162811956298, -0.7925989074620606, -0.9309781561471872, 0.7198293085493946, -1.0770913258756174, 1.4647440293416336, -0.7764562281027875, 0.7869639011680545, -1.1314617429752925, 1.2865080774841469, 1.9597726048337496, -0.8371807153209273, 0.6810733009125609, 0.5896669455339285, 1.1670274243342988, -2.0474084781424136, 1.63865111365463, 1.3079013742172987, -1.5217601730486074, 1.58273493516976, 1.9191618950105565, 1.1948614254162664, 0.6599943704106347, -1.621117340623818, 0.5227145409950461, -1.383323314036505, 2.183109002850985, -0.7739581288762516, 0.8886294000043664, -1.4675045449066242, 0.48240990670550865, 0.8838276773487593, -1.0388067433395756, -1.2147914404241322, 0.8606677711806702, 0.5009429502828897, 0.7360947147160628, -0.6594804193082676, -0.707437360100421, 0.5269527636182276, -0.6750334563431776, 0.5352327723617429, 0.5580158757981062, -0.6158331790837043, -0.5844452903962887, 0.42687132679557116, -0.5872912647331963, 0.3912969124561298, 0.3569973851800047, 0.3630272700185041, 0.3494557246984164, -0.5556334860221619, -0.5495862537280967, -0.546281110863833, 0.3274117151897499, 0.3217085355500995, -0.5343812365606473, -0.5377471148046655, 0.312131402668764};

static const uint8_t w1[3][16] = {
    {109, 84, 0, 85, 1, 2, 3, 0, 4, 0, 5, 104, 86, 0, 6, 109},
    {87, 0, 0, 7, 8, 9, 10, 107, 0, 11, 12, 109, 13, 14, 15, 109},
    {16, 0, 88, 0, 17, 18, 19, 20, 107, 64, 21, 107, 95, 89, 6, 22}
};

static const uint8_t b1[16] = {2, 0, 1, 4, 2, 3, 4, 2, 2, 2, 5, 4, 0, 6, 3, 7};

static const uint8_t w2[16][8] = {
    {0, 99, 109, 107, 109, 23, 96, 24},
    {25, 7, 107, 26, 107, 27, 90, 109},
    {28, 91, 86, 29, 30, 31, 32, 33},
    {92, 34, 107, 16, 100, 109, 107, 35},
    {107, 107, 93, 36, 107, 108, 37, 31},
    {38, 39, 40, 106, 0, 41, 42, 43},
    {94, 44, 0, 109, 97, 45, 0, 109},
    {107, 43, 46, 2, 0, 47, 106, 107},
    {109, 0, 48, 0, 0, 49, 0, 50},
    {51, 52, 0, 53, 54, 55, 0, 107},
    {56, 107, 0, 107, 57, 0, 0, 58},
    {101, 59, 60, 0, 109, 61, 107, 62},
    {0, 0, 63, 0, 64, 109, 65, 66},
    {105, 109, 67, 68, 107, 69, 70, 16},
    {103, 32, 98, 71, 72, 109, 73, 74},
    {0, 75, 76, 77, 107, 78, 79, 80}
};

static const uint8_t b2[8] = {6, 7, 2, 7, 3, 8, 9, 3};

static const uint8_t w3[8][1] = {
    {81},
    {109},
    {0},
    {82},
    {102},
    {107},
    {83},
    {109}
};

static const uint8_t b3[1] = {9};

    // Input Layer 
    float z1[16];
    for (int i = 0; i < 16; i++)
    {
        z1[i] = center_bias[b1[i]];
        for (int j = 0; j < 3; j++)
        {
            z1[i] += x[j] * centers_weights[w1[j][i]];
        }
        z1[i] = relu(z1[i]);    }

    // Hidden Layers 
    float z2[8];
    for (int i = 0; i < 8; i++)
    {
        z2[i] = center_bias[b2[i]];
        for (int j = 0; j < 16; j++)
        {
            z2[i] += z1[j] * centers_weights[w2[j][i]];
        }
        z2[i] = relu(z2[i]);    }

    // Output Layer
    float z3 = center_bias[b3[0]];
    for (int i = 0; i < 8; i++)
     {
       z3 += z2[i] * centers_weights[w3[i][0]];
       z3 = linear(z3);     }

y_pred = z3;
return y_pred;}
protected:
float relu(float x)
{
    return x > 0 ? x : 0;
};

float linear(float x)
{
    return x;
};

};
}
}
