namespace Conect2AI {
namespace TensorFlores {
class MultilayerPerceptron {
public: 

float predict(float *x) { 
float y_pred = 0;
static const uint8_t w1[3][16] = {
    {145, 183, 132, 123, 105, 168, 116, 76, 123, 170, 176, 203, 165, 161, 137, 129},
    {151, 156, 146, 149, 163, 179, 193, 189, 117, 154, 190, 138, 151, 182, 153, 186},
    {218, 148, 249, 144, 99, 153, 173, 86, 158, 13, 194, 228, 101, 163, 221, 118}
};

static const uint8_t b1[16] = {113, 156, 146, 185, 151, 144, 174, 164, 148, 163, 135, 135, 143, 162, 151, 154};

static const uint8_t w2[16][8] = {
    {255, 207, 187, 196, 14, 93, 115, 0},
    {236, 133, 201, 170, 191, 183, 146, 143},
    {65, 136, 106, 212, 224, 222, 148, 158},
    {66, 81, 96, 163, 132, 203, 124, 156},
    {130, 99, 117, 177, 92, 137, 147, 207},
    {177, 175, 90, 168, 118, 122, 190, 192},
    {111, 205, 103, 176, 197, 203, 144, 198},
    {167, 107, 97, 178, 197, 186, 179, 208},
    {93, 144, 97, 195, 135, 185, 187, 151},
    {146, 95, 152, 223, 171, 225, 188, 112},
    {146, 124, 88, 93, 117, 94, 161, 162},
    {199, 207, 127, 59, 103, 67, 167, 153},
    {174, 139, 189, 87, 136, 172, 202, 189},
    {178, 228, 156, 138, 174, 131, 106, 181},
    {185, 171, 164, 141, 199, 156, 129, 185},
    {123, 174, 186, 111, 199, 151, 189, 135}
};

static const uint8_t b2[8] = {167, 184, 144, 168, 161, 141, 144, 142};

static const uint8_t w3[8][1] = {
    {207},
    {178},
    {203},
    {36},
    {104},
    {253},
    {88},
    {140}
};

static const uint8_t b3[1] = {173};

    // Input Layer 
    float z1[16];
    for (int i = 0; i < 16; i++)
    {
        z1[i] = dequantized(b1[i]);
        for (int j = 0; j < 3; j++)
        {
            z1[i] += x[j] * dequantized(w1[j][i]);
        }
        z1[i] = relu(z1[i]);
    }

    // Hidden Layer 2
    float z2[8];
    for (int i = 0; i < 8; i++)
    {
        z2[i] = dequantized(b2[i]);
        for (int j = 0; j < 16; j++)
        {
            z2[i] += z1[j] * dequantized(w2[j][i]);
        }
        z2[i] = relu(z2[i]);
    }

    // Output Layer
    float z3 = dequantized(b3[0]);
    for (int i = 0; i < 8; i++)
    {
        z3 += z2[i] * dequantized(w3[i][0]);
        z3 = linear(z3);
    }

y_pred = z3;
return y_pred;
}
protected:
float dequantized(uint8_t x)
{
    return (((x) / 255.0) * (0.8417611122131348 - -1.2577567100524902) + -1.2577567100524902);
};

float relu(float x)
{
    return x > 0 ? x : 0;
};

float linear(float x)
{
    return x;
};

};
}
}
