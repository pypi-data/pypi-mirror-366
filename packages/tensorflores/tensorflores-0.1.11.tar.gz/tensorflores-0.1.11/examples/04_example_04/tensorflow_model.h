namespace Conect2AI
{
    namespace TensorFlores
    {
        class MultilayerPerceptron
        {
        public:
            float predict(float *x)
            {
                float y_pred = 0;
                static const float w1[3][16] = {
                    {-0.055946290493011475, 0.25544336438179016, -0.1677962690591812, -0.24042336642742157, -0.3851415812969208, 0.13297191262245178, -0.2959812879562378, -0.627983570098877, -0.23762357234954834, 0.14383621513843536, 0.19565051794052124, 0.4166729748249054, 0.10857810080051422, 0.0682215467095375, -0.12774406373500824, -0.18944166600704193},
                    {-0.010265938937664032, 0.02899676002562046, -0.05181903392076492, -0.027036717161536217, 0.09078267216682434, 0.2171010971069336, 0.33169761300086975, 0.2999674677848816, -0.28696271777153015, 0.010510396212339401, 0.3113749623298645, -0.11481685936450958, -0.014491205103695393, 0.24176064133644104, 0.009042521938681602, 0.2737092673778534},
                    {0.5430805683135986, -0.0355449914932251, 0.7996528744697571, -0.06415177881717682, -0.4424959719181061, 0.004908693954348564, 0.17124532163143158, -0.5495506525039673, 0.05071115121245384, -1.1432512998580933, 0.3441008925437927, 0.6243578791618347, -0.42046964168548584, 0.08634669333696365, 0.5630371570587158, -0.28270694613456726}};

                static const float b1[16] = {-0.3212004005908966, 0.034798115491867065, -0.049306079745292664, 0.2670401632785797, -0.012725725769996643, -0.06607148796319962, 0.18026979267597198, 0.09813134372234344, -0.03553032502532005, 0.09224545955657959, -0.14037330448627472, -0.13850532472133636, -0.07946788519620895, 0.07682864367961884, -0.013832597993314266, 0.017839139327406883};

                static const float w2[16][8] = {
                    {0.8417611122131348, 0.4493426978588104, 0.28377676010131836, 0.3597555160522461, -1.140106201171875, -0.48428627848625183, -0.3080860674381256, -1.2577567100524902},
                    {0.6875724792480469, -0.15585291385650635, 0.39727312326431274, 0.14306038618087769, 0.3196006417274475, 0.25495991110801697, -0.05243866145610809, -0.07396707683801651},
                    {-0.7155982255935669, -0.13485726714134216, -0.38396912813186646, 0.4957362115383148, 0.5905218124389648, 0.5717446208000183, -0.031067023053765297, 0.04942433536052704},
                    {-0.7136348485946655, -0.5893297791481018, -0.46534430980682373, 0.09229658544063568, -0.16737639904022217, 0.4173824191093445, -0.23681335151195526, 0.029278980568051338},
                    {-0.18172936141490936, -0.43571236729621887, -0.2866133451461792, 0.2061418741941452, -0.49746984243392944, -0.12706446647644043, -0.040045857429504395, 0.4475451111793518},
                    {0.2077343463897705, 0.18851199746131897, -0.509937584400177, 0.12705600261688232, -0.2807154059410095, -0.2516205608844757, 0.30678436160087585, 0.3295562267303467},
                    {-0.33925381302833557, 0.432159423828125, -0.4023752808570862, 0.19595350325107574, 0.3671025335788727, 0.42110031843185425, -0.06453301757574081, 0.3743720054626465},
                    {0.11845012754201889, -0.3710026741027832, -0.4561530351638794, 0.21200238168239594, 0.37080854177474976, 0.2777617275714874, 0.22258064150810242, 0.4559287130832672},
                    {-0.48714086413383484, -0.06790173053741455, -0.45252764225006104, 0.34985750913619995, -0.14107345044612885, 0.2710920572280884, 0.28617537021636963, -0.013530273921787739},
                    {-0.05505752190947533, -0.4678078293800354, -0.0024098290596157312, 0.5813484787940979, 0.1539410650730133, 0.6004324555397034, 0.29632627964019775, -0.3302171528339386},
                    {-0.049560192972421646, -0.233230859041214, -0.5297637581825256, -0.4901913106441498, -0.2906176745891571, -0.4767274558544159, 0.06872598081827164, 0.08158299326896667},
                    {0.3833775222301483, 0.4521147906780243, -0.20638655126094818, -0.7712963819503784, -0.40428626537323, -0.7028319239616394, 0.11883602291345596, 0.007901305332779884},
                    {0.18275940418243408, -0.11060786247253418, 0.3008561432361603, -0.5385338664054871, -0.1314622014760971, 0.16629129648208618, 0.4057028293609619, 0.29929932951927185},
                    {0.2140502780675888, 0.6223053336143494, 0.030041523277759552, -0.12094015628099442, 0.17888446152210236, -0.17546775937080383, -0.3836839497089386, 0.2365342080593109},
                    {0.2681475579738617, 0.15316835045814514, 0.09325658529996872, -0.09437163174152374, 0.38701263070106506, 0.0336984284222126, -0.19425594806671143, 0.2714982032775879},
                    {-0.23753277957439423, 0.1823681890964508, 0.2763634920120239, -0.3425593376159668, 0.387326180934906, -0.014426753856241703, 0.3049626648426056, -0.14091522991657257}};

                static const float b2[8] = {0.12286891043186188, 0.25903749465942383, -0.06923472881317139, 0.12782526016235352, 0.07557117193937302, -0.08897342532873154, -0.06694396585226059, -0.0859079658985138};

                static const float w3[8][1] = {
                    {0.45022499561309814},
                    {0.20802143216133118},
                    {0.4183614253997803},
                    {-0.9587167501449585},
                    {-0.40010419487953186},
                    {0.8254634737968445},
                    {-0.5266174674034119},
                    {-0.09796174615621567}};

                static const float b3[1] = {0.17288075387477875};

                // Input Layer
                float z1[16];
                for (int i = 0; i < 16; i++)
                {
                    z1[i] = b1[i];
                    for (int j = 0; j < 3; j++)
                    {
                        z1[i] += x[j] * w1[j][i];
                    }
                    z1[i] = relu(z1[i]);
                }

                // Hidden Layer 2
                float z2[8];
                for (int i = 0; i < 8; i++)
                {
                    z2[i] = b2[i];
                    for (int j = 0; j < 16; j++)
                    {
                        z2[i] += z1[j] * w2[j][i];
                    }
                    z2[i] = relu(z2[i]);
                }

                // Output Layer
                float z3 = b3[0];
                for (int i = 0; i < 8; i++)
                {
                    z3 += z2[i] * w3[i][0];
                    z3 = linear(z3);
                }

                y_pred = z3;
                return y_pred;
            }

        protected:
            float relu(float x)
            {
                return x > 0 ? x : 0;
            };

            float linear(float x)
            {
                return x;
            };
        };
    }
}
