"""Functionalities for reshaping tabular quantitative proteomics data.

This module offers methods to transform data from a "long" format into a "wide" format,
which is a common and often necessary step before aggregation or analysis. It supports
pivoting data based on specified index and grouping columns, and can handle both
quantitative values and annotation columns.
"""

from typing import Iterable

import pandas as pd

import msreport.aggregate.condense as CONDENSE
import msreport.helper


def pivot_table(
    long_table: pd.DataFrame,
    index: str,
    group_by: str,
    annotation_columns: Iterable[str],
    pivoting_columns: Iterable[str],
) -> pd.DataFrame:
    """Generates a pivoted table in wide format.

    Args:
        long_table: Dataframe in long format that is used to generate a table in wide
            format.
        index: One or multiple column names that are used to group the table for
            pivoting.
        group_by: Column that is used to split the table on its unique entries.
        annotation_columns: Each column generates a new column in the pivoted table.
            Entries from each annotation column are aggregated for each group created by
            the column(s) specified by 'index' and unique values are joined together
            with ";" as separator.
        pivoting_columns: Columns that are combined with unique entries from 'group_by'
            to generate new columns in the pivoted table.

    Returns:
        A reshaped, pivot table with length equal to unique values from the 'index'
        column.

    Example:
        >>> table = pd.DataFrame(
        ...     {
        ...         "ID": ["A", "B", "C", "B", "C", "D"],
        ...         "Sample": ["S1", "S1", "S1", "S2", "S2", "S2"],
        ...         "Annotation": ["A", "B", "C", "B", "C", "D"],
        ...         "Quant": [1.0, 1.0, 1.0, 2.0, 2.0, 2.0],
        ...     }
        ... )
        >>> pivot_table(table, "ID", "Sample", ["Annotation"], ["Quant"])
          ID  Annotation  Quant S1  Quant S2
        0  A           A       1.0       NaN
        1  B           B       1.0       2.0
        2  C           C       1.0       2.0
        3  D           D       NaN       2.0
    """
    sub_tables = []
    for column in annotation_columns:
        sub_tables.append(join_unique(long_table, index, column))
    for column in pivoting_columns:
        sub_tables.append(pivot_column(long_table, index, group_by, column))

    wide_table = msreport.helper.join_tables(sub_tables, reset_index=True)
    return wide_table


def pivot_column(
    table: pd.DataFrame, index: str | Iterable[str], group_by: str, values: str
) -> pd.DataFrame:
    """Returns a reshaped dataframe, generated by pivoting the table on one column.

    Uses unique values from the specified 'index' to form the index axis of the new
    dataframe. Unique values from the 'group_by' column are used to split the data and
    generate new columns that are filled with values from the 'values' column. The
    column names are composed of the 'values' column and the unique entries from
    'group_by'.

    Args:
        table: Dataframe that is used to generate the pivoted table.
        index: One or multiple column names that are used as the new index.
        group_by: Column that is used to split the table, each unique entry from this
            column generates a new column in the pivoted table.
        values: Column which values are used to populate the pivoted table.

    Returns:
        The pivoted dataframe.

    Example:
        >>> table = pd.DataFrame(
        ...     {
        ...         "ID": ["A", "A", "B", "B"],
        ...         "Sample": ["S1", "S2", "S1", "S2"],
        ...         "Entries": [1.0, 2.0, 1.0, 2.0],
        ...     }
        ... )
        >>> pivot_column(table, "ID", "Sample", "Entries")
            Entries S1  Entries S2
        ID
        A          1.0         2.0
        B          1.0         2.0
    """
    pivot = table.pivot(index=index, columns=group_by, values=values)
    pivot.columns = [f"{values} {sample_column}" for sample_column in pivot.columns]
    return pivot


def join_unique(
    table: pd.DataFrame, index: str | Iterable[str], values: str
) -> pd.DataFrame:
    """Returns a new dataframe with unique values from a column and grouped by 'index'.

    Args:
        table: Input dataframe from which to generate the new dataframe.
        index: One or multiple column names group the table by.
        values: Column which is used to extract unique values.

    Returns:
        A dataframe with a single column named 'values', where the unique values of the
            column specified by 'values' are joined together with ";" for each group
            created by the column(s) specified by 'index'.

    Example:
        >>> table = pd.DataFrame(
        ...     {
        ...         "ID": ["A", "A", "B", "B"],
        ...         "Annotation": ["A1", "A1", "B1", "B1"],
        ...     }
        ... )
        >>> join_unique(table, "ID", "Annotation")
            Annotation
        ID
        A           A1
        B           B1
    """
    series = table.groupby(index)[values].agg(
        lambda x: CONDENSE.join_unique_str(x.to_numpy())
    )
    new_df = pd.DataFrame(series)
    new_df.columns = [values]
    return new_df
