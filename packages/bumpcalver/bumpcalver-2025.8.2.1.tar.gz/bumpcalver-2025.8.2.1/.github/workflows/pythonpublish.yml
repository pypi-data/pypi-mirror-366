name: Upload Python Package

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for mike to work properly

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools build mike
        pip install -r requirements.txt

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  deploy-docs:
    name: Deploy versioned documentation
    runs-on: ubuntu-latest
    needs: deploy  # Wait for PyPI deployment to complete

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for mike to work properly

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mike

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get release version
        id: get_version
        run: |
          # Get version from GitHub release tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Prepare documentation files
        run: |
          python3 scripts/update_docs.py
          python3 scripts/changelog.py
          cp README.md docs/index.md
          cp CONTRIBUTING.md docs/contribute.md
          cp CHANGELOG.md docs/release-notes.md

      - name: Deploy documentation with mike
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Deploying documentation for version: $VERSION"

          # Deploy the specific version with 'latest' and 'stable' aliases
          python3 scripts/deploy_docs.py deploy \
            --version "$VERSION" \
            --aliases latest stable \
            --title "Release $VERSION" \
            --push

          echo "Documentation deployed for version $VERSION"
