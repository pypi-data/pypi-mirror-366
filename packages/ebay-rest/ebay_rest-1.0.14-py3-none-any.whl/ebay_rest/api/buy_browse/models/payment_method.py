# coding: utf-8

"""
    Browse API

    The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.  # noqa: E501

    OpenAPI spec version: v1.20.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_method_type': 'str',
        'payment_method_brands': 'list[PaymentMethodBrand]',
        'payment_instructions': 'list[str]',
        'seller_instructions': 'list[str]'
    }

    attribute_map = {
        'payment_method_type': 'paymentMethodType',
        'payment_method_brands': 'paymentMethodBrands',
        'payment_instructions': 'paymentInstructions',
        'seller_instructions': 'sellerInstructions'
    }

    def __init__(self, payment_method_type=None, payment_method_brands=None, payment_instructions=None, seller_instructions=None):  # noqa: E501
        """PaymentMethod - a model defined in Swagger"""  # noqa: E501
        self._payment_method_type = None
        self._payment_method_brands = None
        self._payment_instructions = None
        self._seller_instructions = None
        self.discriminator = None
        if payment_method_type is not None:
            self.payment_method_type = payment_method_type
        if payment_method_brands is not None:
            self.payment_method_brands = payment_method_brands
        if payment_instructions is not None:
            self.payment_instructions = payment_instructions
        if seller_instructions is not None:
            self.seller_instructions = seller_instructions

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentMethod.  # noqa: E501

        The payment method type, such as credit card or cash. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The payment_method_type of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentMethod.

        The payment method type, such as credit card or cash. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param payment_method_type: The payment_method_type of this PaymentMethod.  # noqa: E501
        :type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def payment_method_brands(self):
        """Gets the payment_method_brands of this PaymentMethod.  # noqa: E501

        The payment method brands, including the payment method brand type and logo image.  # noqa: E501

        :return: The payment_method_brands of this PaymentMethod.  # noqa: E501
        :rtype: list[PaymentMethodBrand]
        """
        return self._payment_method_brands

    @payment_method_brands.setter
    def payment_method_brands(self, payment_method_brands):
        """Sets the payment_method_brands of this PaymentMethod.

        The payment method brands, including the payment method brand type and logo image.  # noqa: E501

        :param payment_method_brands: The payment_method_brands of this PaymentMethod.  # noqa: E501
        :type: list[PaymentMethodBrand]
        """

        self._payment_method_brands = payment_method_brands

    @property
    def payment_instructions(self):
        """Gets the payment_instructions of this PaymentMethod.  # noqa: E501

        The payment instructions for the buyer, such as <i>cash in person</i> or <i>contact seller</i>.  # noqa: E501

        :return: The payment_instructions of this PaymentMethod.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_instructions

    @payment_instructions.setter
    def payment_instructions(self, payment_instructions):
        """Sets the payment_instructions of this PaymentMethod.

        The payment instructions for the buyer, such as <i>cash in person</i> or <i>contact seller</i>.  # noqa: E501

        :param payment_instructions: The payment_instructions of this PaymentMethod.  # noqa: E501
        :type: list[str]
        """

        self._payment_instructions = payment_instructions

    @property
    def seller_instructions(self):
        """Gets the seller_instructions of this PaymentMethod.  # noqa: E501

        The seller instructions to the buyer, such as <i>accepts credit cards</i> or <i>see description</i>.  # noqa: E501

        :return: The seller_instructions of this PaymentMethod.  # noqa: E501
        :rtype: list[str]
        """
        return self._seller_instructions

    @seller_instructions.setter
    def seller_instructions(self, seller_instructions):
        """Sets the seller_instructions of this PaymentMethod.

        The seller instructions to the buyer, such as <i>accepts credit cards</i> or <i>see description</i>.  # noqa: E501

        :param seller_instructions: The seller_instructions of this PaymentMethod.  # noqa: E501
        :type: list[str]
        """

        self._seller_instructions = seller_instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
