# coding: utf-8

"""
    Store API

    <p>This API provides stores-related resources for third-party developers. These resources let you retrieve basic store information such as store name, description, store url, return store category hierarchy, add,rename,move,delete a single user's eBay store category, and retrieve the processing status of these tasks.</p> <p>The stores resource methods require an access token created with the <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">authorization code grant</a> flow, using one or more scopes from the following list (please check your Application Keys page for a list of OAuth scopes available to your application)</p>  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StoreCategoryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'category_name': 'str',
        'children_categories': 'list[StoreCategoryType]',
        'level': 'int',
        'order': 'int'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'category_name': 'categoryName',
        'children_categories': 'childrenCategories',
        'level': 'level',
        'order': 'order'
    }

    def __init__(self, category_id=None, category_name=None, children_categories=None, level=None, order=None):  # noqa: E501
        """StoreCategoryType - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_name = None
        self._children_categories = None
        self._level = None
        self._order = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category_name is not None:
            self.category_name = category_name
        if children_categories is not None:
            self.children_categories = children_categories
        if level is not None:
            self.level = level
        if order is not None:
            self.order = order

    @property
    def category_id(self):
        """Gets the category_id of this StoreCategoryType.  # noqa: E501

        Unique identifier of an eBay Store's custom category. eBay auto-generates this identifier when a seller establishes a custom store category. This category ID should not be confused with an eBay category ID.  # noqa: E501

        :return: The category_id of this StoreCategoryType.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this StoreCategoryType.

        Unique identifier of an eBay Store's custom category. eBay auto-generates this identifier when a seller establishes a custom store category. This category ID should not be confused with an eBay category ID.  # noqa: E501

        :param category_id: The category_id of this StoreCategoryType.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this StoreCategoryType.  # noqa: E501

        The seller-specified name of the custom category.  # noqa: E501

        :return: The category_name of this StoreCategoryType.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this StoreCategoryType.

        The seller-specified name of the custom category.  # noqa: E501

        :param category_name: The category_name of this StoreCategoryType.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def children_categories(self):
        """Gets the children_categories of this StoreCategoryType.  # noqa: E501

        This array is returned to show second and third-level store categories. eBay Stores support up to three category levels.  # noqa: E501

        :return: The children_categories of this StoreCategoryType.  # noqa: E501
        :rtype: list[StoreCategoryType]
        """
        return self._children_categories

    @children_categories.setter
    def children_categories(self, children_categories):
        """Sets the children_categories of this StoreCategoryType.

        This array is returned to show second and third-level store categories. eBay Stores support up to three category levels.  # noqa: E501

        :param children_categories: The children_categories of this StoreCategoryType.  # noqa: E501
        :type: list[StoreCategoryType]
        """

        self._children_categories = children_categories

    @property
    def level(self):
        """Gets the level of this StoreCategoryType.  # noqa: E501

        The level indicates the category level of the category tree.<br><span class=\"tablenote\"><strong>Note:</strong> Three levels of store categories are supported. All categories belonging to the same parent should have the same level.</span>  # noqa: E501

        :return: The level of this StoreCategoryType.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this StoreCategoryType.

        The level indicates the category level of the category tree.<br><span class=\"tablenote\"><strong>Note:</strong> Three levels of store categories are supported. All categories belonging to the same parent should have the same level.</span>  # noqa: E501

        :param level: The level of this StoreCategoryType.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def order(self):
        """Gets the order of this StoreCategoryType.  # noqa: E501

        The order in which the custom store category appears in the list of store categories when the eBay store is visited.  # noqa: E501

        :return: The order of this StoreCategoryType.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this StoreCategoryType.

        The order in which the custom store category appears in the list of store categories when the eBay store is visited.  # noqa: E501

        :param order: The order of this StoreCategoryType.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreCategoryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreCategoryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
