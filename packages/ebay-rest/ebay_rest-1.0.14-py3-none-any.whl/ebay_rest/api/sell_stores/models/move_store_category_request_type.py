# coding: utf-8

"""
    Store API

    <p>This API provides stores-related resources for third-party developers. These resources let you retrieve basic store information such as store name, description, store url, return store category hierarchy, add,rename,move,delete a single user's eBay store category, and retrieve the processing status of these tasks.</p> <p>The stores resource methods require an access token created with the <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">authorization code grant</a> flow, using one or more scopes from the following list (please check your Application Keys page for a list of OAuth scopes available to your application)</p>  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MoveStoreCategoryRequestType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'destination_parent_category_id': 'str',
        'listing_destination_category_id': 'str'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'destination_parent_category_id': 'destinationParentCategoryId',
        'listing_destination_category_id': 'listingDestinationCategoryId'
    }

    def __init__(self, category_id=None, destination_parent_category_id=None, listing_destination_category_id=None):  # noqa: E501
        """MoveStoreCategoryRequestType - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._destination_parent_category_id = None
        self._listing_destination_category_id = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if destination_parent_category_id is not None:
            self.destination_parent_category_id = destination_parent_category_id
        if listing_destination_category_id is not None:
            self.listing_destination_category_id = listing_destination_category_id

    @property
    def category_id(self):
        """Gets the category_id of this MoveStoreCategoryRequestType.  # noqa: E501

        The unique identifier of an eBay Store's custom category. eBay auto-generates this identifier when a seller establishes a custom store category. This category ID should not be confused with an eBay category ID. This is the category that is moved.  # noqa: E501

        :return: The category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this MoveStoreCategoryRequestType.

        The unique identifier of an eBay Store's custom category. eBay auto-generates this identifier when a seller establishes a custom store category. This category ID should not be confused with an eBay category ID. This is the category that is moved.  # noqa: E501

        :param category_id: The category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def destination_parent_category_id(self):
        """Gets the destination_parent_category_id of this MoveStoreCategoryRequestType.  # noqa: E501

        The new parent category of the category to be moved is specified in this field. If the category is being moved to level 1 category, set this value to <b>-999</b>.  # noqa: E501

        :return: The destination_parent_category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :rtype: str
        """
        return self._destination_parent_category_id

    @destination_parent_category_id.setter
    def destination_parent_category_id(self, destination_parent_category_id):
        """Sets the destination_parent_category_id of this MoveStoreCategoryRequestType.

        The new parent category of the category to be moved is specified in this field. If the category is being moved to level 1 category, set this value to <b>-999</b>.  # noqa: E501

        :param destination_parent_category_id: The destination_parent_category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :type: str
        """

        self._destination_parent_category_id = destination_parent_category_id

    @property
    def listing_destination_category_id(self):
        """Gets the listing_destination_category_id of this MoveStoreCategoryRequestType.  # noqa: E501

        This field is only needed if the category to be moved is a leaf category with listings, but a category that becomes a non-leaf category after the move. The listings of the category to be moved are moved to the category specified in this field.  # noqa: E501

        :return: The listing_destination_category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :rtype: str
        """
        return self._listing_destination_category_id

    @listing_destination_category_id.setter
    def listing_destination_category_id(self, listing_destination_category_id):
        """Sets the listing_destination_category_id of this MoveStoreCategoryRequestType.

        This field is only needed if the category to be moved is a leaf category with listings, but a category that becomes a non-leaf category after the move. The listings of the category to be moved are moved to the category specified in this field.  # noqa: E501

        :param listing_destination_category_id: The listing_destination_category_id of this MoveStoreCategoryRequestType.  # noqa: E501
        :type: str
        """

        self._listing_destination_category_id = listing_destination_category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoveStoreCategoryRequestType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoveStoreCategoryRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
