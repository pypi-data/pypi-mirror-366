# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddComplaintRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_packages': 'list[str]',
        'complaint_date': 'str',
        'complaint_reason': 'str',
        'complaint_type': 'str',
        'preference_id': 'int',
        'remark': 'str'
    }

    attribute_map = {
        'affected_packages': 'affectedPackages',
        'complaint_date': 'complaintDate',
        'complaint_reason': 'complaintReason',
        'complaint_type': 'complaintType',
        'preference_id': 'preferenceId',
        'remark': 'remark'
    }

    def __init__(self, affected_packages=None, complaint_date=None, complaint_reason=None, complaint_type=None, preference_id=None, remark=None):  # noqa: E501
        """AddComplaintRequestData - a model defined in Swagger"""  # noqa: E501
        self._affected_packages = None
        self._complaint_date = None
        self._complaint_reason = None
        self._complaint_type = None
        self._preference_id = None
        self._remark = None
        self.discriminator = None
        if affected_packages is not None:
            self.affected_packages = affected_packages
        if complaint_date is not None:
            self.complaint_date = complaint_date
        if complaint_reason is not None:
            self.complaint_reason = complaint_reason
        if complaint_type is not None:
            self.complaint_type = complaint_type
        if preference_id is not None:
            self.preference_id = preference_id
        if remark is not None:
            self.remark = remark

    @property
    def affected_packages(self):
        """Gets the affected_packages of this AddComplaintRequestData.  # noqa: E501

        This array specifies a list of packages, specified by their <b>packageId</b>, affected by the issue causing the complaint.<br><br>Package ID values are returned when creating a package through the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/package/methods/createPackage\" target=\"_blank\">createPackage</a> method<br><br>This array is required if the complaint being filed is for a missing package.  # noqa: E501

        :return: The affected_packages of this AddComplaintRequestData.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_packages

    @affected_packages.setter
    def affected_packages(self, affected_packages):
        """Sets the affected_packages of this AddComplaintRequestData.

        This array specifies a list of packages, specified by their <b>packageId</b>, affected by the issue causing the complaint.<br><br>Package ID values are returned when creating a package through the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/package/methods/createPackage\" target=\"_blank\">createPackage</a> method<br><br>This array is required if the complaint being filed is for a missing package.  # noqa: E501

        :param affected_packages: The affected_packages of this AddComplaintRequestData.  # noqa: E501
        :type: list[str]
        """

        self._affected_packages = affected_packages

    @property
    def complaint_date(self):
        """Gets the complaint_date of this AddComplaintRequestData.  # noqa: E501

        The date in which the issue associated with the complaint occurred.<br><br><b>Format:</b> <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>   # noqa: E501

        :return: The complaint_date of this AddComplaintRequestData.  # noqa: E501
        :rtype: str
        """
        return self._complaint_date

    @complaint_date.setter
    def complaint_date(self, complaint_date):
        """Sets the complaint_date of this AddComplaintRequestData.

        The date in which the issue associated with the complaint occurred.<br><br><b>Format:</b> <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>   # noqa: E501

        :param complaint_date: The complaint_date of this AddComplaintRequestData.  # noqa: E501
        :type: str
        """

        self._complaint_date = complaint_date

    @property
    def complaint_reason(self):
        """Gets the complaint_reason of this AddComplaintRequestData.  # noqa: E501

        This string specifies the reason the complaint was filed.<br><br><b>Max length</b>: 200 characters  # noqa: E501

        :return: The complaint_reason of this AddComplaintRequestData.  # noqa: E501
        :rtype: str
        """
        return self._complaint_reason

    @complaint_reason.setter
    def complaint_reason(self, complaint_reason):
        """Sets the complaint_reason of this AddComplaintRequestData.

        This string specifies the reason the complaint was filed.<br><br><b>Max length</b>: 200 characters  # noqa: E501

        :param complaint_reason: The complaint_reason of this AddComplaintRequestData.  # noqa: E501
        :type: str
        """

        self._complaint_reason = complaint_reason

    @property
    def complaint_type(self):
        """Gets the complaint_type of this AddComplaintRequestData.  # noqa: E501

        The type of complaint being filed.<br><br><b>Valid values</b>:<ul><li><code>ABNORMAL_COLLECTION_COMPLAINT</code></li><li><code>LOST_PACKAGE_COMPLAINT</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:ComplaintTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The complaint_type of this AddComplaintRequestData.  # noqa: E501
        :rtype: str
        """
        return self._complaint_type

    @complaint_type.setter
    def complaint_type(self, complaint_type):
        """Sets the complaint_type of this AddComplaintRequestData.

        The type of complaint being filed.<br><br><b>Valid values</b>:<ul><li><code>ABNORMAL_COLLECTION_COMPLAINT</code></li><li><code>LOST_PACKAGE_COMPLAINT</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:ComplaintTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param complaint_type: The complaint_type of this AddComplaintRequestData.  # noqa: E501
        :type: str
        """

        self._complaint_type = complaint_type

    @property
    def preference_id(self):
        """Gets the preference_id of this AddComplaintRequestData.  # noqa: E501

        The unique identifier of the address associated with the complaint.<br><br>This field is required if the complain being filed is associated with a specific address.  # noqa: E501

        :return: The preference_id of this AddComplaintRequestData.  # noqa: E501
        :rtype: int
        """
        return self._preference_id

    @preference_id.setter
    def preference_id(self, preference_id):
        """Sets the preference_id of this AddComplaintRequestData.

        The unique identifier of the address associated with the complaint.<br><br>This field is required if the complain being filed is associated with a specific address.  # noqa: E501

        :param preference_id: The preference_id of this AddComplaintRequestData.  # noqa: E501
        :type: int
        """

        self._preference_id = preference_id

    @property
    def remark(self):
        """Gets the remark of this AddComplaintRequestData.  # noqa: E501

        A remark to the seller themselves.  # noqa: E501

        :return: The remark of this AddComplaintRequestData.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this AddComplaintRequestData.

        A remark to the seller themselves.  # noqa: E501

        :param remark: The remark of this AddComplaintRequestData.  # noqa: E501
        :type: str
        """

        self._remark = remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddComplaintRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddComplaintRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
