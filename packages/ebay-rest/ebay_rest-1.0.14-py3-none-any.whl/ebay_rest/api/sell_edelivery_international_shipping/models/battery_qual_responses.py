# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatteryQualResponses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'battery_type': 'str',
        'elec_qualification_id': 'str',
        'elec_qualification_name': 'str',
        'expire_date': 'str',
        'remark': 'str'
    }

    attribute_map = {
        'battery_type': 'batteryType',
        'elec_qualification_id': 'elecQualificationId',
        'elec_qualification_name': 'elecQualificationName',
        'expire_date': 'expireDate',
        'remark': 'remark'
    }

    def __init__(self, battery_type=None, elec_qualification_id=None, elec_qualification_name=None, expire_date=None, remark=None):  # noqa: E501
        """BatteryQualResponses - a model defined in Swagger"""  # noqa: E501
        self._battery_type = None
        self._elec_qualification_id = None
        self._elec_qualification_name = None
        self._expire_date = None
        self._remark = None
        self.discriminator = None
        if battery_type is not None:
            self.battery_type = battery_type
        if elec_qualification_id is not None:
            self.elec_qualification_id = elec_qualification_id
        if elec_qualification_name is not None:
            self.elec_qualification_name = elec_qualification_name
        if expire_date is not None:
            self.expire_date = expire_date
        if remark is not None:
            self.remark = remark

    @property
    def battery_type(self):
        """Gets the battery_type of this BatteryQualResponses.  # noqa: E501

        The type of the battery. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:LiBatteryTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The battery_type of this BatteryQualResponses.  # noqa: E501
        :rtype: str
        """
        return self._battery_type

    @battery_type.setter
    def battery_type(self, battery_type):
        """Sets the battery_type of this BatteryQualResponses.

        The type of the battery. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:LiBatteryTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param battery_type: The battery_type of this BatteryQualResponses.  # noqa: E501
        :type: str
        """

        self._battery_type = battery_type

    @property
    def elec_qualification_id(self):
        """Gets the elec_qualification_id of this BatteryQualResponses.  # noqa: E501

        The unique identifier of the battery's electric qualification, which indicates that the battery has a certificate of approval for global shipping.  # noqa: E501

        :return: The elec_qualification_id of this BatteryQualResponses.  # noqa: E501
        :rtype: str
        """
        return self._elec_qualification_id

    @elec_qualification_id.setter
    def elec_qualification_id(self, elec_qualification_id):
        """Sets the elec_qualification_id of this BatteryQualResponses.

        The unique identifier of the battery's electric qualification, which indicates that the battery has a certificate of approval for global shipping.  # noqa: E501

        :param elec_qualification_id: The elec_qualification_id of this BatteryQualResponses.  # noqa: E501
        :type: str
        """

        self._elec_qualification_id = elec_qualification_id

    @property
    def elec_qualification_name(self):
        """Gets the elec_qualification_name of this BatteryQualResponses.  # noqa: E501

        The name of the battery's electric qualification.  # noqa: E501

        :return: The elec_qualification_name of this BatteryQualResponses.  # noqa: E501
        :rtype: str
        """
        return self._elec_qualification_name

    @elec_qualification_name.setter
    def elec_qualification_name(self, elec_qualification_name):
        """Sets the elec_qualification_name of this BatteryQualResponses.

        The name of the battery's electric qualification.  # noqa: E501

        :param elec_qualification_name: The elec_qualification_name of this BatteryQualResponses.  # noqa: E501
        :type: str
        """

        self._elec_qualification_name = elec_qualification_name

    @property
    def expire_date(self):
        """Gets the expire_date of this BatteryQualResponses.  # noqa: E501

        The expiration date of the battery qualification.  # noqa: E501

        :return: The expire_date of this BatteryQualResponses.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this BatteryQualResponses.

        The expiration date of the battery qualification.  # noqa: E501

        :param expire_date: The expire_date of this BatteryQualResponses.  # noqa: E501
        :type: str
        """

        self._expire_date = expire_date

    @property
    def remark(self):
        """Gets the remark of this BatteryQualResponses.  # noqa: E501

        A remark to the seller themselves.<br><br><span class=\"tablenote\"><b>Note:</b> This field is always returned, but will show as null or have an empty value if not defined/applicable.</span>  # noqa: E501

        :return: The remark of this BatteryQualResponses.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this BatteryQualResponses.

        A remark to the seller themselves.<br><br><span class=\"tablenote\"><b>Note:</b> This field is always returned, but will show as null or have an empty value if not defined/applicable.</span>  # noqa: E501

        :param remark: The remark of this BatteryQualResponses.  # noqa: E501
        :type: str
        """

        self._remark = remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatteryQualResponses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatteryQualResponses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
