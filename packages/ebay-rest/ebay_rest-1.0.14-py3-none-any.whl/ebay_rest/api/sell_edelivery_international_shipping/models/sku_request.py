# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkuRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elec_qualification_id': 'str',
        'fdc_skus': 'list[FDCSkuRequest]',
        'height': 'float',
        'is_li_battery': 'bool',
        'length': 'float',
        'li_battery_type': 'str',
        'name_en': 'str',
        'name_zh': 'str',
        'origin': 'str',
        'price': 'Amount',
        'remark': 'str',
        'sku_number': 'str',
        'tariff_code': 'str',
        'weight': 'float',
        'width': 'float'
    }

    attribute_map = {
        'elec_qualification_id': 'elecQualificationId',
        'fdc_skus': 'fdcSkus',
        'height': 'height',
        'is_li_battery': 'isLiBattery',
        'length': 'length',
        'li_battery_type': 'liBatteryType',
        'name_en': 'nameEn',
        'name_zh': 'nameZh',
        'origin': 'origin',
        'price': 'price',
        'remark': 'remark',
        'sku_number': 'skuNumber',
        'tariff_code': 'tariffCode',
        'weight': 'weight',
        'width': 'width'
    }

    def __init__(self, elec_qualification_id=None, fdc_skus=None, height=None, is_li_battery=None, length=None, li_battery_type=None, name_en=None, name_zh=None, origin=None, price=None, remark=None, sku_number=None, tariff_code=None, weight=None, width=None):  # noqa: E501
        """SkuRequest - a model defined in Swagger"""  # noqa: E501
        self._elec_qualification_id = None
        self._fdc_skus = None
        self._height = None
        self._is_li_battery = None
        self._length = None
        self._li_battery_type = None
        self._name_en = None
        self._name_zh = None
        self._origin = None
        self._price = None
        self._remark = None
        self._sku_number = None
        self._tariff_code = None
        self._weight = None
        self._width = None
        self.discriminator = None
        if elec_qualification_id is not None:
            self.elec_qualification_id = elec_qualification_id
        if fdc_skus is not None:
            self.fdc_skus = fdc_skus
        if height is not None:
            self.height = height
        if is_li_battery is not None:
            self.is_li_battery = is_li_battery
        if length is not None:
            self.length = length
        if li_battery_type is not None:
            self.li_battery_type = li_battery_type
        if name_en is not None:
            self.name_en = name_en
        if name_zh is not None:
            self.name_zh = name_zh
        if origin is not None:
            self.origin = origin
        if price is not None:
            self.price = price
        if remark is not None:
            self.remark = remark
        if sku_number is not None:
            self.sku_number = sku_number
        if tariff_code is not None:
            self.tariff_code = tariff_code
        if weight is not None:
            self.weight = weight
        if width is not None:
            self.width = width

    @property
    def elec_qualification_id(self):
        """Gets the elec_qualification_id of this SkuRequest.  # noqa: E501

        The unique identifier of the battery's electric qualification, which indicates that the battery has a certificate of approval for global shipping.<br><br>This value is returned in the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/battery_qualifications/methods/getBatteryQualifications\" target=\"_blank\">getBatteryQualifications</a> method.  # noqa: E501

        :return: The elec_qualification_id of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._elec_qualification_id

    @elec_qualification_id.setter
    def elec_qualification_id(self, elec_qualification_id):
        """Sets the elec_qualification_id of this SkuRequest.

        The unique identifier of the battery's electric qualification, which indicates that the battery has a certificate of approval for global shipping.<br><br>This value is returned in the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/battery_qualifications/methods/getBatteryQualifications\" target=\"_blank\">getBatteryQualifications</a> method.  # noqa: E501

        :param elec_qualification_id: The elec_qualification_id of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._elec_qualification_id = elec_qualification_id

    @property
    def fdc_skus(self):
        """Gets the fdc_skus of this SkuRequest.  # noqa: E501

        This array lists the FDC SKUs associated with the item. An FDC SKU is the SKU label in a forward deployment center.<div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> Please contact customer service before using these fields.</p></div>  # noqa: E501

        :return: The fdc_skus of this SkuRequest.  # noqa: E501
        :rtype: list[FDCSkuRequest]
        """
        return self._fdc_skus

    @fdc_skus.setter
    def fdc_skus(self, fdc_skus):
        """Sets the fdc_skus of this SkuRequest.

        This array lists the FDC SKUs associated with the item. An FDC SKU is the SKU label in a forward deployment center.<div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> Please contact customer service before using these fields.</p></div>  # noqa: E501

        :param fdc_skus: The fdc_skus of this SkuRequest.  # noqa: E501
        :type: list[FDCSkuRequest]
        """

        self._fdc_skus = fdc_skus

    @property
    def height(self):
        """Gets the height of this SkuRequest.  # noqa: E501

        The height of the item in centimeters.  # noqa: E501

        :return: The height of this SkuRequest.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SkuRequest.

        The height of the item in centimeters.  # noqa: E501

        :param height: The height of this SkuRequest.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def is_li_battery(self):
        """Gets the is_li_battery of this SkuRequest.  # noqa: E501

        This boolean indicates if the item contains a battery.  # noqa: E501

        :return: The is_li_battery of this SkuRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_li_battery

    @is_li_battery.setter
    def is_li_battery(self, is_li_battery):
        """Sets the is_li_battery of this SkuRequest.

        This boolean indicates if the item contains a battery.  # noqa: E501

        :param is_li_battery: The is_li_battery of this SkuRequest.  # noqa: E501
        :type: bool
        """

        self._is_li_battery = is_li_battery

    @property
    def length(self):
        """Gets the length of this SkuRequest.  # noqa: E501

        The length of the item in centimeters.  # noqa: E501

        :return: The length of this SkuRequest.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SkuRequest.

        The length of the item in centimeters.  # noqa: E501

        :param length: The length of this SkuRequest.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def li_battery_type(self):
        """Gets the li_battery_type of this SkuRequest.  # noqa: E501

        If the item contains a battery, this field indicates the type of battery the item contains. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:LiBatteryTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The li_battery_type of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._li_battery_type

    @li_battery_type.setter
    def li_battery_type(self, li_battery_type):
        """Sets the li_battery_type of this SkuRequest.

        If the item contains a battery, this field indicates the type of battery the item contains. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:LiBatteryTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param li_battery_type: The li_battery_type of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._li_battery_type = li_battery_type

    @property
    def name_en(self):
        """Gets the name_en of this SkuRequest.  # noqa: E501

        The English name of the item.  # noqa: E501

        :return: The name_en of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """Sets the name_en of this SkuRequest.

        The English name of the item.  # noqa: E501

        :param name_en: The name_en of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._name_en = name_en

    @property
    def name_zh(self):
        """Gets the name_zh of this SkuRequest.  # noqa: E501

        The Chinese name of the item.  # noqa: E501

        :return: The name_zh of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._name_zh

    @name_zh.setter
    def name_zh(self, name_zh):
        """Sets the name_zh of this SkuRequest.

        The Chinese name of the item.  # noqa: E501

        :param name_zh: The name_zh of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._name_zh = name_zh

    @property
    def origin(self):
        """Gets the origin of this SkuRequest.  # noqa: E501

        The country of origin of the item.  # noqa: E501

        :return: The origin of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SkuRequest.

        The country of origin of the item.  # noqa: E501

        :param origin: The origin of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def price(self):
        """Gets the price of this SkuRequest.  # noqa: E501


        :return: The price of this SkuRequest.  # noqa: E501
        :rtype: Amount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SkuRequest.


        :param price: The price of this SkuRequest.  # noqa: E501
        :type: Amount
        """

        self._price = price

    @property
    def remark(self):
        """Gets the remark of this SkuRequest.  # noqa: E501

        A remark to the seller themselves.  # noqa: E501

        :return: The remark of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this SkuRequest.

        A remark to the seller themselves.  # noqa: E501

        :param remark: The remark of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def sku_number(self):
        """Gets the sku_number of this SkuRequest.  # noqa: E501

        The stock keeping unit (SKU) identifier of the item.  # noqa: E501

        :return: The sku_number of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._sku_number

    @sku_number.setter
    def sku_number(self, sku_number):
        """Sets the sku_number of this SkuRequest.

        The stock keeping unit (SKU) identifier of the item.  # noqa: E501

        :param sku_number: The sku_number of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._sku_number = sku_number

    @property
    def tariff_code(self):
        """Gets the tariff_code of this SkuRequest.  # noqa: E501

        The Harmonized System code for custom declaration. This value declares the category of the item..  # noqa: E501

        :return: The tariff_code of this SkuRequest.  # noqa: E501
        :rtype: str
        """
        return self._tariff_code

    @tariff_code.setter
    def tariff_code(self, tariff_code):
        """Sets the tariff_code of this SkuRequest.

        The Harmonized System code for custom declaration. This value declares the category of the item..  # noqa: E501

        :param tariff_code: The tariff_code of this SkuRequest.  # noqa: E501
        :type: str
        """

        self._tariff_code = tariff_code

    @property
    def weight(self):
        """Gets the weight of this SkuRequest.  # noqa: E501

        The weight of the item in grams.  # noqa: E501

        :return: The weight of this SkuRequest.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SkuRequest.

        The weight of the item in grams.  # noqa: E501

        :param weight: The weight of this SkuRequest.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this SkuRequest.  # noqa: E501

        The width of the item in centimeters.  # noqa: E501

        :return: The width of this SkuRequest.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SkuRequest.

        The width of the item in centimeters.  # noqa: E501

        :param width: The width of this SkuRequest.  # noqa: E501
        :type: float
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkuRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkuRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
