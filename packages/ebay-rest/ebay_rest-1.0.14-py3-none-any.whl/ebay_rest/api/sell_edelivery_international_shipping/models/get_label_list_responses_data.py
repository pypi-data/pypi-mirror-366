# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLabelListResponsesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base64_str': 'str',
        'message': 'str',
        'result_code': 'str',
        'tracking_number': 'str'
    }

    attribute_map = {
        'base64_str': 'base64Str',
        'message': 'message',
        'result_code': 'resultCode',
        'tracking_number': 'trackingNumber'
    }

    def __init__(self, base64_str=None, message=None, result_code=None, tracking_number=None):  # noqa: E501
        """GetLabelListResponsesData - a model defined in Swagger"""  # noqa: E501
        self._base64_str = None
        self._message = None
        self._result_code = None
        self._tracking_number = None
        self.discriminator = None
        if base64_str is not None:
            self.base64_str = base64_str
        if message is not None:
            self.message = message
        if result_code is not None:
            self.result_code = result_code
        if tracking_number is not None:
            self.tracking_number = tracking_number

    @property
    def base64_str(self):
        """Gets the base64_str of this GetLabelListResponsesData.  # noqa: E501

        The base 64 string value for a shipping label.<br><br>This string value can be converted to a PDF file.  # noqa: E501

        :return: The base64_str of this GetLabelListResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._base64_str

    @base64_str.setter
    def base64_str(self, base64_str):
        """Sets the base64_str of this GetLabelListResponsesData.

        The base 64 string value for a shipping label.<br><br>This string value can be converted to a PDF file.  # noqa: E501

        :param base64_str: The base64_str of this GetLabelListResponsesData.  # noqa: E501
        :type: str
        """

        self._base64_str = base64_str

    @property
    def message(self):
        """Gets the message of this GetLabelListResponsesData.  # noqa: E501

        A message relating to the status of the shipping label retrieval process.  # noqa: E501

        :return: The message of this GetLabelListResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetLabelListResponsesData.

        A message relating to the status of the shipping label retrieval process.  # noqa: E501

        :param message: The message of this GetLabelListResponsesData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def result_code(self):
        """Gets the result_code of this GetLabelListResponsesData.  # noqa: E501

        The result code detailing the results of the shipping label retrieval process.<br><br>For example, a result code of <code>200</code> indicates that at least one shipping label was successfully retrieved.  # noqa: E501

        :return: The result_code of this GetLabelListResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this GetLabelListResponsesData.

        The result code detailing the results of the shipping label retrieval process.<br><br>For example, a result code of <code>200</code> indicates that at least one shipping label was successfully retrieved.  # noqa: E501

        :param result_code: The result_code of this GetLabelListResponsesData.  # noqa: E501
        :type: str
        """

        self._result_code = result_code

    @property
    def tracking_number(self):
        """Gets the tracking_number of this GetLabelListResponsesData.  # noqa: E501

        The tracking number for which the shipping label is being retrieved.  # noqa: E501

        :return: The tracking_number of this GetLabelListResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this GetLabelListResponsesData.

        The tracking number for which the shipping label is being retrieved.  # noqa: E501

        :param tracking_number: The tracking_number of this GetLabelListResponsesData.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLabelListResponsesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLabelListResponsesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
