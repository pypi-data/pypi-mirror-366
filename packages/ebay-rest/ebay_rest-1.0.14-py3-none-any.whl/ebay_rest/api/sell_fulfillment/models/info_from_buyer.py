# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.  # noqa: E501

    OpenAPI spec version: v1.20.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InfoFromBuyer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_on_hold': 'bool',
        'note': 'str',
        'return_shipment_tracking': 'list[TrackingInfo]'
    }

    attribute_map = {
        'content_on_hold': 'contentOnHold',
        'note': 'note',
        'return_shipment_tracking': 'returnShipmentTracking'
    }

    def __init__(self, content_on_hold=None, note=None, return_shipment_tracking=None):  # noqa: E501
        """InfoFromBuyer - a model defined in Swagger"""  # noqa: E501
        self._content_on_hold = None
        self._note = None
        self._return_shipment_tracking = None
        self.discriminator = None
        if content_on_hold is not None:
            self.content_on_hold = content_on_hold
        if note is not None:
            self.note = note
        if return_shipment_tracking is not None:
            self.return_shipment_tracking = return_shipment_tracking

    @property
    def content_on_hold(self):
        """Gets the content_on_hold of this InfoFromBuyer.  # noqa: E501

        When the value of this field is <code>true</code> it indicates that the buyer's note regarding the payment dispute (i.e., the <b>buyerProvided.note</b> field,) is on hold. When this is the case, the <b>buyerProvided.note</b> field will not be returned.<br><br>When the value of this field is <code>false</code>, it is not returned.  # noqa: E501

        :return: The content_on_hold of this InfoFromBuyer.  # noqa: E501
        :rtype: bool
        """
        return self._content_on_hold

    @content_on_hold.setter
    def content_on_hold(self, content_on_hold):
        """Sets the content_on_hold of this InfoFromBuyer.

        When the value of this field is <code>true</code> it indicates that the buyer's note regarding the payment dispute (i.e., the <b>buyerProvided.note</b> field,) is on hold. When this is the case, the <b>buyerProvided.note</b> field will not be returned.<br><br>When the value of this field is <code>false</code>, it is not returned.  # noqa: E501

        :param content_on_hold: The content_on_hold of this InfoFromBuyer.  # noqa: E501
        :type: bool
        """

        self._content_on_hold = content_on_hold

    @property
    def note(self):
        """Gets the note of this InfoFromBuyer.  # noqa: E501

        This field shows any note that was left by the buyer in regard to the dispute.  # noqa: E501

        :return: The note of this InfoFromBuyer.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InfoFromBuyer.

        This field shows any note that was left by the buyer in regard to the dispute.  # noqa: E501

        :param note: The note of this InfoFromBuyer.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def return_shipment_tracking(self):
        """Gets the return_shipment_tracking of this InfoFromBuyer.  # noqa: E501

        This array shows shipment tracking information for one or more shipping packages being returned to the buyer after a payment dispute.  # noqa: E501

        :return: The return_shipment_tracking of this InfoFromBuyer.  # noqa: E501
        :rtype: list[TrackingInfo]
        """
        return self._return_shipment_tracking

    @return_shipment_tracking.setter
    def return_shipment_tracking(self, return_shipment_tracking):
        """Sets the return_shipment_tracking of this InfoFromBuyer.

        This array shows shipment tracking information for one or more shipping packages being returned to the buyer after a payment dispute.  # noqa: E501

        :param return_shipment_tracking: The return_shipment_tracking of this InfoFromBuyer.  # noqa: E501
        :type: list[TrackingInfo]
        """

        self._return_shipment_tracking = return_shipment_tracking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoFromBuyer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoFromBuyer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
