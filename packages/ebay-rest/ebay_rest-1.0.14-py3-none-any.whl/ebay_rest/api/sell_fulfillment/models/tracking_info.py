# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.  # noqa: E501

    OpenAPI spec version: v1.20.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_tracking_number': 'str',
        'shipping_carrier_code': 'str'
    }

    attribute_map = {
        'shipment_tracking_number': 'shipmentTrackingNumber',
        'shipping_carrier_code': 'shippingCarrierCode'
    }

    def __init__(self, shipment_tracking_number=None, shipping_carrier_code=None):  # noqa: E501
        """TrackingInfo - a model defined in Swagger"""  # noqa: E501
        self._shipment_tracking_number = None
        self._shipping_carrier_code = None
        self.discriminator = None
        if shipment_tracking_number is not None:
            self.shipment_tracking_number = shipment_tracking_number
        if shipping_carrier_code is not None:
            self.shipping_carrier_code = shipping_carrier_code

    @property
    def shipment_tracking_number(self):
        """Gets the shipment_tracking_number of this TrackingInfo.  # noqa: E501

        This string value represents the shipment tracking number of the package.  # noqa: E501

        :return: The shipment_tracking_number of this TrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._shipment_tracking_number

    @shipment_tracking_number.setter
    def shipment_tracking_number(self, shipment_tracking_number):
        """Sets the shipment_tracking_number of this TrackingInfo.

        This string value represents the shipment tracking number of the package.  # noqa: E501

        :param shipment_tracking_number: The shipment_tracking_number of this TrackingInfo.  # noqa: E501
        :type: str
        """

        self._shipment_tracking_number = shipment_tracking_number

    @property
    def shipping_carrier_code(self):
        """Gets the shipping_carrier_code of this TrackingInfo.  # noqa: E501

        This string value represents the shipping carrier used to ship the package.  # noqa: E501

        :return: The shipping_carrier_code of this TrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._shipping_carrier_code

    @shipping_carrier_code.setter
    def shipping_carrier_code(self, shipping_carrier_code):
        """Sets the shipping_carrier_code of this TrackingInfo.

        This string value represents the shipping carrier used to ship the package.  # noqa: E501

        :param shipping_carrier_code: The shipping_carrier_code of this TrackingInfo.  # noqa: E501
        :type: str
        """

        self._shipping_carrier_code = shipping_carrier_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
