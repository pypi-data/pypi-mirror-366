# coding: utf-8

"""
    Charity API

    The Charity API allows third-party developers to search for and access details on supported charitable organizations.  # noqa: E501

    OpenAPI spec version: v1.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CharityOrg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charity_org_id': 'str',
        'description': 'str',
        'location': 'Location',
        'logo_image': 'Image',
        'mission_statement': 'str',
        'name': 'str',
        'registration_id': 'str',
        'website': 'str'
    }

    attribute_map = {
        'charity_org_id': 'charityOrgId',
        'description': 'description',
        'location': 'location',
        'logo_image': 'logoImage',
        'mission_statement': 'missionStatement',
        'name': 'name',
        'registration_id': 'registrationId',
        'website': 'website'
    }

    def __init__(self, charity_org_id=None, description=None, location=None, logo_image=None, mission_statement=None, name=None, registration_id=None, website=None):  # noqa: E501
        """CharityOrg - a model defined in Swagger"""  # noqa: E501
        self._charity_org_id = None
        self._description = None
        self._location = None
        self._logo_image = None
        self._mission_statement = None
        self._name = None
        self._registration_id = None
        self._website = None
        self.discriminator = None
        if charity_org_id is not None:
            self.charity_org_id = charity_org_id
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if logo_image is not None:
            self.logo_image = logo_image
        if mission_statement is not None:
            self.mission_statement = mission_statement
        if name is not None:
            self.name = name
        if registration_id is not None:
            self.registration_id = registration_id
        if website is not None:
            self.website = website

    @property
    def charity_org_id(self):
        """Gets the charity_org_id of this CharityOrg.  # noqa: E501

        The ID of the charitable organization.  # noqa: E501

        :return: The charity_org_id of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._charity_org_id

    @charity_org_id.setter
    def charity_org_id(self, charity_org_id):
        """Sets the charity_org_id of this CharityOrg.

        The ID of the charitable organization.  # noqa: E501

        :param charity_org_id: The charity_org_id of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._charity_org_id = charity_org_id

    @property
    def description(self):
        """Gets the description of this CharityOrg.  # noqa: E501

        The description of the charitable organization.  # noqa: E501

        :return: The description of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CharityOrg.

        The description of the charitable organization.  # noqa: E501

        :param description: The description of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this CharityOrg.  # noqa: E501


        :return: The location of this CharityOrg.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CharityOrg.


        :param location: The location of this CharityOrg.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def logo_image(self):
        """Gets the logo_image of this CharityOrg.  # noqa: E501


        :return: The logo_image of this CharityOrg.  # noqa: E501
        :rtype: Image
        """
        return self._logo_image

    @logo_image.setter
    def logo_image(self, logo_image):
        """Sets the logo_image of this CharityOrg.


        :param logo_image: The logo_image of this CharityOrg.  # noqa: E501
        :type: Image
        """

        self._logo_image = logo_image

    @property
    def mission_statement(self):
        """Gets the mission_statement of this CharityOrg.  # noqa: E501

        The mission statement of the charitable organization.  # noqa: E501

        :return: The mission_statement of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._mission_statement

    @mission_statement.setter
    def mission_statement(self, mission_statement):
        """Sets the mission_statement of this CharityOrg.

        The mission statement of the charitable organization.  # noqa: E501

        :param mission_statement: The mission_statement of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._mission_statement = mission_statement

    @property
    def name(self):
        """Gets the name of this CharityOrg.  # noqa: E501

        The name of the charitable organization.  # noqa: E501

        :return: The name of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CharityOrg.

        The name of the charitable organization.  # noqa: E501

        :param name: The name of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registration_id(self):
        """Gets the registration_id of this CharityOrg.  # noqa: E501

        The registration ID for the charitable organization.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> For the US marketplace, this is the EIN.</span>  # noqa: E501

        :return: The registration_id of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this CharityOrg.

        The registration ID for the charitable organization.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> For the US marketplace, this is the EIN.</span>  # noqa: E501

        :param registration_id: The registration_id of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._registration_id = registration_id

    @property
    def website(self):
        """Gets the website of this CharityOrg.  # noqa: E501

        The link to the website for the charitable organization.  # noqa: E501

        :return: The website of this CharityOrg.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CharityOrg.

        The link to the website for the charitable organization.  # noqa: E501

        :param website: The website of this CharityOrg.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CharityOrg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CharityOrg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
