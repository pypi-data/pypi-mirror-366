# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.  # noqa: E501

    OpenAPI spec version: v1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetCompatibilityMetadataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compatibility_properties': 'list[CompatibilityProperty]'
    }

    attribute_map = {
        'compatibility_properties': 'compatibilityProperties'
    }

    def __init__(self, compatibility_properties=None):  # noqa: E501
        """GetCompatibilityMetadataResponse - a model defined in Swagger"""  # noqa: E501
        self._compatibility_properties = None
        self.discriminator = None
        if compatibility_properties is not None:
            self.compatibility_properties = compatibility_properties

    @property
    def compatibility_properties(self):
        """Gets the compatibility_properties of this GetCompatibilityMetadataResponse.  # noqa: E501

        This container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.  # noqa: E501

        :return: The compatibility_properties of this GetCompatibilityMetadataResponse.  # noqa: E501
        :rtype: list[CompatibilityProperty]
        """
        return self._compatibility_properties

    @compatibility_properties.setter
    def compatibility_properties(self, compatibility_properties):
        """Sets the compatibility_properties of this GetCompatibilityMetadataResponse.

        This container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.  # noqa: E501

        :param compatibility_properties: The compatibility_properties of this GetCompatibilityMetadataResponse.  # noqa: E501
        :type: list[CompatibilityProperty]
        """

        self._compatibility_properties = compatibility_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCompatibilityMetadataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCompatibilityMetadataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
