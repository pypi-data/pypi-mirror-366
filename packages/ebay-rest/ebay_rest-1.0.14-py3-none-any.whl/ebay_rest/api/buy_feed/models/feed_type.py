# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeedType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'feed_type_id': 'str',
        'supported_feeds': 'list[SupportedFeed]'
    }

    attribute_map = {
        'description': 'description',
        'feed_type_id': 'feedTypeId',
        'supported_feeds': 'supportedFeeds'
    }

    def __init__(self, description=None, feed_type_id=None, supported_feeds=None):  # noqa: E501
        """FeedType - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._feed_type_id = None
        self._supported_feeds = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if feed_type_id is not None:
            self.feed_type_id = feed_type_id
        if supported_feeds is not None:
            self.supported_feeds = supported_feeds

    @property
    def description(self):
        """Gets the description of this FeedType.  # noqa: E501

        A description of the feed type.  # noqa: E501

        :return: The description of this FeedType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeedType.

        A description of the feed type.  # noqa: E501

        :param description: The description of this FeedType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def feed_type_id(self):
        """Gets the feed_type_id of this FeedType.  # noqa: E501

        The unique identifier of the feed type.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> for additional details.</span>  # noqa: E501

        :return: The feed_type_id of this FeedType.  # noqa: E501
        :rtype: str
        """
        return self._feed_type_id

    @feed_type_id.setter
    def feed_type_id(self, feed_type_id):
        """Sets the feed_type_id of this FeedType.

        The unique identifier of the feed type.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> for additional details.</span>  # noqa: E501

        :param feed_type_id: The feed_type_id of this FeedType.  # noqa: E501
        :type: str
        """

        self._feed_type_id = feed_type_id

    @property
    def supported_feeds(self):
        """Gets the supported_feeds of this FeedType.  # noqa: E501

        An array of the feed files of the indicated feed type that are available to be downloaded.  # noqa: E501

        :return: The supported_feeds of this FeedType.  # noqa: E501
        :rtype: list[SupportedFeed]
        """
        return self._supported_feeds

    @supported_feeds.setter
    def supported_feeds(self, supported_feeds):
        """Sets the supported_feeds of this FeedType.

        An array of the feed files of the indicated feed type that are available to be downloaded.  # noqa: E501

        :param supported_feeds: The supported_feeds of this FeedType.  # noqa: E501
        :type: list[SupportedFeed]
        """

        self._supported_feeds = supported_feeds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeedType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
