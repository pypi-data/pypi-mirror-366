# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListingMarketplaceFeedTypeConstraint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'listing_category_ids': 'list[str]',
        'listing_marketplace_id': 'str'
    }

    attribute_map = {
        'listing_category_ids': 'listingCategoryIds',
        'listing_marketplace_id': 'listingMarketplaceId'
    }

    def __init__(self, listing_category_ids=None, listing_marketplace_id=None):  # noqa: E501
        """ListingMarketplaceFeedTypeConstraint - a model defined in Swagger"""  # noqa: E501
        self._listing_category_ids = None
        self._listing_marketplace_id = None
        self.discriminator = None
        if listing_category_ids is not None:
            self.listing_category_ids = listing_category_ids
        if listing_marketplace_id is not None:
            self.listing_marketplace_id = listing_marketplace_id

    @property
    def listing_category_ids(self):
        """Gets the listing_category_ids of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501

        An array of the eBay categories the application can access in a feed. See the <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/overview.html'>Taxonomy API</a> for details about obtaining a list eBay L1 categories. The category is expressed as the category's <b>categoryId</b>, not its <b>categoryName</b>; e.g.,  <code>172008</code>, not <code>Gift Cards &amp; Coupons</code>.<br /><br />If no <b>categoryIds</b> are listed, the application can access all categories in the specified marketplace.  # noqa: E501

        :return: The listing_category_ids of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501
        :rtype: list[str]
        """
        return self._listing_category_ids

    @listing_category_ids.setter
    def listing_category_ids(self, listing_category_ids):
        """Sets the listing_category_ids of this ListingMarketplaceFeedTypeConstraint.

        An array of the eBay categories the application can access in a feed. See the <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/overview.html'>Taxonomy API</a> for details about obtaining a list eBay L1 categories. The category is expressed as the category's <b>categoryId</b>, not its <b>categoryName</b>; e.g.,  <code>172008</code>, not <code>Gift Cards &amp; Coupons</code>.<br /><br />If no <b>categoryIds</b> are listed, the application can access all categories in the specified marketplace.  # noqa: E501

        :param listing_category_ids: The listing_category_ids of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501
        :type: list[str]
        """

        self._listing_category_ids = listing_category_ids

    @property
    def listing_marketplace_id(self):
        """Gets the listing_marketplace_id of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501

        This enum value indicates an eBay marketplace for which the application can access feed files for the corresponding feed type.<br/><br/><b>Example:</b> <code>EBAY_US</code> for the U.S. or <code>EBAY_DE</code> for Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The listing_marketplace_id of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._listing_marketplace_id

    @listing_marketplace_id.setter
    def listing_marketplace_id(self, listing_marketplace_id):
        """Sets the listing_marketplace_id of this ListingMarketplaceFeedTypeConstraint.

        This enum value indicates an eBay marketplace for which the application can access feed files for the corresponding feed type.<br/><br/><b>Example:</b> <code>EBAY_US</code> for the U.S. or <code>EBAY_DE</code> for Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param listing_marketplace_id: The listing_marketplace_id of this ListingMarketplaceFeedTypeConstraint.  # noqa: E501
        :type: str
        """

        self._listing_marketplace_id = listing_marketplace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListingMarketplaceFeedTypeConstraint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingMarketplaceFeedTypeConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
