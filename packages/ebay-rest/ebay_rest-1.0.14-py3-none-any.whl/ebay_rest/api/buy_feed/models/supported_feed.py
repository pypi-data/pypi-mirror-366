# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportedFeed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_scopes': 'list[str]',
        'constraint': 'Constraint',
        'feed_scope': 'str',
        'look_back': 'TimeDuration',
        'status': 'str',
        'supported_schemas': 'list[SupportedSchema]'
    }

    attribute_map = {
        'authorization_scopes': 'authorizationScopes',
        'constraint': 'constraint',
        'feed_scope': 'feedScope',
        'look_back': 'lookBack',
        'status': 'status',
        'supported_schemas': 'supportedSchemas'
    }

    def __init__(self, authorization_scopes=None, constraint=None, feed_scope=None, look_back=None, status=None, supported_schemas=None):  # noqa: E501
        """SupportedFeed - a model defined in Swagger"""  # noqa: E501
        self._authorization_scopes = None
        self._constraint = None
        self._feed_scope = None
        self._look_back = None
        self._status = None
        self._supported_schemas = None
        self.discriminator = None
        if authorization_scopes is not None:
            self.authorization_scopes = authorization_scopes
        if constraint is not None:
            self.constraint = constraint
        if feed_scope is not None:
            self.feed_scope = feed_scope
        if look_back is not None:
            self.look_back = look_back
        if status is not None:
            self.status = status
        if supported_schemas is not None:
            self.supported_schemas = supported_schemas

    @property
    def authorization_scopes(self):
        """Gets the authorization_scopes of this SupportedFeed.  # noqa: E501

        The oauth authorization scopes which grant access to the feed files.<br /><br />Currently the only applicable authorization scope is <code>https://api.ebay.com/oauth/api_scope/buy.item.feed</code>.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> You can view your application's oauth scopes on the <a href='developer.ebay.com/my/keys'>Application Keys</a> page.</span>  # noqa: E501

        :return: The authorization_scopes of this SupportedFeed.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorization_scopes

    @authorization_scopes.setter
    def authorization_scopes(self, authorization_scopes):
        """Sets the authorization_scopes of this SupportedFeed.

        The oauth authorization scopes which grant access to the feed files.<br /><br />Currently the only applicable authorization scope is <code>https://api.ebay.com/oauth/api_scope/buy.item.feed</code>.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> You can view your application's oauth scopes on the <a href='developer.ebay.com/my/keys'>Application Keys</a> page.</span>  # noqa: E501

        :param authorization_scopes: The authorization_scopes of this SupportedFeed.  # noqa: E501
        :type: list[str]
        """

        self._authorization_scopes = authorization_scopes

    @property
    def constraint(self):
        """Gets the constraint of this SupportedFeed.  # noqa: E501


        :return: The constraint of this SupportedFeed.  # noqa: E501
        :rtype: Constraint
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this SupportedFeed.


        :param constraint: The constraint of this SupportedFeed.  # noqa: E501
        :type: Constraint
        """

        self._constraint = constraint

    @property
    def feed_scope(self):
        """Gets the feed_scope of this SupportedFeed.  # noqa: E501

        Specifies the frequency with which the feed file is made available (<code>HOURLY</code>, <code>DAILY</code>, <code>WEEKLY</code>).<br /><br />Currently only <code>DAILY</code> and <code>HOURLY</code> are supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedScopeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The feed_scope of this SupportedFeed.  # noqa: E501
        :rtype: str
        """
        return self._feed_scope

    @feed_scope.setter
    def feed_scope(self, feed_scope):
        """Sets the feed_scope of this SupportedFeed.

        Specifies the frequency with which the feed file is made available (<code>HOURLY</code>, <code>DAILY</code>, <code>WEEKLY</code>).<br /><br />Currently only <code>DAILY</code> and <code>HOURLY</code> are supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedScopeEnum'>eBay API documentation</a>  # noqa: E501

        :param feed_scope: The feed_scope of this SupportedFeed.  # noqa: E501
        :type: str
        """

        self._feed_scope = feed_scope

    @property
    def look_back(self):
        """Gets the look_back of this SupportedFeed.  # noqa: E501


        :return: The look_back of this SupportedFeed.  # noqa: E501
        :rtype: TimeDuration
        """
        return self._look_back

    @look_back.setter
    def look_back(self, look_back):
        """Sets the look_back of this SupportedFeed.


        :param look_back: The look_back of this SupportedFeed.  # noqa: E501
        :type: TimeDuration
        """

        self._look_back = look_back

    @property
    def status(self):
        """Gets the status of this SupportedFeed.  # noqa: E501

        The status for this feed. One of <code>ACTIVE</code>, <code>PAUSED</code>, or <code>DEPRECATED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedStatusEnum'>eBay API documentation</a>  # noqa: E501

        :return: The status of this SupportedFeed.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupportedFeed.

        The status for this feed. One of <code>ACTIVE</code>, <code>PAUSED</code>, or <code>DEPRECATED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedStatusEnum'>eBay API documentation</a>  # noqa: E501

        :param status: The status of this SupportedFeed.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def supported_schemas(self):
        """Gets the supported_schemas of this SupportedFeed.  # noqa: E501

        An array of the supported <b>Feed</b> API schemas for this feed type.  # noqa: E501

        :return: The supported_schemas of this SupportedFeed.  # noqa: E501
        :rtype: list[SupportedSchema]
        """
        return self._supported_schemas

    @supported_schemas.setter
    def supported_schemas(self, supported_schemas):
        """Sets the supported_schemas of this SupportedFeed.

        An array of the supported <b>Feed</b> API schemas for this feed type.  # noqa: E501

        :param supported_schemas: The supported_schemas of this SupportedFeed.  # noqa: E501
        :type: list[SupportedSchema]
        """

        self._supported_schemas = supported_schemas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportedFeed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedFeed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
