# coding: utf-8

"""
    Browse API

    The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.  # noqa: E501

    OpenAPI spec version: v1.20.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AspectDistribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_value_distributions': 'list[AspectValueDistribution]',
        'localized_aspect_name': 'str'
    }

    attribute_map = {
        'aspect_value_distributions': 'aspectValueDistributions',
        'localized_aspect_name': 'localizedAspectName'
    }

    def __init__(self, aspect_value_distributions=None, localized_aspect_name=None):  # noqa: E501
        """AspectDistribution - a model defined in Swagger"""  # noqa: E501
        self._aspect_value_distributions = None
        self._localized_aspect_name = None
        self.discriminator = None
        if aspect_value_distributions is not None:
            self.aspect_value_distributions = aspect_value_distributions
        if localized_aspect_name is not None:
            self.localized_aspect_name = localized_aspect_name

    @property
    def aspect_value_distributions(self):
        """Gets the aspect_value_distributions of this AspectDistribution.  # noqa: E501

        An array of containers for the various values of the aspect and the match count, and a HATEOAS reference (<code>refinementHref</code>) for this aspect.  # noqa: E501

        :return: The aspect_value_distributions of this AspectDistribution.  # noqa: E501
        :rtype: list[AspectValueDistribution]
        """
        return self._aspect_value_distributions

    @aspect_value_distributions.setter
    def aspect_value_distributions(self, aspect_value_distributions):
        """Sets the aspect_value_distributions of this AspectDistribution.

        An array of containers for the various values of the aspect and the match count, and a HATEOAS reference (<code>refinementHref</code>) for this aspect.  # noqa: E501

        :param aspect_value_distributions: The aspect_value_distributions of this AspectDistribution.  # noqa: E501
        :type: list[AspectValueDistribution]
        """

        self._aspect_value_distributions = aspect_value_distributions

    @property
    def localized_aspect_name(self):
        """Gets the localized_aspect_name of this AspectDistribution.  # noqa: E501

        The name of an aspect, such as <i>Brand</i>, <i>Color</i>, etc.  # noqa: E501

        :return: The localized_aspect_name of this AspectDistribution.  # noqa: E501
        :rtype: str
        """
        return self._localized_aspect_name

    @localized_aspect_name.setter
    def localized_aspect_name(self, localized_aspect_name):
        """Sets the localized_aspect_name of this AspectDistribution.

        The name of an aspect, such as <i>Brand</i>, <i>Color</i>, etc.  # noqa: E501

        :param localized_aspect_name: The localized_aspect_name of this AspectDistribution.  # noqa: E501
        :type: str
        """

        self._localized_aspect_name = localized_aspect_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AspectDistribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AspectDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
