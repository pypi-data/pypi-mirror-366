# coding: utf-8

"""
    Account v2 API

    This API allows sellers to retrieve and manage their custom shipping rate tables. In addition, this API also provides sellers in mainland China methods to configure split-payouts between two separate payment instruments.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RateUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_cost': 'Amount',
        'rate_id': 'str',
        'shipping_cost': 'Amount'
    }

    attribute_map = {
        'additional_cost': 'additionalCost',
        'rate_id': 'rateId',
        'shipping_cost': 'shippingCost'
    }

    def __init__(self, additional_cost=None, rate_id=None, shipping_cost=None):  # noqa: E501
        """RateUpdate - a model defined in Swagger"""  # noqa: E501
        self._additional_cost = None
        self._rate_id = None
        self._shipping_cost = None
        self.discriminator = None
        if additional_cost is not None:
            self.additional_cost = additional_cost
        if rate_id is not None:
            self.rate_id = rate_id
        if shipping_cost is not None:
            self.shipping_cost = shipping_cost

    @property
    def additional_cost(self):
        """Gets the additional_cost of this RateUpdate.  # noqa: E501


        :return: The additional_cost of this RateUpdate.  # noqa: E501
        :rtype: Amount
        """
        return self._additional_cost

    @additional_cost.setter
    def additional_cost(self, additional_cost):
        """Sets the additional_cost of this RateUpdate.


        :param additional_cost: The additional_cost of this RateUpdate.  # noqa: E501
        :type: Amount
        """

        self._additional_cost = additional_cost

    @property
    def rate_id(self):
        """Gets the rate_id of this RateUpdate.  # noqa: E501

        The identifier for the rate object.<br/><br/><span class=\"tablenote\"><strong>Note:</strong> This is a string automatically assigned by the system when the rate object is created. It cannot be changed or updated.</span>  # noqa: E501

        :return: The rate_id of this RateUpdate.  # noqa: E501
        :rtype: str
        """
        return self._rate_id

    @rate_id.setter
    def rate_id(self, rate_id):
        """Sets the rate_id of this RateUpdate.

        The identifier for the rate object.<br/><br/><span class=\"tablenote\"><strong>Note:</strong> This is a string automatically assigned by the system when the rate object is created. It cannot be changed or updated.</span>  # noqa: E501

        :param rate_id: The rate_id of this RateUpdate.  # noqa: E501
        :type: str
        """

        self._rate_id = rate_id

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this RateUpdate.  # noqa: E501


        :return: The shipping_cost of this RateUpdate.  # noqa: E501
        :rtype: Amount
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this RateUpdate.


        :param shipping_cost: The shipping_cost of this RateUpdate.  # noqa: E501
        :type: Amount
        """

        self._shipping_cost = shipping_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RateUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
