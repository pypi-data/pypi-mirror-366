# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpecialServiceDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'insurance_fee': 'str',
        'packaging_type': 'str',
        'signature_type': 'str',
        'special_service_types': 'list[str]'
    }

    attribute_map = {
        'insurance_fee': 'insuranceFee',
        'packaging_type': 'packagingType',
        'signature_type': 'signatureType',
        'special_service_types': 'specialServiceTypes'
    }

    def __init__(self, insurance_fee=None, packaging_type=None, signature_type=None, special_service_types=None):  # noqa: E501
        """SpecialServiceDetail - a model defined in Swagger"""  # noqa: E501
        self._insurance_fee = None
        self._packaging_type = None
        self._signature_type = None
        self._special_service_types = None
        self.discriminator = None
        if insurance_fee is not None:
            self.insurance_fee = insurance_fee
        if packaging_type is not None:
            self.packaging_type = packaging_type
        if signature_type is not None:
            self.signature_type = signature_type
        if special_service_types is not None:
            self.special_service_types = special_service_types

    @property
    def insurance_fee(self):
        """Gets the insurance_fee of this SpecialServiceDetail.  # noqa: E501

        The insurance fee, if applicable, on the package.<br><br>The insurance amount and currency are consistent with the currency of the destination country  # noqa: E501

        :return: The insurance_fee of this SpecialServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._insurance_fee

    @insurance_fee.setter
    def insurance_fee(self, insurance_fee):
        """Sets the insurance_fee of this SpecialServiceDetail.

        The insurance fee, if applicable, on the package.<br><br>The insurance amount and currency are consistent with the currency of the destination country  # noqa: E501

        :param insurance_fee: The insurance_fee of this SpecialServiceDetail.  # noqa: E501
        :type: str
        """

        self._insurance_fee = insurance_fee

    @property
    def packaging_type(self):
        """Gets the packaging_type of this SpecialServiceDetail.  # noqa: E501

        The package type.<br><br><b>Valid values</b>:<ul><li><code>PAK</code> (limited weight ≤ 2.5KG)</li><li><code>PACKAGE</code> (limited weight 68KG)</li></ul>  # noqa: E501

        :return: The packaging_type of this SpecialServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._packaging_type

    @packaging_type.setter
    def packaging_type(self, packaging_type):
        """Sets the packaging_type of this SpecialServiceDetail.

        The package type.<br><br><b>Valid values</b>:<ul><li><code>PAK</code> (limited weight ≤ 2.5KG)</li><li><code>PACKAGE</code> (limited weight 68KG)</li></ul>  # noqa: E501

        :param packaging_type: The packaging_type of this SpecialServiceDetail.  # noqa: E501
        :type: str
        """

        self._packaging_type = packaging_type

    @property
    def signature_type(self):
        """Gets the signature_type of this SpecialServiceDetail.  # noqa: E501

        The signature type, if applicable, for the package.<br><br><b>Valid values</b>:<ul><li><code>ISR</code> (Indirect Signature Required)</li><li><code>DSR</code> (Direct Signature Required)</li><li><code>ASR</code> (Adult Signature Required)</li></ul>  # noqa: E501

        :return: The signature_type of this SpecialServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type):
        """Sets the signature_type of this SpecialServiceDetail.

        The signature type, if applicable, for the package.<br><br><b>Valid values</b>:<ul><li><code>ISR</code> (Indirect Signature Required)</li><li><code>DSR</code> (Direct Signature Required)</li><li><code>ASR</code> (Adult Signature Required)</li></ul>  # noqa: E501

        :param signature_type: The signature_type of this SpecialServiceDetail.  # noqa: E501
        :type: str
        """

        self._signature_type = signature_type

    @property
    def special_service_types(self):
        """Gets the special_service_types of this SpecialServiceDetail.  # noqa: E501

        Any special service types supported for the package.<br><br> For example, <code>SATURDAY_DELIVERY</code> indicates that the item is eligible for Saturday delivery.  # noqa: E501

        :return: The special_service_types of this SpecialServiceDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_service_types

    @special_service_types.setter
    def special_service_types(self, special_service_types):
        """Sets the special_service_types of this SpecialServiceDetail.

        Any special service types supported for the package.<br><br> For example, <code>SATURDAY_DELIVERY</code> indicates that the item is eligible for Saturday delivery.  # noqa: E501

        :param special_service_types: The special_service_types of this SpecialServiceDetail.  # noqa: E501
        :type: list[str]
        """

        self._special_service_types = special_service_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecialServiceDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecialServiceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
