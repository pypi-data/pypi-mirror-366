# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClonePackageResponsesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_mile_tracking_number': 'str',
        'package_id': 'str',
        'payment_cost': 'Amount',
        'tracking_number': 'str'
    }

    attribute_map = {
        'last_mile_tracking_number': 'lastMileTrackingNumber',
        'package_id': 'packageId',
        'payment_cost': 'paymentCost',
        'tracking_number': 'trackingNumber'
    }

    def __init__(self, last_mile_tracking_number=None, package_id=None, payment_cost=None, tracking_number=None):  # noqa: E501
        """ClonePackageResponsesData - a model defined in Swagger"""  # noqa: E501
        self._last_mile_tracking_number = None
        self._package_id = None
        self._payment_cost = None
        self._tracking_number = None
        self.discriminator = None
        if last_mile_tracking_number is not None:
            self.last_mile_tracking_number = last_mile_tracking_number
        if package_id is not None:
            self.package_id = package_id
        if payment_cost is not None:
            self.payment_cost = payment_cost
        if tracking_number is not None:
            self.tracking_number = tracking_number

    @property
    def last_mile_tracking_number(self):
        """Gets the last_mile_tracking_number of this ClonePackageResponsesData.  # noqa: E501

        The last-mile tracking number of the package.<br><br>This field is only returned if the last-mile tracking number is provided by the carrier.  # noqa: E501

        :return: The last_mile_tracking_number of this ClonePackageResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._last_mile_tracking_number

    @last_mile_tracking_number.setter
    def last_mile_tracking_number(self, last_mile_tracking_number):
        """Sets the last_mile_tracking_number of this ClonePackageResponsesData.

        The last-mile tracking number of the package.<br><br>This field is only returned if the last-mile tracking number is provided by the carrier.  # noqa: E501

        :param last_mile_tracking_number: The last_mile_tracking_number of this ClonePackageResponsesData.  # noqa: E501
        :type: str
        """

        self._last_mile_tracking_number = last_mile_tracking_number

    @property
    def package_id(self):
        """Gets the package_id of this ClonePackageResponsesData.  # noqa: E501

        The unique identifier of the package. A new <b>packageId</b> value is generated when a package is cloned.  # noqa: E501

        :return: The package_id of this ClonePackageResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this ClonePackageResponsesData.

        The unique identifier of the package. A new <b>packageId</b> value is generated when a package is cloned.  # noqa: E501

        :param package_id: The package_id of this ClonePackageResponsesData.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def payment_cost(self):
        """Gets the payment_cost of this ClonePackageResponsesData.  # noqa: E501


        :return: The payment_cost of this ClonePackageResponsesData.  # noqa: E501
        :rtype: Amount
        """
        return self._payment_cost

    @payment_cost.setter
    def payment_cost(self, payment_cost):
        """Sets the payment_cost of this ClonePackageResponsesData.


        :param payment_cost: The payment_cost of this ClonePackageResponsesData.  # noqa: E501
        :type: Amount
        """

        self._payment_cost = payment_cost

    @property
    def tracking_number(self):
        """Gets the tracking_number of this ClonePackageResponsesData.  # noqa: E501

        The tracking number for the cloned package.  # noqa: E501

        :return: The tracking_number of this ClonePackageResponsesData.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this ClonePackageResponsesData.

        The tracking number for the cloned package.  # noqa: E501

        :param tracking_number: The tracking_number of this ClonePackageResponsesData.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClonePackageResponsesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClonePackageResponsesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
