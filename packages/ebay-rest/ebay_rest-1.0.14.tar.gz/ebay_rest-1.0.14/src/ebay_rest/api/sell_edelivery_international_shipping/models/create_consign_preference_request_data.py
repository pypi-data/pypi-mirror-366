# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateConsignPreferenceRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consign_preference_name': 'str',
        'dropoff_site_id': 'str',
        'pickup_address': 'PickupAddressRequestData',
        'pickup_time': 'str',
        'type': 'str'
    }

    attribute_map = {
        'consign_preference_name': 'consignPreferenceName',
        'dropoff_site_id': 'dropoffSiteId',
        'pickup_address': 'pickupAddress',
        'pickup_time': 'pickupTime',
        'type': 'type'
    }

    def __init__(self, consign_preference_name=None, dropoff_site_id=None, pickup_address=None, pickup_time=None, type=None):  # noqa: E501
        """CreateConsignPreferenceRequestData - a model defined in Swagger"""  # noqa: E501
        self._consign_preference_name = None
        self._dropoff_site_id = None
        self._pickup_address = None
        self._pickup_time = None
        self._type = None
        self.discriminator = None
        if consign_preference_name is not None:
            self.consign_preference_name = consign_preference_name
        if dropoff_site_id is not None:
            self.dropoff_site_id = dropoff_site_id
        if pickup_address is not None:
            self.pickup_address = pickup_address
        if pickup_time is not None:
            self.pickup_time = pickup_time
        if type is not None:
            self.type = type

    @property
    def consign_preference_name(self):
        """Gets the consign_preference_name of this CreateConsignPreferenceRequestData.  # noqa: E501

        The name of the consign address.  # noqa: E501

        :return: The consign_preference_name of this CreateConsignPreferenceRequestData.  # noqa: E501
        :rtype: str
        """
        return self._consign_preference_name

    @consign_preference_name.setter
    def consign_preference_name(self, consign_preference_name):
        """Sets the consign_preference_name of this CreateConsignPreferenceRequestData.

        The name of the consign address.  # noqa: E501

        :param consign_preference_name: The consign_preference_name of this CreateConsignPreferenceRequestData.  # noqa: E501
        :type: str
        """

        self._consign_preference_name = consign_preference_name

    @property
    def dropoff_site_id(self):
        """Gets the dropoff_site_id of this CreateConsignPreferenceRequestData.  # noqa: E501

        The unique identifier of a drop-off site location. This value can be retrieved using the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/dropoff_sites/methods/getDropoffSites\" target=\"_blank\">getDropoffSites</a> method.<br><br>This field is required if the <code>DROPOFF</code> address type is specified.  # noqa: E501

        :return: The dropoff_site_id of this CreateConsignPreferenceRequestData.  # noqa: E501
        :rtype: str
        """
        return self._dropoff_site_id

    @dropoff_site_id.setter
    def dropoff_site_id(self, dropoff_site_id):
        """Sets the dropoff_site_id of this CreateConsignPreferenceRequestData.

        The unique identifier of a drop-off site location. This value can be retrieved using the <a href=\"/api-docs/sell/edelivery_international_shipping/resources/dropoff_sites/methods/getDropoffSites\" target=\"_blank\">getDropoffSites</a> method.<br><br>This field is required if the <code>DROPOFF</code> address type is specified.  # noqa: E501

        :param dropoff_site_id: The dropoff_site_id of this CreateConsignPreferenceRequestData.  # noqa: E501
        :type: str
        """

        self._dropoff_site_id = dropoff_site_id

    @property
    def pickup_address(self):
        """Gets the pickup_address of this CreateConsignPreferenceRequestData.  # noqa: E501


        :return: The pickup_address of this CreateConsignPreferenceRequestData.  # noqa: E501
        :rtype: PickupAddressRequestData
        """
        return self._pickup_address

    @pickup_address.setter
    def pickup_address(self, pickup_address):
        """Sets the pickup_address of this CreateConsignPreferenceRequestData.


        :param pickup_address: The pickup_address of this CreateConsignPreferenceRequestData.  # noqa: E501
        :type: PickupAddressRequestData
        """

        self._pickup_address = pickup_address

    @property
    def pickup_time(self):
        """Gets the pickup_time of this CreateConsignPreferenceRequestData.  # noqa: E501

        The pickup time that the pickup location supports.<br><br>This field is required if the <code>PICK_UP</code> address type is specified. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:PickUpTimeTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The pickup_time of this CreateConsignPreferenceRequestData.  # noqa: E501
        :rtype: str
        """
        return self._pickup_time

    @pickup_time.setter
    def pickup_time(self, pickup_time):
        """Sets the pickup_time of this CreateConsignPreferenceRequestData.

        The pickup time that the pickup location supports.<br><br>This field is required if the <code>PICK_UP</code> address type is specified. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:PickUpTimeTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param pickup_time: The pickup_time of this CreateConsignPreferenceRequestData.  # noqa: E501
        :type: str
        """

        self._pickup_time = pickup_time

    @property
    def type(self):
        """Gets the type of this CreateConsignPreferenceRequestData.  # noqa: E501

        The address type of the consign address.<br><br><b>Valid values</b>:<ul><li><code>PICK_UP</code></li><li><code>DROP_OFF</code></li><li><code>FORWARD_DEPLOYMENT</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:ConsignTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The type of this CreateConsignPreferenceRequestData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateConsignPreferenceRequestData.

        The address type of the consign address.<br><br><b>Valid values</b>:<ul><li><code>PICK_UP</code></li><li><code>DROP_OFF</code></li><li><code>FORWARD_DEPLOYMENT</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/edelivery_international_shipping/types/api:ConsignTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param type: The type of this CreateConsignPreferenceRequestData.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateConsignPreferenceRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConsignPreferenceRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
