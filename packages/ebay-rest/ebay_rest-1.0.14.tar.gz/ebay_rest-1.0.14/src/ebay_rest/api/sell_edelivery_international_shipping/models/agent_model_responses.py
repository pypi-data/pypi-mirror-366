# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AgentModelResponses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_address': 'str',
        'agent_name': 'str',
        'agent_phone': 'str',
        'agent_preferences': 'list[AgentPreferenceListResponse]',
        'ar_name': 'str'
    }

    attribute_map = {
        'agent_address': 'agentAddress',
        'agent_name': 'agentName',
        'agent_phone': 'agentPhone',
        'agent_preferences': 'agentPreferences',
        'ar_name': 'arName'
    }

    def __init__(self, agent_address=None, agent_name=None, agent_phone=None, agent_preferences=None, ar_name=None):  # noqa: E501
        """AgentModelResponses - a model defined in Swagger"""  # noqa: E501
        self._agent_address = None
        self._agent_name = None
        self._agent_phone = None
        self._agent_preferences = None
        self._ar_name = None
        self.discriminator = None
        if agent_address is not None:
            self.agent_address = agent_address
        if agent_name is not None:
            self.agent_name = agent_name
        if agent_phone is not None:
            self.agent_phone = agent_phone
        if agent_preferences is not None:
            self.agent_preferences = agent_preferences
        if ar_name is not None:
            self.ar_name = ar_name

    @property
    def agent_address(self):
        """Gets the agent_address of this AgentModelResponses.  # noqa: E501

        The address of the EU AR agent.  # noqa: E501

        :return: The agent_address of this AgentModelResponses.  # noqa: E501
        :rtype: str
        """
        return self._agent_address

    @agent_address.setter
    def agent_address(self, agent_address):
        """Sets the agent_address of this AgentModelResponses.

        The address of the EU AR agent.  # noqa: E501

        :param agent_address: The agent_address of this AgentModelResponses.  # noqa: E501
        :type: str
        """

        self._agent_address = agent_address

    @property
    def agent_name(self):
        """Gets the agent_name of this AgentModelResponses.  # noqa: E501

        The name of the EU AR agent.  # noqa: E501

        :return: The agent_name of this AgentModelResponses.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this AgentModelResponses.

        The name of the EU AR agent.  # noqa: E501

        :param agent_name: The agent_name of this AgentModelResponses.  # noqa: E501
        :type: str
        """

        self._agent_name = agent_name

    @property
    def agent_phone(self):
        """Gets the agent_phone of this AgentModelResponses.  # noqa: E501

        The phone number of the EU AR agent.  # noqa: E501

        :return: The agent_phone of this AgentModelResponses.  # noqa: E501
        :rtype: str
        """
        return self._agent_phone

    @agent_phone.setter
    def agent_phone(self, agent_phone):
        """Sets the agent_phone of this AgentModelResponses.

        The phone number of the EU AR agent.  # noqa: E501

        :param agent_phone: The agent_phone of this AgentModelResponses.  # noqa: E501
        :type: str
        """

        self._agent_phone = agent_phone

    @property
    def agent_preferences(self):
        """Gets the agent_preferences of this AgentModelResponses.  # noqa: E501

        This array returns the supported shipping countries and eBay user IDs associated with the EU AR agent.  # noqa: E501

        :return: The agent_preferences of this AgentModelResponses.  # noqa: E501
        :rtype: list[AgentPreferenceListResponse]
        """
        return self._agent_preferences

    @agent_preferences.setter
    def agent_preferences(self, agent_preferences):
        """Sets the agent_preferences of this AgentModelResponses.

        This array returns the supported shipping countries and eBay user IDs associated with the EU AR agent.  # noqa: E501

        :param agent_preferences: The agent_preferences of this AgentModelResponses.  # noqa: E501
        :type: list[AgentPreferenceListResponse]
        """

        self._agent_preferences = agent_preferences

    @property
    def ar_name(self):
        """Gets the ar_name of this AgentModelResponses.  # noqa: E501

        The seller-defined setting name of the AR agent.  # noqa: E501

        :return: The ar_name of this AgentModelResponses.  # noqa: E501
        :rtype: str
        """
        return self._ar_name

    @ar_name.setter
    def ar_name(self, ar_name):
        """Sets the ar_name of this AgentModelResponses.

        The seller-defined setting name of the AR agent.  # noqa: E501

        :param ar_name: The ar_name of this AgentModelResponses.  # noqa: E501
        :type: str
        """

        self._ar_name = ar_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentModelResponses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentModelResponses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
