# coding: utf-8

"""
    EDIS public shipping API

    <div class=\"msgbox_important\"><p class=\"msgbox_importantInDiv\" data-mc-autonum=\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\"><span class=\"autonumber\"><span><b><span style=\"color: #dd1e31;\" class=\"mcFormatColor\">Important!</span></b></span></span> This method is only available for Greater-China based sellers with an active eDIS account.</p></div><br>This API allows 3rd party developers in the Greater-China area to process package shipping details.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PickupAddressRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'company': 'str',
        'contact': 'str',
        'country_code': 'str',
        'district': 'str',
        'name': 'str',
        'phone': 'str',
        'postcode': 'str',
        'province': 'str',
        'street1': 'str',
        'street2': 'str',
        'street3': 'str'
    }

    attribute_map = {
        'city': 'city',
        'company': 'company',
        'contact': 'contact',
        'country_code': 'countryCode',
        'district': 'district',
        'name': 'name',
        'phone': 'phone',
        'postcode': 'postcode',
        'province': 'province',
        'street1': 'street1',
        'street2': 'street2',
        'street3': 'street3'
    }

    def __init__(self, city=None, company=None, contact=None, country_code=None, district=None, name=None, phone=None, postcode=None, province=None, street1=None, street2=None, street3=None):  # noqa: E501
        """PickupAddressRequestData - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._company = None
        self._contact = None
        self._country_code = None
        self._district = None
        self._name = None
        self._phone = None
        self._postcode = None
        self._province = None
        self._street1 = None
        self._street2 = None
        self._street3 = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if company is not None:
            self.company = company
        if contact is not None:
            self.contact = contact
        if country_code is not None:
            self.country_code = country_code
        if district is not None:
            self.district = district
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if postcode is not None:
            self.postcode = postcode
        if province is not None:
            self.province = province
        if street1 is not None:
            self.street1 = street1
        if street2 is not None:
            self.street2 = street2
        if street3 is not None:
            self.street3 = street3

    @property
    def city(self):
        """Gets the city of this PickupAddressRequestData.  # noqa: E501

        The city code of the pickup address.<br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid city codes.  # noqa: E501

        :return: The city of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PickupAddressRequestData.

        The city code of the pickup address.<br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid city codes.  # noqa: E501

        :param city: The city of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this PickupAddressRequestData.  # noqa: E501

        The company name associated with the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The company of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this PickupAddressRequestData.

        The company name associated with the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param company: The company of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def contact(self):
        """Gets the contact of this PickupAddressRequestData.  # noqa: E501

        The name of the contact person associated with the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The contact of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PickupAddressRequestData.

        The name of the contact person associated with the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param contact: The contact of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def country_code(self):
        """Gets the country_code of this PickupAddressRequestData.  # noqa: E501

        The two-letter country code of the pickup address.<br><br><b>Valid values</b>:<ul><li>CN</li><li>HK</li></ul>  # noqa: E501

        :return: The country_code of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PickupAddressRequestData.

        The two-letter country code of the pickup address.<br><br><b>Valid values</b>:<ul><li>CN</li><li>HK</li></ul>  # noqa: E501

        :param country_code: The country_code of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def district(self):
        """Gets the district of this PickupAddressRequestData.  # noqa: E501

        The district code of the pickup address. <br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid district codes.  # noqa: E501

        :return: The district of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this PickupAddressRequestData.

        The district code of the pickup address. <br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid district codes.  # noqa: E501

        :param district: The district of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def name(self):
        """Gets the name of this PickupAddressRequestData.  # noqa: E501

        The name of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The name of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PickupAddressRequestData.

        The name of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param name: The name of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this PickupAddressRequestData.  # noqa: E501

        The phone number associated with the pickup address.  # noqa: E501

        :return: The phone of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PickupAddressRequestData.

        The phone number associated with the pickup address.  # noqa: E501

        :param phone: The phone of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def postcode(self):
        """Gets the postcode of this PickupAddressRequestData.  # noqa: E501

        The postal code of the pickup address.  # noqa: E501

        :return: The postcode of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this PickupAddressRequestData.

        The postal code of the pickup address.  # noqa: E501

        :param postcode: The postcode of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def province(self):
        """Gets the province of this PickupAddressRequestData.  # noqa: E501

        The province code of the the pickup address.<br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid province codes.  # noqa: E501

        :return: The province of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this PickupAddressRequestData.

        The province code of the the pickup address.<br><br>See <a href=\"https://www.edisebay.com/open/development-guide-detail?id=36\" target=\"_blank\">商户API地址编码主数据</a> for valid province codes.  # noqa: E501

        :param province: The province of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def street1(self):
        """Gets the street1 of this PickupAddressRequestData.  # noqa: E501

        The first line of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The street1 of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this PickupAddressRequestData.

        The first line of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param street1: The street1 of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this PickupAddressRequestData.  # noqa: E501

        The second line, if applicable, of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The street2 of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this PickupAddressRequestData.

        The second line, if applicable, of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param street2: The street2 of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._street2 = street2

    @property
    def street3(self):
        """Gets the street3 of this PickupAddressRequestData.  # noqa: E501

        The third line, if applicable, of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :return: The street3 of this PickupAddressRequestData.  # noqa: E501
        :rtype: str
        """
        return self._street3

    @street3.setter
    def street3(self, street3):
        """Sets the street3 of this PickupAddressRequestData.

        The third line, if applicable, of the street address of the pickup address.<br><br><b>Max length</b>: 50 characters  # noqa: E501

        :param street3: The street3 of this PickupAddressRequestData.  # noqa: E501
        :type: str
        """

        self._street3 = street3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PickupAddressRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PickupAddressRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
