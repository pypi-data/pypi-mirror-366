# coding: utf-8

"""
    Identity API

    <span class=\"tablenote\"><b>Note:</b> Not all the account related fields are returned for an authenticated user. The fields returned in the response are controlled by the scopes and are available only to select developers approved by business units.</span><br /><br />Retrieves the authenticated user's account profile information. It can be used to let users log into your app or site using eBay, which frees you from needing to store and protect user's PII (Personal Identifiable Information) data.  # noqa: E501

    OpenAPI spec version: v2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndividualAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'primary_phone': 'Phone',
        'registration_address': 'Address',
        'secondary_phone': 'Phone'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'primary_phone': 'primaryPhone',
        'registration_address': 'registrationAddress',
        'secondary_phone': 'secondaryPhone'
    }

    def __init__(self, email=None, first_name=None, last_name=None, primary_phone=None, registration_address=None, secondary_phone=None):  # noqa: E501
        """IndividualAccount - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._first_name = None
        self._last_name = None
        self._primary_phone = None
        self._registration_address = None
        self._secondary_phone = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if primary_phone is not None:
            self.primary_phone = primary_phone
        if registration_address is not None:
            self.registration_address = registration_address
        if secondary_phone is not None:
            self.secondary_phone = secondary_phone

    @property
    def email(self):
        """Gets the email of this IndividualAccount.  # noqa: E501

        The eBay user's registration email address.  # noqa: E501

        :return: The email of this IndividualAccount.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IndividualAccount.

        The eBay user's registration email address.  # noqa: E501

        :param email: The email of this IndividualAccount.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this IndividualAccount.  # noqa: E501

        The eBay user's first name.  # noqa: E501

        :return: The first_name of this IndividualAccount.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this IndividualAccount.

        The eBay user's first name.  # noqa: E501

        :param first_name: The first_name of this IndividualAccount.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this IndividualAccount.  # noqa: E501

        The eBay user's last name.  # noqa: E501

        :return: The last_name of this IndividualAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this IndividualAccount.

        The eBay user's last name.  # noqa: E501

        :param last_name: The last_name of this IndividualAccount.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def primary_phone(self):
        """Gets the primary_phone of this IndividualAccount.  # noqa: E501


        :return: The primary_phone of this IndividualAccount.  # noqa: E501
        :rtype: Phone
        """
        return self._primary_phone

    @primary_phone.setter
    def primary_phone(self, primary_phone):
        """Sets the primary_phone of this IndividualAccount.


        :param primary_phone: The primary_phone of this IndividualAccount.  # noqa: E501
        :type: Phone
        """

        self._primary_phone = primary_phone

    @property
    def registration_address(self):
        """Gets the registration_address of this IndividualAccount.  # noqa: E501


        :return: The registration_address of this IndividualAccount.  # noqa: E501
        :rtype: Address
        """
        return self._registration_address

    @registration_address.setter
    def registration_address(self, registration_address):
        """Sets the registration_address of this IndividualAccount.


        :param registration_address: The registration_address of this IndividualAccount.  # noqa: E501
        :type: Address
        """

        self._registration_address = registration_address

    @property
    def secondary_phone(self):
        """Gets the secondary_phone of this IndividualAccount.  # noqa: E501


        :return: The secondary_phone of this IndividualAccount.  # noqa: E501
        :rtype: Phone
        """
        return self._secondary_phone

    @secondary_phone.setter
    def secondary_phone(self, secondary_phone):
        """Sets the secondary_phone of this IndividualAccount.


        :param secondary_phone: The secondary_phone of this IndividualAccount.  # noqa: E501
        :type: Phone
        """

        self._secondary_phone = secondary_phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndividualAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividualAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
