# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.  # noqa: E501

    OpenAPI spec version: v1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AncestorReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'category_name': 'str',
        'category_subtree_node_href': 'str',
        'category_tree_node_level': 'int'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'category_name': 'categoryName',
        'category_subtree_node_href': 'categorySubtreeNodeHref',
        'category_tree_node_level': 'categoryTreeNodeLevel'
    }

    def __init__(self, category_id=None, category_name=None, category_subtree_node_href=None, category_tree_node_level=None):  # noqa: E501
        """AncestorReference - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_name = None
        self._category_subtree_node_href = None
        self._category_tree_node_level = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category_name is not None:
            self.category_name = category_name
        if category_subtree_node_href is not None:
            self.category_subtree_node_href = category_subtree_node_href
        if category_tree_node_level is not None:
            self.category_tree_node_level = category_tree_node_level

    @property
    def category_id(self):
        """Gets the category_id of this AncestorReference.  # noqa: E501

        The unique identifier of the eBay ancestor category.<br><br><span class=\"tablenote\"> <strong>Note:</strong> The root node of a full default category tree includes the <b>categoryId</b> field, but its value should not be relied upon. It provides no useful information for application development.</span>  # noqa: E501

        :return: The category_id of this AncestorReference.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AncestorReference.

        The unique identifier of the eBay ancestor category.<br><br><span class=\"tablenote\"> <strong>Note:</strong> The root node of a full default category tree includes the <b>categoryId</b> field, but its value should not be relied upon. It provides no useful information for application development.</span>  # noqa: E501

        :param category_id: The category_id of this AncestorReference.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this AncestorReference.  # noqa: E501

        The name of the ancestor category identified by <b>categoryId</b>.  # noqa: E501

        :return: The category_name of this AncestorReference.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this AncestorReference.

        The name of the ancestor category identified by <b>categoryId</b>.  # noqa: E501

        :param category_name: The category_name of this AncestorReference.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def category_subtree_node_href(self):
        """Gets the category_subtree_node_href of this AncestorReference.  # noqa: E501

        The href portion of the <b>getCategorySubtree</b> call that retrieves the subtree below the ancestor category node.  # noqa: E501

        :return: The category_subtree_node_href of this AncestorReference.  # noqa: E501
        :rtype: str
        """
        return self._category_subtree_node_href

    @category_subtree_node_href.setter
    def category_subtree_node_href(self, category_subtree_node_href):
        """Sets the category_subtree_node_href of this AncestorReference.

        The href portion of the <b>getCategorySubtree</b> call that retrieves the subtree below the ancestor category node.  # noqa: E501

        :param category_subtree_node_href: The category_subtree_node_href of this AncestorReference.  # noqa: E501
        :type: str
        """

        self._category_subtree_node_href = category_subtree_node_href

    @property
    def category_tree_node_level(self):
        """Gets the category_tree_node_level of this AncestorReference.  # noqa: E501

        The absolute level of the ancestor category node in the hierarchy of its category tree.<br><br><span class=\"tablenote\"> <strong>Note:</strong> The root node of any full category tree is always at level <code><b>0</b></code>. </span>  # noqa: E501

        :return: The category_tree_node_level of this AncestorReference.  # noqa: E501
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """Sets the category_tree_node_level of this AncestorReference.

        The absolute level of the ancestor category node in the hierarchy of its category tree.<br><br><span class=\"tablenote\"> <strong>Note:</strong> The root node of any full category tree is always at level <code><b>0</b></code>. </span>  # noqa: E501

        :param category_tree_node_level: The category_tree_node_level of this AncestorReference.  # noqa: E501
        :type: int
        """

        self._category_tree_node_level = category_tree_node_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AncestorReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AncestorReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
