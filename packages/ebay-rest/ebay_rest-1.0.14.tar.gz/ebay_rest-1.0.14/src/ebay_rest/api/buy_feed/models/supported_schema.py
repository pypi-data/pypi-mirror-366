# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportedSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'definition': 'str',
        'deprecated': 'bool',
        'formats': 'list[str]',
        'schema_version': 'str'
    }

    attribute_map = {
        'definition': 'definition',
        'deprecated': 'deprecated',
        'formats': 'formats',
        'schema_version': 'schemaVersion'
    }

    def __init__(self, definition=None, deprecated=None, formats=None, schema_version=None):  # noqa: E501
        """SupportedSchema - a model defined in Swagger"""  # noqa: E501
        self._definition = None
        self._deprecated = None
        self._formats = None
        self._schema_version = None
        self.discriminator = None
        if definition is not None:
            self.definition = definition
        if deprecated is not None:
            self.deprecated = deprecated
        if formats is not None:
            self.formats = formats
        if schema_version is not None:
            self.schema_version = schema_version

    @property
    def definition(self):
        """Gets the definition of this SupportedSchema.  # noqa: E501

        A list of the fields that will be returned in the feed file.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> to learn about the feed fields that are included in each supported feed type.</span>  # noqa: E501

        :return: The definition of this SupportedSchema.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this SupportedSchema.

        A list of the fields that will be returned in the feed file.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> to learn about the feed fields that are included in each supported feed type.</span>  # noqa: E501

        :param definition: The definition of this SupportedSchema.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def deprecated(self):
        """Gets the deprecated of this SupportedSchema.  # noqa: E501

        Indicates whether the schema is still functional or deprecated. One of either <code>true</code> or <code>false</code>.  # noqa: E501

        :return: The deprecated of this SupportedSchema.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this SupportedSchema.

        Indicates whether the schema is still functional or deprecated. One of either <code>true</code> or <code>false</code>.  # noqa: E501

        :param deprecated: The deprecated of this SupportedSchema.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def formats(self):
        """Gets the formats of this SupportedSchema.  # noqa: E501

        An list of the available formats in which the schema can be downloaded.  # noqa: E501

        :return: The formats of this SupportedSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this SupportedSchema.

        An list of the available formats in which the schema can be downloaded.  # noqa: E501

        :param formats: The formats of this SupportedSchema.  # noqa: E501
        :type: list[str]
        """

        self._formats = formats

    @property
    def schema_version(self):
        """Gets the schema_version of this SupportedSchema.  # noqa: E501

        The version of the <b>Feed</b> API schema under which the feed type was created.<br /><br /><b>Example:</b> 1.0.  # noqa: E501

        :return: The schema_version of this SupportedSchema.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this SupportedSchema.

        The version of the <b>Feed</b> API schema under which the feed type was created.<br /><br /><b>Example:</b> 1.0.  # noqa: E501

        :param schema_version: The schema_version of this SupportedSchema.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportedSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
