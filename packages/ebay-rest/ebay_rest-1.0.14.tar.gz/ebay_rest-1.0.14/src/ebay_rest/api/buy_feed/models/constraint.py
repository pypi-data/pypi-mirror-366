# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Constraint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_ids': 'list[str]'
    }

    attribute_map = {
        'marketplace_ids': 'marketplaceIds'
    }

    def __init__(self, marketplace_ids=None):  # noqa: E501
        """Constraint - a model defined in Swagger"""  # noqa: E501
        self._marketplace_ids = None
        self.discriminator = None
        if marketplace_ids is not None:
            self.marketplace_ids = marketplace_ids

    @property
    def marketplace_ids(self):
        """Gets the marketplace_ids of this Constraint.  # noqa: E501

        A list of the marketplaces to which the application is constrained within the feed type.<br/><br/><b>Example:</b> A value of <code>EBAY_US</code> means the application is constrained to the U.S. marketplace for the listed feed.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The <b>Buy Feed</b> API is not supported by all eBay marketplaces. See <a href='/api-docs/buy/feed/v1/overview.html#API'>API restrictions</a> for information about regional constraints.</span>  # noqa: E501

        :return: The marketplace_ids of this Constraint.  # noqa: E501
        :rtype: list[str]
        """
        return self._marketplace_ids

    @marketplace_ids.setter
    def marketplace_ids(self, marketplace_ids):
        """Sets the marketplace_ids of this Constraint.

        A list of the marketplaces to which the application is constrained within the feed type.<br/><br/><b>Example:</b> A value of <code>EBAY_US</code> means the application is constrained to the U.S. marketplace for the listed feed.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The <b>Buy Feed</b> API is not supported by all eBay marketplaces. See <a href='/api-docs/buy/feed/v1/overview.html#API'>API restrictions</a> for information about regional constraints.</span>  # noqa: E501

        :param marketplace_ids: The marketplace_ids of this Constraint.  # noqa: E501
        :type: list[str]
        """

        self._marketplace_ids = marketplace_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Constraint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Constraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
