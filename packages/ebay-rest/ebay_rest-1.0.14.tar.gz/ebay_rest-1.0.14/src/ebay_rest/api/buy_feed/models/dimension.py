# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension_key': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'dimension_key': 'dimensionKey',
        'values': 'values'
    }

    def __init__(self, dimension_key=None, values=None):  # noqa: E501
        """Dimension - a model defined in Swagger"""  # noqa: E501
        self._dimension_key = None
        self._values = None
        self.discriminator = None
        if dimension_key is not None:
            self.dimension_key = dimension_key
        if values is not None:
            self.values = values

    @property
    def dimension_key(self):
        """Gets the dimension_key of this Dimension.  # noqa: E501

        The key element for a value in the <b>dimensions</b> array, paired with its value(s). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:DimensionKeyEnum'>eBay API documentation</a>  # noqa: E501

        :return: The dimension_key of this Dimension.  # noqa: E501
        :rtype: str
        """
        return self._dimension_key

    @dimension_key.setter
    def dimension_key(self, dimension_key):
        """Sets the dimension_key of this Dimension.

        The key element for a value in the <b>dimensions</b> array, paired with its value(s). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:DimensionKeyEnum'>eBay API documentation</a>  # noqa: E501

        :param dimension_key: The dimension_key of this Dimension.  # noqa: E501
        :type: str
        """

        self._dimension_key = dimension_key

    @property
    def values(self):
        """Gets the values of this Dimension.  # noqa: E501

        The dimension value(s) paired with the <b>dimensionKey</b> in the <b>dimensions</b> array.  # noqa: E501

        :return: The values of this Dimension.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Dimension.

        The dimension value(s) paired with the <b>dimensionKey</b> in the <b>dimensions</b> array.  # noqa: E501

        :param values: The values of this Dimension.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dimension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
