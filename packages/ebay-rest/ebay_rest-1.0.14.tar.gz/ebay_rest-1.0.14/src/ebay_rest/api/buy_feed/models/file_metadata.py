# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'str',
        'dimensions': 'list[Dimension]',
        'feed_date': 'str',
        'feed_scope': 'str',
        'feed_type_id': 'str',
        'file_id': 'str',
        'format': 'str',
        'marketplace_id': 'str',
        'schema_version': 'str',
        'size': 'int',
        'span': 'TimeDuration'
    }

    attribute_map = {
        'access': 'access',
        'dimensions': 'dimensions',
        'feed_date': 'feedDate',
        'feed_scope': 'feedScope',
        'feed_type_id': 'feedTypeId',
        'file_id': 'fileId',
        'format': 'format',
        'marketplace_id': 'marketplaceId',
        'schema_version': 'schemaVersion',
        'size': 'size',
        'span': 'span'
    }

    def __init__(self, access=None, dimensions=None, feed_date=None, feed_scope=None, feed_type_id=None, file_id=None, format=None, marketplace_id=None, schema_version=None, size=None, span=None):  # noqa: E501
        """FileMetadata - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._dimensions = None
        self._feed_date = None
        self._feed_scope = None
        self._feed_type_id = None
        self._file_id = None
        self._format = None
        self._marketplace_id = None
        self._schema_version = None
        self._size = None
        self._span = None
        self.discriminator = None
        if access is not None:
            self.access = access
        if dimensions is not None:
            self.dimensions = dimensions
        if feed_date is not None:
            self.feed_date = feed_date
        if feed_scope is not None:
            self.feed_scope = feed_scope
        if feed_type_id is not None:
            self.feed_type_id = feed_type_id
        if file_id is not None:
            self.file_id = file_id
        if format is not None:
            self.format = format
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if schema_version is not None:
            self.schema_version = schema_version
        if size is not None:
            self.size = size
        if span is not None:
            self.span = span

    @property
    def access(self):
        """Gets the access of this FileMetadata.  # noqa: E501

        Indicates whether the application is permitted to access the feed file. One of <code>ALLOWED</code> or <code>RESTRICTED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:AccessEnum'>eBay API documentation</a>  # noqa: E501

        :return: The access of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this FileMetadata.

        Indicates whether the application is permitted to access the feed file. One of <code>ALLOWED</code> or <code>RESTRICTED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:AccessEnum'>eBay API documentation</a>  # noqa: E501

        :param access: The access of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def dimensions(self):
        """Gets the dimensions of this FileMetadata.  # noqa: E501

        An array of dimensions supported by the corresponding feed file.<br /><br /><b>Example:</b><BR /><code>&quot;dimensionKey&quot;: &quot;CATEGORY&quot;,<br />&quotvalues&quot;: &lsqb;&quot;15032&quot;&rsqb;</code>  # noqa: E501

        :return: The dimensions of this FileMetadata.  # noqa: E501
        :rtype: list[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this FileMetadata.

        An array of dimensions supported by the corresponding feed file.<br /><br /><b>Example:</b><BR /><code>&quot;dimensionKey&quot;: &quot;CATEGORY&quot;,<br />&quotvalues&quot;: &lsqb;&quot;15032&quot;&rsqb;</code>  # noqa: E501

        :param dimensions: The dimensions of this FileMetadata.  # noqa: E501
        :type: list[Dimension]
        """

        self._dimensions = dimensions

    @property
    def feed_date(self):
        """Gets the feed_date of this FileMetadata.  # noqa: E501

        The date on which the feed was created. <br /><br /><b>Format:</b> UTC format <code>(yyyy-MM-ddThh:00:00.000Z)</code>.  # noqa: E501

        :return: The feed_date of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._feed_date

    @feed_date.setter
    def feed_date(self, feed_date):
        """Sets the feed_date of this FileMetadata.

        The date on which the feed was created. <br /><br /><b>Format:</b> UTC format <code>(yyyy-MM-ddThh:00:00.000Z)</code>.  # noqa: E501

        :param feed_date: The feed_date of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._feed_date = feed_date

    @property
    def feed_scope(self):
        """Gets the feed_scope of this FileMetadata.  # noqa: E501

        Specifies the frequency with which the feed file is made available (<code>HOURLY</code>, <code>DAILY</code>, <code>WEEKLY</code>).<br /><br />Currently only <code>DAILY</code> and <code>HOURLY</code> are supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedScopeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The feed_scope of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._feed_scope

    @feed_scope.setter
    def feed_scope(self, feed_scope):
        """Sets the feed_scope of this FileMetadata.

        Specifies the frequency with which the feed file is made available (<code>HOURLY</code>, <code>DAILY</code>, <code>WEEKLY</code>).<br /><br />Currently only <code>DAILY</code> and <code>HOURLY</code> are supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FeedScopeEnum'>eBay API documentation</a>  # noqa: E501

        :param feed_scope: The feed_scope of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._feed_scope = feed_scope

    @property
    def feed_type_id(self):
        """Gets the feed_type_id of this FileMetadata.  # noqa: E501

        The unique identifier of the feed type.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> for additional details.</span>  # noqa: E501

        :return: The feed_type_id of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._feed_type_id

    @feed_type_id.setter
    def feed_type_id(self, feed_type_id):
        """Sets the feed_type_id of this FileMetadata.

        The unique identifier of the feed type.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Refer to <a href=\"/api-docs/buy/feed/v1/static/overview.html#feed-types\" target=\"_blank\">Supported feed types</a> for additional details.</span>  # noqa: E501

        :param feed_type_id: The feed_type_id of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._feed_type_id = feed_type_id

    @property
    def file_id(self):
        """Gets the file_id of this FileMetadata.  # noqa: E501

        The file's unique identifier. This <b>fileId</b> is used to select the feed file when using the <b>downloadFile</b> method.  # noqa: E501

        :return: The file_id of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileMetadata.

        The file's unique identifier. This <b>fileId</b> is used to select the feed file when using the <b>downloadFile</b> method.  # noqa: E501

        :param file_id: The file_id of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def format(self):
        """Gets the format of this FileMetadata.  # noqa: E501

        Format of the returned feed file. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FormatEnum'>eBay API documentation</a>  # noqa: E501

        :return: The format of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FileMetadata.

        Format of the returned feed file. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/api:FormatEnum'>eBay API documentation</a>  # noqa: E501

        :param format: The format of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this FileMetadata.  # noqa: E501

        The eBay marketplace identifier for the marketplace(s) to which the feed applies.<br /><br /><b>Example:</b> <code>EBAY_UK</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The marketplace_id of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this FileMetadata.

        The eBay marketplace identifier for the marketplace(s) to which the feed applies.<br /><br /><b>Example:</b> <code>EBAY_UK</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param marketplace_id: The marketplace_id of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def schema_version(self):
        """Gets the schema_version of this FileMetadata.  # noqa: E501

        Version of the API schema under which the feed was created.  # noqa: E501

        :return: The schema_version of this FileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this FileMetadata.

        Version of the API schema under which the feed was created.  # noqa: E501

        :param schema_version: The schema_version of this FileMetadata.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def size(self):
        """Gets the size of this FileMetadata.  # noqa: E501

        Size of the feed file in bytes.  # noqa: E501

        :return: The size of this FileMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileMetadata.

        Size of the feed file in bytes.  # noqa: E501

        :param size: The size of this FileMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def span(self):
        """Gets the span of this FileMetadata.  # noqa: E501


        :return: The span of this FileMetadata.  # noqa: E501
        :rtype: TimeDuration
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this FileMetadata.


        :param span: The span of this FileMetadata.  # noqa: E501
        :type: TimeDuration
        """

        self._span = span

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
