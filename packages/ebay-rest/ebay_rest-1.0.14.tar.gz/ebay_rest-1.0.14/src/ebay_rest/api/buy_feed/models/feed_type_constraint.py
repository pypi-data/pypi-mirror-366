# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeedTypeConstraint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_ids': 'list[str]',
        'listing_marketplace_constraints': 'list[ListingMarketplaceFeedTypeConstraint]',
        'marketplace_id': 'str'
    }

    attribute_map = {
        'category_ids': 'categoryIds',
        'listing_marketplace_constraints': 'listingMarketplaceConstraints',
        'marketplace_id': 'marketplaceId'
    }

    def __init__(self, category_ids=None, listing_marketplace_constraints=None, marketplace_id=None):  # noqa: E501
        """FeedTypeConstraint - a model defined in Swagger"""  # noqa: E501
        self._category_ids = None
        self._listing_marketplace_constraints = None
        self._marketplace_id = None
        self.discriminator = None
        if category_ids is not None:
            self.category_ids = category_ids
        if listing_marketplace_constraints is not None:
            self.listing_marketplace_constraints = listing_marketplace_constraints
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id

    @property
    def category_ids(self):
        """Gets the category_ids of this FeedTypeConstraint.  # noqa: E501

        An array of the eBay categories the application can access in a feed. See the <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/overview.html'>Taxonomy API</a> for details about obtaining a list eBay L1 categories. The category is expressed as the category's <b>categoryId</b>, not its <b>categoryName</b>; e.g.,  <code>172008</code>, not <code>Gift Cards &amp; Coupons</code>.<br /><br />If no <b>categoryIds</b> are listed, the application can access all categories in the specified marketplace.  # noqa: E501

        :return: The category_ids of this FeedTypeConstraint.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this FeedTypeConstraint.

        An array of the eBay categories the application can access in a feed. See the <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/overview.html'>Taxonomy API</a> for details about obtaining a list eBay L1 categories. The category is expressed as the category's <b>categoryId</b>, not its <b>categoryName</b>; e.g.,  <code>172008</code>, not <code>Gift Cards &amp; Coupons</code>.<br /><br />If no <b>categoryIds</b> are listed, the application can access all categories in the specified marketplace.  # noqa: E501

        :param category_ids: The category_ids of this FeedTypeConstraint.  # noqa: E501
        :type: list[str]
        """

        self._category_ids = category_ids

    @property
    def listing_marketplace_constraints(self):
        """Gets the listing_marketplace_constraints of this FeedTypeConstraint.  # noqa: E501

        An array of the eBay marketplace and categories in which listings are available for Cross Border Trading (CBT). Listings on the specified marketplace and categories can be shipped to the marketplace specified for the feed type.<br><br><span class=\"tablenote\"><b>Note:</b> This array will only be returned for the <code>CBT_ITEM_ALL_ACTIVE</code> feed type.</span>  # noqa: E501

        :return: The listing_marketplace_constraints of this FeedTypeConstraint.  # noqa: E501
        :rtype: list[ListingMarketplaceFeedTypeConstraint]
        """
        return self._listing_marketplace_constraints

    @listing_marketplace_constraints.setter
    def listing_marketplace_constraints(self, listing_marketplace_constraints):
        """Sets the listing_marketplace_constraints of this FeedTypeConstraint.

        An array of the eBay marketplace and categories in which listings are available for Cross Border Trading (CBT). Listings on the specified marketplace and categories can be shipped to the marketplace specified for the feed type.<br><br><span class=\"tablenote\"><b>Note:</b> This array will only be returned for the <code>CBT_ITEM_ALL_ACTIVE</code> feed type.</span>  # noqa: E501

        :param listing_marketplace_constraints: The listing_marketplace_constraints of this FeedTypeConstraint.  # noqa: E501
        :type: list[ListingMarketplaceFeedTypeConstraint]
        """

        self._listing_marketplace_constraints = listing_marketplace_constraints

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this FeedTypeConstraint.  # noqa: E501

        This enum value indicates an eBay marketplace for which the application can access feed files for the corresponding feed type<br/><br/><b>Example:</b> <code>EBAY_US</code> for the U.S. or <code>EBAY_DE</code> for Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :return: The marketplace_id of this FeedTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this FeedTypeConstraint.

        This enum value indicates an eBay marketplace for which the application can access feed files for the corresponding feed type<br/><br/><b>Example:</b> <code>EBAY_US</code> for the U.S. or <code>EBAY_DE</code> for Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>  # noqa: E501

        :param marketplace_id: The marketplace_id of this FeedTypeConstraint.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeedTypeConstraint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedTypeConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
