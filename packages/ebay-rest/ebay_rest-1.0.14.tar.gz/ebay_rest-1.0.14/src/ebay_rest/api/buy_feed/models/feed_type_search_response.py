# coding: utf-8

"""
    Buy Feed API

    The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file for a specific category, date, and marketplace.<br /><br />In addition to the API, there is an open-source Feed SDK written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.  # noqa: E501

    OpenAPI spec version: v1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeedTypeSearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feed_types': 'list[FeedType]',
        'href': 'str',
        'limit': 'int',
        'next': 'str',
        'total': 'int'
    }

    attribute_map = {
        'feed_types': 'feedTypes',
        'href': 'href',
        'limit': 'limit',
        'next': 'next',
        'total': 'total'
    }

    def __init__(self, feed_types=None, href=None, limit=None, next=None, total=None):  # noqa: E501
        """FeedTypeSearchResponse - a model defined in Swagger"""  # noqa: E501
        self._feed_types = None
        self._href = None
        self._limit = None
        self._next = None
        self._total = None
        self.discriminator = None
        if feed_types is not None:
            self.feed_types = feed_types
        if href is not None:
            self.href = href
        if limit is not None:
            self.limit = limit
        if next is not None:
            self.next = next
        if total is not None:
            self.total = total

    @property
    def feed_types(self):
        """Gets the feed_types of this FeedTypeSearchResponse.  # noqa: E501

        An array of the feed types that match the search criteria.  # noqa: E501

        :return: The feed_types of this FeedTypeSearchResponse.  # noqa: E501
        :rtype: list[FeedType]
        """
        return self._feed_types

    @feed_types.setter
    def feed_types(self, feed_types):
        """Sets the feed_types of this FeedTypeSearchResponse.

        An array of the feed types that match the search criteria.  # noqa: E501

        :param feed_types: The feed_types of this FeedTypeSearchResponse.  # noqa: E501
        :type: list[FeedType]
        """

        self._feed_types = feed_types

    @property
    def href(self):
        """Gets the href of this FeedTypeSearchResponse.  # noqa: E501

        The URL to to the current set of results.  # noqa: E501

        :return: The href of this FeedTypeSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FeedTypeSearchResponse.

        The URL to to the current set of results.  # noqa: E501

        :param href: The href of this FeedTypeSearchResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this FeedTypeSearchResponse.  # noqa: E501

        The number of records to show in the current response.  # noqa: E501

        :return: The limit of this FeedTypeSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this FeedTypeSearchResponse.

        The number of records to show in the current response.  # noqa: E501

        :param limit: The limit of this FeedTypeSearchResponse.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this FeedTypeSearchResponse.  # noqa: E501

        You can use this URL to retrieve the next page of results beyond those displayed on the page if there are more results that match the search criteria.  # noqa: E501

        :return: The next of this FeedTypeSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this FeedTypeSearchResponse.

        You can use this URL to retrieve the next page of results beyond those displayed on the page if there are more results that match the search criteria.  # noqa: E501

        :param next: The next of this FeedTypeSearchResponse.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def total(self):
        """Gets the total of this FeedTypeSearchResponse.  # noqa: E501

        The total number of matches for the search criteria.  # noqa: E501

        :return: The total of this FeedTypeSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FeedTypeSearchResponse.

        The total number of matches for the search criteria.  # noqa: E501

        :param total: The total of this FeedTypeSearchResponse.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeedTypeSearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedTypeSearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
