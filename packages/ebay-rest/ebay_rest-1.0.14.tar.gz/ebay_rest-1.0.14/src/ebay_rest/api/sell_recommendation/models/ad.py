# coding: utf-8

"""
    Recommendation API

    The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.  # noqa: E501

    OpenAPI spec version: v1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ad(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_percentages': 'list[BidPercentages]',
        'promote_with_ad': 'str'
    }

    attribute_map = {
        'bid_percentages': 'bidPercentages',
        'promote_with_ad': 'promoteWithAd'
    }

    def __init__(self, bid_percentages=None, promote_with_ad=None):  # noqa: E501
        """Ad - a model defined in Swagger"""  # noqa: E501
        self._bid_percentages = None
        self._promote_with_ad = None
        self.discriminator = None
        if bid_percentages is not None:
            self.bid_percentages = bid_percentages
        if promote_with_ad is not None:
            self.promote_with_ad = promote_with_ad

    @property
    def bid_percentages(self):
        """Gets the bid_percentages of this Ad.  # noqa: E501

        This field returns information that you can use to configure the <b>bidPercentage</b> field in a Promoted Listings campaign.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, <code>ITEM</code> and <code>TRENDING</code> are the only supported bid percentage types.</span><br /><br />The <code>ITEM</code> suggested bid percentages are tailored to each of your items and are designed to help you stay competitive while finding an optimal balance between performance and cost. The recommendations are calculated based on a variety of factors that may include item attributes, seasonality, past performance, and current competition for each of your listings.<br /><br />The <code>TRENDING</code> suggested bid percentages are calculated by reviewing the category level average ad rates in the marketplace.<br /><br />Setting the <b>bidPercentage</b> of your ad campaign based on these rate recommendations will help the items in the campaign be competitive with other items in the marketplace by improving their chances of being displayed more often in the marketplace.  # noqa: E501

        :return: The bid_percentages of this Ad.  # noqa: E501
        :rtype: list[BidPercentages]
        """
        return self._bid_percentages

    @bid_percentages.setter
    def bid_percentages(self, bid_percentages):
        """Sets the bid_percentages of this Ad.

        This field returns information that you can use to configure the <b>bidPercentage</b> field in a Promoted Listings campaign.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, <code>ITEM</code> and <code>TRENDING</code> are the only supported bid percentage types.</span><br /><br />The <code>ITEM</code> suggested bid percentages are tailored to each of your items and are designed to help you stay competitive while finding an optimal balance between performance and cost. The recommendations are calculated based on a variety of factors that may include item attributes, seasonality, past performance, and current competition for each of your listings.<br /><br />The <code>TRENDING</code> suggested bid percentages are calculated by reviewing the category level average ad rates in the marketplace.<br /><br />Setting the <b>bidPercentage</b> of your ad campaign based on these rate recommendations will help the items in the campaign be competitive with other items in the marketplace by improving their chances of being displayed more often in the marketplace.  # noqa: E501

        :param bid_percentages: The bid_percentages of this Ad.  # noqa: E501
        :type: list[BidPercentages]
        """

        self._bid_percentages = bid_percentages

    @property
    def promote_with_ad(self):
        """Gets the promote_with_ad of this Ad.  # noqa: E501

        An enum whose values describe whether or not eBay recommends you place the associated listing in a Promoted Listings ad campaign.  <br><br>IDs deemed <code>RECOMMENDED</code> by eBay are the listings with the highest potential of benefiting from being promoted. The recommendation calculation is based on marketplace trends, like buyer demand and the competition in the itemâ€™s category.  <p class=\"tablenote\"><b>Note:</b> A <b>promoteWithAd</b> value cannot be calculated for listings that are part of Promoted Listings campaigns.  <br><br>Because of this, if you call <b>findListingRecommendations</b> with a specific set of listing IDs, the <b>promoteWithAd</b> field is not returned for any of the listings that are involved in a promotion. However, as long as they are eligible, the trending <b>bidPercentage</b> <i>is</i> returned for all specified listings, even if they are part of an ad campaign.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/recommendation/types/api:PromoteWithAd'>eBay API documentation</a>  # noqa: E501

        :return: The promote_with_ad of this Ad.  # noqa: E501
        :rtype: str
        """
        return self._promote_with_ad

    @promote_with_ad.setter
    def promote_with_ad(self, promote_with_ad):
        """Sets the promote_with_ad of this Ad.

        An enum whose values describe whether or not eBay recommends you place the associated listing in a Promoted Listings ad campaign.  <br><br>IDs deemed <code>RECOMMENDED</code> by eBay are the listings with the highest potential of benefiting from being promoted. The recommendation calculation is based on marketplace trends, like buyer demand and the competition in the itemâ€™s category.  <p class=\"tablenote\"><b>Note:</b> A <b>promoteWithAd</b> value cannot be calculated for listings that are part of Promoted Listings campaigns.  <br><br>Because of this, if you call <b>findListingRecommendations</b> with a specific set of listing IDs, the <b>promoteWithAd</b> field is not returned for any of the listings that are involved in a promotion. However, as long as they are eligible, the trending <b>bidPercentage</b> <i>is</i> returned for all specified listings, even if they are part of an ad campaign.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/recommendation/types/api:PromoteWithAd'>eBay API documentation</a>  # noqa: E501

        :param promote_with_ad: The promote_with_ad of this Ad.  # noqa: E501
        :type: str
        """

        self._promote_with_ad = promote_with_ad

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
