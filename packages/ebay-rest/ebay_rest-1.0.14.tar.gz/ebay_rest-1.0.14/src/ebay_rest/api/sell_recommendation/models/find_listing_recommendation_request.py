# coding: utf-8

"""
    Recommendation API

    The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.  # noqa: E501

    OpenAPI spec version: v1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FindListingRecommendationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'listing_ids': 'list[str]'
    }

    attribute_map = {
        'listing_ids': 'listingIds'
    }

    def __init__(self, listing_ids=None):  # noqa: E501
        """FindListingRecommendationRequest - a model defined in Swagger"""  # noqa: E501
        self._listing_ids = None
        self.discriminator = None
        if listing_ids is not None:
            self.listing_ids = listing_ids

    @property
    def listing_ids(self):
        """Gets the listing_ids of this FindListingRecommendationRequest.  # noqa: E501

        A comma-separated list of listing IDs for which you want Promoted Listings ad configuration information.  <p>Currently, this method accepts only <b>listingId</b> values from the Trading API.</p>  <p><b>Max:</b> 500 listing IDs</p>  # noqa: E501

        :return: The listing_ids of this FindListingRecommendationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._listing_ids

    @listing_ids.setter
    def listing_ids(self, listing_ids):
        """Sets the listing_ids of this FindListingRecommendationRequest.

        A comma-separated list of listing IDs for which you want Promoted Listings ad configuration information.  <p>Currently, this method accepts only <b>listingId</b> values from the Trading API.</p>  <p><b>Max:</b> 500 listing IDs</p>  # noqa: E501

        :param listing_ids: The listing_ids of this FindListingRecommendationRequest.  # noqa: E501
        :type: list[str]
        """

        self._listing_ids = listing_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindListingRecommendationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindListingRecommendationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
