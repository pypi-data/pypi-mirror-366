# coding: utf-8

"""
    Media API

    The <b>Media API</b> lets sellers to create, upload, and retrieve files, including:<ul><li>images</li><li>videos</li><li>documents (for GPSR regulations)</li></ul>  # noqa: E501

    OpenAPI spec version: v1_beta.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'str',
        'image_url': 'str'
    }

    attribute_map = {
        'expiration_date': 'expirationDate',
        'image_url': 'imageUrl'
    }

    def __init__(self, expiration_date=None, image_url=None):  # noqa: E501
        """ImageResponse - a model defined in Swagger"""  # noqa: E501
        self._expiration_date = None
        self._image_url = None
        self.discriminator = None
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if image_url is not None:
            self.image_url = image_url

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ImageResponse.  # noqa: E501

        The date and time when an unused EPS image will expire and be removed from the EPS server, in Coordinated Universal Time (UTC). As long as an EPS image is being used in an active listing, that image will remain on the EPS server and be accessible.  # noqa: E501

        :return: The expiration_date of this ImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ImageResponse.

        The date and time when an unused EPS image will expire and be removed from the EPS server, in Coordinated Universal Time (UTC). As long as an EPS image is being used in an active listing, that image will remain on the EPS server and be accessible.  # noqa: E501

        :param expiration_date: The expiration_date of this ImageResponse.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def image_url(self):
        """Gets the image_url of this ImageResponse.  # noqa: E501

        The EPS URL to access the uploaded image. This URL will be used in listing calls to add the image to a listing.  # noqa: E501

        :return: The image_url of this ImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ImageResponse.

        The EPS URL to access the uploaded image. This URL will be used in listing calls to add the image to a listing.  # noqa: E501

        :param image_url: The image_url of this ImageResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
