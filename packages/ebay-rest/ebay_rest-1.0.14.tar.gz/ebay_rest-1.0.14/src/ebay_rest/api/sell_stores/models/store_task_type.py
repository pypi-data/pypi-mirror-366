# coding: utf-8

"""
    Store API

    <p>This API provides stores-related resources for third-party developers. These resources let you retrieve basic store information such as store name, description, store url, return store category hierarchy, add,rename,move,delete a single user's eBay store category, and retrieve the processing status of these tasks.</p> <p>The stores resource methods require an access token created with the <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">authorization code grant</a> flow, using one or more scopes from the following list (please check your Application Keys page for a list of OAuth scopes available to your application)</p>  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StoreTaskType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'message': 'message',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, id=None, message=None, status=None, type=None):  # noqa: E501
        """StoreTaskType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._message = None
        self._status = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this StoreTaskType.  # noqa: E501

        The unique identifier of an eBay Store task.  # noqa: E501

        :return: The id of this StoreTaskType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreTaskType.

        The unique identifier of an eBay Store task.  # noqa: E501

        :param id: The id of this StoreTaskType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this StoreTaskType.  # noqa: E501

        This field provides a textual description on the status of the task, and could help user troubleshoot any issues if there is an issue with eBay creating the task.  # noqa: E501

        :return: The message of this StoreTaskType.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StoreTaskType.

        This field provides a textual description on the status of the task, and could help user troubleshoot any issues if there is an issue with eBay creating the task.  # noqa: E501

        :param message: The message of this StoreTaskType.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this StoreTaskType.  # noqa: E501

        The enumeration value here indicates the processing status of the task. See the <b>StoreTaskStatusEnum</b> type for more information on supported status values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/stores/types/api:StoreTaskStatusEnum'>eBay API documentation</a>  # noqa: E501

        :return: The status of this StoreTaskType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoreTaskType.

        The enumeration value here indicates the processing status of the task. See the <b>StoreTaskStatusEnum</b> type for more information on supported status values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/stores/types/api:StoreTaskStatusEnum'>eBay API documentation</a>  # noqa: E501

        :param status: The status of this StoreTaskType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this StoreTaskType.  # noqa: E501

        The enumeration value indicates the task type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/stores/types/api:StoreTaskTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The type of this StoreTaskType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoreTaskType.

        The enumeration value indicates the task type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/stores/types/api:StoreTaskTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param type: The type of this StoreTaskType.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreTaskType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreTaskType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
