# coding: utf-8

"""
    Buy Marketing API

    The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.  # noqa: E501

    OpenAPI spec version: v1_beta.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RatingAspect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'description': 'str',
        'name': 'str',
        'rating_aspect_distributions': 'list[RatingAspectDistribution]'
    }

    attribute_map = {
        'count': 'count',
        'description': 'description',
        'name': 'name',
        'rating_aspect_distributions': 'ratingAspectDistributions'
    }

    def __init__(self, count=None, description=None, name=None, rating_aspect_distributions=None):  # noqa: E501
        """RatingAspect - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._description = None
        self._name = None
        self._rating_aspect_distributions = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if rating_aspect_distributions is not None:
            self.rating_aspect_distributions = rating_aspect_distributions

    @property
    def count(self):
        """Gets the count of this RatingAspect.  # noqa: E501

        The number of eBay users that rated the product on this aspect.  # noqa: E501

        :return: The count of this RatingAspect.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RatingAspect.

        The number of eBay users that rated the product on this aspect.  # noqa: E501

        :param count: The count of this RatingAspect.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this RatingAspect.  # noqa: E501

        The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?  # noqa: E501

        :return: The description of this RatingAspect.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatingAspect.

        The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?  # noqa: E501

        :param description: The description of this RatingAspect.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this RatingAspect.  # noqa: E501

        The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up  # noqa: E501

        :return: The name of this RatingAspect.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RatingAspect.

        The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up  # noqa: E501

        :param name: The name of this RatingAspect.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rating_aspect_distributions(self):
        """Gets the rating_aspect_distributions of this RatingAspect.  # noqa: E501

        The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.  # noqa: E501

        :return: The rating_aspect_distributions of this RatingAspect.  # noqa: E501
        :rtype: list[RatingAspectDistribution]
        """
        return self._rating_aspect_distributions

    @rating_aspect_distributions.setter
    def rating_aspect_distributions(self, rating_aspect_distributions):
        """Sets the rating_aspect_distributions of this RatingAspect.

        The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.  # noqa: E501

        :param rating_aspect_distributions: The rating_aspect_distributions of this RatingAspect.  # noqa: E501
        :type: list[RatingAspectDistribution]
        """

        self._rating_aspect_distributions = rating_aspect_distributions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingAspect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingAspect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
