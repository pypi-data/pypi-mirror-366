# coding: utf-8

"""
    Buy Marketing API

    The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.  # noqa: E501

    OpenAPI spec version: v1_beta.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BestSellingProductResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchandised_products': 'list[MerchandisedProduct]',
        'warnings': 'list[Error]'
    }

    attribute_map = {
        'merchandised_products': 'merchandisedProducts',
        'warnings': 'warnings'
    }

    def __init__(self, merchandised_products=None, warnings=None):  # noqa: E501
        """BestSellingProductResponse - a model defined in Swagger"""  # noqa: E501
        self._merchandised_products = None
        self._warnings = None
        self.discriminator = None
        if merchandised_products is not None:
            self.merchandised_products = merchandised_products
        if warnings is not None:
            self.warnings = warnings

    @property
    def merchandised_products(self):
        """Gets the merchandised_products of this BestSellingProductResponse.  # noqa: E501

        An array of containers for the products.  # noqa: E501

        :return: The merchandised_products of this BestSellingProductResponse.  # noqa: E501
        :rtype: list[MerchandisedProduct]
        """
        return self._merchandised_products

    @merchandised_products.setter
    def merchandised_products(self, merchandised_products):
        """Sets the merchandised_products of this BestSellingProductResponse.

        An array of containers for the products.  # noqa: E501

        :param merchandised_products: The merchandised_products of this BestSellingProductResponse.  # noqa: E501
        :type: list[MerchandisedProduct]
        """

        self._merchandised_products = merchandised_products

    @property
    def warnings(self):
        """Gets the warnings of this BestSellingProductResponse.  # noqa: E501

        The container with all the warnings for the input request.  # noqa: E501

        :return: The warnings of this BestSellingProductResponse.  # noqa: E501
        :rtype: list[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this BestSellingProductResponse.

        The container with all the warnings for the input request.  # noqa: E501

        :param warnings: The warnings of this BestSellingProductResponse.  # noqa: E501
        :type: list[Error]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BestSellingProductResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BestSellingProductResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
