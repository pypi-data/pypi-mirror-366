# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.  # noqa: E501

    OpenAPI spec version: v1.20.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EbayCollectedCharges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ebay_shipping': 'Amount',
        'charges': 'list[Charge]'
    }

    attribute_map = {
        'ebay_shipping': 'ebayShipping',
        'charges': 'charges'
    }

    def __init__(self, ebay_shipping=None, charges=None):  # noqa: E501
        """EbayCollectedCharges - a model defined in Swagger"""  # noqa: E501
        self._ebay_shipping = None
        self._charges = None
        self.discriminator = None
        if ebay_shipping is not None:
            self.ebay_shipping = ebay_shipping
        if charges is not None:
            self.charges = charges

    @property
    def ebay_shipping(self):
        """Gets the ebay_shipping of this EbayCollectedCharges.  # noqa: E501


        :return: The ebay_shipping of this EbayCollectedCharges.  # noqa: E501
        :rtype: Amount
        """
        return self._ebay_shipping

    @ebay_shipping.setter
    def ebay_shipping(self, ebay_shipping):
        """Sets the ebay_shipping of this EbayCollectedCharges.


        :param ebay_shipping: The ebay_shipping of this EbayCollectedCharges.  # noqa: E501
        :type: Amount
        """

        self._ebay_shipping = ebay_shipping

    @property
    def charges(self):
        """Gets the charges of this EbayCollectedCharges.  # noqa: E501

        This array shows any charges that eBay collects from the buyer.<br><br><span class=\"tablenote\"><strong> Note: </strong> Currently, the only supported charge type is BUYER_PROTECTION.</span>  # noqa: E501

        :return: The charges of this EbayCollectedCharges.  # noqa: E501
        :rtype: list[Charge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this EbayCollectedCharges.

        This array shows any charges that eBay collects from the buyer.<br><br><span class=\"tablenote\"><strong> Note: </strong> Currently, the only supported charge type is BUYER_PROTECTION.</span>  # noqa: E501

        :param charges: The charges of this EbayCollectedCharges.  # noqa: E501
        :type: list[Charge]
        """

        self._charges = charges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EbayCollectedCharges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EbayCollectedCharges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
