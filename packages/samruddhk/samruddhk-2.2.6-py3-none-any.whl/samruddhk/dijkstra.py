
print("************************************DIJIKSTRA*********************************************")

print("import sys")
print("from heapq import heappush, heappop")

print("graph = {")
print("    'A': {'B': 2, 'C': 4},")
print("    'B': {'A': 2, 'C': 3, 'D': 8},")
print("    'C': {'A': 4, 'B': 3, 'E': 5, 'D': 2},")
print("    'D': {'B': 8, 'C': 2, 'E': 1},")
print("    'E': {'C': 5, 'D': 11, 'F': 1},")
print("    'F': {'D': 5, 'E': 2}")
print("}")

print("\nimport sys")
print("from heapq import heappush, heappop\n")

print("def dijkstra(graph, src, dest):")
print("    inf = sys.maxsize")
print("    node_data = {")
print("        'A': {'cost': inf, 'pred': []},")
print("        'B': {'cost': inf, 'pred': []},")
print("        'C': {'cost': inf, 'pred': []},")
print("        'D': {'cost': inf, 'pred': []},")
print("        'E': {'cost': inf, 'pred': []},")
print("        'F': {'cost': inf, 'pred': []},")
print("    }")
print("    node_data[src]['cost'] = 0")
print("    min_heap = [(0, src)]  # Priority queue to store (cost, node)\n")
print("    while min_heap:")
print("        current_cost, current_node = heappop(min_heap)")
print("        if current_node == dest:")
print("            break")
print("        if current_cost > node_data[current_node]['cost']:")
print("            continue\n")
print("        for neighbor, weight in graph[current_node].items():")
print("            cost = current_cost + weight")
print("            if cost < node_data[neighbor]['cost']:")
print("                node_data[neighbor]['cost'] = cost")
print("                node_data[neighbor]['pred'] = node_data[current_node]['pred'] + [current_node]")
print("                heappush(min_heap, (cost, neighbor))\n")
print("    shortest_distance = node_data[dest]['cost']")
print("    shortest_path = node_data[dest]['pred'] + [dest]")
print("    return shortest_distance, shortest_path\n")

print("graph = {")
print("    'A': {'B': 2, 'C': 4},")
print("    'B': {'A': 2, 'C': 3, 'D': 8},")
print("    'C': {'A': 4, 'B': 3, 'E': 5, 'D': 2},")
print("    'D': {'B': 8, 'C': 2, 'E': 1},")
print("    'E': {'C': 5, 'D': 11, 'F': 1},")
print("    'F': {'D': 5, 'E': 2}")
print("}\n")

print("source = 'A'")
print("destination = 'F'")
print("shortest_distance, shortest_path = dijkstra(graph, source, destination)")
print("print('Shortest distance from', source, 'to', destination, 'is', shortest_distance)")
print("print('Shortest path:', shortest_path)")



print("*********************************************************************************")