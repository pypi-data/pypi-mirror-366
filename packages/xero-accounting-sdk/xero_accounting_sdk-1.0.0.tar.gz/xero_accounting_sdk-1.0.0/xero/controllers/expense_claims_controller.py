# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from xero.api_helper import APIHelper
from xero.configuration import Server
from xero.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from xero.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from xero.exceptions.a_failed_request_due_to_validation_error_exception import AFailedRequestDueToValidationErrorException


class ExpenseClaimsController(BaseController):

    """A Controller to access Endpoints in the xero API."""
    def __init__(self, config):
        super(ExpenseClaimsController, self).__init__(config)

    def allows_you_to_retrieve_expense_claims(self,
                                              where,
                                              order,
                                              if_modified_since,
                                              xero_tenant_id):
        """Does a GET request to /ExpenseClaims.

        Args:
            where (str): Filter by an any element
            order (str): Order by an any element
            if_modified_since (str): Only records created or modified since
                this timestamp will be returned
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ExpenseClaims')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('where')
                         .value(where))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .header_param(Parameter()
                          .key('If-Modified-Since')
                          .value(if_modified_since))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_expense_claims_1(self,
                                                xero_tenant_id,
                                                body):
        """Does a PUT request to /ExpenseClaims.

        Args:
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveExpenseClaimsRequest): The request body
                parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ExpenseClaims')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()
