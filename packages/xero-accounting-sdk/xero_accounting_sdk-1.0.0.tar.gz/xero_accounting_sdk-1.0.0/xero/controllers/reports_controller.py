# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from xero.api_helper import APIHelper
from xero.configuration import Server
from xero.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from xero.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from xero.models.success_return_response_of_type_report_with_rows import SuccessReturnResponseOfTypeReportWithRows
from xero.models.success_return_response_of_type_report_with_rows_1 import SuccessReturnResponseOfTypeReportWithRows1


class ReportsController(BaseController):

    """A Controller to access Endpoints in the xero API."""
    def __init__(self, config):
        super(ReportsController, self).__init__(config)

    def allows_you_to_retrieve_report_for_bas_only_valid_for_au_orgs(self,
                                                                     xero_tenant_id):
        """Does a GET request to /Reports.

        Args:
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            SuccessReturnResponseOfTypeReportWithRows: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessReturnResponseOfTypeReportWithRows.from_dictionary)
        ).execute()

    def allows_you_to_retrieve_report_for_ten_ninety_nine(self,
                                                          report_year,
                                                          xero_tenant_id):
        """Does a GET request to /Reports/TenNinetyNine.

        Args:
            report_year (str): The year of the 1099 report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/TenNinetyNine')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('reportYear')
                         .value(report_year))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_aged_payables_by_contact(self,
                                                                   contact_id,
                                                                   date,
                                                                   from_date,
                                                                   to_date,
                                                                   xero_tenant_id):
        """Does a GET request to /Reports/AgedPayablesByContact.

        Args:
            contact_id (str): (Required) Unique identifier for a Contact
            date (str): The date of the Aged Payables By Contact report
            from_date (str): The from date of the Aged Payables By Contact
                report
            to_date (str): The to date of the Aged Payables By Contact report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/AgedPayablesByContact')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('contactId')
                         .value(contact_id))
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .query_param(Parameter()
                         .key('fromDate')
                         .value(from_date))
            .query_param(Parameter()
                         .key('toDate')
                         .value(to_date))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_aged_receivables_by_contact(self,
                                                                      contact_id,
                                                                      date,
                                                                      from_date,
                                                                      to_date,
                                                                      xero_tenant_id):
        """Does a GET request to /Reports/AgedReceivablesByContact.

        Args:
            contact_id (str): (Required) Unique identifier for a Contact
            date (str): The date of the Aged Receivables By Contact report
            from_date (str): The from date of the Aged Receivables By Contact
                report
            to_date (str): The to date of the Aged Receivables By Contact
                report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/AgedReceivablesByContact')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('contactId')
                         .value(contact_id))
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .query_param(Parameter()
                         .key('fromDate')
                         .value(from_date))
            .query_param(Parameter()
                         .key('toDate')
                         .value(to_date))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_balance_sheet(self,
                                                        date,
                                                        periods,
                                                        timeframe,
                                                        tracking_option_id_1,
                                                        tracking_option_id_2,
                                                        standard_layout,
                                                        payments_only,
                                                        xero_tenant_id):
        """Does a GET request to /Reports/BalanceSheet.

        Args:
            date (str): The date of the Balance Sheet report
            periods (str): The number of periods for the Balance Sheet report
            timeframe (str): The period size to compare to (MONTH, QUARTER,
                YEAR)
            tracking_option_id_1 (str): The tracking option 1 for the Balance
                Sheet report
            tracking_option_id_2 (str): The tracking option 2 for the Balance
                Sheet report
            standard_layout (str): The standard layout boolean for the Balance
                Sheet report
            payments_only (str): return a cash basis for the Balance Sheet
                report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/BalanceSheet')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .query_param(Parameter()
                         .key('periods')
                         .value(periods))
            .query_param(Parameter()
                         .key('timeframe')
                         .value(timeframe))
            .query_param(Parameter()
                         .key('trackingOptionID1')
                         .value(tracking_option_id_1))
            .query_param(Parameter()
                         .key('trackingOptionID2')
                         .value(tracking_option_id_2))
            .query_param(Parameter()
                         .key('standardLayout')
                         .value(standard_layout))
            .query_param(Parameter()
                         .key('paymentsOnly')
                         .value(payments_only))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_bank_summary(self,
                                                       from_date,
                                                       to_date,
                                                       xero_tenant_id):
        """Does a GET request to /Reports/BankSummary.

        Args:
            from_date (str): The from date for the Bank Summary report e.g.
                2018-03-31
            to_date (str): The to date for the Bank Summary report e.g.
                2018-03-31
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/BankSummary')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fromDate')
                         .value(from_date))
            .query_param(Parameter()
                         .key('toDate')
                         .value(to_date))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_bas_only_valid_for_au_orgs_1(self,
                                                                       report_id,
                                                                       xero_tenant_id):
        """Does a GET request to /Reports/{ReportID}.

        Args:
            report_id (str): (Required) Unique identifier for a Report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            SuccessReturnResponseOfTypeReportWithRows1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/{ReportID}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ReportID')
                            .value(report_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessReturnResponseOfTypeReportWithRows1.from_dictionary)
        ).execute()

    def allows_you_to_retrieve_report_for_budget_summary(self,
                                                         date,
                                                         period,
                                                         timeframe,
                                                         xero_tenant_id):
        """Does a GET request to /Reports/BudgetSummary.

        Args:
            date (str): The date for the Bank Summary report e.g. 2018-03-31
            period (str): The number of periods to compare (integer between 1
                and 12)
            timeframe (str): The period size to compare to (1=month,
                3=quarter, 12=year)
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/BudgetSummary')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .query_param(Parameter()
                         .key('period')
                         .value(period))
            .query_param(Parameter()
                         .key('timeframe')
                         .value(timeframe))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_executive_summary(self,
                                                            date,
                                                            xero_tenant_id):
        """Does a GET request to /Reports/ExecutiveSummary.

        Args:
            date (str): The date for the Bank Summary report e.g. 2018-03-31
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/ExecutiveSummary')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_report_for_profit_and_loss(self,
                                                          from_date,
                                                          to_date,
                                                          periods,
                                                          timeframe,
                                                          tracking_category_id,
                                                          tracking_category_id_2,
                                                          tracking_option_id,
                                                          tracking_option_id_2,
                                                          standard_layout,
                                                          payments_only,
                                                          xero_tenant_id):
        """Does a GET request to /Reports/ProfitAndLoss.

        Args:
            from_date (str): The from date for the ProfitAndLoss report e.g.
                2018-03-31
            to_date (str): The to date for the ProfitAndLoss report e.g.
                2018-03-31
            periods (str): The number of periods to compare (integer between 1
                and 12)
            timeframe (str): The period size to compare to (MONTH, QUARTER,
                YEAR)
            tracking_category_id (str): The trackingCategory 1 for the
                ProfitAndLoss report
            tracking_category_id_2 (str): The trackingCategory 2 for the
                ProfitAndLoss report
            tracking_option_id (str): The tracking option 1 for the
                ProfitAndLoss report
            tracking_option_id_2 (str): The tracking option 2 for the
                ProfitAndLoss report
            standard_layout (str): Return the standard layout for the
                ProfitAndLoss report
            payments_only (str): Return cash only basis for the ProfitAndLoss
                report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            SuccessReturnResponseOfTypeReportWithRows1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/ProfitAndLoss')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fromDate')
                         .value(from_date))
            .query_param(Parameter()
                         .key('toDate')
                         .value(to_date))
            .query_param(Parameter()
                         .key('periods')
                         .value(periods))
            .query_param(Parameter()
                         .key('timeframe')
                         .value(timeframe))
            .query_param(Parameter()
                         .key('trackingCategoryID')
                         .value(tracking_category_id))
            .query_param(Parameter()
                         .key('trackingCategoryID2')
                         .value(tracking_category_id_2))
            .query_param(Parameter()
                         .key('trackingOptionID')
                         .value(tracking_option_id))
            .query_param(Parameter()
                         .key('trackingOptionID2')
                         .value(tracking_option_id_2))
            .query_param(Parameter()
                         .key('standardLayout')
                         .value(standard_layout))
            .query_param(Parameter()
                         .key('paymentsOnly')
                         .value(payments_only))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessReturnResponseOfTypeReportWithRows1.from_dictionary)
        ).execute()

    def allows_you_to_retrieve_report_for_trial_balance(self,
                                                        date,
                                                        payments_only,
                                                        xero_tenant_id):
        """Does a GET request to /Reports/TrialBalance.

        Args:
            date (str): The date for the Trial Balance report e.g. 2018-03-31
            payments_only (str): Return cash only basis for the Trial Balance
                report
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Reports/TrialBalance')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('date')
                         .value(date))
            .query_param(Parameter()
                         .key('paymentsOnly')
                         .value(payments_only))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()
