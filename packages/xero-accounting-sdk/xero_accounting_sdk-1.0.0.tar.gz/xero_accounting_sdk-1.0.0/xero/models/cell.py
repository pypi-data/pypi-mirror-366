# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.attributes import Attributes
from xero.models.value import Value


class Cell(object):

    """Implementation of the 'Cell' model.

    Attributes:
        value (Value): The model property of type Value.
        attributes (Attributes): The model property of type Attributes.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "value": 'Value',
        "attributes": 'Attributes'
    }

    def __init__(self,
                 value=None,
                 attributes=None):
        """Constructor for the Cell class"""

        # Initialize members of the class
        self.value = value 
        self.attributes = attributes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        value = Value.from_dictionary(dictionary.get('Value')) if dictionary.get('Value') else None
        attributes = Attributes.from_dictionary(dictionary.get('Attributes')) if dictionary.get('Attributes') else None
        # Return an object of this model
        return cls(value,
                   attributes)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!r}, '
                f'attributes={self.attributes!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!s}, '
                f'attributes={self.attributes!s})')
