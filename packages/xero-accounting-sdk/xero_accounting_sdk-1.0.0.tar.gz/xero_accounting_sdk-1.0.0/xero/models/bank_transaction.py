# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.bank_account import BankAccount
from xero.models.contact_4 import Contact4
from xero.models.line_item_4 import LineItem4
from xero.models.validation_error import ValidationError


class BankTransaction(object):

    """Implementation of the 'BankTransaction' model.

    Attributes:
        mtype (str): The model property of type str.
        line_items (List[LineItem4]): The model property of type
            List[LineItem4].
        bank_account (BankAccount): The model property of type BankAccount.
        contact (Contact4): The model property of type Contact4.
        is_reconciled (str): The model property of type str.
        date (str): The model property of type str.
        reference (str): The model property of type str.
        currency_code (str): The model property of type str.
        currency_rate (str): The model property of type str.
        url (str): The model property of type str.
        status (str): The model property of type str.
        line_amount_types (str): The model property of type str.
        sub_total (str): The model property of type str.
        total_tax (str): The model property of type str.
        total (str): The model property of type str.
        bank_transaction_id (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'Type',
        "line_items": 'LineItems',
        "bank_account": 'BankAccount',
        "contact": 'Contact',
        "is_reconciled": 'IsReconciled',
        "date": 'Date',
        "reference": 'Reference',
        "currency_code": 'CurrencyCode',
        "currency_rate": 'CurrencyRate',
        "url": 'Url',
        "status": 'Status',
        "line_amount_types": 'LineAmountTypes',
        "sub_total": 'SubTotal',
        "total_tax": 'TotalTax',
        "total": 'Total',
        "bank_transaction_id": 'BankTransactionID',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 mtype=None,
                 line_items=None,
                 bank_account=None,
                 contact=None,
                 is_reconciled=None,
                 date=None,
                 reference=None,
                 currency_code=None,
                 currency_rate=None,
                 url=None,
                 status=None,
                 line_amount_types=None,
                 sub_total=None,
                 total_tax=None,
                 total=None,
                 bank_transaction_id=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the BankTransaction class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.line_items = line_items 
        self.bank_account = bank_account 
        self.contact = contact 
        self.is_reconciled = is_reconciled 
        self.date = date 
        self.reference = reference 
        self.currency_code = currency_code 
        self.currency_rate = currency_rate 
        self.url = url 
        self.status = status 
        self.line_amount_types = line_amount_types 
        self.sub_total = sub_total 
        self.total_tax = total_tax 
        self.total = total 
        self.bank_transaction_id = bank_transaction_id 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem4.from_dictionary(x) for x in dictionary.get('LineItems')]
        bank_account = BankAccount.from_dictionary(dictionary.get('BankAccount')) if dictionary.get('BankAccount') else None
        contact = Contact4.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        is_reconciled = dictionary.get("IsReconciled") if dictionary.get("IsReconciled") else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        url = dictionary.get("Url") if dictionary.get("Url") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        line_amount_types = dictionary.get("LineAmountTypes") if dictionary.get("LineAmountTypes") else None
        sub_total = dictionary.get("SubTotal") if dictionary.get("SubTotal") else None
        total_tax = dictionary.get("TotalTax") if dictionary.get("TotalTax") else None
        total = dictionary.get("Total") if dictionary.get("Total") else None
        bank_transaction_id = dictionary.get("BankTransactionID") if dictionary.get("BankTransactionID") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(mtype,
                   line_items,
                   bank_account,
                   contact,
                   is_reconciled,
                   date,
                   reference,
                   currency_code,
                   currency_rate,
                   url,
                   status,
                   line_amount_types,
                   sub_total,
                   total_tax,
                   total,
                   bank_transaction_id,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'line_items={self.line_items!r}, '
                f'bank_account={self.bank_account!r}, '
                f'contact={self.contact!r}, '
                f'is_reconciled={self.is_reconciled!r}, '
                f'date={self.date!r}, '
                f'reference={self.reference!r}, '
                f'currency_code={self.currency_code!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'url={self.url!r}, '
                f'status={self.status!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'sub_total={self.sub_total!r}, '
                f'total_tax={self.total_tax!r}, '
                f'total={self.total!r}, '
                f'bank_transaction_id={self.bank_transaction_id!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'line_items={self.line_items!s}, '
                f'bank_account={self.bank_account!s}, '
                f'contact={self.contact!s}, '
                f'is_reconciled={self.is_reconciled!s}, '
                f'date={self.date!s}, '
                f'reference={self.reference!s}, '
                f'currency_code={self.currency_code!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'url={self.url!s}, '
                f'status={self.status!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'sub_total={self.sub_total!s}, '
                f'total_tax={self.total_tax!s}, '
                f'total={self.total!s}, '
                f'bank_transaction_id={self.bank_transaction_id!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
