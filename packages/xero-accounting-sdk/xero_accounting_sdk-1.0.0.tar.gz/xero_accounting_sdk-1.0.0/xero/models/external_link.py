# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ExternalLink(object):

    """Implementation of the 'ExternalLink' model.

    Attributes:
        link_type (str): The model property of type str.
        url (str): The model property of type str.
        description (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "link_type": 'LinkType',
        "url": 'Url',
        "description": 'Description'
    }

    def __init__(self,
                 link_type=None,
                 url=None,
                 description=None):
        """Constructor for the ExternalLink class"""

        # Initialize members of the class
        self.link_type = link_type 
        self.url = url 
        self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        link_type = dictionary.get("LinkType") if dictionary.get("LinkType") else None
        url = dictionary.get("Url") if dictionary.get("Url") else None
        description = dictionary.get("Description") if dictionary.get("Description") else None
        # Return an object of this model
        return cls(link_type,
                   url,
                   description)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'link_type={self.link_type!r}, '
                f'url={self.url!r}, '
                f'description={self.description!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'link_type={self.link_type!s}, '
                f'url={self.url!s}, '
                f'description={self.description!s})')
