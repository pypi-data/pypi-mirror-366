# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class User(object):

    """Implementation of the 'User' model.

    Attributes:
        user_id (str): The model property of type str.
        email_address (str): The model property of type str.
        first_name (str): The model property of type str.
        last_name (str): The model property of type str.
        is_subscriber (str): The model property of type str.
        organisation_role (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_id": 'UserID',
        "email_address": 'EmailAddress',
        "first_name": 'FirstName',
        "last_name": 'LastName',
        "is_subscriber": 'IsSubscriber',
        "organisation_role": 'OrganisationRole'
    }

    def __init__(self,
                 user_id=None,
                 email_address=None,
                 first_name=None,
                 last_name=None,
                 is_subscriber=None,
                 organisation_role=None):
        """Constructor for the User class"""

        # Initialize members of the class
        self.user_id = user_id 
        self.email_address = email_address 
        self.first_name = first_name 
        self.last_name = last_name 
        self.is_subscriber = is_subscriber 
        self.organisation_role = organisation_role 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        user_id = dictionary.get("UserID") if dictionary.get("UserID") else None
        email_address = dictionary.get("EmailAddress") if dictionary.get("EmailAddress") else None
        first_name = dictionary.get("FirstName") if dictionary.get("FirstName") else None
        last_name = dictionary.get("LastName") if dictionary.get("LastName") else None
        is_subscriber = dictionary.get("IsSubscriber") if dictionary.get("IsSubscriber") else None
        organisation_role = dictionary.get("OrganisationRole") if dictionary.get("OrganisationRole") else None
        # Return an object of this model
        return cls(user_id,
                   email_address,
                   first_name,
                   last_name,
                   is_subscriber,
                   organisation_role)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'user_id={self.user_id!r}, '
                f'email_address={self.email_address!r}, '
                f'first_name={self.first_name!r}, '
                f'last_name={self.last_name!r}, '
                f'is_subscriber={self.is_subscriber!r}, '
                f'organisation_role={self.organisation_role!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'user_id={self.user_id!s}, '
                f'email_address={self.email_address!s}, '
                f'first_name={self.first_name!s}, '
                f'last_name={self.last_name!s}, '
                f'is_subscriber={self.is_subscriber!s}, '
                f'organisation_role={self.organisation_role!s})')
