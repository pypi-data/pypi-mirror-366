# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.purchase_details import PurchaseDetails
from xero.models.sales_details import SalesDetails
from xero.models.validation_error import ValidationError


class Item(object):

    """Implementation of the 'Item' model.

    Attributes:
        code (str): The model property of type str.
        inventory_asset_account_code (str): The model property of type str.
        name (str): The model property of type str.
        is_sold (str): The model property of type str.
        is_purchased (str): The model property of type str.
        description (str): The model property of type str.
        purchase_description (str): The model property of type str.
        purchase_details (PurchaseDetails): The model property of type
            PurchaseDetails.
        sales_details (SalesDetails): The model property of type SalesDetails.
        is_tracked_as_inventory (str): The model property of type str.
        total_cost_pool (str): The model property of type str.
        quantity_on_hand (str): The model property of type str.
        item_id (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'Code',
        "inventory_asset_account_code": 'InventoryAssetAccountCode',
        "name": 'Name',
        "is_sold": 'IsSold',
        "is_purchased": 'IsPurchased',
        "description": 'Description',
        "purchase_description": 'PurchaseDescription',
        "purchase_details": 'PurchaseDetails',
        "sales_details": 'SalesDetails',
        "is_tracked_as_inventory": 'IsTrackedAsInventory',
        "total_cost_pool": 'TotalCostPool',
        "quantity_on_hand": 'QuantityOnHand',
        "item_id": 'ItemID',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 code=None,
                 inventory_asset_account_code=None,
                 name=None,
                 is_sold=None,
                 is_purchased=None,
                 description=None,
                 purchase_description=None,
                 purchase_details=None,
                 sales_details=None,
                 is_tracked_as_inventory=None,
                 total_cost_pool=None,
                 quantity_on_hand=None,
                 item_id=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the Item class"""

        # Initialize members of the class
        self.code = code 
        self.inventory_asset_account_code = inventory_asset_account_code 
        self.name = name 
        self.is_sold = is_sold 
        self.is_purchased = is_purchased 
        self.description = description 
        self.purchase_description = purchase_description 
        self.purchase_details = purchase_details 
        self.sales_details = sales_details 
        self.is_tracked_as_inventory = is_tracked_as_inventory 
        self.total_cost_pool = total_cost_pool 
        self.quantity_on_hand = quantity_on_hand 
        self.item_id = item_id 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("Code") if dictionary.get("Code") else None
        inventory_asset_account_code = dictionary.get("InventoryAssetAccountCode") if dictionary.get("InventoryAssetAccountCode") else None
        name = dictionary.get("Name") if dictionary.get("Name") else None
        is_sold = dictionary.get("IsSold") if dictionary.get("IsSold") else None
        is_purchased = dictionary.get("IsPurchased") if dictionary.get("IsPurchased") else None
        description = dictionary.get("Description") if dictionary.get("Description") else None
        purchase_description = dictionary.get("PurchaseDescription") if dictionary.get("PurchaseDescription") else None
        purchase_details = PurchaseDetails.from_dictionary(dictionary.get('PurchaseDetails')) if dictionary.get('PurchaseDetails') else None
        sales_details = SalesDetails.from_dictionary(dictionary.get('SalesDetails')) if dictionary.get('SalesDetails') else None
        is_tracked_as_inventory = dictionary.get("IsTrackedAsInventory") if dictionary.get("IsTrackedAsInventory") else None
        total_cost_pool = dictionary.get("TotalCostPool") if dictionary.get("TotalCostPool") else None
        quantity_on_hand = dictionary.get("QuantityOnHand") if dictionary.get("QuantityOnHand") else None
        item_id = dictionary.get("ItemID") if dictionary.get("ItemID") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(code,
                   inventory_asset_account_code,
                   name,
                   is_sold,
                   is_purchased,
                   description,
                   purchase_description,
                   purchase_details,
                   sales_details,
                   is_tracked_as_inventory,
                   total_cost_pool,
                   quantity_on_hand,
                   item_id,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'inventory_asset_account_code={self.inventory_asset_account_code!r}, '
                f'name={self.name!r}, '
                f'is_sold={self.is_sold!r}, '
                f'is_purchased={self.is_purchased!r}, '
                f'description={self.description!r}, '
                f'purchase_description={self.purchase_description!r}, '
                f'purchase_details={self.purchase_details!r}, '
                f'sales_details={self.sales_details!r}, '
                f'is_tracked_as_inventory={self.is_tracked_as_inventory!r}, '
                f'total_cost_pool={self.total_cost_pool!r}, '
                f'quantity_on_hand={self.quantity_on_hand!r}, '
                f'item_id={self.item_id!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'inventory_asset_account_code={self.inventory_asset_account_code!s}, '
                f'name={self.name!s}, '
                f'is_sold={self.is_sold!s}, '
                f'is_purchased={self.is_purchased!s}, '
                f'description={self.description!s}, '
                f'purchase_description={self.purchase_description!s}, '
                f'purchase_details={self.purchase_details!s}, '
                f'sales_details={self.sales_details!s}, '
                f'is_tracked_as_inventory={self.is_tracked_as_inventory!s}, '
                f'total_cost_pool={self.total_cost_pool!s}, '
                f'quantity_on_hand={self.quantity_on_hand!s}, '
                f'item_id={self.item_id!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
