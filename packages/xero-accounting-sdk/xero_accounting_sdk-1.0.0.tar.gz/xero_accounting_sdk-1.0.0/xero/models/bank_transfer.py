# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.from_bank_account import FromBankAccount
from xero.models.to_bank_account import ToBankAccount
from xero.models.validation_error import ValidationError


class BankTransfer(object):

    """Implementation of the 'BankTransfer' model.

    Attributes:
        from_bank_account (FromBankAccount): The model property of type
            FromBankAccount.
        to_bank_account (ToBankAccount): The model property of type
            ToBankAccount.
        amount (str): The model property of type str.
        date (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "from_bank_account": 'FromBankAccount',
        "to_bank_account": 'ToBankAccount',
        "amount": 'Amount',
        "date": 'Date',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 from_bank_account=None,
                 to_bank_account=None,
                 amount=None,
                 date=None,
                 validation_errors=None):
        """Constructor for the BankTransfer class"""

        # Initialize members of the class
        self.from_bank_account = from_bank_account 
        self.to_bank_account = to_bank_account 
        self.amount = amount 
        self.date = date 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        from_bank_account = FromBankAccount.from_dictionary(dictionary.get('FromBankAccount')) if dictionary.get('FromBankAccount') else None
        to_bank_account = ToBankAccount.from_dictionary(dictionary.get('ToBankAccount')) if dictionary.get('ToBankAccount') else None
        amount = dictionary.get("Amount") if dictionary.get("Amount") else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(from_bank_account,
                   to_bank_account,
                   amount,
                   date,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'from_bank_account={self.from_bank_account!r}, '
                f'to_bank_account={self.to_bank_account!r}, '
                f'amount={self.amount!r}, '
                f'date={self.date!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'from_bank_account={self.from_bank_account!s}, '
                f'to_bank_account={self.to_bank_account!s}, '
                f'amount={self.amount!s}, '
                f'date={self.date!s}, '
                f'validation_errors={self.validation_errors!s})')
