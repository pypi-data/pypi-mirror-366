# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.allocation import Allocation
from xero.models.contact import Contact
from xero.models.line_amount_types import LineAmountTypes
from xero.models.line_item import LineItem
from xero.models.payment_1 import Payment1
from xero.models.validation_error_9 import ValidationError9


class CreditNote(object):

    """Implementation of the 'CreditNote' model.

    Attributes:
        mtype (str): The model property of type str.
        contact (Contact): The model property of type Contact.
        date (str): The model property of type str.
        due_date (str): The model property of type str.
        status (str): The model property of type str.
        line_amount_types (LineAmountTypes): The model property of type
            LineAmountTypes.
        line_items (List[LineItem]): The model property of type List[LineItem].
        sub_total (str): The model property of type str.
        total_tax (str): The model property of type str.
        total (str): The model property of type str.
        currency_code (str): The model property of type str.
        fully_paid_on_date (str): The model property of type str.
        credit_note_id (str): The model property of type str.
        credit_note_number (str): The model property of type str.
        reference (str): The model property of type str.
        currency_rate (str): The model property of type str.
        remaining_credit (str): The model property of type str.
        allocations (List[Allocation]): The model property of type
            List[Allocation].
        applied_amount (str): The model property of type str.
        payments (List[Payment1]): The model property of type List[Payment1].
        branding_theme_id (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        has_attachments (str): The model property of type str.
        has_errors (str): The model property of type str.
        validation_errors (List[ValidationError9]): The model property of type
            List[ValidationError9].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'Type',
        "contact": 'Contact',
        "date": 'Date',
        "due_date": 'DueDate',
        "status": 'Status',
        "line_amount_types": 'LineAmountTypes',
        "line_items": 'LineItems',
        "sub_total": 'SubTotal',
        "total_tax": 'TotalTax',
        "total": 'Total',
        "currency_code": 'CurrencyCode',
        "fully_paid_on_date": 'FullyPaidOnDate',
        "credit_note_id": 'CreditNoteID',
        "credit_note_number": 'CreditNoteNumber',
        "reference": 'Reference',
        "currency_rate": 'CurrencyRate',
        "remaining_credit": 'RemainingCredit',
        "allocations": 'Allocations',
        "applied_amount": 'AppliedAmount',
        "payments": 'Payments',
        "branding_theme_id": 'BrandingThemeID',
        "status_attribute_string": 'StatusAttributeString',
        "has_attachments": 'HasAttachments',
        "has_errors": 'HasErrors',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 mtype=None,
                 contact=None,
                 date=None,
                 due_date=None,
                 status=None,
                 line_amount_types=None,
                 line_items=None,
                 sub_total=None,
                 total_tax=None,
                 total=None,
                 currency_code=None,
                 fully_paid_on_date=None,
                 credit_note_id=None,
                 credit_note_number=None,
                 reference=None,
                 currency_rate=None,
                 remaining_credit=None,
                 allocations=None,
                 applied_amount=None,
                 payments=None,
                 branding_theme_id=None,
                 status_attribute_string=None,
                 has_attachments=None,
                 has_errors=None,
                 validation_errors=None):
        """Constructor for the CreditNote class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.contact = contact 
        self.date = date 
        self.due_date = due_date 
        self.status = status 
        self.line_amount_types = line_amount_types 
        self.line_items = line_items 
        self.sub_total = sub_total 
        self.total_tax = total_tax 
        self.total = total 
        self.currency_code = currency_code 
        self.fully_paid_on_date = fully_paid_on_date 
        self.credit_note_id = credit_note_id 
        self.credit_note_number = credit_note_number 
        self.reference = reference 
        self.currency_rate = currency_rate 
        self.remaining_credit = remaining_credit 
        self.allocations = allocations 
        self.applied_amount = applied_amount 
        self.payments = payments 
        self.branding_theme_id = branding_theme_id 
        self.status_attribute_string = status_attribute_string 
        self.has_attachments = has_attachments 
        self.has_errors = has_errors 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        contact = Contact.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        due_date = dictionary.get("DueDate") if dictionary.get("DueDate") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        line_amount_types = LineAmountTypes.from_dictionary(dictionary.get('LineAmountTypes')) if dictionary.get('LineAmountTypes') else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem.from_dictionary(x) for x in dictionary.get('LineItems')]
        sub_total = dictionary.get("SubTotal") if dictionary.get("SubTotal") else None
        total_tax = dictionary.get("TotalTax") if dictionary.get("TotalTax") else None
        total = dictionary.get("Total") if dictionary.get("Total") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        fully_paid_on_date = dictionary.get("FullyPaidOnDate") if dictionary.get("FullyPaidOnDate") else None
        credit_note_id = dictionary.get("CreditNoteID") if dictionary.get("CreditNoteID") else None
        credit_note_number = dictionary.get("CreditNoteNumber") if dictionary.get("CreditNoteNumber") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        remaining_credit = dictionary.get("RemainingCredit") if dictionary.get("RemainingCredit") else None
        allocations = None
        if dictionary.get('Allocations') is not None:
            allocations = [Allocation.from_dictionary(x) for x in dictionary.get('Allocations')]
        applied_amount = dictionary.get("AppliedAmount") if dictionary.get("AppliedAmount") else None
        payments = None
        if dictionary.get('Payments') is not None:
            payments = [Payment1.from_dictionary(x) for x in dictionary.get('Payments')]
        branding_theme_id = dictionary.get("BrandingThemeID") if dictionary.get("BrandingThemeID") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        has_attachments = dictionary.get("HasAttachments") if dictionary.get("HasAttachments") else None
        has_errors = dictionary.get("HasErrors") if dictionary.get("HasErrors") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError9.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(mtype,
                   contact,
                   date,
                   due_date,
                   status,
                   line_amount_types,
                   line_items,
                   sub_total,
                   total_tax,
                   total,
                   currency_code,
                   fully_paid_on_date,
                   credit_note_id,
                   credit_note_number,
                   reference,
                   currency_rate,
                   remaining_credit,
                   allocations,
                   applied_amount,
                   payments,
                   branding_theme_id,
                   status_attribute_string,
                   has_attachments,
                   has_errors,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'contact={self.contact!r}, '
                f'date={self.date!r}, '
                f'due_date={self.due_date!r}, '
                f'status={self.status!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'line_items={self.line_items!r}, '
                f'sub_total={self.sub_total!r}, '
                f'total_tax={self.total_tax!r}, '
                f'total={self.total!r}, '
                f'currency_code={self.currency_code!r}, '
                f'fully_paid_on_date={self.fully_paid_on_date!r}, '
                f'credit_note_id={self.credit_note_id!r}, '
                f'credit_note_number={self.credit_note_number!r}, '
                f'reference={self.reference!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'remaining_credit={self.remaining_credit!r}, '
                f'allocations={self.allocations!r}, '
                f'applied_amount={self.applied_amount!r}, '
                f'payments={self.payments!r}, '
                f'branding_theme_id={self.branding_theme_id!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'has_attachments={self.has_attachments!r}, '
                f'has_errors={self.has_errors!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'contact={self.contact!s}, '
                f'date={self.date!s}, '
                f'due_date={self.due_date!s}, '
                f'status={self.status!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'line_items={self.line_items!s}, '
                f'sub_total={self.sub_total!s}, '
                f'total_tax={self.total_tax!s}, '
                f'total={self.total!s}, '
                f'currency_code={self.currency_code!s}, '
                f'fully_paid_on_date={self.fully_paid_on_date!s}, '
                f'credit_note_id={self.credit_note_id!s}, '
                f'credit_note_number={self.credit_note_number!s}, '
                f'reference={self.reference!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'remaining_credit={self.remaining_credit!s}, '
                f'allocations={self.allocations!s}, '
                f'applied_amount={self.applied_amount!s}, '
                f'payments={self.payments!s}, '
                f'branding_theme_id={self.branding_theme_id!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'has_attachments={self.has_attachments!s}, '
                f'has_errors={self.has_errors!s}, '
                f'validation_errors={self.validation_errors!s})')
