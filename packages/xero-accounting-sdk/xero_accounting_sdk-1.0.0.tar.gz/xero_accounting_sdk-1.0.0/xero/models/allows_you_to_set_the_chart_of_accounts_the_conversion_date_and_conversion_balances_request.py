# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.account import Account
from xero.models.conversion_balance import ConversionBalance
from xero.models.conversion_date import ConversionDate


class AllowsYouToSetTheChartOfAccountsTheConversionDateAndConversionBalancesRequest(object):

    """Implementation of the 'Allows you to set the chart of accounts, the conversion date and conversion balances Request' model.

    Attributes:
        conversion_date (ConversionDate): The model property of type
            ConversionDate.
        conversion_balances (List[ConversionBalance]): The model property of
            type List[ConversionBalance].
        accounts (List[Account]): The model property of type List[Account].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "conversion_date": 'ConversionDate',
        "conversion_balances": 'ConversionBalances',
        "accounts": 'Accounts'
    }

    def __init__(self,
                 conversion_date=None,
                 conversion_balances=None,
                 accounts=None):
        """Constructor for the AllowsYouToSetTheChartOfAccountsTheConversionDateAndConversionBalancesRequest class"""

        # Initialize members of the class
        self.conversion_date = conversion_date 
        self.conversion_balances = conversion_balances 
        self.accounts = accounts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        conversion_date = ConversionDate.from_dictionary(dictionary.get('ConversionDate')) if dictionary.get('ConversionDate') else None
        conversion_balances = None
        if dictionary.get('ConversionBalances') is not None:
            conversion_balances = [ConversionBalance.from_dictionary(x) for x in dictionary.get('ConversionBalances')]
        accounts = None
        if dictionary.get('Accounts') is not None:
            accounts = [Account.from_dictionary(x) for x in dictionary.get('Accounts')]
        # Return an object of this model
        return cls(conversion_date,
                   conversion_balances,
                   accounts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'conversion_date={self.conversion_date!r}, '
                f'conversion_balances={self.conversion_balances!r}, '
                f'accounts={self.accounts!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'conversion_date={self.conversion_date!s}, '
                f'conversion_balances={self.conversion_balances!s}, '
                f'accounts={self.accounts!s})')
