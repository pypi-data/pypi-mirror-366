# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.account import Account
from xero.models.payment import Payment


class BatchPayment(object):

    """Implementation of the 'BatchPayment' model.

    Attributes:
        account (Account): The model property of type Account.
        reference (str): The model property of type str.
        particulars (str): The model property of type str.
        code (str): The model property of type str.
        details (str): The model property of type str.
        narrative (str): The model property of type str.
        date_string (str): The model property of type str.
        date (str): The model property of type str.
        amount (str): The model property of type str.
        payments (List[Payment]): The model property of type List[Payment].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account": 'Account',
        "reference": 'Reference',
        "particulars": 'Particulars',
        "code": 'Code',
        "details": 'Details',
        "narrative": 'Narrative',
        "date_string": 'DateString',
        "date": 'Date',
        "amount": 'Amount',
        "payments": 'Payments'
    }

    def __init__(self,
                 account=None,
                 reference=None,
                 particulars=None,
                 code=None,
                 details=None,
                 narrative=None,
                 date_string=None,
                 date=None,
                 amount=None,
                 payments=None):
        """Constructor for the BatchPayment class"""

        # Initialize members of the class
        self.account = account 
        self.reference = reference 
        self.particulars = particulars 
        self.code = code 
        self.details = details 
        self.narrative = narrative 
        self.date_string = date_string 
        self.date = date 
        self.amount = amount 
        self.payments = payments 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account = Account.from_dictionary(dictionary.get('Account')) if dictionary.get('Account') else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        particulars = dictionary.get("Particulars") if dictionary.get("Particulars") else None
        code = dictionary.get("Code") if dictionary.get("Code") else None
        details = dictionary.get("Details") if dictionary.get("Details") else None
        narrative = dictionary.get("Narrative") if dictionary.get("Narrative") else None
        date_string = dictionary.get("DateString") if dictionary.get("DateString") else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        amount = dictionary.get("Amount") if dictionary.get("Amount") else None
        payments = None
        if dictionary.get('Payments') is not None:
            payments = [Payment.from_dictionary(x) for x in dictionary.get('Payments')]
        # Return an object of this model
        return cls(account,
                   reference,
                   particulars,
                   code,
                   details,
                   narrative,
                   date_string,
                   date,
                   amount,
                   payments)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account={self.account!r}, '
                f'reference={self.reference!r}, '
                f'particulars={self.particulars!r}, '
                f'code={self.code!r}, '
                f'details={self.details!r}, '
                f'narrative={self.narrative!r}, '
                f'date_string={self.date_string!r}, '
                f'date={self.date!r}, '
                f'amount={self.amount!r}, '
                f'payments={self.payments!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account={self.account!s}, '
                f'reference={self.reference!s}, '
                f'particulars={self.particulars!s}, '
                f'code={self.code!s}, '
                f'details={self.details!s}, '
                f'narrative={self.narrative!s}, '
                f'date_string={self.date_string!s}, '
                f'date={self.date!s}, '
                f'amount={self.amount!s}, '
                f'payments={self.payments!s})')
