# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.cell import Cell
from xero.models.row_1 import Row1


class Row(object):

    """Implementation of the 'Row' model.

    Attributes:
        row_type (str): The model property of type str.
        title (str): The model property of type str.
        cells (List[Cell]): The model property of type List[Cell].
        rows (List[Row1]): The model property of type List[Row1].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "row_type": 'RowType',
        "title": 'Title',
        "cells": 'Cells',
        "rows": 'Rows'
    }

    def __init__(self,
                 row_type=None,
                 title=None,
                 cells=None,
                 rows=None):
        """Constructor for the Row class"""

        # Initialize members of the class
        self.row_type = row_type 
        self.title = title 
        self.cells = cells 
        self.rows = rows 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        row_type = dictionary.get("RowType") if dictionary.get("RowType") else None
        title = dictionary.get("Title") if dictionary.get("Title") else None
        cells = None
        if dictionary.get('Cells') is not None:
            cells = [Cell.from_dictionary(x) for x in dictionary.get('Cells')]
        rows = None
        if dictionary.get('Rows') is not None:
            rows = [Row1.from_dictionary(x) for x in dictionary.get('Rows')]
        # Return an object of this model
        return cls(row_type,
                   title,
                   cells,
                   rows)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'row_type={self.row_type!r}, '
                f'title={self.title!r}, '
                f'cells={self.cells!r}, '
                f'rows={self.rows!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'row_type={self.row_type!s}, '
                f'title={self.title!s}, '
                f'cells={self.cells!s}, '
                f'rows={self.rows!s})')
