# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.options_3 import Options3


class AllowsYouToUpdateTrackingCategoriesRequest(object):

    """Implementation of the 'Allows you to update tracking categories Request' model.

    Attributes:
        tracking_category_id (str): The model property of type str.
        tracking_option_id (str): The model property of type str.
        name (str): The model property of type str.
        option (str): The model property of type str.
        status (str): The model property of type str.
        options (List[Options3]): The model property of type List[Options3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tracking_category_id": 'TrackingCategoryID',
        "tracking_option_id": 'TrackingOptionID',
        "name": 'Name',
        "option": 'Option',
        "status": 'Status',
        "options": 'Options'
    }

    def __init__(self,
                 tracking_category_id=None,
                 tracking_option_id=None,
                 name=None,
                 option=None,
                 status=None,
                 options=None):
        """Constructor for the AllowsYouToUpdateTrackingCategoriesRequest class"""

        # Initialize members of the class
        self.tracking_category_id = tracking_category_id 
        self.tracking_option_id = tracking_option_id 
        self.name = name 
        self.option = option 
        self.status = status 
        self.options = options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tracking_category_id = dictionary.get("TrackingCategoryID") if dictionary.get("TrackingCategoryID") else None
        tracking_option_id = dictionary.get("TrackingOptionID") if dictionary.get("TrackingOptionID") else None
        name = dictionary.get("Name") if dictionary.get("Name") else None
        option = dictionary.get("Option") if dictionary.get("Option") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        options = None
        if dictionary.get('Options') is not None:
            options = [Options3.from_dictionary(x) for x in dictionary.get('Options')]
        # Return an object of this model
        return cls(tracking_category_id,
                   tracking_option_id,
                   name,
                   option,
                   status,
                   options)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_id={self.tracking_category_id!r}, '
                f'tracking_option_id={self.tracking_option_id!r}, '
                f'name={self.name!r}, '
                f'option={self.option!r}, '
                f'status={self.status!r}, '
                f'options={self.options!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_id={self.tracking_category_id!s}, '
                f'tracking_option_id={self.tracking_option_id!s}, '
                f'name={self.name!s}, '
                f'option={self.option!s}, '
                f'status={self.status!s}, '
                f'options={self.options!s})')
