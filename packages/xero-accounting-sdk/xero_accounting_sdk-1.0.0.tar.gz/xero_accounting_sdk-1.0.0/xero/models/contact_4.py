# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.address import Address
from xero.models.attachment_3 import Attachment3
from xero.models.balances import Balances
from xero.models.batch_payments import BatchPayments
from xero.models.branding_theme import BrandingTheme
from xero.models.contact_group import ContactGroup
from xero.models.contact_person import ContactPerson
from xero.models.payment_terms import PaymentTerms
from xero.models.phone import Phone
from xero.models.purchases_tracking_category import PurchasesTrackingCategory
from xero.models.sales_tracking_category import SalesTrackingCategory
from xero.models.validation_error import ValidationError


class Contact4(object):

    """Implementation of the 'Contact4' model.

    Attributes:
        contact_id (str): The model property of type str.
        contact_number (str): The model property of type str.
        account_number (str): The model property of type str.
        contact_status (str): The model property of type str.
        name (str): The model property of type str.
        first_name (str): The model property of type str.
        last_name (str): The model property of type str.
        email_address (str): The model property of type str.
        skype_user_name (str): The model property of type str.
        contact_persons (List[ContactPerson]): The model property of type
            List[ContactPerson].
        bank_account_details (str): The model property of type str.
        tax_number (str): The model property of type str.
        accounts_receivable_tax_type (str): The model property of type str.
        accounts_payable_tax_type (str): The model property of type str.
        addresses (List[Address]): The model property of type List[Address].
        phones (List[Phone]): The model property of type List[Phone].
        is_supplier (str): The model property of type str.
        is_customer (str): The model property of type str.
        default_currency (str): The model property of type str.
        xero_network_key (str): The model property of type str.
        sales_default_account_code (str): The model property of type str.
        purchases_default_account_code (str): The model property of type str.
        sales_tracking_categories (List[SalesTrackingCategory]): The model
            property of type List[SalesTrackingCategory].
        purchases_tracking_categories (List[PurchasesTrackingCategory]): The
            model property of type List[PurchasesTrackingCategory].
        tracking_category_name (str): The model property of type str.
        tracking_category_option (str): The model property of type str.
        payment_terms (PaymentTerms): The model property of type PaymentTerms.
        contact_groups (List[ContactGroup]): The model property of type
            List[ContactGroup].
        branding_theme (BrandingTheme): The model property of type
            BrandingTheme.
        batch_payments (BatchPayments): The model property of type
            BatchPayments.
        balances (Balances): The model property of type Balances.
        attachments (List[Attachment3]): The model property of type
            List[Attachment3].
        has_attachments (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].
        has_validation_errors (str): The model property of type str.
        status_attribute_string (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contact_id": 'ContactID',
        "contact_number": 'ContactNumber',
        "account_number": 'AccountNumber',
        "contact_status": 'ContactStatus',
        "name": 'Name',
        "first_name": 'FirstName',
        "last_name": 'LastName',
        "email_address": 'EmailAddress',
        "skype_user_name": 'SkypeUserName',
        "contact_persons": 'ContactPersons',
        "bank_account_details": 'BankAccountDetails',
        "tax_number": 'TaxNumber',
        "accounts_receivable_tax_type": 'AccountsReceivableTaxType',
        "accounts_payable_tax_type": 'AccountsPayableTaxType',
        "addresses": 'Addresses',
        "phones": 'Phones',
        "is_supplier": 'IsSupplier',
        "is_customer": 'IsCustomer',
        "default_currency": 'DefaultCurrency',
        "xero_network_key": 'XeroNetworkKey',
        "sales_default_account_code": 'SalesDefaultAccountCode',
        "purchases_default_account_code": 'PurchasesDefaultAccountCode',
        "sales_tracking_categories": 'SalesTrackingCategories',
        "purchases_tracking_categories": 'PurchasesTrackingCategories',
        "tracking_category_name": 'TrackingCategoryName',
        "tracking_category_option": 'TrackingCategoryOption',
        "payment_terms": 'PaymentTerms',
        "contact_groups": 'ContactGroups',
        "branding_theme": 'BrandingTheme',
        "batch_payments": 'BatchPayments',
        "balances": 'Balances',
        "attachments": 'Attachments',
        "has_attachments": 'HasAttachments',
        "validation_errors": 'ValidationErrors',
        "has_validation_errors": 'HasValidationErrors',
        "status_attribute_string": 'StatusAttributeString'
    }

    def __init__(self,
                 contact_id=None,
                 contact_number=None,
                 account_number=None,
                 contact_status=None,
                 name=None,
                 first_name=None,
                 last_name=None,
                 email_address=None,
                 skype_user_name=None,
                 contact_persons=None,
                 bank_account_details=None,
                 tax_number=None,
                 accounts_receivable_tax_type=None,
                 accounts_payable_tax_type=None,
                 addresses=None,
                 phones=None,
                 is_supplier=None,
                 is_customer=None,
                 default_currency=None,
                 xero_network_key=None,
                 sales_default_account_code=None,
                 purchases_default_account_code=None,
                 sales_tracking_categories=None,
                 purchases_tracking_categories=None,
                 tracking_category_name=None,
                 tracking_category_option=None,
                 payment_terms=None,
                 contact_groups=None,
                 branding_theme=None,
                 batch_payments=None,
                 balances=None,
                 attachments=None,
                 has_attachments=None,
                 validation_errors=None,
                 has_validation_errors=None,
                 status_attribute_string=None):
        """Constructor for the Contact4 class"""

        # Initialize members of the class
        self.contact_id = contact_id 
        self.contact_number = contact_number 
        self.account_number = account_number 
        self.contact_status = contact_status 
        self.name = name 
        self.first_name = first_name 
        self.last_name = last_name 
        self.email_address = email_address 
        self.skype_user_name = skype_user_name 
        self.contact_persons = contact_persons 
        self.bank_account_details = bank_account_details 
        self.tax_number = tax_number 
        self.accounts_receivable_tax_type = accounts_receivable_tax_type 
        self.accounts_payable_tax_type = accounts_payable_tax_type 
        self.addresses = addresses 
        self.phones = phones 
        self.is_supplier = is_supplier 
        self.is_customer = is_customer 
        self.default_currency = default_currency 
        self.xero_network_key = xero_network_key 
        self.sales_default_account_code = sales_default_account_code 
        self.purchases_default_account_code = purchases_default_account_code 
        self.sales_tracking_categories = sales_tracking_categories 
        self.purchases_tracking_categories = purchases_tracking_categories 
        self.tracking_category_name = tracking_category_name 
        self.tracking_category_option = tracking_category_option 
        self.payment_terms = payment_terms 
        self.contact_groups = contact_groups 
        self.branding_theme = branding_theme 
        self.batch_payments = batch_payments 
        self.balances = balances 
        self.attachments = attachments 
        self.has_attachments = has_attachments 
        self.validation_errors = validation_errors 
        self.has_validation_errors = has_validation_errors 
        self.status_attribute_string = status_attribute_string 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        contact_id = dictionary.get("ContactID") if dictionary.get("ContactID") else None
        contact_number = dictionary.get("ContactNumber") if dictionary.get("ContactNumber") else None
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else None
        contact_status = dictionary.get("ContactStatus") if dictionary.get("ContactStatus") else None
        name = dictionary.get("Name") if dictionary.get("Name") else None
        first_name = dictionary.get("FirstName") if dictionary.get("FirstName") else None
        last_name = dictionary.get("LastName") if dictionary.get("LastName") else None
        email_address = dictionary.get("EmailAddress") if dictionary.get("EmailAddress") else None
        skype_user_name = dictionary.get("SkypeUserName") if dictionary.get("SkypeUserName") else None
        contact_persons = None
        if dictionary.get('ContactPersons') is not None:
            contact_persons = [ContactPerson.from_dictionary(x) for x in dictionary.get('ContactPersons')]
        bank_account_details = dictionary.get("BankAccountDetails") if dictionary.get("BankAccountDetails") else None
        tax_number = dictionary.get("TaxNumber") if dictionary.get("TaxNumber") else None
        accounts_receivable_tax_type = dictionary.get("AccountsReceivableTaxType") if dictionary.get("AccountsReceivableTaxType") else None
        accounts_payable_tax_type = dictionary.get("AccountsPayableTaxType") if dictionary.get("AccountsPayableTaxType") else None
        addresses = None
        if dictionary.get('Addresses') is not None:
            addresses = [Address.from_dictionary(x) for x in dictionary.get('Addresses')]
        phones = None
        if dictionary.get('Phones') is not None:
            phones = [Phone.from_dictionary(x) for x in dictionary.get('Phones')]
        is_supplier = dictionary.get("IsSupplier") if dictionary.get("IsSupplier") else None
        is_customer = dictionary.get("IsCustomer") if dictionary.get("IsCustomer") else None
        default_currency = dictionary.get("DefaultCurrency") if dictionary.get("DefaultCurrency") else None
        xero_network_key = dictionary.get("XeroNetworkKey") if dictionary.get("XeroNetworkKey") else None
        sales_default_account_code = dictionary.get("SalesDefaultAccountCode") if dictionary.get("SalesDefaultAccountCode") else None
        purchases_default_account_code = dictionary.get("PurchasesDefaultAccountCode") if dictionary.get("PurchasesDefaultAccountCode") else None
        sales_tracking_categories = None
        if dictionary.get('SalesTrackingCategories') is not None:
            sales_tracking_categories = [SalesTrackingCategory.from_dictionary(x) for x in dictionary.get('SalesTrackingCategories')]
        purchases_tracking_categories = None
        if dictionary.get('PurchasesTrackingCategories') is not None:
            purchases_tracking_categories = [PurchasesTrackingCategory.from_dictionary(x) for x in dictionary.get('PurchasesTrackingCategories')]
        tracking_category_name = dictionary.get("TrackingCategoryName") if dictionary.get("TrackingCategoryName") else None
        tracking_category_option = dictionary.get("TrackingCategoryOption") if dictionary.get("TrackingCategoryOption") else None
        payment_terms = PaymentTerms.from_dictionary(dictionary.get('PaymentTerms')) if dictionary.get('PaymentTerms') else None
        contact_groups = None
        if dictionary.get('ContactGroups') is not None:
            contact_groups = [ContactGroup.from_dictionary(x) for x in dictionary.get('ContactGroups')]
        branding_theme = BrandingTheme.from_dictionary(dictionary.get('BrandingTheme')) if dictionary.get('BrandingTheme') else None
        batch_payments = BatchPayments.from_dictionary(dictionary.get('BatchPayments')) if dictionary.get('BatchPayments') else None
        balances = Balances.from_dictionary(dictionary.get('Balances')) if dictionary.get('Balances') else None
        attachments = None
        if dictionary.get('Attachments') is not None:
            attachments = [Attachment3.from_dictionary(x) for x in dictionary.get('Attachments')]
        has_attachments = dictionary.get("HasAttachments") if dictionary.get("HasAttachments") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        has_validation_errors = dictionary.get("HasValidationErrors") if dictionary.get("HasValidationErrors") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        # Return an object of this model
        return cls(contact_id,
                   contact_number,
                   account_number,
                   contact_status,
                   name,
                   first_name,
                   last_name,
                   email_address,
                   skype_user_name,
                   contact_persons,
                   bank_account_details,
                   tax_number,
                   accounts_receivable_tax_type,
                   accounts_payable_tax_type,
                   addresses,
                   phones,
                   is_supplier,
                   is_customer,
                   default_currency,
                   xero_network_key,
                   sales_default_account_code,
                   purchases_default_account_code,
                   sales_tracking_categories,
                   purchases_tracking_categories,
                   tracking_category_name,
                   tracking_category_option,
                   payment_terms,
                   contact_groups,
                   branding_theme,
                   batch_payments,
                   balances,
                   attachments,
                   has_attachments,
                   validation_errors,
                   has_validation_errors,
                   status_attribute_string)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'contact_id={self.contact_id!r}, '
                f'contact_number={self.contact_number!r}, '
                f'account_number={self.account_number!r}, '
                f'contact_status={self.contact_status!r}, '
                f'name={self.name!r}, '
                f'first_name={self.first_name!r}, '
                f'last_name={self.last_name!r}, '
                f'email_address={self.email_address!r}, '
                f'skype_user_name={self.skype_user_name!r}, '
                f'contact_persons={self.contact_persons!r}, '
                f'bank_account_details={self.bank_account_details!r}, '
                f'tax_number={self.tax_number!r}, '
                f'accounts_receivable_tax_type={self.accounts_receivable_tax_type!r}, '
                f'accounts_payable_tax_type={self.accounts_payable_tax_type!r}, '
                f'addresses={self.addresses!r}, '
                f'phones={self.phones!r}, '
                f'is_supplier={self.is_supplier!r}, '
                f'is_customer={self.is_customer!r}, '
                f'default_currency={self.default_currency!r}, '
                f'xero_network_key={self.xero_network_key!r}, '
                f'sales_default_account_code={self.sales_default_account_code!r}, '
                f'purchases_default_account_code={self.purchases_default_account_code!r}, '
                f'sales_tracking_categories={self.sales_tracking_categories!r}, '
                f'purchases_tracking_categories={self.purchases_tracking_categories!r}, '
                f'tracking_category_name={self.tracking_category_name!r}, '
                f'tracking_category_option={self.tracking_category_option!r}, '
                f'payment_terms={self.payment_terms!r}, '
                f'contact_groups={self.contact_groups!r}, '
                f'branding_theme={self.branding_theme!r}, '
                f'batch_payments={self.batch_payments!r}, '
                f'balances={self.balances!r}, '
                f'attachments={self.attachments!r}, '
                f'has_attachments={self.has_attachments!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'has_validation_errors={self.has_validation_errors!r}, '
                f'status_attribute_string={self.status_attribute_string!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'contact_id={self.contact_id!s}, '
                f'contact_number={self.contact_number!s}, '
                f'account_number={self.account_number!s}, '
                f'contact_status={self.contact_status!s}, '
                f'name={self.name!s}, '
                f'first_name={self.first_name!s}, '
                f'last_name={self.last_name!s}, '
                f'email_address={self.email_address!s}, '
                f'skype_user_name={self.skype_user_name!s}, '
                f'contact_persons={self.contact_persons!s}, '
                f'bank_account_details={self.bank_account_details!s}, '
                f'tax_number={self.tax_number!s}, '
                f'accounts_receivable_tax_type={self.accounts_receivable_tax_type!s}, '
                f'accounts_payable_tax_type={self.accounts_payable_tax_type!s}, '
                f'addresses={self.addresses!s}, '
                f'phones={self.phones!s}, '
                f'is_supplier={self.is_supplier!s}, '
                f'is_customer={self.is_customer!s}, '
                f'default_currency={self.default_currency!s}, '
                f'xero_network_key={self.xero_network_key!s}, '
                f'sales_default_account_code={self.sales_default_account_code!s}, '
                f'purchases_default_account_code={self.purchases_default_account_code!s}, '
                f'sales_tracking_categories={self.sales_tracking_categories!s}, '
                f'purchases_tracking_categories={self.purchases_tracking_categories!s}, '
                f'tracking_category_name={self.tracking_category_name!s}, '
                f'tracking_category_option={self.tracking_category_option!s}, '
                f'payment_terms={self.payment_terms!s}, '
                f'contact_groups={self.contact_groups!s}, '
                f'branding_theme={self.branding_theme!s}, '
                f'batch_payments={self.batch_payments!s}, '
                f'balances={self.balances!s}, '
                f'attachments={self.attachments!s}, '
                f'has_attachments={self.has_attachments!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'has_validation_errors={self.has_validation_errors!s}, '
                f'status_attribute_string={self.status_attribute_string!s})')
