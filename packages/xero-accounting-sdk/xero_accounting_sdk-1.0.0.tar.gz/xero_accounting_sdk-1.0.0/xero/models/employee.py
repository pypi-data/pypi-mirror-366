# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.external_link import ExternalLink
from xero.models.validation_error import ValidationError


class Employee(object):

    """Implementation of the 'Employee' model.

    Attributes:
        employee_id (str): The model property of type str.
        status (str): The model property of type str.
        first_name (str): The model property of type str.
        last_name (str): The model property of type str.
        external_link (ExternalLink): The model property of type ExternalLink.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "employee_id": 'EmployeeID',
        "status": 'Status',
        "first_name": 'FirstName',
        "last_name": 'LastName',
        "external_link": 'ExternalLink',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 employee_id=None,
                 status=None,
                 first_name=None,
                 last_name=None,
                 external_link=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the Employee class"""

        # Initialize members of the class
        self.employee_id = employee_id 
        self.status = status 
        self.first_name = first_name 
        self.last_name = last_name 
        self.external_link = external_link 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        employee_id = dictionary.get("EmployeeID") if dictionary.get("EmployeeID") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        first_name = dictionary.get("FirstName") if dictionary.get("FirstName") else None
        last_name = dictionary.get("LastName") if dictionary.get("LastName") else None
        external_link = ExternalLink.from_dictionary(dictionary.get('ExternalLink')) if dictionary.get('ExternalLink') else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(employee_id,
                   status,
                   first_name,
                   last_name,
                   external_link,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'employee_id={self.employee_id!r}, '
                f'status={self.status!r}, '
                f'first_name={self.first_name!r}, '
                f'last_name={self.last_name!r}, '
                f'external_link={self.external_link!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'employee_id={self.employee_id!s}, '
                f'status={self.status!s}, '
                f'first_name={self.first_name!s}, '
                f'last_name={self.last_name!s}, '
                f'external_link={self.external_link!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
