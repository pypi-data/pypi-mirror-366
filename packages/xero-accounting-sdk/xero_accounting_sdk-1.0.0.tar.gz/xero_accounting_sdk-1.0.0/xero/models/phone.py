# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Phone(object):

    """Implementation of the 'Phone' model.

    Attributes:
        phone_type (str): The model property of type str.
        phone_number (str): The model property of type str.
        phone_area_code (str): The model property of type str.
        phone_country_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "phone_type": 'PhoneType',
        "phone_number": 'PhoneNumber',
        "phone_area_code": 'PhoneAreaCode',
        "phone_country_code": 'PhoneCountryCode'
    }

    def __init__(self,
                 phone_type=None,
                 phone_number=None,
                 phone_area_code=None,
                 phone_country_code=None):
        """Constructor for the Phone class"""

        # Initialize members of the class
        self.phone_type = phone_type 
        self.phone_number = phone_number 
        self.phone_area_code = phone_area_code 
        self.phone_country_code = phone_country_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        phone_type = dictionary.get("PhoneType") if dictionary.get("PhoneType") else None
        phone_number = dictionary.get("PhoneNumber") if dictionary.get("PhoneNumber") else None
        phone_area_code = dictionary.get("PhoneAreaCode") if dictionary.get("PhoneAreaCode") else None
        phone_country_code = dictionary.get("PhoneCountryCode") if dictionary.get("PhoneCountryCode") else None
        # Return an object of this model
        return cls(phone_type,
                   phone_number,
                   phone_area_code,
                   phone_country_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'phone_type={self.phone_type!r}, '
                f'phone_number={self.phone_number!r}, '
                f'phone_area_code={self.phone_area_code!r}, '
                f'phone_country_code={self.phone_country_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'phone_type={self.phone_type!s}, '
                f'phone_number={self.phone_number!s}, '
                f'phone_area_code={self.phone_area_code!s}, '
                f'phone_country_code={self.phone_country_code!s})')
