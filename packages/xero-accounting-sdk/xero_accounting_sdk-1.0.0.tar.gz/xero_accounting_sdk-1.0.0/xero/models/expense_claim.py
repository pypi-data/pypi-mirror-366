# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.payment import Payment
from xero.models.receipt import Receipt
from xero.models.user import User


class ExpenseClaim(object):

    """Implementation of the 'ExpenseClaim' model.

    Attributes:
        expense_claim_id (str): The model property of type str.
        status (str): The model property of type str.
        payments (List[Payment]): The model property of type List[Payment].
        user (User): The model property of type User.
        receipts (List[Receipt]): The model property of type List[Receipt].
        receipt_id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "expense_claim_id": 'ExpenseClaimID',
        "status": 'Status',
        "payments": 'Payments',
        "user": 'User',
        "receipts": 'Receipts',
        "receipt_id": 'ReceiptID'
    }

    def __init__(self,
                 expense_claim_id=None,
                 status=None,
                 payments=None,
                 user=None,
                 receipts=None,
                 receipt_id=None):
        """Constructor for the ExpenseClaim class"""

        # Initialize members of the class
        self.expense_claim_id = expense_claim_id 
        self.status = status 
        self.payments = payments 
        self.user = user 
        self.receipts = receipts 
        self.receipt_id = receipt_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        expense_claim_id = dictionary.get("ExpenseClaimID") if dictionary.get("ExpenseClaimID") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        payments = None
        if dictionary.get('Payments') is not None:
            payments = [Payment.from_dictionary(x) for x in dictionary.get('Payments')]
        user = User.from_dictionary(dictionary.get('User')) if dictionary.get('User') else None
        receipts = None
        if dictionary.get('Receipts') is not None:
            receipts = [Receipt.from_dictionary(x) for x in dictionary.get('Receipts')]
        receipt_id = dictionary.get("ReceiptID") if dictionary.get("ReceiptID") else None
        # Return an object of this model
        return cls(expense_claim_id,
                   status,
                   payments,
                   user,
                   receipts,
                   receipt_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'expense_claim_id={self.expense_claim_id!r}, '
                f'status={self.status!r}, '
                f'payments={self.payments!r}, '
                f'user={self.user!r}, '
                f'receipts={self.receipts!r}, '
                f'receipt_id={self.receipt_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'expense_claim_id={self.expense_claim_id!s}, '
                f'status={self.status!s}, '
                f'payments={self.payments!s}, '
                f'user={self.user!s}, '
                f'receipts={self.receipts!s}, '
                f'receipt_id={self.receipt_id!s})')
