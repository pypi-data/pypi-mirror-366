# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class HistoryRecord(object):

    """Implementation of the 'HistoryRecord' model.

    Attributes:
        details (str): The model property of type str.
        changes (str): The model property of type str.
        user (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "details": 'Details',
        "changes": 'Changes',
        "user": 'User'
    }

    def __init__(self,
                 details=None,
                 changes=None,
                 user=None):
        """Constructor for the HistoryRecord class"""

        # Initialize members of the class
        self.details = details 
        self.changes = changes 
        self.user = user 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        details = dictionary.get("Details") if dictionary.get("Details") else None
        changes = dictionary.get("Changes") if dictionary.get("Changes") else None
        user = dictionary.get("User") if dictionary.get("User") else None
        # Return an object of this model
        return cls(details,
                   changes,
                   user)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'details={self.details!r}, '
                f'changes={self.changes!r}, '
                f'user={self.user!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'details={self.details!s}, '
                f'changes={self.changes!s}, '
                f'user={self.user!s})')
