# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class PurchasesTrackingCategory(object):

    """Implementation of the 'PurchasesTrackingCategory' model.

    Attributes:
        tracking_category_name (str): The model property of type str.
        tracking_option_name (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tracking_category_name": 'TrackingCategoryName',
        "tracking_option_name": 'TrackingOptionName'
    }

    def __init__(self,
                 tracking_category_name=None,
                 tracking_option_name=None):
        """Constructor for the PurchasesTrackingCategory class"""

        # Initialize members of the class
        self.tracking_category_name = tracking_category_name 
        self.tracking_option_name = tracking_option_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tracking_category_name = dictionary.get("TrackingCategoryName") if dictionary.get("TrackingCategoryName") else None
        tracking_option_name = dictionary.get("TrackingOptionName") if dictionary.get("TrackingOptionName") else None
        # Return an object of this model
        return cls(tracking_category_name,
                   tracking_option_name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_name={self.tracking_category_name!r}, '
                f'tracking_option_name={self.tracking_option_name!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_name={self.tracking_category_name!s}, '
                f'tracking_option_name={self.tracking_option_name!s})')
