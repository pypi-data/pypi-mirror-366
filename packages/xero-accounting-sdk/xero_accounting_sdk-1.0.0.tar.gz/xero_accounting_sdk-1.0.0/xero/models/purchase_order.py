# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.attachment_3 import Attachment3
from xero.models.contact_4 import Contact4
from xero.models.line_item_4 import LineItem4
from xero.models.validation_error import ValidationError
from xero.models.warning_3 import Warning3


class PurchaseOrder(object):

    """Implementation of the 'PurchaseOrder' model.

    Attributes:
        contact (Contact4): The model property of type Contact4.
        line_items (List[LineItem4]): The model property of type
            List[LineItem4].
        date (str): The model property of type str.
        delivery_date (str): The model property of type str.
        line_amount_types (str): The model property of type str.
        purchase_order_number (str): The model property of type str.
        reference (str): The model property of type str.
        branding_theme_id (str): The model property of type str.
        currency_code (str): The model property of type str.
        status (str): The model property of type str.
        sent_to_contact (str): The model property of type str.
        delivery_address (str): The model property of type str.
        attention_to (str): The model property of type str.
        telephone (str): The model property of type str.
        delivery_instructions (str): The model property of type str.
        expected_arrival_date (str): The model property of type str.
        purchase_order_id (str): The model property of type str.
        currency_rate (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].
        warnings (List[Warning3]): The model property of type List[Warning3].
        attachments (List[Attachment3]): The model property of type
            List[Attachment3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contact": 'Contact',
        "line_items": 'LineItems',
        "date": 'Date',
        "delivery_date": 'DeliveryDate',
        "line_amount_types": 'LineAmountTypes',
        "purchase_order_number": 'PurchaseOrderNumber',
        "reference": 'Reference',
        "branding_theme_id": 'BrandingThemeID',
        "currency_code": 'CurrencyCode',
        "status": 'Status',
        "sent_to_contact": 'SentToContact',
        "delivery_address": 'DeliveryAddress',
        "attention_to": 'AttentionTo',
        "telephone": 'Telephone',
        "delivery_instructions": 'DeliveryInstructions',
        "expected_arrival_date": 'ExpectedArrivalDate',
        "purchase_order_id": 'PurchaseOrderID',
        "currency_rate": 'CurrencyRate',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors',
        "warnings": 'Warnings',
        "attachments": 'Attachments'
    }

    def __init__(self,
                 contact=None,
                 line_items=None,
                 date=None,
                 delivery_date=None,
                 line_amount_types=None,
                 purchase_order_number=None,
                 reference=None,
                 branding_theme_id=None,
                 currency_code=None,
                 status=None,
                 sent_to_contact=None,
                 delivery_address=None,
                 attention_to=None,
                 telephone=None,
                 delivery_instructions=None,
                 expected_arrival_date=None,
                 purchase_order_id=None,
                 currency_rate=None,
                 status_attribute_string=None,
                 validation_errors=None,
                 warnings=None,
                 attachments=None):
        """Constructor for the PurchaseOrder class"""

        # Initialize members of the class
        self.contact = contact 
        self.line_items = line_items 
        self.date = date 
        self.delivery_date = delivery_date 
        self.line_amount_types = line_amount_types 
        self.purchase_order_number = purchase_order_number 
        self.reference = reference 
        self.branding_theme_id = branding_theme_id 
        self.currency_code = currency_code 
        self.status = status 
        self.sent_to_contact = sent_to_contact 
        self.delivery_address = delivery_address 
        self.attention_to = attention_to 
        self.telephone = telephone 
        self.delivery_instructions = delivery_instructions 
        self.expected_arrival_date = expected_arrival_date 
        self.purchase_order_id = purchase_order_id 
        self.currency_rate = currency_rate 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 
        self.warnings = warnings 
        self.attachments = attachments 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        contact = Contact4.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem4.from_dictionary(x) for x in dictionary.get('LineItems')]
        date = dictionary.get("Date") if dictionary.get("Date") else None
        delivery_date = dictionary.get("DeliveryDate") if dictionary.get("DeliveryDate") else None
        line_amount_types = dictionary.get("LineAmountTypes") if dictionary.get("LineAmountTypes") else None
        purchase_order_number = dictionary.get("PurchaseOrderNumber") if dictionary.get("PurchaseOrderNumber") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        branding_theme_id = dictionary.get("BrandingThemeID") if dictionary.get("BrandingThemeID") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        sent_to_contact = dictionary.get("SentToContact") if dictionary.get("SentToContact") else None
        delivery_address = dictionary.get("DeliveryAddress") if dictionary.get("DeliveryAddress") else None
        attention_to = dictionary.get("AttentionTo") if dictionary.get("AttentionTo") else None
        telephone = dictionary.get("Telephone") if dictionary.get("Telephone") else None
        delivery_instructions = dictionary.get("DeliveryInstructions") if dictionary.get("DeliveryInstructions") else None
        expected_arrival_date = dictionary.get("ExpectedArrivalDate") if dictionary.get("ExpectedArrivalDate") else None
        purchase_order_id = dictionary.get("PurchaseOrderID") if dictionary.get("PurchaseOrderID") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning3.from_dictionary(x) for x in dictionary.get('Warnings')]
        attachments = None
        if dictionary.get('Attachments') is not None:
            attachments = [Attachment3.from_dictionary(x) for x in dictionary.get('Attachments')]
        # Return an object of this model
        return cls(contact,
                   line_items,
                   date,
                   delivery_date,
                   line_amount_types,
                   purchase_order_number,
                   reference,
                   branding_theme_id,
                   currency_code,
                   status,
                   sent_to_contact,
                   delivery_address,
                   attention_to,
                   telephone,
                   delivery_instructions,
                   expected_arrival_date,
                   purchase_order_id,
                   currency_rate,
                   status_attribute_string,
                   validation_errors,
                   warnings,
                   attachments)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'contact={self.contact!r}, '
                f'line_items={self.line_items!r}, '
                f'date={self.date!r}, '
                f'delivery_date={self.delivery_date!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'purchase_order_number={self.purchase_order_number!r}, '
                f'reference={self.reference!r}, '
                f'branding_theme_id={self.branding_theme_id!r}, '
                f'currency_code={self.currency_code!r}, '
                f'status={self.status!r}, '
                f'sent_to_contact={self.sent_to_contact!r}, '
                f'delivery_address={self.delivery_address!r}, '
                f'attention_to={self.attention_to!r}, '
                f'telephone={self.telephone!r}, '
                f'delivery_instructions={self.delivery_instructions!r}, '
                f'expected_arrival_date={self.expected_arrival_date!r}, '
                f'purchase_order_id={self.purchase_order_id!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'warnings={self.warnings!r}, '
                f'attachments={self.attachments!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'contact={self.contact!s}, '
                f'line_items={self.line_items!s}, '
                f'date={self.date!s}, '
                f'delivery_date={self.delivery_date!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'purchase_order_number={self.purchase_order_number!s}, '
                f'reference={self.reference!s}, '
                f'branding_theme_id={self.branding_theme_id!s}, '
                f'currency_code={self.currency_code!s}, '
                f'status={self.status!s}, '
                f'sent_to_contact={self.sent_to_contact!s}, '
                f'delivery_address={self.delivery_address!s}, '
                f'attention_to={self.attention_to!s}, '
                f'telephone={self.telephone!s}, '
                f'delivery_instructions={self.delivery_instructions!s}, '
                f'expected_arrival_date={self.expected_arrival_date!s}, '
                f'purchase_order_id={self.purchase_order_id!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'warnings={self.warnings!s}, '
                f'attachments={self.attachments!s})')
