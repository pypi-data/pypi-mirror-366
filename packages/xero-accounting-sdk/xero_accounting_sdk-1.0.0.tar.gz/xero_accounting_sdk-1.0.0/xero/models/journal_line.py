# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.tracking_5 import Tracking5


class JournalLine(object):

    """Implementation of the 'JournalLine' model.

    Attributes:
        line_amount (str): The model property of type str.
        account_code (str): The model property of type str.
        account_id (str): The model property of type str.
        description (str): The model property of type str.
        tax_type (str): The model property of type str.
        tracking (List[Tracking5]): The model property of type List[Tracking5].
        is_blank (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "line_amount": 'LineAmount',
        "account_code": 'AccountCode',
        "account_id": 'AccountID',
        "description": 'Description',
        "tax_type": 'TaxType',
        "tracking": 'Tracking',
        "is_blank": 'IsBlank'
    }

    def __init__(self,
                 line_amount=None,
                 account_code=None,
                 account_id=None,
                 description=None,
                 tax_type=None,
                 tracking=None,
                 is_blank=None):
        """Constructor for the JournalLine class"""

        # Initialize members of the class
        self.line_amount = line_amount 
        self.account_code = account_code 
        self.account_id = account_id 
        self.description = description 
        self.tax_type = tax_type 
        self.tracking = tracking 
        self.is_blank = is_blank 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        line_amount = dictionary.get("LineAmount") if dictionary.get("LineAmount") else None
        account_code = dictionary.get("AccountCode") if dictionary.get("AccountCode") else None
        account_id = dictionary.get("AccountID") if dictionary.get("AccountID") else None
        description = dictionary.get("Description") if dictionary.get("Description") else None
        tax_type = dictionary.get("TaxType") if dictionary.get("TaxType") else None
        tracking = None
        if dictionary.get('Tracking') is not None:
            tracking = [Tracking5.from_dictionary(x) for x in dictionary.get('Tracking')]
        is_blank = dictionary.get("IsBlank") if dictionary.get("IsBlank") else None
        # Return an object of this model
        return cls(line_amount,
                   account_code,
                   account_id,
                   description,
                   tax_type,
                   tracking,
                   is_blank)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'line_amount={self.line_amount!r}, '
                f'account_code={self.account_code!r}, '
                f'account_id={self.account_id!r}, '
                f'description={self.description!r}, '
                f'tax_type={self.tax_type!r}, '
                f'tracking={self.tracking!r}, '
                f'is_blank={self.is_blank!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'line_amount={self.line_amount!s}, '
                f'account_code={self.account_code!s}, '
                f'account_id={self.account_id!s}, '
                f'description={self.description!s}, '
                f'tax_type={self.tax_type!s}, '
                f'tracking={self.tracking!s}, '
                f'is_blank={self.is_blank!s})')
