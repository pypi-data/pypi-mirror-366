# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.tax_component import TaxComponent


class TaxRate(object):

    """Implementation of the 'TaxRate' model.

    Attributes:
        name (str): The model property of type str.
        tax_type (str): The model property of type str.
        tax_components (List[TaxComponent]): The model property of type
            List[TaxComponent].
        status (str): The model property of type str.
        report_tax_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'Name',
        "tax_type": 'TaxType',
        "tax_components": 'TaxComponents',
        "status": 'Status',
        "report_tax_type": 'ReportTaxType'
    }

    def __init__(self,
                 name=None,
                 tax_type=None,
                 tax_components=None,
                 status=None,
                 report_tax_type=None):
        """Constructor for the TaxRate class"""

        # Initialize members of the class
        self.name = name 
        self.tax_type = tax_type 
        self.tax_components = tax_components 
        self.status = status 
        self.report_tax_type = report_tax_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("Name") if dictionary.get("Name") else None
        tax_type = dictionary.get("TaxType") if dictionary.get("TaxType") else None
        tax_components = None
        if dictionary.get('TaxComponents') is not None:
            tax_components = [TaxComponent.from_dictionary(x) for x in dictionary.get('TaxComponents')]
        status = dictionary.get("Status") if dictionary.get("Status") else None
        report_tax_type = dictionary.get("ReportTaxType") if dictionary.get("ReportTaxType") else None
        # Return an object of this model
        return cls(name,
                   tax_type,
                   tax_components,
                   status,
                   report_tax_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'tax_type={self.tax_type!r}, '
                f'tax_components={self.tax_components!r}, '
                f'status={self.status!r}, '
                f'report_tax_type={self.report_tax_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'tax_type={self.tax_type!s}, '
                f'tax_components={self.tax_components!s}, '
                f'status={self.status!s}, '
                f'report_tax_type={self.report_tax_type!s})')
