# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Field(object):

    """Implementation of the 'Field' model.

    Attributes:
        field_id (str): The model property of type str.
        description (str): The model property of type str.
        value (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_id": 'FieldID',
        "description": 'Description',
        "value": 'Value'
    }

    def __init__(self,
                 field_id=None,
                 description=None,
                 value=None):
        """Constructor for the Field class"""

        # Initialize members of the class
        self.field_id = field_id 
        self.description = description 
        self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        field_id = dictionary.get("FieldID") if dictionary.get("FieldID") else None
        description = dictionary.get("Description") if dictionary.get("Description") else None
        value = dictionary.get("Value") if dictionary.get("Value") else None
        # Return an object of this model
        return cls(field_id,
                   description,
                   value)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'field_id={self.field_id!r}, '
                f'description={self.description!r}, '
                f'value={self.value!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'field_id={self.field_id!s}, '
                f'description={self.description!s}, '
                f'value={self.value!s})')
