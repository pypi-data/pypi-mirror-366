# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.validation_error import ValidationError


class AllowsYouToCreateLinkedTransactionsBillableExpensesRequest(object):

    """Implementation of the 'Allows you to create linked transactions (billable expenses) Request' model.

    Attributes:
        source_transaction_id (str): The model property of type str.
        source_line_item_id (str): The model property of type str.
        contact_id (str): The model property of type str.
        target_transaction_id (str): The model property of type str.
        target_line_item_id (str): The model property of type str.
        linked_transaction_id (str): The model property of type str.
        status (str): The model property of type str.
        mtype (str): The model property of type str.
        source_transaction_type_code (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "source_transaction_id": 'SourceTransactionID',
        "source_line_item_id": 'SourceLineItemID',
        "contact_id": 'ContactID',
        "target_transaction_id": 'TargetTransactionID',
        "target_line_item_id": 'TargetLineItemID',
        "linked_transaction_id": 'LinkedTransactionID',
        "status": 'Status',
        "mtype": 'Type',
        "source_transaction_type_code": 'SourceTransactionTypeCode',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 source_transaction_id=None,
                 source_line_item_id=None,
                 contact_id=None,
                 target_transaction_id=None,
                 target_line_item_id=None,
                 linked_transaction_id=None,
                 status=None,
                 mtype=None,
                 source_transaction_type_code=None,
                 validation_errors=None):
        """Constructor for the AllowsYouToCreateLinkedTransactionsBillableExpensesRequest class"""

        # Initialize members of the class
        self.source_transaction_id = source_transaction_id 
        self.source_line_item_id = source_line_item_id 
        self.contact_id = contact_id 
        self.target_transaction_id = target_transaction_id 
        self.target_line_item_id = target_line_item_id 
        self.linked_transaction_id = linked_transaction_id 
        self.status = status 
        self.mtype = mtype 
        self.source_transaction_type_code = source_transaction_type_code 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        source_transaction_id = dictionary.get("SourceTransactionID") if dictionary.get("SourceTransactionID") else None
        source_line_item_id = dictionary.get("SourceLineItemID") if dictionary.get("SourceLineItemID") else None
        contact_id = dictionary.get("ContactID") if dictionary.get("ContactID") else None
        target_transaction_id = dictionary.get("TargetTransactionID") if dictionary.get("TargetTransactionID") else None
        target_line_item_id = dictionary.get("TargetLineItemID") if dictionary.get("TargetLineItemID") else None
        linked_transaction_id = dictionary.get("LinkedTransactionID") if dictionary.get("LinkedTransactionID") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        source_transaction_type_code = dictionary.get("SourceTransactionTypeCode") if dictionary.get("SourceTransactionTypeCode") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(source_transaction_id,
                   source_line_item_id,
                   contact_id,
                   target_transaction_id,
                   target_line_item_id,
                   linked_transaction_id,
                   status,
                   mtype,
                   source_transaction_type_code,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'source_transaction_id={self.source_transaction_id!r}, '
                f'source_line_item_id={self.source_line_item_id!r}, '
                f'contact_id={self.contact_id!r}, '
                f'target_transaction_id={self.target_transaction_id!r}, '
                f'target_line_item_id={self.target_line_item_id!r}, '
                f'linked_transaction_id={self.linked_transaction_id!r}, '
                f'status={self.status!r}, '
                f'mtype={self.mtype!r}, '
                f'source_transaction_type_code={self.source_transaction_type_code!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'source_transaction_id={self.source_transaction_id!s}, '
                f'source_line_item_id={self.source_line_item_id!s}, '
                f'contact_id={self.contact_id!s}, '
                f'target_transaction_id={self.target_transaction_id!s}, '
                f'target_line_item_id={self.target_line_item_id!s}, '
                f'linked_transaction_id={self.linked_transaction_id!s}, '
                f'status={self.status!s}, '
                f'mtype={self.mtype!s}, '
                f'source_transaction_type_code={self.source_transaction_type_code!s}, '
                f'validation_errors={self.validation_errors!s})')
