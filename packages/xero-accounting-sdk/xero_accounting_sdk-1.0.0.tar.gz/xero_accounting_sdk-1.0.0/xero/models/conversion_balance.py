# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.balance_detail import BalanceDetail


class ConversionBalance(object):

    """Implementation of the 'ConversionBalance' model.

    Attributes:
        account_code (str): The model property of type str.
        balance (str): The model property of type str.
        balance_details (List[BalanceDetail]): The model property of type
            List[BalanceDetail].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_code": 'AccountCode',
        "balance": 'Balance',
        "balance_details": 'BalanceDetails'
    }

    def __init__(self,
                 account_code=None,
                 balance=None,
                 balance_details=None):
        """Constructor for the ConversionBalance class"""

        # Initialize members of the class
        self.account_code = account_code 
        self.balance = balance 
        self.balance_details = balance_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_code = dictionary.get("AccountCode") if dictionary.get("AccountCode") else None
        balance = dictionary.get("Balance") if dictionary.get("Balance") else None
        balance_details = None
        if dictionary.get('BalanceDetails') is not None:
            balance_details = [BalanceDetail.from_dictionary(x) for x in dictionary.get('BalanceDetails')]
        # Return an object of this model
        return cls(account_code,
                   balance,
                   balance_details)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_code={self.account_code!r}, '
                f'balance={self.balance!r}, '
                f'balance_details={self.balance_details!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_code={self.account_code!s}, '
                f'balance={self.balance!s}, '
                f'balance_details={self.balance_details!s})')
