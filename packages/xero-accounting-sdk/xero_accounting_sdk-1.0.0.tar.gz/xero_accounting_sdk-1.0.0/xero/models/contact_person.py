# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ContactPerson(object):

    """Implementation of the 'ContactPerson' model.

    Attributes:
        first_name (str): The model property of type str.
        last_name (str): The model property of type str.
        email_address (str): The model property of type str.
        include_in_emails (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first_name": 'FirstName',
        "last_name": 'LastName',
        "email_address": 'EmailAddress',
        "include_in_emails": 'IncludeInEmails'
    }

    def __init__(self,
                 first_name=None,
                 last_name=None,
                 email_address=None,
                 include_in_emails=None):
        """Constructor for the ContactPerson class"""

        # Initialize members of the class
        self.first_name = first_name 
        self.last_name = last_name 
        self.email_address = email_address 
        self.include_in_emails = include_in_emails 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        first_name = dictionary.get("FirstName") if dictionary.get("FirstName") else None
        last_name = dictionary.get("LastName") if dictionary.get("LastName") else None
        email_address = dictionary.get("EmailAddress") if dictionary.get("EmailAddress") else None
        include_in_emails = dictionary.get("IncludeInEmails") if dictionary.get("IncludeInEmails") else None
        # Return an object of this model
        return cls(first_name,
                   last_name,
                   email_address,
                   include_in_emails)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'first_name={self.first_name!r}, '
                f'last_name={self.last_name!r}, '
                f'email_address={self.email_address!r}, '
                f'include_in_emails={self.include_in_emails!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'first_name={self.first_name!s}, '
                f'last_name={self.last_name!s}, '
                f'email_address={self.email_address!s}, '
                f'include_in_emails={self.include_in_emails!s})')
