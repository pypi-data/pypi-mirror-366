# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.outstanding import Outstanding
from xero.models.overdue import Overdue


class AccountsPayable(object):

    """Implementation of the 'AccountsPayable' model.

    Attributes:
        outstanding (Outstanding): The model property of type Outstanding.
        overdue (Overdue): The model property of type Overdue.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "outstanding": 'Outstanding',
        "overdue": 'Overdue'
    }

    def __init__(self,
                 outstanding=None,
                 overdue=None):
        """Constructor for the AccountsPayable class"""

        # Initialize members of the class
        self.outstanding = outstanding 
        self.overdue = overdue 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        outstanding = Outstanding.from_dictionary(dictionary.get('Outstanding')) if dictionary.get('Outstanding') else None
        overdue = Overdue.from_dictionary(dictionary.get('Overdue')) if dictionary.get('Overdue') else None
        # Return an object of this model
        return cls(outstanding,
                   overdue)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'outstanding={self.outstanding!r}, '
                f'overdue={self.overdue!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'outstanding={self.outstanding!s}, '
                f'overdue={self.overdue!s})')
