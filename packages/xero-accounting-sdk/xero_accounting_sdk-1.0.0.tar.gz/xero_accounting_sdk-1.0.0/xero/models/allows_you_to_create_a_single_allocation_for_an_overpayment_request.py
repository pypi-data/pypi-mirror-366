# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.allocation_4 import Allocation4


class AllowsYouToCreateASingleAllocationForAnOverpaymentRequest(object):

    """Implementation of the 'Allows you to create a single allocation for an overpayment Request' model.

    Attributes:
        allocations (List[Allocation4]): The model property of type
            List[Allocation4].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allocations": 'Allocations'
    }

    def __init__(self,
                 allocations=None):
        """Constructor for the AllowsYouToCreateASingleAllocationForAnOverpaymentRequest class"""

        # Initialize members of the class
        self.allocations = allocations 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        allocations = None
        if dictionary.get('Allocations') is not None:
            allocations = [Allocation4.from_dictionary(x) for x in dictionary.get('Allocations')]
        # Return an object of this model
        return cls(allocations)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'allocations={self.allocations!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'allocations={self.allocations!s})')
