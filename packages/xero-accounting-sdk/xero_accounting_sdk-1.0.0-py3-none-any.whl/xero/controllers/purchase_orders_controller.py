# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from xero.api_helper import APIHelper
from xero.configuration import Server
from xero.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from xero.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from xero.exceptions.a_failed_request_due_to_validation_error_exception import AFailedRequestDueToValidationErrorException


class PurchaseOrdersController(BaseController):

    """A Controller to access Endpoints in the xero API."""
    def __init__(self, config):
        super(PurchaseOrdersController, self).__init__(config)

    def allows_you_to_retrieve_purchase_orders(self,
                                               status,
                                               date_from,
                                               date_to,
                                               order,
                                               page,
                                               if_modified_since,
                                               xero_tenant_id):
        """Does a GET request to /PurchaseOrders.

        Args:
            status (str): Filter by purchase order status
            date_from (str): Filter by purchase order date (e.g. GET
                https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-3
                1
            date_to (str): Filter by purchase order date (e.g. GET
                https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-3
                1
            order (str): Order by an any element
            page (str): To specify a page, append the page parameter to the
                URL e.g. ?page=1. If there are 100 records in the response you
                will need to check if there is any more data by fetching the
                next page e.g ?page=2 and continuing this process until no
                more results are returned.
            if_modified_since (str): Only records created or modified since
                this timestamp will be returned
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('DateFrom')
                         .value(date_from))
            .query_param(Parameter()
                         .key('DateTo')
                         .value(date_to))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .header_param(Parameter()
                          .key('If-Modified-Since')
                          .value(if_modified_since))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_one_or_more_purchase_orders(self,
                                                         summarize_errors,
                                                         xero_tenant_id,
                                                         body):
        """Does a PUT request to /PurchaseOrders.

        Args:
            summarize_errors (bool): If false return 200 OK and mix of
                successfully created objects and any with validation errors
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateOneOrMorePurchaseOrdersRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('summarizeErrors')
                         .value(summarize_errors))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_update_or_create_one_or_more_purchase_orders(self,
                                                                   summarize_errors,
                                                                   xero_tenant_id,
                                                                   body):
        """Does a POST request to /PurchaseOrders.

        Args:
            summarize_errors (bool): If false return 200 OK and mix of
                successfully created objects and any with validation errors
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToUpdateOrCreateOneOrMorePurchaseOrdersRequest):
                The request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('summarizeErrors')
                         .value(summarize_errors))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_specified_purchase_orders(self,
                                                           purchase_order_number,
                                                           xero_tenant_id):
        """Does a GET request to /PurchaseOrders/{PurchaseOrderNumber}.

        Args:
            purchase_order_number (str): (Required) Unique identifier for a
                PurchaseOrder
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders/{PurchaseOrderNumber}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('PurchaseOrderNumber')
                            .value(purchase_order_number)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()
