# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from xero.api_helper import APIHelper
from xero.configuration import Server
from xero.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from xero.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from xero.exceptions.a_failed_request_due_to_validation_error_exception import AFailedRequestDueToValidationErrorException
from xero.exceptions.api_exception import APIException


class HistoryController(BaseController):

    """A Controller to access Endpoints in the xero API."""
    def __init__(self, config):
        super(HistoryController, self).__init__(config)

    def allows_you_to_retrieve_history_from_a_bank_transactions(self,
                                                                bank_transaction_id,
                                                                xero_tenant_id):
        """Does a GET request to /BankTransactions/{BankTransactionID}/History.

        Args:
            bank_transaction_id (str): (Required) Xero generated unique
                identifier for a bank transaction
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/BankTransactions/{BankTransactionID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('BankTransactionID')
                            .value(bank_transaction_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_history_record_for_a_bank_transactions(self,
                                                                    bank_transaction_id,
                                                                    xero_tenant_id,
                                                                    body):
        """Does a PUT request to /BankTransactions/{BankTransactionID}/History.

        Args:
            bank_transaction_id (str): (Required) Xero generated unique
                identifier for a bank transaction
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateHistoryRecordForABankTransactionsRequest):
                The request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/BankTransactions/{BankTransactionID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('BankTransactionID')
                            .value(bank_transaction_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_history_from_a_bank_transfers(self,
                                                             bank_transfer_id,
                                                             xero_tenant_id):
        """Does a GET request to /BankTransfers/{BankTransferID}/History.

        Args:
            bank_transfer_id (str): (Required) Xero generated unique
                identifier for a bank transfer
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/BankTransfers/{BankTransferID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('BankTransferID')
                            .value(bank_transfer_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def create_bank_transfer_history_record(self,
                                            bank_transfer_id,
                                            xero_tenant_id,
                                            body):
        """Does a PUT request to /BankTransfers/{BankTransferID}/History.

        Args:
            bank_transfer_id (str): (Required) Xero generated unique
                identifier for a bank transfer
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (CreateBankTransferHistoryRecordRequest): The request body
                parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/BankTransfers/{BankTransferID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('BankTransferID')
                            .value(bank_transfer_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_contact(self,
                                                               contact_id,
                                                               xero_tenant_id):
        """Does a GET request to /Contacts/{ContactID}/History.

        Args:
            contact_id (str): (Required) Unique identifier for a Contact
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Contacts/{ContactID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ContactID')
                            .value(contact_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_contact_1(self,
                                                                 contact_id,
                                                                 xero_tenant_id,
                                                                 body):
        """Does a PUT request to /Contacts/{ContactID}/History.

        Args:
            contact_id (str): (Required) Unique identifier for a Contact
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveAHistoryRecordsOfAnContactRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Contacts/{ContactID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('ContactID')
                            .value(contact_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_credit_note(self,
                                                                   credit_note_id,
                                                                   xero_tenant_id):
        """Does a GET request to /CreditNotes/{CreditNoteID}/History.

        Args:
            credit_note_id (str): (Required) Unique identifier for a Credit
                Note
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/CreditNotes/{CreditNoteID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('CreditNoteID')
                            .value(credit_note_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_credit_note_1(self,
                                                                     credit_note_id,
                                                                     xero_tenant_id,
                                                                     body):
        """Does a PUT request to /CreditNotes/{CreditNoteID}/History.

        Args:
            credit_note_id (str): (Required) Unique identifier for a Credit
                Note
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveAHistoryRecordsOfAnCreditNoteRequest):
                The request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/CreditNotes/{CreditNoteID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('CreditNoteID')
                            .value(credit_note_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_expense_claim(self,
                                                                     expense_claim_id,
                                                                     xero_tenant_id):
        """Does a GET request to /ExpenseClaims/{ExpenseClaimID}/History.

        Args:
            expense_claim_id (str): (Required) Unique identifier for a
                ExpenseClaim
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ExpenseClaims/{ExpenseClaimID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ExpenseClaimID')
                            .value(expense_claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_a_history_records_of_an_expense_claim(self,
                                                                   expense_claim_id,
                                                                   xero_tenant_id,
                                                                   body):
        """Does a PUT request to /ExpenseClaims/{ExpenseClaimID}/History.

        Args:
            expense_claim_id (str): (Required) Unique identifier for a
                ExpenseClaim
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateAHistoryRecordsOfAnExpenseClaimRequest):
                The request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ExpenseClaims/{ExpenseClaimID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('ExpenseClaimID')
                            .value(expense_claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_invoice(self,
                                                               invoice_id,
                                                               xero_tenant_id):
        """Does a GET request to /Invoices/{InvoiceID}/History.

        Args:
            invoice_id (str): (Required) Unique identifier for an Invoice
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Invoices/{InvoiceID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('InvoiceID')
                            .value(invoice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_invoice_1(self,
                                                                 invoice_id,
                                                                 xero_tenant_id,
                                                                 body):
        """Does a PUT request to /Invoices/{InvoiceID}/History.

        Args:
            invoice_id (str): (Required) Unique identifier for an Invoice
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveAHistoryRecordsOfAnInvoiceRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Invoices/{InvoiceID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('InvoiceID')
                            .value(invoice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_history_for_items(self,
                                                 item_id,
                                                 xero_tenant_id):
        """Does a GET request to /Items/{ItemID}/History.

        Args:
            item_id (str): (Required) Unique identifier for an Item
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Items/{ItemID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ItemID')
                            .value(item_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_a_history_record_for_items(self,
                                                        item_id,
                                                        xero_tenant_id,
                                                        body):
        """Does a PUT request to /Items/{ItemID}/History.

        Args:
            item_id (str): (Required) Unique identifier for an Item
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateAHistoryRecordForItemsRequest): The request
                body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Items/{ItemID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('ItemID')
                            .value(item_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_history_from_a_manual_journal(self,
                                                             manual_journal_id,
                                                             xero_tenant_id):
        """Does a GET request to /ManualJournals/{ManualJournalID}/History.

        Args:
            manual_journal_id (str): (Required) Xero generated unique
                identifier for a manual journal
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ManualJournals/{ManualJournalID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ManualJournalID')
                            .value(manual_journal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_history_record_for_a_manual_journal(self,
                                                                 manual_journal_id,
                                                                 xero_tenant_id,
                                                                 body):
        """Does a PUT request to /ManualJournals/{ManualJournalID}/History.

        Args:
            manual_journal_id (str): (Required) Xero generated unique
                identifier for a manual journal
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateHistoryRecordForAManualJournalRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/ManualJournals/{ManualJournalID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('ManualJournalID')
                            .value(manual_journal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_overpayment(self,
                                                                   overpayment_id,
                                                                   xero_tenant_id):
        """Does a GET request to /Overpayments/{OverpaymentID}/History.

        Args:
            overpayment_id (str): (Required) Unique identifier for a
                Overpayment
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Overpayments/{OverpaymentID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('OverpaymentID')
                            .value(overpayment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_history_records_of_an_overpayment(self,
                                                               overpayment_id,
                                                               xero_tenant_id,
                                                               body):
        """Does a PUT request to /Overpayments/{OverpaymentID}/History.

        Args:
            overpayment_id (str): (Required) Unique identifier for a
                Overpayment
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateHistoryRecordsOfAnOverpaymentRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Overpayments/{OverpaymentID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('OverpaymentID')
                            .value(overpayment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', APIException)
        ).execute()

    def allows_you_to_retrieve_history_records_of_a_payment(self,
                                                            payment_id,
                                                            xero_tenant_id):
        """Does a GET request to /Payments/{PaymentID}/History.

        Args:
            payment_id (str): (Required) Unique identifier for a Payment
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Payments/{PaymentID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('PaymentID')
                            .value(payment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_a_history_record_for_a_payment(self,
                                                            payment_id,
                                                            xero_tenant_id,
                                                            body):
        """Does a PUT request to /Payments/{PaymentID}/History.

        Args:
            payment_id (str): (Required) Unique identifier for a Payment
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateAHistoryRecordForAPaymentRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Payments/{PaymentID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('PaymentID')
                            .value(payment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', APIException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_prepayment(self,
                                                                  prepayment_id,
                                                                  xero_tenant_id):
        """Does a GET request to /Prepayments/{PrepaymentID}/History.

        Args:
            prepayment_id (str): (Required) Unique identifier for a PrePayment
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Prepayments/{PrepaymentID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('PrepaymentID')
                            .value(prepayment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_a_history_record_for_an_prepayment(self,
                                                                prepayment_id,
                                                                xero_tenant_id,
                                                                body):
        """Does a PUT request to /Prepayments/{PrepaymentID}/History.

        Args:
            prepayment_id (str): (Required) Unique identifier for a PrePayment
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateAHistoryRecordForAnPrepaymentRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Prepayments/{PrepaymentID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('PrepaymentID')
                            .value(prepayment_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', APIException)
        ).execute()

    def allows_you_to_retrieve_history_for_purchase_order(self,
                                                          purchase_order_id,
                                                          xero_tenant_id):
        """Does a GET request to /PurchaseOrders/{PurchaseOrderID}/History.

        Args:
            purchase_order_id (str): (Required) Unique identifier for a
                PurchaseOrder
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders/{PurchaseOrderID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('PurchaseOrderID')
                            .value(purchase_order_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_history_record_for_purchase_orders(self,
                                                                purchase_order_id,
                                                                xero_tenant_id,
                                                                body):
        """Does a PUT request to /PurchaseOrders/{PurchaseOrderID}/History.

        Args:
            purchase_order_id (str): (Required) Unique identifier for a
                PurchaseOrder
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateHistoryRecordForPurchaseOrdersRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/PurchaseOrders/{PurchaseOrderID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('PurchaseOrderID')
                            .value(purchase_order_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_quote(self,
                                                             quote_id,
                                                             xero_tenant_id):
        """Does a GET request to /Quotes/{QuoteID}/History.

        Args:
            quote_id (str): (Required) Unique identifier for an Quote
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Quotes/{QuoteID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('QuoteID')
                            .value(quote_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_quote_1(self,
                                                               quote_id,
                                                               xero_tenant_id,
                                                               body):
        """Does a PUT request to /Quotes/{QuoteID}/History.

        Args:
            quote_id (str): (Required) Unique identifier for an Quote
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveAHistoryRecordsOfAnQuoteRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Quotes/{QuoteID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('QuoteID')
                            .value(quote_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_receipt(self,
                                                               receipt_id,
                                                               xero_tenant_id):
        """Does a GET request to /Receipts/{ReceiptID}/History.

        Args:
            receipt_id (str): (Required) Unique identifier for a Receipt
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Receipts/{ReceiptID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ReceiptID')
                            .value(receipt_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_retrieve_a_history_records_of_an_receipt_1(self,
                                                                 receipt_id,
                                                                 xero_tenant_id,
                                                                 body):
        """Does a PUT request to /Receipts/{ReceiptID}/History.

        Args:
            receipt_id (str): (Required) Unique identifier for a Receipt
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToRetrieveAHistoryRecordsOfAnReceiptRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Receipts/{ReceiptID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('ReceiptID')
                            .value(receipt_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', APIException)
        ).execute()

    def allows_you_to_retrieve_history_for_a_repeating_invoice(self,
                                                               repeating_invoice_id,
                                                               xero_tenant_id):
        """Does a GET request to /RepeatingInvoices/{RepeatingInvoiceID}/History.

        Args:
            repeating_invoice_id (str): (Required) Unique identifier for a
                Repeating Invoice
            xero_tenant_id (str): (Required) Xero identifier for Tenant

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/RepeatingInvoices/{RepeatingInvoiceID}/History')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RepeatingInvoiceID')
                            .value(repeating_invoice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def allows_you_to_create_history_for_a_repeating_invoice(self,
                                                             repeating_invoice_id,
                                                             xero_tenant_id,
                                                             body):
        """Does a PUT request to /RepeatingInvoices/{RepeatingInvoiceID}/History.

        Args:
            repeating_invoice_id (str): (Required) Unique identifier for a
                Repeating Invoice
            xero_tenant_id (str): (Required) Xero identifier for Tenant
            body (AllowsYouToCreateHistoryForARepeatingInvoiceRequest): The
                request body parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/RepeatingInvoices/{RepeatingInvoiceID}/History')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('RepeatingInvoiceID')
                            .value(repeating_invoice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('xero-tenant-id')
                          .value(xero_tenant_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('oauth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', AFailedRequestDueToValidationErrorException)
        ).execute()
