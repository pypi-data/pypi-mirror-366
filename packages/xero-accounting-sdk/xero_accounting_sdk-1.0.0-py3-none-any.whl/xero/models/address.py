# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Address(object):

    """Implementation of the 'Address' model.

    Attributes:
        address_type (str): The model property of type str.
        address_line_1 (str): The model property of type str.
        address_line_2 (str): The model property of type str.
        address_line_3 (str): The model property of type str.
        address_line_4 (str): The model property of type str.
        city (str): The model property of type str.
        region (str): The model property of type str.
        postal_code (str): The model property of type str.
        country (str): The model property of type str.
        attention_to (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_type": 'AddressType',
        "address_line_1": 'AddressLine1',
        "address_line_2": 'AddressLine2',
        "address_line_3": 'AddressLine3',
        "address_line_4": 'AddressLine4',
        "city": 'City',
        "region": 'Region',
        "postal_code": 'PostalCode',
        "country": 'Country',
        "attention_to": 'AttentionTo'
    }

    def __init__(self,
                 address_type=None,
                 address_line_1=None,
                 address_line_2=None,
                 address_line_3=None,
                 address_line_4=None,
                 city=None,
                 region=None,
                 postal_code=None,
                 country=None,
                 attention_to=None):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.address_type = address_type 
        self.address_line_1 = address_line_1 
        self.address_line_2 = address_line_2 
        self.address_line_3 = address_line_3 
        self.address_line_4 = address_line_4 
        self.city = city 
        self.region = region 
        self.postal_code = postal_code 
        self.country = country 
        self.attention_to = attention_to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        address_type = dictionary.get("AddressType") if dictionary.get("AddressType") else None
        address_line_1 = dictionary.get("AddressLine1") if dictionary.get("AddressLine1") else None
        address_line_2 = dictionary.get("AddressLine2") if dictionary.get("AddressLine2") else None
        address_line_3 = dictionary.get("AddressLine3") if dictionary.get("AddressLine3") else None
        address_line_4 = dictionary.get("AddressLine4") if dictionary.get("AddressLine4") else None
        city = dictionary.get("City") if dictionary.get("City") else None
        region = dictionary.get("Region") if dictionary.get("Region") else None
        postal_code = dictionary.get("PostalCode") if dictionary.get("PostalCode") else None
        country = dictionary.get("Country") if dictionary.get("Country") else None
        attention_to = dictionary.get("AttentionTo") if dictionary.get("AttentionTo") else None
        # Return an object of this model
        return cls(address_type,
                   address_line_1,
                   address_line_2,
                   address_line_3,
                   address_line_4,
                   city,
                   region,
                   postal_code,
                   country,
                   attention_to)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'address_type={self.address_type!r}, '
                f'address_line_1={self.address_line_1!r}, '
                f'address_line_2={self.address_line_2!r}, '
                f'address_line_3={self.address_line_3!r}, '
                f'address_line_4={self.address_line_4!r}, '
                f'city={self.city!r}, '
                f'region={self.region!r}, '
                f'postal_code={self.postal_code!r}, '
                f'country={self.country!r}, '
                f'attention_to={self.attention_to!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'address_type={self.address_type!s}, '
                f'address_line_1={self.address_line_1!s}, '
                f'address_line_2={self.address_line_2!s}, '
                f'address_line_3={self.address_line_3!s}, '
                f'address_line_4={self.address_line_4!s}, '
                f'city={self.city!s}, '
                f'region={self.region!s}, '
                f'postal_code={self.postal_code!s}, '
                f'country={self.country!s}, '
                f'attention_to={self.attention_to!s})')
