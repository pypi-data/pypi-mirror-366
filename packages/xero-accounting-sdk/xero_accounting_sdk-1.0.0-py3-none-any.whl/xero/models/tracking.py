# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.name import Name
from xero.models.option import Option
from xero.models.tracking_category_id import TrackingCategoryID
from xero.models.tracking_option_id import TrackingOptionID


class Tracking(object):

    """Implementation of the 'Tracking' model.

    Attributes:
        tracking_category_id (TrackingCategoryID): The model property of type
            TrackingCategoryID.
        tracking_option_id (TrackingOptionID): The model property of type
            TrackingOptionID.
        name (Name): The model property of type Name.
        option (Option): The model property of type Option.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tracking_category_id": 'TrackingCategoryID',
        "tracking_option_id": 'TrackingOptionID',
        "name": 'Name',
        "option": 'Option'
    }

    def __init__(self,
                 tracking_category_id=None,
                 tracking_option_id=None,
                 name=None,
                 option=None):
        """Constructor for the Tracking class"""

        # Initialize members of the class
        self.tracking_category_id = tracking_category_id 
        self.tracking_option_id = tracking_option_id 
        self.name = name 
        self.option = option 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tracking_category_id = TrackingCategoryID.from_dictionary(dictionary.get('TrackingCategoryID')) if dictionary.get('TrackingCategoryID') else None
        tracking_option_id = TrackingOptionID.from_dictionary(dictionary.get('TrackingOptionID')) if dictionary.get('TrackingOptionID') else None
        name = Name.from_dictionary(dictionary.get('Name')) if dictionary.get('Name') else None
        option = Option.from_dictionary(dictionary.get('Option')) if dictionary.get('Option') else None
        # Return an object of this model
        return cls(tracking_category_id,
                   tracking_option_id,
                   name,
                   option)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_id={self.tracking_category_id!r}, '
                f'tracking_option_id={self.tracking_option_id!r}, '
                f'name={self.name!r}, '
                f'option={self.option!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tracking_category_id={self.tracking_category_id!s}, '
                f'tracking_option_id={self.tracking_option_id!s}, '
                f'name={self.name!s}, '
                f'option={self.option!s})')
