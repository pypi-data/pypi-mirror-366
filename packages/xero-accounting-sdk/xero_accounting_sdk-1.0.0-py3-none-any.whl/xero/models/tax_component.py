# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class TaxComponent(object):

    """Implementation of the 'TaxComponent' model.

    Attributes:
        name (str): The model property of type str.
        rate (str): The model property of type str.
        is_compound (str): The model property of type str.
        is_non_recoverable (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'Name',
        "rate": 'Rate',
        "is_compound": 'IsCompound',
        "is_non_recoverable": 'IsNonRecoverable'
    }

    def __init__(self,
                 name=None,
                 rate=None,
                 is_compound=None,
                 is_non_recoverable=None):
        """Constructor for the TaxComponent class"""

        # Initialize members of the class
        self.name = name 
        self.rate = rate 
        self.is_compound = is_compound 
        self.is_non_recoverable = is_non_recoverable 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("Name") if dictionary.get("Name") else None
        rate = dictionary.get("Rate") if dictionary.get("Rate") else None
        is_compound = dictionary.get("IsCompound") if dictionary.get("IsCompound") else None
        is_non_recoverable = dictionary.get("IsNonRecoverable") if dictionary.get("IsNonRecoverable") else None
        # Return an object of this model
        return cls(name,
                   rate,
                   is_compound,
                   is_non_recoverable)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'rate={self.rate!r}, '
                f'is_compound={self.is_compound!r}, '
                f'is_non_recoverable={self.is_non_recoverable!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'rate={self.rate!s}, '
                f'is_compound={self.is_compound!s}, '
                f'is_non_recoverable={self.is_non_recoverable!s})')
