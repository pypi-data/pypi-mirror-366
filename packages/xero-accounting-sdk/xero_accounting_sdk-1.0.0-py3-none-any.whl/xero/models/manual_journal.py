# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.attachment_3 import Attachment3
from xero.models.journal_line import JournalLine
from xero.models.validation_error import ValidationError
from xero.models.warning_3 import Warning3


class ManualJournal(object):

    """Implementation of the 'ManualJournal' model.

    Attributes:
        narration (str): The model property of type str.
        journal_lines (List[JournalLine]): The model property of type
            List[JournalLine].
        date (str): The model property of type str.
        line_amount_types (str): The model property of type str.
        status (str): The model property of type str.
        url (str): The model property of type str.
        show_on_cash_basis_reports (str): The model property of type str.
        manual_journal_id (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        warnings (List[Warning3]): The model property of type List[Warning3].
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].
        attachments (List[Attachment3]): The model property of type
            List[Attachment3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "narration": 'Narration',
        "journal_lines": 'JournalLines',
        "date": 'Date',
        "line_amount_types": 'LineAmountTypes',
        "status": 'Status',
        "url": 'Url',
        "show_on_cash_basis_reports": 'ShowOnCashBasisReports',
        "manual_journal_id": 'ManualJournalID',
        "status_attribute_string": 'StatusAttributeString',
        "warnings": 'Warnings',
        "validation_errors": 'ValidationErrors',
        "attachments": 'Attachments'
    }

    def __init__(self,
                 narration=None,
                 journal_lines=None,
                 date=None,
                 line_amount_types=None,
                 status=None,
                 url=None,
                 show_on_cash_basis_reports=None,
                 manual_journal_id=None,
                 status_attribute_string=None,
                 warnings=None,
                 validation_errors=None,
                 attachments=None):
        """Constructor for the ManualJournal class"""

        # Initialize members of the class
        self.narration = narration 
        self.journal_lines = journal_lines 
        self.date = date 
        self.line_amount_types = line_amount_types 
        self.status = status 
        self.url = url 
        self.show_on_cash_basis_reports = show_on_cash_basis_reports 
        self.manual_journal_id = manual_journal_id 
        self.status_attribute_string = status_attribute_string 
        self.warnings = warnings 
        self.validation_errors = validation_errors 
        self.attachments = attachments 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        narration = dictionary.get("Narration") if dictionary.get("Narration") else None
        journal_lines = None
        if dictionary.get('JournalLines') is not None:
            journal_lines = [JournalLine.from_dictionary(x) for x in dictionary.get('JournalLines')]
        date = dictionary.get("Date") if dictionary.get("Date") else None
        line_amount_types = dictionary.get("LineAmountTypes") if dictionary.get("LineAmountTypes") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        url = dictionary.get("Url") if dictionary.get("Url") else None
        show_on_cash_basis_reports = dictionary.get("ShowOnCashBasisReports") if dictionary.get("ShowOnCashBasisReports") else None
        manual_journal_id = dictionary.get("ManualJournalID") if dictionary.get("ManualJournalID") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning3.from_dictionary(x) for x in dictionary.get('Warnings')]
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        attachments = None
        if dictionary.get('Attachments') is not None:
            attachments = [Attachment3.from_dictionary(x) for x in dictionary.get('Attachments')]
        # Return an object of this model
        return cls(narration,
                   journal_lines,
                   date,
                   line_amount_types,
                   status,
                   url,
                   show_on_cash_basis_reports,
                   manual_journal_id,
                   status_attribute_string,
                   warnings,
                   validation_errors,
                   attachments)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'narration={self.narration!r}, '
                f'journal_lines={self.journal_lines!r}, '
                f'date={self.date!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'status={self.status!r}, '
                f'url={self.url!r}, '
                f'show_on_cash_basis_reports={self.show_on_cash_basis_reports!r}, '
                f'manual_journal_id={self.manual_journal_id!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'warnings={self.warnings!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'attachments={self.attachments!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'narration={self.narration!s}, '
                f'journal_lines={self.journal_lines!s}, '
                f'date={self.date!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'status={self.status!s}, '
                f'url={self.url!s}, '
                f'show_on_cash_basis_reports={self.show_on_cash_basis_reports!s}, '
                f'manual_journal_id={self.manual_journal_id!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'warnings={self.warnings!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'attachments={self.attachments!s})')
