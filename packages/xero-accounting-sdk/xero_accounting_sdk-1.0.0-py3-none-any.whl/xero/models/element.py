# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.validation_error import ValidationError


class Element(object):

    """Implementation of the 'Element' model.

    Attributes:
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].
        batch_payment_id (str): The model property of type str.
        bank_transaction_id (str): The model property of type str.
        credit_note_id (str): The model property of type str.
        contact_id (str): The model property of type str.
        invoice_id (str): The model property of type str.
        item_id (str): The model property of type str.
        purchase_order_id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "validation_errors": 'ValidationErrors',
        "batch_payment_id": 'BatchPaymentID',
        "bank_transaction_id": 'BankTransactionID',
        "credit_note_id": 'CreditNoteID',
        "contact_id": 'ContactID',
        "invoice_id": 'InvoiceID',
        "item_id": 'ItemID',
        "purchase_order_id": 'PurchaseOrderID'
    }

    def __init__(self,
                 validation_errors=None,
                 batch_payment_id=None,
                 bank_transaction_id=None,
                 credit_note_id=None,
                 contact_id=None,
                 invoice_id=None,
                 item_id=None,
                 purchase_order_id=None):
        """Constructor for the Element class"""

        # Initialize members of the class
        self.validation_errors = validation_errors 
        self.batch_payment_id = batch_payment_id 
        self.bank_transaction_id = bank_transaction_id 
        self.credit_note_id = credit_note_id 
        self.contact_id = contact_id 
        self.invoice_id = invoice_id 
        self.item_id = item_id 
        self.purchase_order_id = purchase_order_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        batch_payment_id = dictionary.get("BatchPaymentID") if dictionary.get("BatchPaymentID") else None
        bank_transaction_id = dictionary.get("BankTransactionID") if dictionary.get("BankTransactionID") else None
        credit_note_id = dictionary.get("CreditNoteID") if dictionary.get("CreditNoteID") else None
        contact_id = dictionary.get("ContactID") if dictionary.get("ContactID") else None
        invoice_id = dictionary.get("InvoiceID") if dictionary.get("InvoiceID") else None
        item_id = dictionary.get("ItemID") if dictionary.get("ItemID") else None
        purchase_order_id = dictionary.get("PurchaseOrderID") if dictionary.get("PurchaseOrderID") else None
        # Return an object of this model
        return cls(validation_errors,
                   batch_payment_id,
                   bank_transaction_id,
                   credit_note_id,
                   contact_id,
                   invoice_id,
                   item_id,
                   purchase_order_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'validation_errors={self.validation_errors!r}, '
                f'batch_payment_id={self.batch_payment_id!r}, '
                f'bank_transaction_id={self.bank_transaction_id!r}, '
                f'credit_note_id={self.credit_note_id!r}, '
                f'contact_id={self.contact_id!r}, '
                f'invoice_id={self.invoice_id!r}, '
                f'item_id={self.item_id!r}, '
                f'purchase_order_id={self.purchase_order_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'validation_errors={self.validation_errors!s}, '
                f'batch_payment_id={self.batch_payment_id!s}, '
                f'bank_transaction_id={self.bank_transaction_id!s}, '
                f'credit_note_id={self.credit_note_id!s}, '
                f'contact_id={self.contact_id!s}, '
                f'invoice_id={self.invoice_id!s}, '
                f'item_id={self.item_id!s}, '
                f'purchase_order_id={self.purchase_order_id!s})')
