# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.field import Field
from xero.models.row_2 import Row2


class Report1(object):

    """Implementation of the 'Report1' model.

    Attributes:
        report_id (str): The model property of type str.
        report_name (str): The model property of type str.
        report_title (str): The model property of type str.
        report_type (str): The model property of type str.
        report_titles (List[str]): The model property of type List[str].
        report_date (str): The model property of type str.
        rows (List[Row2]): The model property of type List[Row2].
        updated_date_utc (str): The model property of type str.
        fields (List[Field]): The model property of type List[Field].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "report_id": 'ReportID',
        "report_name": 'ReportName',
        "report_title": 'ReportTitle',
        "report_type": 'ReportType',
        "report_titles": 'ReportTitles',
        "report_date": 'ReportDate',
        "rows": 'Rows',
        "updated_date_utc": 'UpdatedDateUTC',
        "fields": 'Fields'
    }

    def __init__(self,
                 report_id=None,
                 report_name=None,
                 report_title=None,
                 report_type=None,
                 report_titles=None,
                 report_date=None,
                 rows=None,
                 updated_date_utc=None,
                 fields=None):
        """Constructor for the Report1 class"""

        # Initialize members of the class
        self.report_id = report_id 
        self.report_name = report_name 
        self.report_title = report_title 
        self.report_type = report_type 
        self.report_titles = report_titles 
        self.report_date = report_date 
        self.rows = rows 
        self.updated_date_utc = updated_date_utc 
        self.fields = fields 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        report_id = dictionary.get("ReportID") if dictionary.get("ReportID") else None
        report_name = dictionary.get("ReportName") if dictionary.get("ReportName") else None
        report_title = dictionary.get("ReportTitle") if dictionary.get("ReportTitle") else None
        report_type = dictionary.get("ReportType") if dictionary.get("ReportType") else None
        report_titles = dictionary.get("ReportTitles") if dictionary.get("ReportTitles") else None
        report_date = dictionary.get("ReportDate") if dictionary.get("ReportDate") else None
        rows = None
        if dictionary.get('Rows') is not None:
            rows = [Row2.from_dictionary(x) for x in dictionary.get('Rows')]
        updated_date_utc = dictionary.get("UpdatedDateUTC") if dictionary.get("UpdatedDateUTC") else None
        fields = None
        if dictionary.get('Fields') is not None:
            fields = [Field.from_dictionary(x) for x in dictionary.get('Fields')]
        # Return an object of this model
        return cls(report_id,
                   report_name,
                   report_title,
                   report_type,
                   report_titles,
                   report_date,
                   rows,
                   updated_date_utc,
                   fields)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'report_id={self.report_id!r}, '
                f'report_name={self.report_name!r}, '
                f'report_title={self.report_title!r}, '
                f'report_type={self.report_type!r}, '
                f'report_titles={self.report_titles!r}, '
                f'report_date={self.report_date!r}, '
                f'rows={self.rows!r}, '
                f'updated_date_utc={self.updated_date_utc!r}, '
                f'fields={self.fields!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'report_id={self.report_id!s}, '
                f'report_name={self.report_name!s}, '
                f'report_title={self.report_title!s}, '
                f'report_type={self.report_type!s}, '
                f'report_titles={self.report_titles!s}, '
                f'report_date={self.report_date!s}, '
                f'rows={self.rows!s}, '
                f'updated_date_utc={self.updated_date_utc!s}, '
                f'fields={self.fields!s})')
