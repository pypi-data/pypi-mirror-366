# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ConversionDate(object):

    """Implementation of the 'ConversionDate' model.

    Attributes:
        month (str): The model property of type str.
        year (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "month": 'Month',
        "year": 'Year'
    }

    def __init__(self,
                 month=None,
                 year=None):
        """Constructor for the ConversionDate class"""

        # Initialize members of the class
        self.month = month 
        self.year = year 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        month = dictionary.get("Month") if dictionary.get("Month") else None
        year = dictionary.get("Year") if dictionary.get("Year") else None
        # Return an object of this model
        return cls(month,
                   year)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'month={self.month!r}, '
                f'year={self.year!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'month={self.month!s}, '
                f'year={self.year!s})')
