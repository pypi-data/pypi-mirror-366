# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.attachment import Attachment
from xero.models.contact import Contact
from xero.models.line_amount_types import LineAmountTypes
from xero.models.line_item import LineItem
from xero.models.validation_error_9 import ValidationError9
from xero.models.warning import Warning


class Invoice(object):

    """Implementation of the 'Invoice' model.

    Attributes:
        mtype (str): The model property of type str.
        contact (Contact): The model property of type Contact.
        line_items (List[LineItem]): The model property of type List[LineItem].
        date (str): The model property of type str.
        due_date (str): The model property of type str.
        line_amount_types (LineAmountTypes): The model property of type
            LineAmountTypes.
        invoice_number (str): The model property of type str.
        reference (str): The model property of type str.
        branding_theme_id (str): The model property of type str.
        url (str): The model property of type str.
        currency_code (str): The model property of type str.
        currency_rate (str): The model property of type str.
        status (str): The model property of type str.
        sent_to_contact (str): The model property of type str.
        expected_payment_date (str): The model property of type str.
        planned_payment_date (str): The model property of type str.
        invoice_id (str): The model property of type str.
        repeating_invoice_id (str): The model property of type str.
        attachments (List[Attachment]): The model property of type
            List[Attachment].
        has_errors (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError9]): The model property of type
            List[ValidationError9].
        warnings (List[Warning]): The model property of type List[Warning].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'Type',
        "contact": 'Contact',
        "line_items": 'LineItems',
        "date": 'Date',
        "due_date": 'DueDate',
        "line_amount_types": 'LineAmountTypes',
        "invoice_number": 'InvoiceNumber',
        "reference": 'Reference',
        "branding_theme_id": 'BrandingThemeID',
        "url": 'Url',
        "currency_code": 'CurrencyCode',
        "currency_rate": 'CurrencyRate',
        "status": 'Status',
        "sent_to_contact": 'SentToContact',
        "expected_payment_date": 'ExpectedPaymentDate',
        "planned_payment_date": 'PlannedPaymentDate',
        "invoice_id": 'InvoiceID',
        "repeating_invoice_id": 'RepeatingInvoiceID',
        "attachments": 'Attachments',
        "has_errors": 'HasErrors',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors',
        "warnings": 'Warnings'
    }

    def __init__(self,
                 mtype=None,
                 contact=None,
                 line_items=None,
                 date=None,
                 due_date=None,
                 line_amount_types=None,
                 invoice_number=None,
                 reference=None,
                 branding_theme_id=None,
                 url=None,
                 currency_code=None,
                 currency_rate=None,
                 status=None,
                 sent_to_contact=None,
                 expected_payment_date=None,
                 planned_payment_date=None,
                 invoice_id=None,
                 repeating_invoice_id=None,
                 attachments=None,
                 has_errors=None,
                 status_attribute_string=None,
                 validation_errors=None,
                 warnings=None):
        """Constructor for the Invoice class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.contact = contact 
        self.line_items = line_items 
        self.date = date 
        self.due_date = due_date 
        self.line_amount_types = line_amount_types 
        self.invoice_number = invoice_number 
        self.reference = reference 
        self.branding_theme_id = branding_theme_id 
        self.url = url 
        self.currency_code = currency_code 
        self.currency_rate = currency_rate 
        self.status = status 
        self.sent_to_contact = sent_to_contact 
        self.expected_payment_date = expected_payment_date 
        self.planned_payment_date = planned_payment_date 
        self.invoice_id = invoice_id 
        self.repeating_invoice_id = repeating_invoice_id 
        self.attachments = attachments 
        self.has_errors = has_errors 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 
        self.warnings = warnings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        contact = Contact.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem.from_dictionary(x) for x in dictionary.get('LineItems')]
        date = dictionary.get("Date") if dictionary.get("Date") else None
        due_date = dictionary.get("DueDate") if dictionary.get("DueDate") else None
        line_amount_types = LineAmountTypes.from_dictionary(dictionary.get('LineAmountTypes')) if dictionary.get('LineAmountTypes') else None
        invoice_number = dictionary.get("InvoiceNumber") if dictionary.get("InvoiceNumber") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        branding_theme_id = dictionary.get("BrandingThemeID") if dictionary.get("BrandingThemeID") else None
        url = dictionary.get("Url") if dictionary.get("Url") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        sent_to_contact = dictionary.get("SentToContact") if dictionary.get("SentToContact") else None
        expected_payment_date = dictionary.get("ExpectedPaymentDate") if dictionary.get("ExpectedPaymentDate") else None
        planned_payment_date = dictionary.get("PlannedPaymentDate") if dictionary.get("PlannedPaymentDate") else None
        invoice_id = dictionary.get("InvoiceID") if dictionary.get("InvoiceID") else None
        repeating_invoice_id = dictionary.get("RepeatingInvoiceID") if dictionary.get("RepeatingInvoiceID") else None
        attachments = None
        if dictionary.get('Attachments') is not None:
            attachments = [Attachment.from_dictionary(x) for x in dictionary.get('Attachments')]
        has_errors = dictionary.get("HasErrors") if dictionary.get("HasErrors") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError9.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning.from_dictionary(x) for x in dictionary.get('Warnings')]
        # Return an object of this model
        return cls(mtype,
                   contact,
                   line_items,
                   date,
                   due_date,
                   line_amount_types,
                   invoice_number,
                   reference,
                   branding_theme_id,
                   url,
                   currency_code,
                   currency_rate,
                   status,
                   sent_to_contact,
                   expected_payment_date,
                   planned_payment_date,
                   invoice_id,
                   repeating_invoice_id,
                   attachments,
                   has_errors,
                   status_attribute_string,
                   validation_errors,
                   warnings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'contact={self.contact!r}, '
                f'line_items={self.line_items!r}, '
                f'date={self.date!r}, '
                f'due_date={self.due_date!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'invoice_number={self.invoice_number!r}, '
                f'reference={self.reference!r}, '
                f'branding_theme_id={self.branding_theme_id!r}, '
                f'url={self.url!r}, '
                f'currency_code={self.currency_code!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'status={self.status!r}, '
                f'sent_to_contact={self.sent_to_contact!r}, '
                f'expected_payment_date={self.expected_payment_date!r}, '
                f'planned_payment_date={self.planned_payment_date!r}, '
                f'invoice_id={self.invoice_id!r}, '
                f'repeating_invoice_id={self.repeating_invoice_id!r}, '
                f'attachments={self.attachments!r}, '
                f'has_errors={self.has_errors!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'warnings={self.warnings!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'contact={self.contact!s}, '
                f'line_items={self.line_items!s}, '
                f'date={self.date!s}, '
                f'due_date={self.due_date!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'invoice_number={self.invoice_number!s}, '
                f'reference={self.reference!s}, '
                f'branding_theme_id={self.branding_theme_id!s}, '
                f'url={self.url!s}, '
                f'currency_code={self.currency_code!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'status={self.status!s}, '
                f'sent_to_contact={self.sent_to_contact!s}, '
                f'expected_payment_date={self.expected_payment_date!s}, '
                f'planned_payment_date={self.planned_payment_date!s}, '
                f'invoice_id={self.invoice_id!s}, '
                f'repeating_invoice_id={self.repeating_invoice_id!s}, '
                f'attachments={self.attachments!s}, '
                f'has_errors={self.has_errors!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'warnings={self.warnings!s})')
