# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.credit_note import CreditNote
from xero.models.invoice import Invoice
from xero.models.overpayment import Overpayment
from xero.models.prepayment import Prepayment
from xero.models.validation_error import ValidationError


class Allocation4(object):

    """Implementation of the 'Allocation4' model.

    Attributes:
        amount (str): The model property of type str.
        invoice (Invoice): The model property of type Invoice.
        date (str): The model property of type str.
        overpayment (Overpayment): The model property of type Overpayment.
        prepayment (Prepayment): The model property of type Prepayment.
        credit_note (CreditNote): The model property of type CreditNote.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'Amount',
        "invoice": 'Invoice',
        "date": 'Date',
        "overpayment": 'Overpayment',
        "prepayment": 'Prepayment',
        "credit_note": 'CreditNote',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 amount=None,
                 invoice=None,
                 date=None,
                 overpayment=None,
                 prepayment=None,
                 credit_note=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the Allocation4 class"""

        # Initialize members of the class
        self.amount = amount 
        self.invoice = invoice 
        self.date = date 
        self.overpayment = overpayment 
        self.prepayment = prepayment 
        self.credit_note = credit_note 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("Amount") if dictionary.get("Amount") else None
        invoice = Invoice.from_dictionary(dictionary.get('Invoice')) if dictionary.get('Invoice') else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        overpayment = Overpayment.from_dictionary(dictionary.get('Overpayment')) if dictionary.get('Overpayment') else None
        prepayment = Prepayment.from_dictionary(dictionary.get('Prepayment')) if dictionary.get('Prepayment') else None
        credit_note = CreditNote.from_dictionary(dictionary.get('CreditNote')) if dictionary.get('CreditNote') else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(amount,
                   invoice,
                   date,
                   overpayment,
                   prepayment,
                   credit_note,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!r}, '
                f'invoice={self.invoice!r}, '
                f'date={self.date!r}, '
                f'overpayment={self.overpayment!r}, '
                f'prepayment={self.prepayment!r}, '
                f'credit_note={self.credit_note!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!s}, '
                f'invoice={self.invoice!s}, '
                f'date={self.date!s}, '
                f'overpayment={self.overpayment!s}, '
                f'prepayment={self.prepayment!s}, '
                f'credit_note={self.credit_note!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
