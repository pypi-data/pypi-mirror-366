# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BrandingTheme(object):

    """Implementation of the 'BrandingTheme' model.

    Attributes:
        branding_theme_id (str): The model property of type str.
        name (str): The model property of type str.
        logo_url (str): The model property of type str.
        mtype (str): The model property of type str.
        sort_order (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "branding_theme_id": 'BrandingThemeID',
        "name": 'Name',
        "logo_url": 'LogoUrl',
        "mtype": 'Type',
        "sort_order": 'SortOrder'
    }

    def __init__(self,
                 branding_theme_id=None,
                 name=None,
                 logo_url=None,
                 mtype=None,
                 sort_order=None):
        """Constructor for the BrandingTheme class"""

        # Initialize members of the class
        self.branding_theme_id = branding_theme_id 
        self.name = name 
        self.logo_url = logo_url 
        self.mtype = mtype 
        self.sort_order = sort_order 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        branding_theme_id = dictionary.get("BrandingThemeID") if dictionary.get("BrandingThemeID") else None
        name = dictionary.get("Name") if dictionary.get("Name") else None
        logo_url = dictionary.get("LogoUrl") if dictionary.get("LogoUrl") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        sort_order = dictionary.get("SortOrder") if dictionary.get("SortOrder") else None
        # Return an object of this model
        return cls(branding_theme_id,
                   name,
                   logo_url,
                   mtype,
                   sort_order)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'branding_theme_id={self.branding_theme_id!r}, '
                f'name={self.name!r}, '
                f'logo_url={self.logo_url!r}, '
                f'mtype={self.mtype!r}, '
                f'sort_order={self.sort_order!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'branding_theme_id={self.branding_theme_id!s}, '
                f'name={self.name!s}, '
                f'logo_url={self.logo_url!s}, '
                f'mtype={self.mtype!s}, '
                f'sort_order={self.sort_order!s})')
