# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.contact_4 import Contact4
from xero.models.line_item_4 import LineItem4
from xero.models.validation_error import ValidationError


class Quote(object):

    """Implementation of the 'Quote' model.

    Attributes:
        quote_id (str): The model property of type str.
        quote_number (str): The model property of type str.
        reference (str): The model property of type str.
        terms (str): The model property of type str.
        contact (Contact4): The model property of type Contact4.
        line_items (List[LineItem4]): The model property of type
            List[LineItem4].
        date (str): The model property of type str.
        date_string (str): The model property of type str.
        expiry_date (str): The model property of type str.
        expiry_date_string (str): The model property of type str.
        status (str): The model property of type str.
        currency_code (str): The model property of type str.
        currency_rate (str): The model property of type str.
        title (str): The model property of type str.
        summary (str): The model property of type str.
        branding_theme_id (str): The model property of type str.
        line_amount_types (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "quote_id": 'QuoteID',
        "quote_number": 'QuoteNumber',
        "reference": 'Reference',
        "terms": 'Terms',
        "contact": 'Contact',
        "line_items": 'LineItems',
        "date": 'Date',
        "date_string": 'DateString',
        "expiry_date": 'ExpiryDate',
        "expiry_date_string": 'ExpiryDateString',
        "status": 'Status',
        "currency_code": 'CurrencyCode',
        "currency_rate": 'CurrencyRate',
        "title": 'Title',
        "summary": 'Summary',
        "branding_theme_id": 'BrandingThemeID',
        "line_amount_types": 'LineAmountTypes',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 quote_id=None,
                 quote_number=None,
                 reference=None,
                 terms=None,
                 contact=None,
                 line_items=None,
                 date=None,
                 date_string=None,
                 expiry_date=None,
                 expiry_date_string=None,
                 status=None,
                 currency_code=None,
                 currency_rate=None,
                 title=None,
                 summary=None,
                 branding_theme_id=None,
                 line_amount_types=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the Quote class"""

        # Initialize members of the class
        self.quote_id = quote_id 
        self.quote_number = quote_number 
        self.reference = reference 
        self.terms = terms 
        self.contact = contact 
        self.line_items = line_items 
        self.date = date 
        self.date_string = date_string 
        self.expiry_date = expiry_date 
        self.expiry_date_string = expiry_date_string 
        self.status = status 
        self.currency_code = currency_code 
        self.currency_rate = currency_rate 
        self.title = title 
        self.summary = summary 
        self.branding_theme_id = branding_theme_id 
        self.line_amount_types = line_amount_types 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        quote_id = dictionary.get("QuoteID") if dictionary.get("QuoteID") else None
        quote_number = dictionary.get("QuoteNumber") if dictionary.get("QuoteNumber") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        terms = dictionary.get("Terms") if dictionary.get("Terms") else None
        contact = Contact4.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem4.from_dictionary(x) for x in dictionary.get('LineItems')]
        date = dictionary.get("Date") if dictionary.get("Date") else None
        date_string = dictionary.get("DateString") if dictionary.get("DateString") else None
        expiry_date = dictionary.get("ExpiryDate") if dictionary.get("ExpiryDate") else None
        expiry_date_string = dictionary.get("ExpiryDateString") if dictionary.get("ExpiryDateString") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        title = dictionary.get("Title") if dictionary.get("Title") else None
        summary = dictionary.get("Summary") if dictionary.get("Summary") else None
        branding_theme_id = dictionary.get("BrandingThemeID") if dictionary.get("BrandingThemeID") else None
        line_amount_types = dictionary.get("LineAmountTypes") if dictionary.get("LineAmountTypes") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(quote_id,
                   quote_number,
                   reference,
                   terms,
                   contact,
                   line_items,
                   date,
                   date_string,
                   expiry_date,
                   expiry_date_string,
                   status,
                   currency_code,
                   currency_rate,
                   title,
                   summary,
                   branding_theme_id,
                   line_amount_types,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'quote_id={self.quote_id!r}, '
                f'quote_number={self.quote_number!r}, '
                f'reference={self.reference!r}, '
                f'terms={self.terms!r}, '
                f'contact={self.contact!r}, '
                f'line_items={self.line_items!r}, '
                f'date={self.date!r}, '
                f'date_string={self.date_string!r}, '
                f'expiry_date={self.expiry_date!r}, '
                f'expiry_date_string={self.expiry_date_string!r}, '
                f'status={self.status!r}, '
                f'currency_code={self.currency_code!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'title={self.title!r}, '
                f'summary={self.summary!r}, '
                f'branding_theme_id={self.branding_theme_id!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'quote_id={self.quote_id!s}, '
                f'quote_number={self.quote_number!s}, '
                f'reference={self.reference!s}, '
                f'terms={self.terms!s}, '
                f'contact={self.contact!s}, '
                f'line_items={self.line_items!s}, '
                f'date={self.date!s}, '
                f'date_string={self.date_string!s}, '
                f'expiry_date={self.expiry_date!s}, '
                f'expiry_date_string={self.expiry_date_string!s}, '
                f'status={self.status!s}, '
                f'currency_code={self.currency_code!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'title={self.title!s}, '
                f'summary={self.summary!s}, '
                f'branding_theme_id={self.branding_theme_id!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
