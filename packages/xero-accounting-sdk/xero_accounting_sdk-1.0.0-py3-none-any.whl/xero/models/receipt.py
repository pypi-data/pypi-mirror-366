# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.attachment_3 import Attachment3
from xero.models.contact_4 import Contact4
from xero.models.line_item_4 import LineItem4
from xero.models.user import User
from xero.models.validation_error import ValidationError
from xero.models.warning_3 import Warning3


class Receipt(object):

    """Implementation of the 'Receipt' model.

    Attributes:
        date (str): The model property of type str.
        contact (Contact4): The model property of type Contact4.
        line_items (List[LineItem4]): The model property of type
            List[LineItem4].
        user (User): The model property of type User.
        reference (str): The model property of type str.
        line_amount_types (str): The model property of type str.
        sub_total (str): The model property of type str.
        total_tax (str): The model property of type str.
        total (str): The model property of type str.
        receipt_id (str): The model property of type str.
        status (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].
        warnings (List[Warning3]): The model property of type List[Warning3].
        attachments (List[Attachment3]): The model property of type
            List[Attachment3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date": 'Date',
        "contact": 'Contact',
        "line_items": 'LineItems',
        "user": 'User',
        "reference": 'Reference',
        "line_amount_types": 'LineAmountTypes',
        "sub_total": 'SubTotal',
        "total_tax": 'TotalTax',
        "total": 'Total',
        "receipt_id": 'ReceiptID',
        "status": 'Status',
        "validation_errors": 'ValidationErrors',
        "warnings": 'Warnings',
        "attachments": 'Attachments'
    }

    def __init__(self,
                 date=None,
                 contact=None,
                 line_items=None,
                 user=None,
                 reference=None,
                 line_amount_types=None,
                 sub_total=None,
                 total_tax=None,
                 total=None,
                 receipt_id=None,
                 status=None,
                 validation_errors=None,
                 warnings=None,
                 attachments=None):
        """Constructor for the Receipt class"""

        # Initialize members of the class
        self.date = date 
        self.contact = contact 
        self.line_items = line_items 
        self.user = user 
        self.reference = reference 
        self.line_amount_types = line_amount_types 
        self.sub_total = sub_total 
        self.total_tax = total_tax 
        self.total = total 
        self.receipt_id = receipt_id 
        self.status = status 
        self.validation_errors = validation_errors 
        self.warnings = warnings 
        self.attachments = attachments 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        date = dictionary.get("Date") if dictionary.get("Date") else None
        contact = Contact4.from_dictionary(dictionary.get('Contact')) if dictionary.get('Contact') else None
        line_items = None
        if dictionary.get('LineItems') is not None:
            line_items = [LineItem4.from_dictionary(x) for x in dictionary.get('LineItems')]
        user = User.from_dictionary(dictionary.get('User')) if dictionary.get('User') else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        line_amount_types = dictionary.get("LineAmountTypes") if dictionary.get("LineAmountTypes") else None
        sub_total = dictionary.get("SubTotal") if dictionary.get("SubTotal") else None
        total_tax = dictionary.get("TotalTax") if dictionary.get("TotalTax") else None
        total = dictionary.get("Total") if dictionary.get("Total") else None
        receipt_id = dictionary.get("ReceiptID") if dictionary.get("ReceiptID") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        warnings = None
        if dictionary.get('Warnings') is not None:
            warnings = [Warning3.from_dictionary(x) for x in dictionary.get('Warnings')]
        attachments = None
        if dictionary.get('Attachments') is not None:
            attachments = [Attachment3.from_dictionary(x) for x in dictionary.get('Attachments')]
        # Return an object of this model
        return cls(date,
                   contact,
                   line_items,
                   user,
                   reference,
                   line_amount_types,
                   sub_total,
                   total_tax,
                   total,
                   receipt_id,
                   status,
                   validation_errors,
                   warnings,
                   attachments)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'date={self.date!r}, '
                f'contact={self.contact!r}, '
                f'line_items={self.line_items!r}, '
                f'user={self.user!r}, '
                f'reference={self.reference!r}, '
                f'line_amount_types={self.line_amount_types!r}, '
                f'sub_total={self.sub_total!r}, '
                f'total_tax={self.total_tax!r}, '
                f'total={self.total!r}, '
                f'receipt_id={self.receipt_id!r}, '
                f'status={self.status!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'warnings={self.warnings!r}, '
                f'attachments={self.attachments!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'date={self.date!s}, '
                f'contact={self.contact!s}, '
                f'line_items={self.line_items!s}, '
                f'user={self.user!s}, '
                f'reference={self.reference!s}, '
                f'line_amount_types={self.line_amount_types!s}, '
                f'sub_total={self.sub_total!s}, '
                f'total_tax={self.total_tax!s}, '
                f'total={self.total!s}, '
                f'receipt_id={self.receipt_id!s}, '
                f'status={self.status!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'warnings={self.warnings!s}, '
                f'attachments={self.attachments!s})')
