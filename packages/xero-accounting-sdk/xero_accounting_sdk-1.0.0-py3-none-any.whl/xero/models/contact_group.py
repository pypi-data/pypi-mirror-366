# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.contact import Contact


class ContactGroup(object):

    """Implementation of the 'ContactGroup' model.

    Attributes:
        name (str): The model property of type str.
        status (str): The model property of type str.
        contact_group_id (str): The model property of type str.
        contacts (List[Contact]): The model property of type List[Contact].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'Name',
        "status": 'Status',
        "contact_group_id": 'ContactGroupID',
        "contacts": 'Contacts'
    }

    def __init__(self,
                 name=None,
                 status=None,
                 contact_group_id=None,
                 contacts=None):
        """Constructor for the ContactGroup class"""

        # Initialize members of the class
        self.name = name 
        self.status = status 
        self.contact_group_id = contact_group_id 
        self.contacts = contacts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("Name") if dictionary.get("Name") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        contact_group_id = dictionary.get("ContactGroupID") if dictionary.get("ContactGroupID") else None
        contacts = None
        if dictionary.get('Contacts') is not None:
            contacts = [Contact.from_dictionary(x) for x in dictionary.get('Contacts')]
        # Return an object of this model
        return cls(name,
                   status,
                   contact_group_id,
                   contacts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'status={self.status!r}, '
                f'contact_group_id={self.contact_group_id!r}, '
                f'contacts={self.contacts!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'status={self.status!s}, '
                f'contact_group_id={self.contact_group_id!s}, '
                f'contacts={self.contacts!s})')
