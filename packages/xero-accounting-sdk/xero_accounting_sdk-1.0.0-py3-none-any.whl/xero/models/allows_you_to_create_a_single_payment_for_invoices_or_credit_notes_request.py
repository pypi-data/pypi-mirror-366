# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.account import Account
from xero.models.credit_note import CreditNote
from xero.models.invoice import Invoice
from xero.models.overpayment import Overpayment
from xero.models.prepayment import Prepayment
from xero.models.validation_error import ValidationError


class AllowsYouToCreateASinglePaymentForInvoicesOrCreditNotesRequest(object):

    """Implementation of the 'Allows you to create a single payment for invoices or credit notes Request' model.

    Attributes:
        invoice (Invoice): The model property of type Invoice.
        credit_note (CreditNote): The model property of type CreditNote.
        prepayment (Prepayment): The model property of type Prepayment.
        overpayment (Overpayment): The model property of type Overpayment.
        invoice_number (str): The model property of type str.
        credit_note_number (str): The model property of type str.
        account (Account): The model property of type Account.
        code (str): The model property of type str.
        date (str): The model property of type str.
        currency_rate (str): The model property of type str.
        amount (str): The model property of type str.
        reference (str): The model property of type str.
        is_reconciled (str): The model property of type str.
        status (str): The model property of type str.
        payment_id (str): The model property of type str.
        bank_account_number (str): The model property of type str.
        particulars (str): The model property of type str.
        details (str): The model property of type str.
        has_account (str): The model property of type str.
        has_validation_errors (str): The model property of type str.
        status_attribute_string (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "invoice": 'Invoice',
        "credit_note": 'CreditNote',
        "prepayment": 'Prepayment',
        "overpayment": 'Overpayment',
        "invoice_number": 'InvoiceNumber',
        "credit_note_number": 'CreditNoteNumber',
        "account": 'Account',
        "code": 'Code',
        "date": 'Date',
        "currency_rate": 'CurrencyRate',
        "amount": 'Amount',
        "reference": 'Reference',
        "is_reconciled": 'IsReconciled',
        "status": 'Status',
        "payment_id": 'PaymentID',
        "bank_account_number": 'BankAccountNumber',
        "particulars": 'Particulars',
        "details": 'Details',
        "has_account": 'HasAccount',
        "has_validation_errors": 'HasValidationErrors',
        "status_attribute_string": 'StatusAttributeString',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 invoice=None,
                 credit_note=None,
                 prepayment=None,
                 overpayment=None,
                 invoice_number=None,
                 credit_note_number=None,
                 account=None,
                 code=None,
                 date=None,
                 currency_rate=None,
                 amount=None,
                 reference=None,
                 is_reconciled=None,
                 status=None,
                 payment_id=None,
                 bank_account_number=None,
                 particulars=None,
                 details=None,
                 has_account=None,
                 has_validation_errors=None,
                 status_attribute_string=None,
                 validation_errors=None):
        """Constructor for the AllowsYouToCreateASinglePaymentForInvoicesOrCreditNotesRequest class"""

        # Initialize members of the class
        self.invoice = invoice 
        self.credit_note = credit_note 
        self.prepayment = prepayment 
        self.overpayment = overpayment 
        self.invoice_number = invoice_number 
        self.credit_note_number = credit_note_number 
        self.account = account 
        self.code = code 
        self.date = date 
        self.currency_rate = currency_rate 
        self.amount = amount 
        self.reference = reference 
        self.is_reconciled = is_reconciled 
        self.status = status 
        self.payment_id = payment_id 
        self.bank_account_number = bank_account_number 
        self.particulars = particulars 
        self.details = details 
        self.has_account = has_account 
        self.has_validation_errors = has_validation_errors 
        self.status_attribute_string = status_attribute_string 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        invoice = Invoice.from_dictionary(dictionary.get('Invoice')) if dictionary.get('Invoice') else None
        credit_note = CreditNote.from_dictionary(dictionary.get('CreditNote')) if dictionary.get('CreditNote') else None
        prepayment = Prepayment.from_dictionary(dictionary.get('Prepayment')) if dictionary.get('Prepayment') else None
        overpayment = Overpayment.from_dictionary(dictionary.get('Overpayment')) if dictionary.get('Overpayment') else None
        invoice_number = dictionary.get("InvoiceNumber") if dictionary.get("InvoiceNumber") else None
        credit_note_number = dictionary.get("CreditNoteNumber") if dictionary.get("CreditNoteNumber") else None
        account = Account.from_dictionary(dictionary.get('Account')) if dictionary.get('Account') else None
        code = dictionary.get("Code") if dictionary.get("Code") else None
        date = dictionary.get("Date") if dictionary.get("Date") else None
        currency_rate = dictionary.get("CurrencyRate") if dictionary.get("CurrencyRate") else None
        amount = dictionary.get("Amount") if dictionary.get("Amount") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        is_reconciled = dictionary.get("IsReconciled") if dictionary.get("IsReconciled") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        payment_id = dictionary.get("PaymentID") if dictionary.get("PaymentID") else None
        bank_account_number = dictionary.get("BankAccountNumber") if dictionary.get("BankAccountNumber") else None
        particulars = dictionary.get("Particulars") if dictionary.get("Particulars") else None
        details = dictionary.get("Details") if dictionary.get("Details") else None
        has_account = dictionary.get("HasAccount") if dictionary.get("HasAccount") else None
        has_validation_errors = dictionary.get("HasValidationErrors") if dictionary.get("HasValidationErrors") else None
        status_attribute_string = dictionary.get("StatusAttributeString") if dictionary.get("StatusAttributeString") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(invoice,
                   credit_note,
                   prepayment,
                   overpayment,
                   invoice_number,
                   credit_note_number,
                   account,
                   code,
                   date,
                   currency_rate,
                   amount,
                   reference,
                   is_reconciled,
                   status,
                   payment_id,
                   bank_account_number,
                   particulars,
                   details,
                   has_account,
                   has_validation_errors,
                   status_attribute_string,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'invoice={self.invoice!r}, '
                f'credit_note={self.credit_note!r}, '
                f'prepayment={self.prepayment!r}, '
                f'overpayment={self.overpayment!r}, '
                f'invoice_number={self.invoice_number!r}, '
                f'credit_note_number={self.credit_note_number!r}, '
                f'account={self.account!r}, '
                f'code={self.code!r}, '
                f'date={self.date!r}, '
                f'currency_rate={self.currency_rate!r}, '
                f'amount={self.amount!r}, '
                f'reference={self.reference!r}, '
                f'is_reconciled={self.is_reconciled!r}, '
                f'status={self.status!r}, '
                f'payment_id={self.payment_id!r}, '
                f'bank_account_number={self.bank_account_number!r}, '
                f'particulars={self.particulars!r}, '
                f'details={self.details!r}, '
                f'has_account={self.has_account!r}, '
                f'has_validation_errors={self.has_validation_errors!r}, '
                f'status_attribute_string={self.status_attribute_string!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'invoice={self.invoice!s}, '
                f'credit_note={self.credit_note!s}, '
                f'prepayment={self.prepayment!s}, '
                f'overpayment={self.overpayment!s}, '
                f'invoice_number={self.invoice_number!s}, '
                f'credit_note_number={self.credit_note_number!s}, '
                f'account={self.account!s}, '
                f'code={self.code!s}, '
                f'date={self.date!s}, '
                f'currency_rate={self.currency_rate!s}, '
                f'amount={self.amount!s}, '
                f'reference={self.reference!s}, '
                f'is_reconciled={self.is_reconciled!s}, '
                f'status={self.status!s}, '
                f'payment_id={self.payment_id!s}, '
                f'bank_account_number={self.bank_account_number!s}, '
                f'particulars={self.particulars!s}, '
                f'details={self.details!s}, '
                f'has_account={self.has_account!s}, '
                f'has_validation_errors={self.has_validation_errors!s}, '
                f'status_attribute_string={self.status_attribute_string!s}, '
                f'validation_errors={self.validation_errors!s})')
