# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.cells import Cells
from xero.models.row_type import RowType
from xero.models.title import Title


class Row1(object):

    """Implementation of the 'Row1' model.

    Attributes:
        row_type (RowType): The model property of type RowType.
        title (Title): The model property of type Title.
        cells (Cells): The model property of type Cells.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "row_type": 'RowType',
        "title": 'Title',
        "cells": 'Cells'
    }

    def __init__(self,
                 row_type=None,
                 title=None,
                 cells=None):
        """Constructor for the Row1 class"""

        # Initialize members of the class
        self.row_type = row_type 
        self.title = title 
        self.cells = cells 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        row_type = RowType.from_dictionary(dictionary.get('RowType')) if dictionary.get('RowType') else None
        title = Title.from_dictionary(dictionary.get('Title')) if dictionary.get('Title') else None
        cells = Cells.from_dictionary(dictionary.get('Cells')) if dictionary.get('Cells') else None
        # Return an object of this model
        return cls(row_type,
                   title,
                   cells)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'row_type={self.row_type!r}, '
                f'title={self.title!r}, '
                f'cells={self.cells!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'row_type={self.row_type!s}, '
                f'title={self.title!s}, '
                f'cells={self.cells!s})')
