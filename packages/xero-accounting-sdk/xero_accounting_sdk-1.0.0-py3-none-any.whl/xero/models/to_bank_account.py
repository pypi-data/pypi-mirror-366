# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.validation_error import ValidationError


class ToBankAccount(object):

    """Implementation of the 'ToBankAccount' model.

    Attributes:
        code (str): The model property of type str.
        name (str): The model property of type str.
        account_id (str): The model property of type str.
        mtype (str): The model property of type str.
        bank_account_number (str): The model property of type str.
        status (str): The model property of type str.
        description (str): The model property of type str.
        bank_account_type (str): The model property of type str.
        currency_code (str): The model property of type str.
        tax_type (str): The model property of type str.
        enable_payments_to_account (str): The model property of type str.
        show_in_expense_claims (str): The model property of type str.
        reporting_code (str): The model property of type str.
        add_to_watchlist (str): The model property of type str.
        validation_errors (List[ValidationError]): The model property of type
            List[ValidationError].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'Code',
        "name": 'Name',
        "account_id": 'AccountID',
        "mtype": 'Type',
        "bank_account_number": 'BankAccountNumber',
        "status": 'Status',
        "description": 'Description',
        "bank_account_type": 'BankAccountType',
        "currency_code": 'CurrencyCode',
        "tax_type": 'TaxType',
        "enable_payments_to_account": 'EnablePaymentsToAccount',
        "show_in_expense_claims": 'ShowInExpenseClaims',
        "reporting_code": 'ReportingCode',
        "add_to_watchlist": 'AddToWatchlist',
        "validation_errors": 'ValidationErrors'
    }

    def __init__(self,
                 code=None,
                 name=None,
                 account_id=None,
                 mtype=None,
                 bank_account_number=None,
                 status=None,
                 description=None,
                 bank_account_type=None,
                 currency_code=None,
                 tax_type=None,
                 enable_payments_to_account=None,
                 show_in_expense_claims=None,
                 reporting_code=None,
                 add_to_watchlist=None,
                 validation_errors=None):
        """Constructor for the ToBankAccount class"""

        # Initialize members of the class
        self.code = code 
        self.name = name 
        self.account_id = account_id 
        self.mtype = mtype 
        self.bank_account_number = bank_account_number 
        self.status = status 
        self.description = description 
        self.bank_account_type = bank_account_type 
        self.currency_code = currency_code 
        self.tax_type = tax_type 
        self.enable_payments_to_account = enable_payments_to_account 
        self.show_in_expense_claims = show_in_expense_claims 
        self.reporting_code = reporting_code 
        self.add_to_watchlist = add_to_watchlist 
        self.validation_errors = validation_errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("Code") if dictionary.get("Code") else None
        name = dictionary.get("Name") if dictionary.get("Name") else None
        account_id = dictionary.get("AccountID") if dictionary.get("AccountID") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        bank_account_number = dictionary.get("BankAccountNumber") if dictionary.get("BankAccountNumber") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        description = dictionary.get("Description") if dictionary.get("Description") else None
        bank_account_type = dictionary.get("BankAccountType") if dictionary.get("BankAccountType") else None
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else None
        tax_type = dictionary.get("TaxType") if dictionary.get("TaxType") else None
        enable_payments_to_account = dictionary.get("EnablePaymentsToAccount") if dictionary.get("EnablePaymentsToAccount") else None
        show_in_expense_claims = dictionary.get("ShowInExpenseClaims") if dictionary.get("ShowInExpenseClaims") else None
        reporting_code = dictionary.get("ReportingCode") if dictionary.get("ReportingCode") else None
        add_to_watchlist = dictionary.get("AddToWatchlist") if dictionary.get("AddToWatchlist") else None
        validation_errors = None
        if dictionary.get('ValidationErrors') is not None:
            validation_errors = [ValidationError.from_dictionary(x) for x in dictionary.get('ValidationErrors')]
        # Return an object of this model
        return cls(code,
                   name,
                   account_id,
                   mtype,
                   bank_account_number,
                   status,
                   description,
                   bank_account_type,
                   currency_code,
                   tax_type,
                   enable_payments_to_account,
                   show_in_expense_claims,
                   reporting_code,
                   add_to_watchlist,
                   validation_errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'name={self.name!r}, '
                f'account_id={self.account_id!r}, '
                f'mtype={self.mtype!r}, '
                f'bank_account_number={self.bank_account_number!r}, '
                f'status={self.status!r}, '
                f'description={self.description!r}, '
                f'bank_account_type={self.bank_account_type!r}, '
                f'currency_code={self.currency_code!r}, '
                f'tax_type={self.tax_type!r}, '
                f'enable_payments_to_account={self.enable_payments_to_account!r}, '
                f'show_in_expense_claims={self.show_in_expense_claims!r}, '
                f'reporting_code={self.reporting_code!r}, '
                f'add_to_watchlist={self.add_to_watchlist!r}, '
                f'validation_errors={self.validation_errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'name={self.name!s}, '
                f'account_id={self.account_id!s}, '
                f'mtype={self.mtype!s}, '
                f'bank_account_number={self.bank_account_number!s}, '
                f'status={self.status!s}, '
                f'description={self.description!s}, '
                f'bank_account_type={self.bank_account_type!s}, '
                f'currency_code={self.currency_code!s}, '
                f'tax_type={self.tax_type!s}, '
                f'enable_payments_to_account={self.enable_payments_to_account!s}, '
                f'show_in_expense_claims={self.show_in_expense_claims!s}, '
                f'reporting_code={self.reporting_code!s}, '
                f'add_to_watchlist={self.add_to_watchlist!s}, '
                f'validation_errors={self.validation_errors!s})')
