# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Attachment3(object):

    """Implementation of the 'Attachment3' model.

    Attributes:
        attachment_id (str): The model property of type str.
        file_name (str): The model property of type str.
        url (str): The model property of type str.
        mime_type (str): The model property of type str.
        content_length (str): The model property of type str.
        include_online (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "attachment_id": 'AttachmentID',
        "file_name": 'FileName',
        "url": 'Url',
        "mime_type": 'MimeType',
        "content_length": 'ContentLength',
        "include_online": 'IncludeOnline'
    }

    def __init__(self,
                 attachment_id=None,
                 file_name=None,
                 url=None,
                 mime_type=None,
                 content_length=None,
                 include_online=None):
        """Constructor for the Attachment3 class"""

        # Initialize members of the class
        self.attachment_id = attachment_id 
        self.file_name = file_name 
        self.url = url 
        self.mime_type = mime_type 
        self.content_length = content_length 
        self.include_online = include_online 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        attachment_id = dictionary.get("AttachmentID") if dictionary.get("AttachmentID") else None
        file_name = dictionary.get("FileName") if dictionary.get("FileName") else None
        url = dictionary.get("Url") if dictionary.get("Url") else None
        mime_type = dictionary.get("MimeType") if dictionary.get("MimeType") else None
        content_length = dictionary.get("ContentLength") if dictionary.get("ContentLength") else None
        include_online = dictionary.get("IncludeOnline") if dictionary.get("IncludeOnline") else None
        # Return an object of this model
        return cls(attachment_id,
                   file_name,
                   url,
                   mime_type,
                   content_length,
                   include_online)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'attachment_id={self.attachment_id!r}, '
                f'file_name={self.file_name!r}, '
                f'url={self.url!r}, '
                f'mime_type={self.mime_type!r}, '
                f'content_length={self.content_length!r}, '
                f'include_online={self.include_online!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'attachment_id={self.attachment_id!s}, '
                f'file_name={self.file_name!s}, '
                f'url={self.url!s}, '
                f'mime_type={self.mime_type!s}, '
                f'content_length={self.content_length!s}, '
                f'include_online={self.include_online!s})')
