# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class PurchaseDetails(object):

    """Implementation of the 'PurchaseDetails' model.

    Attributes:
        unit_price (str): The model property of type str.
        account_code (str): The model property of type str.
        cogs_account_code (str): The model property of type str.
        tax_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "unit_price": 'UnitPrice',
        "account_code": 'AccountCode',
        "cogs_account_code": 'COGSAccountCode',
        "tax_type": 'TaxType'
    }

    def __init__(self,
                 unit_price=None,
                 account_code=None,
                 cogs_account_code=None,
                 tax_type=None):
        """Constructor for the PurchaseDetails class"""

        # Initialize members of the class
        self.unit_price = unit_price 
        self.account_code = account_code 
        self.cogs_account_code = cogs_account_code 
        self.tax_type = tax_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        unit_price = dictionary.get("UnitPrice") if dictionary.get("UnitPrice") else None
        account_code = dictionary.get("AccountCode") if dictionary.get("AccountCode") else None
        cogs_account_code = dictionary.get("COGSAccountCode") if dictionary.get("COGSAccountCode") else None
        tax_type = dictionary.get("TaxType") if dictionary.get("TaxType") else None
        # Return an object of this model
        return cls(unit_price,
                   account_code,
                   cogs_account_code,
                   tax_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'unit_price={self.unit_price!r}, '
                f'account_code={self.account_code!r}, '
                f'cogs_account_code={self.cogs_account_code!r}, '
                f'tax_type={self.tax_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'unit_price={self.unit_price!s}, '
                f'account_code={self.account_code!s}, '
                f'cogs_account_code={self.cogs_account_code!s}, '
                f'tax_type={self.tax_type!s})')
