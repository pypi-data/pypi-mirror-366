# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BatchPayments(object):

    """Implementation of the 'BatchPayments' model.

    Attributes:
        bank_account_number (str): The model property of type str.
        bank_account_name (str): The model property of type str.
        details (str): The model property of type str.
        code (str): The model property of type str.
        reference (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_account_number": 'BankAccountNumber',
        "bank_account_name": 'BankAccountName',
        "details": 'Details',
        "code": 'Code',
        "reference": 'Reference'
    }

    def __init__(self,
                 bank_account_number=None,
                 bank_account_name=None,
                 details=None,
                 code=None,
                 reference=None):
        """Constructor for the BatchPayments class"""

        # Initialize members of the class
        self.bank_account_number = bank_account_number 
        self.bank_account_name = bank_account_name 
        self.details = details 
        self.code = code 
        self.reference = reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bank_account_number = dictionary.get("BankAccountNumber") if dictionary.get("BankAccountNumber") else None
        bank_account_name = dictionary.get("BankAccountName") if dictionary.get("BankAccountName") else None
        details = dictionary.get("Details") if dictionary.get("Details") else None
        code = dictionary.get("Code") if dictionary.get("Code") else None
        reference = dictionary.get("Reference") if dictionary.get("Reference") else None
        # Return an object of this model
        return cls(bank_account_number,
                   bank_account_name,
                   details,
                   code,
                   reference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bank_account_number={self.bank_account_number!r}, '
                f'bank_account_name={self.bank_account_name!r}, '
                f'details={self.details!r}, '
                f'code={self.code!r}, '
                f'reference={self.reference!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bank_account_number={self.bank_account_number!s}, '
                f'bank_account_name={self.bank_account_name!s}, '
                f'details={self.details!s}, '
                f'code={self.code!s}, '
                f'reference={self.reference!s})')
