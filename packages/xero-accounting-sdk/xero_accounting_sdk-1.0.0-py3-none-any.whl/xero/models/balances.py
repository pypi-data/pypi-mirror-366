# -*- coding: utf-8 -*-

"""
xero

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from xero.models.accounts_payable import AccountsPayable
from xero.models.accounts_receivable import AccountsReceivable


class Balances(object):

    """Implementation of the 'Balances' model.

    Attributes:
        accounts_receivable (AccountsReceivable): The model property of type
            AccountsReceivable.
        accounts_payable (AccountsPayable): The model property of type
            AccountsPayable.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accounts_receivable": 'AccountsReceivable',
        "accounts_payable": 'AccountsPayable'
    }

    def __init__(self,
                 accounts_receivable=None,
                 accounts_payable=None):
        """Constructor for the Balances class"""

        # Initialize members of the class
        self.accounts_receivable = accounts_receivable 
        self.accounts_payable = accounts_payable 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accounts_receivable = AccountsReceivable.from_dictionary(dictionary.get('AccountsReceivable')) if dictionary.get('AccountsReceivable') else None
        accounts_payable = AccountsPayable.from_dictionary(dictionary.get('AccountsPayable')) if dictionary.get('AccountsPayable') else None
        # Return an object of this model
        return cls(accounts_receivable,
                   accounts_payable)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accounts_receivable={self.accounts_receivable!r}, '
                f'accounts_payable={self.accounts_payable!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accounts_receivable={self.accounts_receivable!s}, '
                f'accounts_payable={self.accounts_payable!s})')
