import typer
from sglabtools import run_pipeline

app = typer.Typer(help="""
SGLab-tools üß¨

Un outil professionnel de comparaison de g√©nomes permettant :
- Alignement pair-√†-pair de g√©nomes avec minimap2
- Extraction et classification des diff√©rences (SNPs, InDels, gaps, N)
- Application de masques √† partir de fichiers BED
- Comptage des sc√©narios de variation
- Fusion et comparaison multi-g√©nomes
- Enrichissement des r√©sultats et visualisation graphique

D√©velopp√© par Etienne Ntumba Kabongo (Universit√© de Montr√©al)
Sous la direction de :
- Prof. Dr. Simon Grandjean Lapierre
- Prof. Dr. Martin Smith

Exemples d‚Äôusage :
$ sglab run sample.txt                            # Ex√©cute tout le pipeline
$ sglab count --input fichier.tsv                 # Compte les sc√©narios sur un fichier TSV
$ sglab mask --input fichier.tsv --ref REF.bed --query L1.bed
$ sglab merge                                     # Fusionne les fichiers de sc√©narios
$ sglab plot --input fichier.csv --output-prefix nom --fig bar,heat   # Visualisation personnalis√©e
""")

@app.command("run")
def run_pipeline_cmd(sample_file: str = typer.Argument(..., help="Fichier TSV contenant les paires Ref / Lx")):
    """Lancer le pipeline complet (alignement + transformation + masque + comptage + fusion)"""
    run_pipeline.run_all(sample_file)

@app.command("mask")
def mask_cmd(
    input: str = typer.Option(..., "--input", help="Fichier TSV des diff√©rences initiales"),
    ref: str = typer.Option(..., "--ref", help="Fichier BED de la souche de r√©f√©rence"),
    query: str = typer.Option(..., "--query", help="Fichier BED de la souche compar√©e")
):
    """Appliquer les masques BED √† un fichier de diff√©rences"""
    from sglabtools.mask import apply_mask
    apply_mask(input, ref, query)

@app.command("count")
def count_cmd(input: str = typer.Option(..., "--input", help="Fichier TSV de diff√©rences masqu√©es")):
    """Compter les sc√©narios de variation √† partir d‚Äôun fichier TSV"""
    from sglabtools.count import count_scenarios
    count_scenarios(input)

@app.command("merge")
def merge_cmd():
    """Fusionner tous les fichiers de sc√©narios en un seul tableau comparatif"""
    from sglabtools.merge import merge_counts
    merge_counts()

@app.command("plot")
def plot_cmd(
    input: str = typer.Option("combined_scenarios_augmented.csv", "--input", help="Fichier CSV en entr√©e (par d√©faut: combined_scenarios_augmented.csv)"),
    output_prefix: str = typer.Option("scenarios", "--output-prefix", help="Pr√©fixe des fichiers de sortie (.csv, .png, etc.)"),
    fig: str = typer.Option("bar,heat", "--fig", help="Type de figures √† g√©n√©rer: bar, heat ou les deux (ex: --fig bar,heat)")
):
    """
    Enrichit la table de sc√©narios fusionn√©e :
    - Ajoute les colonnes 'Description' et 'Total'
    - Exporte les fichiers .csv / .tsv / .xlsx
    - G√©n√®re un barplot comparatif et/ou une heatmap de divergence
    """
    from sglabtools.augment import augment_table
    from sglabtools.plot import plot_scenarios

    df = augment_table(input_file=input, output_prefix=output_prefix)
    plot_scenarios(input_file=f"{output_prefix}.csv", output_prefix=output_prefix, fig_types=fig.split(","))

if __name__ == "__main__":
    app()
