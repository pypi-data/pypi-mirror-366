[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quanta-thread"
version = "1.0.1"
description = "Quantum-Inspired Computing Framework for Classical Hardware"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "QuantaThread Team", email = "contact@quantathread.com"}
]
maintainers = [
    {name = "QuantaThread Team", email = "contact@quantathread.com"}
]
keywords = [
    "quantum computing",
    "quantum algorithms", 
    "machine learning",
    "artificial intelligence",
    "optimization",
    "parallel computing",
    "threading"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "psutil>=5.8.0",
    "requests>=2.28.0",
    "tqdm>=4.64.0",
    "colorama>=0.4.5",
    "click>=8.1.0",
    "rich>=12.0.0",
    "networkx>=2.8.0",
    "asyncio-mqtt>=0.11.0",
    "pandas>=1.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
ml = [
    "tensorflow>=2.8.0",
    "torch>=1.12.0",
    "scikit-learn>=1.1.0",
]
quantum = [
    "qiskit>=0.40.0",
    "cirq>=1.0.0",
    "pennylane>=0.20.0",
]
ai = [
    "openai>=0.27.0",
    "google-generativeai>=0.3.0",
    "anthropic>=0.5.0",
]
viz = [
    "plotly>=5.10.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipywidgets>=7.7.0",
]
all = [
    "tensorflow>=2.8.0",
    "torch>=1.12.0",
    "scikit-learn>=1.1.0",
    "qiskit>=0.40.0",
    "cirq>=1.0.0",
    "pennylane>=0.20.0",
    "openai>=0.27.0",
    "google-generativeai>=0.3.0",
    "anthropic>=0.5.0",
    "plotly>=5.10.0",
    "jupyter>=1.0.0",
    "ipywidgets>=7.7.0",
    "networkx>=2.8.0",
    "asyncio-mqtt>=0.11.0",
    "pandas>=1.5.0",
    "rdkit-pypi>=2022.9.1",
    "mendeleev>=0.8.0",
    "yfinance>=0.2.0",
    "scipy>=1.7.0",
    "numba>=0.56.0",
]

[project.urls]
Homepage = "https://github.com/quantathread/quanta-thread"
Documentation = "https://quantathread.readthedocs.io/"
Repository = "https://github.com/quantathread/quanta-thread"
"Bug Tracker" = "https://github.com/quantathread/quanta-thread/issues"
"Source Code" = "https://github.com/quantathread/quanta-thread"

[project.scripts]
quanta-thread = "quanta_thread.cli.main:main"

[tool.setuptools.packages.find]
include = ["quanta_thread*"]

[tool.setuptools.package-data]
quanta_thread = ["examples/*.py", "config/*.yaml", "config/*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=quanta_thread",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["quanta_thread"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 