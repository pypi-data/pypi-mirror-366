# Copyright (C) 2021 Hyunwoong Ko <kevin.brain@kakaobrain.com> and Sang Park <sang.park@dnotitia.com>
# All rights reserved.


"""
Sets of characters, contain method in set is much faster than list
"""
import re

# 0 ~ 9
numbers = set([str(_) for _ in range(0, 10)])

# a-z
lower_alphabets = set([chr(_) for _ in range(ord("a"), ord("z") + 1)])

# A-Z
upper_alphabets = set([_.upper() for _ in lower_alphabets])

# a-z|A-Z
alphabets = set()
alphabets.update(lower_alphabets)
alphabets.update(upper_alphabets)

# „Ñ±-„Öé
jaum = set([chr(_) for _ in range(ord("„Ñ±"), ord("„Öé") + 1)])

# „Öè-„Ö°
moum = set([chr(_) for _ in range(ord("„Öè"), ord("„Ö°") + 1)])

# „Ñ±-„Öé|„Öè-„Ö°
jamo = set()
jamo.update(jaum)
jamo.update(moum)

# brackets | `<`, `>` Ï†úÏô∏ (ÏàòÌïôÍ∏∞Ìò∏, ÌôîÏÇ¥ÌëúÎ°ú Ïì∞ÏûÑ)
brackets = {
    ")",
    "Ôºâ",
    "„Äâ",
    ">",
    "„Äã",
    "]",
    "ÔºΩ",
    "„Äï",
    "„Äë",
    "}",
    "ÔΩù",
    "„Äè",
    "„Äç",
    "(",
    "Ôºà",
    "„Äà",
    "<",
    "„Ää",
    "[",
    "Ôºª",
    "„Äî",
    "„Äê",
    "{",
    "ÔΩõ",
    "„Äå",
    "„Äé",
}

# open -> close
bracket_open_to_close = {
    "(": ")",
    "Ôºà": "Ôºâ",
    "„Äà": "„Äâ",
    "<": ">",
    "„Ää": "„Äã",
    "[": "]",
    "Ôºª": "ÔºΩ",
    "„Äî": "„Äï",
    "„Äê": "„Äë",
    "{": "}",
    "ÔΩõ": "ÔΩù",
    "„Äå": "„Äç",
    "„Äé": "„Äè",
}

# close -> open
bracket_close_to_open = {v: k for k, v in bracket_open_to_close.items()}

# doubles
double_quotes = {'"', "‚Äú", "‚Äù", "‚Ä≥"}

# doubles wo direction
double_quotes_wo_direction = {'"', "‚Ä≥"}

# singles
single_quotes = {"'", "‚Äò", "‚Äô", "`"}

# singles wo direction
single_quotes_wo_direction = {"'", "`"}

# open to close
double_quotes_open_to_close = {"‚Äú": "‚Äù", '"': '"', "‚Ä≥": "‚Ä≥"}

# close to open
double_quotes_close_to_open = {v: k for k, v in double_quotes_open_to_close.items()}

# open to close
single_quotes_open_to_close = {"‚Äò": "‚Äô", "'": "'", "`": "`"}

# close to open
single_quotes_close_to_open = {v: k for k, v in single_quotes_open_to_close.items()}

# open to close
quotes_open_to_close = dict()
quotes_open_to_close.update(single_quotes_open_to_close)
quotes_open_to_close.update(double_quotes_open_to_close)

# close to open
quotes_close_to_open = dict()
quotes_close_to_open.update(single_quotes_close_to_open)
quotes_close_to_open.update(double_quotes_close_to_open)

# quotes
quotes = set()
quotes.update(single_quotes)
quotes.update(double_quotes)

# quotes or brackets
quotes_or_brackets = set()
quotes_or_brackets.update(quotes)
quotes_or_brackets.update(brackets)

# opened brackets or quotes
opened_quotes_or_brackets = set(
    [
        _
        for _ in list(bracket_open_to_close.keys())
        + list(single_quotes_open_to_close.keys())
        + list(double_quotes_open_to_close.keys())
        if _ not in ['"', "'", "`"]
    ]
)

# closed brackets or quotes
closed_quotes_or_brackets = set(
    [
        _
        for _ in list(bracket_close_to_open.keys())
        + list(single_quotes_close_to_open.keys())
        + list(double_quotes_close_to_open.keys())
        if _ not in ['"', "'", "`"]
    ]
)

# open to close
quotes_or_brackets_open_to_close = dict()
quotes_or_brackets_open_to_close.update(quotes_open_to_close)
quotes_or_brackets_open_to_close.update(bracket_open_to_close)

# close to open
quotes_or_brackets_close_to_open = dict()
quotes_or_brackets_close_to_open.update(quotes_close_to_open)
quotes_or_brackets_close_to_open.update(bracket_close_to_open)

# special symbols
special_symbols_for_split = "„àú*‚àó¬∂¬ß‚Äª‚óã‚óè‚óé‚óá‚óÜ‚ñ°‚ñ†‚ñ≥‚ñ≤‚ñΩ‚ñº‚Üí‚Üë‚Üì‚Üî‚óÅ‚óÄ‚ñ∑‚ñ∂‚ô§‚ô†‚ôß‚ô£‚äô‚óà‚ñ£‚óê‚óë‚ñí‚ñ§‚ñ•‚ñ®‚ñß‚ñ¶‚ñ©‚ô®‚òè‚òé‚òû‚Üï‚Üó‚Üô‚Üñ‚Üò¬™"
special_symbols_for_suffix = "‚Üê‚òú„èÇ„èò‚Ñ°"
daggers = """‚Ä†‚Ä°‚∏∂‚∏∑‚∏∏‚πã‚Äñ*‚àó"""
spaces = " \n\t\f\v\r\u200b\u200c\u2060\ufeff"

_url_prefix = "https|http|mailto|ftp"
_url_suffix = (
    "com|net|org|edu|game|ebiz|club|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi"
    "|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd"
    "|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx"
    "|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm"
    "|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki"
    "|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms"
    "|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw"
    "|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf"
    "|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za"
    "|zm|zw|mp3|mp4|avi|html|idv|jpg|bmp|png|gif|htm|cdn|media"
)
url_pattern = re.compile(
    rf"""(?i)\b((?:{_url_prefix}?:(?:/{{1,3}}|[a-z0-9%])|[a-z0-9.\-]+[.](?:{_url_suffix})/)(?:[^\s()<>{{}}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{{}};:'".,<>?¬´¬ª‚Äú‚Äù‚Äò‚Äô])|(?:(?<!@)[a-z0-9]+(?:[.\-][a-z0-9]+)*[.](?:{_url_suffix})/?(?!@)))""",
)
email_pattern = re.compile(
    r"[a-z0-9.\-+_]+@[a-z0-9.\-+_]+\.[a-z]+|[a-z0-9.\-+_]+@[a-z0-9.\-+_]+\.[a-z]+\.[a-z]"
)

whitespaces = [" ", "\n", "\t", "\v", "\f", "\r"]
whitespaces_wo_space = ["\n", "\t", "\v", "\f", "\r"]

sf_exception = [
    "no",
    "No",
    "pp",
    "PP",
    "vol",
    "Vol",
    "vols",
    "Vols",
    "al",
    "ed",
    "Ed",
    "Eds",
    "trans",
    "Trans",
    "rev",
    "Rev",
    "p",
    "P",
    "n.p",
    "N.P",
    "N.p",
    "n.d",
    "N.D",
    "N.d",
    "page",
    "Page",
    "para",
    "Para",
    "comp",
    "Comp",
    "Capt",
    "capt",
    "dept",
    "Dept",
    "Mr",
    "mr",
    "Miss",
    "Mrs",
    "mrs",
    "Ms",
    "ms",
    "Dr",
    "dr",
    "Prof",
    "prof",
    "Rev",
    "rev",
    "St",
    "st",
    "Co",
    "co",
    "MM",
    "mm",
    "Messrs",
    "messrs",
    "Mlle",
    "mlle",
    "Mme",
    "mme",
    "def",
    "Def",
    "viz",
    "Viz",
]

for i in range(0, 10):
    sf_exception += [
        f"{i}Ìï≠",
        f"{i}Ï°∞",
        f"{i}Ìò∏",
        f"{i}Ï†à",
        f"{i}Î™©",
        f"{i}Í∂å",
        f"{i}Ï™Ω",
        f"{i}Ïû•",
        f"{i}",
    ]

sf_exception += [
    c
    for c in list(sorted(lower_alphabets))[:10]
    + list(sorted(upper_alphabets))[:10]
    + ["„Ñ±", "„Ñ¥", "„Ñ∑", "„Ñπ", "„ÖÅ", "„ÖÇ", "„ÖÖ", "„Öá", "„Öà", "„Öä", "„Öã", "„Öå", "„Öç", "„Öé"]
]

sf_exception = [
    f" {w}{s.replace(' ', '')}" if " " in s else f"{w}{s}"
    for s in sf_exception
    for w in whitespaces
]


# apostrophe: I`m, You‚Äôre, ...
alphabet_with_quotes = {}
for alpha in alphabets:
    alphabet_with_quotes[alpha] = {
        f"{alpha}{q}{apo}" for apo in alphabets for q in ["'", "‚Äô", "`"]
    }

backup_normal = {
    ":)",
    ":(",
    ":'(",
    "O:)",
    "&)",
    ">:(",
    "3:)",
    '<(")',
    ":-)",
    ":-(",
    "Í¥ÄÏïºÏú†Ï†Å",
    "ÎùºÏöî Î∞îÏòàÏπ¥ÎÖ∏",
    "ÏïåÎ¶º Ï∞®Îã®",
    "ÏïåÎ¶º ÏàòÏã†",
    "ÏïåÎ¶º Î¨∏Ïûê",
    "ÏóêÏä§ÌÉÄÎîîÏò§ ÎπÑÏÑºÌÖå",
    "George D. Beauchamp",
    "Monkey D. Luffy",
    "Î™ΩÌÇ§ D. Î£®Ìîº",
    "'N'",
    "'n'",
    "N' ",
    "n' ",
}

circle_bracket_charaters = [
    "‚ì™",
    "‚ë†",
    "‚ë°",
    "‚ë¢",
    "‚ë£",
    "‚ë§",
    "‚ë•",
    "‚ë¶",
    "‚ëß",
    "‚ë®",
    "‚ë©",
    "‚ë™",
    "‚ë´",
    "‚ë¨",
    "‚ë≠",
    "‚ëÆ",
    "‚ëØ",
    "‚ë∞",
    "‚ë±",
    "‚ë≤",
    "‚ë≥",
    "„âë",
    "„âí",
    "„âì",
    "„âî",
    "„âï",
    "„âñ",
    "„âó",
    "„âò",
    "„âô",
    "„âö",
    "„âõ",
    "„âú",
    "„âù",
    "„âû",
    "„âü",
    "„ä±",
    "„ä≤",
    "„ä≥",
    "„ä¥",
    "„äµ",
    "„ä∂",
    "„ä∑",
    "„ä∏",
    "„äπ",
    "„ä∫",
    "„äª",
    "„äº",
    "„äΩ",
    "„äæ",
    "„äø",
    "‚ìø",
    "‚ù∂",
    "‚ù∑",
    "‚ù∏",
    "‚ùπ",
    "‚ù∫",
    "‚ùª",
    "‚ùº",
    "‚ùΩ",
    "‚ùæ",
    "‚ùø",
    "‚ì´",
    "‚ì¨",
    "‚ì≠",
    "‚ìÆ",
    "‚ìØ",
    "‚ì∞",
    "‚ì±",
    "‚ì≤",
    "‚ì≥",
    "‚ì¥",
    "‚ë¥",
    "‚ëµ",
    "‚ë∂",
    "‚ë∑",
    "‚ë∏",
    "‚ëπ",
    "‚ë∫",
    "‚ëª",
    "‚ëº",
    "‚ëΩ",
    "‚ëæ",
    "‚ëø",
    "‚íÄ",
    "‚íÅ",
    "‚íÇ",
    "‚íÉ",
    "‚íÑ",
    "‚íÖ",
    "‚íÜ",
    "‚íá",
    "‚íú",
    "‚íù",
    "‚íû",
    "‚íü",
    "‚í†",
    "‚í°",
    "‚í¢",
    "‚í£",
    "‚í§",
    "‚í•",
    "‚í¶",
    "‚íß",
    "‚í®",
    "‚í©",
    "‚í™",
    "‚í´",
    "‚í¨",
    "‚í≠",
    "‚íÆ",
    "‚íØ",
    "‚í∞",
    "‚í±",
    "‚í≤",
    "‚í≥",
    "‚í¥",
    "‚íµ",
    "‚Ö†",
    "‚Ö°",
    "‚Ö¢",
    "‚Ö£",
    "‚Ö§",
    "‚Ö•",
    "‚Ö¶",
    "‚Öß",
    "‚Ö®",
    "‚Ö©",
    "‚Ö™",
    "‚Ö´",
    "‚Ö∞",
    "‚Ö±",
    "‚Ö≤",
    "‚Ö≥",
    "‚Ö¥",
    "‚Öµ",
    "‚Ö∂",
    "‚Ö∑",
    "‚Ö∏",
    "‚Öπ",
    "‚Ö∫",
    "‚Öª",
    "‚òê",
    "‚òë",
    "‚òí",
    "‚í∂",
    "‚í∑",
    "‚í∏",
    "‚íπ",
    "‚í∫",
    "‚íª",
    "‚íº",
    "‚íΩ",
    "‚íæ",
    "‚ìè",
    "‚ìÄ",
    "‚ìÅ",
    "‚ìÇ",
    "‚ìÉ",
    "‚ìÑ",
    "‚ìÖ",
    "‚ìÜ",
    "‚ìá",
    "‚ìà",
    "‚ìâ",
    "‚ìä",
    "‚ìã",
    "‚ìå",
    "‚ìç",
    "‚ìé",
    "‚ìê",
    "‚ìë",
    "‚ìí",
    "‚ìì",
    "‚ìî",
    "‚ìï",
    "‚ìñ",
    "‚ìó",
    "‚ìò",
    "‚ìô",
    "‚ìö",
    "‚ìõ",
    "‚ìú",
    "‚ìù",
    "‚ìû",
    "‚ìü",
    "‚ì†",
    "‚ì°",
    "‚ì¢",
    "‚ì£",
    "‚ì§",
    "‚ì•",
    "‚ì¶",
    "‚ìß",
    "‚ì®",
    "‚ì©",
    "üÖê",
    "üÖë",
    "üÖí",
    "üÖì",
    "üÖî",
    "üÖï",
    "üÖñ",
    "üÖó",
    "üÖò",
    "üÖô",
    "üÖö",
    "üÖõ",
    "üÖú",
    "üÖù",
    "üÖû",
    "üÖü",
    "üÖ†",
    "üÖ°",
    "üÖ¢",
    "üÖ£",
    "üÖ§",
    "üÖ•",
    "üÖ¶",
    "üÖß",
    "üÖ®",
    "üÖ©",
    "„â†",
    "„â°",
    "„â¢",
    "„â£",
    "„â§",
    "„â•",
    "„â¶",
    "„âß",
    "„â®",
    "„â©",
    "„â™",
    "„â´",
    "„â¨",
    "„â≠",
    "„âÆ",
    "„âØ",
    "„â∞",
    "„â±",
    "„â≤",
    "„â≥",
    "„â¥",
    "„âµ",
    "„â∂",
    "„â∑",
    "„â∏",
    "„âπ",
    "„â∫",
    "„âª",
    "‚ìµ",
    "‚ì∂",
    "‚ì∑",
    "‚ì∏",
    "‚ìπ",
    "‚ì∫",
    "‚ìª",
    "‚ìº",
    "‚ìΩ",
    "‚ìæ",
]

not_endpoint = [",", ":", "\u200b"] + list(quotes_or_brackets) + ["<", ">"]