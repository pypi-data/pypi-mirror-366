# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .list_models_response_data_item_capabilities_item import ListModelsResponseDataItemCapabilitiesItem
from .list_models_response_data_item_openpipe import ListModelsResponseDataItemOpenpipe
from .list_models_response_data_item_pricing import ListModelsResponseDataItemPricing

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ListModelsResponseDataItem(pydantic.BaseModel):
    id: str
    name: str
    object: typing_extensions.Literal["model"]
    description: typing.Optional[str]
    created: str
    updated: str
    openpipe: ListModelsResponseDataItemOpenpipe
    context_window: float = pydantic.Field(alias="contextWindow")
    max_completion_tokens: float = pydantic.Field(alias="maxCompletionTokens")
    capabilities: typing.List[ListModelsResponseDataItemCapabilitiesItem]
    pricing: ListModelsResponseDataItemPricing
    owned_by: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
