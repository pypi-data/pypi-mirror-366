# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .get_criterion_judgement_request_input_messages_item import GetCriterionJudgementRequestInputMessagesItem
from .get_criterion_judgement_request_input_tool_choice import GetCriterionJudgementRequestInputToolChoice
from .get_criterion_judgement_request_input_tools_item import GetCriterionJudgementRequestInputToolsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class GetCriterionJudgementRequestInput(pydantic.BaseModel):
    messages: typing.List[GetCriterionJudgementRequestInputMessagesItem] = pydantic.Field(
        description="All messages sent to the model when generating the output."
    )
    tool_choice: typing.Optional[GetCriterionJudgementRequestInputToolChoice] = pydantic.Field(
        description="The tool choice to use when generating the output, if any."
    )
    tools: typing.Optional[typing.List[GetCriterionJudgementRequestInputToolsItem]] = pydantic.Field(
        description="The tools available to the model when generating the output, if any."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
