# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import typing_extensions

from .create_model_request_training_config_gemini import CreateModelRequestTrainingConfigGemini
from .create_model_request_training_config_openai import CreateModelRequestTrainingConfigOpenai
from .create_model_request_training_config_openpipe import CreateModelRequestTrainingConfigOpenpipe
from .create_model_request_training_config_openpipe_reward import CreateModelRequestTrainingConfigOpenpipeReward


class CreateModelRequestTrainingConfig_Openpipe(CreateModelRequestTrainingConfigOpenpipe):
    provider: typing_extensions.Literal["openpipe"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class CreateModelRequestTrainingConfig_OpenpipeReward(CreateModelRequestTrainingConfigOpenpipeReward):
    provider: typing_extensions.Literal["openpipeReward"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class CreateModelRequestTrainingConfig_Openai(CreateModelRequestTrainingConfigOpenai):
    provider: typing_extensions.Literal["openai"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class CreateModelRequestTrainingConfig_Gemini(CreateModelRequestTrainingConfigGemini):
    provider: typing_extensions.Literal["gemini"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


CreateModelRequestTrainingConfig = typing.Union[
    CreateModelRequestTrainingConfig_Openpipe,
    CreateModelRequestTrainingConfig_OpenpipeReward,
    CreateModelRequestTrainingConfig_Openai,
    CreateModelRequestTrainingConfig_Gemini,
]
