# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_model_request_training_config_openai_base_model import CreateModelRequestTrainingConfigOpenaiBaseModel
from .create_model_request_training_config_openai_hyperparameters import (
    CreateModelRequestTrainingConfigOpenaiHyperparameters,
)
from .create_model_request_training_config_openai_preference_hyperparameters import (
    CreateModelRequestTrainingConfigOpenaiPreferenceHyperparameters,
)
from .create_model_request_training_config_openai_sft_hyperparameters import (
    CreateModelRequestTrainingConfigOpenaiSftHyperparameters,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateModelRequestTrainingConfigOpenai(pydantic.BaseModel):
    base_model: CreateModelRequestTrainingConfigOpenaiBaseModel = pydantic.Field(alias="baseModel")
    enable_sft: typing.Optional[bool] = pydantic.Field(
        description="Whether to enable SFT training. If true, the model will be trained using SFT. Can be used in conjunction with DPO training."
    )
    enable_preference_tuning: typing.Optional[bool] = pydantic.Field(
        description="Whether to enable DPO training. If true, the model will be trained using DPO. Can be used in conjunction with SFT training."
    )
    sft_hyperparameters: typing.Optional[CreateModelRequestTrainingConfigOpenaiSftHyperparameters] = pydantic.Field(
        description="Hyperparameters for SFT training job. Ensure `enable_sft` is true. If no SFT hyperparameters are provided, default values will be used."
    )
    preference_hyperparameters: typing.Optional[
        CreateModelRequestTrainingConfigOpenaiPreferenceHyperparameters
    ] = pydantic.Field(
        description="Hyperparameters for DPO training job. Ensure `enable_preference_tuning` is true. If no preference hyperparameters are provided, default values will be used."
    )
    hyperparameters: typing.Optional[CreateModelRequestTrainingConfigOpenaiHyperparameters] = pydantic.Field(
        description="DEPRECATED: Use the `sft_hyperparameters` and `preference_hyperparameters` fields instead."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
