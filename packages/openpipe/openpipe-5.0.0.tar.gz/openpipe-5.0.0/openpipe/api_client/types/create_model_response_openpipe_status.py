# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CreateModelResponseOpenpipeStatus(str, enum.Enum):
    PENDING = "PENDING"
    TRAINING = "TRAINING"
    DEPLOYED = "DEPLOYED"
    ERROR = "ERROR"
    DEPRECATED = "DEPRECATED"
    PENDING_DEPRECATION = "PENDING_DEPRECATION"
    QUEUED = "QUEUED"
    PROVISIONING = "PROVISIONING"

    def visit(
        self,
        pending: typing.Callable[[], T_Result],
        training: typing.Callable[[], T_Result],
        deployed: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        deprecated: typing.Callable[[], T_Result],
        pending_deprecation: typing.Callable[[], T_Result],
        queued: typing.Callable[[], T_Result],
        provisioning: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CreateModelResponseOpenpipeStatus.PENDING:
            return pending()
        if self is CreateModelResponseOpenpipeStatus.TRAINING:
            return training()
        if self is CreateModelResponseOpenpipeStatus.DEPLOYED:
            return deployed()
        if self is CreateModelResponseOpenpipeStatus.ERROR:
            return error()
        if self is CreateModelResponseOpenpipeStatus.DEPRECATED:
            return deprecated()
        if self is CreateModelResponseOpenpipeStatus.PENDING_DEPRECATION:
            return pending_deprecation()
        if self is CreateModelResponseOpenpipeStatus.QUEUED:
            return queued()
        if self is CreateModelResponseOpenpipeStatus.PROVISIONING:
            return provisioning()
