# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_model_request_training_config_openpipe_hyperparameters_batch_size import (
    CreateModelRequestTrainingConfigOpenpipeHyperparametersBatchSize,
)
from .create_model_request_training_config_openpipe_hyperparameters_preference_tuning_variant import (
    CreateModelRequestTrainingConfigOpenpipeHyperparametersPreferenceTuningVariant,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateModelRequestTrainingConfigOpenpipeHyperparameters(pydantic.BaseModel):
    """
    DEPRECATED: Use the `sft_hyperparameters` and `preference_hyperparameters` fields instead.
    """

    is_sft_enabled: typing.Optional[bool]
    batch_size: typing.Optional[CreateModelRequestTrainingConfigOpenpipeHyperparametersBatchSize]
    learning_rate_multiplier: typing.Optional[float]
    num_epochs: typing.Optional[float]
    is_preference_tuning_enabled: typing.Optional[bool]
    preference_tuning_variant: typing.Optional[
        CreateModelRequestTrainingConfigOpenpipeHyperparametersPreferenceTuningVariant
    ]
    preference_tuning_learning_rate_multiplier: typing.Optional[float]
    preference_tuning_num_epochs: typing.Optional[float]
    preference_tuning_training_beta: typing.Optional[float]
    preference_tuning_adapter_weight: typing.Optional[float]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
