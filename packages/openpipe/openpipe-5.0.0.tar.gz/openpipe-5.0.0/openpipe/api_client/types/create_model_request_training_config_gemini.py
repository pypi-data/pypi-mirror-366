# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_model_request_training_config_gemini_base_model import CreateModelRequestTrainingConfigGeminiBaseModel
from .create_model_request_training_config_gemini_hyperparameters import (
    CreateModelRequestTrainingConfigGeminiHyperparameters,
)
from .create_model_request_training_config_gemini_sft_hyperparameters import (
    CreateModelRequestTrainingConfigGeminiSftHyperparameters,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateModelRequestTrainingConfigGemini(pydantic.BaseModel):
    base_model: CreateModelRequestTrainingConfigGeminiBaseModel = pydantic.Field(alias="baseModel")
    sft_hyperparameters: typing.Optional[CreateModelRequestTrainingConfigGeminiSftHyperparameters] = pydantic.Field(
        description="Hyperparameters for SFT training job. If no SFT hyperparameters are provided, default values will be used."
    )
    hyperparameters: typing.Optional[CreateModelRequestTrainingConfigGeminiHyperparameters] = pydantic.Field(
        description="DEPRECATED: Use the `sft_hyperparameters` field instead."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
