# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_chat_completion_response_choices_usage_completion_tokens_details import (
    CreateChatCompletionResponseChoicesUsageCompletionTokensDetails,
)
from .create_chat_completion_response_choices_usage_criteria_value import (
    CreateChatCompletionResponseChoicesUsageCriteriaValue,
)
from .create_chat_completion_response_choices_usage_prompt_tokens_details import (
    CreateChatCompletionResponseChoicesUsagePromptTokensDetails,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateChatCompletionResponseChoicesUsage(pydantic.BaseModel):
    prompt_tokens: float
    completion_tokens: float
    total_tokens: float
    prompt_cache_hit_tokens: typing.Optional[float]
    prompt_cache_miss_tokens: typing.Optional[float]
    completion_tokens_details: typing.Optional[CreateChatCompletionResponseChoicesUsageCompletionTokensDetails]
    prompt_tokens_details: typing.Optional[CreateChatCompletionResponseChoicesUsagePromptTokensDetails]
    criteria: typing.Optional[typing.Dict[str, CreateChatCompletionResponseChoicesUsageCriteriaValue]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
