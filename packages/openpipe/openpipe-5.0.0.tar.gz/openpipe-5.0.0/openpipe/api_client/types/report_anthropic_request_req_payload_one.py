# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .report_anthropic_request_req_payload_one_messages_item import ReportAnthropicRequestReqPayloadOneMessagesItem
from .report_anthropic_request_req_payload_one_metadata import ReportAnthropicRequestReqPayloadOneMetadata
from .report_anthropic_request_req_payload_one_system import ReportAnthropicRequestReqPayloadOneSystem
from .report_anthropic_request_req_payload_one_thinking import ReportAnthropicRequestReqPayloadOneThinking
from .report_anthropic_request_req_payload_one_tool_choice import ReportAnthropicRequestReqPayloadOneToolChoice
from .report_anthropic_request_req_payload_one_tools_item import ReportAnthropicRequestReqPayloadOneToolsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ReportAnthropicRequestReqPayloadOne(pydantic.BaseModel):
    max_tokens: float
    messages: typing.List[ReportAnthropicRequestReqPayloadOneMessagesItem]
    model: str
    metadata: typing.Optional[ReportAnthropicRequestReqPayloadOneMetadata]
    stop_sequences: typing.Optional[typing.List[str]]
    stream: typing.Optional[str]
    system: typing.Optional[ReportAnthropicRequestReqPayloadOneSystem]
    temperature: typing.Optional[float]
    top_k: typing.Optional[float]
    top_p: typing.Optional[float]
    thinking: typing.Optional[ReportAnthropicRequestReqPayloadOneThinking]
    tool_choice: typing.Optional[ReportAnthropicRequestReqPayloadOneToolChoice]
    tools: typing.Optional[typing.List[ReportAnthropicRequestReqPayloadOneToolsItem]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
