# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class ListController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(ListController, self).__init__(config)

    def add_lists(self,
                  key,
                  token,
                  body):
        """Does a POST request to /lists.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Lists): Attributes of "Lists" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_by_id_list(self,
                             id_list,
                             key,
                             token,
                             cards='none',
                             card_fields='all',
                             board=None,
                             board_fields='name, desc, descData, closed, idOrganization, pinned, url and prefs',
                             fields='name, closed, idBoard and pos'):
        """Does a GET request to /lists/{idList}.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            cards (str, optional): One of: all, closed, none or open
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            board (str, optional): true or false
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            fields (str, optional): all or a comma-separated list of: closed,
                idBoard, name, pos or subscribed

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('board')
                         .value(board))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_lists_by_id_list(self,
                                id_list,
                                key,
                                token,
                                body):
        """Does a PUT request to /lists/{idList}.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Lists): Attributes of "Lists" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_actions_by_id_list(self,
                                     id_list,
                                     key,
                                     token,
                                     entities=None,
                                     display=None,
                                     filter='all',
                                     fields='all',
                                     limit='50',
                                     format='list',
                                     since=None,
                                     before=None,
                                     page='0',
                                     id_models=None,
                                     member=None,
                                     member_fields='avatarHash, fullName, initials and username',
                                     member_creator=None,
                                     member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /lists/{idList}/actions.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator or type
            limit (str, optional): a number from 0 to 1000
            format (str, optional): One of: count, list or minimal
            since (str, optional): A date, null or lastView
            before (str, optional): A date, or null
            page (str, optional): Page * limit must be less than 1000
            id_models (str, optional): Only return actions related to these
                model ids
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('idModels')
                         .value(id_models))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_lists_archive_all_cards_by_id_list(self,
                                               id_list,
                                               key,
                                               token):
        """Does a POST request to /lists/{idList}/archiveAllCards.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/archiveAllCards')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_board_by_id_list(self,
                                   id_list,
                                   key,
                                   token,
                                   fields='all'):
        """Does a GET request to /lists/{idList}/board.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/board')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_board_by_id_list_by_field(self,
                                            id_list,
                                            field,
                                            key,
                                            token):
        """Does a GET request to /lists/{idList}/board/{field}.

        Args:
            id_list (str): idList
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/board/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_cards_by_id_list(self,
                                   id_list,
                                   key,
                                   token,
                                   actions=None,
                                   attachments=None,
                                   attachment_fields='all',
                                   stickers=None,
                                   members=None,
                                   member_fields='avatarHash, fullName, initials and username',
                                   check_item_states=None,
                                   checklists='none',
                                   limit=None,
                                   since=None,
                                   before=None,
                                   filter='open',
                                   fields='all'):
        """Does a GET request to /lists/{idList}/cards.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            stickers (str, optional): true or false
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            limit (str, optional): a number from 1 to 1000
            since (str, optional): A date, or null
            before (str, optional): A date, or null
            filter (str, optional): One of: all, closed, none or open
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('stickers')
                         .value(stickers))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_lists_cards_by_id_list(self,
                                   id_list,
                                   key,
                                   token,
                                   body):
        """Does a POST request to /lists/{idList}/cards.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsCards): Attributes of "Lists Cards" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/cards')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_cards_by_id_list_by_filter(self,
                                             id_list,
                                             filter,
                                             key,
                                             token):
        """Does a GET request to /lists/{idList}/cards/{filter}.

        Args:
            id_list (str): idList
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/cards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def update_lists_closed_by_id_list(self,
                                       id_list,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /lists/{idList}/closed.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsClosed): Attributes of "Lists Closed" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/closed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_lists_id_board_by_id_list(self,
                                         id_list,
                                         key,
                                         token,
                                         body):
        """Does a PUT request to /lists/{idList}/idBoard.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsIdBoard): Attributes of "Lists Id Board" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/idBoard')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_lists_move_all_cards_by_id_list(self,
                                            id_list,
                                            key,
                                            token,
                                            body):
        """Does a POST request to /lists/{idList}/moveAllCards.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsMoveAllCards): Attributes of "Lists Move All Cards" to
                be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/moveAllCards')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_lists_name_by_id_list(self,
                                     id_list,
                                     key,
                                     token,
                                     body):
        """Does a PUT request to /lists/{idList}/name.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsName): Attributes of "Lists Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_lists_pos_by_id_list(self,
                                    id_list,
                                    key,
                                    token,
                                    body):
        """Does a PUT request to /lists/{idList}/pos.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsPos): Attributes of "Lists Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_lists_subscribed_by_id_list(self,
                                           id_list,
                                           key,
                                           token,
                                           body):
        """Does a PUT request to /lists/{idList}/subscribed.

        Args:
            id_list (str): idList
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ListsSubscribed): Attributes of "Lists Subscribed" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/subscribed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_lists_by_id_list_by_field(self,
                                      id_list,
                                      field,
                                      key,
                                      token):
        """Does a GET request to /lists/{idList}/{field}.

        Args:
            id_list (str): idList
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lists/{idList}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idList')
                            .value(id_list)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
