# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class OrganizationController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(OrganizationController, self).__init__(config)

    def add_organizations(self,
                          key,
                          token,
                          body):
        """Does a POST request to /organizations.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Organizations): Attributes of "Organizations" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_organizations_by_id_org(self,
                                       id_org,
                                       key,
                                       token):
        """Does a DELETE request to /organizations/{idOrg}.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_by_id_org(self,
                                    id_org,
                                    key,
                                    token,
                                    actions=None,
                                    actions_entities=None,
                                    actions_display=None,
                                    actions_limit='50',
                                    action_fields='all',
                                    memberships='none',
                                    memberships_member=None,
                                    memberships_member_fields='fullName and username',
                                    members='none',
                                    member_fields='avatarHash, fullName, initials, username and confirmed',
                                    member_activity=None,
                                    members_invited='none',
                                    members_invited_fields='avatarHash, initials, fullName and username',
                                    boards='none',
                                    board_fields='all',
                                    board_actions=None,
                                    board_actions_entities=None,
                                    board_actions_display=None,
                                    board_actions_format='list',
                                    board_actions_since=None,
                                    board_actions_limit='50',
                                    board_action_fields='all',
                                    board_lists='none',
                                    paid_account=None,
                                    fields='name, displayName, desc, descData, url, website, logoHash, products and powerUps'):
        """Does a GET request to /organizations/{idOrg}.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_display (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            memberships (str, optional): all or a comma-separated list of:
                active, admin, deactivated, me or normal
            memberships_member (str, optional): true or false
            memberships_member_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            members (str, optional): One of: admins, all, none, normal or
                owners
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_activity (str, optional): true or false ; works for premium
                organizations only.
            members_invited (str, optional): One of: admins, all, none, normal
                or owners
            members_invited_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            boards (str, optional): all or a comma-separated list of: closed,
                members, open, organization, pinned, public, starred or
                unpinned
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            board_actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            board_actions_entities (str, optional): true or false
            board_actions_display (str, optional): true or false
            board_actions_format (str, optional): One of: count, list or
                minimal
            board_actions_since (str, optional): A date, null or lastView
            board_actions_limit (str, optional): a number from 0 to 1000
            board_action_fields (str, optional): all or a comma-separated list
                of: data, date, idMemberCreator or type
            board_lists (str, optional): One of: all, closed, none or open
            paid_account (str, optional): true or false
            fields (str, optional): all or a comma-separated list of:
                billableMemberCount, desc, descData, displayName, idBoards,
                invitations, invited, logoHash, memberships, name, powerUps,
                prefs, premiumFeatures, products, url or website

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_display')
                         .value(actions_display))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('memberships')
                         .value(memberships))
            .query_param(Parameter()
                         .key('memberships_member')
                         .value(memberships_member))
            .query_param(Parameter()
                         .key('memberships_member_fields')
                         .value(memberships_member_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('member_activity')
                         .value(member_activity))
            .query_param(Parameter()
                         .key('membersInvited')
                         .value(members_invited))
            .query_param(Parameter()
                         .key('membersInvited_fields')
                         .value(members_invited_fields))
            .query_param(Parameter()
                         .key('boards')
                         .value(boards))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('board_actions')
                         .value(board_actions))
            .query_param(Parameter()
                         .key('board_actions_entities')
                         .value(board_actions_entities))
            .query_param(Parameter()
                         .key('board_actions_display')
                         .value(board_actions_display))
            .query_param(Parameter()
                         .key('board_actions_format')
                         .value(board_actions_format))
            .query_param(Parameter()
                         .key('board_actions_since')
                         .value(board_actions_since))
            .query_param(Parameter()
                         .key('board_actions_limit')
                         .value(board_actions_limit))
            .query_param(Parameter()
                         .key('board_action_fields')
                         .value(board_action_fields))
            .query_param(Parameter()
                         .key('board_lists')
                         .value(board_lists))
            .query_param(Parameter()
                         .key('paid_account')
                         .value(paid_account))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_by_id_org(self,
                                       id_org,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /organizations/{idOrg}.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Organizations): Attributes of "Organizations" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_actions_by_id_org(self,
                                            id_org,
                                            key,
                                            token,
                                            entities=None,
                                            display=None,
                                            filter='all',
                                            fields='all',
                                            limit='50',
                                            format='list',
                                            since=None,
                                            before=None,
                                            page='0',
                                            id_models=None,
                                            member=None,
                                            member_fields='avatarHash, fullName, initials and username',
                                            member_creator=None,
                                            member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /organizations/{idOrg}/actions.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator or type
            limit (str, optional): a number from 0 to 1000
            format (str, optional): One of: count, list or minimal
            since (str, optional): A date, null or lastView
            before (str, optional): A date, or null
            page (str, optional): Page * limit must be less than 1000
            id_models (str, optional): Only return actions related to these
                model ids
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('idModels')
                         .value(id_models))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_boards_by_id_org(self,
                                           id_org,
                                           key,
                                           token,
                                           filter='all',
                                           fields='all',
                                           actions=None,
                                           actions_entities=None,
                                           actions_limit='50',
                                           actions_format='list',
                                           actions_since=None,
                                           action_fields='all',
                                           memberships='none',
                                           organization=None,
                                           organization_fields='name and displayName',
                                           lists='none'):
        """Does a GET request to /organizations/{idOrg}/boards.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): all or a comma-separated list of: closed,
                members, open, organization, pinned, public, starred or
                unpinned
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            actions_format (str, optional): One of: count, list or minimal
            actions_since (str, optional): A date, null or lastView
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            memberships (str, optional): all or a comma-separated list of:
                active, admin, deactivated, me or normal
            organization (str, optional): true or false
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            lists (str, optional): One of: all, closed, none or open

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/boards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('actions_format')
                         .value(actions_format))
            .query_param(Parameter()
                         .key('actions_since')
                         .value(actions_since))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('memberships')
                         .value(memberships))
            .query_param(Parameter()
                         .key('organization')
                         .value(organization))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('lists')
                         .value(lists))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_boards_by_id_org_by_filter(self,
                                                     id_org,
                                                     filter,
                                                     key,
                                                     token):
        """Does a GET request to /organizations/{idOrg}/boards/{filter}.

        Args:
            id_org (str): idOrg or name
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/boards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_organizations_deltas_by_id_org(self,
                                           id_org,
                                           tags,
                                           ix_last_update,
                                           key,
                                           token):
        """Does a GET request to /organizations/{idOrg}/deltas.

        Args:
            id_org (str): idOrg or name
            tags (str): A valid tag for subscribing
            ix_last_update (str): a number from -1 to Infinity
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/deltas')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('ixLastUpdate')
                         .value(ix_last_update))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_desc_by_id_org(self,
                                            id_org,
                                            key,
                                            token,
                                            body):
        """Does a PUT request to /organizations/{idOrg}/desc.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsDesc): Attributes of "Organizations Desc" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/desc')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_display_name_by_id_org(self,
                                                    id_org,
                                                    key,
                                                    token,
                                                    body):
        """Does a PUT request to /organizations/{idOrg}/displayName.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsDisplayName): Attributes of "Organizations
                Display Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/displayName')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_organizations_logo_by_id_org(self,
                                            id_org,
                                            key,
                                            token):
        """Does a DELETE request to /organizations/{idOrg}/logo.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/logo')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_organizations_logo_by_id_org(self,
                                         id_org,
                                         key,
                                         token,
                                         body):
        """Does a POST request to /organizations/{idOrg}/logo.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsLogo): Attributes of "Organizations Logo" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/logo')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_members_by_id_org(self,
                                            id_org,
                                            key,
                                            token,
                                            filter='all',
                                            fields='fullName and username',
                                            activity=None):
        """Does a GET request to /organizations/{idOrg}/members.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: admins, all, none, normal or owners
            fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            activity (str, optional): true or false ; works for premium
                organizations only.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('activity')
                         .value(activity))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_members_by_id_org(self,
                                               id_org,
                                               key,
                                               token,
                                               body):
        """Does a PUT request to /organizations/{idOrg}/members.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsMembers): Attributes of "Organizations Members"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_members_by_id_org_by_filter(self,
                                                      id_org,
                                                      filter,
                                                      key,
                                                      token):
        """Does a GET request to /organizations/{idOrg}/members/{filter}.

        Args:
            id_org (str): idOrg or name
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def delete_organizations_members_by_id_org_by_id_member(self,
                                                            id_org,
                                                            id_member,
                                                            key,
                                                            token):
        """Does a DELETE request to /organizations/{idOrg}/members/{idMember}.

        Args:
            id_org (str): idOrg or name
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{idMember}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_members_by_id_org_by_id_member(self,
                                                            id_org,
                                                            id_member,
                                                            key,
                                                            token,
                                                            body):
        """Does a PUT request to /organizations/{idOrg}/members/{idMember}.

        Args:
            id_org (str): idOrg or name
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsMembers): Attributes of "Organizations Members"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{idMember}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_organizations_members_all_by_id_org_by_id_member(self,
                                                                id_org,
                                                                id_member,
                                                                key,
                                                                token):
        """Does a DELETE request to /organizations/{idOrg}/members/{idMember}/all.

        Args:
            id_org (str): idOrg or name
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{idMember}/all')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_members_cards_by_id_org_by_id_member(self,
                                                               id_org,
                                                               id_member,
                                                               key,
                                                               token,
                                                               actions=None,
                                                               attachments=None,
                                                               attachment_fields='all',
                                                               members=None,
                                                               member_fields='avatarHash, fullName, initials and username',
                                                               check_item_states=None,
                                                               checklists='none',
                                                               board=None,
                                                               board_fields='name, desc, closed, idOrganization, pinned, url and prefs',
                                                               list=None,
                                                               list_fields='all',
                                                               filter='visible',
                                                               fields='all'):
        """Does a GET request to /organizations/{idOrg}/members/{idMember}/cards.

        Args:
            id_org (str): idOrg or name
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            board (str, optional): true or false
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            list (str, optional): true or false
            list_fields (str, optional): all or a comma-separated list of:
                closed, idBoard, name, pos or subscribed
            filter (str, optional): One of: all, closed, none, open or visible
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{idMember}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('board')
                         .value(board))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('list')
                         .value(list))
            .query_param(Parameter()
                         .key('list_fields')
                         .value(list_fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_members_deactivated_by_id_org_by_id_member(self,
                                                                        id_org,
                                                                        id_member,
                                                                        key,
                                                                        token,
                                                                        body):
        """Does a PUT request to /organizations/{idOrg}/members/{idMember}/deactivated.

        Args:
            id_org (str): idOrg or name
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsMembersDeactivated): Attributes of
                "Organizations Members Deactivated" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/members/{idMember}/deactivated')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_members_invited_by_id_org(self,
                                                    id_org,
                                                    key,
                                                    token,
                                                    fields='all'):
        """Does a GET request to /organizations/{idOrg}/membersInvited.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/membersInvited')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_members_invited_by_id_org_by_field(self,
                                                             id_org,
                                                             field,
                                                             key,
                                                             token):
        """Does a GET request to /organizations/{idOrg}/membersInvited/{field}.

        Args:
            id_org (str): idOrg or name
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/membersInvited/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_memberships_by_id_org(self,
                                                id_org,
                                                key,
                                                token,
                                                filter='all',
                                                member=None,
                                                member_fields='fullName and username'):
        """Does a GET request to /organizations/{idOrg}/memberships.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): all or a comma-separated list of: active,
                admin, deactivated, me or normal
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/memberships')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_memberships_by_id_org_by_id_membership(self,
                                                                 id_org,
                                                                 id_membership,
                                                                 key,
                                                                 token,
                                                                 member=None,
                                                                 member_fields='fullName and username'):
        """Does a GET request to /organizations/{idOrg}/memberships/{idMembership}.

        Args:
            id_org (str): idOrg or name
            id_membership (str): idMembership
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/memberships/{idMembership}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMembership')
                            .value(id_membership)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_memberships_by_id_org_by_id_membership(self,
                                                                    id_org,
                                                                    id_membership,
                                                                    key,
                                                                    token,
                                                                    body):
        """Does a PUT request to /organizations/{idOrg}/memberships/{idMembership}.

        Args:
            id_org (str): idOrg or name
            id_membership (str): idMembership
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsMemberships): Attributes of "Organizations
                Memberships" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/memberships/{idMembership}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMembership')
                            .value(id_membership)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_name_by_id_org(self,
                                            id_org,
                                            key,
                                            token,
                                            body):
        """Does a PUT request to /organizations/{idOrg}/name.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsName): Attributes of "Organizations Name" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_organizations_prefs_associated_domain_by_id_org(self,
                                                               id_org,
                                                               key,
                                                               token):
        """Does a DELETE request to /organizations/{idOrg}/prefs/associatedDomain.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/associatedDomain')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_associated_domain_by_id_org(self,
                                                               id_org,
                                                               key,
                                                               token,
                                                               body):
        """Does a PUT request to /organizations/{idOrg}/prefs/associatedDomain.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsAssociatedDomain): Attributes of "Prefs Associated
                Domain" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/associatedDomain')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_board_visibility_restrict_org_by_id_org(self,
                                                                           id_org,
                                                                           key,
                                                                           token,
                                                                           body):
        """Does a PUT request to /organizations/{idOrg}/prefs/boardVisibilityRestrict/org.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsBoardVisibilityRestrict): Attributes of "Prefs Board
                Visibility Restrict" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/boardVisibilityRestrict/org')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_board_visibility_restrict_private_by_id_org(self,
                                                                               id_org,
                                                                               key,
                                                                               token,
                                                                               body):
        """Does a PUT request to /organizations/{idOrg}/prefs/boardVisibilityRestrict/private.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsBoardVisibilityRestrict): Attributes of "Prefs Board
                Visibility Restrict" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/boardVisibilityRestrict/private')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_board_visibility_restrict_public_by_id_org(self,
                                                                              id_org,
                                                                              key,
                                                                              token,
                                                                              body):
        """Does a PUT request to /organizations/{idOrg}/prefs/boardVisibilityRestrict/public.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsBoardVisibilityRestrict): Attributes of "Prefs Board
                Visibility Restrict" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/boardVisibilityRestrict/public')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_external_members_disabled_by_id_org(self,
                                                                       id_org,
                                                                       key,
                                                                       token,
                                                                       body):
        """Does a PUT request to /organizations/{idOrg}/prefs/externalMembersDisabled.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsExternalMembersDisabled): Attributes of "Prefs External
                Members Disabled" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/externalMembersDisabled')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_google_apps_version_by_id_org(self,
                                                                 id_org,
                                                                 key,
                                                                 token,
                                                                 body):
        """Does a PUT request to /organizations/{idOrg}/prefs/googleAppsVersion.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsGoogleAppsVersion): Attributes of "Prefs Google Apps
                Version" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/googleAppsVersion')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_organizations_prefs_org_invite_restrict_by_id_org(self,
                                                                 id_org,
                                                                 value,
                                                                 key,
                                                                 token):
        """Does a DELETE request to /organizations/{idOrg}/prefs/orgInviteRestrict.

        Args:
            id_org (str): idOrg or name
            value (str): An email address with optional expansion tokens
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/orgInviteRestrict')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('value')
                         .value(value))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_org_invite_restrict_by_id_org(self,
                                                                 id_org,
                                                                 key,
                                                                 token,
                                                                 body):
        """Does a PUT request to /organizations/{idOrg}/prefs/orgInviteRestrict.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsOrgInviteRestrict): Attributes of "Prefs Org Invite
                Restrict" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/orgInviteRestrict')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_prefs_permission_level_by_id_org(self,
                                                              id_org,
                                                              key,
                                                              token,
                                                              body):
        """Does a PUT request to /organizations/{idOrg}/prefs/permissionLevel.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsPermissionLevel): Attributes of "Prefs Permission
                Level" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/prefs/permissionLevel')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_organizations_website_by_id_org(self,
                                               id_org,
                                               key,
                                               token,
                                               body):
        """Does a PUT request to /organizations/{idOrg}/website.

        Args:
            id_org (str): idOrg or name
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (OrganizationsWebsite): Attributes of "Organizations Website"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/website')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_organizations_by_id_org_by_field(self,
                                             id_org,
                                             field,
                                             key,
                                             token):
        """Does a GET request to /organizations/{idOrg}/{field}.

        Args:
            id_org (str): idOrg or name
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organizations/{idOrg}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idOrg')
                            .value(id_org)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
