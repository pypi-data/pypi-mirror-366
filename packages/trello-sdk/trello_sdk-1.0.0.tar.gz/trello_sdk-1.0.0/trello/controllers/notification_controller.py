# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class NotificationController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(NotificationController, self).__init__(config)

    def add_notifications_all_read(self,
                                   key,
                                   token):
        """Does a POST request to /notifications/all/read.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/all/read')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_by_id_notification(self,
                                             id_notification,
                                             key,
                                             token,
                                             display=None,
                                             entities=None,
                                             fields='all',
                                             member_creator=None,
                                             member_creator_fields='avatarHash, fullName, initials and username',
                                             board=None,
                                             board_fields='name',
                                             list=None,
                                             card=None,
                                             card_fields='name',
                                             organization=None,
                                             organization_fields='displayName',
                                             member=None,
                                             member_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /notifications/{idNotification}.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            display (str, optional): true or false
            entities (str, optional): true or false
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator, type or unread
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            board (str, optional): true or false
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            list (str, optional): true or false
            card (str, optional): true or false
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            organization (str, optional): true or false
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .query_param(Parameter()
                         .key('board')
                         .value(board))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('list')
                         .value(list))
            .query_param(Parameter()
                         .key('card')
                         .value(card))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('organization')
                         .value(organization))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_notifications_by_id_notification(self,
                                                id_notification,
                                                key,
                                                token,
                                                body):
        """Does a PUT request to /notifications/{idNotification}.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Notifications): Attributes of "Notifications" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_board_by_id_notification(self,
                                                   id_notification,
                                                   key,
                                                   token,
                                                   fields='all'):
        """Does a GET request to /notifications/{idNotification}/board.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/board')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_board_by_id_notification_by_field(self,
                                                            id_notification,
                                                            field,
                                                            key,
                                                            token):
        """Does a GET request to /notifications/{idNotification}/board/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/board/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_card_by_id_notification(self,
                                                  id_notification,
                                                  key,
                                                  token,
                                                  fields='all'):
        """Does a GET request to /notifications/{idNotification}/card.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/card')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_card_by_id_notification_by_field(self,
                                                           id_notification,
                                                           field,
                                                           key,
                                                           token):
        """Does a GET request to /notifications/{idNotification}/card/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/card/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_display_by_id_notification(self,
                                                     id_notification,
                                                     key,
                                                     token):
        """Does a GET request to /notifications/{idNotification}/display.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/display')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_entities_by_id_notification(self,
                                                      id_notification,
                                                      key,
                                                      token):
        """Does a GET request to /notifications/{idNotification}/entities.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/entities')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_list_by_id_notification(self,
                                                  id_notification,
                                                  key,
                                                  token,
                                                  fields='all'):
        """Does a GET request to /notifications/{idNotification}/list.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                idBoard, name, pos or subscribed

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/list')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_list_by_id_notification_by_field(self,
                                                           id_notification,
                                                           field,
                                                           key,
                                                           token):
        """Does a GET request to /notifications/{idNotification}/list/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/list/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_member_by_id_notification(self,
                                                    id_notification,
                                                    key,
                                                    token,
                                                    fields='all'):
        """Does a GET request to /notifications/{idNotification}/member.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/member')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_member_by_id_notification_by_field(self,
                                                             id_notification,
                                                             field,
                                                             key,
                                                             token):
        """Does a GET request to /notifications/{idNotification}/member/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/member/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_member_creator_by_id_notification(self,
                                                            id_notification,
                                                            key,
                                                            token,
                                                            fields='all'):
        """Does a GET request to /notifications/{idNotification}/memberCreator.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/memberCreator')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_member_creator_by_id_notification_by_field(self,
                                                                     id_notification,
                                                                     field,
                                                                     key,
                                                                     token):
        """Does a GET request to /notifications/{idNotification}/memberCreator/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/memberCreator/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_organization_by_id_notification(self,
                                                          id_notification,
                                                          key,
                                                          token,
                                                          fields='all'):
        """Does a GET request to /notifications/{idNotification}/organization.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                billableMemberCount, desc, descData, displayName, idBoards,
                invitations, invited, logoHash, memberships, name, powerUps,
                prefs, premiumFeatures, products, url or website

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/organization')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_organization_by_id_notification_by_field(self,
                                                                   id_notification,
                                                                   field,
                                                                   key,
                                                                   token):
        """Does a GET request to /notifications/{idNotification}/organization/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/organization/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_notifications_unread_by_id_notification(self,
                                                       id_notification,
                                                       key,
                                                       token,
                                                       body):
        """Does a PUT request to /notifications/{idNotification}/unread.

        Args:
            id_notification (str): idNotification
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (NotificationsUnread): Attributes of "Notifications Unread"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/unread')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_notifications_by_id_notification_by_field(self,
                                                      id_notification,
                                                      field,
                                                      key,
                                                      token):
        """Does a GET request to /notifications/{idNotification}/{field}.

        Args:
            id_notification (str): idNotification
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notifications/{idNotification}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idNotification')
                            .value(id_notification)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
