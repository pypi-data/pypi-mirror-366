# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class TokenController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(TokenController, self).__init__(config)

    def delete_tokens_by_token(self,
                               token_template,
                               key,
                               token):
        """Does a DELETE request to /tokens/{token}.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_by_token(self,
                            token_template,
                            key,
                            token,
                            fields='all',
                            webhooks=None):
        """Does a GET request to /tokens/{token}.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                dateCreated, dateExpires, idMember, identifier or permissions
            webhooks (str, optional): true or false

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('webhooks')
                         .value(webhooks))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_member_by_token(self,
                                   token_template,
                                   key,
                                   token,
                                   fields='all'):
        """Does a GET request to /tokens/{token}/member.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/member')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_member_by_token_by_field(self,
                                            token_template,
                                            field,
                                            key,
                                            token):
        """Does a GET request to /tokens/{token}/member/{field}.

        Args:
            token_template (str): token
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/member/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_webhooks_by_token(self,
                                     token_template,
                                     key,
                                     token):
        """Does a GET request to /tokens/{token}/webhooks.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/webhooks')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_tokens_webhooks_by_token(self,
                                     token_template,
                                     key,
                                     token,
                                     body):
        """Does a POST request to /tokens/{token}/webhooks.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (TokensWebhooks): Attributes of "Tokens Webhooks" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/webhooks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_tokens_webhooks_by_token(self,
                                        token_template,
                                        key,
                                        token,
                                        body):
        """Does a PUT request to /tokens/{token}/webhooks.

        Args:
            token_template (str): token
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (TokensWebhooks): Attributes of "Tokens Webhooks" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/webhooks')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_tokens_webhooks_by_token_by_id_webhook(self,
                                                      token_template,
                                                      id_webhook,
                                                      key,
                                                      token):
        """Does a DELETE request to /tokens/{token}/webhooks/{idWebhook}.

        Args:
            token_template (str): token
            id_webhook (str): idWebhook
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/webhooks/{idWebhook}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idWebhook')
                            .value(id_webhook)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_webhooks_by_token_by_id_webhook(self,
                                                   token_template,
                                                   id_webhook,
                                                   key,
                                                   token):
        """Does a GET request to /tokens/{token}/webhooks/{idWebhook}.

        Args:
            token_template (str): token
            id_webhook (str): idWebhook
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/webhooks/{idWebhook}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idWebhook')
                            .value(id_webhook)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_tokens_by_token_by_field(self,
                                     token_template,
                                     field,
                                     key,
                                     token):
        """Does a GET request to /tokens/{token}/{field}.

        Args:
            token_template (str): token
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tokens/{token}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token_template)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
