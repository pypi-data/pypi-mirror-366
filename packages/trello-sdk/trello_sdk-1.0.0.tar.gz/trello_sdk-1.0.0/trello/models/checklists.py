# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Checklists(object):

    """Implementation of the 'checklists' model.

    Attributes:
        id_board (str): id of the board that the checklist should be added to
        id_card (str): id of the card that the checklist should be added to
        id_checklist_source (str): The id of the source checklist to copy into
            a new checklist.
        name (str): a string with a length from 0 to 16384
        pos (str): A position. top , bottom , or a positive number.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id_board": 'idBoard',
        "id_card": 'idCard',
        "id_checklist_source": 'idChecklistSource',
        "name": 'name',
        "pos": 'pos'
    }

    _optionals = [
        'id_board',
        'id_card',
        'id_checklist_source',
        'name',
        'pos',
    ]

    def __init__(self,
                 id_board=APIHelper.SKIP,
                 id_card=APIHelper.SKIP,
                 id_checklist_source=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 pos=APIHelper.SKIP):
        """Constructor for the Checklists class"""

        # Initialize members of the class
        if id_board is not APIHelper.SKIP:
            self.id_board = id_board 
        if id_card is not APIHelper.SKIP:
            self.id_card = id_card 
        if id_checklist_source is not APIHelper.SKIP:
            self.id_checklist_source = id_checklist_source 
        if name is not APIHelper.SKIP:
            self.name = name 
        if pos is not APIHelper.SKIP:
            self.pos = pos 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id_board = dictionary.get("idBoard") if dictionary.get("idBoard") else APIHelper.SKIP
        id_card = dictionary.get("idCard") if dictionary.get("idCard") else APIHelper.SKIP
        id_checklist_source = dictionary.get("idChecklistSource") if dictionary.get("idChecklistSource") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        pos = dictionary.get("pos") if dictionary.get("pos") else APIHelper.SKIP
        # Return an object of this model
        return cls(id_board,
                   id_card,
                   id_checklist_source,
                   name,
                   pos)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!r}, '
                f'id_card={(self.id_card if hasattr(self, "id_card") else None)!r}, '
                f'id_checklist_source={(self.id_checklist_source if hasattr(self, "id_checklist_source") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'pos={(self.pos if hasattr(self, "pos") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!s}, '
                f'id_card={(self.id_card if hasattr(self, "id_card") else None)!s}, '
                f'id_checklist_source={(self.id_checklist_source if hasattr(self, "id_checklist_source") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'pos={(self.pos if hasattr(self, "pos") else None)!s})')
