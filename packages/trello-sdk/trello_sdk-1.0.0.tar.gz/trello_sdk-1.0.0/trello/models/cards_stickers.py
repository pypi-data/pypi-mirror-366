# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class CardsStickers(object):

    """Implementation of the 'cards_stickers' model.

    Attributes:
        image (str): a string with a length from 0 to 16384
        left (str): undefined
        rotate (str): undefined
        top (str): undefined
        z_index (str): Valid Z values for stickers, must be an integer

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "image": 'image',
        "left": 'left',
        "rotate": 'rotate',
        "top": 'top',
        "z_index": 'zIndex'
    }

    _optionals = [
        'image',
        'left',
        'rotate',
        'top',
        'z_index',
    ]

    def __init__(self,
                 image=APIHelper.SKIP,
                 left=APIHelper.SKIP,
                 rotate=APIHelper.SKIP,
                 top=APIHelper.SKIP,
                 z_index=APIHelper.SKIP):
        """Constructor for the CardsStickers class"""

        # Initialize members of the class
        if image is not APIHelper.SKIP:
            self.image = image 
        if left is not APIHelper.SKIP:
            self.left = left 
        if rotate is not APIHelper.SKIP:
            self.rotate = rotate 
        if top is not APIHelper.SKIP:
            self.top = top 
        if z_index is not APIHelper.SKIP:
            self.z_index = z_index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        image = dictionary.get("image") if dictionary.get("image") else APIHelper.SKIP
        left = dictionary.get("left") if dictionary.get("left") else APIHelper.SKIP
        rotate = dictionary.get("rotate") if dictionary.get("rotate") else APIHelper.SKIP
        top = dictionary.get("top") if dictionary.get("top") else APIHelper.SKIP
        z_index = dictionary.get("zIndex") if dictionary.get("zIndex") else APIHelper.SKIP
        # Return an object of this model
        return cls(image,
                   left,
                   rotate,
                   top,
                   z_index)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'image={(self.image if hasattr(self, "image") else None)!r}, '
                f'left={(self.left if hasattr(self, "left") else None)!r}, '
                f'rotate={(self.rotate if hasattr(self, "rotate") else None)!r}, '
                f'top={(self.top if hasattr(self, "top") else None)!r}, '
                f'z_index={(self.z_index if hasattr(self, "z_index") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'image={(self.image if hasattr(self, "image") else None)!s}, '
                f'left={(self.left if hasattr(self, "left") else None)!s}, '
                f'rotate={(self.rotate if hasattr(self, "rotate") else None)!s}, '
                f'top={(self.top if hasattr(self, "top") else None)!s}, '
                f'z_index={(self.z_index if hasattr(self, "z_index") else None)!s})')
