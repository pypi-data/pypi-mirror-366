# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class ListsCards(object):

    """Implementation of the 'lists_cards' model.

    Attributes:
        desc (str): a string with a length from 0 to 16384
        due (str): A date, or null
        id_members (str): A comma-separated list of objectIds, 24-character
            hex strings
        labels (str): all or a comma-separated list of: blue, green, orange,
            purple, red or yellow
        name (str): a string with a length from 1 to 16384

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "desc": 'desc',
        "due": 'due',
        "id_members": 'idMembers',
        "labels": 'labels',
        "name": 'name'
    }

    _optionals = [
        'desc',
        'due',
        'id_members',
        'labels',
        'name',
    ]

    def __init__(self,
                 desc=APIHelper.SKIP,
                 due=APIHelper.SKIP,
                 id_members=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 name=APIHelper.SKIP):
        """Constructor for the ListsCards class"""

        # Initialize members of the class
        if desc is not APIHelper.SKIP:
            self.desc = desc 
        if due is not APIHelper.SKIP:
            self.due = due 
        if id_members is not APIHelper.SKIP:
            self.id_members = id_members 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if name is not APIHelper.SKIP:
            self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        desc = dictionary.get("desc") if dictionary.get("desc") else APIHelper.SKIP
        due = dictionary.get("due") if dictionary.get("due") else APIHelper.SKIP
        id_members = dictionary.get("idMembers") if dictionary.get("idMembers") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        # Return an object of this model
        return cls(desc,
                   due,
                   id_members,
                   labels,
                   name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'desc={(self.desc if hasattr(self, "desc") else None)!r}, '
                f'due={(self.due if hasattr(self, "due") else None)!r}, '
                f'id_members={(self.id_members if hasattr(self, "id_members") else None)!r}, '
                f'labels={(self.labels if hasattr(self, "labels") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'desc={(self.desc if hasattr(self, "desc") else None)!s}, '
                f'due={(self.due if hasattr(self, "due") else None)!s}, '
                f'id_members={(self.id_members if hasattr(self, "id_members") else None)!s}, '
                f'labels={(self.labels if hasattr(self, "labels") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s})')
