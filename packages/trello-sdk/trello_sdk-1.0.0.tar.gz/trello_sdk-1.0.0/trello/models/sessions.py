# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Sessions(object):

    """Implementation of the 'sessions' model.

    Attributes:
        id_board (str): The id of the board you&#39;re viewing.  Boards with
            no viewers will not get updates about members&#39; statuses.
        status (str): One of: active, disconnected or idle

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id_board": 'idBoard',
        "status": 'status'
    }

    _optionals = [
        'id_board',
        'status',
    ]

    def __init__(self,
                 id_board=APIHelper.SKIP,
                 status=APIHelper.SKIP):
        """Constructor for the Sessions class"""

        # Initialize members of the class
        if id_board is not APIHelper.SKIP:
            self.id_board = id_board 
        if status is not APIHelper.SKIP:
            self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id_board = dictionary.get("idBoard") if dictionary.get("idBoard") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        # Return an object of this model
        return cls(id_board,
                   status)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s})')
