# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class BoardsMembers(object):

    """Implementation of the 'boards_members' model.

    Attributes:
        email (str): An email address
        full_name (str): A string with a length of at least 1.  Cannot begin
            or end with a space.
        mtype (str): One of: admin, normal or observer

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "full_name": 'fullName',
        "mtype": 'type'
    }

    _optionals = [
        'email',
        'full_name',
        'mtype',
    ]

    def __init__(self,
                 email=APIHelper.SKIP,
                 full_name=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the BoardsMembers class"""

        # Initialize members of the class
        if email is not APIHelper.SKIP:
            self.email = email 
        if full_name is not APIHelper.SKIP:
            self.full_name = full_name 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        full_name = dictionary.get("fullName") if dictionary.get("fullName") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(email,
                   full_name,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'full_name={(self.full_name if hasattr(self, "full_name") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'full_name={(self.full_name if hasattr(self, "full_name") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s})')
