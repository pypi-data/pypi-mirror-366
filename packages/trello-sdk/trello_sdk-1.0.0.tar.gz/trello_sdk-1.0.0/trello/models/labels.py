# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Labels(object):

    """Implementation of the 'labels' model.

    Attributes:
        color (str): A valid label color or null
        id_board (str): An id
        name (str): a string with a length from 0 to 16384

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "color": 'color',
        "id_board": 'idBoard',
        "name": 'name'
    }

    _optionals = [
        'color',
        'id_board',
        'name',
    ]

    def __init__(self,
                 color=APIHelper.SKIP,
                 id_board=APIHelper.SKIP,
                 name=APIHelper.SKIP):
        """Constructor for the Labels class"""

        # Initialize members of the class
        if color is not APIHelper.SKIP:
            self.color = color 
        if id_board is not APIHelper.SKIP:
            self.id_board = id_board 
        if name is not APIHelper.SKIP:
            self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        id_board = dictionary.get("idBoard") if dictionary.get("idBoard") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        # Return an object of this model
        return cls(color,
                   id_board,
                   name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'color={(self.color if hasattr(self, "color") else None)!r}, '
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'color={(self.color if hasattr(self, "color") else None)!s}, '
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s})')
