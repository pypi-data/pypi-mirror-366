# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class TokensWebhooks(object):

    """Implementation of the 'tokens_webhooks' model.

    Attributes:
        callback_url (str): A valid URL that is reachable with a HEAD request
        description (str): a string with a length from 0 to 16384
        id_model (str): id of the model to be monitored

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "callback_url": 'callbackURL',
        "description": 'description',
        "id_model": 'idModel'
    }

    _optionals = [
        'callback_url',
        'description',
        'id_model',
    ]

    def __init__(self,
                 callback_url=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 id_model=APIHelper.SKIP):
        """Constructor for the TokensWebhooks class"""

        # Initialize members of the class
        if callback_url is not APIHelper.SKIP:
            self.callback_url = callback_url 
        if description is not APIHelper.SKIP:
            self.description = description 
        if id_model is not APIHelper.SKIP:
            self.id_model = id_model 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        callback_url = dictionary.get("callbackURL") if dictionary.get("callbackURL") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        id_model = dictionary.get("idModel") if dictionary.get("idModel") else APIHelper.SKIP
        # Return an object of this model
        return cls(callback_url,
                   description,
                   id_model)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'callback_url={(self.callback_url if hasattr(self, "callback_url") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'id_model={(self.id_model if hasattr(self, "id_model") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'callback_url={(self.callback_url if hasattr(self, "callback_url") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'id_model={(self.id_model if hasattr(self, "id_model") else None)!s})')
