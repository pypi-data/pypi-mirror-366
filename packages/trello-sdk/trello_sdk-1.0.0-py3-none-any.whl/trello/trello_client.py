# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from trello.configuration import Configuration
from trello.controllers.base_controller import BaseController
from trello.configuration import Environment
from trello.http.auth.api_key import ApiKey
from trello.http.auth.api_token import ApiToken
from trello.controllers.action_controller import ActionController
from trello.controllers.batch_controller import BatchController
from trello.controllers.board_controller import BoardController
from trello.controllers.card_controller import CardController
from trello.controllers.checklist_controller import ChecklistController
from trello.controllers.label_controller import LabelController
from trello.controllers.list_controller import ListController
from trello.controllers.member_controller import MemberController
from trello.controllers.notification_controller import NotificationController
from trello.controllers.organization_controller import OrganizationController
from trello.controllers.search_controller import SearchController
from trello.controllers.session_controller import SessionController
from trello.controllers.token_controller import TokenController
from trello.controllers.type_controller import TypeController
from trello.controllers.webhook_controller import WebhookController


class TrelloClient(object):
    @LazyProperty
    def action(self):
        return ActionController(self.global_configuration)

    @LazyProperty
    def batch(self):
        return BatchController(self.global_configuration)

    @LazyProperty
    def board(self):
        return BoardController(self.global_configuration)

    @LazyProperty
    def card(self):
        return CardController(self.global_configuration)

    @LazyProperty
    def checklist(self):
        return ChecklistController(self.global_configuration)

    @LazyProperty
    def label(self):
        return LabelController(self.global_configuration)

    @LazyProperty
    def list(self):
        return ListController(self.global_configuration)

    @LazyProperty
    def member(self):
        return MemberController(self.global_configuration)

    @LazyProperty
    def notification(self):
        return NotificationController(self.global_configuration)

    @LazyProperty
    def organization(self):
        return OrganizationController(self.global_configuration)

    @LazyProperty
    def search(self):
        return SearchController(self.global_configuration)

    @LazyProperty
    def session(self):
        return SessionController(self.global_configuration)

    @LazyProperty
    def token(self):
        return TokenController(self.global_configuration)

    @LazyProperty
    def mtype(self):
        return TypeController(self.global_configuration)

    @LazyProperty
    def webhook(self):
        return WebhookController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, api_key_credentials=None,
                 api_token_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, api_key_credentials=api_key_credentials,
            api_token_credentials=api_token_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['api_key', 'api_token']}
        self.auth_managers['api_key'] = ApiKey(self.config.api_key_credentials)
        self.auth_managers['api_token'] = ApiToken(
            self.config.api_token_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

