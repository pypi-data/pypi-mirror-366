# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class MemberController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(MemberController, self).__init__(config)

    def get_members_by_id_member(self,
                                 id_member,
                                 key,
                                 token,
                                 actions=None,
                                 actions_entities=None,
                                 actions_display=None,
                                 actions_limit='50',
                                 action_fields='all',
                                 action_since=None,
                                 action_before=None,
                                 cards='none',
                                 card_fields='all',
                                 card_members=None,
                                 card_member_fields='avatarHash, fullName, initials and username',
                                 card_attachments=None,
                                 card_attachment_fields='url and previews',
                                 card_stickers=None,
                                 boards=None,
                                 board_fields='name, closed, idOrganization and pinned',
                                 board_actions=None,
                                 board_actions_entities=None,
                                 board_actions_display=None,
                                 board_actions_format='list',
                                 board_actions_since=None,
                                 board_actions_limit='50',
                                 board_action_fields='all',
                                 board_lists='none',
                                 board_memberships='none',
                                 board_organization=None,
                                 board_organization_fields='name and displayName',
                                 boards_invited=None,
                                 boards_invited_fields='name, closed, idOrganization and pinned',
                                 board_stars=None,
                                 saved_searches=None,
                                 organizations='none',
                                 organization_fields='all',
                                 organization_paid_account=None,
                                 organizations_invited='none',
                                 organizations_invited_fields='all',
                                 notifications=None,
                                 notifications_entities=None,
                                 notifications_display=None,
                                 notifications_limit='50',
                                 notification_fields='all',
                                 notification_member_creator=None,
                                 notification_member_creator_fields='avatarHash, fullName, initials and username',
                                 notification_before=None,
                                 notification_since=None,
                                 tokens='none',
                                 paid_account=None,
                                 board_backgrounds='none',
                                 custom_board_backgrounds='none',
                                 custom_stickers='none',
                                 custom_emoji='none',
                                 fields='all'):
        """Does a GET request to /members/{idMember}.

        If you specify 'me' as the username, this call will respond as if you
        had supplied the username associated with the supplied token

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_display (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            action_since (str, optional): A date, null or lastView
            action_before (str, optional): A date, or null
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            card_members (str, optional): true or false
            card_member_fields (str, optional): all or a comma-separated list
                of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            card_attachments (str, optional): A boolean value or
                &quot;cover&quot; for only card cover attachments
            card_attachment_fields (str, optional): all or a comma-separated
                list of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            card_stickers (str, optional): true or false
            boards (str, optional): all or a comma-separated list of: closed,
                members, open, organization, pinned, public, starred or
                unpinned
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            board_actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            board_actions_entities (str, optional): true or false
            board_actions_display (str, optional): true or false
            board_actions_format (str, optional): One of: count, list or
                minimal
            board_actions_since (str, optional): A date, null or lastView
            board_actions_limit (str, optional): a number from 0 to 1000
            board_action_fields (str, optional): all or a comma-separated list
                of: data, date, idMemberCreator or type
            board_lists (str, optional): One of: all, closed, none or open
            board_memberships (str, optional): all or a comma-separated list
                of: active, admin, deactivated, me or normal
            board_organization (str, optional): true or false
            board_organization_fields (str, optional): all or a
                comma-separated list of: billableMemberCount, desc, descData,
                displayName, idBoards, invitations, invited, logoHash,
                memberships, name, powerUps, prefs, premiumFeatures, products,
                url or website
            boards_invited (str, optional): all or a comma-separated list of:
                closed, members, open, organization, pinned, public, starred
                or unpinned
            boards_invited_fields (str, optional): all or a comma-separated
                list of: closed, dateLastActivity, dateLastView, desc,
                descData, idOrganization, invitations, invited, labelNames,
                memberships, name, pinned, powerUps, prefs, shortLink,
                shortUrl, starred, subscribed or url
            board_stars (str, optional): true or false
            saved_searches (str, optional): true or false
            organizations (str, optional): One of: all, members, none or public
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            organization_paid_account (str, optional): true or false
            organizations_invited (str, optional): One of: all, members, none
                or public
            organizations_invited_fields (str, optional): all or a
                comma-separated list of: billableMemberCount, desc, descData,
                displayName, idBoards, invitations, invited, logoHash,
                memberships, name, powerUps, prefs, premiumFeatures, products,
                url or website
            notifications (str, optional): all or a comma-separated list of:
                addAdminToBoard, addAdminToOrganization,
                addedAttachmentToCard, addedMemberToCard, addedToBoard,
                addedToCard, addedToOrganization, cardDueSoon, changeCard,
                closeBoard, commentCard, createdCard,
                declinedInvitationToBoard, declinedInvitationToOrganization,
                invitedToBoard, invitedToOrganization, makeAdminOfBoard,
                makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard,
                removedFromBoard, removedFromCard, removedFromOrganization,
                removedMemberFromCard, unconfirmedInvitedToBoard,
                unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
            notifications_entities (str, optional): true or false
            notifications_display (str, optional): true or false
            notifications_limit (str, optional): a number from 1 to 1000
            notification_fields (str, optional): all or a comma-separated list
                of: data, date, idMemberCreator, type or unread
            notification_member_creator (str, optional): true or false
            notification_member_creator_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            notification_before (str, optional): An id, or null
            notification_since (str, optional): An id, or null
            tokens (str, optional): One of: all or none
            paid_account (str, optional): true or false
            board_backgrounds (str, optional): One of: all, custom, default,
                none or premium
            custom_board_backgrounds (str, optional): One of: all or none
            custom_stickers (str, optional): One of: all or none
            custom_emoji (str, optional): One of: all or none
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_display')
                         .value(actions_display))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('action_since')
                         .value(action_since))
            .query_param(Parameter()
                         .key('action_before')
                         .value(action_before))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('card_members')
                         .value(card_members))
            .query_param(Parameter()
                         .key('card_member_fields')
                         .value(card_member_fields))
            .query_param(Parameter()
                         .key('card_attachments')
                         .value(card_attachments))
            .query_param(Parameter()
                         .key('card_attachment_fields')
                         .value(card_attachment_fields))
            .query_param(Parameter()
                         .key('card_stickers')
                         .value(card_stickers))
            .query_param(Parameter()
                         .key('boards')
                         .value(boards))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('board_actions')
                         .value(board_actions))
            .query_param(Parameter()
                         .key('board_actions_entities')
                         .value(board_actions_entities))
            .query_param(Parameter()
                         .key('board_actions_display')
                         .value(board_actions_display))
            .query_param(Parameter()
                         .key('board_actions_format')
                         .value(board_actions_format))
            .query_param(Parameter()
                         .key('board_actions_since')
                         .value(board_actions_since))
            .query_param(Parameter()
                         .key('board_actions_limit')
                         .value(board_actions_limit))
            .query_param(Parameter()
                         .key('board_action_fields')
                         .value(board_action_fields))
            .query_param(Parameter()
                         .key('board_lists')
                         .value(board_lists))
            .query_param(Parameter()
                         .key('board_memberships')
                         .value(board_memberships))
            .query_param(Parameter()
                         .key('board_organization')
                         .value(board_organization))
            .query_param(Parameter()
                         .key('board_organization_fields')
                         .value(board_organization_fields))
            .query_param(Parameter()
                         .key('boardsInvited')
                         .value(boards_invited))
            .query_param(Parameter()
                         .key('boardsInvited_fields')
                         .value(boards_invited_fields))
            .query_param(Parameter()
                         .key('boardStars')
                         .value(board_stars))
            .query_param(Parameter()
                         .key('savedSearches')
                         .value(saved_searches))
            .query_param(Parameter()
                         .key('organizations')
                         .value(organizations))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('organization_paid_account')
                         .value(organization_paid_account))
            .query_param(Parameter()
                         .key('organizationsInvited')
                         .value(organizations_invited))
            .query_param(Parameter()
                         .key('organizationsInvited_fields')
                         .value(organizations_invited_fields))
            .query_param(Parameter()
                         .key('notifications')
                         .value(notifications))
            .query_param(Parameter()
                         .key('notifications_entities')
                         .value(notifications_entities))
            .query_param(Parameter()
                         .key('notifications_display')
                         .value(notifications_display))
            .query_param(Parameter()
                         .key('notifications_limit')
                         .value(notifications_limit))
            .query_param(Parameter()
                         .key('notification_fields')
                         .value(notification_fields))
            .query_param(Parameter()
                         .key('notification_memberCreator')
                         .value(notification_member_creator))
            .query_param(Parameter()
                         .key('notification_memberCreator_fields')
                         .value(notification_member_creator_fields))
            .query_param(Parameter()
                         .key('notification_before')
                         .value(notification_before))
            .query_param(Parameter()
                         .key('notification_since')
                         .value(notification_since))
            .query_param(Parameter()
                         .key('tokens')
                         .value(tokens))
            .query_param(Parameter()
                         .key('paid_account')
                         .value(paid_account))
            .query_param(Parameter()
                         .key('boardBackgrounds')
                         .value(board_backgrounds))
            .query_param(Parameter()
                         .key('customBoardBackgrounds')
                         .value(custom_board_backgrounds))
            .query_param(Parameter()
                         .key('customStickers')
                         .value(custom_stickers))
            .query_param(Parameter()
                         .key('customEmoji')
                         .value(custom_emoji))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_by_id_member(self,
                                    id_member,
                                    key,
                                    token,
                                    body):
        """Does a PUT request to /members/{idMember}.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Members): Attributes of "Members" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_actions_by_id_member(self,
                                         id_member,
                                         key,
                                         token,
                                         entities=None,
                                         display=None,
                                         filter='all',
                                         fields='all',
                                         limit='50',
                                         format='list',
                                         since=None,
                                         before=None,
                                         page='0',
                                         id_models=None,
                                         member=None,
                                         member_fields='avatarHash, fullName, initials and username',
                                         member_creator=None,
                                         member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /members/{idMember}/actions.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator or type
            limit (str, optional): a number from 0 to 1000
            format (str, optional): One of: count, list or minimal
            since (str, optional): A date, null or lastView
            before (str, optional): A date, or null
            page (str, optional): Page * limit must be less than 1000
            id_models (str, optional): Only return actions related to these
                model ids
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('idModels')
                         .value(id_models))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_avatar_by_id_member(self,
                                        id_member,
                                        key,
                                        token,
                                        body):
        """Does a POST request to /members/{idMember}/avatar.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersAvatar): Attributes of "Members Avatar" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/avatar')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_avatar_source_by_id_member(self,
                                                  id_member,
                                                  key,
                                                  token,
                                                  body):
        """Does a PUT request to /members/{idMember}/avatarSource.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersAvatarSource): Attributes of "Members Avatar Source"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/avatarSource')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_bio_by_id_member(self,
                                        id_member,
                                        key,
                                        token,
                                        body):
        """Does a PUT request to /members/{idMember}/bio.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBio): Attributes of "Members Bio" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/bio')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_board_backgrounds_by_id_member(self,
                                                   id_member,
                                                   key,
                                                   token,
                                                   filter='all'):
        """Does a GET request to /members/{idMember}/boardBackgrounds.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all, custom, default, none or
                premium

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardBackgrounds')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_board_backgrounds_by_id_member(self,
                                                   id_member,
                                                   key,
                                                   token,
                                                   body):
        """Does a POST request to /members/{idMember}/boardBackgrounds.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardBackgrounds): Attributes of "Members Board
                Backgrounds" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardBackgrounds')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_members_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                             id_member,
                                                                             id_board_background,
                                                                             key,
                                                                             token):
        """Does a DELETE request to /members/{idMember}/boardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                          id_member,
                                                                          id_board_background,
                                                                          key,
                                                                          token,
                                                                          fields='all'):
        """Does a GET request to /members/{idMember}/boardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                brightness, fullSizeUrl, scaled or tile

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                             id_member,
                                                                             id_board_background,
                                                                             key,
                                                                             token,
                                                                             body):
        """Does a PUT request to /members/{idMember}/boardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardBackgrounds): Attributes of "Members Board
                Backgrounds" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_board_stars_by_id_member(self,
                                             id_member,
                                             key,
                                             token):
        """Does a GET request to /members/{idMember}/boardStars.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_board_stars_by_id_member(self,
                                             id_member,
                                             key,
                                             token,
                                             body):
        """Does a POST request to /members/{idMember}/boardStars.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardStars): Attributes of "Members Board Stars" to
                be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_members_board_stars_by_id_member_by_id_board_star(self,
                                                                 id_member,
                                                                 id_board_star,
                                                                 key,
                                                                 token):
        """Does a DELETE request to /members/{idMember}/boardStars/{idBoardStar}.

        Args:
            id_member (str): idMember or username
            id_board_star (str): idBoardStar
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars/{idBoardStar}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardStar')
                            .value(id_board_star)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_board_stars_by_id_member_by_id_board_star(self,
                                                              id_member,
                                                              id_board_star,
                                                              key,
                                                              token):
        """Does a GET request to /members/{idMember}/boardStars/{idBoardStar}.

        Args:
            id_member (str): idMember or username
            id_board_star (str): idBoardStar
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars/{idBoardStar}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardStar')
                            .value(id_board_star)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_board_stars_by_id_member_by_id_board_star(self,
                                                                 id_member,
                                                                 id_board_star,
                                                                 key,
                                                                 token,
                                                                 body):
        """Does a PUT request to /members/{idMember}/boardStars/{idBoardStar}.

        Args:
            id_member (str): idMember or username
            id_board_star (str): idBoardStar
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardStars): Attributes of "Members Board Stars" to
                be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars/{idBoardStar}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardStar')
                            .value(id_board_star)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_board_stars_id_board_by_id_member_by_id_board_star(self,
                                                                          id_member,
                                                                          id_board_star,
                                                                          key,
                                                                          token,
                                                                          body):
        """Does a PUT request to /members/{idMember}/boardStars/{idBoardStar}/idBoard.

        Args:
            id_member (str): idMember or username
            id_board_star (str): idBoardStar
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardStarsIdBoard): Attributes of "Members Board
                Stars Id Board" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars/{idBoardStar}/idBoard')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardStar')
                            .value(id_board_star)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_board_stars_pos_by_id_member_by_id_board_star(self,
                                                                     id_member,
                                                                     id_board_star,
                                                                     key,
                                                                     token,
                                                                     body):
        """Does a PUT request to /members/{idMember}/boardStars/{idBoardStar}/pos.

        Args:
            id_member (str): idMember or username
            id_board_star (str): idBoardStar
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersBoardStarsPos): Attributes of "Members Board Stars
                Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardStars/{idBoardStar}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardStar')
                            .value(id_board_star)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_boards_by_id_member(self,
                                        id_member,
                                        key,
                                        token,
                                        filter='all',
                                        fields='all',
                                        actions=None,
                                        actions_entities=None,
                                        actions_limit='50',
                                        actions_format='list',
                                        actions_since=None,
                                        action_fields='all',
                                        memberships='none',
                                        organization=None,
                                        organization_fields='name and displayName',
                                        lists='none'):
        """Does a GET request to /members/{idMember}/boards.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): all or a comma-separated list of: closed,
                members, open, organization, pinned, public, starred or
                unpinned
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            actions_format (str, optional): One of: count, list or minimal
            actions_since (str, optional): A date, null or lastView
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            memberships (str, optional): all or a comma-separated list of:
                active, admin, deactivated, me or normal
            organization (str, optional): true or false
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            lists (str, optional): One of: all, closed, none or open

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('actions_format')
                         .value(actions_format))
            .query_param(Parameter()
                         .key('actions_since')
                         .value(actions_since))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('memberships')
                         .value(memberships))
            .query_param(Parameter()
                         .key('organization')
                         .value(organization))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('lists')
                         .value(lists))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_boards_by_id_member_by_filter(self,
                                                  id_member,
                                                  filter,
                                                  key,
                                                  token):
        """Does a GET request to /members/{idMember}/boards/{filter}.

        Args:
            id_member (str): idMember or username
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_members_boards_invited_by_id_member(self,
                                                id_member,
                                                key,
                                                token,
                                                fields='all'):
        """Does a GET request to /members/{idMember}/boardsInvited.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardsInvited')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_boards_invited_by_id_member_by_field(self,
                                                         id_member,
                                                         field,
                                                         key,
                                                         token):
        """Does a GET request to /members/{idMember}/boardsInvited/{field}.

        Args:
            id_member (str): idMember or username
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/boardsInvited/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_cards_by_id_member(self,
                                       id_member,
                                       key,
                                       token,
                                       actions=None,
                                       attachments=None,
                                       attachment_fields='all',
                                       stickers=None,
                                       members=None,
                                       member_fields='avatarHash, fullName, initials and username',
                                       check_item_states=None,
                                       checklists='none',
                                       limit=None,
                                       since=None,
                                       before=None,
                                       filter='visible',
                                       fields='all'):
        """Does a GET request to /members/{idMember}/cards.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            stickers (str, optional): true or false
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            limit (str, optional): a number from 1 to 1000
            since (str, optional): A date, or null
            before (str, optional): A date, or null
            filter (str, optional): One of: all, closed, none, open or visible
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('stickers')
                         .value(stickers))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_cards_by_id_member_by_filter(self,
                                                 id_member,
                                                 filter,
                                                 key,
                                                 token):
        """Does a GET request to /members/{idMember}/cards/{filter}.

        Args:
            id_member (str): idMember or username
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/cards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_members_custom_board_backgrounds_by_id_member(self,
                                                          id_member,
                                                          key,
                                                          token,
                                                          filter='all'):
        """Does a GET request to /members/{idMember}/customBoardBackgrounds.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all or none

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customBoardBackgrounds')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_custom_board_backgrounds_by_id_member(self,
                                                          id_member,
                                                          key,
                                                          token,
                                                          body):
        """Does a POST request to /members/{idMember}/customBoardBackgrounds.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersCustomBoardBackgrounds): Attributes of "Members
                Custom Board Backgrounds" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customBoardBackgrounds')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_members_custom_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                                    id_member,
                                                                                    id_board_background,
                                                                                    key,
                                                                                    token):
        """Does a DELETE request to /members/{idMember}/customBoardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customBoardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_custom_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                                 id_member,
                                                                                 id_board_background,
                                                                                 key,
                                                                                 token,
                                                                                 fields='all'):
        """Does a GET request to /members/{idMember}/customBoardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                brightness, fullSizeUrl, scaled or tile

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customBoardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_custom_board_backgrounds_by_id_member_by_id_board_background(self,
                                                                                    id_member,
                                                                                    id_board_background,
                                                                                    key,
                                                                                    token,
                                                                                    body):
        """Does a PUT request to /members/{idMember}/customBoardBackgrounds/{idBoardBackground}.

        Args:
            id_member (str): idMember or username
            id_board_background (str): idBoardBackground
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersCustomBoardBackgrounds): Attributes of "Members
                Custom Board Backgrounds" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customBoardBackgrounds/{idBoardBackground}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idBoardBackground')
                            .value(id_board_background)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_custom_emoji_by_id_member(self,
                                              id_member,
                                              key,
                                              token,
                                              filter='all'):
        """Does a GET request to /members/{idMember}/customEmoji.

        This gets the list of all of the user’s uploaded emoji

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all or none

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customEmoji')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_custom_emoji_by_id_member(self,
                                              id_member,
                                              key,
                                              token,
                                              body):
        """Does a POST request to /members/{idMember}/customEmoji.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersCustomEmoji): Attributes of "Members Custom Emoji" to
                be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customEmoji')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_custom_emoji_by_id_member_by_id_custom_emoji(self,
                                                                 id_member,
                                                                 id_custom_emoji,
                                                                 key,
                                                                 token,
                                                                 fields='all'):
        """Does a GET request to /members/{idMember}/customEmoji/{idCustomEmoji}.

        Args:
            id_member (str): idMember or username
            id_custom_emoji (str): idCustomEmoji
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: name or
                url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customEmoji/{idCustomEmoji}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCustomEmoji')
                            .value(id_custom_emoji)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_custom_stickers_by_id_member(self,
                                                 id_member,
                                                 key,
                                                 token,
                                                 filter='all'):
        """Does a GET request to /members/{idMember}/customStickers.

        This gets a list of all of the user’s uploaded stickers

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all or none

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customStickers')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_custom_stickers_by_id_member(self,
                                                 id_member,
                                                 key,
                                                 token,
                                                 body):
        """Does a POST request to /members/{idMember}/customStickers.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersCustomStickers): Attributes of "Members Custom
                Stickers" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customStickers')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_members_custom_stickers_by_id_member_by_id_custom_sticker(self,
                                                                         id_member,
                                                                         id_custom_sticker,
                                                                         key,
                                                                         token):
        """Does a DELETE request to /members/{idMember}/customStickers/{idCustomSticker}.

        Args:
            id_member (str): idMember or username
            id_custom_sticker (str): idCustomSticker
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customStickers/{idCustomSticker}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCustomSticker')
                            .value(id_custom_sticker)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_custom_stickers_by_id_member_by_id_custom_sticker(self,
                                                                      id_member,
                                                                      id_custom_sticker,
                                                                      key,
                                                                      token,
                                                                      fields='all'):
        """Does a GET request to /members/{idMember}/customStickers/{idCustomSticker}.

        Args:
            id_member (str): idMember or username
            id_custom_sticker (str): idCustomSticker
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: scaled
                or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/customStickers/{idCustomSticker}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCustomSticker')
                            .value(id_custom_sticker)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_deltas_by_id_member(self,
                                        id_member,
                                        tags,
                                        ix_last_update,
                                        key,
                                        token):
        """Does a GET request to /members/{idMember}/deltas.

        Args:
            id_member (str): idMember or username
            tags (str): A valid tag for subscribing
            ix_last_update (str): a number from -1 to Infinity
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/deltas')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('ixLastUpdate')
                         .value(ix_last_update))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_full_name_by_id_member(self,
                                              id_member,
                                              key,
                                              token,
                                              body):
        """Does a PUT request to /members/{idMember}/fullName.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersFullName): Attributes of "Members Full Name" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/fullName')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_initials_by_id_member(self,
                                             id_member,
                                             key,
                                             token,
                                             body):
        """Does a PUT request to /members/{idMember}/initials.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersInitials): Attributes of "Members Initials" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/initials')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_notifications_by_id_member(self,
                                               id_member,
                                               key,
                                               token,
                                               entities=None,
                                               display=None,
                                               filter='all',
                                               read_filter='all',
                                               fields='all',
                                               limit='50',
                                               page='0',
                                               before=None,
                                               since=None,
                                               member_creator=None,
                                               member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /members/{idMember}/notifications.

        You can only read the notifications for the member associated with the
        supplied token

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAdminToBoard, addAdminToOrganization,
                addedAttachmentToCard, addedMemberToCard, addedToBoard,
                addedToCard, addedToOrganization, cardDueSoon, changeCard,
                closeBoard, commentCard, createdCard,
                declinedInvitationToBoard, declinedInvitationToOrganization,
                invitedToBoard, invitedToOrganization, makeAdminOfBoard,
                makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard,
                removedFromBoard, removedFromCard, removedFromOrganization,
                removedMemberFromCard, unconfirmedInvitedToBoard,
                unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
            read_filter (str, optional): One of: all, read or unread
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator, type or unread
            limit (str, optional): a number from 1 to 1000
            page (str, optional): a number from 0 to 100
            before (str, optional): An id, or null
            since (str, optional): An id, or null
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/notifications')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('read_filter')
                         .value(read_filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_notifications_by_id_member_by_filter(self,
                                                         id_member,
                                                         filter,
                                                         key,
                                                         token):
        """Does a GET request to /members/{idMember}/notifications/{filter}.

        Args:
            id_member (str): idMember or username
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/notifications/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def add_members_one_time_messages_dismissed_by_id_member(self,
                                                             id_member,
                                                             key,
                                                             token,
                                                             body):
        """Does a POST request to /members/{idMember}/oneTimeMessagesDismissed.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersOneTimeMessagesDismissed): Attributes of "Members One
                Time Messages Dismissed" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/oneTimeMessagesDismissed')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_organizations_by_id_member(self,
                                               id_member,
                                               key,
                                               token,
                                               filter='all',
                                               fields='all',
                                               paid_account=None):
        """Does a GET request to /members/{idMember}/organizations.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all, members, none or public
            fields (str, optional): all or a comma-separated list of:
                billableMemberCount, desc, descData, displayName, idBoards,
                invitations, invited, logoHash, memberships, name, powerUps,
                prefs, premiumFeatures, products, url or website
            paid_account (str, optional): true or false

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/organizations')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('paid_account')
                         .value(paid_account))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_organizations_by_id_member_by_filter(self,
                                                         id_member,
                                                         filter,
                                                         key,
                                                         token):
        """Does a GET request to /members/{idMember}/organizations/{filter}.

        Args:
            id_member (str): idMember or username
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/organizations/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_members_organizations_invited_by_id_member(self,
                                                       id_member,
                                                       key,
                                                       token,
                                                       fields='all'):
        """Does a GET request to /members/{idMember}/organizationsInvited.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                billableMemberCount, desc, descData, displayName, idBoards,
                invitations, invited, logoHash, memberships, name, powerUps,
                prefs, premiumFeatures, products, url or website

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/organizationsInvited')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_organizations_invited_by_id_member_by_field(self,
                                                                id_member,
                                                                field,
                                                                key,
                                                                token):
        """Does a GET request to /members/{idMember}/organizationsInvited/{field}.

        Args:
            id_member (str): idMember or username
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/organizationsInvited/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_prefs_color_blind_by_id_member(self,
                                                      id_member,
                                                      key,
                                                      token,
                                                      body):
        """Does a PUT request to /members/{idMember}/prefs/colorBlind.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsColorBlind): Attributes of "Prefs Color Blind" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/prefs/colorBlind')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_prefs_locale_by_id_member(self,
                                                 id_member,
                                                 key,
                                                 token,
                                                 body):
        """Does a PUT request to /members/{idMember}/prefs/locale.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsLocale): Attributes of "Prefs Locale" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/prefs/locale')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_prefs_minutes_between_summaries_by_id_member(self,
                                                                    id_member,
                                                                    key,
                                                                    token,
                                                                    body):
        """Does a PUT request to /members/{idMember}/prefs/minutesBetweenSummaries.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsMinutesBetweenSummaries): Attributes of "Prefs Minutes
                Between Summaries" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/prefs/minutesBetweenSummaries')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_saved_searches_by_id_member(self,
                                                id_member,
                                                key,
                                                token):
        """Does a GET request to /members/{idMember}/savedSearches.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_members_saved_searches_by_id_member(self,
                                                id_member,
                                                key,
                                                token,
                                                body):
        """Does a POST request to /members/{idMember}/savedSearches.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersSavedSearches): Attributes of "Members Saved
                Searches" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_members_saved_searches_by_id_member_by_id_saved_search(self,
                                                                      id_member,
                                                                      id_saved_search,
                                                                      key,
                                                                      token):
        """Does a DELETE request to /members/{idMember}/savedSearches/{idSavedSearch}.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_saved_searches_by_id_member_by_id_saved_search(self,
                                                                   id_member,
                                                                   id_saved_search,
                                                                   key,
                                                                   token):
        """Does a GET request to /members/{idMember}/savedSearches/{idSavedSearch}.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_saved_searches_by_id_member_by_id_saved_search(self,
                                                                      id_member,
                                                                      id_saved_search,
                                                                      key,
                                                                      token,
                                                                      body):
        """Does a PUT request to /members/{idMember}/savedSearches/{idSavedSearch}.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersSavedSearches): Attributes of "Members Saved
                Searches" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_saved_searches_name_by_id_member_by_id_saved_search(self,
                                                                           id_member,
                                                                           id_saved_search,
                                                                           key,
                                                                           token,
                                                                           body):
        """Does a PUT request to /members/{idMember}/savedSearches/{idSavedSearch}/name.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersSavedSearchesName): Attributes of "Members Saved
                Searches Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_saved_searches_pos_by_id_member_by_id_saved_search(self,
                                                                          id_member,
                                                                          id_saved_search,
                                                                          key,
                                                                          token,
                                                                          body):
        """Does a PUT request to /members/{idMember}/savedSearches/{idSavedSearch}/pos.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersSavedSearchesPos): Attributes of "Members Saved
                Searches Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_saved_searches_query_by_id_member_by_id_saved_search(self,
                                                                            id_member,
                                                                            id_saved_search,
                                                                            key,
                                                                            token,
                                                                            body):
        """Does a PUT request to /members/{idMember}/savedSearches/{idSavedSearch}/query.

        Args:
            id_member (str): idMember or username
            id_saved_search (str): idSavedSearch
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersSavedSearchesQuery): Attributes of "Members Saved
                Searches Query" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/savedSearches/{idSavedSearch}/query')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSavedSearch')
                            .value(id_saved_search)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_tokens_by_id_member(self,
                                        id_member,
                                        key,
                                        token,
                                        filter='all'):
        """Does a GET request to /members/{idMember}/tokens.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all or none

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/tokens')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_members_username_by_id_member(self,
                                             id_member,
                                             key,
                                             token,
                                             body):
        """Does a PUT request to /members/{idMember}/username.

        Args:
            id_member (str): idMember or username
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MembersUsername): Attributes of "Members Username" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/username')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_members_by_id_member_by_field(self,
                                          id_member,
                                          field,
                                          key,
                                          token):
        """Does a GET request to /members/{idMember}/{field}.

        Args:
            id_member (str): idMember or username
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/members/{idMember}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
