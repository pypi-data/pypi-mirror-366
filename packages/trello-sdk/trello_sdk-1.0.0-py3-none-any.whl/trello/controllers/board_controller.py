# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class BoardController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(BoardController, self).__init__(config)

    def add_boards(self,
                   key,
                   token,
                   body):
        """Does a POST request to /boards.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Boards): Attributes of "Boards" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_by_id_board(self,
                               id_board,
                               key,
                               token,
                               actions=None,
                               actions_entities=None,
                               actions_display=None,
                               actions_format='list',
                               actions_since=None,
                               actions_limit='50',
                               action_fields='all',
                               action_member=None,
                               action_member_fields='avatarHash, fullName, initials and username',
                               action_member_creator=None,
                               action_member_creator_fields='avatarHash, fullName, initials and username',
                               cards='none',
                               card_fields='all',
                               card_attachments=None,
                               card_attachment_fields='all',
                               card_checklists='none',
                               card_stickers=None,
                               board_stars='none',
                               labels='none',
                               label_fields='all',
                               labels_limit='50',
                               lists='none',
                               list_fields='all',
                               memberships='none',
                               memberships_member=None,
                               memberships_member_fields='fullName and username',
                               members='none',
                               member_fields='avatarHash, initials, fullName, username and confirmed',
                               members_invited='none',
                               members_invited_fields='avatarHash, initials, fullName and username',
                               checklists='none',
                               checklist_fields='all',
                               organization=None,
                               organization_fields='name and displayName',
                               organization_memberships='none',
                               my_prefs=None,
                               fields='name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames'):
        """Does a GET request to /boards/{idBoard}.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_display (str, optional): true or false
            actions_format (str, optional): One of: count, list or minimal
            actions_since (str, optional): A date, null or lastView
            actions_limit (str, optional): a number from 0 to 1000
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            action_member (str, optional): true or false
            action_member_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            action_member_creator (str, optional): true or false
            action_member_creator_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            card_attachments (str, optional): A boolean value or
                &quot;cover&quot; for only card cover attachments
            card_attachment_fields (str, optional): all or a comma-separated
                list of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            card_checklists (str, optional): One of: all or none
            card_stickers (str, optional): true or false
            board_stars (str, optional): One of: mine or none
            labels (str, optional): One of: all or none
            label_fields (str, optional): all or a comma-separated list of:
                color, idBoard, name or uses
            labels_limit (str, optional): a number from 0 to 1000
            lists (str, optional): One of: all, closed, none or open
            list_fields (str, optional): all or a comma-separated list of:
                closed, idBoard, name, pos or subscribed
            memberships (str, optional): all or a comma-separated list of:
                active, admin, deactivated, me or normal
            memberships_member (str, optional): true or false
            memberships_member_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            members (str, optional): One of: admins, all, none, normal or
                owners
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            members_invited (str, optional): One of: admins, all, none, normal
                or owners
            members_invited_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            checklists (str, optional): One of: all or none
            checklist_fields (str, optional): all or a comma-separated list
                of: idBoard, idCard, name or pos
            organization (str, optional): true or false
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            organization_memberships (str, optional): all or a comma-separated
                list of: active, admin, deactivated, me or normal
            my_prefs (str, optional): true or false
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_display')
                         .value(actions_display))
            .query_param(Parameter()
                         .key('actions_format')
                         .value(actions_format))
            .query_param(Parameter()
                         .key('actions_since')
                         .value(actions_since))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('action_member')
                         .value(action_member))
            .query_param(Parameter()
                         .key('action_member_fields')
                         .value(action_member_fields))
            .query_param(Parameter()
                         .key('action_memberCreator')
                         .value(action_member_creator))
            .query_param(Parameter()
                         .key('action_memberCreator_fields')
                         .value(action_member_creator_fields))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('card_attachments')
                         .value(card_attachments))
            .query_param(Parameter()
                         .key('card_attachment_fields')
                         .value(card_attachment_fields))
            .query_param(Parameter()
                         .key('card_checklists')
                         .value(card_checklists))
            .query_param(Parameter()
                         .key('card_stickers')
                         .value(card_stickers))
            .query_param(Parameter()
                         .key('boardStars')
                         .value(board_stars))
            .query_param(Parameter()
                         .key('labels')
                         .value(labels))
            .query_param(Parameter()
                         .key('label_fields')
                         .value(label_fields))
            .query_param(Parameter()
                         .key('labels_limit')
                         .value(labels_limit))
            .query_param(Parameter()
                         .key('lists')
                         .value(lists))
            .query_param(Parameter()
                         .key('list_fields')
                         .value(list_fields))
            .query_param(Parameter()
                         .key('memberships')
                         .value(memberships))
            .query_param(Parameter()
                         .key('memberships_member')
                         .value(memberships_member))
            .query_param(Parameter()
                         .key('memberships_member_fields')
                         .value(memberships_member_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('membersInvited')
                         .value(members_invited))
            .query_param(Parameter()
                         .key('membersInvited_fields')
                         .value(members_invited_fields))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('checklist_fields')
                         .value(checklist_fields))
            .query_param(Parameter()
                         .key('organization')
                         .value(organization))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('organization_memberships')
                         .value(organization_memberships))
            .query_param(Parameter()
                         .key('myPrefs')
                         .value(my_prefs))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_by_id_board(self,
                                  id_board,
                                  key,
                                  token,
                                  body):
        """Does a PUT request to /boards/{idBoard}.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Boards): Attributes of "Boards" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_actions_by_id_board(self,
                                       id_board,
                                       key,
                                       token,
                                       entities=None,
                                       display=None,
                                       filter='all',
                                       fields='all',
                                       limit='50',
                                       format='list',
                                       since=None,
                                       before=None,
                                       page='0',
                                       id_models=None,
                                       member=None,
                                       member_fields='avatarHash, fullName, initials and username',
                                       member_creator=None,
                                       member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /boards/{idBoard}/actions.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator or type
            limit (str, optional): a number from 0 to 1000
            format (str, optional): One of: count, list or minimal
            since (str, optional): A date, null or lastView
            before (str, optional): A date, or null
            page (str, optional): Page * limit must be less than 1000
            id_models (str, optional): Only return actions related to these
                model ids
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('idModels')
                         .value(id_models))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_board_stars_by_id_board(self,
                                           id_board,
                                           key,
                                           token,
                                           filter='mine'):
        """Does a GET request to /boards/{idBoard}/boardStars.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: mine or none

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/boardStars')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_calendar_key_generate_by_id_board(self,
                                                     id_board,
                                                     key,
                                                     token):
        """Does a POST request to /boards/{idBoard}/calendarKey/generate.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/calendarKey/generate')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_cards_by_id_board(self,
                                     id_board,
                                     key,
                                     token,
                                     actions=None,
                                     attachments=None,
                                     attachment_fields='all',
                                     stickers=None,
                                     members=None,
                                     member_fields='avatarHash, fullName, initials and username',
                                     check_item_states=None,
                                     checklists='none',
                                     limit=None,
                                     since=None,
                                     before=None,
                                     filter='visible',
                                     fields='all'):
        """Does a GET request to /boards/{idBoard}/cards.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            stickers (str, optional): true or false
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            limit (str, optional): a number from 1 to 1000
            since (str, optional): A date, or null
            before (str, optional): A date, or null
            filter (str, optional): One of: all, closed, none, open or visible
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('stickers')
                         .value(stickers))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_cards_by_id_board_by_filter(self,
                                               id_board,
                                               filter,
                                               key,
                                               token):
        """Does a GET request to /boards/{idBoard}/cards/{filter}.

        Args:
            id_board (str): board_id
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/cards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_boards_cards_by_id_board_by_id_card(self,
                                                id_board,
                                                id_card,
                                                key,
                                                token,
                                                attachments=None,
                                                attachment_fields='all',
                                                actions=None,
                                                actions_entities=None,
                                                actions_display=None,
                                                actions_limit='50',
                                                action_fields='all',
                                                action_member_creator_fields='avatarHash, fullName, initials and username',
                                                members=None,
                                                member_fields='avatarHash, initials, fullName and username',
                                                check_item_states=None,
                                                check_item_state_fields='all',
                                                labels=None,
                                                checklists='none',
                                                checklist_fields='all',
                                                fields='all'):
        """Does a GET request to /boards/{idBoard}/cards/{idCard}.

        Args:
            id_board (str): board_id
            id_card (str): idCard
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_display (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            action_member_creator_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            check_item_state_fields (str, optional): all or a comma-separated
                list of: idCheckItem or state
            labels (str, optional): true or false
            checklists (str, optional): One of: all or none
            checklist_fields (str, optional): all or a comma-separated list
                of: idBoard, idCard, name or pos
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/cards/{idCard}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_display')
                         .value(actions_display))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('action_memberCreator_fields')
                         .value(action_member_creator_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checkItemState_fields')
                         .value(check_item_state_fields))
            .query_param(Parameter()
                         .key('labels')
                         .value(labels))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('checklist_fields')
                         .value(checklist_fields))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_checklists_by_id_board(self,
                                          id_board,
                                          key,
                                          token,
                                          cards='none',
                                          card_fields='all',
                                          check_items='all',
                                          check_item_fields='name, nameData, pos and state',
                                          filter='all',
                                          fields='all'):
        """Does a GET request to /boards/{idBoard}/checklists.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            check_items (str, optional): One of: all or none
            check_item_fields (str, optional): all or a comma-separated list
                of: name, nameData, pos, state or type
            filter (str, optional): One of: all or none
            fields (str, optional): all or a comma-separated list of: idBoard,
                idCard, name or pos

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/checklists')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('checkItems')
                         .value(check_items))
            .query_param(Parameter()
                         .key('checkItem_fields')
                         .value(check_item_fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_checklists_by_id_board(self,
                                          id_board,
                                          key,
                                          token,
                                          body):
        """Does a POST request to /boards/{idBoard}/checklists.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsChecklists): Attributes of "Boards Checklists" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/checklists')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_closed_by_id_board(self,
                                         id_board,
                                         key,
                                         token,
                                         body):
        """Does a PUT request to /boards/{idBoard}/closed.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsClosed): Attributes of "Boards Closed" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/closed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_deltas_by_id_board(self,
                                      id_board,
                                      tags,
                                      ix_last_update,
                                      key,
                                      token):
        """Does a GET request to /boards/{idBoard}/deltas.

        Args:
            id_board (str): board_id
            tags (str): A valid tag for subscribing
            ix_last_update (str): a number from -1 to Infinity
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/deltas')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('ixLastUpdate')
                         .value(ix_last_update))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_desc_by_id_board(self,
                                       id_board,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /boards/{idBoard}/desc.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsDesc): Attributes of "Boards Desc" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/desc')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_email_key_generate_by_id_board(self,
                                                  id_board,
                                                  key,
                                                  token):
        """Does a POST request to /boards/{idBoard}/emailKey/generate.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/emailKey/generate')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_id_organization_by_id_board(self,
                                                  id_board,
                                                  key,
                                                  token,
                                                  body):
        """Does a PUT request to /boards/{idBoard}/idOrganization.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsIdOrganization): Attributes of "Boards Id
                Organization" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/idOrganization')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_blue_by_id_board(self,
                                                   id_board,
                                                   key,
                                                   token,
                                                   body):
        """Does a PUT request to /boards/{idBoard}/labelNames/blue.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesBlue): Attributes of "Label Names Blue" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/blue')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_green_by_id_board(self,
                                                    id_board,
                                                    key,
                                                    token,
                                                    body):
        """Does a PUT request to /boards/{idBoard}/labelNames/green.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesGreen): Attributes of "Label Names Green" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/green')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_orange_by_id_board(self,
                                                     id_board,
                                                     key,
                                                     token,
                                                     body):
        """Does a PUT request to /boards/{idBoard}/labelNames/orange.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesOrange): Attributes of "Label Names Orange" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/orange')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_purple_by_id_board(self,
                                                     id_board,
                                                     key,
                                                     token,
                                                     body):
        """Does a PUT request to /boards/{idBoard}/labelNames/purple.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesPurple): Attributes of "Label Names Purple" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/purple')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_red_by_id_board(self,
                                                  id_board,
                                                  key,
                                                  token,
                                                  body):
        """Does a PUT request to /boards/{idBoard}/labelNames/red.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesRed): Attributes of "Label Names Red" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/red')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_label_names_yellow_by_id_board(self,
                                                     id_board,
                                                     key,
                                                     token,
                                                     body):
        """Does a PUT request to /boards/{idBoard}/labelNames/yellow.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (LabelNamesYellow): Attributes of "Label Names Yellow" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labelNames/yellow')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_labels_by_id_board(self,
                                      id_board,
                                      key,
                                      token,
                                      fields='all',
                                      limit='50'):
        """Does a GET request to /boards/{idBoard}/labels.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: color,
                idBoard, name or uses
            limit (str, optional): a number from 0 to 1000

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labels')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_labels_by_id_board(self,
                                      id_board,
                                      key,
                                      token,
                                      body):
        """Does a POST request to /boards/{idBoard}/labels.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsLabels): Attributes of "Boards Labels" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labels')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_labels_by_id_board_by_id_label(self,
                                                  id_board,
                                                  id_label,
                                                  key,
                                                  token,
                                                  fields='all'):
        """Does a GET request to /boards/{idBoard}/labels/{idLabel}.

        Args:
            id_board (str): board_id
            id_label (str): idLabel
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: color,
                idBoard, name or uses

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/labels/{idLabel}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idLabel')
                            .value(id_label)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_lists_by_id_board(self,
                                     id_board,
                                     key,
                                     token,
                                     cards='none',
                                     card_fields='all',
                                     filter='open',
                                     fields='all'):
        """Does a GET request to /boards/{idBoard}/lists.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            filter (str, optional): One of: all, closed, none or open
            fields (str, optional): all or a comma-separated list of: closed,
                idBoard, name, pos or subscribed

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/lists')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_lists_by_id_board(self,
                                     id_board,
                                     key,
                                     token,
                                     body):
        """Does a POST request to /boards/{idBoard}/lists.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsLists): Attributes of "Boards Lists" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/lists')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_lists_by_id_board_by_filter(self,
                                               id_board,
                                               filter,
                                               key,
                                               token):
        """Does a GET request to /boards/{idBoard}/lists/{filter}.

        Args:
            id_board (str): board_id
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/lists/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def add_boards_mark_as_viewed_by_id_board(self,
                                              id_board,
                                              key,
                                              token):
        """Does a POST request to /boards/{idBoard}/markAsViewed.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/markAsViewed')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_members_by_id_board(self,
                                       id_board,
                                       key,
                                       token,
                                       filter='all',
                                       fields='fullName and username',
                                       activity=None):
        """Does a GET request to /boards/{idBoard}/members.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: admins, all, none, normal or owners
            fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            activity (str, optional): true or false ; works for premium
                organizations only.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('activity')
                         .value(activity))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_members_by_id_board(self,
                                          id_board,
                                          key,
                                          token,
                                          body):
        """Does a PUT request to /boards/{idBoard}/members.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsMembers): Attributes of "Boards Members" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_members_by_id_board_by_filter(self,
                                                 id_board,
                                                 filter,
                                                 key,
                                                 token):
        """Does a GET request to /boards/{idBoard}/members/{filter}.

        Args:
            id_board (str): board_id
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def delete_boards_members_by_id_board_by_id_member(self,
                                                       id_board,
                                                       id_member,
                                                       key,
                                                       token):
        """Does a DELETE request to /boards/{idBoard}/members/{idMember}.

        Args:
            id_board (str): board_id
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members/{idMember}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_members_by_id_board_by_id_member(self,
                                                       id_board,
                                                       id_member,
                                                       key,
                                                       token,
                                                       body):
        """Does a PUT request to /boards/{idBoard}/members/{idMember}.

        Args:
            id_board (str): board_id
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsMembers): Attributes of "Boards Members" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members/{idMember}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_members_cards_by_id_board_by_id_member(self,
                                                          id_board,
                                                          id_member,
                                                          key,
                                                          token,
                                                          actions=None,
                                                          attachments=None,
                                                          attachment_fields='all',
                                                          members=None,
                                                          member_fields='avatarHash, fullName, initials and username',
                                                          check_item_states=None,
                                                          checklists='none',
                                                          board=None,
                                                          board_fields='name, desc, closed, idOrganization, pinned, url and prefs',
                                                          list=None,
                                                          list_fields='all',
                                                          filter='visible',
                                                          fields='all'):
        """Does a GET request to /boards/{idBoard}/members/{idMember}/cards.

        Args:
            id_board (str): board_id
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            board (str, optional): true or false
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            list (str, optional): true or false
            list_fields (str, optional): all or a comma-separated list of:
                closed, idBoard, name, pos or subscribed
            filter (str, optional): One of: all, closed, none, open or visible
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/members/{idMember}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('board')
                         .value(board))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('list')
                         .value(list))
            .query_param(Parameter()
                         .key('list_fields')
                         .value(list_fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_members_invited_by_id_board(self,
                                               id_board,
                                               key,
                                               token,
                                               fields='all'):
        """Does a GET request to /boards/{idBoard}/membersInvited.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, avatarSource, bio, bioData, confirmed, email,
                fullName, gravatarHash, idBoards, idBoardsPinned,
                idOrganizations, idPremOrgsAdmin, initials, loginTypes,
                memberType, oneTimeMessagesDismissed, prefs, premiumFeatures,
                products, status, status, trophies, uploadedAvatarHash, url or
                username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/membersInvited')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_members_invited_by_id_board_by_field(self,
                                                        id_board,
                                                        field,
                                                        key,
                                                        token):
        """Does a GET request to /boards/{idBoard}/membersInvited/{field}.

        Args:
            id_board (str): board_id
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/membersInvited/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_memberships_by_id_board(self,
                                           id_board,
                                           key,
                                           token,
                                           filter='all',
                                           member=None,
                                           member_fields='fullName and username'):
        """Does a GET request to /boards/{idBoard}/memberships.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): all or a comma-separated list of: active,
                admin, deactivated, me or normal
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/memberships')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_memberships_by_id_board_by_id_membership(self,
                                                            id_board,
                                                            id_membership,
                                                            key,
                                                            token,
                                                            member=None,
                                                            member_fields='fullName and username'):
        """Does a GET request to /boards/{idBoard}/memberships/{idMembership}.

        Args:
            id_board (str): board_id
            id_membership (str): idMembership
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/memberships/{idMembership}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMembership')
                            .value(id_membership)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_memberships_by_id_board_by_id_membership(self,
                                                               id_board,
                                                               id_membership,
                                                               key,
                                                               token,
                                                               body):
        """Does a PUT request to /boards/{idBoard}/memberships/{idMembership}.

        Args:
            id_board (str): board_id
            id_membership (str): idMembership
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsMemberships): Attributes of "Boards Memberships" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/memberships/{idMembership}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMembership')
                            .value(id_membership)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_my_prefs_by_id_board(self,
                                        id_board,
                                        key,
                                        token):
        """Does a GET request to /boards/{idBoard}/myPrefs.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_email_position_by_id_board(self,
                                                          id_board,
                                                          key,
                                                          token,
                                                          body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/emailPosition.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsEmailPosition): Attributes of "My Prefs Email
                Position" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/emailPosition')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_id_email_list_by_id_board(self,
                                                         id_board,
                                                         key,
                                                         token,
                                                         body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/idEmailList.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsIdEmailList): Attributes of "My Prefs Id Email List"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/idEmailList')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_show_list_guide_by_id_board(self,
                                                           id_board,
                                                           key,
                                                           token,
                                                           body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/showListGuide.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsShowListGuide): Attributes of "My Prefs Show List
                Guide" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/showListGuide')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_show_sidebar_by_id_board(self,
                                                        id_board,
                                                        key,
                                                        token,
                                                        body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/showSidebar.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsShowSidebar): Attributes of "My Prefs Show Sidebar"
                to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/showSidebar')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_show_sidebar_activity_by_id_board(self,
                                                                 id_board,
                                                                 key,
                                                                 token,
                                                                 body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/showSidebarActivity.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsShowSidebarActivity): Attributes of "My Prefs Show
                Sidebar Activity" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/showSidebarActivity')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_show_sidebar_board_actions_by_id_board(self,
                                                                      id_board,
                                                                      key,
                                                                      token,
                                                                      body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/showSidebarBoardActions.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsShowSidebarBoardActions): Attributes of "My Prefs
                Show Sidebar Board Actions" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/showSidebarBoardActions')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_my_prefs_show_sidebar_members_by_id_board(self,
                                                                id_board,
                                                                key,
                                                                token,
                                                                body):
        """Does a PUT request to /boards/{idBoard}/myPrefs/showSidebarMembers.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (MyPrefsShowSidebarMembers): Attributes of "My Prefs Show
                Sidebar Members" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/myPrefs/showSidebarMembers')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_name_by_id_board(self,
                                       id_board,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /boards/{idBoard}/name.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsName): Attributes of "Boards Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_organization_by_id_board(self,
                                            id_board,
                                            key,
                                            token,
                                            fields='all'):
        """Does a GET request to /boards/{idBoard}/organization.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                billableMemberCount, desc, descData, displayName, idBoards,
                invitations, invited, logoHash, memberships, name, powerUps,
                prefs, premiumFeatures, products, url or website

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/organization')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_organization_by_id_board_by_field(self,
                                                     id_board,
                                                     field,
                                                     key,
                                                     token):
        """Does a GET request to /boards/{idBoard}/organization/{field}.

        Args:
            id_board (str): board_id
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/organization/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_boards_power_ups_by_id_board(self,
                                         id_board,
                                         key,
                                         token,
                                         body):
        """Does a POST request to /boards/{idBoard}/powerUps.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsPowerUps): Attributes of "Boards Power Ups" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/powerUps')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_boards_power_ups_by_id_board_by_power_up(self,
                                                        id_board,
                                                        power_up,
                                                        key,
                                                        token):
        """Does a DELETE request to /boards/{idBoard}/powerUps/{powerUp}.

        Args:
            id_board (str): board_id
            power_up (str): powerUp
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/powerUps/{powerUp}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('powerUp')
                            .value(power_up)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_background_by_id_board(self,
                                                   id_board,
                                                   key,
                                                   token,
                                                   body):
        """Does a PUT request to /boards/{idBoard}/prefs/background.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsBackground): Attributes of "Prefs Background" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/background')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_calendar_feed_enabled_by_id_board(self,
                                                              id_board,
                                                              key,
                                                              token,
                                                              body):
        """Does a PUT request to /boards/{idBoard}/prefs/calendarFeedEnabled.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsCalendarFeedEnabled): Attributes of "Prefs Calendar
                Feed Enabled" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/calendarFeedEnabled')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_card_aging_by_id_board(self,
                                                   id_board,
                                                   key,
                                                   token,
                                                   body):
        """Does a PUT request to /boards/{idBoard}/prefs/cardAging.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsCardAging): Attributes of "Prefs Card Aging" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/cardAging')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_card_covers_by_id_board(self,
                                                    id_board,
                                                    key,
                                                    token,
                                                    body):
        """Does a PUT request to /boards/{idBoard}/prefs/cardCovers.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsCardCovers): Attributes of "Prefs Card Covers" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/cardCovers')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_comments_by_id_board(self,
                                                 id_board,
                                                 key,
                                                 token,
                                                 body):
        """Does a PUT request to /boards/{idBoard}/prefs/comments.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsComments): Attributes of "Prefs Comments" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/comments')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_invitations_by_id_board(self,
                                                    id_board,
                                                    key,
                                                    token,
                                                    body):
        """Does a PUT request to /boards/{idBoard}/prefs/invitations.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsInvitations): Attributes of "Prefs Invitations" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/invitations')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_permission_level_by_id_board(self,
                                                         id_board,
                                                         key,
                                                         token,
                                                         body):
        """Does a PUT request to /boards/{idBoard}/prefs/permissionLevel.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsPermissionLevel): Attributes of "Prefs Permission
                Level" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/permissionLevel')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_self_join_by_id_board(self,
                                                  id_board,
                                                  key,
                                                  token,
                                                  body):
        """Does a PUT request to /boards/{idBoard}/prefs/selfJoin.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsSelfJoin): Attributes of "Prefs Self Join" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/selfJoin')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_prefs_voting_by_id_board(self,
                                               id_board,
                                               key,
                                               token,
                                               body):
        """Does a PUT request to /boards/{idBoard}/prefs/voting.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (PrefsVoting): Attributes of "Prefs Voting" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/prefs/voting')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_boards_subscribed_by_id_board(self,
                                             id_board,
                                             key,
                                             token,
                                             body):
        """Does a PUT request to /boards/{idBoard}/subscribed.

        Args:
            id_board (str): board_id
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (BoardsSubscribed): Attributes of "Boards Subscribed" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/subscribed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_boards_by_id_board_by_field(self,
                                        id_board,
                                        field,
                                        key,
                                        token):
        """Does a GET request to /boards/{idBoard}/{field}.

        Args:
            id_board (str): board_id
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/boards/{idBoard}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idBoard')
                            .value(id_board)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
