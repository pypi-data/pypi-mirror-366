# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class CardController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(CardController, self).__init__(config)

    def add_cards(self,
                  key,
                  token,
                  body):
        """Does a POST request to /cards.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Cards): Attributes of "Cards" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_by_id_card(self,
                                id_card,
                                key,
                                token):
        """Does a DELETE request to /cards/{idCard}.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_by_id_card(self,
                             id_card,
                             key,
                             token,
                             actions=None,
                             actions_entities=None,
                             actions_display=None,
                             actions_limit='50',
                             action_fields='all',
                             action_member_creator_fields='avatarHash, fullName, initials and username',
                             attachments=None,
                             attachment_fields='all',
                             members=None,
                             member_fields='avatarHash, fullName, initials and username',
                             members_voted=None,
                             member_voted_fields='avatarHash, fullName, initials and username',
                             check_item_states=None,
                             check_item_state_fields='all',
                             checklists='none',
                             checklist_fields='all',
                             board=None,
                             board_fields='name, desc, descData, closed, idOrganization, pinned, url and prefs',
                             list=None,
                             list_fields='all',
                             stickers=None,
                             sticker_fields='all',
                             fields='badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url'):
        """Does a GET request to /cards/{idCard}.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            actions_entities (str, optional): true or false
            actions_display (str, optional): true or false
            actions_limit (str, optional): a number from 0 to 1000
            action_fields (str, optional): all or a comma-separated list of:
                data, date, idMemberCreator or type
            action_member_creator_fields (str, optional): all or a
                comma-separated list of: avatarHash, bio, bioData, confirmed,
                fullName, idPremOrgsAdmin, initials, memberType, products,
                status, url or username
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            members_voted (str, optional): true or false
            member_voted_fields (str, optional): all or a comma-separated list
                of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            check_item_state_fields (str, optional): all or a comma-separated
                list of: idCheckItem or state
            checklists (str, optional): One of: all or none
            checklist_fields (str, optional): all or a comma-separated list
                of: idBoard, idCard, name or pos
            board (str, optional): true or false
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            list (str, optional): true or false
            list_fields (str, optional): all or a comma-separated list of:
                closed, idBoard, name, pos or subscribed
            stickers (str, optional): true or false
            sticker_fields (str, optional): all or a comma-separated list of:
                image, imageScaled, imageUrl, left, rotate, top or zIndex
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('actions_entities')
                         .value(actions_entities))
            .query_param(Parameter()
                         .key('actions_display')
                         .value(actions_display))
            .query_param(Parameter()
                         .key('actions_limit')
                         .value(actions_limit))
            .query_param(Parameter()
                         .key('action_fields')
                         .value(action_fields))
            .query_param(Parameter()
                         .key('action_memberCreator_fields')
                         .value(action_member_creator_fields))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('membersVoted')
                         .value(members_voted))
            .query_param(Parameter()
                         .key('memberVoted_fields')
                         .value(member_voted_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checkItemState_fields')
                         .value(check_item_state_fields))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('checklist_fields')
                         .value(checklist_fields))
            .query_param(Parameter()
                         .key('board')
                         .value(board))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('list')
                         .value(list))
            .query_param(Parameter()
                         .key('list_fields')
                         .value(list_fields))
            .query_param(Parameter()
                         .key('stickers')
                         .value(stickers))
            .query_param(Parameter()
                         .key('sticker_fields')
                         .value(sticker_fields))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_by_id_card(self,
                                id_card,
                                key,
                                token,
                                body):
        """Does a PUT request to /cards/{idCard}.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Cards): Attributes of "Cards" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_actions_by_id_card(self,
                                     id_card,
                                     key,
                                     token,
                                     entities=None,
                                     display=None,
                                     filter='commentCard and updateCard:idList',
                                     fields='all',
                                     limit='50',
                                     format='list',
                                     since=None,
                                     before=None,
                                     page='0',
                                     id_models=None,
                                     member=None,
                                     member_fields='avatarHash, fullName, initials and username',
                                     member_creator=None,
                                     member_creator_fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /cards/{idCard}/actions.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            entities (str, optional): true or false
            display (str, optional): true or false
            filter (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            fields (str, optional): all or a comma-separated list of: data,
                date, idMemberCreator or type
            limit (str, optional): a number from 0 to 1000
            format (str, optional): One of: count, list or minimal
            since (str, optional): A date, null or lastView
            before (str, optional): A date, or null
            page (str, optional): Page * limit must be less than 1000
            id_models (str, optional): Only return actions related to these
                model ids
            member (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            member_creator (str, optional): true or false
            member_creator_fields (str, optional): all or a comma-separated
                list of: avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('entities')
                         .value(entities))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('format')
                         .value(format))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('idModels')
                         .value(id_models))
            .query_param(Parameter()
                         .key('member')
                         .value(member))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('memberCreator')
                         .value(member_creator))
            .query_param(Parameter()
                         .key('memberCreator_fields')
                         .value(member_creator_fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_actions_comments_by_id_card(self,
                                              id_card,
                                              key,
                                              token,
                                              body):
        """Does a POST request to /cards/{idCard}/actions/comments.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ActionsComments): Attributes of "Actions Comments" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/actions/comments')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_actions_comments_by_id_card_by_id_action(self,
                                                              id_card,
                                                              id_action,
                                                              key,
                                                              token):
        """Does a DELETE request to /cards/{idCard}/actions/{idAction}/comments.

        This can only be done by the original author of the comment, or
        someone with higher permissions than the original author.

        Args:
            id_card (str): card id or shortlink
            id_action (str): idAction
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/actions/{idAction}/comments')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idAction')
                            .value(id_action)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_actions_comments_by_id_card_by_id_action(self,
                                                              id_card,
                                                              id_action,
                                                              key,
                                                              token,
                                                              body):
        """Does a PUT request to /cards/{idCard}/actions/{idAction}/comments.

        This can only be done by the original author of the comment.

        Args:
            id_card (str): card id or shortlink
            id_action (str): idAction
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsActionsComments): Attributes of "Cards Actions
                Comments" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/actions/{idAction}/comments')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idAction')
                            .value(id_action)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_attachments_by_id_card(self,
                                         id_card,
                                         key,
                                         token,
                                         fields='all',
                                         filter=None):
        """Does a GET request to /cards/{idCard}/attachments.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: bytes,
                date, edgeColor, idMember, isUpload, mimeType, name, previews
                or url
            filter (str, optional): A boolean value or &quot;cover&quot; for
                only card cover attachments

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/attachments')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_attachments_by_id_card(self,
                                         id_card,
                                         key,
                                         token,
                                         body):
        """Does a POST request to /cards/{idCard}/attachments.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsAttachments): Attributes of "Cards Attachments" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/attachments')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_attachments_by_id_card_by_id_attachment(self,
                                                             id_card,
                                                             id_attachment,
                                                             key,
                                                             token):
        """Does a DELETE request to /cards/{idCard}/attachments/{idAttachment}.

        Args:
            id_card (str): card id or shortlink
            id_attachment (str): idAttachment
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/attachments/{idAttachment}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idAttachment')
                            .value(id_attachment)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_attachments_by_id_card_by_id_attachment(self,
                                                          id_card,
                                                          id_attachment,
                                                          key,
                                                          token,
                                                          fields='all'):
        """Does a GET request to /cards/{idCard}/attachments/{idAttachment}.

        Args:
            id_card (str): card id or shortlink
            id_attachment (str): idAttachment
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: bytes,
                date, edgeColor, idMember, isUpload, mimeType, name, previews
                or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/attachments/{idAttachment}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idAttachment')
                            .value(id_attachment)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_board_by_id_card(self,
                                   id_card,
                                   key,
                                   token,
                                   fields='all'):
        """Does a GET request to /cards/{idCard}/board.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/board')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_board_by_id_card_by_field(self,
                                            id_card,
                                            field,
                                            key,
                                            token):
        """Does a GET request to /cards/{idCard}/board/{field}.

        Args:
            id_card (str): card id or shortlink
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/board/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_check_item_states_by_id_card(self,
                                               id_card,
                                               key,
                                               token,
                                               fields='all'):
        """Does a GET request to /cards/{idCard}/checkItemStates.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                idCheckItem or state

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checkItemStates')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_checklist_check_item_by_id_card_by_id_checklist_current_by_id_check_item(self,
                                                                                              id_card,
                                                                                              id_checklist_current,
                                                                                              id_check_item,
                                                                                              key,
                                                                                              token,
                                                                                              body):
        """Does a PUT request to /cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}.

        Args:
            id_card (str): card id or shortlink
            id_checklist_current (str): idChecklistCurrent
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklistIdChecklistCurrentCheckItem): Attributes of
                "Cards Checklist Id Checklist Current Check Item" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklistCurrent')
                            .value(id_checklist_current)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_checklist_check_item_by_id_card_by_id_checklist(self,
                                                                  id_card,
                                                                  id_checklist,
                                                                  key,
                                                                  token,
                                                                  body):
        """Does a POST request to /cards/{idCard}/checklist/{idChecklist}/checkItem.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklistCheckItem): Attributes of "Cards Checklist
                Check Item" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_checklist_check_item_by_id_card_by_id_checklist_by_id_check_item(self,
                                                                                      id_card,
                                                                                      id_checklist,
                                                                                      id_check_item,
                                                                                      key,
                                                                                      token):
        """Does a DELETE request to /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_checklist_check_item_convert_to_card_by_id_card_by_id_checklist_by_id_check_item(self,
                                                                                                   id_card,
                                                                                                   id_checklist,
                                                                                                   id_check_item,
                                                                                                   key,
                                                                                                   token):
        """Does a POST request to /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_checklist_check_item_name_by_id_card_by_id_checklist_by_id_check_item(self,
                                                                                           id_card,
                                                                                           id_checklist,
                                                                                           id_check_item,
                                                                                           key,
                                                                                           token,
                                                                                           body):
        """Does a PUT request to /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklistCheckItemName): Attributes of "Cards Checklist
                Check Item Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_checklist_check_item_pos_by_id_card_by_id_checklist_by_id_check_item(self,
                                                                                          id_card,
                                                                                          id_checklist,
                                                                                          id_check_item,
                                                                                          key,
                                                                                          token,
                                                                                          body):
        """Does a PUT request to /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklistCheckItemPos): Attributes of "Cards Checklist
                Check Item Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_checklist_check_item_state_by_id_card_by_id_checklist_by_id_check_item(self,
                                                                                            id_card,
                                                                                            id_checklist,
                                                                                            id_check_item,
                                                                                            key,
                                                                                            token,
                                                                                            body):
        """Does a PUT request to /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklistCheckItemState): Attributes of "Cards
                Checklist Check Item State" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_checklists_by_id_card(self,
                                        id_card,
                                        key,
                                        token,
                                        cards='none',
                                        card_fields='all',
                                        check_items='all',
                                        check_item_fields='name, nameData, pos and state',
                                        filter='all',
                                        fields='all'):
        """Does a GET request to /cards/{idCard}/checklists.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            check_items (str, optional): One of: all or none
            check_item_fields (str, optional): all or a comma-separated list
                of: name, nameData, pos, state or type
            filter (str, optional): One of: all or none
            fields (str, optional): all or a comma-separated list of: idBoard,
                idCard, name or pos

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklists')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('checkItems')
                         .value(check_items))
            .query_param(Parameter()
                         .key('checkItem_fields')
                         .value(check_item_fields))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_checklists_by_id_card(self,
                                        id_card,
                                        key,
                                        token,
                                        body):
        """Does a POST request to /cards/{idCard}/checklists.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsChecklists): Attributes of "Cards Checklists" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklists')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_checklists_by_id_card_by_id_checklist(self,
                                                           id_card,
                                                           id_checklist,
                                                           key,
                                                           token):
        """Does a DELETE request to /cards/{idCard}/checklists/{idChecklist}.

        Args:
            id_card (str): card id or shortlink
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/checklists/{idChecklist}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_closed_by_id_card(self,
                                       id_card,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /cards/{idCard}/closed.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsClosed): Attributes of "Cards Closed" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/closed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_desc_by_id_card(self,
                                     id_card,
                                     key,
                                     token,
                                     body):
        """Does a PUT request to /cards/{idCard}/desc.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsDesc): Attributes of "Cards Desc" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/desc')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_due_by_id_card(self,
                                    id_card,
                                    key,
                                    token,
                                    body):
        """Does a PUT request to /cards/{idCard}/due.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsDue): Attributes of "Cards Due" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/due')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_id_attachment_cover_by_id_card(self,
                                                    id_card,
                                                    key,
                                                    token,
                                                    body):
        """Does a PUT request to /cards/{idCard}/idAttachmentCover.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdAttachmentCover): Attributes of "Cards Id Attachment
                Cover" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idAttachmentCover')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_id_board_by_id_card(self,
                                         id_card,
                                         key,
                                         token,
                                         body):
        """Does a PUT request to /cards/{idCard}/idBoard.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdBoard): Attributes of "Cards Id Board" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idBoard')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_id_labels_by_id_card(self,
                                       id_card,
                                       key,
                                       token,
                                       body):
        """Does a POST request to /cards/{idCard}/idLabels.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdLabels): Attributes of "Cards Id Labels" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idLabels')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_id_labels_by_id_card_by_id_label(self,
                                                      id_card,
                                                      id_label,
                                                      key,
                                                      token):
        """Does a DELETE request to /cards/{idCard}/idLabels/{idLabel}.

        Args:
            id_card (str): card id or shortlink
            id_label (str): idLabel
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idLabels/{idLabel}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idLabel')
                            .value(id_label)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_id_list_by_id_card(self,
                                        id_card,
                                        key,
                                        token,
                                        body):
        """Does a PUT request to /cards/{idCard}/idList.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdList): Attributes of "Cards Id List" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idList')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_id_members_by_id_card(self,
                                        id_card,
                                        key,
                                        token,
                                        body):
        """Does a POST request to /cards/{idCard}/idMembers.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdMembers): Attributes of "Cards Id Members" to be
                added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idMembers')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_id_members_by_id_card(self,
                                           id_card,
                                           key,
                                           token,
                                           body):
        """Does a PUT request to /cards/{idCard}/idMembers.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsIdMembers): Attributes of "Cards Id Members" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idMembers')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_id_members_by_id_card_by_id_member(self,
                                                        id_card,
                                                        id_member,
                                                        key,
                                                        token):
        """Does a DELETE request to /cards/{idCard}/idMembers/{idMember}.

        Args:
            id_card (str): card id or shortlink
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/idMembers/{idMember}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_labels_by_id_card(self,
                                    id_card,
                                    key,
                                    token,
                                    body):
        """Does a POST request to /cards/{idCard}/labels.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsLabels): Attributes of "Cards Labels" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/labels')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_labels_by_id_card(self,
                                       id_card,
                                       key,
                                       token,
                                       body):
        """Does a PUT request to /cards/{idCard}/labels.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsLabels): Attributes of "Cards Labels" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/labels')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_labels_by_id_card_by_color(self,
                                                id_card,
                                                color,
                                                key,
                                                token):
        """Does a DELETE request to /cards/{idCard}/labels/{color}.

        Args:
            id_card (str): card id or shortlink
            color (str): color
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/labels/{color}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('color')
                            .value(color)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_list_by_id_card(self,
                                  id_card,
                                  key,
                                  token,
                                  fields='all'):
        """Does a GET request to /cards/{idCard}/list.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                idBoard, name, pos or subscribed

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/list')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_list_by_id_card_by_field(self,
                                           id_card,
                                           field,
                                           key,
                                           token):
        """Does a GET request to /cards/{idCard}/list/{field}.

        Args:
            id_card (str): card id or shortlink
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/list/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_mark_associated_notifications_read_by_id_card(self,
                                                                id_card,
                                                                key,
                                                                token):
        """Does a POST request to /cards/{idCard}/markAssociatedNotificationsRead.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/markAssociatedNotificationsRead')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_members_by_id_card(self,
                                     id_card,
                                     key,
                                     token,
                                     fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /cards/{idCard}/members.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/members')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_members_voted_by_id_card(self,
                                           id_card,
                                           key,
                                           token,
                                           fields='avatarHash, fullName, initials and username'):
        """Does a GET request to /cards/{idCard}/membersVoted.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/membersVoted')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_members_voted_by_id_card(self,
                                           id_card,
                                           key,
                                           token,
                                           body):
        """Does a POST request to /cards/{idCard}/membersVoted.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsMembersVoted): Attributes of "Cards Members Voted" to
                be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/membersVoted')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_members_voted_by_id_card_by_id_member(self,
                                                           id_card,
                                                           id_member,
                                                           key,
                                                           token):
        """Does a DELETE request to /cards/{idCard}/membersVoted/{idMember}.

        Args:
            id_card (str): card id or shortlink
            id_member (str): idMember
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/membersVoted/{idMember}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idMember')
                            .value(id_member)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_name_by_id_card(self,
                                     id_card,
                                     key,
                                     token,
                                     body):
        """Does a PUT request to /cards/{idCard}/name.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsName): Attributes of "Cards Name" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_pos_by_id_card(self,
                                    id_card,
                                    key,
                                    token,
                                    body):
        """Does a PUT request to /cards/{idCard}/pos.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsPos): Attributes of "Cards Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_stickers_by_id_card(self,
                                      id_card,
                                      key,
                                      token,
                                      fields='all'):
        """Does a GET request to /cards/{idCard}/stickers.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: image,
                imageScaled, imageUrl, left, rotate, top or zIndex

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/stickers')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_cards_stickers_by_id_card(self,
                                      id_card,
                                      key,
                                      token,
                                      body):
        """Does a POST request to /cards/{idCard}/stickers.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsStickers): Attributes of "Cards Stickers" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/stickers')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_cards_stickers_by_id_card_by_id_sticker(self,
                                                       id_card,
                                                       id_sticker,
                                                       key,
                                                       token):
        """Does a DELETE request to /cards/{idCard}/stickers/{idSticker}.

        Args:
            id_card (str): card id or shortlink
            id_sticker (str): idSticker
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/stickers/{idSticker}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSticker')
                            .value(id_sticker)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_stickers_by_id_card_by_id_sticker(self,
                                                    id_card,
                                                    id_sticker,
                                                    key,
                                                    token,
                                                    fields='all'):
        """Does a GET request to /cards/{idCard}/stickers/{idSticker}.

        Args:
            id_card (str): card id or shortlink
            id_sticker (str): idSticker
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: image,
                imageScaled, imageUrl, left, rotate, top or zIndex

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/stickers/{idSticker}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSticker')
                            .value(id_sticker)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_stickers_by_id_card_by_id_sticker(self,
                                                       id_card,
                                                       id_sticker,
                                                       key,
                                                       token,
                                                       body):
        """Does a PUT request to /cards/{idCard}/stickers/{idSticker}.

        Args:
            id_card (str): card id or shortlink
            id_sticker (str): idSticker
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsStickers): Attributes of "Cards Stickers" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/stickers/{idSticker}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idSticker')
                            .value(id_sticker)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_cards_subscribed_by_id_card(self,
                                           id_card,
                                           key,
                                           token,
                                           body):
        """Does a PUT request to /cards/{idCard}/subscribed.

        Args:
            id_card (str): card id or shortlink
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (CardsSubscribed): Attributes of "Cards Subscribed" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/subscribed')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_cards_by_id_card_by_field(self,
                                      id_card,
                                      field,
                                      key,
                                      token):
        """Does a GET request to /cards/{idCard}/{field}.

        Args:
            id_card (str): card id or shortlink
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/cards/{idCard}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idCard')
                            .value(id_card)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
