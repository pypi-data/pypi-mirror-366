# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from trello.exceptions.api_exception import APIException


class ChecklistController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(ChecklistController, self).__init__(config)

    def add_checklists(self,
                       key,
                       token,
                       body):
        """Does a POST request to /checklists.

        Args:
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Checklists): Attributes of "Checklists" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_checklists_by_id_checklist(self,
                                          id_checklist,
                                          key,
                                          token):
        """Does a DELETE request to /checklists/{idChecklist}.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_by_id_checklist(self,
                                       id_checklist,
                                       key,
                                       token,
                                       cards='none',
                                       card_fields='all',
                                       check_items='all',
                                       check_item_fields='name, nameData, pos and state',
                                       fields='all'):
        """Does a GET request to /checklists/{idChecklist}.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            cards (str, optional): One of: all, closed, none, open or visible
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            check_items (str, optional): One of: all or none
            check_item_fields (str, optional): all or a comma-separated list
                of: name, nameData, pos, state or type
            fields (str, optional): all or a comma-separated list of: idBoard,
                idCard, name or pos

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('cards')
                         .value(cards))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('checkItems')
                         .value(check_items))
            .query_param(Parameter()
                         .key('checkItem_fields')
                         .value(check_item_fields))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_checklists_by_id_checklist(self,
                                          id_checklist,
                                          key,
                                          token,
                                          body):
        """Does a PUT request to /checklists/{idChecklist}.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (Checklists): Attributes of "Checklists" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_board_by_id_checklist(self,
                                             id_checklist,
                                             key,
                                             token,
                                             fields='all'):
        """Does a GET request to /checklists/{idChecklist}/board.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: closed,
                dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/board')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_board_by_id_checklist_by_field(self,
                                                      id_checklist,
                                                      field,
                                                      key,
                                                      token):
        """Does a GET request to /checklists/{idChecklist}/board/{field}.

        Args:
            id_checklist (str): idChecklist
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/board/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_cards_by_id_checklist(self,
                                             id_checklist,
                                             key,
                                             token,
                                             actions=None,
                                             attachments=None,
                                             attachment_fields='all',
                                             stickers=None,
                                             members=None,
                                             member_fields='avatarHash, fullName, initials and username',
                                             check_item_states=None,
                                             checklists='none',
                                             limit=None,
                                             since=None,
                                             before=None,
                                             filter='open',
                                             fields='all'):
        """Does a GET request to /checklists/{idChecklist}/cards.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            actions (str, optional): all or a comma-separated list of:
                addAttachmentToCard, addChecklistToCard, addMemberToBoard,
                addMemberToCard, addMemberToOrganization,
                addToOrganizationBoard, commentCard,
                convertToCardFromCheckItem, copyBoard, copyCard,
                copyCommentCard, createBoard, createCard, createList,
                createOrganization, deleteAttachmentFromCard,
                deleteBoardInvitation, deleteCard,
                deleteOrganizationInvitation, disablePowerUp, emailCard,
                enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard,
                makeNormalMemberOfOrganization, makeObserverOfBoard,
                memberJoinedTrello, moveCardFromBoard, moveCardToBoard,
                moveListFromBoard, moveListToBoard, removeChecklistFromCard,
                removeFromOrganizationBoard, removeMemberFromCard,
                unconfirmedBoardInvitation, unconfirmedOrganizationInvitation,
                updateBoard, updateCard, updateCard:closed, updateCard:desc,
                updateCard:idList, updateCard:name,
                updateCheckItemStateOnCard, updateChecklist, updateList,
                updateList:closed, updateList:name, updateMember or
                updateOrganization
            attachments (str, optional): A boolean value or &quot;cover&quot;
                for only card cover attachments
            attachment_fields (str, optional): all or a comma-separated list
                of: bytes, date, edgeColor, idMember, isUpload, mimeType,
                name, previews or url
            stickers (str, optional): true or false
            members (str, optional): true or false
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            check_item_states (str, optional): true or false
            checklists (str, optional): One of: all or none
            limit (str, optional): a number from 1 to 1000
            since (str, optional): A date, or null
            before (str, optional): A date, or null
            filter (str, optional): One of: all, closed, none or open
            fields (str, optional): all or a comma-separated list of: badges,
                checkItemStates, closed, dateLastActivity, desc, descData,
                due, email, idAttachmentCover, idBoard, idChecklists,
                idLabels, idList, idMembers, idMembersVoted, idShort, labels,
                manualCoverAttachment, name, pos, shortLink, shortUrl,
                subscribed or url

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/cards')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('actions')
                         .value(actions))
            .query_param(Parameter()
                         .key('attachments')
                         .value(attachments))
            .query_param(Parameter()
                         .key('attachment_fields')
                         .value(attachment_fields))
            .query_param(Parameter()
                         .key('stickers')
                         .value(stickers))
            .query_param(Parameter()
                         .key('members')
                         .value(members))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('checkItemStates')
                         .value(check_item_states))
            .query_param(Parameter()
                         .key('checklists')
                         .value(checklists))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_cards_by_id_checklist_by_filter(self,
                                                       id_checklist,
                                                       filter,
                                                       key,
                                                       token):
        """Does a GET request to /checklists/{idChecklist}/cards/{filter}.

        Args:
            id_checklist (str): idChecklist
            filter (str): filter
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/cards/{filter}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('filter')
                            .value(filter)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()

    def get_checklists_check_items_by_id_checklist(self,
                                                   id_checklist,
                                                   key,
                                                   token,
                                                   filter='all',
                                                   fields='name, nameData, pos and state'):
        """Does a GET request to /checklists/{idChecklist}/checkItems.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            filter (str, optional): One of: all or none
            fields (str, optional): all or a comma-separated list of: name,
                nameData, pos, state or type

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/checkItems')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def add_checklists_check_items_by_id_checklist(self,
                                                   id_checklist,
                                                   key,
                                                   token,
                                                   body):
        """Does a POST request to /checklists/{idChecklist}/checkItems.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ChecklistsCheckItems): Attributes of "Checklists Check
                Items" to be added.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/checkItems')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def delete_checklists_check_items_by_id_checklist_by_id_check_item(self,
                                                                       id_checklist,
                                                                       id_check_item,
                                                                       key,
                                                                       token):
        """Does a DELETE request to /checklists/{idChecklist}/checkItems/{idCheckItem}.

        Args:
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/checkItems/{idCheckItem}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_check_items_by_id_checklist_by_id_check_item(self,
                                                                    id_checklist,
                                                                    id_check_item,
                                                                    key,
                                                                    token,
                                                                    fields='name, nameData, pos and state'):
        """Does a GET request to /checklists/{idChecklist}/checkItems/{idCheckItem}.

        Args:
            id_checklist (str): idChecklist
            id_check_item (str): idCheckItem
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            fields (str, optional): all or a comma-separated list of: name,
                nameData, pos, state or type

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/checkItems/{idCheckItem}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('idCheckItem')
                            .value(id_check_item)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_checklists_id_card_by_id_checklist(self,
                                                  id_checklist,
                                                  key,
                                                  token,
                                                  body):
        """Does a PUT request to /checklists/{idChecklist}/idCard.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ChecklistsIdCard): Attributes of "Checklists Id Card" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/idCard')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_checklists_name_by_id_checklist(self,
                                               id_checklist,
                                               key,
                                               token,
                                               body):
        """Does a PUT request to /checklists/{idChecklist}/name.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ChecklistsName): Attributes of "Checklists Name" to be
                updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/name')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def update_checklists_pos_by_id_checklist(self,
                                              id_checklist,
                                              key,
                                              token,
                                              body):
        """Does a PUT request to /checklists/{idChecklist}/pos.

        Args:
            id_checklist (str): idChecklist
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            body (ChecklistsPos): Attributes of "Checklists Pos" to be updated.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/pos')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Or(Single('api_key'), Single('api_token')))
        ).execute()

    def get_checklists_by_id_checklist_by_field(self,
                                                id_checklist,
                                                field,
                                                key,
                                                token):
        """Does a GET request to /checklists/{idChecklist}/{field}.

        Args:
            id_checklist (str): idChecklist
            field (str): field
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/checklists/{idChecklist}/{field}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('idChecklist')
                            .value(id_checklist)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field')
                            .value(field)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
        ).execute()
