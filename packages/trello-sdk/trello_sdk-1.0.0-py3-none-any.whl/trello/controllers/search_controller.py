# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from trello.api_helper import APIHelper
from trello.configuration import Server
from trello.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from trello.http.http_method_enum import HttpMethodEnum
from trello.exceptions.api_exception import APIException


class SearchController(BaseController):

    """A Controller to access Endpoints in the trello API."""
    def __init__(self, config):
        super(SearchController, self).__init__(config)

    def get_search(self,
                   query,
                   id_organizations,
                   key,
                   token,
                   id_boards='mine',
                   id_cards=None,
                   model_types='all',
                   board_fields='name and idOrganization',
                   boards_limit='10',
                   card_fields='all',
                   cards_limit='10',
                   cards_page='0',
                   card_board=None,
                   card_list=None,
                   card_members=None,
                   card_stickers=None,
                   card_attachments=None,
                   organization_fields='name and displayName',
                   organizations_limit='10',
                   member_fields='avatarHash, fullName, initials, username and confirmed',
                   members_limit='10',
                   partial=None):
        """Does a GET request to /search.

        Args:
            query (str): a string with a length from 1 to 16384
            id_organizations (str): A comma-separated list of objectIds,
                24-character hex strings
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            id_boards (str, optional): A comma-separated list of objectIds,
                24-character hex strings
            id_cards (str, optional): A comma-separated list of objectIds,
                24-character hex strings
            model_types (str, optional): all or a comma-separated list of:
                actions, boards, cards, members or organizations
            board_fields (str, optional): all or a comma-separated list of:
                closed, dateLastActivity, dateLastView, desc, descData,
                idOrganization, invitations, invited, labelNames, memberships,
                name, pinned, powerUps, prefs, shortLink, shortUrl, starred,
                subscribed or url
            boards_limit (str, optional): a number from 1 to 1000
            card_fields (str, optional): all or a comma-separated list of:
                badges, checkItemStates, closed, dateLastActivity, desc,
                descData, due, email, idAttachmentCover, idBoard,
                idChecklists, idLabels, idList, idMembers, idMembersVoted,
                idShort, labels, manualCoverAttachment, name, pos, shortLink,
                shortUrl, subscribed or url
            cards_limit (str, optional): a number from 1 to 1000
            cards_page (str, optional): a number from 0 to 100
            card_board (str, optional): true or false
            card_list (str, optional): true or false
            card_members (str, optional): true or false
            card_stickers (str, optional): true or false
            card_attachments (str, optional): A boolean value or
                &quot;cover&quot; for only card cover attachments
            organization_fields (str, optional): all or a comma-separated list
                of: billableMemberCount, desc, descData, displayName,
                idBoards, invitations, invited, logoHash, memberships, name,
                powerUps, prefs, premiumFeatures, products, url or website
            organizations_limit (str, optional): a number from 1 to 1000
            member_fields (str, optional): all or a comma-separated list of:
                avatarHash, bio, bioData, confirmed, fullName,
                idPremOrgsAdmin, initials, memberType, products, status, url
                or username
            members_limit (str, optional): a number from 1 to 1000
            partial (str, optional): true or false

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/search')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('query')
                         .value(query))
            .query_param(Parameter()
                         .key('idOrganizations')
                         .value(id_organizations))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('idBoards')
                         .value(id_boards))
            .query_param(Parameter()
                         .key('idCards')
                         .value(id_cards))
            .query_param(Parameter()
                         .key('modelTypes')
                         .value(model_types))
            .query_param(Parameter()
                         .key('board_fields')
                         .value(board_fields))
            .query_param(Parameter()
                         .key('boards_limit')
                         .value(boards_limit))
            .query_param(Parameter()
                         .key('card_fields')
                         .value(card_fields))
            .query_param(Parameter()
                         .key('cards_limit')
                         .value(cards_limit))
            .query_param(Parameter()
                         .key('cards_page')
                         .value(cards_page))
            .query_param(Parameter()
                         .key('card_board')
                         .value(card_board))
            .query_param(Parameter()
                         .key('card_list')
                         .value(card_list))
            .query_param(Parameter()
                         .key('card_members')
                         .value(card_members))
            .query_param(Parameter()
                         .key('card_stickers')
                         .value(card_stickers))
            .query_param(Parameter()
                         .key('card_attachments')
                         .value(card_attachments))
            .query_param(Parameter()
                         .key('organization_fields')
                         .value(organization_fields))
            .query_param(Parameter()
                         .key('organizations_limit')
                         .value(organizations_limit))
            .query_param(Parameter()
                         .key('member_fields')
                         .value(member_fields))
            .query_param(Parameter()
                         .key('members_limit')
                         .value(members_limit))
            .query_param(Parameter()
                         .key('partial')
                         .value(partial))
        ).execute()

    def get_search_members(self,
                           query,
                           key,
                           token,
                           limit='8',
                           id_board=None,
                           id_organization=None,
                           only_org_members=None):
        """Does a GET request to /search/members.

        Args:
            query (str): a string with a length from 1 to 16384
            key (str): <a href="https://trello.com/1/appKey/generate" 
                target="_blank">Generate your application key</a>
            token (str): <a
                href="https://trello.com/docs/gettingstarted/index.html#getting
                -a-token-from-a-user"  target="_blank">Getting a token from a
                user</a>
            limit (str, optional): a number from 1 to 20
            id_board (str, optional): An id, or null
            id_organization (str, optional): An id, or null
            only_org_members (str, optional): A boolean

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/search/members')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('query')
                         .value(query))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .query_param(Parameter()
                         .key('token')
                         .value(token))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('idBoard')
                         .value(id_board))
            .query_param(Parameter()
                         .key('idOrganization')
                         .value(id_organization))
            .query_param(Parameter()
                         .key('onlyOrgMembers')
                         .value(only_org_members))
        ).execute()
