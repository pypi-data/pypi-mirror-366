# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Cards(object):

    """Implementation of the 'cards' model.

    Attributes:
        closed (str): true or false
        desc (str): a string with a length from 0 to 16384
        due (str): A date, or null
        file_source (str): A file
        id_attachment_cover (str): Id of the image attachment of this card to
            use as its cover, or null for no cover
        id_board (str): id of the board the card should be moved to
        id_card_source (str): The id of the card to copy into a new card.
        id_labels (str): A comma-separated list of objectIds, 24-character hex
            strings
        id_list (str): id of the list that the card should be added to
        id_members (str): A comma-separated list of objectIds, 24-character
            hex strings
        keep_from_source (str): Properties of the card to copy over from the
            source.
        labels (str): all or a comma-separated list of: blue, green, orange,
            purple, red or yellow
        name (str): The name of the new card.  It isn&#39;t required if the
            name is being copied from provided by a URL, file or card that is
            being copied.
        pos (str): A position. top , bottom , or a positive number.
        subscribed (str): true or false
        url_source (str): A URL starting with http:// or https:// or null

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "closed": 'closed',
        "desc": 'desc',
        "due": 'due',
        "file_source": 'fileSource',
        "id_attachment_cover": 'idAttachmentCover',
        "id_board": 'idBoard',
        "id_card_source": 'idCardSource',
        "id_labels": 'idLabels',
        "id_list": 'idList',
        "id_members": 'idMembers',
        "keep_from_source": 'keepFromSource',
        "labels": 'labels',
        "name": 'name',
        "pos": 'pos',
        "subscribed": 'subscribed',
        "url_source": 'urlSource'
    }

    _optionals = [
        'closed',
        'desc',
        'due',
        'file_source',
        'id_attachment_cover',
        'id_board',
        'id_card_source',
        'id_labels',
        'id_list',
        'id_members',
        'keep_from_source',
        'labels',
        'name',
        'pos',
        'subscribed',
        'url_source',
    ]

    def __init__(self,
                 closed=APIHelper.SKIP,
                 desc=APIHelper.SKIP,
                 due=APIHelper.SKIP,
                 file_source=APIHelper.SKIP,
                 id_attachment_cover=APIHelper.SKIP,
                 id_board=APIHelper.SKIP,
                 id_card_source=APIHelper.SKIP,
                 id_labels=APIHelper.SKIP,
                 id_list=APIHelper.SKIP,
                 id_members=APIHelper.SKIP,
                 keep_from_source=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 pos=APIHelper.SKIP,
                 subscribed=APIHelper.SKIP,
                 url_source=APIHelper.SKIP):
        """Constructor for the Cards class"""

        # Initialize members of the class
        if closed is not APIHelper.SKIP:
            self.closed = closed 
        if desc is not APIHelper.SKIP:
            self.desc = desc 
        if due is not APIHelper.SKIP:
            self.due = due 
        if file_source is not APIHelper.SKIP:
            self.file_source = file_source 
        if id_attachment_cover is not APIHelper.SKIP:
            self.id_attachment_cover = id_attachment_cover 
        if id_board is not APIHelper.SKIP:
            self.id_board = id_board 
        if id_card_source is not APIHelper.SKIP:
            self.id_card_source = id_card_source 
        if id_labels is not APIHelper.SKIP:
            self.id_labels = id_labels 
        if id_list is not APIHelper.SKIP:
            self.id_list = id_list 
        if id_members is not APIHelper.SKIP:
            self.id_members = id_members 
        if keep_from_source is not APIHelper.SKIP:
            self.keep_from_source = keep_from_source 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if name is not APIHelper.SKIP:
            self.name = name 
        if pos is not APIHelper.SKIP:
            self.pos = pos 
        if subscribed is not APIHelper.SKIP:
            self.subscribed = subscribed 
        if url_source is not APIHelper.SKIP:
            self.url_source = url_source 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        closed = dictionary.get("closed") if dictionary.get("closed") else APIHelper.SKIP
        desc = dictionary.get("desc") if dictionary.get("desc") else APIHelper.SKIP
        due = dictionary.get("due") if dictionary.get("due") else APIHelper.SKIP
        file_source = dictionary.get("fileSource") if dictionary.get("fileSource") else APIHelper.SKIP
        id_attachment_cover = dictionary.get("idAttachmentCover") if dictionary.get("idAttachmentCover") else APIHelper.SKIP
        id_board = dictionary.get("idBoard") if dictionary.get("idBoard") else APIHelper.SKIP
        id_card_source = dictionary.get("idCardSource") if dictionary.get("idCardSource") else APIHelper.SKIP
        id_labels = dictionary.get("idLabels") if dictionary.get("idLabels") else APIHelper.SKIP
        id_list = dictionary.get("idList") if dictionary.get("idList") else APIHelper.SKIP
        id_members = dictionary.get("idMembers") if dictionary.get("idMembers") else APIHelper.SKIP
        keep_from_source = dictionary.get("keepFromSource") if dictionary.get("keepFromSource") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        pos = dictionary.get("pos") if dictionary.get("pos") else APIHelper.SKIP
        subscribed = dictionary.get("subscribed") if dictionary.get("subscribed") else APIHelper.SKIP
        url_source = dictionary.get("urlSource") if dictionary.get("urlSource") else APIHelper.SKIP
        # Return an object of this model
        return cls(closed,
                   desc,
                   due,
                   file_source,
                   id_attachment_cover,
                   id_board,
                   id_card_source,
                   id_labels,
                   id_list,
                   id_members,
                   keep_from_source,
                   labels,
                   name,
                   pos,
                   subscribed,
                   url_source)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'closed={(self.closed if hasattr(self, "closed") else None)!r}, '
                f'desc={(self.desc if hasattr(self, "desc") else None)!r}, '
                f'due={(self.due if hasattr(self, "due") else None)!r}, '
                f'file_source={(self.file_source if hasattr(self, "file_source") else None)!r}, '
                f'id_attachment_cover={(self.id_attachment_cover if hasattr(self, "id_attachment_cover") else None)!r}, '
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!r}, '
                f'id_card_source={(self.id_card_source if hasattr(self, "id_card_source") else None)!r}, '
                f'id_labels={(self.id_labels if hasattr(self, "id_labels") else None)!r}, '
                f'id_list={(self.id_list if hasattr(self, "id_list") else None)!r}, '
                f'id_members={(self.id_members if hasattr(self, "id_members") else None)!r}, '
                f'keep_from_source={(self.keep_from_source if hasattr(self, "keep_from_source") else None)!r}, '
                f'labels={(self.labels if hasattr(self, "labels") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'pos={(self.pos if hasattr(self, "pos") else None)!r}, '
                f'subscribed={(self.subscribed if hasattr(self, "subscribed") else None)!r}, '
                f'url_source={(self.url_source if hasattr(self, "url_source") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'closed={(self.closed if hasattr(self, "closed") else None)!s}, '
                f'desc={(self.desc if hasattr(self, "desc") else None)!s}, '
                f'due={(self.due if hasattr(self, "due") else None)!s}, '
                f'file_source={(self.file_source if hasattr(self, "file_source") else None)!s}, '
                f'id_attachment_cover={(self.id_attachment_cover if hasattr(self, "id_attachment_cover") else None)!s}, '
                f'id_board={(self.id_board if hasattr(self, "id_board") else None)!s}, '
                f'id_card_source={(self.id_card_source if hasattr(self, "id_card_source") else None)!s}, '
                f'id_labels={(self.id_labels if hasattr(self, "id_labels") else None)!s}, '
                f'id_list={(self.id_list if hasattr(self, "id_list") else None)!s}, '
                f'id_members={(self.id_members if hasattr(self, "id_members") else None)!s}, '
                f'keep_from_source={(self.keep_from_source if hasattr(self, "keep_from_source") else None)!s}, '
                f'labels={(self.labels if hasattr(self, "labels") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'pos={(self.pos if hasattr(self, "pos") else None)!s}, '
                f'subscribed={(self.subscribed if hasattr(self, "subscribed") else None)!s}, '
                f'url_source={(self.url_source if hasattr(self, "url_source") else None)!s})')
