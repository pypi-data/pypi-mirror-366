# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class CardsAttachments(object):

    """Implementation of the 'cards_attachments' model.

    Attributes:
        file (str): A file
        mime_type (str): a string with a length from 0 to 256
        name (str): a string with a length from 0 to 256
        url (str): A URL starting with http:// or https:// or null

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "file": 'file',
        "mime_type": 'mimeType',
        "name": 'name',
        "url": 'url'
    }

    _optionals = [
        'file',
        'mime_type',
        'name',
        'url',
    ]

    def __init__(self,
                 file=APIHelper.SKIP,
                 mime_type=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 url=APIHelper.SKIP):
        """Constructor for the CardsAttachments class"""

        # Initialize members of the class
        if file is not APIHelper.SKIP:
            self.file = file 
        if mime_type is not APIHelper.SKIP:
            self.mime_type = mime_type 
        if name is not APIHelper.SKIP:
            self.name = name 
        if url is not APIHelper.SKIP:
            self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        file = dictionary.get("file") if dictionary.get("file") else APIHelper.SKIP
        mime_type = dictionary.get("mimeType") if dictionary.get("mimeType") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        # Return an object of this model
        return cls(file,
                   mime_type,
                   name,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'file={(self.file if hasattr(self, "file") else None)!r}, '
                f'mime_type={(self.mime_type if hasattr(self, "mime_type") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'file={(self.file if hasattr(self, "file") else None)!s}, '
                f'mime_type={(self.mime_type if hasattr(self, "mime_type") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s})')
