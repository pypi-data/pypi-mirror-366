# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Members(object):

    """Implementation of the 'members' model.

    Attributes:
        avatar_source (str): One of: gravatar, none or upload
        bio (str): a string with a length from 0 to 16384
        full_name (str): A string with a length of at least 1.  Cannot begin
            or end with a space.
        initials (str): A string with a length from 1 to 4.  Cannot begin or
            end with a space
        prefs_color_blind (str): true or false
        prefs_locale (str): a string with a length from 0 to 255
        prefs_minutes_between_summaries (str): -1 (disabled), 1 or 60
        username (str): A string with a length of at least 3.  Only lowercase
            letters, underscores, and numbers are allowed.  Must be unique.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "avatar_source": 'avatarSource',
        "bio": 'bio',
        "full_name": 'fullName',
        "initials": 'initials',
        "prefs_color_blind": 'prefs/colorBlind',
        "prefs_locale": 'prefs/locale',
        "prefs_minutes_between_summaries": 'prefs/minutesBetweenSummaries',
        "username": 'username'
    }

    _optionals = [
        'avatar_source',
        'bio',
        'full_name',
        'initials',
        'prefs_color_blind',
        'prefs_locale',
        'prefs_minutes_between_summaries',
        'username',
    ]

    def __init__(self,
                 avatar_source=APIHelper.SKIP,
                 bio=APIHelper.SKIP,
                 full_name=APIHelper.SKIP,
                 initials=APIHelper.SKIP,
                 prefs_color_blind=APIHelper.SKIP,
                 prefs_locale=APIHelper.SKIP,
                 prefs_minutes_between_summaries=APIHelper.SKIP,
                 username=APIHelper.SKIP):
        """Constructor for the Members class"""

        # Initialize members of the class
        if avatar_source is not APIHelper.SKIP:
            self.avatar_source = avatar_source 
        if bio is not APIHelper.SKIP:
            self.bio = bio 
        if full_name is not APIHelper.SKIP:
            self.full_name = full_name 
        if initials is not APIHelper.SKIP:
            self.initials = initials 
        if prefs_color_blind is not APIHelper.SKIP:
            self.prefs_color_blind = prefs_color_blind 
        if prefs_locale is not APIHelper.SKIP:
            self.prefs_locale = prefs_locale 
        if prefs_minutes_between_summaries is not APIHelper.SKIP:
            self.prefs_minutes_between_summaries = prefs_minutes_between_summaries 
        if username is not APIHelper.SKIP:
            self.username = username 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        avatar_source = dictionary.get("avatarSource") if dictionary.get("avatarSource") else APIHelper.SKIP
        bio = dictionary.get("bio") if dictionary.get("bio") else APIHelper.SKIP
        full_name = dictionary.get("fullName") if dictionary.get("fullName") else APIHelper.SKIP
        initials = dictionary.get("initials") if dictionary.get("initials") else APIHelper.SKIP
        prefs_color_blind = dictionary.get("prefs/colorBlind") if dictionary.get("prefs/colorBlind") else APIHelper.SKIP
        prefs_locale = dictionary.get("prefs/locale") if dictionary.get("prefs/locale") else APIHelper.SKIP
        prefs_minutes_between_summaries = dictionary.get("prefs/minutesBetweenSummaries") if dictionary.get("prefs/minutesBetweenSummaries") else APIHelper.SKIP
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        # Return an object of this model
        return cls(avatar_source,
                   bio,
                   full_name,
                   initials,
                   prefs_color_blind,
                   prefs_locale,
                   prefs_minutes_between_summaries,
                   username)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'avatar_source={(self.avatar_source if hasattr(self, "avatar_source") else None)!r}, '
                f'bio={(self.bio if hasattr(self, "bio") else None)!r}, '
                f'full_name={(self.full_name if hasattr(self, "full_name") else None)!r}, '
                f'initials={(self.initials if hasattr(self, "initials") else None)!r}, '
                f'prefs_color_blind={(self.prefs_color_blind if hasattr(self, "prefs_color_blind") else None)!r}, '
                f'prefs_locale={(self.prefs_locale if hasattr(self, "prefs_locale") else None)!r}, '
                f'prefs_minutes_between_summaries={(self.prefs_minutes_between_summaries if hasattr(self, "prefs_minutes_between_summaries") else None)!r}, '
                f'username={(self.username if hasattr(self, "username") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'avatar_source={(self.avatar_source if hasattr(self, "avatar_source") else None)!s}, '
                f'bio={(self.bio if hasattr(self, "bio") else None)!s}, '
                f'full_name={(self.full_name if hasattr(self, "full_name") else None)!s}, '
                f'initials={(self.initials if hasattr(self, "initials") else None)!s}, '
                f'prefs_color_blind={(self.prefs_color_blind if hasattr(self, "prefs_color_blind") else None)!s}, '
                f'prefs_locale={(self.prefs_locale if hasattr(self, "prefs_locale") else None)!s}, '
                f'prefs_minutes_between_summaries={(self.prefs_minutes_between_summaries if hasattr(self, "prefs_minutes_between_summaries") else None)!s}, '
                f'username={(self.username if hasattr(self, "username") else None)!s})')
