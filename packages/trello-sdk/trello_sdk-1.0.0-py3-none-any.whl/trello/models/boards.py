# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class Boards(object):

    """Implementation of the 'boards' model.

    Attributes:
        closed (str): true or false
        desc (str): a string with a length from 0 to 16384
        id_board_source (str): The id of the board to copy into the new board
        id_organization (str): The id or name of the organization to add the
            board to.
        keep_from_source (str): Components of the source board to copy.
        label_names_blue (str): a string with a length from 0 to 16384
        label_names_green (str): a string with a length from 0 to 16384
        label_names_orange (str): a string with a length from 0 to 16384
        label_names_purple (str): a string with a length from 0 to 16384
        label_names_red (str): a string with a length from 0 to 16384
        label_names_yellow (str): a string with a length from 0 to 16384
        name (str): a string with a length from 1 to 16384
        power_ups (str): all or a comma-separated list of: calendar,
            cardAging, recap or voting
        prefs_background (str): A standard background name, or the id of a
            custom background
        prefs_calendar_feed_enabled (str): true or false
        prefs_card_aging (str): One of: pirate or regular
        prefs_card_covers (str): true or false
        prefs_comments (str): One of: disabled, members, observers, org or
            public
        prefs_invitations (str): One of: admins or members
        prefs_permission_level (str): One of: org, private or public
        prefs_self_join (str): true or false
        prefs_voting (str): One of: disabled, members, observers, org or public
        subscribed (str): true or false

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "closed": 'closed',
        "desc": 'desc',
        "id_board_source": 'idBoardSource',
        "id_organization": 'idOrganization',
        "keep_from_source": 'keepFromSource',
        "label_names_blue": 'labelNames/blue',
        "label_names_green": 'labelNames/green',
        "label_names_orange": 'labelNames/orange',
        "label_names_purple": 'labelNames/purple',
        "label_names_red": 'labelNames/red',
        "label_names_yellow": 'labelNames/yellow',
        "name": 'name',
        "power_ups": 'powerUps',
        "prefs_background": 'prefs/background',
        "prefs_calendar_feed_enabled": 'prefs/calendarFeedEnabled',
        "prefs_card_aging": 'prefs/cardAging',
        "prefs_card_covers": 'prefs/cardCovers',
        "prefs_comments": 'prefs/comments',
        "prefs_invitations": 'prefs/invitations',
        "prefs_permission_level": 'prefs/permissionLevel',
        "prefs_self_join": 'prefs/selfJoin',
        "prefs_voting": 'prefs/voting',
        "subscribed": 'subscribed'
    }

    _optionals = [
        'closed',
        'desc',
        'id_board_source',
        'id_organization',
        'keep_from_source',
        'label_names_blue',
        'label_names_green',
        'label_names_orange',
        'label_names_purple',
        'label_names_red',
        'label_names_yellow',
        'name',
        'power_ups',
        'prefs_background',
        'prefs_calendar_feed_enabled',
        'prefs_card_aging',
        'prefs_card_covers',
        'prefs_comments',
        'prefs_invitations',
        'prefs_permission_level',
        'prefs_self_join',
        'prefs_voting',
        'subscribed',
    ]

    def __init__(self,
                 closed=APIHelper.SKIP,
                 desc=APIHelper.SKIP,
                 id_board_source=APIHelper.SKIP,
                 id_organization=APIHelper.SKIP,
                 keep_from_source=APIHelper.SKIP,
                 label_names_blue=APIHelper.SKIP,
                 label_names_green=APIHelper.SKIP,
                 label_names_orange=APIHelper.SKIP,
                 label_names_purple=APIHelper.SKIP,
                 label_names_red=APIHelper.SKIP,
                 label_names_yellow=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 power_ups=APIHelper.SKIP,
                 prefs_background=APIHelper.SKIP,
                 prefs_calendar_feed_enabled=APIHelper.SKIP,
                 prefs_card_aging=APIHelper.SKIP,
                 prefs_card_covers=APIHelper.SKIP,
                 prefs_comments=APIHelper.SKIP,
                 prefs_invitations=APIHelper.SKIP,
                 prefs_permission_level=APIHelper.SKIP,
                 prefs_self_join=APIHelper.SKIP,
                 prefs_voting=APIHelper.SKIP,
                 subscribed=APIHelper.SKIP):
        """Constructor for the Boards class"""

        # Initialize members of the class
        if closed is not APIHelper.SKIP:
            self.closed = closed 
        if desc is not APIHelper.SKIP:
            self.desc = desc 
        if id_board_source is not APIHelper.SKIP:
            self.id_board_source = id_board_source 
        if id_organization is not APIHelper.SKIP:
            self.id_organization = id_organization 
        if keep_from_source is not APIHelper.SKIP:
            self.keep_from_source = keep_from_source 
        if label_names_blue is not APIHelper.SKIP:
            self.label_names_blue = label_names_blue 
        if label_names_green is not APIHelper.SKIP:
            self.label_names_green = label_names_green 
        if label_names_orange is not APIHelper.SKIP:
            self.label_names_orange = label_names_orange 
        if label_names_purple is not APIHelper.SKIP:
            self.label_names_purple = label_names_purple 
        if label_names_red is not APIHelper.SKIP:
            self.label_names_red = label_names_red 
        if label_names_yellow is not APIHelper.SKIP:
            self.label_names_yellow = label_names_yellow 
        if name is not APIHelper.SKIP:
            self.name = name 
        if power_ups is not APIHelper.SKIP:
            self.power_ups = power_ups 
        if prefs_background is not APIHelper.SKIP:
            self.prefs_background = prefs_background 
        if prefs_calendar_feed_enabled is not APIHelper.SKIP:
            self.prefs_calendar_feed_enabled = prefs_calendar_feed_enabled 
        if prefs_card_aging is not APIHelper.SKIP:
            self.prefs_card_aging = prefs_card_aging 
        if prefs_card_covers is not APIHelper.SKIP:
            self.prefs_card_covers = prefs_card_covers 
        if prefs_comments is not APIHelper.SKIP:
            self.prefs_comments = prefs_comments 
        if prefs_invitations is not APIHelper.SKIP:
            self.prefs_invitations = prefs_invitations 
        if prefs_permission_level is not APIHelper.SKIP:
            self.prefs_permission_level = prefs_permission_level 
        if prefs_self_join is not APIHelper.SKIP:
            self.prefs_self_join = prefs_self_join 
        if prefs_voting is not APIHelper.SKIP:
            self.prefs_voting = prefs_voting 
        if subscribed is not APIHelper.SKIP:
            self.subscribed = subscribed 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        closed = dictionary.get("closed") if dictionary.get("closed") else APIHelper.SKIP
        desc = dictionary.get("desc") if dictionary.get("desc") else APIHelper.SKIP
        id_board_source = dictionary.get("idBoardSource") if dictionary.get("idBoardSource") else APIHelper.SKIP
        id_organization = dictionary.get("idOrganization") if dictionary.get("idOrganization") else APIHelper.SKIP
        keep_from_source = dictionary.get("keepFromSource") if dictionary.get("keepFromSource") else APIHelper.SKIP
        label_names_blue = dictionary.get("labelNames/blue") if dictionary.get("labelNames/blue") else APIHelper.SKIP
        label_names_green = dictionary.get("labelNames/green") if dictionary.get("labelNames/green") else APIHelper.SKIP
        label_names_orange = dictionary.get("labelNames/orange") if dictionary.get("labelNames/orange") else APIHelper.SKIP
        label_names_purple = dictionary.get("labelNames/purple") if dictionary.get("labelNames/purple") else APIHelper.SKIP
        label_names_red = dictionary.get("labelNames/red") if dictionary.get("labelNames/red") else APIHelper.SKIP
        label_names_yellow = dictionary.get("labelNames/yellow") if dictionary.get("labelNames/yellow") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        power_ups = dictionary.get("powerUps") if dictionary.get("powerUps") else APIHelper.SKIP
        prefs_background = dictionary.get("prefs/background") if dictionary.get("prefs/background") else APIHelper.SKIP
        prefs_calendar_feed_enabled = dictionary.get("prefs/calendarFeedEnabled") if dictionary.get("prefs/calendarFeedEnabled") else APIHelper.SKIP
        prefs_card_aging = dictionary.get("prefs/cardAging") if dictionary.get("prefs/cardAging") else APIHelper.SKIP
        prefs_card_covers = dictionary.get("prefs/cardCovers") if dictionary.get("prefs/cardCovers") else APIHelper.SKIP
        prefs_comments = dictionary.get("prefs/comments") if dictionary.get("prefs/comments") else APIHelper.SKIP
        prefs_invitations = dictionary.get("prefs/invitations") if dictionary.get("prefs/invitations") else APIHelper.SKIP
        prefs_permission_level = dictionary.get("prefs/permissionLevel") if dictionary.get("prefs/permissionLevel") else APIHelper.SKIP
        prefs_self_join = dictionary.get("prefs/selfJoin") if dictionary.get("prefs/selfJoin") else APIHelper.SKIP
        prefs_voting = dictionary.get("prefs/voting") if dictionary.get("prefs/voting") else APIHelper.SKIP
        subscribed = dictionary.get("subscribed") if dictionary.get("subscribed") else APIHelper.SKIP
        # Return an object of this model
        return cls(closed,
                   desc,
                   id_board_source,
                   id_organization,
                   keep_from_source,
                   label_names_blue,
                   label_names_green,
                   label_names_orange,
                   label_names_purple,
                   label_names_red,
                   label_names_yellow,
                   name,
                   power_ups,
                   prefs_background,
                   prefs_calendar_feed_enabled,
                   prefs_card_aging,
                   prefs_card_covers,
                   prefs_comments,
                   prefs_invitations,
                   prefs_permission_level,
                   prefs_self_join,
                   prefs_voting,
                   subscribed)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'closed={(self.closed if hasattr(self, "closed") else None)!r}, '
                f'desc={(self.desc if hasattr(self, "desc") else None)!r}, '
                f'id_board_source={(self.id_board_source if hasattr(self, "id_board_source") else None)!r}, '
                f'id_organization={(self.id_organization if hasattr(self, "id_organization") else None)!r}, '
                f'keep_from_source={(self.keep_from_source if hasattr(self, "keep_from_source") else None)!r}, '
                f'label_names_blue={(self.label_names_blue if hasattr(self, "label_names_blue") else None)!r}, '
                f'label_names_green={(self.label_names_green if hasattr(self, "label_names_green") else None)!r}, '
                f'label_names_orange={(self.label_names_orange if hasattr(self, "label_names_orange") else None)!r}, '
                f'label_names_purple={(self.label_names_purple if hasattr(self, "label_names_purple") else None)!r}, '
                f'label_names_red={(self.label_names_red if hasattr(self, "label_names_red") else None)!r}, '
                f'label_names_yellow={(self.label_names_yellow if hasattr(self, "label_names_yellow") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'power_ups={(self.power_ups if hasattr(self, "power_ups") else None)!r}, '
                f'prefs_background={(self.prefs_background if hasattr(self, "prefs_background") else None)!r}, '
                f'prefs_calendar_feed_enabled={(self.prefs_calendar_feed_enabled if hasattr(self, "prefs_calendar_feed_enabled") else None)!r}, '
                f'prefs_card_aging={(self.prefs_card_aging if hasattr(self, "prefs_card_aging") else None)!r}, '
                f'prefs_card_covers={(self.prefs_card_covers if hasattr(self, "prefs_card_covers") else None)!r}, '
                f'prefs_comments={(self.prefs_comments if hasattr(self, "prefs_comments") else None)!r}, '
                f'prefs_invitations={(self.prefs_invitations if hasattr(self, "prefs_invitations") else None)!r}, '
                f'prefs_permission_level={(self.prefs_permission_level if hasattr(self, "prefs_permission_level") else None)!r}, '
                f'prefs_self_join={(self.prefs_self_join if hasattr(self, "prefs_self_join") else None)!r}, '
                f'prefs_voting={(self.prefs_voting if hasattr(self, "prefs_voting") else None)!r}, '
                f'subscribed={(self.subscribed if hasattr(self, "subscribed") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'closed={(self.closed if hasattr(self, "closed") else None)!s}, '
                f'desc={(self.desc if hasattr(self, "desc") else None)!s}, '
                f'id_board_source={(self.id_board_source if hasattr(self, "id_board_source") else None)!s}, '
                f'id_organization={(self.id_organization if hasattr(self, "id_organization") else None)!s}, '
                f'keep_from_source={(self.keep_from_source if hasattr(self, "keep_from_source") else None)!s}, '
                f'label_names_blue={(self.label_names_blue if hasattr(self, "label_names_blue") else None)!s}, '
                f'label_names_green={(self.label_names_green if hasattr(self, "label_names_green") else None)!s}, '
                f'label_names_orange={(self.label_names_orange if hasattr(self, "label_names_orange") else None)!s}, '
                f'label_names_purple={(self.label_names_purple if hasattr(self, "label_names_purple") else None)!s}, '
                f'label_names_red={(self.label_names_red if hasattr(self, "label_names_red") else None)!s}, '
                f'label_names_yellow={(self.label_names_yellow if hasattr(self, "label_names_yellow") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'power_ups={(self.power_ups if hasattr(self, "power_ups") else None)!s}, '
                f'prefs_background={(self.prefs_background if hasattr(self, "prefs_background") else None)!s}, '
                f'prefs_calendar_feed_enabled={(self.prefs_calendar_feed_enabled if hasattr(self, "prefs_calendar_feed_enabled") else None)!s}, '
                f'prefs_card_aging={(self.prefs_card_aging if hasattr(self, "prefs_card_aging") else None)!s}, '
                f'prefs_card_covers={(self.prefs_card_covers if hasattr(self, "prefs_card_covers") else None)!s}, '
                f'prefs_comments={(self.prefs_comments if hasattr(self, "prefs_comments") else None)!s}, '
                f'prefs_invitations={(self.prefs_invitations if hasattr(self, "prefs_invitations") else None)!s}, '
                f'prefs_permission_level={(self.prefs_permission_level if hasattr(self, "prefs_permission_level") else None)!s}, '
                f'prefs_self_join={(self.prefs_self_join if hasattr(self, "prefs_self_join") else None)!s}, '
                f'prefs_voting={(self.prefs_voting if hasattr(self, "prefs_voting") else None)!s}, '
                f'subscribed={(self.subscribed if hasattr(self, "subscribed") else None)!s})')
