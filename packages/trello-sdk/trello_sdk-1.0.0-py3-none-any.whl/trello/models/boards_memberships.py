# -*- coding: utf-8 -*-

"""
trello

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from trello.api_helper import APIHelper


class BoardsMemberships(object):

    """Implementation of the 'boards_memberships' model.

    Attributes:
        member_fields (str): all or a comma-separated list of: avatarHash,
            bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials,
            memberType, products, status, url or username
        mtype (str): One of: admin, normal or observer

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "member_fields": 'member_fields',
        "mtype": 'type'
    }

    _optionals = [
        'member_fields',
        'mtype',
    ]

    def __init__(self,
                 member_fields=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the BoardsMemberships class"""

        # Initialize members of the class
        if member_fields is not APIHelper.SKIP:
            self.member_fields = member_fields 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        member_fields = dictionary.get("member_fields") if dictionary.get("member_fields") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(member_fields,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'member_fields={(self.member_fields if hasattr(self, "member_fields") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'member_fields={(self.member_fields if hasattr(self, "member_fields") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s})')
