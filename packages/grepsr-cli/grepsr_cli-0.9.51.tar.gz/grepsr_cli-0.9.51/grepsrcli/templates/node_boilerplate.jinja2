{% include './top_comment.jinja2' with context %}

const path = require('path');
{% if '@vortex-ts-sdk/http-crawler' in packages_to_install -%}
const { HttpCrawler, pq } = require('@vortex-ts-sdk/http-crawler');
const { VtxLogger } = require('@vortex-ts-sdk/vtx-logger');
const {
    isTestEnvironment,
    sleep,
    getPodParams,
    isScalar,
    jsonDecode,
} = require('@vortex-ts-sdk/core');
{% elif '@vortex-ts-registry/crawler-utils' in packages_to_install -%}
const {
    li,
    le,
    MyCrawlerHandler,
    MyQueue,
    jsonDecode,
} = require('@vortex-ts-registry/crawler-utils')
{%- endif %}
{% if '@vortex-ts-sdk/cache-handler' in packages_to_install -%}
const { CacheHandler } = require('@vortex-ts-sdk/cache-handler')
{%- endif %}
{% if 'p-queue@6.6.2' in packages_to_install -%}
const { default: PQueue } = require('p-queue')
{%- endif %}
{% if '@vortex-ts-sdk/cache-handler' in packages_to_install -%}
const cache = new CacheHandler(path.parse(__dirname).name)
{%- endif %}

const BASE_URL = '{{base_url}}'
const DOMAIN_URL = '{{domain_url}}'
const HANDLER = new HttpCrawler();

const MAIN_PAGE_NAME = path.parse(__dirname).name

HANDLER.dataSet.setPageName(MAIN_PAGE_NAME + '_%s', [new Date().toISOString().split('T')[0]]);
HANDLER.dataSet.setColHeaders({{col_headers | default('[]')}});

const getAbsLink = (relativeURL, baseURL) =>
    relativeURL && relativeURL.trim() ? new URL(relativeURL, baseURL || DOMAIN_URL).toString() : relativeURL

async function newSession(httpHandler) {
    httpHandler.resetRequestConfig()
    httpHandler.setHeaders('Accept-Encoding', 'gzip, deflate');
    httpHandler.setHeaders('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8');
    httpHandler.setHeaders('Accept-Language', 'en-US,en;q=0.5');
    httpHandler.setHeaders('Connection', 'keep-alive');
    httpHandler.setHeaders('Upgrade-Insecure-Requests', '1');
    httpHandler.setHeaders('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36');
    await httpHandler.enableProxy();
}

async function main() {
    {% if '@vortex-ts-registry/crawler-utils' in packages_to_install -%}
    VtxLogger.info("Starting the crawler");
    {% elif '@vortex-ts-sdk/http-crawler' in packages_to_install -%}
    li("Starting the crawler");
    {% endif %}

    await newSession(HANDLER.request);

    {% if 'p-queue@6.6.2' in packages_to_install -%}
    const concurrency = 5
    const queue = new PQueue({ concurrency: concurrency })
    queue.add(() => HANDLER.loadDocument(BASE_URL))
    await queue.onIdle()
    {% elif '@vortex-ts-registry/crawler-utils' in packages_to_install -%}
    const concurrency = 5
    const queue = new MyQueue(concurrency)
    await queue.add(() => HANDLER.loadDocument(BASE_URL))
    await queue.onIdle()
    {%- else -%}
    await HANDLER.loadDocument(BASE_URL);
    {%- endif %}

    const arr = HANDLER.dataSet.getEmptyRow();
    await HANDLER.dataSet.addRow(arr);
}

void main();