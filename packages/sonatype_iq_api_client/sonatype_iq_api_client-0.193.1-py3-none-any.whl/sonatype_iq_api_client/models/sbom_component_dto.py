# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.193.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from sonatype_iq_api_client.models.component_identifier import ComponentIdentifier
from sonatype_iq_api_client.models.resolved_license_dto import ResolvedLicenseDTO
from typing import Optional, Set
from typing_extensions import Self

class SbomComponentDTO(BaseModel):
    """
    SbomComponentDTO
    """ # noqa: E501
    component_identifier: Optional[ComponentIdentifier] = Field(default=None, alias="componentIdentifier")
    component_ref: Optional[StrictStr] = Field(default=None, alias="componentRef")
    dependency_type: Optional[StrictStr] = Field(default=None, alias="dependencyType")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    file_coordinate_id: Optional[StrictStr] = Field(default=None, alias="fileCoordinateId")
    filenames: Optional[List[StrictStr]] = None
    format: Optional[StrictStr] = None
    hash: Optional[StrictStr] = None
    licenses: Optional[List[ResolvedLicenseDTO]] = None
    match_state_id: Optional[StrictStr] = Field(default=None, alias="matchStateId")
    name: Optional[StrictStr] = None
    package_url: Optional[StrictStr] = Field(default=None, alias="packageUrl")
    percentage_annotated: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="percentageAnnotated")
    policy_violation_count: Optional[StrictInt] = Field(default=None, alias="policyViolationCount")
    release_status_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="releaseStatusPercentage")
    version: Optional[StrictStr] = None
    vulnerability_severity_critical_count: Optional[StrictInt] = Field(default=None, alias="vulnerabilitySeverityCriticalCount")
    vulnerability_severity_high_count: Optional[StrictInt] = Field(default=None, alias="vulnerabilitySeverityHighCount")
    vulnerability_severity_low_count: Optional[StrictInt] = Field(default=None, alias="vulnerabilitySeverityLowCount")
    vulnerability_severity_medium_count: Optional[StrictInt] = Field(default=None, alias="vulnerabilitySeverityMediumCount")
    vulnerability_severity_none_count: Optional[StrictInt] = Field(default=None, alias="vulnerabilitySeverityNoneCount")
    __properties: ClassVar[List[str]] = ["componentIdentifier", "componentRef", "dependencyType", "displayName", "fileCoordinateId", "filenames", "format", "hash", "licenses", "matchStateId", "name", "packageUrl", "percentageAnnotated", "policyViolationCount", "releaseStatusPercentage", "version", "vulnerabilitySeverityCriticalCount", "vulnerabilitySeverityHighCount", "vulnerabilitySeverityLowCount", "vulnerabilitySeverityMediumCount", "vulnerabilitySeverityNoneCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SbomComponentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of component_identifier
        if self.component_identifier:
            _dict['componentIdentifier'] = self.component_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in licenses (list)
        _items = []
        if self.licenses:
            for _item_licenses in self.licenses:
                if _item_licenses:
                    _items.append(_item_licenses.to_dict())
            _dict['licenses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SbomComponentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentIdentifier": ComponentIdentifier.from_dict(obj["componentIdentifier"]) if obj.get("componentIdentifier") is not None else None,
            "componentRef": obj.get("componentRef"),
            "dependencyType": obj.get("dependencyType"),
            "displayName": obj.get("displayName"),
            "fileCoordinateId": obj.get("fileCoordinateId"),
            "filenames": obj.get("filenames"),
            "format": obj.get("format"),
            "hash": obj.get("hash"),
            "licenses": [ResolvedLicenseDTO.from_dict(_item) for _item in obj["licenses"]] if obj.get("licenses") is not None else None,
            "matchStateId": obj.get("matchStateId"),
            "name": obj.get("name"),
            "packageUrl": obj.get("packageUrl"),
            "percentageAnnotated": obj.get("percentageAnnotated"),
            "policyViolationCount": obj.get("policyViolationCount"),
            "releaseStatusPercentage": obj.get("releaseStatusPercentage"),
            "version": obj.get("version"),
            "vulnerabilitySeverityCriticalCount": obj.get("vulnerabilitySeverityCriticalCount"),
            "vulnerabilitySeverityHighCount": obj.get("vulnerabilitySeverityHighCount"),
            "vulnerabilitySeverityLowCount": obj.get("vulnerabilitySeverityLowCount"),
            "vulnerabilitySeverityMediumCount": obj.get("vulnerabilitySeverityMediumCount"),
            "vulnerabilitySeverityNoneCount": obj.get("vulnerabilitySeverityNoneCount")
        })
        return _obj


