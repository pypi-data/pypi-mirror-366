name: Publish Python Package

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-version:
    name: Validate Version Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate tag format
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            echo "Tag must be in format vX.Y.Z (e.g., v1.0.0)"
            exit 1
          fi
          
          VERSION="${TAG#v}"
          echo "Tag: $TAG"
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Verify setuptools_scm version
        run: |
          pip install setuptools_scm
          SCM_VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          echo "setuptools_scm version: $SCM_VERSION"
          
          # Note: setuptools_scm might add additional info like .devN+gHASH
          # So we just check if our version is contained in the SCM version
          if [[ ! "$SCM_VERSION" =~ ^${{ steps.extract.outputs.version }} ]]; then
            echo "⚠️  Warning: Version mismatch"
            echo "Tag version: ${{ steps.extract.outputs.version }}"
            echo "SCM version: $SCM_VERSION"
          fi

  build-and-test:
    name: Build and Test Package
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools_scm
          pip install -e ".[all]"

      - name: Run tests
        run: |
          pytest --cov=acled --cov-report=term-missing

      - name: Build package
        run: |
          python -m build
          echo "Built packages:"
          ls -la dist/

      - name: Check package with twine
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  test-testpypi-installation:
    name: Test TestPyPI Installation
    needs: [validate-version, publish-testpypi]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for package availability
        run: sleep 120  # Give TestPyPI time to process

      - name: Install from TestPyPI
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://test.pypi.org/simple/ \
                      --extra-index-url https://pypi.org/simple/ \
                      acled==${{ needs.validate-version.outputs.version }}

      - name: Test import
        run: |
          python -c "import acled; print(f'Successfully imported acled {acled.__version__}')"
          python -c "from acled import AcledClient; print('AcledClient OK')"

  publish-pypi:
    name: Publish to PyPI
    needs: test-testpypi-installation
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  test-pypi-installation:
    name: Test PyPI Installation
    needs: [validate-version, publish-pypi]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.12']  # Test min and max versions
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for package availability
        run: sleep 120  # Give PyPI time to process

      - name: Install from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install acled==${{ needs.validate-version.outputs.version }}

      - name: Test import and version
        run: |
          python -c "
          import acled
          print(f'Successfully installed acled {acled.__version__}')
          assert acled.__version__ == '${{ needs.validate-version.outputs.version }}', f'Version mismatch: {acled.__version__} != ${{ needs.validate-version.outputs.version }}'
          "

      - name: Test CLI
        run: |
          acled --version || echo "Version command not implemented"
          acled --help

  create-release:
    name: Create GitHub Release
    needs: [validate-version, publish-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "First release!"
            NOTES="## First Release\n\nInitial release of the ACLED Python client library."
          else
            echo "Generating notes since $PREV_TAG"
            
            # Generate commit-based release notes
            NOTES="## Changes\n\n"
            
            # Get commits grouped by type
            FEATURES=$(git log $PREV_TAG..HEAD --grep="^feat:" --pretty="* %s (%h)" | sed 's/^feat: //')
            FIXES=$(git log $PREV_TAG..HEAD --grep="^fix:" --pretty="* %s (%h)" | sed 's/^fix: //')
            DOCS=$(git log $PREV_TAG..HEAD --grep="^docs:" --pretty="* %s (%h)" | sed 's/^docs: //')
            OTHERS=$(git log $PREV_TAG..HEAD --pretty="* %s (%h)" | grep -vE "^(feat|fix|docs):")
            
            if [ ! -z "$FEATURES" ]; then
              NOTES+="### Features\n$FEATURES\n\n"
            fi
            
            if [ ! -z "$FIXES" ]; then
              NOTES+="### Bug Fixes\n$FIXES\n\n"
            fi
            
            if [ ! -z "$DOCS" ]; then
              NOTES+="### Documentation\n$DOCS\n\n"
            fi
            
            if [ ! -z "$OTHERS" ]; then
              NOTES+="### Other Changes\n$OTHERS\n\n"
            fi
            
            # Add contributors
            CONTRIBUTORS=$(git log $PREV_TAG..HEAD --pretty="%an" | sort -u | sed 's/^/* @/')
            NOTES+="\n## Contributors\n$CONTRIBUTORS"
          fi
          
          # Save to file for the release
          echo -e "$NOTES" > release_notes.md
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Release v${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: false
          prerelease: false

      - name: Update PyPI links in release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-version.outputs.version }}';
            const releaseTag = `v${version}`;
            
            // Get the release we just created
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: releaseTag
            });
            
            // Append PyPI links to the body
            const pypiLinks = `\n\n## Installation\n\n\`\`\`bash\npip install acled==${version}\n\`\`\`\n\n**PyPI**: https://pypi.org/project/acled/${version}/\n`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + pypiLinks
            });