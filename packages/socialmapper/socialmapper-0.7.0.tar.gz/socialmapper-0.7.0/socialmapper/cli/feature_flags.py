"""CLI commands for managing backend configuration."""


import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

from ..config.feature_flags import (
    get_api_base_url,
    get_backend_config,
    get_runtime_config,
)

console = Console()
app = typer.Typer(help="Manage SocialMapper backend configuration")


@app.command()
def status():
    """Show current backend configuration status."""
    config = get_backend_config()
    runtime_config = get_runtime_config()

    # Create status table
    table = Table(title="SocialMapper Backend Configuration")
    table.add_column("Setting", style="cyan")
    table.add_column("Value", style="green")
    table.add_column("Description", style="dim")

    table.add_row("API Server", "‚úì" if config.enable_api_server else "‚úó", "FastAPI backend server")
    table.add_row("Debug Mode", "‚úì" if config.debug_mode else "‚úó", "Enable debug logging")
    table.add_row("Caching", "‚úì" if config.enable_caching else "‚úó", "Enable result caching")
    table.add_row("Cache TTL", f"{config.cache_ttl_seconds}s", "Cache time-to-live")
    table.add_row("Rate Limit", f"{config.rate_limit_requests_per_second} rps", "Requests per second limit")
    table.add_row("Census API Key", "‚úì" if config.census_api_key else "‚úó", "Census API key configured")

    console.print(table)

    # Show API URL if enabled
    if config.enable_api_server:
        console.print("\n" + "="*50)
        console.print(f"üîó API Server: {get_api_base_url()}")
        console.print("="*50)


@app.command()
def configure(
    enable_api: bool = typer.Option(None, "--api/--no-api", help="Enable/disable API server"),
    debug: bool = typer.Option(None, "--debug/--no-debug", help="Enable/disable debug mode"),
    enable_cache: bool = typer.Option(None, "--cache/--no-cache", help="Enable/disable caching"),
    cache_ttl: int = typer.Option(None, "--cache-ttl", help="Cache TTL in seconds"),
    api_host: str = typer.Option(None, "--api-host", help="API server host"),
    api_port: int = typer.Option(None, "--api-port", help="API server port"),
):
    """Configure backend settings."""
    from pathlib import Path

    # Read current .env file or create new one
    env_file = Path(".env")
    env_vars = {}

    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value

    # Update configuration
    changes = []

    if enable_api is not None:
        env_vars["SOCIALMAPPER_ENABLE_API_SERVER"] = "true" if enable_api else "false"
        changes.append(f"API Server: {'enabled' if enable_api else 'disabled'}")

    if debug is not None:
        env_vars["SOCIALMAPPER_DEBUG_MODE"] = "true" if debug else "false"
        changes.append(f"Debug Mode: {'enabled' if debug else 'disabled'}")

    if enable_cache is not None:
        env_vars["SOCIALMAPPER_ENABLE_CACHING"] = "true" if enable_cache else "false"
        changes.append(f"Caching: {'enabled' if enable_cache else 'disabled'}")

    if cache_ttl is not None:
        env_vars["SOCIALMAPPER_CACHE_TTL"] = str(cache_ttl)
        changes.append(f"Cache TTL: {cache_ttl}s")

    if api_host is not None:
        env_vars["SOCIALMAPPER_API_SERVER_HOST"] = api_host
        changes.append(f"API Host: {api_host}")

    if api_port is not None:
        env_vars["SOCIALMAPPER_API_SERVER_PORT"] = str(api_port)
        changes.append(f"API Port: {api_port}")

    if not changes:
        console.print("[yellow]No changes specified. Use --help to see available options.[/yellow]")
        return

    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# SocialMapper Backend Configuration\n")
        f.write("# Generated by: socialmapper config configure\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")

    console.print("‚úÖ Configuration updated:")
    for change in changes:
        console.print(f"  ‚Ä¢ {change}")
    console.print("üìù Updated .env file")

    # Show next steps if API enabled
    current_config = get_backend_config()
    if current_config.enable_api_server:
        panel = Panel.fit(
            f"[bold green]Start the API Server:[/bold green]\n\n"
            f"cd socialmapper-api && ./setup-dev.sh\n\n"
            f"API will be available at: {get_api_base_url()}",
            title="Next Steps"
        )
        console.print(panel)


@app.command()
def validate():
    """Validate current backend configuration."""
    config = get_backend_config()
    issues = []
    warnings = []

    # Check for configuration issues
    if config.enable_api_server:
        if config.api_server_port < 1024 and config.api_server_host == "0.0.0.0":
            warnings.append("Running on privileged port (< 1024) as host 0.0.0.0 may require sudo")

        if config.api_server_port == 8000 and config.api_server_host == "0.0.0.0":
            warnings.append("Default port 8000 on all interfaces may conflict with other services")

    if config.enable_caching and config.cache_ttl_seconds < 60:
        warnings.append("Cache TTL is very low (< 60s), may cause excessive API calls")

    if config.rate_limit_requests_per_second > 100:
        warnings.append("High rate limit (> 100 rps) may overwhelm external APIs")

    if not config.census_api_key:
        warnings.append("Census API key not configured - some features may be limited")

    # Validate API host format
    if config.api_server_host not in ["localhost", "127.0.0.1", "0.0.0.0"] and not config.api_server_host.replace(".", "").isdigit():
        issues.append(f"Invalid API host format: {config.api_server_host}")

    # Validate port range
    if not 1 <= config.api_server_port <= 65535:
        issues.append(f"API port must be between 1-65535, got: {config.api_server_port}")

    # Show results
    if issues:
        console.print("[red]‚ö†Ô∏è  Configuration Issues Found:[/red]")
        for issue in issues:
            console.print(f"  ‚Ä¢ {issue}")
        console.print("\n[yellow]Run 'socialmapper config configure' to fix configuration[/yellow]")
    elif warnings:
        console.print("[yellow]‚ö†Ô∏è  Configuration Warnings:[/yellow]")
        for warning in warnings:
            console.print(f"  ‚Ä¢ {warning}")
        console.print("\n[green]‚úÖ No critical issues found[/green]")
    else:
        console.print("[green]‚úÖ Configuration is valid[/green]")


if __name__ == "__main__":
    app()
