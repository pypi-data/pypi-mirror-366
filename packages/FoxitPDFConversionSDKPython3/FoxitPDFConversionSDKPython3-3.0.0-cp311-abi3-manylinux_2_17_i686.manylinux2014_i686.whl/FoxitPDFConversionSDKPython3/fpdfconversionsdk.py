# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fpdfconversionsdk
else:
    import _fpdfconversionsdk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

_FX_WIN32_DESKTOP_ = _fpdfconversionsdk._FX_WIN32_DESKTOP_
_FX_WIN32_MOBILE_ = _fpdfconversionsdk._FX_WIN32_MOBILE_
_FX_WIN64_ = _fpdfconversionsdk._FX_WIN64_
_FX_LINUX_DESKTOP_ = _fpdfconversionsdk._FX_LINUX_DESKTOP_
_FX_LINUX_EMBEDDED_ = _fpdfconversionsdk._FX_LINUX_EMBEDDED_
_FX_SYMBIAN_ = _fpdfconversionsdk._FX_SYMBIAN_
_FX_MACOSX_ = _fpdfconversionsdk._FX_MACOSX_
_FX_EMBEDDED_ = _fpdfconversionsdk._FX_EMBEDDED_
_FX_SOLARIS_ = _fpdfconversionsdk._FX_SOLARIS_
_FX_PALMOS_ = _fpdfconversionsdk._FX_PALMOS_
_FX_NETBSD_ = _fpdfconversionsdk._FX_NETBSD_
_FX_ANDROID_ = _fpdfconversionsdk._FX_ANDROID_
_FX_VXWORKS_ = _fpdfconversionsdk._FX_VXWORKS_
_FX_MTK_ = _fpdfconversionsdk._FX_MTK_
_FX_IOS_ = _fpdfconversionsdk._FX_IOS_
_FXM_PLATFORM_WINDOWS_ = _fpdfconversionsdk._FXM_PLATFORM_WINDOWS_
_FXM_PLATFORM_LINUX_ = _fpdfconversionsdk._FXM_PLATFORM_LINUX_
_FXM_PLATFORM_APPLE_ = _fpdfconversionsdk._FXM_PLATFORM_APPLE_
_FXM_PLATFORM_ANDROID_ = _fpdfconversionsdk._FXM_PLATFORM_ANDROID_
_FXM_PLATFORM_ = _fpdfconversionsdk._FXM_PLATFORM_
_FX_VC6_ = _fpdfconversionsdk._FX_VC6_
_FX_VC7_ = _fpdfconversionsdk._FX_VC7_
_FX_VC8_ = _fpdfconversionsdk._FX_VC8_
_FX_GCC_ = _fpdfconversionsdk._FX_GCC_
_FX_ADS_ = _fpdfconversionsdk._FX_ADS_
_FX_RVCT_ = _fpdfconversionsdk._FX_RVCT_
_FX_IARCC_ = _fpdfconversionsdk._FX_IARCC_
_FX_NOKIA_X86_ = _fpdfconversionsdk._FX_NOKIA_X86_
_FX_METROWERKS_ = _fpdfconversionsdk._FX_METROWERKS_
_FX_PACC_ = _fpdfconversionsdk._FX_PACC_
_FX_TMS470_ = _fpdfconversionsdk._FX_TMS470_
_FX_MIPS_SDE_ = _fpdfconversionsdk._FX_MIPS_SDE_
_FX_X86_ = _fpdfconversionsdk._FX_X86_
_FX_ARM_ = _fpdfconversionsdk._FX_ARM_
_FX_POWERPC_ = _fpdfconversionsdk._FX_POWERPC_
_FX_SPARC_ = _fpdfconversionsdk._FX_SPARC_
_FX_IA64_ = _fpdfconversionsdk._FX_IA64_
_FX_MIPS_ = _fpdfconversionsdk._FX_MIPS_
_FX_X64_ = _fpdfconversionsdk._FX_X64_
_FX_ARM64_ = _fpdfconversionsdk._FX_ARM64_
_FX_MIPS64_ = _fpdfconversionsdk._FX_MIPS64_
_FX_LOONGARCH64_ = _fpdfconversionsdk._FX_LOONGARCH64_
_FX_W32_ = _fpdfconversionsdk._FX_W32_
_FX_W64_ = _fpdfconversionsdk._FX_W64_
_FX_WORDSIZE_ = _fpdfconversionsdk._FX_WORDSIZE_
_FX_BIG_ENDIAN_ = _fpdfconversionsdk._FX_BIG_ENDIAN_
_FX_LITTLE_ENDIAN_ = _fpdfconversionsdk._FX_LITTLE_ENDIAN_
_FX_ENDIAN_ = _fpdfconversionsdk._FX_ENDIAN_
_FX_DEFAULT_TARGET_ = _fpdfconversionsdk._FX_DEFAULT_TARGET_
_FX_BREW_ = _fpdfconversionsdk._FX_BREW_
NULL = _fpdfconversionsdk.NULL
FX_PI = _fpdfconversionsdk.FX_PI
FXMEM_NONLEAVE = _fpdfconversionsdk.FXMEM_NONLEAVE
FXMEM_MOVABLE = _fpdfconversionsdk.FXMEM_MOVABLE
FXMEM_DISCARDABLE = _fpdfconversionsdk.FXMEM_DISCARDABLE
class BasicArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register BasicArray in _fpdfconversionsdk:
_fpdfconversionsdk.BasicArray_swigregister(BasicArray)
class PauseCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_PauseCallback

    def NeedToPauseNow(self, *args):
        return _fpdfconversionsdk.PauseCallback_NeedToPauseNow(self, *args)

    def __init__(self, *args):
        if self.__class__ == PauseCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.PauseCallback_swiginit(self, _fpdfconversionsdk.new_PauseCallback(_self, *args))
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_PauseCallback(self)
        return weakref.proxy(self)

# Register PauseCallback in _fpdfconversionsdk:
_fpdfconversionsdk.PauseCallback_swigregister(PauseCallback)
O_BINARY = _fpdfconversionsdk.O_BINARY
O_LARGEFILE = _fpdfconversionsdk.O_LARGEFILE
FX_FILEMODE_Write = _fpdfconversionsdk.FX_FILEMODE_Write
FX_FILEMODE_ReadOnly = _fpdfconversionsdk.FX_FILEMODE_ReadOnly
FX_FILEMODE_Truncate = _fpdfconversionsdk.FX_FILEMODE_Truncate
class FileWriterCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_GetSize(self, *args)

    def Flush(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_Flush(self, *args)

    def WriteBlock(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_WriteBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileWriterCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.FileWriterCallback_swiginit(self, _fpdfconversionsdk.new_FileWriterCallback(_self, *args))
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_FileWriterCallback(self)
        return weakref.proxy(self)

# Register FileWriterCallback in _fpdfconversionsdk:
_fpdfconversionsdk.FileWriterCallback_swigregister(FileWriterCallback)
class FileReaderCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_GetSize(self, *args)

    def ReadBlock(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_ReadBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileReaderCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.FileReaderCallback_swiginit(self, _fpdfconversionsdk.new_FileReaderCallback(_self, *args))
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_FileReaderCallback(self)
        return weakref.proxy(self)

# Register FileReaderCallback in _fpdfconversionsdk:
_fpdfconversionsdk.FileReaderCallback_swigregister(FileReaderCallback)
class StreamCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Retain(self, *args):
        return _fpdfconversionsdk.StreamCallback_Retain(self, *args)

    def Release(self, *args):
        return _fpdfconversionsdk.StreamCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.StreamCallback_GetSize(self, *args)

    def IsEOF(self, *args):
        return _fpdfconversionsdk.StreamCallback_IsEOF(self, *args)

    def GetPosition(self, *args):
        return _fpdfconversionsdk.StreamCallback_GetPosition(self, *args)

    def ReadBlock(self, *args):
        return _fpdfconversionsdk.StreamCallback_ReadBlock(self, *args)

    def WriteBlock(self, *args):
        return _fpdfconversionsdk.StreamCallback_WriteBlock(self, *args)

    def Flush(self, *args):
        return _fpdfconversionsdk.StreamCallback_Flush(self, *args)

    def __init__(self, *args):
        if self.__class__ == StreamCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.StreamCallback_swiginit(self, _fpdfconversionsdk.new_StreamCallback(_self, *args))
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_StreamCallback(self)
        return weakref.proxy(self)

# Register StreamCallback in _fpdfconversionsdk:
_fpdfconversionsdk.StreamCallback_swigregister(StreamCallback)
TRUE = _fpdfconversionsdk.TRUE
FALSE = _fpdfconversionsdk.FALSE
class WStringArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_WStringArray

    def __init__(self, *args):
        _fpdfconversionsdk.WStringArray_swiginit(self, _fpdfconversionsdk.new_WStringArray(*args))

    def GetSize(self, *args):
        return _fpdfconversionsdk.WStringArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fpdfconversionsdk.WStringArray_GetAt(self, *args)

    def Add(self, *args):
        return _fpdfconversionsdk.WStringArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fpdfconversionsdk.WStringArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fpdfconversionsdk.WStringArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fpdfconversionsdk.WStringArray_RemoveAll(self, *args)

# Register WStringArray in _fpdfconversionsdk:
_fpdfconversionsdk.WStringArray_swigregister(WStringArray)
e_ErrSuccess = _fpdfconversionsdk.e_ErrSuccess
e_ErrFile = _fpdfconversionsdk.e_ErrFile
e_ErrFormat = _fpdfconversionsdk.e_ErrFormat
e_ErrPassword = _fpdfconversionsdk.e_ErrPassword
e_ErrHandle = _fpdfconversionsdk.e_ErrHandle
e_ErrCertificate = _fpdfconversionsdk.e_ErrCertificate
e_ErrUnknown = _fpdfconversionsdk.e_ErrUnknown
e_ErrInvalidLicense = _fpdfconversionsdk.e_ErrInvalidLicense
e_ErrParam = _fpdfconversionsdk.e_ErrParam
e_ErrUnsupported = _fpdfconversionsdk.e_ErrUnsupported
e_ErrOutOfMemory = _fpdfconversionsdk.e_ErrOutOfMemory
e_ErrSecurityHandler = _fpdfconversionsdk.e_ErrSecurityHandler
e_ErrNotParsed = _fpdfconversionsdk.e_ErrNotParsed
e_ErrNotFound = _fpdfconversionsdk.e_ErrNotFound
e_ErrInvalidType = _fpdfconversionsdk.e_ErrInvalidType
e_ErrUnknownState = _fpdfconversionsdk.e_ErrUnknownState
e_ErrDataNotReady = _fpdfconversionsdk.e_ErrDataNotReady
e_ErrNotLoaded = _fpdfconversionsdk.e_ErrNotLoaded
e_ErrNoPDF2OfficeModuleRight = _fpdfconversionsdk.e_ErrNoPDF2OfficeModuleRight
e_ErrNoOffice2PDFModuleRight = _fpdfconversionsdk.e_ErrNoOffice2PDFModuleRight
e_ErrNoDocumentPermission = _fpdfconversionsdk.e_ErrNoDocumentPermission
class Base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_Base

# Register Base in _fpdfconversionsdk:
_fpdfconversionsdk.Base_swigregister(Base)
class Exception(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.Exception_swiginit(self, _fpdfconversionsdk.new_Exception(*args))
    __swig_destroy__ = _fpdfconversionsdk.delete_Exception

    def GetErrCode(self, *args):
        return _fpdfconversionsdk.Exception_GetErrCode(self, *args)

    def GetMessage(self, *args):
        return _fpdfconversionsdk.Exception_GetMessage(self, *args)

    def GetName(self, *args):
        return _fpdfconversionsdk.Exception_GetName(self, *args)

# Register Exception in _fpdfconversionsdk:
_fpdfconversionsdk.Exception_swigregister(Exception)
e_PermPrint = _fpdfconversionsdk.e_PermPrint
e_PermModify = _fpdfconversionsdk.e_PermModify
e_PermExtract = _fpdfconversionsdk.e_PermExtract
e_PermAnnotForm = _fpdfconversionsdk.e_PermAnnotForm
e_PermFillForm = _fpdfconversionsdk.e_PermFillForm
e_PermExtractAccess = _fpdfconversionsdk.e_PermExtractAccess
e_PermAssemble = _fpdfconversionsdk.e_PermAssemble
e_PermPrintHigh = _fpdfconversionsdk.e_PermPrintHigh
class ConvertCheckCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def CheckUserPermissions(self, *args):
        return _fpdfconversionsdk.ConvertCheckCallback_CheckUserPermissions(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCheckCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.ConvertCheckCallback_swiginit(self, _fpdfconversionsdk.new_ConvertCheckCallback(_self, *args))
    __swig_destroy__ = _fpdfconversionsdk.delete_ConvertCheckCallback
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_ConvertCheckCallback(self)
        return weakref.proxy(self)

# Register ConvertCheckCallback in _fpdfconversionsdk:
_fpdfconversionsdk.ConvertCheckCallback_swigregister(ConvertCheckCallback)
class Library(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Initialize(*args):
        return _fpdfconversionsdk.Library_Initialize(*args)

    @staticmethod
    def Reinitialize(*args):
        return _fpdfconversionsdk.Library_Reinitialize(*args)

    @staticmethod
    def Release(*args):
        return _fpdfconversionsdk.Library_Release(*args)

    @staticmethod
    def GetVersion(*args):
        return _fpdfconversionsdk.Library_GetVersion(*args)

    @staticmethod
    def EnableThreadSafety(*args):
        return _fpdfconversionsdk.Library_EnableThreadSafety(*args)

    @staticmethod
    def SetConvertCheckCallback(*args):
        return _fpdfconversionsdk.Library_SetConvertCheckCallback(*args)
    __swig_destroy__ = _fpdfconversionsdk.delete_Library

# Register Library in _fpdfconversionsdk:
_fpdfconversionsdk.Library_swigregister(Library)
class Progressive(Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    e_Error = _fpdfconversionsdk.Progressive_e_Error
    e_ToBeContinued = _fpdfconversionsdk.Progressive_e_ToBeContinued
    e_Finished = _fpdfconversionsdk.Progressive_e_Finished

    def __init__(self, *args):
        _fpdfconversionsdk.Progressive_swiginit(self, _fpdfconversionsdk.new_Progressive(*args))
    __swig_destroy__ = _fpdfconversionsdk.delete_Progressive

    def Continue(self, *args):
        return _fpdfconversionsdk.Progressive_Continue(self, *args)

    def GetRateOfProgress(self, *args):
        return _fpdfconversionsdk.Progressive_GetRateOfProgress(self, *args)

# Register Progressive in _fpdfconversionsdk:
_fpdfconversionsdk.Progressive_swigregister(Progressive)
class Range(Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    e_All = _fpdfconversionsdk.Range_e_All
    e_Even = _fpdfconversionsdk.Range_e_Even
    e_Odd = _fpdfconversionsdk.Range_e_Odd

    def __init__(self, *args):
        _fpdfconversionsdk.Range_swiginit(self, _fpdfconversionsdk.new_Range(*args))
    __swig_destroy__ = _fpdfconversionsdk.delete_Range

    def __eq__(self, *args):
        return _fpdfconversionsdk.Range___eq__(self, *args)

    def __ne__(self, *args):
        return _fpdfconversionsdk.Range___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fpdfconversionsdk.Range_IsEmpty(self, *args)

    def AddSingle(self, *args):
        return _fpdfconversionsdk.Range_AddSingle(self, *args)

    def AddSegment(self, *args):
        return _fpdfconversionsdk.Range_AddSegment(self, *args)

    def GetSegmentCount(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentCount(self, *args)

    def GetSegmentStart(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentStart(self, *args)

    def GetSegmentEnd(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentEnd(self, *args)

    def RemoveAll(self, *args):
        return _fpdfconversionsdk.Range_RemoveAll(self, *args)

# Register Range in _fpdfconversionsdk:
_fpdfconversionsdk.Range_swigregister(Range)
class PDF2WordSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.PDF2WordSettingData_swiginit(self, _fpdfconversionsdk.new_PDF2WordSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2WordSettingData_Set(self, *args)
    enable_retain_page_layout = property(_fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_get, _fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_set)
    enable_generate_headers_and_footers = property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_set)
    enable_generate_footnotes_and_endnotes = property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_set)
    enable_generate_page_rendered_break = property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2WordSettingData

# Register PDF2WordSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.PDF2WordSettingData_swigregister(PDF2WordSettingData)
class PDF2PowerPointSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.PDF2PowerPointSettingData_swiginit(self, _fpdfconversionsdk.new_PDF2PowerPointSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2PowerPointSettingData_Set(self, *args)
    enable_aggressively_split_sections = property(_fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_get, _fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2PowerPointSettingData

# Register PDF2PowerPointSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.PDF2PowerPointSettingData_swigregister(PDF2PowerPointSettingData)
class PDF2ExcelSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    e_WorkbookSettingsDocument = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsDocument
    e_WorkbookSettingsEachTable = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachTable
    e_WorkbookSettingsEachPage = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachPage

    def __init__(self, *args):
        _fpdfconversionsdk.PDF2ExcelSettingData_swiginit(self, _fpdfconversionsdk.new_PDF2ExcelSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2ExcelSettingData_Set(self, *args)
    decimal_symbol = property(_fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_get, _fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_set)
    thousands_separator = property(_fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_get, _fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_set)
    workbook_settings = property(_fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_get, _fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2ExcelSettingData

# Register PDF2ExcelSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.PDF2ExcelSettingData_swigregister(PDF2ExcelSettingData)
class PDF2OfficeSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.PDF2OfficeSettingData_swiginit(self, _fpdfconversionsdk.new_PDF2OfficeSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2OfficeSettingData_Set(self, *args)
    metrics_data_folder_path = property(_fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_get, _fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_set)
    enable_ml_recognition = property(_fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_get, _fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_set)
    page_range = property(_fpdfconversionsdk.PDF2OfficeSettingData_page_range_get, _fpdfconversionsdk.PDF2OfficeSettingData_page_range_set)
    include_pdf_comments = property(_fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_get, _fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_set)
    word_setting_data = property(_fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_set)
    power_point_setting_data = property(_fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_set)
    excel_setting_data = property(_fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_set)
    enable_trailing_space = property(_fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_get, _fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_set)
    include_images = property(_fpdfconversionsdk.PDF2OfficeSettingData_include_images_get, _fpdfconversionsdk.PDF2OfficeSettingData_include_images_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2OfficeSettingData

# Register PDF2OfficeSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.PDF2OfficeSettingData_swigregister(PDF2OfficeSettingData)
class ConvertCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def NeedToPause(self, *args):
        return _fpdfconversionsdk.ConvertCallback_NeedToPause(self, *args)

    def ProgressNotify(self, *args):
        return _fpdfconversionsdk.ConvertCallback_ProgressNotify(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCallback:
            _self = None
        else:
            _self = self
        _fpdfconversionsdk.ConvertCallback_swiginit(self, _fpdfconversionsdk.new_ConvertCallback(_self, *args))
    __swig_destroy__ = _fpdfconversionsdk.delete_ConvertCallback
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_ConvertCallback(self)
        return weakref.proxy(self)

# Register ConvertCallback in _fpdfconversionsdk:
_fpdfconversionsdk.ConvertCallback_swigregister(ConvertCallback)
class PDF2Office(Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def StartConvertToWord(*args):
        return _fpdfconversionsdk.PDF2Office_StartConvertToWord(*args)

    @staticmethod
    def StartConvertToExcel(*args):
        return _fpdfconversionsdk.PDF2Office_StartConvertToExcel(*args)

    @staticmethod
    def StartConvertToPowerPoint(*args):
        return _fpdfconversionsdk.PDF2Office_StartConvertToPowerPoint(*args)

    def __init__(self, *args):
        _fpdfconversionsdk.PDF2Office_swiginit(self, _fpdfconversionsdk.new_PDF2Office(*args))
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2Office

# Register PDF2Office in _fpdfconversionsdk:
_fpdfconversionsdk.PDF2Office_swigregister(PDF2Office)
class Word2PDFSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.Word2PDFSettingData_swiginit(self, _fpdfconversionsdk.new_Word2PDFSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.Word2PDFSettingData_Set(self, *args)
    is_generate_bookmark = property(_fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_get, _fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Word2PDFSettingData

# Register Word2PDFSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.Word2PDFSettingData_swigregister(Word2PDFSettingData)
class Excel2PDFSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.Excel2PDFSettingData_swiginit(self, _fpdfconversionsdk.new_Excel2PDFSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.Excel2PDFSettingData_Set(self, *args)
    is_separate_workbook = property(_fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_get, _fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_set)
    is_output_hidden_worksheets = property(_fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_get, _fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_set)
    worksheet_names = property(_fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_get, _fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Excel2PDFSettingData

# Register Excel2PDFSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.Excel2PDFSettingData_swigregister(Excel2PDFSettingData)
class Office2PDFSettingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fpdfconversionsdk.Office2PDFSettingData_swiginit(self, _fpdfconversionsdk.new_Office2PDFSettingData(*args))

    def Set(self, *args):
        return _fpdfconversionsdk.Office2PDFSettingData_Set(self, *args)
    resource_folder_path = property(_fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_get, _fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_set)
    is_embed_font = property(_fpdfconversionsdk.Office2PDFSettingData_is_embed_font_get, _fpdfconversionsdk.Office2PDFSettingData_is_embed_font_set)
    word_setting_data = property(_fpdfconversionsdk.Office2PDFSettingData_word_setting_data_get, _fpdfconversionsdk.Office2PDFSettingData_word_setting_data_set)
    excel_setting_data = property(_fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_get, _fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Office2PDFSettingData

# Register Office2PDFSettingData in _fpdfconversionsdk:
_fpdfconversionsdk.Office2PDFSettingData_swigregister(Office2PDFSettingData)
class Office2PDF(Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ConvertFromWord(*args):
        return _fpdfconversionsdk.Office2PDF_ConvertFromWord(*args)

    @staticmethod
    def ConvertFromExcel(*args):
        return _fpdfconversionsdk.Office2PDF_ConvertFromExcel(*args)

    @staticmethod
    def ConvertFromPowerPoint(*args):
        return _fpdfconversionsdk.Office2PDF_ConvertFromPowerPoint(*args)

    def __init__(self, *args):
        _fpdfconversionsdk.Office2PDF_swiginit(self, _fpdfconversionsdk.new_Office2PDF(*args))
    __swig_destroy__ = _fpdfconversionsdk.delete_Office2PDF

# Register Office2PDF in _fpdfconversionsdk:
_fpdfconversionsdk.Office2PDF_swigregister(Office2PDF)

