# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fpdfconversionsdk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fpdfconversionsdk')
    _fpdfconversionsdk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fpdfconversionsdk', [dirname(__file__)])
        except ImportError:
            import _fpdfconversionsdk
            return _fpdfconversionsdk
        try:
            _mod = imp.load_module('_fpdfconversionsdk', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fpdfconversionsdk = swig_import_helper()
    del swig_import_helper
else:
    import _fpdfconversionsdk
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


_FX_WIN32_DESKTOP_ = _fpdfconversionsdk._FX_WIN32_DESKTOP_
_FX_WIN32_MOBILE_ = _fpdfconversionsdk._FX_WIN32_MOBILE_
_FX_WIN64_ = _fpdfconversionsdk._FX_WIN64_
_FX_LINUX_DESKTOP_ = _fpdfconversionsdk._FX_LINUX_DESKTOP_
_FX_LINUX_EMBEDDED_ = _fpdfconversionsdk._FX_LINUX_EMBEDDED_
_FX_SYMBIAN_ = _fpdfconversionsdk._FX_SYMBIAN_
_FX_MACOSX_ = _fpdfconversionsdk._FX_MACOSX_
_FX_EMBEDDED_ = _fpdfconversionsdk._FX_EMBEDDED_
_FX_SOLARIS_ = _fpdfconversionsdk._FX_SOLARIS_
_FX_PALMOS_ = _fpdfconversionsdk._FX_PALMOS_
_FX_NETBSD_ = _fpdfconversionsdk._FX_NETBSD_
_FX_ANDROID_ = _fpdfconversionsdk._FX_ANDROID_
_FX_VXWORKS_ = _fpdfconversionsdk._FX_VXWORKS_
_FX_MTK_ = _fpdfconversionsdk._FX_MTK_
_FX_IOS_ = _fpdfconversionsdk._FX_IOS_
_FXM_PLATFORM_WINDOWS_ = _fpdfconversionsdk._FXM_PLATFORM_WINDOWS_
_FXM_PLATFORM_LINUX_ = _fpdfconversionsdk._FXM_PLATFORM_LINUX_
_FXM_PLATFORM_APPLE_ = _fpdfconversionsdk._FXM_PLATFORM_APPLE_
_FXM_PLATFORM_ANDROID_ = _fpdfconversionsdk._FXM_PLATFORM_ANDROID_
_FXM_PLATFORM_ = _fpdfconversionsdk._FXM_PLATFORM_
_FX_VC6_ = _fpdfconversionsdk._FX_VC6_
_FX_VC7_ = _fpdfconversionsdk._FX_VC7_
_FX_VC8_ = _fpdfconversionsdk._FX_VC8_
_FX_GCC_ = _fpdfconversionsdk._FX_GCC_
_FX_ADS_ = _fpdfconversionsdk._FX_ADS_
_FX_RVCT_ = _fpdfconversionsdk._FX_RVCT_
_FX_IARCC_ = _fpdfconversionsdk._FX_IARCC_
_FX_NOKIA_X86_ = _fpdfconversionsdk._FX_NOKIA_X86_
_FX_METROWERKS_ = _fpdfconversionsdk._FX_METROWERKS_
_FX_PACC_ = _fpdfconversionsdk._FX_PACC_
_FX_TMS470_ = _fpdfconversionsdk._FX_TMS470_
_FX_MIPS_SDE_ = _fpdfconversionsdk._FX_MIPS_SDE_
_FX_X86_ = _fpdfconversionsdk._FX_X86_
_FX_ARM_ = _fpdfconversionsdk._FX_ARM_
_FX_POWERPC_ = _fpdfconversionsdk._FX_POWERPC_
_FX_SPARC_ = _fpdfconversionsdk._FX_SPARC_
_FX_IA64_ = _fpdfconversionsdk._FX_IA64_
_FX_MIPS_ = _fpdfconversionsdk._FX_MIPS_
_FX_X64_ = _fpdfconversionsdk._FX_X64_
_FX_ARM64_ = _fpdfconversionsdk._FX_ARM64_
_FX_MIPS64_ = _fpdfconversionsdk._FX_MIPS64_
_FX_LOONGARCH64_ = _fpdfconversionsdk._FX_LOONGARCH64_
_FX_W32_ = _fpdfconversionsdk._FX_W32_
_FX_W64_ = _fpdfconversionsdk._FX_W64_
_FX_WORDSIZE_ = _fpdfconversionsdk._FX_WORDSIZE_
_FX_BIG_ENDIAN_ = _fpdfconversionsdk._FX_BIG_ENDIAN_
_FX_LITTLE_ENDIAN_ = _fpdfconversionsdk._FX_LITTLE_ENDIAN_
_FX_ENDIAN_ = _fpdfconversionsdk._FX_ENDIAN_
_FX_DEFAULT_TARGET_ = _fpdfconversionsdk._FX_DEFAULT_TARGET_
_FX_BREW_ = _fpdfconversionsdk._FX_BREW_
NULL = _fpdfconversionsdk.NULL
FX_PI = _fpdfconversionsdk.FX_PI
FXMEM_NONLEAVE = _fpdfconversionsdk.FXMEM_NONLEAVE
FXMEM_MOVABLE = _fpdfconversionsdk.FXMEM_MOVABLE
FXMEM_DISCARDABLE = _fpdfconversionsdk.FXMEM_DISCARDABLE
class BasicArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
BasicArray_swigregister = _fpdfconversionsdk.BasicArray_swigregister
BasicArray_swigregister(BasicArray)

class PauseCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PauseCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PauseCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_PauseCallback
    __del__ = lambda self: None

    def NeedToPauseNow(self, *args):
        return _fpdfconversionsdk.PauseCallback_NeedToPauseNow(self, *args)

    def __init__(self, *args):
        if self.__class__ == PauseCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_PauseCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_PauseCallback(self)
        return weakref_proxy(self)
PauseCallback_swigregister = _fpdfconversionsdk.PauseCallback_swigregister
PauseCallback_swigregister(PauseCallback)

O_BINARY = _fpdfconversionsdk.O_BINARY
O_LARGEFILE = _fpdfconversionsdk.O_LARGEFILE
FX_FILEMODE_Write = _fpdfconversionsdk.FX_FILEMODE_Write
FX_FILEMODE_ReadOnly = _fpdfconversionsdk.FX_FILEMODE_ReadOnly
FX_FILEMODE_Truncate = _fpdfconversionsdk.FX_FILEMODE_Truncate
class FileWriterCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileWriterCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileWriterCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_GetSize(self, *args)

    def Flush(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_Flush(self, *args)

    def WriteBlock(self, *args):
        return _fpdfconversionsdk.FileWriterCallback_WriteBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileWriterCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_FileWriterCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_FileWriterCallback(self)
        return weakref_proxy(self)
FileWriterCallback_swigregister = _fpdfconversionsdk.FileWriterCallback_swigregister
FileWriterCallback_swigregister(FileWriterCallback)

class FileReaderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReaderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileReaderCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_GetSize(self, *args)

    def ReadBlock(self, *args):
        return _fpdfconversionsdk.FileReaderCallback_ReadBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileReaderCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_FileReaderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_FileReaderCallback(self)
        return weakref_proxy(self)
FileReaderCallback_swigregister = _fpdfconversionsdk.FileReaderCallback_swigregister
FileReaderCallback_swigregister(FileReaderCallback)

class StreamCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamCallback, name)
    __repr__ = _swig_repr

    def Retain(self, *args):
        return _fpdfconversionsdk.StreamCallback_Retain(self, *args)

    def Release(self, *args):
        return _fpdfconversionsdk.StreamCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fpdfconversionsdk.StreamCallback_GetSize(self, *args)

    def IsEOF(self, *args):
        return _fpdfconversionsdk.StreamCallback_IsEOF(self, *args)

    def GetPosition(self, *args):
        return _fpdfconversionsdk.StreamCallback_GetPosition(self, *args)

    def ReadBlock(self, *args):
        return _fpdfconversionsdk.StreamCallback_ReadBlock(self, *args)

    def WriteBlock(self, *args):
        return _fpdfconversionsdk.StreamCallback_WriteBlock(self, *args)

    def Flush(self, *args):
        return _fpdfconversionsdk.StreamCallback_Flush(self, *args)

    def __init__(self, *args):
        if self.__class__ == StreamCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_StreamCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_StreamCallback(self)
        return weakref_proxy(self)
StreamCallback_swigregister = _fpdfconversionsdk.StreamCallback_swigregister
StreamCallback_swigregister(StreamCallback)

TRUE = _fpdfconversionsdk.TRUE
FALSE = _fpdfconversionsdk.FALSE
class WStringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WStringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WStringArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_WStringArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_WStringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fpdfconversionsdk.WStringArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fpdfconversionsdk.WStringArray_GetAt(self, *args)

    def Add(self, *args):
        return _fpdfconversionsdk.WStringArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fpdfconversionsdk.WStringArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fpdfconversionsdk.WStringArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fpdfconversionsdk.WStringArray_RemoveAll(self, *args)
WStringArray_swigregister = _fpdfconversionsdk.WStringArray_swigregister
WStringArray_swigregister(WStringArray)

e_ErrSuccess = _fpdfconversionsdk.e_ErrSuccess
e_ErrFile = _fpdfconversionsdk.e_ErrFile
e_ErrFormat = _fpdfconversionsdk.e_ErrFormat
e_ErrPassword = _fpdfconversionsdk.e_ErrPassword
e_ErrHandle = _fpdfconversionsdk.e_ErrHandle
e_ErrCertificate = _fpdfconversionsdk.e_ErrCertificate
e_ErrUnknown = _fpdfconversionsdk.e_ErrUnknown
e_ErrInvalidLicense = _fpdfconversionsdk.e_ErrInvalidLicense
e_ErrParam = _fpdfconversionsdk.e_ErrParam
e_ErrUnsupported = _fpdfconversionsdk.e_ErrUnsupported
e_ErrOutOfMemory = _fpdfconversionsdk.e_ErrOutOfMemory
e_ErrSecurityHandler = _fpdfconversionsdk.e_ErrSecurityHandler
e_ErrNotParsed = _fpdfconversionsdk.e_ErrNotParsed
e_ErrNotFound = _fpdfconversionsdk.e_ErrNotFound
e_ErrInvalidType = _fpdfconversionsdk.e_ErrInvalidType
e_ErrUnknownState = _fpdfconversionsdk.e_ErrUnknownState
e_ErrDataNotReady = _fpdfconversionsdk.e_ErrDataNotReady
e_ErrNotLoaded = _fpdfconversionsdk.e_ErrNotLoaded
e_ErrNoPDF2OfficeModuleRight = _fpdfconversionsdk.e_ErrNoPDF2OfficeModuleRight
e_ErrNoOffice2PDFModuleRight = _fpdfconversionsdk.e_ErrNoOffice2PDFModuleRight
e_ErrNoDocumentPermission = _fpdfconversionsdk.e_ErrNoDocumentPermission
class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fpdfconversionsdk.delete_Base
    __del__ = lambda self: None
Base_swigregister = _fpdfconversionsdk.Base_swigregister
Base_swigregister(Base)

class Exception(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_Exception
    __del__ = lambda self: None

    def GetErrCode(self, *args):
        return _fpdfconversionsdk.Exception_GetErrCode(self, *args)

    def GetMessage(self, *args):
        return _fpdfconversionsdk.Exception_GetMessage(self, *args)

    def GetName(self, *args):
        return _fpdfconversionsdk.Exception_GetName(self, *args)
Exception_swigregister = _fpdfconversionsdk.Exception_swigregister
Exception_swigregister(Exception)

e_PermPrint = _fpdfconversionsdk.e_PermPrint
e_PermModify = _fpdfconversionsdk.e_PermModify
e_PermExtract = _fpdfconversionsdk.e_PermExtract
e_PermAnnotForm = _fpdfconversionsdk.e_PermAnnotForm
e_PermFillForm = _fpdfconversionsdk.e_PermFillForm
e_PermExtractAccess = _fpdfconversionsdk.e_PermExtractAccess
e_PermAssemble = _fpdfconversionsdk.e_PermAssemble
e_PermPrintHigh = _fpdfconversionsdk.e_PermPrintHigh
class ConvertCheckCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertCheckCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertCheckCallback, name)
    __repr__ = _swig_repr

    def CheckUserPermissions(self, *args):
        return _fpdfconversionsdk.ConvertCheckCallback_CheckUserPermissions(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCheckCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_ConvertCheckCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_ConvertCheckCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_ConvertCheckCallback(self)
        return weakref_proxy(self)
ConvertCheckCallback_swigregister = _fpdfconversionsdk.ConvertCheckCallback_swigregister
ConvertCheckCallback_swigregister(ConvertCheckCallback)

class Library(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Library, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Library, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_fpdfconversionsdk.Library_Initialize)
    else:
        Initialize = _fpdfconversionsdk.Library_Initialize
    if _newclass:
        Reinitialize = staticmethod(_fpdfconversionsdk.Library_Reinitialize)
    else:
        Reinitialize = _fpdfconversionsdk.Library_Reinitialize
    if _newclass:
        Release = staticmethod(_fpdfconversionsdk.Library_Release)
    else:
        Release = _fpdfconversionsdk.Library_Release
    if _newclass:
        GetVersion = staticmethod(_fpdfconversionsdk.Library_GetVersion)
    else:
        GetVersion = _fpdfconversionsdk.Library_GetVersion
    if _newclass:
        EnableThreadSafety = staticmethod(_fpdfconversionsdk.Library_EnableThreadSafety)
    else:
        EnableThreadSafety = _fpdfconversionsdk.Library_EnableThreadSafety
    if _newclass:
        SetConvertCheckCallback = staticmethod(_fpdfconversionsdk.Library_SetConvertCheckCallback)
    else:
        SetConvertCheckCallback = _fpdfconversionsdk.Library_SetConvertCheckCallback
    __swig_destroy__ = _fpdfconversionsdk.delete_Library
    __del__ = lambda self: None
Library_swigregister = _fpdfconversionsdk.Library_swigregister
Library_swigregister(Library)

def Library_Initialize(*args):
    return _fpdfconversionsdk.Library_Initialize(*args)
Library_Initialize = _fpdfconversionsdk.Library_Initialize

def Library_Reinitialize(*args):
    return _fpdfconversionsdk.Library_Reinitialize(*args)
Library_Reinitialize = _fpdfconversionsdk.Library_Reinitialize

def Library_Release(*args):
    return _fpdfconversionsdk.Library_Release(*args)
Library_Release = _fpdfconversionsdk.Library_Release

def Library_GetVersion(*args):
    return _fpdfconversionsdk.Library_GetVersion(*args)
Library_GetVersion = _fpdfconversionsdk.Library_GetVersion

def Library_EnableThreadSafety(*args):
    return _fpdfconversionsdk.Library_EnableThreadSafety(*args)
Library_EnableThreadSafety = _fpdfconversionsdk.Library_EnableThreadSafety

def Library_SetConvertCheckCallback(*args):
    return _fpdfconversionsdk.Library_SetConvertCheckCallback(*args)
Library_SetConvertCheckCallback = _fpdfconversionsdk.Library_SetConvertCheckCallback

class Progressive(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progressive, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Progressive, name)
    __repr__ = _swig_repr
    e_Error = _fpdfconversionsdk.Progressive_e_Error
    e_ToBeContinued = _fpdfconversionsdk.Progressive_e_ToBeContinued
    e_Finished = _fpdfconversionsdk.Progressive_e_Finished

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Progressive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_Progressive
    __del__ = lambda self: None

    def Continue(self, *args):
        return _fpdfconversionsdk.Progressive_Continue(self, *args)

    def GetRateOfProgress(self, *args):
        return _fpdfconversionsdk.Progressive_GetRateOfProgress(self, *args)
Progressive_swigregister = _fpdfconversionsdk.Progressive_swigregister
Progressive_swigregister(Progressive)

class Range(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    e_All = _fpdfconversionsdk.Range_e_All
    e_Even = _fpdfconversionsdk.Range_e_Even
    e_Odd = _fpdfconversionsdk.Range_e_Odd

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_Range
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fpdfconversionsdk.Range___eq__(self, *args)

    def __ne__(self, *args):
        return _fpdfconversionsdk.Range___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fpdfconversionsdk.Range_IsEmpty(self, *args)

    def AddSingle(self, *args):
        return _fpdfconversionsdk.Range_AddSingle(self, *args)

    def AddSegment(self, *args):
        return _fpdfconversionsdk.Range_AddSegment(self, *args)

    def GetSegmentCount(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentCount(self, *args)

    def GetSegmentStart(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentStart(self, *args)

    def GetSegmentEnd(self, *args):
        return _fpdfconversionsdk.Range_GetSegmentEnd(self, *args)

    def RemoveAll(self, *args):
        return _fpdfconversionsdk.Range_RemoveAll(self, *args)
Range_swigregister = _fpdfconversionsdk.Range_swigregister
Range_swigregister(Range)

class PDF2WordSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2WordSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2WordSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_PDF2WordSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2WordSettingData_Set(self, *args)
    __swig_setmethods__["enable_retain_page_layout"] = _fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_set
    __swig_getmethods__["enable_retain_page_layout"] = _fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_get
    if _newclass:
        enable_retain_page_layout = _swig_property(_fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_get, _fpdfconversionsdk.PDF2WordSettingData_enable_retain_page_layout_set)
    __swig_setmethods__["enable_generate_headers_and_footers"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_set
    __swig_getmethods__["enable_generate_headers_and_footers"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_get
    if _newclass:
        enable_generate_headers_and_footers = _swig_property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_headers_and_footers_set)
    __swig_setmethods__["enable_generate_footnotes_and_endnotes"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_set
    __swig_getmethods__["enable_generate_footnotes_and_endnotes"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_get
    if _newclass:
        enable_generate_footnotes_and_endnotes = _swig_property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_set)
    __swig_setmethods__["enable_generate_page_rendered_break"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_set
    __swig_getmethods__["enable_generate_page_rendered_break"] = _fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_get
    if _newclass:
        enable_generate_page_rendered_break = _swig_property(_fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_get, _fpdfconversionsdk.PDF2WordSettingData_enable_generate_page_rendered_break_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2WordSettingData
    __del__ = lambda self: None
PDF2WordSettingData_swigregister = _fpdfconversionsdk.PDF2WordSettingData_swigregister
PDF2WordSettingData_swigregister(PDF2WordSettingData)

class PDF2PowerPointSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2PowerPointSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2PowerPointSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_PDF2PowerPointSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2PowerPointSettingData_Set(self, *args)
    __swig_setmethods__["enable_aggressively_split_sections"] = _fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_set
    __swig_getmethods__["enable_aggressively_split_sections"] = _fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_get
    if _newclass:
        enable_aggressively_split_sections = _swig_property(_fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_get, _fpdfconversionsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2PowerPointSettingData
    __del__ = lambda self: None
PDF2PowerPointSettingData_swigregister = _fpdfconversionsdk.PDF2PowerPointSettingData_swigregister
PDF2PowerPointSettingData_swigregister(PDF2PowerPointSettingData)

class PDF2ExcelSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2ExcelSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2ExcelSettingData, name)
    __repr__ = _swig_repr
    e_WorkbookSettingsDocument = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsDocument
    e_WorkbookSettingsEachTable = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachTable
    e_WorkbookSettingsEachPage = _fpdfconversionsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachPage

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_PDF2ExcelSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2ExcelSettingData_Set(self, *args)
    __swig_setmethods__["decimal_symbol"] = _fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_set
    __swig_getmethods__["decimal_symbol"] = _fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_get
    if _newclass:
        decimal_symbol = _swig_property(_fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_get, _fpdfconversionsdk.PDF2ExcelSettingData_decimal_symbol_set)
    __swig_setmethods__["thousands_separator"] = _fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_set
    __swig_getmethods__["thousands_separator"] = _fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_get
    if _newclass:
        thousands_separator = _swig_property(_fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_get, _fpdfconversionsdk.PDF2ExcelSettingData_thousands_separator_set)
    __swig_setmethods__["workbook_settings"] = _fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_set
    __swig_getmethods__["workbook_settings"] = _fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_get
    if _newclass:
        workbook_settings = _swig_property(_fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_get, _fpdfconversionsdk.PDF2ExcelSettingData_workbook_settings_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2ExcelSettingData
    __del__ = lambda self: None
PDF2ExcelSettingData_swigregister = _fpdfconversionsdk.PDF2ExcelSettingData_swigregister
PDF2ExcelSettingData_swigregister(PDF2ExcelSettingData)

class PDF2OfficeSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2OfficeSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2OfficeSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_PDF2OfficeSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.PDF2OfficeSettingData_Set(self, *args)
    __swig_setmethods__["metrics_data_folder_path"] = _fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_set
    __swig_getmethods__["metrics_data_folder_path"] = _fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_get
    if _newclass:
        metrics_data_folder_path = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_get, _fpdfconversionsdk.PDF2OfficeSettingData_metrics_data_folder_path_set)
    __swig_setmethods__["enable_ml_recognition"] = _fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_set
    __swig_getmethods__["enable_ml_recognition"] = _fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_get
    if _newclass:
        enable_ml_recognition = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_get, _fpdfconversionsdk.PDF2OfficeSettingData_enable_ml_recognition_set)
    __swig_setmethods__["page_range"] = _fpdfconversionsdk.PDF2OfficeSettingData_page_range_set
    __swig_getmethods__["page_range"] = _fpdfconversionsdk.PDF2OfficeSettingData_page_range_get
    if _newclass:
        page_range = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_page_range_get, _fpdfconversionsdk.PDF2OfficeSettingData_page_range_set)
    __swig_setmethods__["include_pdf_comments"] = _fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_set
    __swig_getmethods__["include_pdf_comments"] = _fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_get
    if _newclass:
        include_pdf_comments = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_get, _fpdfconversionsdk.PDF2OfficeSettingData_include_pdf_comments_set)
    __swig_setmethods__["word_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_set
    __swig_getmethods__["word_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_get
    if _newclass:
        word_setting_data = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_word_setting_data_set)
    __swig_setmethods__["power_point_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_set
    __swig_getmethods__["power_point_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_get
    if _newclass:
        power_point_setting_data = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_power_point_setting_data_set)
    __swig_setmethods__["excel_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_set
    __swig_getmethods__["excel_setting_data"] = _fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_get
    if _newclass:
        excel_setting_data = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_get, _fpdfconversionsdk.PDF2OfficeSettingData_excel_setting_data_set)
    __swig_setmethods__["enable_trailing_space"] = _fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_set
    __swig_getmethods__["enable_trailing_space"] = _fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_get
    if _newclass:
        enable_trailing_space = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_get, _fpdfconversionsdk.PDF2OfficeSettingData_enable_trailing_space_set)
    __swig_setmethods__["include_images"] = _fpdfconversionsdk.PDF2OfficeSettingData_include_images_set
    __swig_getmethods__["include_images"] = _fpdfconversionsdk.PDF2OfficeSettingData_include_images_get
    if _newclass:
        include_images = _swig_property(_fpdfconversionsdk.PDF2OfficeSettingData_include_images_get, _fpdfconversionsdk.PDF2OfficeSettingData_include_images_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2OfficeSettingData
    __del__ = lambda self: None
PDF2OfficeSettingData_swigregister = _fpdfconversionsdk.PDF2OfficeSettingData_swigregister
PDF2OfficeSettingData_swigregister(PDF2OfficeSettingData)

class ConvertCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertCallback, name)
    __repr__ = _swig_repr

    def NeedToPause(self, *args):
        return _fpdfconversionsdk.ConvertCallback_NeedToPause(self, *args)

    def ProgressNotify(self, *args):
        return _fpdfconversionsdk.ConvertCallback_ProgressNotify(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCallback:
            _self = None
        else:
            _self = self
        this = _fpdfconversionsdk.new_ConvertCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_ConvertCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fpdfconversionsdk.disown_ConvertCallback(self)
        return weakref_proxy(self)
ConvertCallback_swigregister = _fpdfconversionsdk.ConvertCallback_swigregister
ConvertCallback_swigregister(ConvertCallback)

class PDF2Office(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2Office, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2Office, name)
    __repr__ = _swig_repr
    if _newclass:
        StartConvertToWord = staticmethod(_fpdfconversionsdk.PDF2Office_StartConvertToWord)
    else:
        StartConvertToWord = _fpdfconversionsdk.PDF2Office_StartConvertToWord
    if _newclass:
        StartConvertToExcel = staticmethod(_fpdfconversionsdk.PDF2Office_StartConvertToExcel)
    else:
        StartConvertToExcel = _fpdfconversionsdk.PDF2Office_StartConvertToExcel
    if _newclass:
        StartConvertToPowerPoint = staticmethod(_fpdfconversionsdk.PDF2Office_StartConvertToPowerPoint)
    else:
        StartConvertToPowerPoint = _fpdfconversionsdk.PDF2Office_StartConvertToPowerPoint

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_PDF2Office(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_PDF2Office
    __del__ = lambda self: None
PDF2Office_swigregister = _fpdfconversionsdk.PDF2Office_swigregister
PDF2Office_swigregister(PDF2Office)

def PDF2Office_StartConvertToWord(*args):
    return _fpdfconversionsdk.PDF2Office_StartConvertToWord(*args)
PDF2Office_StartConvertToWord = _fpdfconversionsdk.PDF2Office_StartConvertToWord

def PDF2Office_StartConvertToExcel(*args):
    return _fpdfconversionsdk.PDF2Office_StartConvertToExcel(*args)
PDF2Office_StartConvertToExcel = _fpdfconversionsdk.PDF2Office_StartConvertToExcel

def PDF2Office_StartConvertToPowerPoint(*args):
    return _fpdfconversionsdk.PDF2Office_StartConvertToPowerPoint(*args)
PDF2Office_StartConvertToPowerPoint = _fpdfconversionsdk.PDF2Office_StartConvertToPowerPoint

class Word2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word2PDFSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Word2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.Word2PDFSettingData_Set(self, *args)
    __swig_setmethods__["is_generate_bookmark"] = _fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_set
    __swig_getmethods__["is_generate_bookmark"] = _fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_get
    if _newclass:
        is_generate_bookmark = _swig_property(_fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_get, _fpdfconversionsdk.Word2PDFSettingData_is_generate_bookmark_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Word2PDFSettingData
    __del__ = lambda self: None
Word2PDFSettingData_swigregister = _fpdfconversionsdk.Word2PDFSettingData_swigregister
Word2PDFSettingData_swigregister(Word2PDFSettingData)

class Excel2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Excel2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Excel2PDFSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Excel2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.Excel2PDFSettingData_Set(self, *args)
    __swig_setmethods__["is_separate_workbook"] = _fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_set
    __swig_getmethods__["is_separate_workbook"] = _fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_get
    if _newclass:
        is_separate_workbook = _swig_property(_fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_get, _fpdfconversionsdk.Excel2PDFSettingData_is_separate_workbook_set)
    __swig_setmethods__["is_output_hidden_worksheets"] = _fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_set
    __swig_getmethods__["is_output_hidden_worksheets"] = _fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_get
    if _newclass:
        is_output_hidden_worksheets = _swig_property(_fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_get, _fpdfconversionsdk.Excel2PDFSettingData_is_output_hidden_worksheets_set)
    __swig_setmethods__["worksheet_names"] = _fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_set
    __swig_getmethods__["worksheet_names"] = _fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_get
    if _newclass:
        worksheet_names = _swig_property(_fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_get, _fpdfconversionsdk.Excel2PDFSettingData_worksheet_names_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Excel2PDFSettingData
    __del__ = lambda self: None
Excel2PDFSettingData_swigregister = _fpdfconversionsdk.Excel2PDFSettingData_swigregister
Excel2PDFSettingData_swigregister(Excel2PDFSettingData)

class Office2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Office2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Office2PDFSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Office2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fpdfconversionsdk.Office2PDFSettingData_Set(self, *args)
    __swig_setmethods__["resource_folder_path"] = _fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_set
    __swig_getmethods__["resource_folder_path"] = _fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_get
    if _newclass:
        resource_folder_path = _swig_property(_fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_get, _fpdfconversionsdk.Office2PDFSettingData_resource_folder_path_set)
    __swig_setmethods__["is_embed_font"] = _fpdfconversionsdk.Office2PDFSettingData_is_embed_font_set
    __swig_getmethods__["is_embed_font"] = _fpdfconversionsdk.Office2PDFSettingData_is_embed_font_get
    if _newclass:
        is_embed_font = _swig_property(_fpdfconversionsdk.Office2PDFSettingData_is_embed_font_get, _fpdfconversionsdk.Office2PDFSettingData_is_embed_font_set)
    __swig_setmethods__["word_setting_data"] = _fpdfconversionsdk.Office2PDFSettingData_word_setting_data_set
    __swig_getmethods__["word_setting_data"] = _fpdfconversionsdk.Office2PDFSettingData_word_setting_data_get
    if _newclass:
        word_setting_data = _swig_property(_fpdfconversionsdk.Office2PDFSettingData_word_setting_data_get, _fpdfconversionsdk.Office2PDFSettingData_word_setting_data_set)
    __swig_setmethods__["excel_setting_data"] = _fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_set
    __swig_getmethods__["excel_setting_data"] = _fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_get
    if _newclass:
        excel_setting_data = _swig_property(_fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_get, _fpdfconversionsdk.Office2PDFSettingData_excel_setting_data_set)
    __swig_destroy__ = _fpdfconversionsdk.delete_Office2PDFSettingData
    __del__ = lambda self: None
Office2PDFSettingData_swigregister = _fpdfconversionsdk.Office2PDFSettingData_swigregister
Office2PDFSettingData_swigregister(Office2PDFSettingData)

class Office2PDF(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Office2PDF, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Office2PDF, name)
    __repr__ = _swig_repr
    if _newclass:
        ConvertFromWord = staticmethod(_fpdfconversionsdk.Office2PDF_ConvertFromWord)
    else:
        ConvertFromWord = _fpdfconversionsdk.Office2PDF_ConvertFromWord
    if _newclass:
        ConvertFromExcel = staticmethod(_fpdfconversionsdk.Office2PDF_ConvertFromExcel)
    else:
        ConvertFromExcel = _fpdfconversionsdk.Office2PDF_ConvertFromExcel
    if _newclass:
        ConvertFromPowerPoint = staticmethod(_fpdfconversionsdk.Office2PDF_ConvertFromPowerPoint)
    else:
        ConvertFromPowerPoint = _fpdfconversionsdk.Office2PDF_ConvertFromPowerPoint

    def __init__(self, *args):
        this = _fpdfconversionsdk.new_Office2PDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fpdfconversionsdk.delete_Office2PDF
    __del__ = lambda self: None
Office2PDF_swigregister = _fpdfconversionsdk.Office2PDF_swigregister
Office2PDF_swigregister(Office2PDF)

def Office2PDF_ConvertFromWord(*args):
    return _fpdfconversionsdk.Office2PDF_ConvertFromWord(*args)
Office2PDF_ConvertFromWord = _fpdfconversionsdk.Office2PDF_ConvertFromWord

def Office2PDF_ConvertFromExcel(*args):
    return _fpdfconversionsdk.Office2PDF_ConvertFromExcel(*args)
Office2PDF_ConvertFromExcel = _fpdfconversionsdk.Office2PDF_ConvertFromExcel

def Office2PDF_ConvertFromPowerPoint(*args):
    return _fpdfconversionsdk.Office2PDF_ConvertFromPowerPoint(*args)
Office2PDF_ConvertFromPowerPoint = _fpdfconversionsdk.Office2PDF_ConvertFromPowerPoint

# This file is compatible with both classic and new-style classes.


