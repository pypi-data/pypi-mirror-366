Metadata-Version: 2.4
Name: rust-crate-pipeline
Version: 1.5.6
Summary: A comprehensive pipeline for analyzing Rust crates with AI enrichment and enhanced scraping
Home-page: https://github.com/SigilDERG/rust-crate-pipeline
Author: SigilDERG Team
Author-email: SigilDERG Team <sigilderg@example.com>
License: MIT
Project-URL: Homepage, https://github.com/Superuser666-Sigil/SigilDERG-Data_Production
Project-URL: Documentation, https://github.com/Superuser666-Sigil/SigilDERG-Data_Production#readme
Project-URL: Repository, https://github.com/Superuser666-Sigil/SigilDERG-Data_Production
Project-URL: Bug Tracker, https://github.com/Superuser666-Sigil/SigilDERG-Data_Production/issues
Keywords: rust,crates,analysis,ai,pipeline,scraping
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Quality Assurance
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.28.0
Requires-Dist: requests-cache>=1.0.0
Requires-Dist: beautifulsoup4>=4.11.0
Requires-Dist: crawl4ai>=0.6.0
Requires-Dist: playwright>=1.49.0
Requires-Dist: tqdm>=4.64.0
Requires-Dist: llama-cpp-python>=0.2.0
Requires-Dist: tiktoken>=0.5.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: litellm>=1.0.0
Requires-Dist: presidio-analyzer>=2.2.0
Requires-Dist: spacy>=3.7.0
Requires-Dist: azure-ai-inference>=1.0.0b9
Requires-Dist: azure-core>=1.29.0
Requires-Dist: azure-identity>=1.15.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: toml>=0.10.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: dataclasses-json>=0.6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Provides-Extra: advanced
Requires-Dist: radon>=6.0.0; extra == "advanced"
Requires-Dist: rustworkx>=0.13.0; extra == "advanced"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Rust Crate Pipeline

A comprehensive system for gathering, enriching, and analyzing metadata for Rust crates using AI-powered insights, web scraping, and dependency analysis.

## Quickstart

```bash
pip install rust-crate-pipeline
python -m rust_crate_pipeline --config-file my_config.json
```

- Requires **Python 3.11+**
- For GPU/DeepSeek/llama-cpp-python, see the 'Advanced' section below

## Features

- Enhanced web scraping (Crawl4AI + Playwright)
- AI enrichment (local or Azure OpenAI, DeepSeek, Lambda.AI, etc.)
- Multi-provider LLM support (see Advanced)
- Cargo build/test/audit
- Batch processing, JSON output, Docker support

## Requirements

- **Python 3.11+**
- Git, Cargo, Playwright (auto-installed)

## Installation

```bash
pip install rust-crate-pipeline
# For dev: pip install -e .
# Install Playwright browsers (required for enhanced scraping)
playwright install
```

## Configuration

- All configuration is via a single JSON file, passed with `--config-file <path>`
- No config file is auto-loaded; you must specify the path

Example `my_config.json`:
```json
{
    "batch_size": 10,
    "n_workers": 4,
    "max_retries": 3,
    "checkpoint_interval": 10,
    "use_azure_openai": false,
    "enable_crawl4ai": true,
    "model_path": "/path/to/model.gguf"
}
```

Set required environment variables as needed (e.g., `GITHUB_TOKEN`, Azure/OpenAI keys, etc.)

## Usage

### Basic Usage

```bash
python -m rust_crate_pipeline --config-file my_config.json
```

### Custom Options (combine as needed)

```bash
python -m rust_crate_pipeline \
  --config-file my_config.json \
  --batch-size 20 \
  --n-workers 8 \
  --max-tokens 2048 \
  --checkpoint-interval 5 \
  --log-level DEBUG \
  --output-path ./results
```

### Advanced: Multi-Provider LLM & GPU

- For local DeepSeek, GPU, or custom LLMs, set `model_path` and `n_gpu_layers` in your config file.
- For Azure/OpenAI/Lambda.AI, set `use_azure_openai: true` and provide the required environment variables.
- For full LLM provider support, see [README_LLM_PROVIDERS.md](README_LLM_PROVIDERS.md)

## Development

- Build: `python -m build`
- Test: `pytest --cov=rust_crate_pipeline tests/`
- Lint: `pyright rust_crate_pipeline/`
- Format: `black rust_crate_pipeline/`
- Publish: `twine upload dist/*`

## Changelog

See `CHANGELOGS/CHANGELOG_v1.5.0.md` and previous changelogs for release history.
