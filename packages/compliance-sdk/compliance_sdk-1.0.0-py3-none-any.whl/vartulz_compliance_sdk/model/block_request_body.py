# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class BlockRequestBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "companyId",
            "blockRemark",
        }
        
        class properties:
            companyId = schemas.StrSchema
            blockRemark = schemas.StrSchema
            
            
            class enums(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TRUE": "TRUE",
                        "FALSE": "FALSE",
                        "BLOCKED": "BLOCKED",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("TRUE")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("FALSE")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("BLOCKED")
            __annotations__ = {
                "companyId": companyId,
                "blockRemark": blockRemark,
                "enums": enums,
            }
    
    companyId: MetaOapg.properties.companyId
    blockRemark: MetaOapg.properties.blockRemark
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockRemark"]) -> MetaOapg.properties.blockRemark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enums"]) -> MetaOapg.properties.enums: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyId", "blockRemark", "enums", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockRemark"]) -> MetaOapg.properties.blockRemark: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enums"]) -> typing.Union[MetaOapg.properties.enums, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyId", "blockRemark", "enums", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        companyId: typing.Union[MetaOapg.properties.companyId, str, ],
        blockRemark: typing.Union[MetaOapg.properties.blockRemark, str, ],
        enums: typing.Union[MetaOapg.properties.enums, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BlockRequestBody':
        return super().__new__(
            cls,
            *_args,
            companyId=companyId,
            blockRemark=blockRemark,
            enums=enums,
            _configuration=_configuration,
            **kwargs,
        )
