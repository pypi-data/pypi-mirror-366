# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class BankAccountVerification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "phone",
            "caseId",
            "name",
            "ifsc",
            "bank_account",
        }
        
        class properties:
            bank_account = schemas.StrSchema
            ifsc = schemas.StrSchema
            name = schemas.StrSchema
            phone = schemas.StrSchema
            caseId = schemas.StrSchema
            __annotations__ = {
                "bank_account": bank_account,
                "ifsc": ifsc,
                "name": name,
                "phone": phone,
                "caseId": caseId,
            }
    
    phone: MetaOapg.properties.phone
    caseId: MetaOapg.properties.caseId
    name: MetaOapg.properties.name
    ifsc: MetaOapg.properties.ifsc
    bank_account: MetaOapg.properties.bank_account
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_account"]) -> MetaOapg.properties.bank_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ifsc"]) -> MetaOapg.properties.ifsc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bank_account", "ifsc", "name", "phone", "caseId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_account"]) -> MetaOapg.properties.bank_account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ifsc"]) -> MetaOapg.properties.ifsc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bank_account", "ifsc", "name", "phone", "caseId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        caseId: typing.Union[MetaOapg.properties.caseId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        ifsc: typing.Union[MetaOapg.properties.ifsc, str, ],
        bank_account: typing.Union[MetaOapg.properties.bank_account, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BankAccountVerification':
        return super().__new__(
            cls,
            *_args,
            phone=phone,
            caseId=caseId,
            name=name,
            ifsc=ifsc,
            bank_account=bank_account,
            _configuration=_configuration,
            **kwargs,
        )
