# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class NewCompanyRegistrationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "gstinTradeName",
            "address",
            "companyType",
            "gstinctb",
            "companyName",
            "authSignEmail",
            "panNumber",
            "gstinNumber",
            "gstinLegalName",
        }
        
        class properties:
            companyName = schemas.StrSchema
            authSignEmail = schemas.StrSchema
            panNumber = schemas.StrSchema
            gstinNumber = schemas.StrSchema
            companyType = schemas.StrSchema
            gstinctb = schemas.StrSchema
            gstinLegalName = schemas.StrSchema
            gstinTradeName = schemas.StrSchema
            address = schemas.StrSchema
            authSignMobile = schemas.Int64Schema
            memeberId = schemas.Int64Schema
            __annotations__ = {
                "companyName": companyName,
                "authSignEmail": authSignEmail,
                "panNumber": panNumber,
                "gstinNumber": gstinNumber,
                "companyType": companyType,
                "gstinctb": gstinctb,
                "gstinLegalName": gstinLegalName,
                "gstinTradeName": gstinTradeName,
                "address": address,
                "authSignMobile": authSignMobile,
                "memeberId": memeberId,
            }
    
    gstinTradeName: MetaOapg.properties.gstinTradeName
    address: MetaOapg.properties.address
    companyType: MetaOapg.properties.companyType
    gstinctb: MetaOapg.properties.gstinctb
    companyName: MetaOapg.properties.companyName
    authSignEmail: MetaOapg.properties.authSignEmail
    panNumber: MetaOapg.properties.panNumber
    gstinNumber: MetaOapg.properties.gstinNumber
    gstinLegalName: MetaOapg.properties.gstinLegalName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authSignEmail"]) -> MetaOapg.properties.authSignEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["panNumber"]) -> MetaOapg.properties.panNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gstinNumber"]) -> MetaOapg.properties.gstinNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyType"]) -> MetaOapg.properties.companyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gstinctb"]) -> MetaOapg.properties.gstinctb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gstinLegalName"]) -> MetaOapg.properties.gstinLegalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gstinTradeName"]) -> MetaOapg.properties.gstinTradeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authSignMobile"]) -> MetaOapg.properties.authSignMobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memeberId"]) -> MetaOapg.properties.memeberId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyName", "authSignEmail", "panNumber", "gstinNumber", "companyType", "gstinctb", "gstinLegalName", "gstinTradeName", "address", "authSignMobile", "memeberId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authSignEmail"]) -> MetaOapg.properties.authSignEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["panNumber"]) -> MetaOapg.properties.panNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gstinNumber"]) -> MetaOapg.properties.gstinNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyType"]) -> MetaOapg.properties.companyType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gstinctb"]) -> MetaOapg.properties.gstinctb: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gstinLegalName"]) -> MetaOapg.properties.gstinLegalName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gstinTradeName"]) -> MetaOapg.properties.gstinTradeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authSignMobile"]) -> typing.Union[MetaOapg.properties.authSignMobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memeberId"]) -> typing.Union[MetaOapg.properties.memeberId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyName", "authSignEmail", "panNumber", "gstinNumber", "companyType", "gstinctb", "gstinLegalName", "gstinTradeName", "address", "authSignMobile", "memeberId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        gstinTradeName: typing.Union[MetaOapg.properties.gstinTradeName, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        companyType: typing.Union[MetaOapg.properties.companyType, str, ],
        gstinctb: typing.Union[MetaOapg.properties.gstinctb, str, ],
        companyName: typing.Union[MetaOapg.properties.companyName, str, ],
        authSignEmail: typing.Union[MetaOapg.properties.authSignEmail, str, ],
        panNumber: typing.Union[MetaOapg.properties.panNumber, str, ],
        gstinNumber: typing.Union[MetaOapg.properties.gstinNumber, str, ],
        gstinLegalName: typing.Union[MetaOapg.properties.gstinLegalName, str, ],
        authSignMobile: typing.Union[MetaOapg.properties.authSignMobile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memeberId: typing.Union[MetaOapg.properties.memeberId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewCompanyRegistrationRequest':
        return super().__new__(
            cls,
            *_args,
            gstinTradeName=gstinTradeName,
            address=address,
            companyType=companyType,
            gstinctb=gstinctb,
            companyName=companyName,
            authSignEmail=authSignEmail,
            panNumber=panNumber,
            gstinNumber=gstinNumber,
            gstinLegalName=gstinLegalName,
            authSignMobile=authSignMobile,
            memeberId=memeberId,
            _configuration=_configuration,
            **kwargs,
        )
