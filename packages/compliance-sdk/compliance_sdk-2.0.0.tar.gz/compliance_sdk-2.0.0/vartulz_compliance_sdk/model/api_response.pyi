# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class APIResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            statusCode = schemas.Int32Schema
            message = schemas.StrSchema
            data = schemas.DictSchema
            uniqueRequestId = schemas.StrSchema
            barcode = schemas.StrSchema
            __annotations__ = {
                "statusCode": statusCode,
                "message": message,
                "data": data,
                "uniqueRequestId": uniqueRequestId,
                "barcode": barcode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueRequestId"]) -> MetaOapg.properties.uniqueRequestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barcode"]) -> MetaOapg.properties.barcode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["statusCode", "message", "data", "uniqueRequestId", "barcode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> typing.Union[MetaOapg.properties.statusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueRequestId"]) -> typing.Union[MetaOapg.properties.uniqueRequestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barcode"]) -> typing.Union[MetaOapg.properties.barcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statusCode", "message", "data", "uniqueRequestId", "barcode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        statusCode: typing.Union[MetaOapg.properties.statusCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        uniqueRequestId: typing.Union[MetaOapg.properties.uniqueRequestId, str, schemas.Unset] = schemas.unset,
        barcode: typing.Union[MetaOapg.properties.barcode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIResponse':
        return super().__new__(
            cls,
            *_args,
            statusCode=statusCode,
            message=message,
            data=data,
            uniqueRequestId=uniqueRequestId,
            barcode=barcode,
            _configuration=_configuration,
            **kwargs,
        )
