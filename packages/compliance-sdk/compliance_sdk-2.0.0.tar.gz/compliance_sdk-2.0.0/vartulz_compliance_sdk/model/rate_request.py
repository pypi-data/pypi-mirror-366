# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class RateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            cost = schemas.Float64Schema
            
            
            class service(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PAN_NUMBER": "PAN_NUMBER",
                        "GSTIN_INFO": "GSTIN_INFO",
                        "GSTIN_STATUS": "GSTIN_STATUS",
                        "GSTIN_TRACK": "GSTIN_TRACK",
                        "GSTIN_PREF": "GSTIN_PREF",
                        "BANK": "BANK",
                        "MCA_MASTER_DATA": "MCA_MASTER_DATA",
                        "MCA_SIGNATORY": "MCA_SIGNATORY",
                        "MCA_IEC": "MCA_IEC",
                        "MCA_ADDRESS": "MCA_ADDRESS",
                        "REGISTRATION": "REGISTRATION",
                        "WALLET_LOAD": "WALLET_LOAD",
                        "ELECTRICITY_BILL": "ELECTRICITY_BILL",
                        "AADHAR_NUMBER": "AADHAR_NUMBER",
                    }
                
                @schemas.classproperty
                def PAN_NUMBER(cls):
                    return cls("PAN_NUMBER")
                
                @schemas.classproperty
                def GSTIN_INFO(cls):
                    return cls("GSTIN_INFO")
                
                @schemas.classproperty
                def GSTIN_STATUS(cls):
                    return cls("GSTIN_STATUS")
                
                @schemas.classproperty
                def GSTIN_TRACK(cls):
                    return cls("GSTIN_TRACK")
                
                @schemas.classproperty
                def GSTIN_PREF(cls):
                    return cls("GSTIN_PREF")
                
                @schemas.classproperty
                def BANK(cls):
                    return cls("BANK")
                
                @schemas.classproperty
                def MCA_MASTER_DATA(cls):
                    return cls("MCA_MASTER_DATA")
                
                @schemas.classproperty
                def MCA_SIGNATORY(cls):
                    return cls("MCA_SIGNATORY")
                
                @schemas.classproperty
                def MCA_IEC(cls):
                    return cls("MCA_IEC")
                
                @schemas.classproperty
                def MCA_ADDRESS(cls):
                    return cls("MCA_ADDRESS")
                
                @schemas.classproperty
                def REGISTRATION(cls):
                    return cls("REGISTRATION")
                
                @schemas.classproperty
                def WALLET_LOAD(cls):
                    return cls("WALLET_LOAD")
                
                @schemas.classproperty
                def ELECTRICITY_BILL(cls):
                    return cls("ELECTRICITY_BILL")
                
                @schemas.classproperty
                def AADHAR_NUMBER(cls):
                    return cls("AADHAR_NUMBER")
            __annotations__ = {
                "cost": cost,
                "service": service,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cost", "service", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> typing.Union[MetaOapg.properties.cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union[MetaOapg.properties.service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cost", "service", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        service: typing.Union[MetaOapg.properties.service, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RateRequest':
        return super().__new__(
            cls,
            *_args,
            cost=cost,
            service=service,
            _configuration=_configuration,
            **kwargs,
        )
