# coding: utf-8

"""
    e-KYC API

    e-KYC API , GST verification suite  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: gautam@balajimariline.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vartulz_compliance_sdk import schemas  # noqa: F401


class NewCaseRequestBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "companyType",
            "caseDescription",
            "caseName",
        }
        
        class properties:
            caseName = schemas.StrSchema
            caseDescription = schemas.StrSchema
            companyType = schemas.StrSchema
            caseId = schemas.StrSchema
            barcode = schemas.StrSchema
            
            
            class barCodeStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("TRUE")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("FALSE")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("BLOCKED")
            __annotations__ = {
                "caseName": caseName,
                "caseDescription": caseDescription,
                "companyType": companyType,
                "caseId": caseId,
                "barcode": barcode,
                "barCodeStatus": barCodeStatus,
            }
    
    companyType: MetaOapg.properties.companyType
    caseDescription: MetaOapg.properties.caseDescription
    caseName: MetaOapg.properties.caseName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDescription"]) -> MetaOapg.properties.caseDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyType"]) -> MetaOapg.properties.companyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barcode"]) -> MetaOapg.properties.barcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barCodeStatus"]) -> MetaOapg.properties.barCodeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseName", "caseDescription", "companyType", "caseId", "barcode", "barCodeStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDescription"]) -> MetaOapg.properties.caseDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyType"]) -> MetaOapg.properties.companyType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseId"]) -> typing.Union[MetaOapg.properties.caseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barcode"]) -> typing.Union[MetaOapg.properties.barcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barCodeStatus"]) -> typing.Union[MetaOapg.properties.barCodeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseName", "caseDescription", "companyType", "caseId", "barcode", "barCodeStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        companyType: typing.Union[MetaOapg.properties.companyType, str, ],
        caseDescription: typing.Union[MetaOapg.properties.caseDescription, str, ],
        caseName: typing.Union[MetaOapg.properties.caseName, str, ],
        caseId: typing.Union[MetaOapg.properties.caseId, str, schemas.Unset] = schemas.unset,
        barcode: typing.Union[MetaOapg.properties.barcode, str, schemas.Unset] = schemas.unset,
        barCodeStatus: typing.Union[MetaOapg.properties.barCodeStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewCaseRequestBody':
        return super().__new__(
            cls,
            *_args,
            companyType=companyType,
            caseDescription=caseDescription,
            caseName=caseName,
            caseId=caseId,
            barcode=barcode,
            barCodeStatus=barCodeStatus,
            _configuration=_configuration,
            **kwargs,
        )
