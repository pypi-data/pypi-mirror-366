[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "elusion-kit"
dynamic = ["version"]
description = "A Python framework for building high-quality, type-safe API SDKs with comprehensive error handling and retry logic"
readme = "README.md"
license = "MIT"
authors = [{ name = "Elusion Hub", email = "elusion.lab@gmail.com" }]
maintainers = [{ name = "Elusion Hub", email = "elusion.lab@gmail.com" }]
keywords = [
    "elusion",
    "elusion-kit",
    "framework",
    "sdk",
    "api-client",
    "http-client",
    "type-safe",
    "pydantic",
    "authentication",
    "retry-logic",
    "error-handling",
    "pagination",
    "async",
    "developer-tools",
    "python-framework",
    "api-sdk-framework"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Networking",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = ["httpx>=0.28.1", "pydantic>=2.5.0", "typing-extensions>=4.8.0"]

[project.optional-dependencies]
# Core development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-httpx>=0.21.0",
    "respx>=0.20.0",
    "mypy>=1.7.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",
    "coverage>=7.0.0",
    "ginx>=0.1.6",
]
# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
# Testing utilities for framework development
test = [
    "pytest-httpx>=0.21.0",
    "respx>=0.20.0",
    "freezegun>=1.2.0",
    "faker>=19.0.0",
    "responses>=0.23.0",
]
# Framework example dependencies
examples = ["python-dotenv>=1.0.0", "rich>=13.0.0", "typer>=0.9.0"]
# All optional dependencies for complete development setup
all = ["elusion[dev,docs,test,examples]"]

[project.urls]
Homepage = "https://github.com/elusionhub/elusion-kit"
Documentation = "https://elusion-kit.readthedocs.io"
Repository = "https://github.com/elusionhub/elusion-kit.git"
Issues = "https://github.com/elusionhub/elusion-kit/issues"
Changelog = "https://github.com/elusionhub/elusion-kit/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/elusionhub/elusion-kit/issues"
"Source Code" = "https://github.com/elusionhub/elusion-kit"
"Framework Documentation" = "https://elusion-kit.readthedocs.io/en/latest/"

[tool.hatch.version]
path = "src/elusion/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/elusion"]

[tool.hatch.build]
include = [
    "src/elusion/**/*.py",
    "src/elusion/**/py.typed",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "docs/**/*.md",
]
exclude = [
    "src/elusion/**/*_test.py",
    "src/elusion/**/test_*.py",
    "src/elusion/**/__pycache__",
    "tests/",
    "examples/",
    ".pytest_cache/",
    ".mypy_cache/",
]

# Pytest configuration for framework testing
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=elusion",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90"
]
markers = [
    "unit: Unit tests for framework components",
    "integration: Integration tests for framework functionality",
    "http: HTTP client and networking tests",
    "auth: Authentication mechanism tests",
    "retry: Retry logic and error handling tests",
    "pagination: Pagination utilities tests",
    "models: Pydantic model validation tests",
    "exceptions: Exception handling tests",
    "serialization: Request/response serialization tests",
    "configuration: Configuration management tests",
    "slow: Slow running tests",
    "network: Tests that require network access"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration for framework code
[tool.coverage.run]
source = ["src/elusion"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/examples/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/_templates/*",
    "*/scripts/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# MyPy configuration for strict type checking
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
check_untyped_defs = true
no_implicit_reexport = true
show_error_codes = true
show_column_numbers = true
pretty = true
error_summary = true

# Framework-specific mypy overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_defs = false

# External libraries without good typing
[[tool.mypy.overrides]]
module = ["httpx.*", "pytest.*", "respx.*", "freezegun.*", "faker.*"]
ignore_missing_imports = true

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 200
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["elusion"]
known_third_party = ["httpx", "pydantic", "pytest", "typing_extensions"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_sort_within_sections = true
show_diff = true

# Black code formatting configuration
[tool.black]
line-length = 200
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | build
  | dist
  | __pycache__
  | htmlcov
  | \.coverage
)/
'''

# Version bumping configuration
[tool.bumpversion]
current_version = "0.0.4"
commit = true
tag = true
tag_name = "{new_version}"
message = "Release version {new_version}"

[[tool.bumpversion.files]]
filename = "src/elusion/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

# [[tool.bumpversion.files]]
# filename = "README.md"
# search = "pip install elusion=={current_version}"
# replace = "pip install elusion=={new_version}"

# [[tool.bumpversion.files]]
# filename = "docs/installation.md"
# search = "elusion=={current_version}"
# replace = "elusion=={new_version}"
