[build-system]
requires = [
    "hatchling==1.27.0",
    "hatch-regex-commit==0.0.3",
]
build-backend = "hatchling.build"

[project]
name = "fftools"
description = "44net tools"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
dynamic = ["version"]
authors = [
    { name = "Ivan Schaller", email = "ivan@schaller.sh" },
]
classifiers = [
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "dnspython~=2.7.0",
    "httpx~=0.28.1",
    "loguru~=0.7.3",
    "Fabric~=3.2.2",
    "tenacity~=8.2.3",
    "yagmail~=0.15.293",
    "whenever~=0.8.0",
]

[project.urls]
Homepage = "https://github.com/olofvndrhr/fftools"
History  = "https://github.com/olofvndrhr/fftools/commits/master"
Tracker  = "https://github.com/olofvndrhr/fftools/issues"
Source   = "https://github.com/olofvndrhr/fftools"

[tool.hatch.version]
source   = "regex_commit"
path     = "src/fftools/__about__.py"
tag_sign = false

[tool.hatch.build.targets.sdist]
packages = ["src/fftools"]

[tool.hatch.build.targets.wheel]
packages = ["src/fftools"]

###
### envs
###

[tool.hatch.envs.test]
python = "3.12"
dependencies = [
    "pytest==8.4.1",
    "coverage==7.10.1",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = [
    "coverage erase",
    "coverage run -m pytest {args:tests}",
]
cov-report = [
    "- coverage combine",
    "coverage report",
    "coverage xml",
]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.lint]
python = "3.12"
detached = true
dependencies = [
    "mypy==1.17.1",
    "ruff==0.12.7",
    "pydantic~=2.11.5",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --non-interactive --install-types {args:src/fftools}"
style = [
    "ruff check --no-fix {args:.}",
    "ruff format --diff {args:.}",
]
fmt = [
    "ruff check --fix {args:.}",
    "ruff format {args:.}",
    "style",
]
all = ["style", "typing"]

[tool.hatch.envs.docs]
python = "3.12"
dependencies = [
    "Sphinx==8.2.3",
    "furo==2025.7.19",
    "myst-parser==4.0.1",
    "sphinx-copybutton==0.5.2",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -M html {root}/docs {root}/docs/_build {args:}"

###
### ruff
###

[tool.ruff]
target-version    = "py312"
line-length       = 100
indent-width      = 4
fix               = true
show-fixes        = true
respect-gitignore = true
src               = ["src", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN003",
    "ANN401",
    "BLE001",
    "COM812",
    "D100",
    "D102",
    "D103",
    "EM101",
    "FBT",
    "TRY003",
    "TRY301",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style               = "double"
indent-style              = "space"
skip-magic-trailing-comma = false
line-ending               = "lf"
docstring-code-format     = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"__about__.py" = ["D104", "F841"]
"tests/**/*" = [
    "PLR2004",
    "S101",
    "TID252",
]
"src/fftools/shell.py" = ["S603"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party   = ["fftools"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pylint]
max-branches = 24
max-returns = 12
max-statements = 100
max-args = 15
allow-magic-value-types = [
    "str",
    "bytes",
    "complex",
    "float",
    "int",
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

###
### mypy
###

[tool.mypy]
#plugins = ["pydantic.mypy"]
follow_imports         = "silent"
warn_redundant_casts   = true
warn_unused_ignores    = true
disallow_any_generics  = true
check_untyped_defs     = true
no_implicit_reexport   = true
ignore_missing_imports = true
warn_return_any        = true
pretty                 = true
show_column_numbers    = true
show_error_codes       = true
show_error_context     = true

#[tool.pydantic-mypy]
#init_forbid_extra = true
#init_typed = true
#warn_required_dynamic_aliases = true

###
### pytest
###

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--color=yes --exitfirst --verbose -ra"
filterwarnings = [
    'ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning',
]

###
### coverage
###

[tool.coverage.run]
source_pkgs = ["fftools", "tests"]
branch      = true
parallel    = true
omit        = ["src/fftools/__about__.py"]

[tool.coverage.paths]
fftools = [
    "src/fftools",
    "*/fftools/src/fftools",
]
tests = ["tests", "*/fftools/tests"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc.)?abstractmethod",
    "no cov",
    "if TYPE_CHECKING:",
]
# ignore_errors = true
