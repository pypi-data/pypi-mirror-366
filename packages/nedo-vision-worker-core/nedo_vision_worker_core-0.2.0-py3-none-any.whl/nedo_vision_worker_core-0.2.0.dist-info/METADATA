Metadata-Version: 2.4
Name: nedo-vision-worker-core
Version: 0.2.0
Summary: Nedo Vision Worker Core Library for AI Vision Processing
Author-email: Willy Achmat Fauzi <willy.achmat@gmail.com>
Maintainer-email: Willy Achmat Fauzi <willy.achmat@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://gitlab.com/sindika/research/nedo-vision/nedo-vision-worker-core-v2
Project-URL: Documentation, https://gitlab.com/sindika/research/nedo-vision/nedo-vision-worker-core-v2/-/blob/main/README.md
Project-URL: Repository, https://gitlab.com/sindika/research/nedo-vision/nedo-vision-worker-core-v2
Project-URL: Bug Reports, https://gitlab.com/sindika/research/nedo-vision/nedo-vision-worker-core-v2/-/issues
Keywords: computer-vision,machine-learning,ai,worker-core,deep-learning,object-detection,neural-networks,video-processing,pytorch,yolo
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Multimedia :: Video
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: System :: Hardware
Classifier: Environment :: GPU
Classifier: Environment :: No Input/Output (Daemon)
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: alembic>=1.8.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: opencv-python>=4.6.0
Requires-Dist: pillow>=8.0.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: scipy>=1.9.0
Requires-Dist: shapely>=1.8.0
Requires-Dist: SQLAlchemy>=1.4.0
Requires-Dist: torch>=1.9.0
Requires-Dist: torchvision>=0.10.0
Requires-Dist: ultralytics>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: pre-commit>=2.17.0; extra == "dev"

# Nedo Vision Worker Core

A powerful Python library for AI-powered computer vision processing in the Nedo Vision platform. This library provides real-time video processing, object detection, PPE compliance monitoring, and safety violation detection with an extensible callback system.

## Features

- **Real-time AI Detection**: Advanced PPE and safety compliance detection
- **Multi-stream Processing**: Handle multiple video sources simultaneously
- **Extensible Callbacks**: Event-driven architecture for detection handling
- **System Diagnostics**: Built-in health checking and troubleshooting
- **Database Integration**: Persistent storage for detections and configurations
- **Drawing Utilities**: Rich visualization tools for detections
- **GPU Acceleration**: CUDA support for optimal performance
- **RTMP Streaming**: Real-time video streaming capabilities

## Installation

### Basic Installation

Install the package from PyPI:

```bash
pip install nedo-vision-worker-core
```

### Installation with RF-DETR Support

RF-DETR is an optional dependency for advanced object detection. Install it separately:

```bash
# Install the main package
pip install nedo-vision-worker-core

# Install RF-DETR from GitHub (requires Git)
pip install rfdetr @ git+https://github.com/roboflow/rf-detr.git@1e63dbad402eea10f110e86013361d6b02ee0c09
```

**Note:** RF-DETR must be installed separately as PyPI doesn't support direct Git dependencies.

### GPU Support

For GPU support with CUDA 12.1:

```bash
pip install nedo-vision-worker-core --extra-index-url https://download.pytorch.org/whl/cu121
```

### Development Installation

For development with all tools:

```bash
pip install nedo-vision-worker-core[dev]
```

## Quick Start

### Using the CLI

After installation, you can use the worker core CLI:

```bash
# Show CLI help
nedo-core --help

# Run with default settings
nedo-core run

# Run with custom configuration
nedo-core run --log-level DEBUG --storage-path /data

# System health check
nedo-core doctor

# Run with custom server configuration
nedo-core run --storage-path /custom/storage --rtmp-server rtmp://server.com:1935/live
```

### Configuration Options

The service supports various configuration options:

- `--drawing-assets`: Path to drawing assets directory
- `--log-level`: Logging level (DEBUG|INFO|WARNING|ERROR)
- `--storage-path`: Storage path for databases and files
- `--rtmp-server`: RTMP server URL for video streaming

### Using Detection Callbacks

The worker core supports an extensible callback system for handling detection events in real-time:

```python
from nedo_vision_worker_core import CoreService

def handle_ppe_violation(detection_data):
    """Handle PPE violation detection."""
    print(f"PPE Violation detected!")
    print(f"Person ID: {detection_data['person_id']}")
    print(f"Violations: {detection_data['attributes']}")
    print(f"Confidence: {detection_data['confidence']}")
    print(f"Image: {detection_data['image_path']}")

    # Send alert, log to system, etc.
    send_safety_alert(detection_data)

def handle_area_violation(detection_data):
    """Handle restricted area violation."""
    print(f"Area Violation detected!")
    print(f"Person ID: {detection_data['person_id']}")
    print(f"Area: {detection_data['area_name']}")
    # Handle area violation...

# Create service and register callbacks
service = CoreService()
service.register_detection_callback('ppe_detection', handle_ppe_violation)
service.register_detection_callback('area_violation', handle_area_violation)

# Start processing
service.run()
```

### Advanced Callback Usage

For more sophisticated detection handling:

```python
from nedo_vision_worker_core import CoreService
import json
import requests

class SafetyMonitor:
    def __init__(self):
        self.violation_count = 0
        self.alert_webhook = "https://your-alert-system.com/webhook"

    def handle_ppe_violation(self, data):
        """Handle PPE safety violations."""
        self.violation_count += 1

        # Create alert payload
        alert = {
            "type": "ppe_violation",
            "person_id": data["person_id"],
            "violations": data["attributes"],
            "confidence": data["confidence"],
            "timestamp": data["timestamp"],
            "image_url": self.upload_image(data["image_path"])
        }

        # Send webhook alert
        try:
            response = requests.post(self.alert_webhook, json=alert)
            print(f"Alert sent: {response.status_code}")
        except Exception as e:
            print(f"Failed to send alert: {e}")

    def upload_image(self, image_path):
        """Upload detection image to cloud storage."""
        # Implement your image upload logic
        return f"https://your-storage.com/images/{image_path}"

# Setup monitoring
monitor = SafetyMonitor()
service = CoreService()

# Register callbacks
service.register_detection_callback('ppe_detection', monitor.handle_ppe_violation)

# Start monitoring
service.run()
```

### Programmatic Usage

You can also use the core service programmatically:

```python
from nedo_vision_worker_core import CoreService

# Create and run the service with default settings
service = CoreService()
success = service.run()

# Create with custom parameters
service = CoreService(
    drawing_assets_path="custom_assets",
    log_level="DEBUG",
    storage_path="/data/storage",
    rtmp_server="rtmp://localhost:1935/live"
)
success = service.run()
```

## Architecture

### Core Components

- **CoreService**: Main service orchestrator for vision processing workflows
- **Detection Pipeline**: AI model processing with PyTorch backend
- **Callback System**: Event-driven detection handling via callbacks
- **Resource Monitor**: System resource monitoring (GPU, CPU, memory)
- **Database Manager**: Persistent storage for detections and configurations

### Callback System

#### Event Types

- **`ppe_detection`**: Personal Protective Equipment violations
- **`area_violation`**: Restricted area violations
- **`general_detection`**: All detection events

#### Callback Function Signature

```python
def detection_callback(detection_data: dict):
    """
    Handle detection events.

    Args:
        detection_data: Dictionary containing:
            - person_id: Unique identifier for detected person
            - pipeline_id: Pipeline that generated the detection
            - attributes: List of violation attributes
            - confidence: Detection confidence score
            - image_path: Path to detection image
            - timestamp: Detection timestamp
            - event_type: Type of detection event
    """
    pass
```

#### Convenience Functions

```python
from nedo_vision_worker_core import (
    register_ppe_detection_callback,
    register_area_violation_callback,
    register_general_detection_callback
)

# Register specific callbacks
register_ppe_detection_callback(my_ppe_handler)
register_area_violation_callback(my_area_handler)
register_general_detection_callback(my_general_handler)
```

### Dependencies

The service relies on several key technologies:

- **PyTorch**: Deep learning framework with CUDA support
- **OpenCV**: Computer vision and video processing
- **SQLAlchemy**: Database ORM and management
- **FFmpeg**: Video streaming and processing
- **Ultralytics**: YOLO model implementations

## Development Setup

For development and testing:

```bash
# Clone and setup development environment
git clone <repository-url>
cd nedo-vision-worker-core-v2

# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # Linux/Mac
# or
.venv\Scripts\activate     # Windows

# Install in development mode
pip install -e .

# Run tests
python test.py

# Check system health
nedo-core doctor
```

## Troubleshooting

### Common Issues

1. **CUDA not detected**: Ensure NVIDIA drivers and CUDA toolkit are installed
2. **FFmpeg not found**: Install FFmpeg for video processing capabilities
3. **Permission errors**: Check storage directory permissions
4. **Model loading issues**: Verify model files and network connectivity

### Support

For issues and questions:

- Check the logs for detailed error information
- Run `nedo-core doctor` for system diagnostics
- Verify all dependencies are properly installed
