[project]
authors = [
  {name = "Nikitosio Noskovinni", email = "nik.noskov08@gmail.com"},
]
dependencies = [
  "click>=8.1.8",
  "msgspec>=0.19.0",
  "toml>=0.10.2",
]
description = "The humble linter package"
license = {text = "MIT"}
name = "lint-utils"
readme = "README.md"
requires-python = ">=3.11"
version = "0.2.0"

[project.urls]
"GitHub" = "https://github.com/barbarrista/lint-utils"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.sdist]
ignore-vcs = true
include = ["lint_utils/*", "tests/*", "docs/*"]

[tool.hatch.build.targets.wheel]
include = ["lint_utils/*"]

[project.scripts]
lint-utils = "lint_utils.__main__:cli"
lu = "lint_utils.__main__:cli"

[tool.uv.sources]
lint_utils = { path = "./lint_utils/"}

[tool.lint-utils]
exclude = []
lint.ignore = []

[tool.lint-utils.exclude-base-classes]
USL001 = []

[tool.lint-utils.exclude-classes]
USL001 = []

[dependency-groups]
dev = [
  "commitizen>=4.7.0",
]
lint = [
  "mypy>=1.15.0",
  "ruff>=0.11.9",
]

[tool.commitizen]
changelog_start_rev = "0.1.1"
name = "cz_conventional_commits"
tag_format = "$version"
update_changelog_on_bump = true
version = "0.2.0"
version_files = [
  "pyproject.toml:version",
]

[tool.ruff]
exclude = []
lint.fixable = [
  "F",
  "E",
  "W",
  "I",
  "COM",
  "UP",
  "RUF",
]
lint.ignore = [
  "PLR2044",
  "E501", # Line Length
  "A003", # Class attribute ... is shadowing a python builtin
  "D", # pydocstyle
  "PD", # pandas-vet
  "INP",
  "TC001",
  "TC002",
  "TC003",
  "EXE",
  "RUF001",
  "RUF002",
  "RUF003",
  "COM812",
  "ISC001",
]
lint.select = ["ALL"]
src = ["lint_utils", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",
  "S311",
  "PLR0913",
  "ARG005",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 7

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
]
staticmethod-decorators = ["staticmethod"]

[tool.mypy]
exclude = ""
plugins = []

follow_imports = "silent"
ignore_missing_imports = true

check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true

warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

strict = true
strict_equality = true
strict_optional = true
