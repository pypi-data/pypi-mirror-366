[project]
name = "instant-crud"
version = "0.1.1"
description = "Generate REST APIs instantly from SQLModel definitions"
authors = [{ name = "Massimo Ghiani", email = "m.ghiani@gmail.com" }]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "MIT" }
keywords = [
    "fastapi",
    "sqlmodel",
    "crud",
    "rest-api",
    "code-generation",
    "database",
    "orm",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Database",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
]

dependencies = [
    "fastapi>=0.115.8",
    "sqlmodel>=0.0.22",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.7.1",
    "jinja2>=3.1.6",
]

[project.optional-dependencies]
export = [
    "duckdb>=1.2.0",
    "pandas>=2.2.3",
    "pyarrow>=19.0.1",
    "xlsxwriter>=3.2.2",
    "weasyprint>=64.1",
    "jinja2>=3.1.6",
]
auth = ["python-jose>=3.4.0", "passlib>=1.7.4"]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.28.1",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "uvicorn>=0.30.0",
]
full = ["instant-crud[export,auth]"]
all = ["instant-crud[export,auth,dev]"]

[project.urls]
Homepage = "https://github.com/yourusername/instant-crud"
Repository = "https://github.com/yourusername/instant-crud"
Documentation = "https://instant-crud.readthedocs.io"
Issues = "https://github.com/yourusername/instant-crud/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
]

[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

line-length = 88
target-version = ['py312']
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --strict-config"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = ["tests/*", "examples/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
line-ending = "auto"
