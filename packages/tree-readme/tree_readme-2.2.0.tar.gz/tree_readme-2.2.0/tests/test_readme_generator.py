import subprocess
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).resolve().parent.parent))

from readme_generator.generate_readme import generate


def test_generate_readme_cli() -> None:
    """
    Tests the CLI command for generating a README file.
    """
    readme_path = Path(__file__).resolve().parent / "README.md"
    if readme_path.exists():
        readme_path.unlink()
    subprocess.run(
        [
            "python",
            "-m",
            "readme_generator.generate_readme",
            "--repo-path",
            str(Path(__file__).resolve().parent),
            "--overview",
            "This is a sample README generated by the script.",
            "--exclude-dirs",
            ".git",
            "--exclude-dirs",
            "__pycache__",
            "--exclude-dirs",
            ".idea",
            "--exclude-dirs",
            ".vscode",
            "--exclude-dirs",
            ".ipynb_checkpoints",
            "--exclude-dirs",
            ".egg-info",
            "--exclude-dirs",
            "dist",
            "--exclude-dirs",
            "_env",
            "--exclude-dirs",
            ".pytest_cache",
            "--exclude-files",
            ".pyc",
            "--exclude-files",
            ".pyo",
            "--exclude-files",
            ".pyd",
            "--exclude-files",
            ".DS_Store",
        ],
        check=True,
    )
    assert (
        readme_path.exists()
    ), "README.md should be created after running the function."

    readme_generated_path = Path(__file__).resolve().parent / "README_generated.md"
    if readme_generated_path.exists():
        readme_generated_path.unlink()
    subprocess.run(
        [
            "python",
            "-m",
            "readme_generator.generate_readme",
            "--repo-path",
            str(Path(__file__).resolve().parent),
            "--overview",
            "This is a sample README generated by the script.",
            "--exclude-dirs",
            ".git",
            "--exclude-dirs",
            "__pycache__",
            "--exclude-dirs",
            ".idea",
            "--exclude-dirs",
            ".vscode",
            "--exclude-dirs",
            ".ipynb_checkpoints",
            "--exclude-dirs",
            ".egg-info",
            "--exclude-dirs",
            "dist",
            "--exclude-dirs",
            "_env",
            "--exclude-dirs",
            ".pytest_cache",
            "--exclude-files",
            ".pyc",
            "--exclude-files",
            ".pyo",
            "--exclude-files",
            ".pyd",
            "--exclude-files",
            ".DS_Store",
        ],
        check=True,
    )
    assert (
        readme_generated_path.exists()
    ), "README_generated.md should be created after running the command again."
    readme_path.unlink()
    readme_generated_path.unlink()


def test_generate_readme_function() -> None:
    """
    Tests the generate function for creating a README file.
    """
    readme_path = Path(__file__).resolve().parent / "README.md"
    if readme_path.exists():
        readme_path.unlink()

    generate(
        repo_path=str(Path(__file__).resolve().parent),
        overview="This is a sample README generated by the function.",
        exclude_dirs=[
            ".git",
            "__pycache__",
            ".idea",
            ".vscode",
            ".ipynb_checkpoints",
            ".egg-info",
            "dist",
            "_env",
            ".pytest_cache",
        ],
        exclude_files=[".pyc", ".pyo", ".pyd", ".DS_Store"],
    )

    assert (
        readme_path.exists()
    ), "README.md should be created after running the function."

    readme_generated_path = Path(__file__).resolve().parent / "README_generated.md"
    if readme_generated_path.exists():
        readme_generated_path.unlink()
    generate(
        repo_path=str(Path(__file__).resolve().parent),
        overview="This is a sample README generated by the function.",
        exclude_dirs=[
            ".git",
            "__pycache__",
            ".idea",
            ".vscode",
            ".ipynb_checkpoints",
            ".egg-info",
            "dist",
            "_env",
            ".pytest_cache",
        ],
        exclude_files=[".pyc", ".pyo", ".pyd", ".DS_Store"],
    )
    assert (
        readme_generated_path.exists()
    ), "README_generated.md should be created after running the function again."
    readme_path.unlink()
    readme_generated_path.unlink()
