[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "artl-mcp"
dynamic = ["version"]
description = "PydanticAI and MCP approaches for getting textual representations of scientific literature from PMIDs, DOIs, etc."
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Mark Andrew Miller", email = "MAM@lbl.gov"},
    {name = "Justin Reese", email = "justaddcoffee@gmail.com"},

]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["mcp", "scientific-literature", "pubmed", "doi", "pmid"]

# Main dependencies
dependencies = [
    "fastmcp>=2.8.1",
    "pdfminer-six>=20250506",
    "requests>=2.25.0",
    "beautifulsoup4>=4.9.0",
    "pydantic>=2.0.0",
    "lxml>=4.6.0",
    "pyyaml>=6.0.1",
    "markitdown>=0.1.0",
    "pdfplumber>=0.10.0",
]

[project.urls]
Homepage = "https://github.com/contextualizer-ai/artl-mcp"
Repository = "https://github.com/contextualizer-ai/artl-mcp"
Issues = "https://github.com/contextualizer-ai/artl-mcp/issues"
Documentation = "https://github.com/contextualizer-ai/artl-mcp#readme"

[project.scripts]
artl-mcp = "artl_mcp.__main__:main"
artl-cli = "artl_mcp.cli:cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/artl_mcp/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/artl_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "src",
    "tests",
    "README.md",
    "pyproject.toml",
]

# Development dependencies - all dev tools in one group
[dependency-groups]
dev = [
    # Code quality and formatting
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    # Testing
    "pytest>=8.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    # Build and packaging tools
    "hatch-vcs>=0.5.0",
    "hatchling>=1.27.0",
    "hatch>=1.14.1",
    "types-requests>=2.32.4.20250611",
    "types-beautifulsoup4>=4.12.0.20250516",
    "types-pyyaml>=6.0.12",
    "pip>=25.1.1",
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py311"
exclude = ["src/artl_mcp/_version.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

# Per-file ignores for specific cases
[tool.ruff.lint.per-file-ignores]
"tests/test_pdf_fetcher.py" = [
    "W291",  # Allow trailing whitespace in PDF fixture content
]
"tests/test_windowing.py" = [
    "W293",  # Allow whitespace in blank lines in multiline strings
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# Black configuration (if you prefer black over ruff format)
[tool.black]
line-length = 88
target-version = ['py311']

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
show_error_codes = true
# Ignore missing stubs for third-party libraries
ignore_missing_imports = true
# Be less strict about Any returns from third-party libraries
warn_return_any = false
# Allow some untyped functions for now
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --timeout=180 --durations=20"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "external_api: marks tests that require external API access (deselect with '-m \"not external_api\"')",
]

# Deptry configuration
[tool.deptry]
# Map import names to package names
package_module_name_map = {bs4 = "beautifulsoup4", pdfminer = "pdfminer-six", yaml = "pyyaml"}

# Ignore specific error types for known false positives
[tool.deptry.per_rule_ignores]
DEP002 = ["lxml", "beautifulsoup4", "pdfminer-six", "pyyaml"]  # lxml used by bs4; bs4/pdfminer are mapped imports; pyyaml used conditionally
DEP003 = ["click"]          # Transitive dependency - used by fastmcp  
DEP001 = ["artl_mcp", "bs4", "pdfminer", "yaml"]  # Missing deps: self-imports and mapped packages ok
