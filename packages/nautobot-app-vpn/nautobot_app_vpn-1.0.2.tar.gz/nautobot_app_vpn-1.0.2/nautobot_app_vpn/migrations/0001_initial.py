# Generated by Django 4.2.23 on 2025-07-11 06:08

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import nautobot_app_vpn.utils
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0123_alter_joblogentry_created"),
        ("dcim", "0069_softwareimagefile_external_integration"),
    ]

    operations = [
        migrations.CreateModel(
            name="IKECrypto",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("dh_group", models.CharField(max_length=50)),
                ("encryption", models.CharField(max_length=50)),
                ("authentication", models.CharField(max_length=50)),
                ("lifetime", models.PositiveIntegerField()),
                ("lifetime_unit", models.CharField(default="seconds", max_length=50)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_app_vpn.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "IKE Crypto Profile",
                "verbose_name_plural": "IKE Crypto Profiles",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IKEGateway",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("ike_version", models.CharField(default="ikev2-preferred", max_length=20)),
                ("exchange_mode", models.CharField(default="auto", max_length=15)),
                ("local_ip_type", models.CharField(default="ip", max_length=255)),
                ("local_ip", models.CharField(blank=True, max_length=255)),
                ("local_id_type", models.CharField(blank=True, max_length=20)),
                ("local_id_value", models.CharField(blank=True, max_length=255)),
                ("peer_ip_type", models.CharField(default="ip", max_length=20)),
                ("peer_ip", models.CharField(blank=True, max_length=255)),
                ("peer_device_manual", models.CharField(blank=True, max_length=255)),
                ("peer_location_manual", models.CharField(blank=True, max_length=255)),
                ("peer_id_type", models.CharField(blank=True, max_length=20)),
                ("peer_id_value", models.CharField(blank=True, max_length=255)),
                ("authentication_type", models.CharField(max_length=20)),
                ("pre_shared_key", models.TextField(blank=True)),
                ("enable_passive_mode", models.BooleanField(default=False)),
                ("enable_nat_traversal", models.BooleanField(default=True)),
                ("enable_dpd", models.BooleanField(default=True)),
                (
                    "dpd_interval",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(600),
                        ],
                    ),
                ),
                (
                    "dpd_retry",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "liveness_check_interval",
                    models.PositiveIntegerField(
                        blank=True, default=5, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("last_sync", models.DateTimeField(blank=True)),
                (
                    "bind_interface",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ikegateway_binds",
                        to="dcim.interface",
                    ),
                ),
                (
                    "ike_crypto_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ike_gateways",
                        to="nautobot_app_vpn.ikecrypto",
                    ),
                ),
                ("local_devices", models.ManyToManyField(related_name="local_ike_gateways", to="dcim.device")),
                (
                    "local_locations",
                    models.ManyToManyField(blank=True, related_name="local_ike_gateway_locations", to="dcim.location"),
                ),
                (
                    "local_platform",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="local_ike_gateways",
                        to="dcim.platform",
                    ),
                ),
                (
                    "peer_devices",
                    models.ManyToManyField(blank=True, related_name="peer_ike_gateways", to="dcim.device"),
                ),
                (
                    "peer_locations",
                    models.ManyToManyField(blank=True, related_name="peer_ike_gateway_locations", to="dcim.location"),
                ),
                (
                    "peer_platform",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="peer_ike_gateways",
                        to="dcim.platform",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_app_vpn.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "IKE Gateway",
                "verbose_name_plural": "IKE Gateways",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IPSecCrypto",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("encryption", models.CharField(max_length=50)),
                ("authentication", models.CharField(max_length=50)),
                ("dh_group", models.CharField(max_length=50)),
                ("protocol", models.CharField(default="esp", max_length=5)),
                ("lifetime", models.PositiveIntegerField()),
                ("lifetime_unit", models.CharField(default="seconds", max_length=50)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_app_vpn.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "IPSec Crypto Profile",
                "verbose_name_plural": "IPSec Crypto Profiles",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VPNDashboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("total_tunnels", models.PositiveIntegerField(default=0)),
                ("active_tunnels", models.PositiveIntegerField(default=0)),
                ("inactive_tunnels", models.PositiveIntegerField(default=0)),
                ("last_sync_status", models.CharField(default="pending", max_length=50)),
                ("last_sync_time", models.DateTimeField(blank=True, null=True)),
                ("last_push_status", models.CharField(default="pending", max_length=50)),
                ("last_push_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "VPN Dashboard",
                "verbose_name_plural": "VPN Dashboards",
            },
        ),
        migrations.CreateModel(
            name="TunnelMonitorProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("action", models.CharField(default="wait-recover", max_length=20)),
                (
                    "interval",
                    models.PositiveIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                (
                    "threshold",
                    models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Tunnel Monitor Profile",
                "verbose_name_plural": "Tunnel Monitor Profiles",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IPSECTunnel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("enable_tunnel_monitor", models.BooleanField(default=False)),
                ("monitor_destination_ip", models.CharField(blank=True, max_length=255)),
                ("role", models.CharField(blank=True, max_length=50)),
                ("last_sync", models.DateTimeField(blank=True)),
                ("devices", models.ManyToManyField(related_name="ipsec_tunnels", to="dcim.device")),
                (
                    "ike_gateway",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ipsec_tunnels",
                        to="nautobot_app_vpn.ikegateway",
                    ),
                ),
                (
                    "ipsec_crypto_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ipsec_tunnels",
                        to="nautobot_app_vpn.ipseccrypto",
                    ),
                ),
                (
                    "monitor_profile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ipsec_tunnels",
                        to="nautobot_app_vpn.tunnelmonitorprofile",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_app_vpn.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tunnel_interface",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ipsec_tunnel_interfaces",
                        to="dcim.interface",
                    ),
                ),
            ],
            options={
                "verbose_name": "IPSec Tunnel",
                "verbose_name_plural": "IPSec Tunnels",
                "ordering": ["name", "role"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="IPSecProxyID",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("local_subnet", models.CharField(blank=True, max_length=50)),
                ("remote_subnet", models.CharField(blank=True, max_length=50)),
                ("protocol", models.CharField(blank=True, default="any", max_length=10)),
                ("local_port", models.PositiveIntegerField(blank=True, null=True)),
                ("remote_port", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "tunnel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proxy_ids",
                        to="nautobot_app_vpn.ipsectunnel",
                    ),
                ),
            ],
            options={
                "verbose_name": "IPSec Proxy ID",
                "verbose_name_plural": "IPSec Proxy IDs",
                "ordering": ["tunnel", "local_subnet", "remote_subnet"],
            },
        ),
    ]
