# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, allow_deletion=None, cloud_provider=None, cluster_api_url=None, cluster_type=None, connection_type=None, id=None, name=None, namespace_id=None, network_id=None, redpanda_version=None, region=None, tags=None, throughput_tier=None, zones=None):
        if allow_deletion and not isinstance(allow_deletion, bool):
            raise TypeError("Expected argument 'allow_deletion' to be a bool")
        pulumi.set(__self__, "allow_deletion", allow_deletion)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_api_url and not isinstance(cluster_api_url, str):
            raise TypeError("Expected argument 'cluster_api_url' to be a str")
        pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if redpanda_version and not isinstance(redpanda_version, str):
            raise TypeError("Expected argument 'redpanda_version' to be a str")
        pulumi.set(__self__, "redpanda_version", redpanda_version)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if throughput_tier and not isinstance(throughput_tier, str):
            raise TypeError("Expected argument 'throughput_tier' to be a str")
        pulumi.set(__self__, "throughput_tier", throughput_tier)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> bool:
        """
        allows deletion of the cluster. defaults to true. Not recommended for production use
        """
        return pulumi.get(self, "allow_deletion")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Must be one of aws or gcp
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> str:
        """
        The URL of the cluster API
        """
        return pulumi.get(self, "cluster_api_url")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of the cluster
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        Connection type of the cluster
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        The id of the namespace in which to create the cluster
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The id of the network in which to create the cluster
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="redpandaVersion")
    def redpanda_version(self) -> str:
        """
        Version of Redpanda to deploy
        """
        return pulumi.get(self, "redpanda_version")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Cloud provider specific region of the cluster
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Tags to apply to the cluster
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="throughputTier")
    def throughput_tier(self) -> str:
        """
        Throughput tier of the cluster
        """
        return pulumi.get(self, "throughput_tier")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        """
        Cloud provider specific zones of the cluster
        """
        return pulumi.get(self, "zones")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            allow_deletion=self.allow_deletion,
            cloud_provider=self.cloud_provider,
            cluster_api_url=self.cluster_api_url,
            cluster_type=self.cluster_type,
            connection_type=self.connection_type,
            id=self.id,
            name=self.name,
            namespace_id=self.namespace_id,
            network_id=self.network_id,
            redpanda_version=self.redpanda_version,
            region=self.region,
            tags=self.tags,
            throughput_tier=self.throughput_tier,
            zones=self.zones)


def get_cluster(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Data source for a Redpanda Cloud cluster

    ## Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_cluster(id="cluster_id")
    ```
    <!--End PulumiCodeChooser -->

    ### Example Usage of a data source BYOC to manage users and ACLs

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_redpanda as redpanda
    import pulumiverse_redpanda as redpanda

    config = pulumi.Config()
    cluster_id = config.get("clusterId")
    if cluster_id is None:
        cluster_id = ""
    test_cluster = redpanda.get_cluster(id=cluster_id)
    user_pw = config.get("userPw")
    if user_pw is None:
        user_pw = "password"
    mechanism = config.get("mechanism")
    if mechanism is None:
        mechanism = "scram-sha-256"
    test_user = redpanda.User("testUser",
        password=user_pw,
        mechanism=mechanism,
        cluster_api_url=test_cluster.cluster_api_url)
    test_acl = redpanda.Acl("testAcl",
        resource_type="CLUSTER",
        resource_name_="kafka-cluster",
        resource_pattern_type="LITERAL",
        principal=test_user.name.apply(lambda name: f"User:{name}"),
        host="*",
        operation="ALTER",
        permission_type="ALLOW",
        cluster_api_url=test_cluster.cluster_api_url)
    user_name = config.get("userName")
    if user_name is None:
        user_name = "test-username"
    topic_name = config.get("topicName")
    if topic_name is None:
        topic_name = "test-topic"
    partition_count = config.get_float("partitionCount")
    if partition_count is None:
        partition_count = 3
    replication_factor = config.get_float("replicationFactor")
    if replication_factor is None:
        replication_factor = 3
    ```
    <!--End PulumiCodeChooser -->

    ## Limitations

    Can only be used with Redpanda Cloud Dedicated and BYOC clusters.


    :param str id: The id of the cluster
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('redpanda:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        allow_deletion=pulumi.get(__ret__, 'allow_deletion'),
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        cluster_api_url=pulumi.get(__ret__, 'cluster_api_url'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'),
        network_id=pulumi.get(__ret__, 'network_id'),
        redpanda_version=pulumi.get(__ret__, 'redpanda_version'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        throughput_tier=pulumi.get(__ret__, 'throughput_tier'),
        zones=pulumi.get(__ret__, 'zones'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Data source for a Redpanda Cloud cluster

    ## Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_cluster(id="cluster_id")
    ```
    <!--End PulumiCodeChooser -->

    ### Example Usage of a data source BYOC to manage users and ACLs

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_redpanda as redpanda
    import pulumiverse_redpanda as redpanda

    config = pulumi.Config()
    cluster_id = config.get("clusterId")
    if cluster_id is None:
        cluster_id = ""
    test_cluster = redpanda.get_cluster(id=cluster_id)
    user_pw = config.get("userPw")
    if user_pw is None:
        user_pw = "password"
    mechanism = config.get("mechanism")
    if mechanism is None:
        mechanism = "scram-sha-256"
    test_user = redpanda.User("testUser",
        password=user_pw,
        mechanism=mechanism,
        cluster_api_url=test_cluster.cluster_api_url)
    test_acl = redpanda.Acl("testAcl",
        resource_type="CLUSTER",
        resource_name_="kafka-cluster",
        resource_pattern_type="LITERAL",
        principal=test_user.name.apply(lambda name: f"User:{name}"),
        host="*",
        operation="ALTER",
        permission_type="ALLOW",
        cluster_api_url=test_cluster.cluster_api_url)
    user_name = config.get("userName")
    if user_name is None:
        user_name = "test-username"
    topic_name = config.get("topicName")
    if topic_name is None:
        topic_name = "test-topic"
    partition_count = config.get_float("partitionCount")
    if partition_count is None:
        partition_count = 3
    replication_factor = config.get_float("replicationFactor")
    if replication_factor is None:
        replication_factor = 3
    ```
    <!--End PulumiCodeChooser -->

    ## Limitations

    Can only be used with Redpanda Cloud Dedicated and BYOC clusters.


    :param str id: The id of the cluster
    """
    ...
