# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 cluster_api_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 mechanism: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] password: Password of the user
        :param pulumi.Input[str] mechanism: Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        :param pulumi.Input[str] name: Name of the user, must be unique
        """
        pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        pulumi.set(__self__, "password", password)
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Input[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password of the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        """
        return pulumi.get(self, "mechanism")

    @mechanism.setter
    def mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mechanism", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user, must be unique
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 mechanism: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] mechanism: Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        :param pulumi.Input[str] name: Name of the user, must be unique
        :param pulumi.Input[str] password: Password of the user
        """
        if cluster_api_url is not None:
            pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        """
        return pulumi.get(self, "mechanism")

    @mechanism.setter
    def mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mechanism", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user, must be unique
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 mechanism: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        ```sh
        $ pulumi import redpanda:index/user:User example userName,clusterId
        ```

        Where clusterId is the ID of the cluster in Redpanda Cloud

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] mechanism: Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        :param pulumi.Input[str] name: Name of the user, must be unique
        :param pulumi.Input[str] password: Password of the user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ```sh
        $ pulumi import redpanda:index/user:User example userName,clusterId
        ```

        Where clusterId is the ID of the cluster in Redpanda Cloud

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 mechanism: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if cluster_api_url is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_api_url'")
            __props__.__dict__["cluster_api_url"] = cluster_api_url
            __props__.__dict__["mechanism"] = mechanism
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'redpanda:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_api_url: Optional[pulumi.Input[str]] = None,
            mechanism: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] mechanism: Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        :param pulumi.Input[str] name: Name of the user, must be unique
        :param pulumi.Input[str] password: Password of the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["cluster_api_url"] = cluster_api_url
        __props__.__dict__["mechanism"] = mechanism
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Output[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @property
    @pulumi.getter
    def mechanism(self) -> pulumi.Output[Optional[str]]:
        """
        Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
        """
        return pulumi.get(self, "mechanism")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the user, must be unique
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password of the user
        """
        return pulumi.get(self, "password")

