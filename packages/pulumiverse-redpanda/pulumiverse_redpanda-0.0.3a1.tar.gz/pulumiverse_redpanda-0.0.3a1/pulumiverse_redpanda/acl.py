# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AclArgs', 'Acl']

@pulumi.input_type
class AclArgs:
    def __init__(__self__, *,
                 cluster_api_url: pulumi.Input[str],
                 host: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 permission_type: pulumi.Input[str],
                 principal: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 resource_pattern_type: pulumi.Input[str],
                 resource_type: pulumi.Input[str]):
        """
        The set of arguments for constructing a Acl resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] host: The host address to use for this ACL
        :param pulumi.Input[str] operation: The operation type that shall be allowed or denied (e.g READ)
        :param pulumi.Input[str] permission_type: The permission type. It determines whether the operation should be ALLOWED or DENIED
        :param pulumi.Input[str] principal: The principal to apply this ACL for
        :param pulumi.Input[str] resource_name: The name of the resource this ACL entry will be on
        :param pulumi.Input[str] resource_pattern_type: The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        :param pulumi.Input[str] resource_type: The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "permission_type", permission_type)
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_pattern_type", resource_pattern_type)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Input[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host address to use for this ACL
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        The operation type that shall be allowed or denied (e.g READ)
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> pulumi.Input[str]:
        """
        The permission type. It determines whether the operation should be ALLOWED or DENIED
        """
        return pulumi.get(self, "permission_type")

    @permission_type.setter
    def permission_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_type", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        The principal to apply this ACL for
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        The name of the resource this ACL entry will be on
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourcePatternType")
    def resource_pattern_type(self) -> pulumi.Input[str]:
        """
        The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        """
        return pulumi.get(self, "resource_pattern_type")

    @resource_pattern_type.setter
    def resource_pattern_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_pattern_type", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _AclState:
    def __init__(__self__, *,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_pattern_type: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Acl resources.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] host: The host address to use for this ACL
        :param pulumi.Input[str] operation: The operation type that shall be allowed or denied (e.g READ)
        :param pulumi.Input[str] permission_type: The permission type. It determines whether the operation should be ALLOWED or DENIED
        :param pulumi.Input[str] principal: The principal to apply this ACL for
        :param pulumi.Input[str] resource_name: The name of the resource this ACL entry will be on
        :param pulumi.Input[str] resource_pattern_type: The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        :param pulumi.Input[str] resource_type: The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        if cluster_api_url is not None:
            pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if permission_type is not None:
            pulumi.set(__self__, "permission_type", permission_type)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_pattern_type is not None:
            pulumi.set(__self__, "resource_pattern_type", resource_pattern_type)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host address to use for this ACL
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        The operation type that shall be allowed or denied (e.g READ)
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> Optional[pulumi.Input[str]]:
        """
        The permission type. It determines whether the operation should be ALLOWED or DENIED
        """
        return pulumi.get(self, "permission_type")

    @permission_type.setter
    def permission_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_type", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        The principal to apply this ACL for
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource this ACL entry will be on
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourcePatternType")
    def resource_pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        """
        return pulumi.get(self, "resource_pattern_type")

    @resource_pattern_type.setter
    def resource_pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_pattern_type", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


class Acl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 resource_pattern_type: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates an Access Control List (ACL) in a Redpanda cluster.

        ## Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        test_topic = redpanda.Topic("testTopic",
            partition_count=partition_count,
            replication_factor=replication_factor,
            cluster_api_url=test_cluster.cluster_api_url,
            allow_deletion=True)
        test_acl = redpanda.Acl("testAcl",
            resource_type="TOPIC",
            resource_name_=test_topic.name,
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="READ",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support ACL creation in self hosted clusters. This is an area of active development so expect that to change soon.

        ## Import

        We do not support the import of ACLs into the Redpanda provider at this time.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] host: The host address to use for this ACL
        :param pulumi.Input[str] operation: The operation type that shall be allowed or denied (e.g READ)
        :param pulumi.Input[str] permission_type: The permission type. It determines whether the operation should be ALLOWED or DENIED
        :param pulumi.Input[str] principal: The principal to apply this ACL for
        :param pulumi.Input[str] resource_name_: The name of the resource this ACL entry will be on
        :param pulumi.Input[str] resource_pattern_type: The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        :param pulumi.Input[str] resource_type: The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an Access Control List (ACL) in a Redpanda cluster.

        ## Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        test_topic = redpanda.Topic("testTopic",
            partition_count=partition_count,
            replication_factor=replication_factor,
            cluster_api_url=test_cluster.cluster_api_url,
            allow_deletion=True)
        test_acl = redpanda.Acl("testAcl",
            resource_type="TOPIC",
            resource_name_=test_topic.name,
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="READ",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support ACL creation in self hosted clusters. This is an area of active development so expect that to change soon.

        ## Import

        We do not support the import of ACLs into the Redpanda provider at this time.

        :param str resource_name: The name of the resource.
        :param AclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 resource_pattern_type: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclArgs.__new__(AclArgs)

            if cluster_api_url is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_api_url'")
            __props__.__dict__["cluster_api_url"] = cluster_api_url
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if operation is None and not opts.urn:
                raise TypeError("Missing required property 'operation'")
            __props__.__dict__["operation"] = operation
            if permission_type is None and not opts.urn:
                raise TypeError("Missing required property 'permission_type'")
            __props__.__dict__["permission_type"] = permission_type
            if principal is None and not opts.urn:
                raise TypeError("Missing required property 'principal'")
            __props__.__dict__["principal"] = principal
            if resource_name_ is None and not opts.urn:
                raise TypeError("Missing required property 'resource_name_'")
            __props__.__dict__["resource_name"] = resource_name_
            if resource_pattern_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_pattern_type'")
            __props__.__dict__["resource_pattern_type"] = resource_pattern_type
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
        super(Acl, __self__).__init__(
            'redpanda:index/acl:Acl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_api_url: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            operation: Optional[pulumi.Input[str]] = None,
            permission_type: Optional[pulumi.Input[str]] = None,
            principal: Optional[pulumi.Input[str]] = None,
            resource_name_: Optional[pulumi.Input[str]] = None,
            resource_pattern_type: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None) -> 'Acl':
        """
        Get an existing Acl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[str] host: The host address to use for this ACL
        :param pulumi.Input[str] operation: The operation type that shall be allowed or denied (e.g READ)
        :param pulumi.Input[str] permission_type: The permission type. It determines whether the operation should be ALLOWED or DENIED
        :param pulumi.Input[str] principal: The principal to apply this ACL for
        :param pulumi.Input[str] resource_name_: The name of the resource this ACL entry will be on
        :param pulumi.Input[str] resource_pattern_type: The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        :param pulumi.Input[str] resource_type: The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclState.__new__(_AclState)

        __props__.__dict__["cluster_api_url"] = cluster_api_url
        __props__.__dict__["host"] = host
        __props__.__dict__["operation"] = operation
        __props__.__dict__["permission_type"] = permission_type
        __props__.__dict__["principal"] = principal
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_pattern_type"] = resource_pattern_type
        __props__.__dict__["resource_type"] = resource_type
        return Acl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Output[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host address to use for this ACL
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Output[str]:
        """
        The operation type that shall be allowed or denied (e.g READ)
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> pulumi.Output[str]:
        """
        The permission type. It determines whether the operation should be ALLOWED or DENIED
        """
        return pulumi.get(self, "permission_type")

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Output[str]:
        """
        The principal to apply this ACL for
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[str]:
        """
        The name of the resource this ACL entry will be on
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePatternType")
    def resource_pattern_type(self) -> pulumi.Output[str]:
        """
        The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        """
        return pulumi.get(self, "resource_pattern_type")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        """
        return pulumi.get(self, "resource_type")

