# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 cluster_api_url: pulumi.Input[str],
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_count: Optional[pulumi.Input[float]] = None,
                 replication_factor: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[bool] allow_deletion: Indicates whether the topic can be deleted.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] configuration: A map of string key/value pairs of topic configurations.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partition_count: The number of partitions for the topic. This determines how the data is distributed across brokers.
        :param pulumi.Input[float] replication_factor: The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if allow_deletion is not None:
            pulumi.set(__self__, "allow_deletion", allow_deletion)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Input[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the topic can be deleted.
        """
        return pulumi.get(self, "allow_deletion")

    @allow_deletion.setter
    def allow_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deletion", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of string key/value pairs of topic configurations.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the topic.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of partitions for the topic. This determines how the data is distributed across brokers.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "partition_count", value)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        return pulumi.get(self, "replication_factor")

    @replication_factor.setter
    def replication_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replication_factor", value)


@pulumi.input_type
class _TopicState:
    def __init__(__self__, *,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_count: Optional[pulumi.Input[float]] = None,
                 replication_factor: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Topic resources.
        :param pulumi.Input[bool] allow_deletion: Indicates whether the topic can be deleted.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] configuration: A map of string key/value pairs of topic configurations.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partition_count: The number of partitions for the topic. This determines how the data is distributed across brokers.
        :param pulumi.Input[float] replication_factor: The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        if allow_deletion is not None:
            pulumi.set(__self__, "allow_deletion", allow_deletion)
        if cluster_api_url is not None:
            pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the topic can be deleted.
        """
        return pulumi.get(self, "allow_deletion")

    @allow_deletion.setter
    def allow_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deletion", value)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of string key/value pairs of topic configurations.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the topic.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of partitions for the topic. This determines how the data is distributed across brokers.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "partition_count", value)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        return pulumi.get(self, "replication_factor")

    @replication_factor.setter
    def replication_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replication_factor", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_count: Optional[pulumi.Input[float]] = None,
                 replication_factor: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Topic represents a Kafka topic configuration

        Creates a topic in a Redpanda Cluster

        ## Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        test_topic = redpanda.Topic("testTopic",
            partition_count=partition_count,
            replication_factor=replication_factor,
            cluster_api_url=test_cluster.cluster_api_url,
            allow_deletion=True)
        test_acl = redpanda.Acl("testAcl",
            resource_type="TOPIC",
            resource_name_=test_topic.name,
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="READ",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support topic creation in self hosted clusters. This is an area of active development so expect that to change soon.

        ## Import

        ```sh
        $ pulumi import redpanda:index/topic:Topic example topicName,clusterId
        ```

        Where clusterId is the ID of the cluster in Redpanda Cloud

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_deletion: Indicates whether the topic can be deleted.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] configuration: A map of string key/value pairs of topic configurations.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partition_count: The number of partitions for the topic. This determines how the data is distributed across brokers.
        :param pulumi.Input[float] replication_factor: The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Topic represents a Kafka topic configuration

        Creates a topic in a Redpanda Cluster

        ## Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        test_topic = redpanda.Topic("testTopic",
            partition_count=partition_count,
            replication_factor=replication_factor,
            cluster_api_url=test_cluster.cluster_api_url,
            allow_deletion=True)
        test_acl = redpanda.Acl("testAcl",
            resource_type="TOPIC",
            resource_name_=test_topic.name,
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="READ",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support topic creation in self hosted clusters. This is an area of active development so expect that to change soon.

        ## Import

        ```sh
        $ pulumi import redpanda:index/topic:Topic example topicName,clusterId
        ```

        Where clusterId is the ID of the cluster in Redpanda Cloud

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_count: Optional[pulumi.Input[float]] = None,
                 replication_factor: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            __props__.__dict__["allow_deletion"] = allow_deletion
            if cluster_api_url is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_api_url'")
            __props__.__dict__["cluster_api_url"] = cluster_api_url
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["name"] = name
            __props__.__dict__["partition_count"] = partition_count
            __props__.__dict__["replication_factor"] = replication_factor
        super(Topic, __self__).__init__(
            'redpanda:index/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_deletion: Optional[pulumi.Input[bool]] = None,
            cluster_api_url: Optional[pulumi.Input[str]] = None,
            configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            partition_count: Optional[pulumi.Input[float]] = None,
            replication_factor: Optional[pulumi.Input[float]] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_deletion: Indicates whether the topic can be deleted.
        :param pulumi.Input[str] cluster_api_url: The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] configuration: A map of string key/value pairs of topic configurations.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partition_count: The number of partitions for the topic. This determines how the data is distributed across brokers.
        :param pulumi.Input[float] replication_factor: The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicState.__new__(_TopicState)

        __props__.__dict__["allow_deletion"] = allow_deletion
        __props__.__dict__["cluster_api_url"] = cluster_api_url
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["name"] = name
        __props__.__dict__["partition_count"] = partition_count
        __props__.__dict__["replication_factor"] = replication_factor
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the topic can be deleted.
        """
        return pulumi.get(self, "allow_deletion")

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Output[str]:
        """
        The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        """
        return pulumi.get(self, "cluster_api_url")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of string key/value pairs of topic configurations.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the topic.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> pulumi.Output[float]:
        """
        The number of partitions for the topic. This determines how the data is distributed across brokers.
        """
        return pulumi.get(self, "partition_count")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> pulumi.Output[float]:
        """
        The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        """
        return pulumi.get(self, "replication_factor")

