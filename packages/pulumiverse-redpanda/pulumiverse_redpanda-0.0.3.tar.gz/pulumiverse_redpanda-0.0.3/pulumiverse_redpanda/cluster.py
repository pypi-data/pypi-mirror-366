# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_type: pulumi.Input[str],
                 connection_type: pulumi.Input[str],
                 namespace_id: pulumi.Input[str],
                 network_id: pulumi.Input[str],
                 throughput_tier: pulumi.Input[str],
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redpanda_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_type: Type of the cluster
        :param pulumi.Input[str] connection_type: Connection type of the cluster
        :param pulumi.Input[str] namespace_id: The id of the namespace in which to create the cluster
        :param pulumi.Input[str] network_id: The id of the network in which to create the cluster
        :param pulumi.Input[str] throughput_tier: Throughput tier of the cluster
        :param pulumi.Input[bool] allow_deletion: allows deletion of the cluster. defaults to true. should probably be set to false for production use
        :param pulumi.Input[str] cloud_provider: Must be one of aws or gcp
        :param pulumi.Input[str] name: Name of the cluster
        :param pulumi.Input[str] redpanda_version: Version of Redpanda to deploy
        :param pulumi.Input[str] region: Cloud provider specific region of the cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Cloud provider specific zones of the cluster
        """
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "throughput_tier", throughput_tier)
        if allow_deletion is not None:
            pulumi.set(__self__, "allow_deletion", allow_deletion)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redpanda_version is not None:
            pulumi.set(__self__, "redpanda_version", redpanda_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[str]:
        """
        Type of the cluster
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Input[str]:
        """
        Connection type of the cluster
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        The id of the namespace in which to create the cluster
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        The id of the network in which to create the cluster
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="throughputTier")
    def throughput_tier(self) -> pulumi.Input[str]:
        """
        Throughput tier of the cluster
        """
        return pulumi.get(self, "throughput_tier")

    @throughput_tier.setter
    def throughput_tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "throughput_tier", value)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        allows deletion of the cluster. defaults to true. should probably be set to false for production use
        """
        return pulumi.get(self, "allow_deletion")

    @allow_deletion.setter
    def allow_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deletion", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Must be one of aws or gcp
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redpandaVersion")
    def redpanda_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of Redpanda to deploy
        """
        return pulumi.get(self, "redpanda_version")

    @redpanda_version.setter
    def redpanda_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redpanda_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider specific region of the cluster
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags to apply to the cluster
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cloud provider specific zones of the cluster
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_api_url: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 redpanda_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 throughput_tier: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[bool] allow_deletion: allows deletion of the cluster. defaults to true. should probably be set to false for production use
        :param pulumi.Input[str] cloud_provider: Must be one of aws or gcp
        :param pulumi.Input[str] cluster_api_url: The URL of the cluster API
        :param pulumi.Input[str] cluster_type: Type of the cluster
        :param pulumi.Input[str] connection_type: Connection type of the cluster
        :param pulumi.Input[str] name: Name of the cluster
        :param pulumi.Input[str] namespace_id: The id of the namespace in which to create the cluster
        :param pulumi.Input[str] network_id: The id of the network in which to create the cluster
        :param pulumi.Input[str] redpanda_version: Version of Redpanda to deploy
        :param pulumi.Input[str] region: Cloud provider specific region of the cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to the cluster
        :param pulumi.Input[str] throughput_tier: Throughput tier of the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Cloud provider specific zones of the cluster
        """
        if allow_deletion is not None:
            pulumi.set(__self__, "allow_deletion", allow_deletion)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_api_url is not None:
            pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if redpanda_version is not None:
            pulumi.set(__self__, "redpanda_version", redpanda_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if throughput_tier is not None:
            pulumi.set(__self__, "throughput_tier", throughput_tier)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        allows deletion of the cluster. defaults to true. should probably be set to false for production use
        """
        return pulumi.get(self, "allow_deletion")

    @allow_deletion.setter
    def allow_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deletion", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Must be one of aws or gcp
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the cluster API
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_api_url", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the cluster
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection type of the cluster
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the namespace in which to create the cluster
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the network in which to create the cluster
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="redpandaVersion")
    def redpanda_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of Redpanda to deploy
        """
        return pulumi.get(self, "redpanda_version")

    @redpanda_version.setter
    def redpanda_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redpanda_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider specific region of the cluster
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags to apply to the cluster
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="throughputTier")
    def throughput_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Throughput tier of the cluster
        """
        return pulumi.get(self, "throughput_tier")

    @throughput_tier.setter
    def throughput_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "throughput_tier", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cloud provider specific zones of the cluster
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 redpanda_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 throughput_tier: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Enables the provisioning and management of Redpanda clusters on AWS and GCP. A cluster must always have a network and namespace.

        ## Usage

        ### On AWS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```
        <!--End PulumiCodeChooser -->

        ### On GCP

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-central1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "gcp"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "us-central1-a",
                "us-central1-b",
                "us-central1-c",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-gcp-um4g"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = ""
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = ""
        network_name = config.get("networkName")
        if network_name is None:
            network_name = ""
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support the provisioning of "BYOC" clusters using this provider. A workaround is available

         * First use [RPK](https://docs.redpanda.com/current/deploy/deployment-option/cloud/create-byoc-cluster-aws/) to provision the cluster
         * Then use the provider's Cluster data source to reference the cluster for use in other resources.

        ### Example Usage of a data source BYOC to manage users and ACLs

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_redpanda as redpanda
        import pulumiverse_redpanda as redpanda

        config = pulumi.Config()
        cluster_id = config.get("clusterId")
        if cluster_id is None:
            cluster_id = ""
        test_cluster = redpanda.get_cluster(id=cluster_id)
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        test_acl = redpanda.Acl("testAcl",
            resource_type="CLUSTER",
            resource_name_="kafka-cluster",
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="ALTER",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import redpanda:index/cluster:Cluster example clusterId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_deletion: allows deletion of the cluster. defaults to true. should probably be set to false for production use
        :param pulumi.Input[str] cloud_provider: Must be one of aws or gcp
        :param pulumi.Input[str] cluster_type: Type of the cluster
        :param pulumi.Input[str] connection_type: Connection type of the cluster
        :param pulumi.Input[str] name: Name of the cluster
        :param pulumi.Input[str] namespace_id: The id of the namespace in which to create the cluster
        :param pulumi.Input[str] network_id: The id of the network in which to create the cluster
        :param pulumi.Input[str] redpanda_version: Version of Redpanda to deploy
        :param pulumi.Input[str] region: Cloud provider specific region of the cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to the cluster
        :param pulumi.Input[str] throughput_tier: Throughput tier of the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Cloud provider specific zones of the cluster
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Enables the provisioning and management of Redpanda clusters on AWS and GCP. A cluster must always have a network and namespace.

        ## Usage

        ### On AWS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "use1-az2",
                "use1-az4",
                "use1-az6",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-aws-v2-arm"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```
        <!--End PulumiCodeChooser -->

        ### On GCP

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_namespace = redpanda.Namespace("testNamespace")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-central1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "gcp"
        test_network = redpanda.Network("testNetwork",
            namespace_id=test_namespace.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        zones = config.get_object("zones")
        if zones is None:
            zones = [
                "us-central1-a",
                "us-central1-b",
                "us-central1-c",
            ]
        throughput_tier = config.get("throughputTier")
        if throughput_tier is None:
            throughput_tier = "tier-1-gcp-um4g"
        test_cluster = redpanda.Cluster("testCluster",
            namespace_id=test_namespace.id,
            network_id=test_network.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            connection_type="public",
            throughput_tier=throughput_tier,
            zones=zones,
            allow_deletion=True,
            tags={
                "key": "value",
            })
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = ""
        namespace_name = config.get("namespaceName")
        if namespace_name is None:
            namespace_name = ""
        network_name = config.get("networkName")
        if network_name is None:
            network_name = ""
        ```
        <!--End PulumiCodeChooser -->

        ## Limitations

        We are not currently able to support the provisioning of "BYOC" clusters using this provider. A workaround is available

         * First use [RPK](https://docs.redpanda.com/current/deploy/deployment-option/cloud/create-byoc-cluster-aws/) to provision the cluster
         * Then use the provider's Cluster data source to reference the cluster for use in other resources.

        ### Example Usage of a data source BYOC to manage users and ACLs

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_redpanda as redpanda
        import pulumiverse_redpanda as redpanda

        config = pulumi.Config()
        cluster_id = config.get("clusterId")
        if cluster_id is None:
            cluster_id = ""
        test_cluster = redpanda.get_cluster(id=cluster_id)
        user_pw = config.get("userPw")
        if user_pw is None:
            user_pw = "password"
        mechanism = config.get("mechanism")
        if mechanism is None:
            mechanism = "scram-sha-256"
        test_user = redpanda.User("testUser",
            password=user_pw,
            mechanism=mechanism,
            cluster_api_url=test_cluster.cluster_api_url)
        test_acl = redpanda.Acl("testAcl",
            resource_type="CLUSTER",
            resource_name_="kafka-cluster",
            resource_pattern_type="LITERAL",
            principal=test_user.name.apply(lambda name: f"User:{name}"),
            host="*",
            operation="ALTER",
            permission_type="ALLOW",
            cluster_api_url=test_cluster.cluster_api_url)
        user_name = config.get("userName")
        if user_name is None:
            user_name = "test-username"
        topic_name = config.get("topicName")
        if topic_name is None:
            topic_name = "test-topic"
        partition_count = config.get_float("partitionCount")
        if partition_count is None:
            partition_count = 3
        replication_factor = config.get_float("replicationFactor")
        if replication_factor is None:
            replication_factor = 3
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import redpanda:index/cluster:Cluster example clusterId
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deletion: Optional[pulumi.Input[bool]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 redpanda_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 throughput_tier: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["allow_deletion"] = allow_deletion
            __props__.__dict__["cloud_provider"] = cloud_provider
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            if connection_type is None and not opts.urn:
                raise TypeError("Missing required property 'connection_type'")
            __props__.__dict__["connection_type"] = connection_type
            __props__.__dict__["name"] = name
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["redpanda_version"] = redpanda_version
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if throughput_tier is None and not opts.urn:
                raise TypeError("Missing required property 'throughput_tier'")
            __props__.__dict__["throughput_tier"] = throughput_tier
            __props__.__dict__["zones"] = zones
            __props__.__dict__["cluster_api_url"] = None
        super(Cluster, __self__).__init__(
            'redpanda:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_deletion: Optional[pulumi.Input[bool]] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            cluster_api_url: Optional[pulumi.Input[str]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            connection_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            redpanda_version: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            throughput_tier: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_deletion: allows deletion of the cluster. defaults to true. should probably be set to false for production use
        :param pulumi.Input[str] cloud_provider: Must be one of aws or gcp
        :param pulumi.Input[str] cluster_api_url: The URL of the cluster API
        :param pulumi.Input[str] cluster_type: Type of the cluster
        :param pulumi.Input[str] connection_type: Connection type of the cluster
        :param pulumi.Input[str] name: Name of the cluster
        :param pulumi.Input[str] namespace_id: The id of the namespace in which to create the cluster
        :param pulumi.Input[str] network_id: The id of the network in which to create the cluster
        :param pulumi.Input[str] redpanda_version: Version of Redpanda to deploy
        :param pulumi.Input[str] region: Cloud provider specific region of the cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to the cluster
        :param pulumi.Input[str] throughput_tier: Throughput tier of the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Cloud provider specific zones of the cluster
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["allow_deletion"] = allow_deletion
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["cluster_api_url"] = cluster_api_url
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["connection_type"] = connection_type
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["redpanda_version"] = redpanda_version
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        __props__.__dict__["throughput_tier"] = throughput_tier
        __props__.__dict__["zones"] = zones
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> pulumi.Output[Optional[bool]]:
        """
        allows deletion of the cluster. defaults to true. should probably be set to false for production use
        """
        return pulumi.get(self, "allow_deletion")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[Optional[str]]:
        """
        Must be one of aws or gcp
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Output[str]:
        """
        The URL of the cluster API
        """
        return pulumi.get(self, "cluster_api_url")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        Type of the cluster
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Output[str]:
        """
        Connection type of the cluster
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        The id of the namespace in which to create the cluster
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        The id of the network in which to create the cluster
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="redpandaVersion")
    def redpanda_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of Redpanda to deploy
        """
        return pulumi.get(self, "redpanda_version")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        Cloud provider specific region of the cluster
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Tags to apply to the cluster
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="throughputTier")
    def throughput_tier(self) -> pulumi.Output[str]:
        """
        Throughput tier of the cluster
        """
        return pulumi.get(self, "throughput_tier")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Cloud provider specific zones of the cluster
        """
        return pulumi.get(self, "zones")

