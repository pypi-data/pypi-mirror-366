# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pickup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'start_specified': 'bool',
        'length_in_minutes': 'int',
        'type': 'int',
        'company': 'Company'
    }

    attribute_map = {
        'start': 'Start',
        'start_specified': 'StartSpecified',
        'length_in_minutes': 'LengthInMinutes',
        'type': 'Type',
        'company': 'Company'
    }

    def __init__(self, start=None, start_specified=None, length_in_minutes=None, type=None, company=None):  # noqa: E501
        """Pickup - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._start_specified = None
        self._length_in_minutes = None
        self._type = None
        self._company = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if start_specified is not None:
            self.start_specified = start_specified
        if length_in_minutes is not None:
            self.length_in_minutes = length_in_minutes
        if type is not None:
            self.type = type
        if company is not None:
            self.company = company

    @property
    def start(self):
        """Gets the start of this Pickup.  # noqa: E501


        :return: The start of this Pickup.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Pickup.


        :param start: The start of this Pickup.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def start_specified(self):
        """Gets the start_specified of this Pickup.  # noqa: E501


        :return: The start_specified of this Pickup.  # noqa: E501
        :rtype: bool
        """
        return self._start_specified

    @start_specified.setter
    def start_specified(self, start_specified):
        """Sets the start_specified of this Pickup.


        :param start_specified: The start_specified of this Pickup.  # noqa: E501
        :type: bool
        """

        self._start_specified = start_specified

    @property
    def length_in_minutes(self):
        """Gets the length_in_minutes of this Pickup.  # noqa: E501


        :return: The length_in_minutes of this Pickup.  # noqa: E501
        :rtype: int
        """
        return self._length_in_minutes

    @length_in_minutes.setter
    def length_in_minutes(self, length_in_minutes):
        """Sets the length_in_minutes of this Pickup.


        :param length_in_minutes: The length_in_minutes of this Pickup.  # noqa: E501
        :type: int
        """

        self._length_in_minutes = length_in_minutes

    @property
    def type(self):
        """Gets the type of this Pickup.  # noqa: E501


        :return: The type of this Pickup.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Pickup.


        :param type: The type of this Pickup.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def company(self):
        """Gets the company of this Pickup.  # noqa: E501


        :return: The company of this Pickup.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Pickup.


        :param company: The company of this Pickup.  # noqa: E501
        :type: Company
        """

        self._company = company

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pickup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pickup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
