# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReferenceActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'short_code': 'str',
        'short_code2': 'str',
        'whole_day': 'bool',
        'active': 'bool',
        'comment': 'str',
        'data_type': 'str',
        'filter': 'str',
        'type': 'str',
        'duty_type': 'str',
        'time_mode': 'str',
        'reference_group': 'str',
        'default_start_time': 'int',
        'default_end_time': 'int',
        'default_length': 'int',
        'unique_id': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'short_code': 'ShortCode',
        'short_code2': 'ShortCode2',
        'whole_day': 'WholeDay',
        'active': 'Active',
        'comment': 'Comment',
        'data_type': 'DataType',
        'filter': 'Filter',
        'type': 'Type',
        'duty_type': 'DutyType',
        'time_mode': 'TimeMode',
        'reference_group': 'ReferenceGroup',
        'default_start_time': 'DefaultStartTime',
        'default_end_time': 'DefaultEndTime',
        'default_length': 'DefaultLength',
        'unique_id': 'UniqueID',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, name=None, short_code=None, short_code2=None, whole_day=None, active=None, comment=None, data_type=None, filter=None, type=None, duty_type=None, time_mode=None, reference_group=None, default_start_time=None, default_end_time=None, default_length=None, unique_id=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """ReferenceActivity - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._short_code = None
        self._short_code2 = None
        self._whole_day = None
        self._active = None
        self._comment = None
        self._data_type = None
        self._filter = None
        self._type = None
        self._duty_type = None
        self._time_mode = None
        self._reference_group = None
        self._default_start_time = None
        self._default_end_time = None
        self._default_length = None
        self._unique_id = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if short_code is not None:
            self.short_code = short_code
        if short_code2 is not None:
            self.short_code2 = short_code2
        if whole_day is not None:
            self.whole_day = whole_day
        if active is not None:
            self.active = active
        if comment is not None:
            self.comment = comment
        if data_type is not None:
            self.data_type = data_type
        if filter is not None:
            self.filter = filter
        if type is not None:
            self.type = type
        if duty_type is not None:
            self.duty_type = duty_type
        if time_mode is not None:
            self.time_mode = time_mode
        if reference_group is not None:
            self.reference_group = reference_group
        if default_start_time is not None:
            self.default_start_time = default_start_time
        if default_end_time is not None:
            self.default_end_time = default_end_time
        if default_length is not None:
            self.default_length = default_length
        if unique_id is not None:
            self.unique_id = unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def name(self):
        """Gets the name of this ReferenceActivity.  # noqa: E501


        :return: The name of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReferenceActivity.


        :param name: The name of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_code(self):
        """Gets the short_code of this ReferenceActivity.  # noqa: E501


        :return: The short_code of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this ReferenceActivity.


        :param short_code: The short_code of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def short_code2(self):
        """Gets the short_code2 of this ReferenceActivity.  # noqa: E501


        :return: The short_code2 of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._short_code2

    @short_code2.setter
    def short_code2(self, short_code2):
        """Sets the short_code2 of this ReferenceActivity.


        :param short_code2: The short_code2 of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._short_code2 = short_code2

    @property
    def whole_day(self):
        """Gets the whole_day of this ReferenceActivity.  # noqa: E501


        :return: The whole_day of this ReferenceActivity.  # noqa: E501
        :rtype: bool
        """
        return self._whole_day

    @whole_day.setter
    def whole_day(self, whole_day):
        """Sets the whole_day of this ReferenceActivity.


        :param whole_day: The whole_day of this ReferenceActivity.  # noqa: E501
        :type: bool
        """

        self._whole_day = whole_day

    @property
    def active(self):
        """Gets the active of this ReferenceActivity.  # noqa: E501


        :return: The active of this ReferenceActivity.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReferenceActivity.


        :param active: The active of this ReferenceActivity.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def comment(self):
        """Gets the comment of this ReferenceActivity.  # noqa: E501


        :return: The comment of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ReferenceActivity.


        :param comment: The comment of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def data_type(self):
        """Gets the data_type of this ReferenceActivity.  # noqa: E501


        :return: The data_type of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ReferenceActivity.


        :param data_type: The data_type of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def filter(self):
        """Gets the filter of this ReferenceActivity.  # noqa: E501


        :return: The filter of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ReferenceActivity.


        :param filter: The filter of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def type(self):
        """Gets the type of this ReferenceActivity.  # noqa: E501


        :return: The type of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReferenceActivity.


        :param type: The type of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def duty_type(self):
        """Gets the duty_type of this ReferenceActivity.  # noqa: E501


        :return: The duty_type of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._duty_type

    @duty_type.setter
    def duty_type(self, duty_type):
        """Sets the duty_type of this ReferenceActivity.


        :param duty_type: The duty_type of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._duty_type = duty_type

    @property
    def time_mode(self):
        """Gets the time_mode of this ReferenceActivity.  # noqa: E501


        :return: The time_mode of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._time_mode

    @time_mode.setter
    def time_mode(self, time_mode):
        """Sets the time_mode of this ReferenceActivity.


        :param time_mode: The time_mode of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._time_mode = time_mode

    @property
    def reference_group(self):
        """Gets the reference_group of this ReferenceActivity.  # noqa: E501


        :return: The reference_group of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._reference_group

    @reference_group.setter
    def reference_group(self, reference_group):
        """Sets the reference_group of this ReferenceActivity.


        :param reference_group: The reference_group of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._reference_group = reference_group

    @property
    def default_start_time(self):
        """Gets the default_start_time of this ReferenceActivity.  # noqa: E501


        :return: The default_start_time of this ReferenceActivity.  # noqa: E501
        :rtype: int
        """
        return self._default_start_time

    @default_start_time.setter
    def default_start_time(self, default_start_time):
        """Sets the default_start_time of this ReferenceActivity.


        :param default_start_time: The default_start_time of this ReferenceActivity.  # noqa: E501
        :type: int
        """

        self._default_start_time = default_start_time

    @property
    def default_end_time(self):
        """Gets the default_end_time of this ReferenceActivity.  # noqa: E501


        :return: The default_end_time of this ReferenceActivity.  # noqa: E501
        :rtype: int
        """
        return self._default_end_time

    @default_end_time.setter
    def default_end_time(self, default_end_time):
        """Sets the default_end_time of this ReferenceActivity.


        :param default_end_time: The default_end_time of this ReferenceActivity.  # noqa: E501
        :type: int
        """

        self._default_end_time = default_end_time

    @property
    def default_length(self):
        """Gets the default_length of this ReferenceActivity.  # noqa: E501


        :return: The default_length of this ReferenceActivity.  # noqa: E501
        :rtype: int
        """
        return self._default_length

    @default_length.setter
    def default_length(self, default_length):
        """Sets the default_length of this ReferenceActivity.


        :param default_length: The default_length of this ReferenceActivity.  # noqa: E501
        :type: int
        """

        self._default_length = default_length

    @property
    def unique_id(self):
        """Gets the unique_id of this ReferenceActivity.  # noqa: E501


        :return: The unique_id of this ReferenceActivity.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this ReferenceActivity.


        :param unique_id: The unique_id of this ReferenceActivity.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ReferenceActivity.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this ReferenceActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ReferenceActivity.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this ReferenceActivity.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this ReferenceActivity.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this ReferenceActivity.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this ReferenceActivity.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this ReferenceActivity.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferenceActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferenceActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
