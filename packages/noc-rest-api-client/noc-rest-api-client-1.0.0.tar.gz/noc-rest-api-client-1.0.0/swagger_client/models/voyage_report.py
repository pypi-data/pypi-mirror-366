# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoyageReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrival_pilot': 'str',
        'departure_pilot': 'str',
        'landings': 'int',
        'delays': 'DelaysOut',
        'comment': 'str',
        'is_dep_line_training': 'bool',
        'is_arr_line_training': 'bool',
        'runway': 'str'
    }

    attribute_map = {
        'arrival_pilot': 'ArrivalPilot',
        'departure_pilot': 'DeparturePilot',
        'landings': 'Landings',
        'delays': 'Delays',
        'comment': 'Comment',
        'is_dep_line_training': 'IsDepLineTraining',
        'is_arr_line_training': 'IsArrLineTraining',
        'runway': 'Runway'
    }

    def __init__(self, arrival_pilot=None, departure_pilot=None, landings=None, delays=None, comment=None, is_dep_line_training=None, is_arr_line_training=None, runway=None):  # noqa: E501
        """VoyageReport - a model defined in Swagger"""  # noqa: E501
        self._arrival_pilot = None
        self._departure_pilot = None
        self._landings = None
        self._delays = None
        self._comment = None
        self._is_dep_line_training = None
        self._is_arr_line_training = None
        self._runway = None
        self.discriminator = None
        if arrival_pilot is not None:
            self.arrival_pilot = arrival_pilot
        if departure_pilot is not None:
            self.departure_pilot = departure_pilot
        if landings is not None:
            self.landings = landings
        if delays is not None:
            self.delays = delays
        if comment is not None:
            self.comment = comment
        if is_dep_line_training is not None:
            self.is_dep_line_training = is_dep_line_training
        if is_arr_line_training is not None:
            self.is_arr_line_training = is_arr_line_training
        if runway is not None:
            self.runway = runway

    @property
    def arrival_pilot(self):
        """Gets the arrival_pilot of this VoyageReport.  # noqa: E501


        :return: The arrival_pilot of this VoyageReport.  # noqa: E501
        :rtype: str
        """
        return self._arrival_pilot

    @arrival_pilot.setter
    def arrival_pilot(self, arrival_pilot):
        """Sets the arrival_pilot of this VoyageReport.


        :param arrival_pilot: The arrival_pilot of this VoyageReport.  # noqa: E501
        :type: str
        """

        self._arrival_pilot = arrival_pilot

    @property
    def departure_pilot(self):
        """Gets the departure_pilot of this VoyageReport.  # noqa: E501


        :return: The departure_pilot of this VoyageReport.  # noqa: E501
        :rtype: str
        """
        return self._departure_pilot

    @departure_pilot.setter
    def departure_pilot(self, departure_pilot):
        """Sets the departure_pilot of this VoyageReport.


        :param departure_pilot: The departure_pilot of this VoyageReport.  # noqa: E501
        :type: str
        """

        self._departure_pilot = departure_pilot

    @property
    def landings(self):
        """Gets the landings of this VoyageReport.  # noqa: E501


        :return: The landings of this VoyageReport.  # noqa: E501
        :rtype: int
        """
        return self._landings

    @landings.setter
    def landings(self, landings):
        """Sets the landings of this VoyageReport.


        :param landings: The landings of this VoyageReport.  # noqa: E501
        :type: int
        """

        self._landings = landings

    @property
    def delays(self):
        """Gets the delays of this VoyageReport.  # noqa: E501


        :return: The delays of this VoyageReport.  # noqa: E501
        :rtype: DelaysOut
        """
        return self._delays

    @delays.setter
    def delays(self, delays):
        """Sets the delays of this VoyageReport.


        :param delays: The delays of this VoyageReport.  # noqa: E501
        :type: DelaysOut
        """

        self._delays = delays

    @property
    def comment(self):
        """Gets the comment of this VoyageReport.  # noqa: E501


        :return: The comment of this VoyageReport.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this VoyageReport.


        :param comment: The comment of this VoyageReport.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def is_dep_line_training(self):
        """Gets the is_dep_line_training of this VoyageReport.  # noqa: E501


        :return: The is_dep_line_training of this VoyageReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_dep_line_training

    @is_dep_line_training.setter
    def is_dep_line_training(self, is_dep_line_training):
        """Sets the is_dep_line_training of this VoyageReport.


        :param is_dep_line_training: The is_dep_line_training of this VoyageReport.  # noqa: E501
        :type: bool
        """

        self._is_dep_line_training = is_dep_line_training

    @property
    def is_arr_line_training(self):
        """Gets the is_arr_line_training of this VoyageReport.  # noqa: E501


        :return: The is_arr_line_training of this VoyageReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_arr_line_training

    @is_arr_line_training.setter
    def is_arr_line_training(self, is_arr_line_training):
        """Sets the is_arr_line_training of this VoyageReport.


        :param is_arr_line_training: The is_arr_line_training of this VoyageReport.  # noqa: E501
        :type: bool
        """

        self._is_arr_line_training = is_arr_line_training

    @property
    def runway(self):
        """Gets the runway of this VoyageReport.  # noqa: E501


        :return: The runway of this VoyageReport.  # noqa: E501
        :rtype: str
        """
        return self._runway

    @runway.setter
    def runway(self, runway):
        """Sets the runway of this VoyageReport.


        :param runway: The runway of this VoyageReport.  # noqa: E501
        :type: str
        """

        self._runway = runway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoyageReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoyageReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
