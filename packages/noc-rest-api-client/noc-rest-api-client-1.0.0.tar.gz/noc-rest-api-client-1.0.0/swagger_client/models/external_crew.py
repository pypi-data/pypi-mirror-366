# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalCrew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flight_leg_date': 'datetime',
        'flight_number': 'str',
        'departure_airport': 'str',
        'arrival_airport': 'str',
        'sort_order': 'int',
        'assigned_rank': 'str',
        'code': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'flight_leg_date': 'FlightLegDate',
        'flight_number': 'FlightNumber',
        'departure_airport': 'DepartureAirport',
        'arrival_airport': 'ArrivalAirport',
        'sort_order': 'SortOrder',
        'assigned_rank': 'AssignedRank',
        'code': 'Code',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'comment': 'Comment'
    }

    def __init__(self, flight_leg_date=None, flight_number=None, departure_airport=None, arrival_airport=None, sort_order=None, assigned_rank=None, code=None, first_name=None, last_name=None, comment=None):  # noqa: E501
        """ExternalCrew - a model defined in Swagger"""  # noqa: E501
        self._flight_leg_date = None
        self._flight_number = None
        self._departure_airport = None
        self._arrival_airport = None
        self._sort_order = None
        self._assigned_rank = None
        self._code = None
        self._first_name = None
        self._last_name = None
        self._comment = None
        self.discriminator = None
        if flight_leg_date is not None:
            self.flight_leg_date = flight_leg_date
        if flight_number is not None:
            self.flight_number = flight_number
        if departure_airport is not None:
            self.departure_airport = departure_airport
        if arrival_airport is not None:
            self.arrival_airport = arrival_airport
        if sort_order is not None:
            self.sort_order = sort_order
        if assigned_rank is not None:
            self.assigned_rank = assigned_rank
        if code is not None:
            self.code = code
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if comment is not None:
            self.comment = comment

    @property
    def flight_leg_date(self):
        """Gets the flight_leg_date of this ExternalCrew.  # noqa: E501


        :return: The flight_leg_date of this ExternalCrew.  # noqa: E501
        :rtype: datetime
        """
        return self._flight_leg_date

    @flight_leg_date.setter
    def flight_leg_date(self, flight_leg_date):
        """Sets the flight_leg_date of this ExternalCrew.


        :param flight_leg_date: The flight_leg_date of this ExternalCrew.  # noqa: E501
        :type: datetime
        """

        self._flight_leg_date = flight_leg_date

    @property
    def flight_number(self):
        """Gets the flight_number of this ExternalCrew.  # noqa: E501


        :return: The flight_number of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this ExternalCrew.


        :param flight_number: The flight_number of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._flight_number = flight_number

    @property
    def departure_airport(self):
        """Gets the departure_airport of this ExternalCrew.  # noqa: E501


        :return: The departure_airport of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._departure_airport

    @departure_airport.setter
    def departure_airport(self, departure_airport):
        """Sets the departure_airport of this ExternalCrew.


        :param departure_airport: The departure_airport of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._departure_airport = departure_airport

    @property
    def arrival_airport(self):
        """Gets the arrival_airport of this ExternalCrew.  # noqa: E501


        :return: The arrival_airport of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._arrival_airport

    @arrival_airport.setter
    def arrival_airport(self, arrival_airport):
        """Sets the arrival_airport of this ExternalCrew.


        :param arrival_airport: The arrival_airport of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._arrival_airport = arrival_airport

    @property
    def sort_order(self):
        """Gets the sort_order of this ExternalCrew.  # noqa: E501


        :return: The sort_order of this ExternalCrew.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ExternalCrew.


        :param sort_order: The sort_order of this ExternalCrew.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def assigned_rank(self):
        """Gets the assigned_rank of this ExternalCrew.  # noqa: E501


        :return: The assigned_rank of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._assigned_rank

    @assigned_rank.setter
    def assigned_rank(self, assigned_rank):
        """Sets the assigned_rank of this ExternalCrew.


        :param assigned_rank: The assigned_rank of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._assigned_rank = assigned_rank

    @property
    def code(self):
        """Gets the code of this ExternalCrew.  # noqa: E501


        :return: The code of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ExternalCrew.


        :param code: The code of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def first_name(self):
        """Gets the first_name of this ExternalCrew.  # noqa: E501


        :return: The first_name of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ExternalCrew.


        :param first_name: The first_name of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ExternalCrew.  # noqa: E501


        :return: The last_name of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ExternalCrew.


        :param last_name: The last_name of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def comment(self):
        """Gets the comment of this ExternalCrew.  # noqa: E501


        :return: The comment of this ExternalCrew.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ExternalCrew.


        :param comment: The comment of this ExternalCrew.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalCrew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalCrew):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
