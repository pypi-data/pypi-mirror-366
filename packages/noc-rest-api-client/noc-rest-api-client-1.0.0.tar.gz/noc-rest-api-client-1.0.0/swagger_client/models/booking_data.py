# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BookingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'end': 'datetime',
        'station': 'str',
        'booking_status': 'str',
        'reservation_number': 'str',
        'reservation_comment': 'str'
    }

    attribute_map = {
        'start': 'Start',
        'end': 'End',
        'station': 'Station',
        'booking_status': 'BookingStatus',
        'reservation_number': 'ReservationNumber',
        'reservation_comment': 'ReservationComment'
    }

    def __init__(self, start=None, end=None, station=None, booking_status=None, reservation_number=None, reservation_comment=None):  # noqa: E501
        """BookingData - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._end = None
        self._station = None
        self._booking_status = None
        self._reservation_number = None
        self._reservation_comment = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if station is not None:
            self.station = station
        if booking_status is not None:
            self.booking_status = booking_status
        if reservation_number is not None:
            self.reservation_number = reservation_number
        if reservation_comment is not None:
            self.reservation_comment = reservation_comment

    @property
    def start(self):
        """Gets the start of this BookingData.  # noqa: E501


        :return: The start of this BookingData.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BookingData.


        :param start: The start of this BookingData.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this BookingData.  # noqa: E501


        :return: The end of this BookingData.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this BookingData.


        :param end: The end of this BookingData.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def station(self):
        """Gets the station of this BookingData.  # noqa: E501


        :return: The station of this BookingData.  # noqa: E501
        :rtype: str
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this BookingData.


        :param station: The station of this BookingData.  # noqa: E501
        :type: str
        """

        self._station = station

    @property
    def booking_status(self):
        """Gets the booking_status of this BookingData.  # noqa: E501


        :return: The booking_status of this BookingData.  # noqa: E501
        :rtype: str
        """
        return self._booking_status

    @booking_status.setter
    def booking_status(self, booking_status):
        """Sets the booking_status of this BookingData.


        :param booking_status: The booking_status of this BookingData.  # noqa: E501
        :type: str
        """

        self._booking_status = booking_status

    @property
    def reservation_number(self):
        """Gets the reservation_number of this BookingData.  # noqa: E501


        :return: The reservation_number of this BookingData.  # noqa: E501
        :rtype: str
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this BookingData.


        :param reservation_number: The reservation_number of this BookingData.  # noqa: E501
        :type: str
        """

        self._reservation_number = reservation_number

    @property
    def reservation_comment(self):
        """Gets the reservation_comment of this BookingData.  # noqa: E501


        :return: The reservation_comment of this BookingData.  # noqa: E501
        :rtype: str
        """
        return self._reservation_comment

    @reservation_comment.setter
    def reservation_comment(self, reservation_comment):
        """Sets the reservation_comment of this BookingData.


        :param reservation_comment: The reservation_comment of this BookingData.  # noqa: E501
        :type: str
        """

        self._reservation_comment = reservation_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BookingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
