# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RosterTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'timestamp': 'datetime',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'created_by_unique_id': 'int',
        'status': 'str',
        'revision_number': 'int',
        'change_type': 'str',
        'transaction_code': 'str',
        'is_original': 'bool',
        'is_released': 'bool',
        'confirmed_date': 'datetime',
        'roster_activities': 'list[RosterActivity]'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'timestamp': 'Timestamp',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'created_by_unique_id': 'CreatedByUniqueId',
        'status': 'Status',
        'revision_number': 'RevisionNumber',
        'change_type': 'ChangeType',
        'transaction_code': 'TransactionCode',
        'is_original': 'IsOriginal',
        'is_released': 'IsReleased',
        'confirmed_date': 'ConfirmedDate',
        'roster_activities': 'RosterActivities'
    }

    def __init__(self, unique_id=None, timestamp=None, valid_from=None, valid_to=None, created_by_unique_id=None, status=None, revision_number=None, change_type=None, transaction_code=None, is_original=None, is_released=None, confirmed_date=None, roster_activities=None):  # noqa: E501
        """RosterTransaction - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._timestamp = None
        self._valid_from = None
        self._valid_to = None
        self._created_by_unique_id = None
        self._status = None
        self._revision_number = None
        self._change_type = None
        self._transaction_code = None
        self._is_original = None
        self._is_released = None
        self._confirmed_date = None
        self._roster_activities = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if created_by_unique_id is not None:
            self.created_by_unique_id = created_by_unique_id
        if status is not None:
            self.status = status
        if revision_number is not None:
            self.revision_number = revision_number
        if change_type is not None:
            self.change_type = change_type
        if transaction_code is not None:
            self.transaction_code = transaction_code
        if is_original is not None:
            self.is_original = is_original
        if is_released is not None:
            self.is_released = is_released
        if confirmed_date is not None:
            self.confirmed_date = confirmed_date
        if roster_activities is not None:
            self.roster_activities = roster_activities

    @property
    def unique_id(self):
        """Gets the unique_id of this RosterTransaction.  # noqa: E501


        :return: The unique_id of this RosterTransaction.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this RosterTransaction.


        :param unique_id: The unique_id of this RosterTransaction.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this RosterTransaction.  # noqa: E501


        :return: The timestamp of this RosterTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RosterTransaction.


        :param timestamp: The timestamp of this RosterTransaction.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def valid_from(self):
        """Gets the valid_from of this RosterTransaction.  # noqa: E501


        :return: The valid_from of this RosterTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this RosterTransaction.


        :param valid_from: The valid_from of this RosterTransaction.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this RosterTransaction.  # noqa: E501


        :return: The valid_to of this RosterTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this RosterTransaction.


        :param valid_to: The valid_to of this RosterTransaction.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def created_by_unique_id(self):
        """Gets the created_by_unique_id of this RosterTransaction.  # noqa: E501


        :return: The created_by_unique_id of this RosterTransaction.  # noqa: E501
        :rtype: int
        """
        return self._created_by_unique_id

    @created_by_unique_id.setter
    def created_by_unique_id(self, created_by_unique_id):
        """Sets the created_by_unique_id of this RosterTransaction.


        :param created_by_unique_id: The created_by_unique_id of this RosterTransaction.  # noqa: E501
        :type: int
        """

        self._created_by_unique_id = created_by_unique_id

    @property
    def status(self):
        """Gets the status of this RosterTransaction.  # noqa: E501

        Roster Transaction revision status  # noqa: E501

        :return: The status of this RosterTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RosterTransaction.

        Roster Transaction revision status  # noqa: E501

        :param status: The status of this RosterTransaction.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def revision_number(self):
        """Gets the revision_number of this RosterTransaction.  # noqa: E501

        Roster version number  # noqa: E501

        :return: The revision_number of this RosterTransaction.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this RosterTransaction.

        Roster version number  # noqa: E501

        :param revision_number: The revision_number of this RosterTransaction.  # noqa: E501
        :type: int
        """

        self._revision_number = revision_number

    @property
    def change_type(self):
        """Gets the change_type of this RosterTransaction.  # noqa: E501

        Change Type can be Unknown, Created, Modified, Deletion, or Release  # noqa: E501

        :return: The change_type of this RosterTransaction.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this RosterTransaction.

        Change Type can be Unknown, Created, Modified, Deletion, or Release  # noqa: E501

        :param change_type: The change_type of this RosterTransaction.  # noqa: E501
        :type: str
        """

        self._change_type = change_type

    @property
    def transaction_code(self):
        """Gets the transaction_code of this RosterTransaction.  # noqa: E501

        Roster transaction ShortCode  # noqa: E501

        :return: The transaction_code of this RosterTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this RosterTransaction.

        Roster transaction ShortCode  # noqa: E501

        :param transaction_code: The transaction_code of this RosterTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_code = transaction_code

    @property
    def is_original(self):
        """Gets the is_original of this RosterTransaction.  # noqa: E501


        :return: The is_original of this RosterTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_original

    @is_original.setter
    def is_original(self, is_original):
        """Sets the is_original of this RosterTransaction.


        :param is_original: The is_original of this RosterTransaction.  # noqa: E501
        :type: bool
        """

        self._is_original = is_original

    @property
    def is_released(self):
        """Gets the is_released of this RosterTransaction.  # noqa: E501


        :return: The is_released of this RosterTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_released

    @is_released.setter
    def is_released(self, is_released):
        """Sets the is_released of this RosterTransaction.


        :param is_released: The is_released of this RosterTransaction.  # noqa: E501
        :type: bool
        """

        self._is_released = is_released

    @property
    def confirmed_date(self):
        """Gets the confirmed_date of this RosterTransaction.  # noqa: E501


        :return: The confirmed_date of this RosterTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._confirmed_date

    @confirmed_date.setter
    def confirmed_date(self, confirmed_date):
        """Sets the confirmed_date of this RosterTransaction.


        :param confirmed_date: The confirmed_date of this RosterTransaction.  # noqa: E501
        :type: datetime
        """

        self._confirmed_date = confirmed_date

    @property
    def roster_activities(self):
        """Gets the roster_activities of this RosterTransaction.  # noqa: E501


        :return: The roster_activities of this RosterTransaction.  # noqa: E501
        :rtype: list[RosterActivity]
        """
        return self._roster_activities

    @roster_activities.setter
    def roster_activities(self, roster_activities):
        """Sets the roster_activities of this RosterTransaction.


        :param roster_activities: The roster_activities of this RosterTransaction.  # noqa: E501
        :type: list[RosterActivity]
        """

        self._roster_activities = roster_activities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RosterTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RosterTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
