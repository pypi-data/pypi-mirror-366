# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TurnAroundRulesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'arrival_activity_filter': 'str',
        'depature_activity_filter': 'str',
        'minutes': 'int',
        'priority': 'int',
        'active': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'frequency': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'arrival_activity_filter': 'ArrivalActivityFilter',
        'depature_activity_filter': 'DepatureActivityFilter',
        'minutes': 'Minutes',
        'priority': 'Priority',
        'active': 'Active',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'frequency': 'Frequency'
    }

    def __init__(self, name=None, arrival_activity_filter=None, depature_activity_filter=None, minutes=None, priority=None, active=None, valid_from=None, valid_to=None, frequency=None):  # noqa: E501
        """TurnAroundRulesData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._arrival_activity_filter = None
        self._depature_activity_filter = None
        self._minutes = None
        self._priority = None
        self._active = None
        self._valid_from = None
        self._valid_to = None
        self._frequency = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if arrival_activity_filter is not None:
            self.arrival_activity_filter = arrival_activity_filter
        if depature_activity_filter is not None:
            self.depature_activity_filter = depature_activity_filter
        if minutes is not None:
            self.minutes = minutes
        if priority is not None:
            self.priority = priority
        if active is not None:
            self.active = active
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if frequency is not None:
            self.frequency = frequency

    @property
    def name(self):
        """Gets the name of this TurnAroundRulesData.  # noqa: E501


        :return: The name of this TurnAroundRulesData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TurnAroundRulesData.


        :param name: The name of this TurnAroundRulesData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def arrival_activity_filter(self):
        """Gets the arrival_activity_filter of this TurnAroundRulesData.  # noqa: E501


        :return: The arrival_activity_filter of this TurnAroundRulesData.  # noqa: E501
        :rtype: str
        """
        return self._arrival_activity_filter

    @arrival_activity_filter.setter
    def arrival_activity_filter(self, arrival_activity_filter):
        """Sets the arrival_activity_filter of this TurnAroundRulesData.


        :param arrival_activity_filter: The arrival_activity_filter of this TurnAroundRulesData.  # noqa: E501
        :type: str
        """

        self._arrival_activity_filter = arrival_activity_filter

    @property
    def depature_activity_filter(self):
        """Gets the depature_activity_filter of this TurnAroundRulesData.  # noqa: E501


        :return: The depature_activity_filter of this TurnAroundRulesData.  # noqa: E501
        :rtype: str
        """
        return self._depature_activity_filter

    @depature_activity_filter.setter
    def depature_activity_filter(self, depature_activity_filter):
        """Sets the depature_activity_filter of this TurnAroundRulesData.


        :param depature_activity_filter: The depature_activity_filter of this TurnAroundRulesData.  # noqa: E501
        :type: str
        """

        self._depature_activity_filter = depature_activity_filter

    @property
    def minutes(self):
        """Gets the minutes of this TurnAroundRulesData.  # noqa: E501


        :return: The minutes of this TurnAroundRulesData.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this TurnAroundRulesData.


        :param minutes: The minutes of this TurnAroundRulesData.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def priority(self):
        """Gets the priority of this TurnAroundRulesData.  # noqa: E501


        :return: The priority of this TurnAroundRulesData.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TurnAroundRulesData.


        :param priority: The priority of this TurnAroundRulesData.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def active(self):
        """Gets the active of this TurnAroundRulesData.  # noqa: E501


        :return: The active of this TurnAroundRulesData.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TurnAroundRulesData.


        :param active: The active of this TurnAroundRulesData.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def valid_from(self):
        """Gets the valid_from of this TurnAroundRulesData.  # noqa: E501


        :return: The valid_from of this TurnAroundRulesData.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this TurnAroundRulesData.


        :param valid_from: The valid_from of this TurnAroundRulesData.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this TurnAroundRulesData.  # noqa: E501


        :return: The valid_to of this TurnAroundRulesData.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this TurnAroundRulesData.


        :param valid_to: The valid_to of this TurnAroundRulesData.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def frequency(self):
        """Gets the frequency of this TurnAroundRulesData.  # noqa: E501


        :return: The frequency of this TurnAroundRulesData.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TurnAroundRulesData.


        :param frequency: The frequency of this TurnAroundRulesData.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TurnAroundRulesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TurnAroundRulesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
