# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AircraftNoteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note_id': 'str',
        'note_text': 'str',
        'note_type': 'str',
        'created_by': 'str',
        'valid_from': 'str',
        'valid_to': 'str'
    }

    attribute_map = {
        'note_id': 'NoteID',
        'note_text': 'NoteText',
        'note_type': 'NoteType',
        'created_by': 'CreatedBy',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo'
    }

    def __init__(self, note_id=None, note_text=None, note_type=None, created_by=None, valid_from=None, valid_to=None):  # noqa: E501
        """AircraftNoteDto - a model defined in Swagger"""  # noqa: E501
        self._note_id = None
        self._note_text = None
        self._note_type = None
        self._created_by = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if note_id is not None:
            self.note_id = note_id
        if note_text is not None:
            self.note_text = note_text
        if note_type is not None:
            self.note_type = note_type
        if created_by is not None:
            self.created_by = created_by
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def note_id(self):
        """Gets the note_id of this AircraftNoteDto.  # noqa: E501


        :return: The note_id of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this AircraftNoteDto.


        :param note_id: The note_id of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._note_id = note_id

    @property
    def note_text(self):
        """Gets the note_text of this AircraftNoteDto.  # noqa: E501


        :return: The note_text of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this AircraftNoteDto.


        :param note_text: The note_text of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._note_text = note_text

    @property
    def note_type(self):
        """Gets the note_type of this AircraftNoteDto.  # noqa: E501


        :return: The note_type of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this AircraftNoteDto.


        :param note_type: The note_type of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._note_type = note_type

    @property
    def created_by(self):
        """Gets the created_by of this AircraftNoteDto.  # noqa: E501


        :return: The created_by of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AircraftNoteDto.


        :param created_by: The created_by of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def valid_from(self):
        """Gets the valid_from of this AircraftNoteDto.  # noqa: E501


        :return: The valid_from of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this AircraftNoteDto.


        :param valid_from: The valid_from of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this AircraftNoteDto.  # noqa: E501


        :return: The valid_to of this AircraftNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this AircraftNoteDto.


        :param valid_to: The valid_to of this AircraftNoteDto.  # noqa: E501
        :type: str
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AircraftNoteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AircraftNoteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
