# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlightOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flight_number': 'str',
        'dep_station': 'str',
        'arrival_station': 'str',
        'flight_date': 'datetime',
        'call_sign': 'str'
    }

    attribute_map = {
        'flight_number': 'FlightNumber',
        'dep_station': 'DepStation',
        'arrival_station': 'ArrivalStation',
        'flight_date': 'FlightDate',
        'call_sign': 'CallSign'
    }

    def __init__(self, flight_number=None, dep_station=None, arrival_station=None, flight_date=None, call_sign=None):  # noqa: E501
        """FlightOut - a model defined in Swagger"""  # noqa: E501
        self._flight_number = None
        self._dep_station = None
        self._arrival_station = None
        self._flight_date = None
        self._call_sign = None
        self.discriminator = None
        if flight_number is not None:
            self.flight_number = flight_number
        if dep_station is not None:
            self.dep_station = dep_station
        if arrival_station is not None:
            self.arrival_station = arrival_station
        if flight_date is not None:
            self.flight_date = flight_date
        if call_sign is not None:
            self.call_sign = call_sign

    @property
    def flight_number(self):
        """Gets the flight_number of this FlightOut.  # noqa: E501


        :return: The flight_number of this FlightOut.  # noqa: E501
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this FlightOut.


        :param flight_number: The flight_number of this FlightOut.  # noqa: E501
        :type: str
        """

        self._flight_number = flight_number

    @property
    def dep_station(self):
        """Gets the dep_station of this FlightOut.  # noqa: E501


        :return: The dep_station of this FlightOut.  # noqa: E501
        :rtype: str
        """
        return self._dep_station

    @dep_station.setter
    def dep_station(self, dep_station):
        """Sets the dep_station of this FlightOut.


        :param dep_station: The dep_station of this FlightOut.  # noqa: E501
        :type: str
        """

        self._dep_station = dep_station

    @property
    def arrival_station(self):
        """Gets the arrival_station of this FlightOut.  # noqa: E501


        :return: The arrival_station of this FlightOut.  # noqa: E501
        :rtype: str
        """
        return self._arrival_station

    @arrival_station.setter
    def arrival_station(self, arrival_station):
        """Sets the arrival_station of this FlightOut.


        :param arrival_station: The arrival_station of this FlightOut.  # noqa: E501
        :type: str
        """

        self._arrival_station = arrival_station

    @property
    def flight_date(self):
        """Gets the flight_date of this FlightOut.  # noqa: E501


        :return: The flight_date of this FlightOut.  # noqa: E501
        :rtype: datetime
        """
        return self._flight_date

    @flight_date.setter
    def flight_date(self, flight_date):
        """Sets the flight_date of this FlightOut.


        :param flight_date: The flight_date of this FlightOut.  # noqa: E501
        :type: datetime
        """

        self._flight_date = flight_date

    @property
    def call_sign(self):
        """Gets the call_sign of this FlightOut.  # noqa: E501


        :return: The call_sign of this FlightOut.  # noqa: E501
        :rtype: str
        """
        return self._call_sign

    @call_sign.setter
    def call_sign(self, call_sign):
        """Sets the call_sign of this FlightOut.


        :param call_sign: The call_sign of this FlightOut.  # noqa: E501
        :type: str
        """

        self._call_sign = call_sign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlightOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlightOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
