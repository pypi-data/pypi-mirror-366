# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PairingTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'pairing_unique_id': 'int',
        'name': 'str',
        'timestamp': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'employee_num': 'str',
        'complement': 'str',
        'qualification': 'str',
        'assigned_rank': 'str',
        'base': 'str',
        'transaction_code': 'str',
        'change_description': 'str',
        'created_by_unique_id': 'int',
        'pairing_activities': 'list[PairingActivity]',
        'crew_on_board': 'list[CrewOnBoardInfo]'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'pairing_unique_id': 'PairingUniqueId',
        'name': 'Name',
        'timestamp': 'Timestamp',
        'start': 'Start',
        'end': 'End',
        'employee_num': 'EmployeeNum',
        'complement': 'Complement',
        'qualification': 'Qualification',
        'assigned_rank': 'AssignedRank',
        'base': 'Base',
        'transaction_code': 'TransactionCode',
        'change_description': 'ChangeDescription',
        'created_by_unique_id': 'CreatedByUniqueId',
        'pairing_activities': 'PairingActivities',
        'crew_on_board': 'CrewOnBoard'
    }

    def __init__(self, unique_id=None, pairing_unique_id=None, name=None, timestamp=None, start=None, end=None, employee_num=None, complement=None, qualification=None, assigned_rank=None, base=None, transaction_code=None, change_description=None, created_by_unique_id=None, pairing_activities=None, crew_on_board=None):  # noqa: E501
        """PairingTransaction - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._pairing_unique_id = None
        self._name = None
        self._timestamp = None
        self._start = None
        self._end = None
        self._employee_num = None
        self._complement = None
        self._qualification = None
        self._assigned_rank = None
        self._base = None
        self._transaction_code = None
        self._change_description = None
        self._created_by_unique_id = None
        self._pairing_activities = None
        self._crew_on_board = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if pairing_unique_id is not None:
            self.pairing_unique_id = pairing_unique_id
        if name is not None:
            self.name = name
        if timestamp is not None:
            self.timestamp = timestamp
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if employee_num is not None:
            self.employee_num = employee_num
        if complement is not None:
            self.complement = complement
        if qualification is not None:
            self.qualification = qualification
        if assigned_rank is not None:
            self.assigned_rank = assigned_rank
        if base is not None:
            self.base = base
        if transaction_code is not None:
            self.transaction_code = transaction_code
        if change_description is not None:
            self.change_description = change_description
        if created_by_unique_id is not None:
            self.created_by_unique_id = created_by_unique_id
        if pairing_activities is not None:
            self.pairing_activities = pairing_activities
        if crew_on_board is not None:
            self.crew_on_board = crew_on_board

    @property
    def unique_id(self):
        """Gets the unique_id of this PairingTransaction.  # noqa: E501


        :return: The unique_id of this PairingTransaction.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this PairingTransaction.


        :param unique_id: The unique_id of this PairingTransaction.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def pairing_unique_id(self):
        """Gets the pairing_unique_id of this PairingTransaction.  # noqa: E501


        :return: The pairing_unique_id of this PairingTransaction.  # noqa: E501
        :rtype: int
        """
        return self._pairing_unique_id

    @pairing_unique_id.setter
    def pairing_unique_id(self, pairing_unique_id):
        """Sets the pairing_unique_id of this PairingTransaction.


        :param pairing_unique_id: The pairing_unique_id of this PairingTransaction.  # noqa: E501
        :type: int
        """

        self._pairing_unique_id = pairing_unique_id

    @property
    def name(self):
        """Gets the name of this PairingTransaction.  # noqa: E501


        :return: The name of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PairingTransaction.


        :param name: The name of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this PairingTransaction.  # noqa: E501


        :return: The timestamp of this PairingTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PairingTransaction.


        :param timestamp: The timestamp of this PairingTransaction.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def start(self):
        """Gets the start of this PairingTransaction.  # noqa: E501


        :return: The start of this PairingTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PairingTransaction.


        :param start: The start of this PairingTransaction.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this PairingTransaction.  # noqa: E501


        :return: The end of this PairingTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PairingTransaction.


        :param end: The end of this PairingTransaction.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def employee_num(self):
        """Gets the employee_num of this PairingTransaction.  # noqa: E501


        :return: The employee_num of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._employee_num

    @employee_num.setter
    def employee_num(self, employee_num):
        """Sets the employee_num of this PairingTransaction.


        :param employee_num: The employee_num of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._employee_num = employee_num

    @property
    def complement(self):
        """Gets the complement of this PairingTransaction.  # noqa: E501


        :return: The complement of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this PairingTransaction.


        :param complement: The complement of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def qualification(self):
        """Gets the qualification of this PairingTransaction.  # noqa: E501


        :return: The qualification of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._qualification

    @qualification.setter
    def qualification(self, qualification):
        """Sets the qualification of this PairingTransaction.


        :param qualification: The qualification of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._qualification = qualification

    @property
    def assigned_rank(self):
        """Gets the assigned_rank of this PairingTransaction.  # noqa: E501


        :return: The assigned_rank of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._assigned_rank

    @assigned_rank.setter
    def assigned_rank(self, assigned_rank):
        """Sets the assigned_rank of this PairingTransaction.


        :param assigned_rank: The assigned_rank of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._assigned_rank = assigned_rank

    @property
    def base(self):
        """Gets the base of this PairingTransaction.  # noqa: E501


        :return: The base of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this PairingTransaction.


        :param base: The base of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def transaction_code(self):
        """Gets the transaction_code of this PairingTransaction.  # noqa: E501


        :return: The transaction_code of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this PairingTransaction.


        :param transaction_code: The transaction_code of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_code = transaction_code

    @property
    def change_description(self):
        """Gets the change_description of this PairingTransaction.  # noqa: E501


        :return: The change_description of this PairingTransaction.  # noqa: E501
        :rtype: str
        """
        return self._change_description

    @change_description.setter
    def change_description(self, change_description):
        """Sets the change_description of this PairingTransaction.


        :param change_description: The change_description of this PairingTransaction.  # noqa: E501
        :type: str
        """

        self._change_description = change_description

    @property
    def created_by_unique_id(self):
        """Gets the created_by_unique_id of this PairingTransaction.  # noqa: E501


        :return: The created_by_unique_id of this PairingTransaction.  # noqa: E501
        :rtype: int
        """
        return self._created_by_unique_id

    @created_by_unique_id.setter
    def created_by_unique_id(self, created_by_unique_id):
        """Sets the created_by_unique_id of this PairingTransaction.


        :param created_by_unique_id: The created_by_unique_id of this PairingTransaction.  # noqa: E501
        :type: int
        """

        self._created_by_unique_id = created_by_unique_id

    @property
    def pairing_activities(self):
        """Gets the pairing_activities of this PairingTransaction.  # noqa: E501


        :return: The pairing_activities of this PairingTransaction.  # noqa: E501
        :rtype: list[PairingActivity]
        """
        return self._pairing_activities

    @pairing_activities.setter
    def pairing_activities(self, pairing_activities):
        """Sets the pairing_activities of this PairingTransaction.


        :param pairing_activities: The pairing_activities of this PairingTransaction.  # noqa: E501
        :type: list[PairingActivity]
        """

        self._pairing_activities = pairing_activities

    @property
    def crew_on_board(self):
        """Gets the crew_on_board of this PairingTransaction.  # noqa: E501


        :return: The crew_on_board of this PairingTransaction.  # noqa: E501
        :rtype: list[CrewOnBoardInfo]
        """
        return self._crew_on_board

    @crew_on_board.setter
    def crew_on_board(self, crew_on_board):
        """Sets the crew_on_board of this PairingTransaction.


        :param crew_on_board: The crew_on_board of this PairingTransaction.  # noqa: E501
        :type: list[CrewOnBoardInfo]
        """

        self._crew_on_board = crew_on_board

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PairingTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PairingTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
