# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pairing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'name': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'base': 'str',
        'start_base_time_diff': 'int',
        'end_base_time_diff': 'int',
        'complement': 'str',
        'qualification': 'str',
        'pairing_class': 'str',
        'credit': 'int',
        'is_historical': 'bool',
        'pairing_activities': 'list[PairingActivity]',
        'assigned_crews': 'list[AssignedCrew]',
        'complement_descriptions': 'list[ComplementDescription]',
        'comment': 'str'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'name': 'Name',
        'start': 'Start',
        'end': 'End',
        'base': 'Base',
        'start_base_time_diff': 'StartBaseTimeDiff',
        'end_base_time_diff': 'EndBaseTimeDiff',
        'complement': 'Complement',
        'qualification': 'Qualification',
        'pairing_class': 'PairingClass',
        'credit': 'Credit',
        'is_historical': 'IsHistorical',
        'pairing_activities': 'PairingActivities',
        'assigned_crews': 'AssignedCrews',
        'complement_descriptions': 'ComplementDescriptions',
        'comment': 'Comment'
    }

    def __init__(self, unique_id=None, name=None, start=None, end=None, base=None, start_base_time_diff=None, end_base_time_diff=None, complement=None, qualification=None, pairing_class=None, credit=None, is_historical=None, pairing_activities=None, assigned_crews=None, complement_descriptions=None, comment=None):  # noqa: E501
        """Pairing - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._name = None
        self._start = None
        self._end = None
        self._base = None
        self._start_base_time_diff = None
        self._end_base_time_diff = None
        self._complement = None
        self._qualification = None
        self._pairing_class = None
        self._credit = None
        self._is_historical = None
        self._pairing_activities = None
        self._assigned_crews = None
        self._complement_descriptions = None
        self._comment = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if name is not None:
            self.name = name
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if base is not None:
            self.base = base
        if start_base_time_diff is not None:
            self.start_base_time_diff = start_base_time_diff
        if end_base_time_diff is not None:
            self.end_base_time_diff = end_base_time_diff
        if complement is not None:
            self.complement = complement
        if qualification is not None:
            self.qualification = qualification
        if pairing_class is not None:
            self.pairing_class = pairing_class
        if credit is not None:
            self.credit = credit
        if is_historical is not None:
            self.is_historical = is_historical
        if pairing_activities is not None:
            self.pairing_activities = pairing_activities
        if assigned_crews is not None:
            self.assigned_crews = assigned_crews
        if complement_descriptions is not None:
            self.complement_descriptions = complement_descriptions
        if comment is not None:
            self.comment = comment

    @property
    def unique_id(self):
        """Gets the unique_id of this Pairing.  # noqa: E501

        Unique Id of Pairing/RosterBlock  # noqa: E501

        :return: The unique_id of this Pairing.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Pairing.

        Unique Id of Pairing/RosterBlock  # noqa: E501

        :param unique_id: The unique_id of this Pairing.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def name(self):
        """Gets the name of this Pairing.  # noqa: E501

        Pairing or RosterBlock Name  # noqa: E501

        :return: The name of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pairing.

        Pairing or RosterBlock Name  # noqa: E501

        :param name: The name of this Pairing.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start(self):
        """Gets the start of this Pairing.  # noqa: E501


        :return: The start of this Pairing.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Pairing.


        :param start: The start of this Pairing.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Pairing.  # noqa: E501


        :return: The end of this Pairing.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Pairing.


        :param end: The end of this Pairing.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def base(self):
        """Gets the base of this Pairing.  # noqa: E501

        Base ShortCode  # noqa: E501

        :return: The base of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Pairing.

        Base ShortCode  # noqa: E501

        :param base: The base of this Pairing.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def start_base_time_diff(self):
        """Gets the start_base_time_diff of this Pairing.  # noqa: E501


        :return: The start_base_time_diff of this Pairing.  # noqa: E501
        :rtype: int
        """
        return self._start_base_time_diff

    @start_base_time_diff.setter
    def start_base_time_diff(self, start_base_time_diff):
        """Sets the start_base_time_diff of this Pairing.


        :param start_base_time_diff: The start_base_time_diff of this Pairing.  # noqa: E501
        :type: int
        """

        self._start_base_time_diff = start_base_time_diff

    @property
    def end_base_time_diff(self):
        """Gets the end_base_time_diff of this Pairing.  # noqa: E501


        :return: The end_base_time_diff of this Pairing.  # noqa: E501
        :rtype: int
        """
        return self._end_base_time_diff

    @end_base_time_diff.setter
    def end_base_time_diff(self, end_base_time_diff):
        """Sets the end_base_time_diff of this Pairing.


        :param end_base_time_diff: The end_base_time_diff of this Pairing.  # noqa: E501
        :type: int
        """

        self._end_base_time_diff = end_base_time_diff

    @property
    def complement(self):
        """Gets the complement of this Pairing.  # noqa: E501

        Crew Complement ShortCode  # noqa: E501

        :return: The complement of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this Pairing.

        Crew Complement ShortCode  # noqa: E501

        :param complement: The complement of this Pairing.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def qualification(self):
        """Gets the qualification of this Pairing.  # noqa: E501

        Qualification ShortCode  # noqa: E501

        :return: The qualification of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._qualification

    @qualification.setter
    def qualification(self, qualification):
        """Sets the qualification of this Pairing.

        Qualification ShortCode  # noqa: E501

        :param qualification: The qualification of this Pairing.  # noqa: E501
        :type: str
        """

        self._qualification = qualification

    @property
    def pairing_class(self):
        """Gets the pairing_class of this Pairing.  # noqa: E501

        Roster block class name  # noqa: E501

        :return: The pairing_class of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._pairing_class

    @pairing_class.setter
    def pairing_class(self, pairing_class):
        """Sets the pairing_class of this Pairing.

        Roster block class name  # noqa: E501

        :param pairing_class: The pairing_class of this Pairing.  # noqa: E501
        :type: str
        """

        self._pairing_class = pairing_class

    @property
    def credit(self):
        """Gets the credit of this Pairing.  # noqa: E501

        Pairing credit in total minutes  # noqa: E501

        :return: The credit of this Pairing.  # noqa: E501
        :rtype: int
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this Pairing.

        Pairing credit in total minutes  # noqa: E501

        :param credit: The credit of this Pairing.  # noqa: E501
        :type: int
        """

        self._credit = credit

    @property
    def is_historical(self):
        """Gets the is_historical of this Pairing.  # noqa: E501


        :return: The is_historical of this Pairing.  # noqa: E501
        :rtype: bool
        """
        return self._is_historical

    @is_historical.setter
    def is_historical(self, is_historical):
        """Sets the is_historical of this Pairing.


        :param is_historical: The is_historical of this Pairing.  # noqa: E501
        :type: bool
        """

        self._is_historical = is_historical

    @property
    def pairing_activities(self):
        """Gets the pairing_activities of this Pairing.  # noqa: E501


        :return: The pairing_activities of this Pairing.  # noqa: E501
        :rtype: list[PairingActivity]
        """
        return self._pairing_activities

    @pairing_activities.setter
    def pairing_activities(self, pairing_activities):
        """Sets the pairing_activities of this Pairing.


        :param pairing_activities: The pairing_activities of this Pairing.  # noqa: E501
        :type: list[PairingActivity]
        """

        self._pairing_activities = pairing_activities

    @property
    def assigned_crews(self):
        """Gets the assigned_crews of this Pairing.  # noqa: E501


        :return: The assigned_crews of this Pairing.  # noqa: E501
        :rtype: list[AssignedCrew]
        """
        return self._assigned_crews

    @assigned_crews.setter
    def assigned_crews(self, assigned_crews):
        """Sets the assigned_crews of this Pairing.


        :param assigned_crews: The assigned_crews of this Pairing.  # noqa: E501
        :type: list[AssignedCrew]
        """

        self._assigned_crews = assigned_crews

    @property
    def complement_descriptions(self):
        """Gets the complement_descriptions of this Pairing.  # noqa: E501


        :return: The complement_descriptions of this Pairing.  # noqa: E501
        :rtype: list[ComplementDescription]
        """
        return self._complement_descriptions

    @complement_descriptions.setter
    def complement_descriptions(self, complement_descriptions):
        """Sets the complement_descriptions of this Pairing.


        :param complement_descriptions: The complement_descriptions of this Pairing.  # noqa: E501
        :type: list[ComplementDescription]
        """

        self._complement_descriptions = complement_descriptions

    @property
    def comment(self):
        """Gets the comment of this Pairing.  # noqa: E501

        Pairing comment  # noqa: E501

        :return: The comment of this Pairing.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Pairing.

        Pairing comment  # noqa: E501

        :param comment: The comment of this Pairing.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pairing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pairing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
