# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtcEdctOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'modified_by_unique_id': 'int',
        'timestamp': 'datetime',
        'arival_slot': 'str',
        'ctd': 'datetime',
        'cta': 'datetime',
        'edct_type': 'str',
        'extempt': 'bool',
        'cancel': 'bool',
        'slot_hold': 'bool'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'modified_by_unique_id': 'ModifiedByUniqueId',
        'timestamp': 'Timestamp',
        'arival_slot': 'ArivalSlot',
        'ctd': 'CTD',
        'cta': 'CTA',
        'edct_type': 'EDCTType',
        'extempt': 'Extempt',
        'cancel': 'Cancel',
        'slot_hold': 'SlotHold'
    }

    def __init__(self, unique_id=None, modified_by_unique_id=None, timestamp=None, arival_slot=None, ctd=None, cta=None, edct_type=None, extempt=None, cancel=None, slot_hold=None):  # noqa: E501
        """AtcEdctOut - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._modified_by_unique_id = None
        self._timestamp = None
        self._arival_slot = None
        self._ctd = None
        self._cta = None
        self._edct_type = None
        self._extempt = None
        self._cancel = None
        self._slot_hold = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if arival_slot is not None:
            self.arival_slot = arival_slot
        if ctd is not None:
            self.ctd = ctd
        if cta is not None:
            self.cta = cta
        if edct_type is not None:
            self.edct_type = edct_type
        if extempt is not None:
            self.extempt = extempt
        if cancel is not None:
            self.cancel = cancel
        if slot_hold is not None:
            self.slot_hold = slot_hold

    @property
    def unique_id(self):
        """Gets the unique_id of this AtcEdctOut.  # noqa: E501

        Modified By UniqueId  # noqa: E501

        :return: The unique_id of this AtcEdctOut.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this AtcEdctOut.

        Modified By UniqueId  # noqa: E501

        :param unique_id: The unique_id of this AtcEdctOut.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this AtcEdctOut.  # noqa: E501

        Modified By User UniqueId  # noqa: E501

        :return: The modified_by_unique_id of this AtcEdctOut.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this AtcEdctOut.

        Modified By User UniqueId  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this AtcEdctOut.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this AtcEdctOut.  # noqa: E501

        Modified DateTime Stamp  # noqa: E501

        :return: The timestamp of this AtcEdctOut.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AtcEdctOut.

        Modified DateTime Stamp  # noqa: E501

        :param timestamp: The timestamp of this AtcEdctOut.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def arival_slot(self):
        """Gets the arival_slot of this AtcEdctOut.  # noqa: E501


        :return: The arival_slot of this AtcEdctOut.  # noqa: E501
        :rtype: str
        """
        return self._arival_slot

    @arival_slot.setter
    def arival_slot(self, arival_slot):
        """Sets the arival_slot of this AtcEdctOut.


        :param arival_slot: The arival_slot of this AtcEdctOut.  # noqa: E501
        :type: str
        """

        self._arival_slot = arival_slot

    @property
    def ctd(self):
        """Gets the ctd of this AtcEdctOut.  # noqa: E501


        :return: The ctd of this AtcEdctOut.  # noqa: E501
        :rtype: datetime
        """
        return self._ctd

    @ctd.setter
    def ctd(self, ctd):
        """Sets the ctd of this AtcEdctOut.


        :param ctd: The ctd of this AtcEdctOut.  # noqa: E501
        :type: datetime
        """

        self._ctd = ctd

    @property
    def cta(self):
        """Gets the cta of this AtcEdctOut.  # noqa: E501


        :return: The cta of this AtcEdctOut.  # noqa: E501
        :rtype: datetime
        """
        return self._cta

    @cta.setter
    def cta(self, cta):
        """Sets the cta of this AtcEdctOut.


        :param cta: The cta of this AtcEdctOut.  # noqa: E501
        :type: datetime
        """

        self._cta = cta

    @property
    def edct_type(self):
        """Gets the edct_type of this AtcEdctOut.  # noqa: E501


        :return: The edct_type of this AtcEdctOut.  # noqa: E501
        :rtype: str
        """
        return self._edct_type

    @edct_type.setter
    def edct_type(self, edct_type):
        """Sets the edct_type of this AtcEdctOut.


        :param edct_type: The edct_type of this AtcEdctOut.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "AFP", "GS", "GDP", "COMP", "BLKT", "SUB", "FA", "UPD", "CTOP", "RCTL", "UDP", "SCS", "ECR", "ABRG", "UBRG", "ADPT", "SBRG", "GAAP", "DAS", "TFR"]  # noqa: E501
        if edct_type not in allowed_values:
            raise ValueError(
                "Invalid value for `edct_type` ({0}), must be one of {1}"  # noqa: E501
                .format(edct_type, allowed_values)
            )

        self._edct_type = edct_type

    @property
    def extempt(self):
        """Gets the extempt of this AtcEdctOut.  # noqa: E501


        :return: The extempt of this AtcEdctOut.  # noqa: E501
        :rtype: bool
        """
        return self._extempt

    @extempt.setter
    def extempt(self, extempt):
        """Sets the extempt of this AtcEdctOut.


        :param extempt: The extempt of this AtcEdctOut.  # noqa: E501
        :type: bool
        """

        self._extempt = extempt

    @property
    def cancel(self):
        """Gets the cancel of this AtcEdctOut.  # noqa: E501


        :return: The cancel of this AtcEdctOut.  # noqa: E501
        :rtype: bool
        """
        return self._cancel

    @cancel.setter
    def cancel(self, cancel):
        """Sets the cancel of this AtcEdctOut.


        :param cancel: The cancel of this AtcEdctOut.  # noqa: E501
        :type: bool
        """

        self._cancel = cancel

    @property
    def slot_hold(self):
        """Gets the slot_hold of this AtcEdctOut.  # noqa: E501


        :return: The slot_hold of this AtcEdctOut.  # noqa: E501
        :rtype: bool
        """
        return self._slot_hold

    @slot_hold.setter
    def slot_hold(self, slot_hold):
        """Sets the slot_hold of this AtcEdctOut.


        :param slot_hold: The slot_hold of this AtcEdctOut.  # noqa: E501
        :type: bool
        """

        self._slot_hold = slot_hold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtcEdctOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtcEdctOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
