# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DelayOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int',
        'code': 'str',
        'code2': 'str',
        'minutes': 'int',
        'delay_sub_reason_short_code': 'str'
    }

    attribute_map = {
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId',
        'code': 'Code',
        'code2': 'Code2',
        'minutes': 'Minutes',
        'delay_sub_reason_short_code': 'DelaySubReasonShortCode'
    }

    def __init__(self, timestamp=None, modified_by_unique_id=None, code=None, code2=None, minutes=None, delay_sub_reason_short_code=None):  # noqa: E501
        """DelayOut - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._modified_by_unique_id = None
        self._code = None
        self._code2 = None
        self._minutes = None
        self._delay_sub_reason_short_code = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id
        if code is not None:
            self.code = code
        if code2 is not None:
            self.code2 = code2
        if minutes is not None:
            self.minutes = minutes
        if delay_sub_reason_short_code is not None:
            self.delay_sub_reason_short_code = delay_sub_reason_short_code

    @property
    def timestamp(self):
        """Gets the timestamp of this DelayOut.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this DelayOut.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DelayOut.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this DelayOut.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this DelayOut.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this DelayOut.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this DelayOut.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this DelayOut.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    @property
    def code(self):
        """Gets the code of this DelayOut.  # noqa: E501


        :return: The code of this DelayOut.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DelayOut.


        :param code: The code of this DelayOut.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code2(self):
        """Gets the code2 of this DelayOut.  # noqa: E501


        :return: The code2 of this DelayOut.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this DelayOut.


        :param code2: The code2 of this DelayOut.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def minutes(self):
        """Gets the minutes of this DelayOut.  # noqa: E501


        :return: The minutes of this DelayOut.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this DelayOut.


        :param minutes: The minutes of this DelayOut.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def delay_sub_reason_short_code(self):
        """Gets the delay_sub_reason_short_code of this DelayOut.  # noqa: E501


        :return: The delay_sub_reason_short_code of this DelayOut.  # noqa: E501
        :rtype: str
        """
        return self._delay_sub_reason_short_code

    @delay_sub_reason_short_code.setter
    def delay_sub_reason_short_code(self, delay_sub_reason_short_code):
        """Sets the delay_sub_reason_short_code of this DelayOut.


        :param delay_sub_reason_short_code: The delay_sub_reason_short_code of this DelayOut.  # noqa: E501
        :type: str
        """

        self._delay_sub_reason_short_code = delay_sub_reason_short_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DelayOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DelayOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
