# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HotelDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'name': 'str',
        'reservation_comment': 'str',
        'reservation_no': 'str',
        'status': 'str',
        'pickup_from': 'HotelPickup',
        'pickup_to': 'HotelPickup'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'name': 'Name',
        'reservation_comment': 'ReservationComment',
        'reservation_no': 'ReservationNo',
        'status': 'Status',
        'pickup_from': 'PickupFrom',
        'pickup_to': 'PickupTo'
    }

    def __init__(self, unique_id=None, name=None, reservation_comment=None, reservation_no=None, status=None, pickup_from=None, pickup_to=None):  # noqa: E501
        """HotelDetail - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._name = None
        self._reservation_comment = None
        self._reservation_no = None
        self._status = None
        self._pickup_from = None
        self._pickup_to = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if name is not None:
            self.name = name
        if reservation_comment is not None:
            self.reservation_comment = reservation_comment
        if reservation_no is not None:
            self.reservation_no = reservation_no
        if status is not None:
            self.status = status
        if pickup_from is not None:
            self.pickup_from = pickup_from
        if pickup_to is not None:
            self.pickup_to = pickup_to

    @property
    def unique_id(self):
        """Gets the unique_id of this HotelDetail.  # noqa: E501

        HotelId of hotel booking  # noqa: E501

        :return: The unique_id of this HotelDetail.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this HotelDetail.

        HotelId of hotel booking  # noqa: E501

        :param unique_id: The unique_id of this HotelDetail.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def name(self):
        """Gets the name of this HotelDetail.  # noqa: E501

        Hotel name  # noqa: E501

        :return: The name of this HotelDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HotelDetail.

        Hotel name  # noqa: E501

        :param name: The name of this HotelDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reservation_comment(self):
        """Gets the reservation_comment of this HotelDetail.  # noqa: E501

        Hotel booking reservation comment  # noqa: E501

        :return: The reservation_comment of this HotelDetail.  # noqa: E501
        :rtype: str
        """
        return self._reservation_comment

    @reservation_comment.setter
    def reservation_comment(self, reservation_comment):
        """Sets the reservation_comment of this HotelDetail.

        Hotel booking reservation comment  # noqa: E501

        :param reservation_comment: The reservation_comment of this HotelDetail.  # noqa: E501
        :type: str
        """

        self._reservation_comment = reservation_comment

    @property
    def reservation_no(self):
        """Gets the reservation_no of this HotelDetail.  # noqa: E501

        Hotel booking reservation number  # noqa: E501

        :return: The reservation_no of this HotelDetail.  # noqa: E501
        :rtype: str
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no):
        """Sets the reservation_no of this HotelDetail.

        Hotel booking reservation number  # noqa: E501

        :param reservation_no: The reservation_no of this HotelDetail.  # noqa: E501
        :type: str
        """

        self._reservation_no = reservation_no

    @property
    def status(self):
        """Gets the status of this HotelDetail.  # noqa: E501

        Status can be Unactioned, Sent, Rejected, Confirmed, Canceled Unactioned, Canceled Sent, Reused Unactioned, or Modified  # noqa: E501

        :return: The status of this HotelDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HotelDetail.

        Status can be Unactioned, Sent, Rejected, Confirmed, Canceled Unactioned, Canceled Sent, Reused Unactioned, or Modified  # noqa: E501

        :param status: The status of this HotelDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unactioned", "Sent", "Rejected", "Confirmed", "CanceledUnactioned", "CanceledSent", "Reusedunactioned", "Modified"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def pickup_from(self):
        """Gets the pickup_from of this HotelDetail.  # noqa: E501


        :return: The pickup_from of this HotelDetail.  # noqa: E501
        :rtype: HotelPickup
        """
        return self._pickup_from

    @pickup_from.setter
    def pickup_from(self, pickup_from):
        """Sets the pickup_from of this HotelDetail.


        :param pickup_from: The pickup_from of this HotelDetail.  # noqa: E501
        :type: HotelPickup
        """

        self._pickup_from = pickup_from

    @property
    def pickup_to(self):
        """Gets the pickup_to of this HotelDetail.  # noqa: E501


        :return: The pickup_to of this HotelDetail.  # noqa: E501
        :rtype: HotelPickup
        """
        return self._pickup_to

    @pickup_to.setter
    def pickup_to(self, pickup_to):
        """Sets the pickup_to of this HotelDetail.


        :param pickup_to: The pickup_to of this HotelDetail.  # noqa: E501
        :type: HotelPickup
        """

        self._pickup_to = pickup_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
