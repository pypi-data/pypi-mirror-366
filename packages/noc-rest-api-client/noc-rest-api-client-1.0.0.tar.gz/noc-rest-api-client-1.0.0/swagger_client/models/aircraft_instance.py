# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AircraftInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aircraft_name': 'str',
        'fuel_consumption': 'float',
        'max_take_off_weight': 'float',
        'availabilities': 'list[str]',
        'availability': 'str',
        'current_base': 'str',
        'historical_bases': 'list[str]',
        'aircraft_version': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'aircraft_name': 'AircraftName',
        'fuel_consumption': 'FuelConsumption',
        'max_take_off_weight': 'MaxTakeOffWeight',
        'availabilities': 'Availabilities',
        'availability': 'Availability',
        'current_base': 'CurrentBase',
        'historical_bases': 'HistoricalBases',
        'aircraft_version': 'AircraftVersion',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, aircraft_name=None, fuel_consumption=None, max_take_off_weight=None, availabilities=None, availability=None, current_base=None, historical_bases=None, aircraft_version=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """AircraftInstance - a model defined in Swagger"""  # noqa: E501
        self._aircraft_name = None
        self._fuel_consumption = None
        self._max_take_off_weight = None
        self._availabilities = None
        self._availability = None
        self._current_base = None
        self._historical_bases = None
        self._aircraft_version = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if aircraft_name is not None:
            self.aircraft_name = aircraft_name
        if fuel_consumption is not None:
            self.fuel_consumption = fuel_consumption
        if max_take_off_weight is not None:
            self.max_take_off_weight = max_take_off_weight
        if availabilities is not None:
            self.availabilities = availabilities
        if availability is not None:
            self.availability = availability
        if current_base is not None:
            self.current_base = current_base
        if historical_bases is not None:
            self.historical_bases = historical_bases
        if aircraft_version is not None:
            self.aircraft_version = aircraft_version
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def aircraft_name(self):
        """Gets the aircraft_name of this AircraftInstance.  # noqa: E501


        :return: The aircraft_name of this AircraftInstance.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_name

    @aircraft_name.setter
    def aircraft_name(self, aircraft_name):
        """Sets the aircraft_name of this AircraftInstance.


        :param aircraft_name: The aircraft_name of this AircraftInstance.  # noqa: E501
        :type: str
        """

        self._aircraft_name = aircraft_name

    @property
    def fuel_consumption(self):
        """Gets the fuel_consumption of this AircraftInstance.  # noqa: E501


        :return: The fuel_consumption of this AircraftInstance.  # noqa: E501
        :rtype: float
        """
        return self._fuel_consumption

    @fuel_consumption.setter
    def fuel_consumption(self, fuel_consumption):
        """Sets the fuel_consumption of this AircraftInstance.


        :param fuel_consumption: The fuel_consumption of this AircraftInstance.  # noqa: E501
        :type: float
        """

        self._fuel_consumption = fuel_consumption

    @property
    def max_take_off_weight(self):
        """Gets the max_take_off_weight of this AircraftInstance.  # noqa: E501


        :return: The max_take_off_weight of this AircraftInstance.  # noqa: E501
        :rtype: float
        """
        return self._max_take_off_weight

    @max_take_off_weight.setter
    def max_take_off_weight(self, max_take_off_weight):
        """Sets the max_take_off_weight of this AircraftInstance.


        :param max_take_off_weight: The max_take_off_weight of this AircraftInstance.  # noqa: E501
        :type: float
        """

        self._max_take_off_weight = max_take_off_weight

    @property
    def availabilities(self):
        """Gets the availabilities of this AircraftInstance.  # noqa: E501


        :return: The availabilities of this AircraftInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this AircraftInstance.


        :param availabilities: The availabilities of this AircraftInstance.  # noqa: E501
        :type: list[str]
        """

        self._availabilities = availabilities

    @property
    def availability(self):
        """Gets the availability of this AircraftInstance.  # noqa: E501


        :return: The availability of this AircraftInstance.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AircraftInstance.


        :param availability: The availability of this AircraftInstance.  # noqa: E501
        :type: str
        """

        self._availability = availability

    @property
    def current_base(self):
        """Gets the current_base of this AircraftInstance.  # noqa: E501


        :return: The current_base of this AircraftInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_base

    @current_base.setter
    def current_base(self, current_base):
        """Sets the current_base of this AircraftInstance.


        :param current_base: The current_base of this AircraftInstance.  # noqa: E501
        :type: str
        """

        self._current_base = current_base

    @property
    def historical_bases(self):
        """Gets the historical_bases of this AircraftInstance.  # noqa: E501


        :return: The historical_bases of this AircraftInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._historical_bases

    @historical_bases.setter
    def historical_bases(self, historical_bases):
        """Sets the historical_bases of this AircraftInstance.


        :param historical_bases: The historical_bases of this AircraftInstance.  # noqa: E501
        :type: list[str]
        """

        self._historical_bases = historical_bases

    @property
    def aircraft_version(self):
        """Gets the aircraft_version of this AircraftInstance.  # noqa: E501


        :return: The aircraft_version of this AircraftInstance.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_version

    @aircraft_version.setter
    def aircraft_version(self, aircraft_version):
        """Sets the aircraft_version of this AircraftInstance.


        :param aircraft_version: The aircraft_version of this AircraftInstance.  # noqa: E501
        :type: str
        """

        self._aircraft_version = aircraft_version

    @property
    def timestamp(self):
        """Gets the timestamp of this AircraftInstance.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this AircraftInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AircraftInstance.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this AircraftInstance.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this AircraftInstance.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this AircraftInstance.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this AircraftInstance.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this AircraftInstance.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AircraftInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AircraftInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
