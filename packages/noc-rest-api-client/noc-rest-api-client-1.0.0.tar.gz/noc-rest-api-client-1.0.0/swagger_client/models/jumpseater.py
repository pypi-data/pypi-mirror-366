# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Jumpseater(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'middle_names': 'str',
        'last_name': 'str',
        'date_of_birth': 'datetime',
        'place_of_birth': 'str',
        'country_of_birth': 'str',
        'nationality': 'str',
        'state_of_birth': 'str',
        'sex': 'str',
        'street': 'str',
        'zipcode': 'str',
        'city_name': 'str',
        'state': 'str',
        'address_country': 'str',
        'document_number': 'str',
        'document_issue_country': 'str',
        'expiry_date': 'datetime',
        'license_number': 'str',
        'license_issue_country': 'str',
        'license_expiry_date': 'datetime',
        'crew_status': 'str',
        'apis': 'str',
        'active': 'bool',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'first_name': 'FirstName',
        'middle_names': 'MiddleNames',
        'last_name': 'LastName',
        'date_of_birth': 'DateOfBirth',
        'place_of_birth': 'PlaceOfBirth',
        'country_of_birth': 'CountryOfBirth',
        'nationality': 'Nationality',
        'state_of_birth': 'StateOfBirth',
        'sex': 'Sex',
        'street': 'Street',
        'zipcode': 'Zipcode',
        'city_name': 'CityName',
        'state': 'State',
        'address_country': 'AddressCountry',
        'document_number': 'DocumentNumber',
        'document_issue_country': 'DocumentIssueCountry',
        'expiry_date': 'ExpiryDate',
        'license_number': 'LicenseNumber',
        'license_issue_country': 'LicenseIssueCountry',
        'license_expiry_date': 'LicenseExpiryDate',
        'crew_status': 'CrewStatus',
        'apis': 'Apis',
        'active': 'Active',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, first_name=None, middle_names=None, last_name=None, date_of_birth=None, place_of_birth=None, country_of_birth=None, nationality=None, state_of_birth=None, sex=None, street=None, zipcode=None, city_name=None, state=None, address_country=None, document_number=None, document_issue_country=None, expiry_date=None, license_number=None, license_issue_country=None, license_expiry_date=None, crew_status=None, apis=None, active=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """Jumpseater - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._middle_names = None
        self._last_name = None
        self._date_of_birth = None
        self._place_of_birth = None
        self._country_of_birth = None
        self._nationality = None
        self._state_of_birth = None
        self._sex = None
        self._street = None
        self._zipcode = None
        self._city_name = None
        self._state = None
        self._address_country = None
        self._document_number = None
        self._document_issue_country = None
        self._expiry_date = None
        self._license_number = None
        self._license_issue_country = None
        self._license_expiry_date = None
        self._crew_status = None
        self._apis = None
        self._active = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if middle_names is not None:
            self.middle_names = middle_names
        if last_name is not None:
            self.last_name = last_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        if nationality is not None:
            self.nationality = nationality
        if state_of_birth is not None:
            self.state_of_birth = state_of_birth
        if sex is not None:
            self.sex = sex
        if street is not None:
            self.street = street
        if zipcode is not None:
            self.zipcode = zipcode
        if city_name is not None:
            self.city_name = city_name
        if state is not None:
            self.state = state
        if address_country is not None:
            self.address_country = address_country
        if document_number is not None:
            self.document_number = document_number
        if document_issue_country is not None:
            self.document_issue_country = document_issue_country
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if license_number is not None:
            self.license_number = license_number
        if license_issue_country is not None:
            self.license_issue_country = license_issue_country
        if license_expiry_date is not None:
            self.license_expiry_date = license_expiry_date
        if crew_status is not None:
            self.crew_status = crew_status
        if apis is not None:
            self.apis = apis
        if active is not None:
            self.active = active
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def first_name(self):
        """Gets the first_name of this Jumpseater.  # noqa: E501


        :return: The first_name of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Jumpseater.


        :param first_name: The first_name of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_names(self):
        """Gets the middle_names of this Jumpseater.  # noqa: E501


        :return: The middle_names of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._middle_names

    @middle_names.setter
    def middle_names(self, middle_names):
        """Sets the middle_names of this Jumpseater.


        :param middle_names: The middle_names of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._middle_names = middle_names

    @property
    def last_name(self):
        """Gets the last_name of this Jumpseater.  # noqa: E501


        :return: The last_name of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Jumpseater.


        :param last_name: The last_name of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Jumpseater.  # noqa: E501


        :return: The date_of_birth of this Jumpseater.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Jumpseater.


        :param date_of_birth: The date_of_birth of this Jumpseater.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this Jumpseater.  # noqa: E501


        :return: The place_of_birth of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this Jumpseater.


        :param place_of_birth: The place_of_birth of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this Jumpseater.  # noqa: E501


        :return: The country_of_birth of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this Jumpseater.


        :param country_of_birth: The country_of_birth of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this Jumpseater.  # noqa: E501


        :return: The nationality of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Jumpseater.


        :param nationality: The nationality of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def state_of_birth(self):
        """Gets the state_of_birth of this Jumpseater.  # noqa: E501


        :return: The state_of_birth of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._state_of_birth

    @state_of_birth.setter
    def state_of_birth(self, state_of_birth):
        """Sets the state_of_birth of this Jumpseater.


        :param state_of_birth: The state_of_birth of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._state_of_birth = state_of_birth

    @property
    def sex(self):
        """Gets the sex of this Jumpseater.  # noqa: E501


        :return: The sex of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Jumpseater.


        :param sex: The sex of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def street(self):
        """Gets the street of this Jumpseater.  # noqa: E501


        :return: The street of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Jumpseater.


        :param street: The street of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zipcode(self):
        """Gets the zipcode of this Jumpseater.  # noqa: E501


        :return: The zipcode of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Jumpseater.


        :param zipcode: The zipcode of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._zipcode = zipcode

    @property
    def city_name(self):
        """Gets the city_name of this Jumpseater.  # noqa: E501


        :return: The city_name of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this Jumpseater.


        :param city_name: The city_name of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._city_name = city_name

    @property
    def state(self):
        """Gets the state of this Jumpseater.  # noqa: E501


        :return: The state of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Jumpseater.


        :param state: The state of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def address_country(self):
        """Gets the address_country of this Jumpseater.  # noqa: E501


        :return: The address_country of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this Jumpseater.


        :param address_country: The address_country of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._address_country = address_country

    @property
    def document_number(self):
        """Gets the document_number of this Jumpseater.  # noqa: E501


        :return: The document_number of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Jumpseater.


        :param document_number: The document_number of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def document_issue_country(self):
        """Gets the document_issue_country of this Jumpseater.  # noqa: E501


        :return: The document_issue_country of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._document_issue_country

    @document_issue_country.setter
    def document_issue_country(self, document_issue_country):
        """Sets the document_issue_country of this Jumpseater.


        :param document_issue_country: The document_issue_country of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._document_issue_country = document_issue_country

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Jumpseater.  # noqa: E501


        :return: The expiry_date of this Jumpseater.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Jumpseater.


        :param expiry_date: The expiry_date of this Jumpseater.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def license_number(self):
        """Gets the license_number of this Jumpseater.  # noqa: E501


        :return: The license_number of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number):
        """Sets the license_number of this Jumpseater.


        :param license_number: The license_number of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._license_number = license_number

    @property
    def license_issue_country(self):
        """Gets the license_issue_country of this Jumpseater.  # noqa: E501


        :return: The license_issue_country of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._license_issue_country

    @license_issue_country.setter
    def license_issue_country(self, license_issue_country):
        """Sets the license_issue_country of this Jumpseater.


        :param license_issue_country: The license_issue_country of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._license_issue_country = license_issue_country

    @property
    def license_expiry_date(self):
        """Gets the license_expiry_date of this Jumpseater.  # noqa: E501


        :return: The license_expiry_date of this Jumpseater.  # noqa: E501
        :rtype: datetime
        """
        return self._license_expiry_date

    @license_expiry_date.setter
    def license_expiry_date(self, license_expiry_date):
        """Sets the license_expiry_date of this Jumpseater.


        :param license_expiry_date: The license_expiry_date of this Jumpseater.  # noqa: E501
        :type: datetime
        """

        self._license_expiry_date = license_expiry_date

    @property
    def crew_status(self):
        """Gets the crew_status of this Jumpseater.  # noqa: E501


        :return: The crew_status of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._crew_status

    @crew_status.setter
    def crew_status(self, crew_status):
        """Sets the crew_status of this Jumpseater.


        :param crew_status: The crew_status of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._crew_status = crew_status

    @property
    def apis(self):
        """Gets the apis of this Jumpseater.  # noqa: E501


        :return: The apis of this Jumpseater.  # noqa: E501
        :rtype: str
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """Sets the apis of this Jumpseater.


        :param apis: The apis of this Jumpseater.  # noqa: E501
        :type: str
        """

        self._apis = apis

    @property
    def active(self):
        """Gets the active of this Jumpseater.  # noqa: E501


        :return: The active of this Jumpseater.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Jumpseater.


        :param active: The active of this Jumpseater.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def timestamp(self):
        """Gets the timestamp of this Jumpseater.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this Jumpseater.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Jumpseater.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this Jumpseater.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this Jumpseater.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this Jumpseater.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this Jumpseater.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this Jumpseater.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Jumpseater, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Jumpseater):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
