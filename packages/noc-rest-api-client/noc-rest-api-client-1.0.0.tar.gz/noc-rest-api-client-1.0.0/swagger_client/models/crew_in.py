# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrewIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employee_number': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'nick_name': 'str',
        'social_security_number': 'str',
        'short_code1': 'str',
        'short_code2': 'str',
        'birth_date': 'datetime',
        'gender': 'str',
        'type': 'str',
        'active': 'bool',
        'groups': 'str',
        'seniority': 'int',
        'bases': 'list[Base]',
        'qual_rank_data': 'list[QualRank]',
        'phones': 'list[Phone]',
        'addresses': 'list[Address]',
        'emails': 'list[Email]',
        'documents': 'list[Document]',
        'contracts_data': 'ContractsData',
        'special_roles': 'list[SpecialRole]',
        'system_user': 'str'
    }

    attribute_map = {
        'employee_number': 'EmployeeNumber',
        'first_name': 'FirstName',
        'middle_name': 'MiddleName',
        'last_name': 'LastName',
        'nick_name': 'NickName',
        'social_security_number': 'SocialSecurityNumber',
        'short_code1': 'ShortCode1',
        'short_code2': 'ShortCode2',
        'birth_date': 'BirthDate',
        'gender': 'Gender',
        'type': 'Type',
        'active': 'Active',
        'groups': 'Groups',
        'seniority': 'Seniority',
        'bases': 'Bases',
        'qual_rank_data': 'QualRankData',
        'phones': 'Phones',
        'addresses': 'Addresses',
        'emails': 'Emails',
        'documents': 'Documents',
        'contracts_data': 'ContractsData',
        'special_roles': 'SpecialRoles',
        'system_user': 'SystemUser'
    }

    def __init__(self, employee_number=None, first_name=None, middle_name=None, last_name=None, nick_name=None, social_security_number=None, short_code1=None, short_code2=None, birth_date=None, gender=None, type=None, active=None, groups=None, seniority=None, bases=None, qual_rank_data=None, phones=None, addresses=None, emails=None, documents=None, contracts_data=None, special_roles=None, system_user=None):  # noqa: E501
        """CrewIn - a model defined in Swagger"""  # noqa: E501
        self._employee_number = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._nick_name = None
        self._social_security_number = None
        self._short_code1 = None
        self._short_code2 = None
        self._birth_date = None
        self._gender = None
        self._type = None
        self._active = None
        self._groups = None
        self._seniority = None
        self._bases = None
        self._qual_rank_data = None
        self._phones = None
        self._addresses = None
        self._emails = None
        self._documents = None
        self._contracts_data = None
        self._special_roles = None
        self._system_user = None
        self.discriminator = None
        if employee_number is not None:
            self.employee_number = employee_number
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if nick_name is not None:
            self.nick_name = nick_name
        if social_security_number is not None:
            self.social_security_number = social_security_number
        if short_code1 is not None:
            self.short_code1 = short_code1
        if short_code2 is not None:
            self.short_code2 = short_code2
        if birth_date is not None:
            self.birth_date = birth_date
        if gender is not None:
            self.gender = gender
        if type is not None:
            self.type = type
        if active is not None:
            self.active = active
        if groups is not None:
            self.groups = groups
        if seniority is not None:
            self.seniority = seniority
        if bases is not None:
            self.bases = bases
        if qual_rank_data is not None:
            self.qual_rank_data = qual_rank_data
        if phones is not None:
            self.phones = phones
        if addresses is not None:
            self.addresses = addresses
        if emails is not None:
            self.emails = emails
        if documents is not None:
            self.documents = documents
        if contracts_data is not None:
            self.contracts_data = contracts_data
        if special_roles is not None:
            self.special_roles = special_roles
        if system_user is not None:
            self.system_user = system_user

    @property
    def employee_number(self):
        """Gets the employee_number of this CrewIn.  # noqa: E501

        Employee Number of the crew  # noqa: E501

        :return: The employee_number of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this CrewIn.

        Employee Number of the crew  # noqa: E501

        :param employee_number: The employee_number of this CrewIn.  # noqa: E501
        :type: str
        """

        self._employee_number = employee_number

    @property
    def first_name(self):
        """Gets the first_name of this CrewIn.  # noqa: E501


        :return: The first_name of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CrewIn.


        :param first_name: The first_name of this CrewIn.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this CrewIn.  # noqa: E501


        :return: The middle_name of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CrewIn.


        :param middle_name: The middle_name of this CrewIn.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this CrewIn.  # noqa: E501


        :return: The last_name of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CrewIn.


        :param last_name: The last_name of this CrewIn.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def nick_name(self):
        """Gets the nick_name of this CrewIn.  # noqa: E501


        :return: The nick_name of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this CrewIn.


        :param nick_name: The nick_name of this CrewIn.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def social_security_number(self):
        """Gets the social_security_number of this CrewIn.  # noqa: E501


        :return: The social_security_number of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this CrewIn.


        :param social_security_number: The social_security_number of this CrewIn.  # noqa: E501
        :type: str
        """

        self._social_security_number = social_security_number

    @property
    def short_code1(self):
        """Gets the short_code1 of this CrewIn.  # noqa: E501

        Human resource ShortCode1  # noqa: E501

        :return: The short_code1 of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._short_code1

    @short_code1.setter
    def short_code1(self, short_code1):
        """Sets the short_code1 of this CrewIn.

        Human resource ShortCode1  # noqa: E501

        :param short_code1: The short_code1 of this CrewIn.  # noqa: E501
        :type: str
        """

        self._short_code1 = short_code1

    @property
    def short_code2(self):
        """Gets the short_code2 of this CrewIn.  # noqa: E501

        Human resource ShortCode2  # noqa: E501

        :return: The short_code2 of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._short_code2

    @short_code2.setter
    def short_code2(self, short_code2):
        """Sets the short_code2 of this CrewIn.

        Human resource ShortCode2  # noqa: E501

        :param short_code2: The short_code2 of this CrewIn.  # noqa: E501
        :type: str
        """

        self._short_code2 = short_code2

    @property
    def birth_date(self):
        """Gets the birth_date of this CrewIn.  # noqa: E501


        :return: The birth_date of this CrewIn.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this CrewIn.


        :param birth_date: The birth_date of this CrewIn.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def gender(self):
        """Gets the gender of this CrewIn.  # noqa: E501

        Human resource gender can be either Male or Female  # noqa: E501

        :return: The gender of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CrewIn.

        Human resource gender can be either Male or Female  # noqa: E501

        :param gender: The gender of this CrewIn.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def type(self):
        """Gets the type of this CrewIn.  # noqa: E501

        Human resource type ShortCode  # noqa: E501

        :return: The type of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CrewIn.

        Human resource type ShortCode  # noqa: E501

        :param type: The type of this CrewIn.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def active(self):
        """Gets the active of this CrewIn.  # noqa: E501


        :return: The active of this CrewIn.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CrewIn.


        :param active: The active of this CrewIn.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def groups(self):
        """Gets the groups of this CrewIn.  # noqa: E501

        User group information of the Human resource  # noqa: E501

        :return: The groups of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CrewIn.

        User group information of the Human resource  # noqa: E501

        :param groups: The groups of this CrewIn.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def seniority(self):
        """Gets the seniority of this CrewIn.  # noqa: E501


        :return: The seniority of this CrewIn.  # noqa: E501
        :rtype: int
        """
        return self._seniority

    @seniority.setter
    def seniority(self, seniority):
        """Sets the seniority of this CrewIn.


        :param seniority: The seniority of this CrewIn.  # noqa: E501
        :type: int
        """

        self._seniority = seniority

    @property
    def bases(self):
        """Gets the bases of this CrewIn.  # noqa: E501


        :return: The bases of this CrewIn.  # noqa: E501
        :rtype: list[Base]
        """
        return self._bases

    @bases.setter
    def bases(self, bases):
        """Sets the bases of this CrewIn.


        :param bases: The bases of this CrewIn.  # noqa: E501
        :type: list[Base]
        """

        self._bases = bases

    @property
    def qual_rank_data(self):
        """Gets the qual_rank_data of this CrewIn.  # noqa: E501


        :return: The qual_rank_data of this CrewIn.  # noqa: E501
        :rtype: list[QualRank]
        """
        return self._qual_rank_data

    @qual_rank_data.setter
    def qual_rank_data(self, qual_rank_data):
        """Sets the qual_rank_data of this CrewIn.


        :param qual_rank_data: The qual_rank_data of this CrewIn.  # noqa: E501
        :type: list[QualRank]
        """

        self._qual_rank_data = qual_rank_data

    @property
    def phones(self):
        """Gets the phones of this CrewIn.  # noqa: E501


        :return: The phones of this CrewIn.  # noqa: E501
        :rtype: list[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this CrewIn.


        :param phones: The phones of this CrewIn.  # noqa: E501
        :type: list[Phone]
        """

        self._phones = phones

    @property
    def addresses(self):
        """Gets the addresses of this CrewIn.  # noqa: E501


        :return: The addresses of this CrewIn.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CrewIn.


        :param addresses: The addresses of this CrewIn.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def emails(self):
        """Gets the emails of this CrewIn.  # noqa: E501


        :return: The emails of this CrewIn.  # noqa: E501
        :rtype: list[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CrewIn.


        :param emails: The emails of this CrewIn.  # noqa: E501
        :type: list[Email]
        """

        self._emails = emails

    @property
    def documents(self):
        """Gets the documents of this CrewIn.  # noqa: E501


        :return: The documents of this CrewIn.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this CrewIn.


        :param documents: The documents of this CrewIn.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def contracts_data(self):
        """Gets the contracts_data of this CrewIn.  # noqa: E501


        :return: The contracts_data of this CrewIn.  # noqa: E501
        :rtype: ContractsData
        """
        return self._contracts_data

    @contracts_data.setter
    def contracts_data(self, contracts_data):
        """Sets the contracts_data of this CrewIn.


        :param contracts_data: The contracts_data of this CrewIn.  # noqa: E501
        :type: ContractsData
        """

        self._contracts_data = contracts_data

    @property
    def special_roles(self):
        """Gets the special_roles of this CrewIn.  # noqa: E501


        :return: The special_roles of this CrewIn.  # noqa: E501
        :rtype: list[SpecialRole]
        """
        return self._special_roles

    @special_roles.setter
    def special_roles(self, special_roles):
        """Sets the special_roles of this CrewIn.


        :param special_roles: The special_roles of this CrewIn.  # noqa: E501
        :type: list[SpecialRole]
        """

        self._special_roles = special_roles

    @property
    def system_user(self):
        """Gets the system_user of this CrewIn.  # noqa: E501


        :return: The system_user of this CrewIn.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this CrewIn.


        :param system_user: The system_user of this CrewIn.  # noqa: E501
        :type: str
        """

        self._system_user = system_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrewIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrewIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
