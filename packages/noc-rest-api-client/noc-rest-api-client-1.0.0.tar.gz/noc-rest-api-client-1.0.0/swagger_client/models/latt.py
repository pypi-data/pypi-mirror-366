# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Latt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latt': 'datetime',
        'reason': 'str',
        'edct': 'datetime',
        'crew': 'str',
        'eet': 'int'
    }

    attribute_map = {
        'latt': 'LATT',
        'reason': 'Reason',
        'edct': 'EDCT',
        'crew': 'Crew',
        'eet': 'EET'
    }

    def __init__(self, latt=None, reason=None, edct=None, crew=None, eet=None):  # noqa: E501
        """Latt - a model defined in Swagger"""  # noqa: E501
        self._latt = None
        self._reason = None
        self._edct = None
        self._crew = None
        self._eet = None
        self.discriminator = None
        if latt is not None:
            self.latt = latt
        if reason is not None:
            self.reason = reason
        if edct is not None:
            self.edct = edct
        if crew is not None:
            self.crew = crew
        if eet is not None:
            self.eet = eet

    @property
    def latt(self):
        """Gets the latt of this Latt.  # noqa: E501


        :return: The latt of this Latt.  # noqa: E501
        :rtype: datetime
        """
        return self._latt

    @latt.setter
    def latt(self, latt):
        """Sets the latt of this Latt.


        :param latt: The latt of this Latt.  # noqa: E501
        :type: datetime
        """

        self._latt = latt

    @property
    def reason(self):
        """Gets the reason of this Latt.  # noqa: E501

        CompanyActivity's Worstlatt reason  # noqa: E501

        :return: The reason of this Latt.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Latt.

        CompanyActivity's Worstlatt reason  # noqa: E501

        :param reason: The reason of this Latt.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def edct(self):
        """Gets the edct of this Latt.  # noqa: E501


        :return: The edct of this Latt.  # noqa: E501
        :rtype: datetime
        """
        return self._edct

    @edct.setter
    def edct(self, edct):
        """Sets the edct of this Latt.


        :param edct: The edct of this Latt.  # noqa: E501
        :type: datetime
        """

        self._edct = edct

    @property
    def crew(self):
        """Gets the crew of this Latt.  # noqa: E501

        Crew Employee Number and FullName  # noqa: E501

        :return: The crew of this Latt.  # noqa: E501
        :rtype: str
        """
        return self._crew

    @crew.setter
    def crew(self, crew):
        """Sets the crew of this Latt.

        Crew Employee Number and FullName  # noqa: E501

        :param crew: The crew of this Latt.  # noqa: E501
        :type: str
        """

        self._crew = crew

    @property
    def eet(self):
        """Gets the eet of this Latt.  # noqa: E501


        :return: The eet of this Latt.  # noqa: E501
        :rtype: int
        """
        return self._eet

    @eet.setter
    def eet(self, eet):
        """Sets the eet of this Latt.


        :param eet: The eet of this Latt.  # noqa: E501
        :type: int
        """

        self._eet = eet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Latt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Latt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
