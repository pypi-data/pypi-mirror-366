# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AircraftIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vehicle_registration': 'str',
        'minimum_equipment_list': 'list[MinimumEquipment]',
        'aircraft_notes': 'list[VehicleNoteDto]'
    }

    attribute_map = {
        'vehicle_registration': 'VehicleRegistration',
        'minimum_equipment_list': 'MinimumEquipmentList',
        'aircraft_notes': 'AircraftNotes'
    }

    def __init__(self, vehicle_registration=None, minimum_equipment_list=None, aircraft_notes=None):  # noqa: E501
        """AircraftIn - a model defined in Swagger"""  # noqa: E501
        self._vehicle_registration = None
        self._minimum_equipment_list = None
        self._aircraft_notes = None
        self.discriminator = None
        if vehicle_registration is not None:
            self.vehicle_registration = vehicle_registration
        if minimum_equipment_list is not None:
            self.minimum_equipment_list = minimum_equipment_list
        if aircraft_notes is not None:
            self.aircraft_notes = aircraft_notes

    @property
    def vehicle_registration(self):
        """Gets the vehicle_registration of this AircraftIn.  # noqa: E501


        :return: The vehicle_registration of this AircraftIn.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_registration

    @vehicle_registration.setter
    def vehicle_registration(self, vehicle_registration):
        """Sets the vehicle_registration of this AircraftIn.


        :param vehicle_registration: The vehicle_registration of this AircraftIn.  # noqa: E501
        :type: str
        """

        self._vehicle_registration = vehicle_registration

    @property
    def minimum_equipment_list(self):
        """Gets the minimum_equipment_list of this AircraftIn.  # noqa: E501


        :return: The minimum_equipment_list of this AircraftIn.  # noqa: E501
        :rtype: list[MinimumEquipment]
        """
        return self._minimum_equipment_list

    @minimum_equipment_list.setter
    def minimum_equipment_list(self, minimum_equipment_list):
        """Sets the minimum_equipment_list of this AircraftIn.


        :param minimum_equipment_list: The minimum_equipment_list of this AircraftIn.  # noqa: E501
        :type: list[MinimumEquipment]
        """

        self._minimum_equipment_list = minimum_equipment_list

    @property
    def aircraft_notes(self):
        """Gets the aircraft_notes of this AircraftIn.  # noqa: E501


        :return: The aircraft_notes of this AircraftIn.  # noqa: E501
        :rtype: list[VehicleNoteDto]
        """
        return self._aircraft_notes

    @aircraft_notes.setter
    def aircraft_notes(self, aircraft_notes):
        """Sets the aircraft_notes of this AircraftIn.


        :param aircraft_notes: The aircraft_notes of this AircraftIn.  # noqa: E501
        :type: list[VehicleNoteDto]
        """

        self._aircraft_notes = aircraft_notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AircraftIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AircraftIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
