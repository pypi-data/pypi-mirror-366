# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestFlightData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flight_number': 'str',
        'callsign': 'str',
        'flight_date': 'datetime',
        'unique_id': 'int',
        'departure_airport': 'str',
        'arrival_airport': 'str',
        'times': 'list[Time]',
        'delays': 'Delays',
        'loads': 'Loads',
        'notes': 'list[Note]',
        'fuels': 'list[Fuel]',
        'project_codes': 'list[ProjectCode]',
        'leg_legal_exception': 'list[LegLegalException]',
        'voyage_report': 'VoyageReport',
        'flightplan': 'Flightplan',
        'airports': 'Airports',
        'desk': 'str'
    }

    attribute_map = {
        'flight_number': 'FlightNumber',
        'callsign': 'Callsign',
        'flight_date': 'FlightDate',
        'unique_id': 'UniqueId',
        'departure_airport': 'DepartureAirport',
        'arrival_airport': 'ArrivalAirport',
        'times': 'Times',
        'delays': 'Delays',
        'loads': 'Loads',
        'notes': 'Notes',
        'fuels': 'Fuels',
        'project_codes': 'ProjectCodes',
        'leg_legal_exception': 'LegLegalException',
        'voyage_report': 'VoyageReport',
        'flightplan': 'Flightplan',
        'airports': 'Airports',
        'desk': 'Desk'
    }

    def __init__(self, flight_number=None, callsign=None, flight_date=None, unique_id=None, departure_airport=None, arrival_airport=None, times=None, delays=None, loads=None, notes=None, fuels=None, project_codes=None, leg_legal_exception=None, voyage_report=None, flightplan=None, airports=None, desk=None):  # noqa: E501
        """RestFlightData - a model defined in Swagger"""  # noqa: E501
        self._flight_number = None
        self._callsign = None
        self._flight_date = None
        self._unique_id = None
        self._departure_airport = None
        self._arrival_airport = None
        self._times = None
        self._delays = None
        self._loads = None
        self._notes = None
        self._fuels = None
        self._project_codes = None
        self._leg_legal_exception = None
        self._voyage_report = None
        self._flightplan = None
        self._airports = None
        self._desk = None
        self.discriminator = None
        if flight_number is not None:
            self.flight_number = flight_number
        if callsign is not None:
            self.callsign = callsign
        if flight_date is not None:
            self.flight_date = flight_date
        if unique_id is not None:
            self.unique_id = unique_id
        if departure_airport is not None:
            self.departure_airport = departure_airport
        if arrival_airport is not None:
            self.arrival_airport = arrival_airport
        if times is not None:
            self.times = times
        if delays is not None:
            self.delays = delays
        if loads is not None:
            self.loads = loads
        if notes is not None:
            self.notes = notes
        if fuels is not None:
            self.fuels = fuels
        if project_codes is not None:
            self.project_codes = project_codes
        if leg_legal_exception is not None:
            self.leg_legal_exception = leg_legal_exception
        if voyage_report is not None:
            self.voyage_report = voyage_report
        if flightplan is not None:
            self.flightplan = flightplan
        if airports is not None:
            self.airports = airports
        if desk is not None:
            self.desk = desk

    @property
    def flight_number(self):
        """Gets the flight_number of this RestFlightData.  # noqa: E501


        :return: The flight_number of this RestFlightData.  # noqa: E501
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this RestFlightData.


        :param flight_number: The flight_number of this RestFlightData.  # noqa: E501
        :type: str
        """

        self._flight_number = flight_number

    @property
    def callsign(self):
        """Gets the callsign of this RestFlightData.  # noqa: E501


        :return: The callsign of this RestFlightData.  # noqa: E501
        :rtype: str
        """
        return self._callsign

    @callsign.setter
    def callsign(self, callsign):
        """Sets the callsign of this RestFlightData.


        :param callsign: The callsign of this RestFlightData.  # noqa: E501
        :type: str
        """

        self._callsign = callsign

    @property
    def flight_date(self):
        """Gets the flight_date of this RestFlightData.  # noqa: E501


        :return: The flight_date of this RestFlightData.  # noqa: E501
        :rtype: datetime
        """
        return self._flight_date

    @flight_date.setter
    def flight_date(self, flight_date):
        """Sets the flight_date of this RestFlightData.


        :param flight_date: The flight_date of this RestFlightData.  # noqa: E501
        :type: datetime
        """

        self._flight_date = flight_date

    @property
    def unique_id(self):
        """Gets the unique_id of this RestFlightData.  # noqa: E501


        :return: The unique_id of this RestFlightData.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this RestFlightData.


        :param unique_id: The unique_id of this RestFlightData.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def departure_airport(self):
        """Gets the departure_airport of this RestFlightData.  # noqa: E501


        :return: The departure_airport of this RestFlightData.  # noqa: E501
        :rtype: str
        """
        return self._departure_airport

    @departure_airport.setter
    def departure_airport(self, departure_airport):
        """Sets the departure_airport of this RestFlightData.


        :param departure_airport: The departure_airport of this RestFlightData.  # noqa: E501
        :type: str
        """

        self._departure_airport = departure_airport

    @property
    def arrival_airport(self):
        """Gets the arrival_airport of this RestFlightData.  # noqa: E501


        :return: The arrival_airport of this RestFlightData.  # noqa: E501
        :rtype: str
        """
        return self._arrival_airport

    @arrival_airport.setter
    def arrival_airport(self, arrival_airport):
        """Sets the arrival_airport of this RestFlightData.


        :param arrival_airport: The arrival_airport of this RestFlightData.  # noqa: E501
        :type: str
        """

        self._arrival_airport = arrival_airport

    @property
    def times(self):
        """Gets the times of this RestFlightData.  # noqa: E501


        :return: The times of this RestFlightData.  # noqa: E501
        :rtype: list[Time]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this RestFlightData.


        :param times: The times of this RestFlightData.  # noqa: E501
        :type: list[Time]
        """

        self._times = times

    @property
    def delays(self):
        """Gets the delays of this RestFlightData.  # noqa: E501


        :return: The delays of this RestFlightData.  # noqa: E501
        :rtype: Delays
        """
        return self._delays

    @delays.setter
    def delays(self, delays):
        """Sets the delays of this RestFlightData.


        :param delays: The delays of this RestFlightData.  # noqa: E501
        :type: Delays
        """

        self._delays = delays

    @property
    def loads(self):
        """Gets the loads of this RestFlightData.  # noqa: E501


        :return: The loads of this RestFlightData.  # noqa: E501
        :rtype: Loads
        """
        return self._loads

    @loads.setter
    def loads(self, loads):
        """Sets the loads of this RestFlightData.


        :param loads: The loads of this RestFlightData.  # noqa: E501
        :type: Loads
        """

        self._loads = loads

    @property
    def notes(self):
        """Gets the notes of this RestFlightData.  # noqa: E501


        :return: The notes of this RestFlightData.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RestFlightData.


        :param notes: The notes of this RestFlightData.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def fuels(self):
        """Gets the fuels of this RestFlightData.  # noqa: E501


        :return: The fuels of this RestFlightData.  # noqa: E501
        :rtype: list[Fuel]
        """
        return self._fuels

    @fuels.setter
    def fuels(self, fuels):
        """Sets the fuels of this RestFlightData.


        :param fuels: The fuels of this RestFlightData.  # noqa: E501
        :type: list[Fuel]
        """

        self._fuels = fuels

    @property
    def project_codes(self):
        """Gets the project_codes of this RestFlightData.  # noqa: E501


        :return: The project_codes of this RestFlightData.  # noqa: E501
        :rtype: list[ProjectCode]
        """
        return self._project_codes

    @project_codes.setter
    def project_codes(self, project_codes):
        """Sets the project_codes of this RestFlightData.


        :param project_codes: The project_codes of this RestFlightData.  # noqa: E501
        :type: list[ProjectCode]
        """

        self._project_codes = project_codes

    @property
    def leg_legal_exception(self):
        """Gets the leg_legal_exception of this RestFlightData.  # noqa: E501


        :return: The leg_legal_exception of this RestFlightData.  # noqa: E501
        :rtype: list[LegLegalException]
        """
        return self._leg_legal_exception

    @leg_legal_exception.setter
    def leg_legal_exception(self, leg_legal_exception):
        """Sets the leg_legal_exception of this RestFlightData.


        :param leg_legal_exception: The leg_legal_exception of this RestFlightData.  # noqa: E501
        :type: list[LegLegalException]
        """

        self._leg_legal_exception = leg_legal_exception

    @property
    def voyage_report(self):
        """Gets the voyage_report of this RestFlightData.  # noqa: E501


        :return: The voyage_report of this RestFlightData.  # noqa: E501
        :rtype: VoyageReport
        """
        return self._voyage_report

    @voyage_report.setter
    def voyage_report(self, voyage_report):
        """Sets the voyage_report of this RestFlightData.


        :param voyage_report: The voyage_report of this RestFlightData.  # noqa: E501
        :type: VoyageReport
        """

        self._voyage_report = voyage_report

    @property
    def flightplan(self):
        """Gets the flightplan of this RestFlightData.  # noqa: E501


        :return: The flightplan of this RestFlightData.  # noqa: E501
        :rtype: Flightplan
        """
        return self._flightplan

    @flightplan.setter
    def flightplan(self, flightplan):
        """Sets the flightplan of this RestFlightData.


        :param flightplan: The flightplan of this RestFlightData.  # noqa: E501
        :type: Flightplan
        """

        self._flightplan = flightplan

    @property
    def airports(self):
        """Gets the airports of this RestFlightData.  # noqa: E501


        :return: The airports of this RestFlightData.  # noqa: E501
        :rtype: Airports
        """
        return self._airports

    @airports.setter
    def airports(self, airports):
        """Sets the airports of this RestFlightData.


        :param airports: The airports of this RestFlightData.  # noqa: E501
        :type: Airports
        """

        self._airports = airports

    @property
    def desk(self):
        """Gets the desk of this RestFlightData.  # noqa: E501


        :return: The desk of this RestFlightData.  # noqa: E501
        :rtype: str
        """
        return self._desk

    @desk.setter
    def desk(self, desk):
        """Sets the desk of this RestFlightData.


        :param desk: The desk of this RestFlightData.  # noqa: E501
        :type: str
        """

        self._desk = desk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestFlightData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestFlightData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
