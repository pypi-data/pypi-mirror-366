# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HRDocuments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'short_code': 'str',
        'document_type': 'str',
        'filter': 'str',
        'document_upload': 'bool',
        'jumpseater': 'bool',
        'notifiable': 'bool',
        'external': 'bool',
        'active': 'bool',
        'default': 'bool',
        'visible_fields': 'list[VisibleField]',
        'unique_id': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'short_code': 'ShortCode',
        'document_type': 'DocumentType',
        'filter': 'Filter',
        'document_upload': 'DocumentUpload',
        'jumpseater': 'Jumpseater',
        'notifiable': 'Notifiable',
        'external': 'External',
        'active': 'Active',
        'default': 'Default',
        'visible_fields': 'VisibleFields',
        'unique_id': 'UniqueID',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, name=None, short_code=None, document_type=None, filter=None, document_upload=None, jumpseater=None, notifiable=None, external=None, active=None, default=None, visible_fields=None, unique_id=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """HRDocuments - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._short_code = None
        self._document_type = None
        self._filter = None
        self._document_upload = None
        self._jumpseater = None
        self._notifiable = None
        self._external = None
        self._active = None
        self._default = None
        self._visible_fields = None
        self._unique_id = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if short_code is not None:
            self.short_code = short_code
        if document_type is not None:
            self.document_type = document_type
        if filter is not None:
            self.filter = filter
        if document_upload is not None:
            self.document_upload = document_upload
        if jumpseater is not None:
            self.jumpseater = jumpseater
        if notifiable is not None:
            self.notifiable = notifiable
        if external is not None:
            self.external = external
        if active is not None:
            self.active = active
        if default is not None:
            self.default = default
        if visible_fields is not None:
            self.visible_fields = visible_fields
        if unique_id is not None:
            self.unique_id = unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def name(self):
        """Gets the name of this HRDocuments.  # noqa: E501


        :return: The name of this HRDocuments.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HRDocuments.


        :param name: The name of this HRDocuments.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_code(self):
        """Gets the short_code of this HRDocuments.  # noqa: E501


        :return: The short_code of this HRDocuments.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this HRDocuments.


        :param short_code: The short_code of this HRDocuments.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def document_type(self):
        """Gets the document_type of this HRDocuments.  # noqa: E501


        :return: The document_type of this HRDocuments.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this HRDocuments.


        :param document_type: The document_type of this HRDocuments.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def filter(self):
        """Gets the filter of this HRDocuments.  # noqa: E501


        :return: The filter of this HRDocuments.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this HRDocuments.


        :param filter: The filter of this HRDocuments.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def document_upload(self):
        """Gets the document_upload of this HRDocuments.  # noqa: E501


        :return: The document_upload of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._document_upload

    @document_upload.setter
    def document_upload(self, document_upload):
        """Sets the document_upload of this HRDocuments.


        :param document_upload: The document_upload of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._document_upload = document_upload

    @property
    def jumpseater(self):
        """Gets the jumpseater of this HRDocuments.  # noqa: E501


        :return: The jumpseater of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._jumpseater

    @jumpseater.setter
    def jumpseater(self, jumpseater):
        """Sets the jumpseater of this HRDocuments.


        :param jumpseater: The jumpseater of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._jumpseater = jumpseater

    @property
    def notifiable(self):
        """Gets the notifiable of this HRDocuments.  # noqa: E501


        :return: The notifiable of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._notifiable

    @notifiable.setter
    def notifiable(self, notifiable):
        """Sets the notifiable of this HRDocuments.


        :param notifiable: The notifiable of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._notifiable = notifiable

    @property
    def external(self):
        """Gets the external of this HRDocuments.  # noqa: E501


        :return: The external of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this HRDocuments.


        :param external: The external of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._external = external

    @property
    def active(self):
        """Gets the active of this HRDocuments.  # noqa: E501


        :return: The active of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this HRDocuments.


        :param active: The active of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def default(self):
        """Gets the default of this HRDocuments.  # noqa: E501


        :return: The default of this HRDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this HRDocuments.


        :param default: The default of this HRDocuments.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def visible_fields(self):
        """Gets the visible_fields of this HRDocuments.  # noqa: E501


        :return: The visible_fields of this HRDocuments.  # noqa: E501
        :rtype: list[VisibleField]
        """
        return self._visible_fields

    @visible_fields.setter
    def visible_fields(self, visible_fields):
        """Sets the visible_fields of this HRDocuments.


        :param visible_fields: The visible_fields of this HRDocuments.  # noqa: E501
        :type: list[VisibleField]
        """

        self._visible_fields = visible_fields

    @property
    def unique_id(self):
        """Gets the unique_id of this HRDocuments.  # noqa: E501


        :return: The unique_id of this HRDocuments.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this HRDocuments.


        :param unique_id: The unique_id of this HRDocuments.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this HRDocuments.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this HRDocuments.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HRDocuments.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this HRDocuments.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this HRDocuments.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this HRDocuments.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this HRDocuments.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this HRDocuments.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HRDocuments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HRDocuments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
