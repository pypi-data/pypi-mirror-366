# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'airline_code': 'str',
        'icao_airline_code': 'str',
        'flight_number': 'int',
        'suffix': 'str',
        'departure_airport_code': 'str',
        'arrival_airport_code': 'str',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'frequency': 'str',
        'week_frequency': 'int',
        'std': 'int',
        'sta': 'int',
        'service_type_code': 'str',
        'onward_airline_code': 'str',
        'onward_flight_number': 'int',
        'onward_suffix': 'str',
        'type': 'str',
        'aircraft_type': 'str',
        'aircraft_version': 'str',
        'aircraft_config': 'str',
        'departure_local_time_diff': 'int',
        'arrival_local_time_diff': 'int',
        'aircraft_owner': 'str',
        'cockpit_crew_employer': 'str',
        'cabin_crew_employer': 'str',
        'airports': 'Airports',
        'notes': 'list[Note]',
        'data_element_identifiers': 'list[DataElementIdentifier]'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'airline_code': 'AirlineCode',
        'icao_airline_code': 'ICAOAirlineCode',
        'flight_number': 'FlightNumber',
        'suffix': 'Suffix',
        'departure_airport_code': 'DepartureAirportCode',
        'arrival_airport_code': 'ArrivalAirportCode',
        'period_start': 'PeriodStart',
        'period_end': 'PeriodEnd',
        'frequency': 'Frequency',
        'week_frequency': 'WeekFrequency',
        'std': 'STD',
        'sta': 'STA',
        'service_type_code': 'ServiceTypeCode',
        'onward_airline_code': 'OnwardAirlineCode',
        'onward_flight_number': 'OnwardFlightNumber',
        'onward_suffix': 'OnwardSuffix',
        'type': 'Type',
        'aircraft_type': 'AircraftType',
        'aircraft_version': 'AircraftVersion',
        'aircraft_config': 'AircraftConfig',
        'departure_local_time_diff': 'DepartureLocalTimeDiff',
        'arrival_local_time_diff': 'ArrivalLocalTimeDiff',
        'aircraft_owner': 'AircraftOwner',
        'cockpit_crew_employer': 'CockpitCrewEmployer',
        'cabin_crew_employer': 'CabinCrewEmployer',
        'airports': 'Airports',
        'notes': 'Notes',
        'data_element_identifiers': 'DataElementIdentifiers'
    }

    def __init__(self, unique_id=None, airline_code=None, icao_airline_code=None, flight_number=None, suffix=None, departure_airport_code=None, arrival_airport_code=None, period_start=None, period_end=None, frequency=None, week_frequency=None, std=None, sta=None, service_type_code=None, onward_airline_code=None, onward_flight_number=None, onward_suffix=None, type=None, aircraft_type=None, aircraft_version=None, aircraft_config=None, departure_local_time_diff=None, arrival_local_time_diff=None, aircraft_owner=None, cockpit_crew_employer=None, cabin_crew_employer=None, airports=None, notes=None, data_element_identifiers=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._airline_code = None
        self._icao_airline_code = None
        self._flight_number = None
        self._suffix = None
        self._departure_airport_code = None
        self._arrival_airport_code = None
        self._period_start = None
        self._period_end = None
        self._frequency = None
        self._week_frequency = None
        self._std = None
        self._sta = None
        self._service_type_code = None
        self._onward_airline_code = None
        self._onward_flight_number = None
        self._onward_suffix = None
        self._type = None
        self._aircraft_type = None
        self._aircraft_version = None
        self._aircraft_config = None
        self._departure_local_time_diff = None
        self._arrival_local_time_diff = None
        self._aircraft_owner = None
        self._cockpit_crew_employer = None
        self._cabin_crew_employer = None
        self._airports = None
        self._notes = None
        self._data_element_identifiers = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if airline_code is not None:
            self.airline_code = airline_code
        if icao_airline_code is not None:
            self.icao_airline_code = icao_airline_code
        if flight_number is not None:
            self.flight_number = flight_number
        if suffix is not None:
            self.suffix = suffix
        if departure_airport_code is not None:
            self.departure_airport_code = departure_airport_code
        if arrival_airport_code is not None:
            self.arrival_airport_code = arrival_airport_code
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if frequency is not None:
            self.frequency = frequency
        if week_frequency is not None:
            self.week_frequency = week_frequency
        if std is not None:
            self.std = std
        if sta is not None:
            self.sta = sta
        if service_type_code is not None:
            self.service_type_code = service_type_code
        if onward_airline_code is not None:
            self.onward_airline_code = onward_airline_code
        if onward_flight_number is not None:
            self.onward_flight_number = onward_flight_number
        if onward_suffix is not None:
            self.onward_suffix = onward_suffix
        if type is not None:
            self.type = type
        if aircraft_type is not None:
            self.aircraft_type = aircraft_type
        if aircraft_version is not None:
            self.aircraft_version = aircraft_version
        if aircraft_config is not None:
            self.aircraft_config = aircraft_config
        if departure_local_time_diff is not None:
            self.departure_local_time_diff = departure_local_time_diff
        if arrival_local_time_diff is not None:
            self.arrival_local_time_diff = arrival_local_time_diff
        if aircraft_owner is not None:
            self.aircraft_owner = aircraft_owner
        if cockpit_crew_employer is not None:
            self.cockpit_crew_employer = cockpit_crew_employer
        if cabin_crew_employer is not None:
            self.cabin_crew_employer = cabin_crew_employer
        if airports is not None:
            self.airports = airports
        if notes is not None:
            self.notes = notes
        if data_element_identifiers is not None:
            self.data_element_identifiers = data_element_identifiers

    @property
    def unique_id(self):
        """Gets the unique_id of this Schedule.  # noqa: E501


        :return: The unique_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Schedule.


        :param unique_id: The unique_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def airline_code(self):
        """Gets the airline_code of this Schedule.  # noqa: E501


        :return: The airline_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._airline_code

    @airline_code.setter
    def airline_code(self, airline_code):
        """Sets the airline_code of this Schedule.


        :param airline_code: The airline_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._airline_code = airline_code

    @property
    def icao_airline_code(self):
        """Gets the icao_airline_code of this Schedule.  # noqa: E501


        :return: The icao_airline_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._icao_airline_code

    @icao_airline_code.setter
    def icao_airline_code(self, icao_airline_code):
        """Sets the icao_airline_code of this Schedule.


        :param icao_airline_code: The icao_airline_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._icao_airline_code = icao_airline_code

    @property
    def flight_number(self):
        """Gets the flight_number of this Schedule.  # noqa: E501


        :return: The flight_number of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this Schedule.


        :param flight_number: The flight_number of this Schedule.  # noqa: E501
        :type: int
        """

        self._flight_number = flight_number

    @property
    def suffix(self):
        """Gets the suffix of this Schedule.  # noqa: E501


        :return: The suffix of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Schedule.


        :param suffix: The suffix of this Schedule.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def departure_airport_code(self):
        """Gets the departure_airport_code of this Schedule.  # noqa: E501


        :return: The departure_airport_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._departure_airport_code

    @departure_airport_code.setter
    def departure_airport_code(self, departure_airport_code):
        """Sets the departure_airport_code of this Schedule.


        :param departure_airport_code: The departure_airport_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._departure_airport_code = departure_airport_code

    @property
    def arrival_airport_code(self):
        """Gets the arrival_airport_code of this Schedule.  # noqa: E501


        :return: The arrival_airport_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._arrival_airport_code

    @arrival_airport_code.setter
    def arrival_airport_code(self, arrival_airport_code):
        """Sets the arrival_airport_code of this Schedule.


        :param arrival_airport_code: The arrival_airport_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._arrival_airport_code = arrival_airport_code

    @property
    def period_start(self):
        """Gets the period_start of this Schedule.  # noqa: E501


        :return: The period_start of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Schedule.


        :param period_start: The period_start of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this Schedule.  # noqa: E501


        :return: The period_end of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Schedule.


        :param period_end: The period_end of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def frequency(self):
        """Gets the frequency of this Schedule.  # noqa: E501


        :return: The frequency of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Schedule.


        :param frequency: The frequency of this Schedule.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def week_frequency(self):
        """Gets the week_frequency of this Schedule.  # noqa: E501


        :return: The week_frequency of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._week_frequency

    @week_frequency.setter
    def week_frequency(self, week_frequency):
        """Sets the week_frequency of this Schedule.


        :param week_frequency: The week_frequency of this Schedule.  # noqa: E501
        :type: int
        """

        self._week_frequency = week_frequency

    @property
    def std(self):
        """Gets the std of this Schedule.  # noqa: E501


        :return: The std of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this Schedule.


        :param std: The std of this Schedule.  # noqa: E501
        :type: int
        """

        self._std = std

    @property
    def sta(self):
        """Gets the sta of this Schedule.  # noqa: E501


        :return: The sta of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._sta

    @sta.setter
    def sta(self, sta):
        """Sets the sta of this Schedule.


        :param sta: The sta of this Schedule.  # noqa: E501
        :type: int
        """

        self._sta = sta

    @property
    def service_type_code(self):
        """Gets the service_type_code of this Schedule.  # noqa: E501


        :return: The service_type_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._service_type_code

    @service_type_code.setter
    def service_type_code(self, service_type_code):
        """Sets the service_type_code of this Schedule.


        :param service_type_code: The service_type_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._service_type_code = service_type_code

    @property
    def onward_airline_code(self):
        """Gets the onward_airline_code of this Schedule.  # noqa: E501


        :return: The onward_airline_code of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._onward_airline_code

    @onward_airline_code.setter
    def onward_airline_code(self, onward_airline_code):
        """Sets the onward_airline_code of this Schedule.


        :param onward_airline_code: The onward_airline_code of this Schedule.  # noqa: E501
        :type: str
        """

        self._onward_airline_code = onward_airline_code

    @property
    def onward_flight_number(self):
        """Gets the onward_flight_number of this Schedule.  # noqa: E501


        :return: The onward_flight_number of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._onward_flight_number

    @onward_flight_number.setter
    def onward_flight_number(self, onward_flight_number):
        """Sets the onward_flight_number of this Schedule.


        :param onward_flight_number: The onward_flight_number of this Schedule.  # noqa: E501
        :type: int
        """

        self._onward_flight_number = onward_flight_number

    @property
    def onward_suffix(self):
        """Gets the onward_suffix of this Schedule.  # noqa: E501


        :return: The onward_suffix of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._onward_suffix

    @onward_suffix.setter
    def onward_suffix(self, onward_suffix):
        """Sets the onward_suffix of this Schedule.


        :param onward_suffix: The onward_suffix of this Schedule.  # noqa: E501
        :type: str
        """

        self._onward_suffix = onward_suffix

    @property
    def type(self):
        """Gets the type of this Schedule.  # noqa: E501


        :return: The type of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Schedule.


        :param type: The type of this Schedule.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def aircraft_type(self):
        """Gets the aircraft_type of this Schedule.  # noqa: E501


        :return: The aircraft_type of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_type

    @aircraft_type.setter
    def aircraft_type(self, aircraft_type):
        """Sets the aircraft_type of this Schedule.


        :param aircraft_type: The aircraft_type of this Schedule.  # noqa: E501
        :type: str
        """

        self._aircraft_type = aircraft_type

    @property
    def aircraft_version(self):
        """Gets the aircraft_version of this Schedule.  # noqa: E501


        :return: The aircraft_version of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_version

    @aircraft_version.setter
    def aircraft_version(self, aircraft_version):
        """Sets the aircraft_version of this Schedule.


        :param aircraft_version: The aircraft_version of this Schedule.  # noqa: E501
        :type: str
        """

        self._aircraft_version = aircraft_version

    @property
    def aircraft_config(self):
        """Gets the aircraft_config of this Schedule.  # noqa: E501


        :return: The aircraft_config of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_config

    @aircraft_config.setter
    def aircraft_config(self, aircraft_config):
        """Sets the aircraft_config of this Schedule.


        :param aircraft_config: The aircraft_config of this Schedule.  # noqa: E501
        :type: str
        """

        self._aircraft_config = aircraft_config

    @property
    def departure_local_time_diff(self):
        """Gets the departure_local_time_diff of this Schedule.  # noqa: E501


        :return: The departure_local_time_diff of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._departure_local_time_diff

    @departure_local_time_diff.setter
    def departure_local_time_diff(self, departure_local_time_diff):
        """Sets the departure_local_time_diff of this Schedule.


        :param departure_local_time_diff: The departure_local_time_diff of this Schedule.  # noqa: E501
        :type: int
        """

        self._departure_local_time_diff = departure_local_time_diff

    @property
    def arrival_local_time_diff(self):
        """Gets the arrival_local_time_diff of this Schedule.  # noqa: E501


        :return: The arrival_local_time_diff of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._arrival_local_time_diff

    @arrival_local_time_diff.setter
    def arrival_local_time_diff(self, arrival_local_time_diff):
        """Sets the arrival_local_time_diff of this Schedule.


        :param arrival_local_time_diff: The arrival_local_time_diff of this Schedule.  # noqa: E501
        :type: int
        """

        self._arrival_local_time_diff = arrival_local_time_diff

    @property
    def aircraft_owner(self):
        """Gets the aircraft_owner of this Schedule.  # noqa: E501


        :return: The aircraft_owner of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_owner

    @aircraft_owner.setter
    def aircraft_owner(self, aircraft_owner):
        """Sets the aircraft_owner of this Schedule.


        :param aircraft_owner: The aircraft_owner of this Schedule.  # noqa: E501
        :type: str
        """

        self._aircraft_owner = aircraft_owner

    @property
    def cockpit_crew_employer(self):
        """Gets the cockpit_crew_employer of this Schedule.  # noqa: E501


        :return: The cockpit_crew_employer of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cockpit_crew_employer

    @cockpit_crew_employer.setter
    def cockpit_crew_employer(self, cockpit_crew_employer):
        """Sets the cockpit_crew_employer of this Schedule.


        :param cockpit_crew_employer: The cockpit_crew_employer of this Schedule.  # noqa: E501
        :type: str
        """

        self._cockpit_crew_employer = cockpit_crew_employer

    @property
    def cabin_crew_employer(self):
        """Gets the cabin_crew_employer of this Schedule.  # noqa: E501


        :return: The cabin_crew_employer of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cabin_crew_employer

    @cabin_crew_employer.setter
    def cabin_crew_employer(self, cabin_crew_employer):
        """Sets the cabin_crew_employer of this Schedule.


        :param cabin_crew_employer: The cabin_crew_employer of this Schedule.  # noqa: E501
        :type: str
        """

        self._cabin_crew_employer = cabin_crew_employer

    @property
    def airports(self):
        """Gets the airports of this Schedule.  # noqa: E501


        :return: The airports of this Schedule.  # noqa: E501
        :rtype: Airports
        """
        return self._airports

    @airports.setter
    def airports(self, airports):
        """Sets the airports of this Schedule.


        :param airports: The airports of this Schedule.  # noqa: E501
        :type: Airports
        """

        self._airports = airports

    @property
    def notes(self):
        """Gets the notes of this Schedule.  # noqa: E501


        :return: The notes of this Schedule.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Schedule.


        :param notes: The notes of this Schedule.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def data_element_identifiers(self):
        """Gets the data_element_identifiers of this Schedule.  # noqa: E501


        :return: The data_element_identifiers of this Schedule.  # noqa: E501
        :rtype: list[DataElementIdentifier]
        """
        return self._data_element_identifiers

    @data_element_identifiers.setter
    def data_element_identifiers(self, data_element_identifiers):
        """Sets the data_element_identifiers of this Schedule.


        :param data_element_identifiers: The data_element_identifiers of this Schedule.  # noqa: E501
        :type: list[DataElementIdentifier]
        """

        self._data_element_identifiers = data_element_identifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
