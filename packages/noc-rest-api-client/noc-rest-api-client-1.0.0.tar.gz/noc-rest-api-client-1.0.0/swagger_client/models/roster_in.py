# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RosterIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_confirmed': 'bool',
        'roster_legal_exceptions': 'list[RosterLegalException]',
        'designators': 'list[RosterDesignator]',
        'roster_time': 'RosterTime',
        'times': 'list[Time]',
        'dead_head_booking_number': 'str'
    }

    attribute_map = {
        'is_confirmed': 'IsConfirmed',
        'roster_legal_exceptions': 'RosterLegalExceptions',
        'designators': 'Designators',
        'roster_time': 'RosterTime',
        'times': 'Times',
        'dead_head_booking_number': 'DeadHeadBookingNumber'
    }

    def __init__(self, is_confirmed=None, roster_legal_exceptions=None, designators=None, roster_time=None, times=None, dead_head_booking_number=None):  # noqa: E501
        """RosterIn - a model defined in Swagger"""  # noqa: E501
        self._is_confirmed = None
        self._roster_legal_exceptions = None
        self._designators = None
        self._roster_time = None
        self._times = None
        self._dead_head_booking_number = None
        self.discriminator = None
        if is_confirmed is not None:
            self.is_confirmed = is_confirmed
        if roster_legal_exceptions is not None:
            self.roster_legal_exceptions = roster_legal_exceptions
        if designators is not None:
            self.designators = designators
        if roster_time is not None:
            self.roster_time = roster_time
        if times is not None:
            self.times = times
        if dead_head_booking_number is not None:
            self.dead_head_booking_number = dead_head_booking_number

    @property
    def is_confirmed(self):
        """Gets the is_confirmed of this RosterIn.  # noqa: E501


        :return: The is_confirmed of this RosterIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_confirmed

    @is_confirmed.setter
    def is_confirmed(self, is_confirmed):
        """Sets the is_confirmed of this RosterIn.


        :param is_confirmed: The is_confirmed of this RosterIn.  # noqa: E501
        :type: bool
        """

        self._is_confirmed = is_confirmed

    @property
    def roster_legal_exceptions(self):
        """Gets the roster_legal_exceptions of this RosterIn.  # noqa: E501


        :return: The roster_legal_exceptions of this RosterIn.  # noqa: E501
        :rtype: list[RosterLegalException]
        """
        return self._roster_legal_exceptions

    @roster_legal_exceptions.setter
    def roster_legal_exceptions(self, roster_legal_exceptions):
        """Sets the roster_legal_exceptions of this RosterIn.


        :param roster_legal_exceptions: The roster_legal_exceptions of this RosterIn.  # noqa: E501
        :type: list[RosterLegalException]
        """

        self._roster_legal_exceptions = roster_legal_exceptions

    @property
    def designators(self):
        """Gets the designators of this RosterIn.  # noqa: E501


        :return: The designators of this RosterIn.  # noqa: E501
        :rtype: list[RosterDesignator]
        """
        return self._designators

    @designators.setter
    def designators(self, designators):
        """Sets the designators of this RosterIn.


        :param designators: The designators of this RosterIn.  # noqa: E501
        :type: list[RosterDesignator]
        """

        self._designators = designators

    @property
    def roster_time(self):
        """Gets the roster_time of this RosterIn.  # noqa: E501


        :return: The roster_time of this RosterIn.  # noqa: E501
        :rtype: RosterTime
        """
        return self._roster_time

    @roster_time.setter
    def roster_time(self, roster_time):
        """Sets the roster_time of this RosterIn.


        :param roster_time: The roster_time of this RosterIn.  # noqa: E501
        :type: RosterTime
        """

        self._roster_time = roster_time

    @property
    def times(self):
        """Gets the times of this RosterIn.  # noqa: E501


        :return: The times of this RosterIn.  # noqa: E501
        :rtype: list[Time]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this RosterIn.


        :param times: The times of this RosterIn.  # noqa: E501
        :type: list[Time]
        """

        self._times = times

    @property
    def dead_head_booking_number(self):
        """Gets the dead_head_booking_number of this RosterIn.  # noqa: E501


        :return: The dead_head_booking_number of this RosterIn.  # noqa: E501
        :rtype: str
        """
        return self._dead_head_booking_number

    @dead_head_booking_number.setter
    def dead_head_booking_number(self, dead_head_booking_number):
        """Sets the dead_head_booking_number of this RosterIn.


        :param dead_head_booking_number: The dead_head_booking_number of this RosterIn.  # noqa: E501
        :type: str
        """

        self._dead_head_booking_number = dead_head_booking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RosterIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RosterIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
