# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrewOnBoardInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emp_no': 'str',
        'emp_name': 'str',
        'rank': 'str'
    }

    attribute_map = {
        'emp_no': 'EmpNo',
        'emp_name': 'EmpName',
        'rank': 'Rank'
    }

    def __init__(self, emp_no=None, emp_name=None, rank=None):  # noqa: E501
        """CrewOnBoardInfo - a model defined in Swagger"""  # noqa: E501
        self._emp_no = None
        self._emp_name = None
        self._rank = None
        self.discriminator = None
        if emp_no is not None:
            self.emp_no = emp_no
        if emp_name is not None:
            self.emp_name = emp_name
        if rank is not None:
            self.rank = rank

    @property
    def emp_no(self):
        """Gets the emp_no of this CrewOnBoardInfo.  # noqa: E501


        :return: The emp_no of this CrewOnBoardInfo.  # noqa: E501
        :rtype: str
        """
        return self._emp_no

    @emp_no.setter
    def emp_no(self, emp_no):
        """Sets the emp_no of this CrewOnBoardInfo.


        :param emp_no: The emp_no of this CrewOnBoardInfo.  # noqa: E501
        :type: str
        """

        self._emp_no = emp_no

    @property
    def emp_name(self):
        """Gets the emp_name of this CrewOnBoardInfo.  # noqa: E501


        :return: The emp_name of this CrewOnBoardInfo.  # noqa: E501
        :rtype: str
        """
        return self._emp_name

    @emp_name.setter
    def emp_name(self, emp_name):
        """Sets the emp_name of this CrewOnBoardInfo.


        :param emp_name: The emp_name of this CrewOnBoardInfo.  # noqa: E501
        :type: str
        """

        self._emp_name = emp_name

    @property
    def rank(self):
        """Gets the rank of this CrewOnBoardInfo.  # noqa: E501


        :return: The rank of this CrewOnBoardInfo.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this CrewOnBoardInfo.


        :param rank: The rank of this CrewOnBoardInfo.  # noqa: E501
        :type: str
        """

        self._rank = rank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrewOnBoardInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrewOnBoardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
