# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomationEventOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'template_name': 'str',
        'template_type': 'str',
        'com_channels': 'list[ComChannel]',
        'filter_name': 'str',
        'data_type': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'type': 'Type',
        'template_name': 'TemplateName',
        'template_type': 'TemplateType',
        'com_channels': 'ComChannels',
        'filter_name': 'FilterName',
        'data_type': 'DataType'
    }

    def __init__(self, name=None, type=None, template_name=None, template_type=None, com_channels=None, filter_name=None, data_type=None):  # noqa: E501
        """AutomationEventOut - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._template_name = None
        self._template_type = None
        self._com_channels = None
        self._filter_name = None
        self._data_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if template_name is not None:
            self.template_name = template_name
        if template_type is not None:
            self.template_type = template_type
        if com_channels is not None:
            self.com_channels = com_channels
        if filter_name is not None:
            self.filter_name = filter_name
        if data_type is not None:
            self.data_type = data_type

    @property
    def name(self):
        """Gets the name of this AutomationEventOut.  # noqa: E501


        :return: The name of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationEventOut.


        :param name: The name of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AutomationEventOut.  # noqa: E501


        :return: The type of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationEventOut.


        :param type: The type of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def template_name(self):
        """Gets the template_name of this AutomationEventOut.  # noqa: E501


        :return: The template_name of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this AutomationEventOut.


        :param template_name: The template_name of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_type(self):
        """Gets the template_type of this AutomationEventOut.  # noqa: E501


        :return: The template_type of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this AutomationEventOut.


        :param template_type: The template_type of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._template_type = template_type

    @property
    def com_channels(self):
        """Gets the com_channels of this AutomationEventOut.  # noqa: E501


        :return: The com_channels of this AutomationEventOut.  # noqa: E501
        :rtype: list[ComChannel]
        """
        return self._com_channels

    @com_channels.setter
    def com_channels(self, com_channels):
        """Sets the com_channels of this AutomationEventOut.


        :param com_channels: The com_channels of this AutomationEventOut.  # noqa: E501
        :type: list[ComChannel]
        """

        self._com_channels = com_channels

    @property
    def filter_name(self):
        """Gets the filter_name of this AutomationEventOut.  # noqa: E501


        :return: The filter_name of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name):
        """Sets the filter_name of this AutomationEventOut.


        :param filter_name: The filter_name of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._filter_name = filter_name

    @property
    def data_type(self):
        """Gets the data_type of this AutomationEventOut.  # noqa: E501


        :return: The data_type of this AutomationEventOut.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AutomationEventOut.


        :param data_type: The data_type of this AutomationEventOut.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationEventOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationEventOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
