# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PassengerPerWeight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adults': 'int',
        'males': 'int',
        'females': 'int',
        'children': 'int',
        'infants': 'int',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'adults': 'Adults',
        'males': 'Males',
        'females': 'Females',
        'children': 'Children',
        'infants': 'Infants',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, adults=None, males=None, females=None, children=None, infants=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """PassengerPerWeight - a model defined in Swagger"""  # noqa: E501
        self._adults = None
        self._males = None
        self._females = None
        self._children = None
        self._infants = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if adults is not None:
            self.adults = adults
        if males is not None:
            self.males = males
        if females is not None:
            self.females = females
        if children is not None:
            self.children = children
        if infants is not None:
            self.infants = infants
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def adults(self):
        """Gets the adults of this PassengerPerWeight.  # noqa: E501


        :return: The adults of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this PassengerPerWeight.


        :param adults: The adults of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def males(self):
        """Gets the males of this PassengerPerWeight.  # noqa: E501


        :return: The males of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._males

    @males.setter
    def males(self, males):
        """Sets the males of this PassengerPerWeight.


        :param males: The males of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._males = males

    @property
    def females(self):
        """Gets the females of this PassengerPerWeight.  # noqa: E501


        :return: The females of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._females

    @females.setter
    def females(self, females):
        """Sets the females of this PassengerPerWeight.


        :param females: The females of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._females = females

    @property
    def children(self):
        """Gets the children of this PassengerPerWeight.  # noqa: E501


        :return: The children of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this PassengerPerWeight.


        :param children: The children of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def infants(self):
        """Gets the infants of this PassengerPerWeight.  # noqa: E501


        :return: The infants of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._infants

    @infants.setter
    def infants(self, infants):
        """Sets the infants of this PassengerPerWeight.


        :param infants: The infants of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._infants = infants

    @property
    def timestamp(self):
        """Gets the timestamp of this PassengerPerWeight.  # noqa: E501

        Modified Datetime  # noqa: E501

        :return: The timestamp of this PassengerPerWeight.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PassengerPerWeight.

        Modified Datetime  # noqa: E501

        :param timestamp: The timestamp of this PassengerPerWeight.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this PassengerPerWeight.  # noqa: E501

        Modified User UniqueId  # noqa: E501

        :return: The modified_by_unique_id of this PassengerPerWeight.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this PassengerPerWeight.

        Modified User UniqueId  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this PassengerPerWeight.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PassengerPerWeight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PassengerPerWeight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
