# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StationFacility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'active': 'bool',
        'default': 'bool',
        'attributes': 'list[StationFacilityAttribute]'
    }

    attribute_map = {
        'type': 'Type',
        'active': 'Active',
        'default': 'Default',
        'attributes': 'Attributes'
    }

    def __init__(self, type=None, active=None, default=None, attributes=None):  # noqa: E501
        """StationFacility - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._active = None
        self._default = None
        self._attributes = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if active is not None:
            self.active = active
        if default is not None:
            self.default = default
        if attributes is not None:
            self.attributes = attributes

    @property
    def type(self):
        """Gets the type of this StationFacility.  # noqa: E501


        :return: The type of this StationFacility.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StationFacility.


        :param type: The type of this StationFacility.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def active(self):
        """Gets the active of this StationFacility.  # noqa: E501


        :return: The active of this StationFacility.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StationFacility.


        :param active: The active of this StationFacility.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def default(self):
        """Gets the default of this StationFacility.  # noqa: E501


        :return: The default of this StationFacility.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this StationFacility.


        :param default: The default of this StationFacility.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def attributes(self):
        """Gets the attributes of this StationFacility.  # noqa: E501


        :return: The attributes of this StationFacility.  # noqa: E501
        :rtype: list[StationFacilityAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this StationFacility.


        :param attributes: The attributes of this StationFacility.  # noqa: E501
        :type: list[StationFacilityAttribute]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StationFacility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationFacility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
