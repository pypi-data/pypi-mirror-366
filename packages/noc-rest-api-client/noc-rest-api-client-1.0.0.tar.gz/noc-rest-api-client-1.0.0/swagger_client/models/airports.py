# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Airports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'departure_airport': 'Airport',
        'arrival_airport': 'Airport',
        'diversion_airport': 'Airport',
        'schedule_departure_airport': 'Airport',
        'schedule_arrival_airport': 'Airport'
    }

    attribute_map = {
        'departure_airport': 'DepartureAirport',
        'arrival_airport': 'ArrivalAirport',
        'diversion_airport': 'DiversionAirport',
        'schedule_departure_airport': 'ScheduleDepartureAirport',
        'schedule_arrival_airport': 'ScheduleArrivalAirport'
    }

    def __init__(self, departure_airport=None, arrival_airport=None, diversion_airport=None, schedule_departure_airport=None, schedule_arrival_airport=None):  # noqa: E501
        """Airports - a model defined in Swagger"""  # noqa: E501
        self._departure_airport = None
        self._arrival_airport = None
        self._diversion_airport = None
        self._schedule_departure_airport = None
        self._schedule_arrival_airport = None
        self.discriminator = None
        if departure_airport is not None:
            self.departure_airport = departure_airport
        if arrival_airport is not None:
            self.arrival_airport = arrival_airport
        if diversion_airport is not None:
            self.diversion_airport = diversion_airport
        if schedule_departure_airport is not None:
            self.schedule_departure_airport = schedule_departure_airport
        if schedule_arrival_airport is not None:
            self.schedule_arrival_airport = schedule_arrival_airport

    @property
    def departure_airport(self):
        """Gets the departure_airport of this Airports.  # noqa: E501


        :return: The departure_airport of this Airports.  # noqa: E501
        :rtype: Airport
        """
        return self._departure_airport

    @departure_airport.setter
    def departure_airport(self, departure_airport):
        """Sets the departure_airport of this Airports.


        :param departure_airport: The departure_airport of this Airports.  # noqa: E501
        :type: Airport
        """

        self._departure_airport = departure_airport

    @property
    def arrival_airport(self):
        """Gets the arrival_airport of this Airports.  # noqa: E501


        :return: The arrival_airport of this Airports.  # noqa: E501
        :rtype: Airport
        """
        return self._arrival_airport

    @arrival_airport.setter
    def arrival_airport(self, arrival_airport):
        """Sets the arrival_airport of this Airports.


        :param arrival_airport: The arrival_airport of this Airports.  # noqa: E501
        :type: Airport
        """

        self._arrival_airport = arrival_airport

    @property
    def diversion_airport(self):
        """Gets the diversion_airport of this Airports.  # noqa: E501


        :return: The diversion_airport of this Airports.  # noqa: E501
        :rtype: Airport
        """
        return self._diversion_airport

    @diversion_airport.setter
    def diversion_airport(self, diversion_airport):
        """Sets the diversion_airport of this Airports.


        :param diversion_airport: The diversion_airport of this Airports.  # noqa: E501
        :type: Airport
        """

        self._diversion_airport = diversion_airport

    @property
    def schedule_departure_airport(self):
        """Gets the schedule_departure_airport of this Airports.  # noqa: E501


        :return: The schedule_departure_airport of this Airports.  # noqa: E501
        :rtype: Airport
        """
        return self._schedule_departure_airport

    @schedule_departure_airport.setter
    def schedule_departure_airport(self, schedule_departure_airport):
        """Sets the schedule_departure_airport of this Airports.


        :param schedule_departure_airport: The schedule_departure_airport of this Airports.  # noqa: E501
        :type: Airport
        """

        self._schedule_departure_airport = schedule_departure_airport

    @property
    def schedule_arrival_airport(self):
        """Gets the schedule_arrival_airport of this Airports.  # noqa: E501


        :return: The schedule_arrival_airport of this Airports.  # noqa: E501
        :rtype: Airport
        """
        return self._schedule_arrival_airport

    @schedule_arrival_airport.setter
    def schedule_arrival_airport(self, schedule_arrival_airport):
        """Sets the schedule_arrival_airport of this Airports.


        :param schedule_arrival_airport: The schedule_arrival_airport of this Airports.  # noqa: E501
        :type: Airport
        """

        self._schedule_arrival_airport = schedule_arrival_airport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Airports, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Airports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
