# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AirportDistanceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'other_station': 'str',
        'frequency': 'int',
        'aircraft_filter': 'str',
        'blh': 'str',
        'airborne_hours': 'str',
        'meters': 'str',
        'direction': 'str',
        'active': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'other_station': 'OtherStation',
        'frequency': 'Frequency',
        'aircraft_filter': 'AircraftFilter',
        'blh': 'BLH',
        'airborne_hours': 'AirborneHours',
        'meters': 'Meters',
        'direction': 'Direction',
        'active': 'Active',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo'
    }

    def __init__(self, other_station=None, frequency=None, aircraft_filter=None, blh=None, airborne_hours=None, meters=None, direction=None, active=None, valid_from=None, valid_to=None):  # noqa: E501
        """AirportDistanceData - a model defined in Swagger"""  # noqa: E501
        self._other_station = None
        self._frequency = None
        self._aircraft_filter = None
        self._blh = None
        self._airborne_hours = None
        self._meters = None
        self._direction = None
        self._active = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if other_station is not None:
            self.other_station = other_station
        if frequency is not None:
            self.frequency = frequency
        if aircraft_filter is not None:
            self.aircraft_filter = aircraft_filter
        if blh is not None:
            self.blh = blh
        if airborne_hours is not None:
            self.airborne_hours = airborne_hours
        if meters is not None:
            self.meters = meters
        if direction is not None:
            self.direction = direction
        if active is not None:
            self.active = active
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def other_station(self):
        """Gets the other_station of this AirportDistanceData.  # noqa: E501


        :return: The other_station of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._other_station

    @other_station.setter
    def other_station(self, other_station):
        """Sets the other_station of this AirportDistanceData.


        :param other_station: The other_station of this AirportDistanceData.  # noqa: E501
        :type: str
        """

        self._other_station = other_station

    @property
    def frequency(self):
        """Gets the frequency of this AirportDistanceData.  # noqa: E501


        :return: The frequency of this AirportDistanceData.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AirportDistanceData.


        :param frequency: The frequency of this AirportDistanceData.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def aircraft_filter(self):
        """Gets the aircraft_filter of this AirportDistanceData.  # noqa: E501


        :return: The aircraft_filter of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_filter

    @aircraft_filter.setter
    def aircraft_filter(self, aircraft_filter):
        """Sets the aircraft_filter of this AirportDistanceData.


        :param aircraft_filter: The aircraft_filter of this AirportDistanceData.  # noqa: E501
        :type: str
        """

        self._aircraft_filter = aircraft_filter

    @property
    def blh(self):
        """Gets the blh of this AirportDistanceData.  # noqa: E501


        :return: The blh of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._blh

    @blh.setter
    def blh(self, blh):
        """Sets the blh of this AirportDistanceData.


        :param blh: The blh of this AirportDistanceData.  # noqa: E501
        :type: str
        """

        self._blh = blh

    @property
    def airborne_hours(self):
        """Gets the airborne_hours of this AirportDistanceData.  # noqa: E501


        :return: The airborne_hours of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._airborne_hours

    @airborne_hours.setter
    def airborne_hours(self, airborne_hours):
        """Sets the airborne_hours of this AirportDistanceData.


        :param airborne_hours: The airborne_hours of this AirportDistanceData.  # noqa: E501
        :type: str
        """

        self._airborne_hours = airborne_hours

    @property
    def meters(self):
        """Gets the meters of this AirportDistanceData.  # noqa: E501


        :return: The meters of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._meters

    @meters.setter
    def meters(self, meters):
        """Sets the meters of this AirportDistanceData.


        :param meters: The meters of this AirportDistanceData.  # noqa: E501
        :type: str
        """

        self._meters = meters

    @property
    def direction(self):
        """Gets the direction of this AirportDistanceData.  # noqa: E501


        :return: The direction of this AirportDistanceData.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AirportDistanceData.


        :param direction: The direction of this AirportDistanceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["From", "To", "Both"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def active(self):
        """Gets the active of this AirportDistanceData.  # noqa: E501


        :return: The active of this AirportDistanceData.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AirportDistanceData.


        :param active: The active of this AirportDistanceData.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def valid_from(self):
        """Gets the valid_from of this AirportDistanceData.  # noqa: E501


        :return: The valid_from of this AirportDistanceData.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this AirportDistanceData.


        :param valid_from: The valid_from of this AirportDistanceData.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this AirportDistanceData.  # noqa: E501


        :return: The valid_to of this AirportDistanceData.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this AirportDistanceData.


        :param valid_to: The valid_to of this AirportDistanceData.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AirportDistanceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AirportDistanceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
