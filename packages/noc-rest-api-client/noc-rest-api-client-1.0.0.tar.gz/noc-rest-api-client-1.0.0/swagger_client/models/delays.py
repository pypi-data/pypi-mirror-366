# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Delays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delay1': 'Delay',
        'delay2': 'Delay',
        'delay3': 'Delay',
        'delay4': 'Delay',
        'arrival_delay1': 'Delay',
        'arrival_delay2': 'Delay',
        'return_to_ramp_delay1': 'Delay',
        'return_to_ramp_delay2': 'Delay',
        'forced_return_delay1': 'Delay',
        'forced_return_delay2': 'Delay',
        'divert_delay1': 'Delay',
        'divert_delay2': 'Delay'
    }

    attribute_map = {
        'delay1': 'Delay1',
        'delay2': 'Delay2',
        'delay3': 'Delay3',
        'delay4': 'Delay4',
        'arrival_delay1': 'ArrivalDelay1',
        'arrival_delay2': 'ArrivalDelay2',
        'return_to_ramp_delay1': 'ReturnToRampDelay1',
        'return_to_ramp_delay2': 'ReturnToRampDelay2',
        'forced_return_delay1': 'ForcedReturnDelay1',
        'forced_return_delay2': 'ForcedReturnDelay2',
        'divert_delay1': 'DivertDelay1',
        'divert_delay2': 'DivertDelay2'
    }

    def __init__(self, delay1=None, delay2=None, delay3=None, delay4=None, arrival_delay1=None, arrival_delay2=None, return_to_ramp_delay1=None, return_to_ramp_delay2=None, forced_return_delay1=None, forced_return_delay2=None, divert_delay1=None, divert_delay2=None):  # noqa: E501
        """Delays - a model defined in Swagger"""  # noqa: E501
        self._delay1 = None
        self._delay2 = None
        self._delay3 = None
        self._delay4 = None
        self._arrival_delay1 = None
        self._arrival_delay2 = None
        self._return_to_ramp_delay1 = None
        self._return_to_ramp_delay2 = None
        self._forced_return_delay1 = None
        self._forced_return_delay2 = None
        self._divert_delay1 = None
        self._divert_delay2 = None
        self.discriminator = None
        if delay1 is not None:
            self.delay1 = delay1
        if delay2 is not None:
            self.delay2 = delay2
        if delay3 is not None:
            self.delay3 = delay3
        if delay4 is not None:
            self.delay4 = delay4
        if arrival_delay1 is not None:
            self.arrival_delay1 = arrival_delay1
        if arrival_delay2 is not None:
            self.arrival_delay2 = arrival_delay2
        if return_to_ramp_delay1 is not None:
            self.return_to_ramp_delay1 = return_to_ramp_delay1
        if return_to_ramp_delay2 is not None:
            self.return_to_ramp_delay2 = return_to_ramp_delay2
        if forced_return_delay1 is not None:
            self.forced_return_delay1 = forced_return_delay1
        if forced_return_delay2 is not None:
            self.forced_return_delay2 = forced_return_delay2
        if divert_delay1 is not None:
            self.divert_delay1 = divert_delay1
        if divert_delay2 is not None:
            self.divert_delay2 = divert_delay2

    @property
    def delay1(self):
        """Gets the delay1 of this Delays.  # noqa: E501


        :return: The delay1 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._delay1

    @delay1.setter
    def delay1(self, delay1):
        """Sets the delay1 of this Delays.


        :param delay1: The delay1 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._delay1 = delay1

    @property
    def delay2(self):
        """Gets the delay2 of this Delays.  # noqa: E501


        :return: The delay2 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._delay2

    @delay2.setter
    def delay2(self, delay2):
        """Sets the delay2 of this Delays.


        :param delay2: The delay2 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._delay2 = delay2

    @property
    def delay3(self):
        """Gets the delay3 of this Delays.  # noqa: E501


        :return: The delay3 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._delay3

    @delay3.setter
    def delay3(self, delay3):
        """Sets the delay3 of this Delays.


        :param delay3: The delay3 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._delay3 = delay3

    @property
    def delay4(self):
        """Gets the delay4 of this Delays.  # noqa: E501


        :return: The delay4 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._delay4

    @delay4.setter
    def delay4(self, delay4):
        """Sets the delay4 of this Delays.


        :param delay4: The delay4 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._delay4 = delay4

    @property
    def arrival_delay1(self):
        """Gets the arrival_delay1 of this Delays.  # noqa: E501


        :return: The arrival_delay1 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._arrival_delay1

    @arrival_delay1.setter
    def arrival_delay1(self, arrival_delay1):
        """Sets the arrival_delay1 of this Delays.


        :param arrival_delay1: The arrival_delay1 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._arrival_delay1 = arrival_delay1

    @property
    def arrival_delay2(self):
        """Gets the arrival_delay2 of this Delays.  # noqa: E501


        :return: The arrival_delay2 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._arrival_delay2

    @arrival_delay2.setter
    def arrival_delay2(self, arrival_delay2):
        """Sets the arrival_delay2 of this Delays.


        :param arrival_delay2: The arrival_delay2 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._arrival_delay2 = arrival_delay2

    @property
    def return_to_ramp_delay1(self):
        """Gets the return_to_ramp_delay1 of this Delays.  # noqa: E501


        :return: The return_to_ramp_delay1 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._return_to_ramp_delay1

    @return_to_ramp_delay1.setter
    def return_to_ramp_delay1(self, return_to_ramp_delay1):
        """Sets the return_to_ramp_delay1 of this Delays.


        :param return_to_ramp_delay1: The return_to_ramp_delay1 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._return_to_ramp_delay1 = return_to_ramp_delay1

    @property
    def return_to_ramp_delay2(self):
        """Gets the return_to_ramp_delay2 of this Delays.  # noqa: E501


        :return: The return_to_ramp_delay2 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._return_to_ramp_delay2

    @return_to_ramp_delay2.setter
    def return_to_ramp_delay2(self, return_to_ramp_delay2):
        """Sets the return_to_ramp_delay2 of this Delays.


        :param return_to_ramp_delay2: The return_to_ramp_delay2 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._return_to_ramp_delay2 = return_to_ramp_delay2

    @property
    def forced_return_delay1(self):
        """Gets the forced_return_delay1 of this Delays.  # noqa: E501


        :return: The forced_return_delay1 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._forced_return_delay1

    @forced_return_delay1.setter
    def forced_return_delay1(self, forced_return_delay1):
        """Sets the forced_return_delay1 of this Delays.


        :param forced_return_delay1: The forced_return_delay1 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._forced_return_delay1 = forced_return_delay1

    @property
    def forced_return_delay2(self):
        """Gets the forced_return_delay2 of this Delays.  # noqa: E501


        :return: The forced_return_delay2 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._forced_return_delay2

    @forced_return_delay2.setter
    def forced_return_delay2(self, forced_return_delay2):
        """Sets the forced_return_delay2 of this Delays.


        :param forced_return_delay2: The forced_return_delay2 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._forced_return_delay2 = forced_return_delay2

    @property
    def divert_delay1(self):
        """Gets the divert_delay1 of this Delays.  # noqa: E501


        :return: The divert_delay1 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._divert_delay1

    @divert_delay1.setter
    def divert_delay1(self, divert_delay1):
        """Sets the divert_delay1 of this Delays.


        :param divert_delay1: The divert_delay1 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._divert_delay1 = divert_delay1

    @property
    def divert_delay2(self):
        """Gets the divert_delay2 of this Delays.  # noqa: E501


        :return: The divert_delay2 of this Delays.  # noqa: E501
        :rtype: Delay
        """
        return self._divert_delay2

    @divert_delay2.setter
    def divert_delay2(self, divert_delay2):
        """Sets the divert_delay2 of this Delays.


        :param divert_delay2: The divert_delay2 of this Delays.  # noqa: E501
        :type: Delay
        """

        self._divert_delay2 = divert_delay2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Delays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Delays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
