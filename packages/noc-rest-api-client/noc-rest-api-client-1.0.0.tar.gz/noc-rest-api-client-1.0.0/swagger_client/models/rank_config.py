# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RankConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'short_code': 'str',
        'short_code2': 'str',
        'type': 'str',
        'order': 'int',
        'low_rank': 'str',
        'low_rank_step': 'int',
        'high_rank': 'str',
        'high_rank_step': 'int',
        'active': 'bool',
        'default': 'bool',
        'unique_id': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'short_code': 'ShortCode',
        'short_code2': 'ShortCode2',
        'type': 'Type',
        'order': 'Order',
        'low_rank': 'LowRank',
        'low_rank_step': 'LowRankStep',
        'high_rank': 'HighRank',
        'high_rank_step': 'HighRankStep',
        'active': 'Active',
        'default': 'Default',
        'unique_id': 'UniqueID',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, name=None, short_code=None, short_code2=None, type=None, order=None, low_rank=None, low_rank_step=None, high_rank=None, high_rank_step=None, active=None, default=None, unique_id=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """RankConfig - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._short_code = None
        self._short_code2 = None
        self._type = None
        self._order = None
        self._low_rank = None
        self._low_rank_step = None
        self._high_rank = None
        self._high_rank_step = None
        self._active = None
        self._default = None
        self._unique_id = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if short_code is not None:
            self.short_code = short_code
        if short_code2 is not None:
            self.short_code2 = short_code2
        if type is not None:
            self.type = type
        if order is not None:
            self.order = order
        if low_rank is not None:
            self.low_rank = low_rank
        if low_rank_step is not None:
            self.low_rank_step = low_rank_step
        if high_rank is not None:
            self.high_rank = high_rank
        if high_rank_step is not None:
            self.high_rank_step = high_rank_step
        if active is not None:
            self.active = active
        if default is not None:
            self.default = default
        if unique_id is not None:
            self.unique_id = unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def name(self):
        """Gets the name of this RankConfig.  # noqa: E501


        :return: The name of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RankConfig.


        :param name: The name of this RankConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_code(self):
        """Gets the short_code of this RankConfig.  # noqa: E501


        :return: The short_code of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this RankConfig.


        :param short_code: The short_code of this RankConfig.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def short_code2(self):
        """Gets the short_code2 of this RankConfig.  # noqa: E501


        :return: The short_code2 of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._short_code2

    @short_code2.setter
    def short_code2(self, short_code2):
        """Sets the short_code2 of this RankConfig.


        :param short_code2: The short_code2 of this RankConfig.  # noqa: E501
        :type: str
        """

        self._short_code2 = short_code2

    @property
    def type(self):
        """Gets the type of this RankConfig.  # noqa: E501


        :return: The type of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RankConfig.


        :param type: The type of this RankConfig.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def order(self):
        """Gets the order of this RankConfig.  # noqa: E501


        :return: The order of this RankConfig.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this RankConfig.


        :param order: The order of this RankConfig.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def low_rank(self):
        """Gets the low_rank of this RankConfig.  # noqa: E501


        :return: The low_rank of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._low_rank

    @low_rank.setter
    def low_rank(self, low_rank):
        """Sets the low_rank of this RankConfig.


        :param low_rank: The low_rank of this RankConfig.  # noqa: E501
        :type: str
        """

        self._low_rank = low_rank

    @property
    def low_rank_step(self):
        """Gets the low_rank_step of this RankConfig.  # noqa: E501


        :return: The low_rank_step of this RankConfig.  # noqa: E501
        :rtype: int
        """
        return self._low_rank_step

    @low_rank_step.setter
    def low_rank_step(self, low_rank_step):
        """Sets the low_rank_step of this RankConfig.


        :param low_rank_step: The low_rank_step of this RankConfig.  # noqa: E501
        :type: int
        """

        self._low_rank_step = low_rank_step

    @property
    def high_rank(self):
        """Gets the high_rank of this RankConfig.  # noqa: E501


        :return: The high_rank of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._high_rank

    @high_rank.setter
    def high_rank(self, high_rank):
        """Sets the high_rank of this RankConfig.


        :param high_rank: The high_rank of this RankConfig.  # noqa: E501
        :type: str
        """

        self._high_rank = high_rank

    @property
    def high_rank_step(self):
        """Gets the high_rank_step of this RankConfig.  # noqa: E501


        :return: The high_rank_step of this RankConfig.  # noqa: E501
        :rtype: int
        """
        return self._high_rank_step

    @high_rank_step.setter
    def high_rank_step(self, high_rank_step):
        """Sets the high_rank_step of this RankConfig.


        :param high_rank_step: The high_rank_step of this RankConfig.  # noqa: E501
        :type: int
        """

        self._high_rank_step = high_rank_step

    @property
    def active(self):
        """Gets the active of this RankConfig.  # noqa: E501


        :return: The active of this RankConfig.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RankConfig.


        :param active: The active of this RankConfig.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def default(self):
        """Gets the default of this RankConfig.  # noqa: E501


        :return: The default of this RankConfig.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RankConfig.


        :param default: The default of this RankConfig.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def unique_id(self):
        """Gets the unique_id of this RankConfig.  # noqa: E501


        :return: The unique_id of this RankConfig.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this RankConfig.


        :param unique_id: The unique_id of this RankConfig.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this RankConfig.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this RankConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RankConfig.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this RankConfig.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this RankConfig.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this RankConfig.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this RankConfig.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this RankConfig.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RankConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
