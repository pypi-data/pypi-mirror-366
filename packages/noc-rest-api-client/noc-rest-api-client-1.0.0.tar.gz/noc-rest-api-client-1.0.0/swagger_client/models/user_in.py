# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'type_b': 'str',
        'phone': 'str',
        'mobile': 'str',
        'voip': 'str',
        'ad_user': 'str',
        'active': 'bool',
        'groups': 'str'
    }

    attribute_map = {
        'username': 'Username',
        'password': 'Password',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'email': 'Email',
        'type_b': 'TypeB',
        'phone': 'Phone',
        'mobile': 'Mobile',
        'voip': 'VOIP',
        'ad_user': 'ADUser',
        'active': 'Active',
        'groups': 'Groups'
    }

    def __init__(self, username=None, password=None, first_name=None, last_name=None, email=None, type_b=None, phone=None, mobile=None, voip=None, ad_user=None, active=None, groups=None):  # noqa: E501
        """UserIn - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._type_b = None
        self._phone = None
        self._mobile = None
        self._voip = None
        self._ad_user = None
        self._active = None
        self._groups = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if type_b is not None:
            self.type_b = type_b
        if phone is not None:
            self.phone = phone
        if mobile is not None:
            self.mobile = mobile
        if voip is not None:
            self.voip = voip
        if ad_user is not None:
            self.ad_user = ad_user
        if active is not None:
            self.active = active
        if groups is not None:
            self.groups = groups

    @property
    def username(self):
        """Gets the username of this UserIn.  # noqa: E501


        :return: The username of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserIn.


        :param username: The username of this UserIn.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this UserIn.  # noqa: E501


        :return: The password of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserIn.


        :param password: The password of this UserIn.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UserIn.  # noqa: E501


        :return: The first_name of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserIn.


        :param first_name: The first_name of this UserIn.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserIn.  # noqa: E501


        :return: The last_name of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserIn.


        :param last_name: The last_name of this UserIn.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserIn.  # noqa: E501


        :return: The email of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserIn.


        :param email: The email of this UserIn.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def type_b(self):
        """Gets the type_b of this UserIn.  # noqa: E501


        :return: The type_b of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._type_b

    @type_b.setter
    def type_b(self, type_b):
        """Sets the type_b of this UserIn.


        :param type_b: The type_b of this UserIn.  # noqa: E501
        :type: str
        """

        self._type_b = type_b

    @property
    def phone(self):
        """Gets the phone of this UserIn.  # noqa: E501


        :return: The phone of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserIn.


        :param phone: The phone of this UserIn.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def mobile(self):
        """Gets the mobile of this UserIn.  # noqa: E501


        :return: The mobile of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this UserIn.


        :param mobile: The mobile of this UserIn.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def voip(self):
        """Gets the voip of this UserIn.  # noqa: E501


        :return: The voip of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._voip

    @voip.setter
    def voip(self, voip):
        """Sets the voip of this UserIn.


        :param voip: The voip of this UserIn.  # noqa: E501
        :type: str
        """

        self._voip = voip

    @property
    def ad_user(self):
        """Gets the ad_user of this UserIn.  # noqa: E501


        :return: The ad_user of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._ad_user

    @ad_user.setter
    def ad_user(self, ad_user):
        """Sets the ad_user of this UserIn.


        :param ad_user: The ad_user of this UserIn.  # noqa: E501
        :type: str
        """

        self._ad_user = ad_user

    @property
    def active(self):
        """Gets the active of this UserIn.  # noqa: E501


        :return: The active of this UserIn.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserIn.


        :param active: The active of this UserIn.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def groups(self):
        """Gets the groups of this UserIn.  # noqa: E501


        :return: The groups of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserIn.


        :param groups: The groups of this UserIn.  # noqa: E501
        :type: str
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
