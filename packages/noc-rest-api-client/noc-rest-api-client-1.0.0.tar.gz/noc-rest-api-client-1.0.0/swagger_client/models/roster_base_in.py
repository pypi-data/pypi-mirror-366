# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RosterBaseIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flight_date': 'datetime',
        'departure_airport': 'str',
        'arrival_airport': 'str',
        'crew_number': 'str',
        'flight_number': 'str',
        'callsign': 'str',
        'unique_id': 'int',
        'roster_legal_exceptions': 'list[RosterLegalException]',
        'designators': 'list[RosterDesignator]',
        'roster_time': 'RosterTime',
        'times': 'list[Time]',
        'dead_head_booking_number': 'str'
    }

    attribute_map = {
        'flight_date': 'FlightDate',
        'departure_airport': 'DepartureAirport',
        'arrival_airport': 'ArrivalAirport',
        'crew_number': 'CrewNumber',
        'flight_number': 'FlightNumber',
        'callsign': 'Callsign',
        'unique_id': 'UniqueId',
        'roster_legal_exceptions': 'RosterLegalExceptions',
        'designators': 'Designators',
        'roster_time': 'RosterTime',
        'times': 'Times',
        'dead_head_booking_number': 'DeadHeadBookingNumber'
    }

    def __init__(self, flight_date=None, departure_airport=None, arrival_airport=None, crew_number=None, flight_number=None, callsign=None, unique_id=None, roster_legal_exceptions=None, designators=None, roster_time=None, times=None, dead_head_booking_number=None):  # noqa: E501
        """RosterBaseIn - a model defined in Swagger"""  # noqa: E501
        self._flight_date = None
        self._departure_airport = None
        self._arrival_airport = None
        self._crew_number = None
        self._flight_number = None
        self._callsign = None
        self._unique_id = None
        self._roster_legal_exceptions = None
        self._designators = None
        self._roster_time = None
        self._times = None
        self._dead_head_booking_number = None
        self.discriminator = None
        if flight_date is not None:
            self.flight_date = flight_date
        if departure_airport is not None:
            self.departure_airport = departure_airport
        if arrival_airport is not None:
            self.arrival_airport = arrival_airport
        if crew_number is not None:
            self.crew_number = crew_number
        if flight_number is not None:
            self.flight_number = flight_number
        if callsign is not None:
            self.callsign = callsign
        if unique_id is not None:
            self.unique_id = unique_id
        if roster_legal_exceptions is not None:
            self.roster_legal_exceptions = roster_legal_exceptions
        if designators is not None:
            self.designators = designators
        if roster_time is not None:
            self.roster_time = roster_time
        if times is not None:
            self.times = times
        if dead_head_booking_number is not None:
            self.dead_head_booking_number = dead_head_booking_number

    @property
    def flight_date(self):
        """Gets the flight_date of this RosterBaseIn.  # noqa: E501


        :return: The flight_date of this RosterBaseIn.  # noqa: E501
        :rtype: datetime
        """
        return self._flight_date

    @flight_date.setter
    def flight_date(self, flight_date):
        """Sets the flight_date of this RosterBaseIn.


        :param flight_date: The flight_date of this RosterBaseIn.  # noqa: E501
        :type: datetime
        """

        self._flight_date = flight_date

    @property
    def departure_airport(self):
        """Gets the departure_airport of this RosterBaseIn.  # noqa: E501


        :return: The departure_airport of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._departure_airport

    @departure_airport.setter
    def departure_airport(self, departure_airport):
        """Sets the departure_airport of this RosterBaseIn.


        :param departure_airport: The departure_airport of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._departure_airport = departure_airport

    @property
    def arrival_airport(self):
        """Gets the arrival_airport of this RosterBaseIn.  # noqa: E501


        :return: The arrival_airport of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._arrival_airport

    @arrival_airport.setter
    def arrival_airport(self, arrival_airport):
        """Sets the arrival_airport of this RosterBaseIn.


        :param arrival_airport: The arrival_airport of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._arrival_airport = arrival_airport

    @property
    def crew_number(self):
        """Gets the crew_number of this RosterBaseIn.  # noqa: E501


        :return: The crew_number of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._crew_number

    @crew_number.setter
    def crew_number(self, crew_number):
        """Sets the crew_number of this RosterBaseIn.


        :param crew_number: The crew_number of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._crew_number = crew_number

    @property
    def flight_number(self):
        """Gets the flight_number of this RosterBaseIn.  # noqa: E501


        :return: The flight_number of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this RosterBaseIn.


        :param flight_number: The flight_number of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._flight_number = flight_number

    @property
    def callsign(self):
        """Gets the callsign of this RosterBaseIn.  # noqa: E501


        :return: The callsign of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._callsign

    @callsign.setter
    def callsign(self, callsign):
        """Sets the callsign of this RosterBaseIn.


        :param callsign: The callsign of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._callsign = callsign

    @property
    def unique_id(self):
        """Gets the unique_id of this RosterBaseIn.  # noqa: E501


        :return: The unique_id of this RosterBaseIn.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this RosterBaseIn.


        :param unique_id: The unique_id of this RosterBaseIn.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def roster_legal_exceptions(self):
        """Gets the roster_legal_exceptions of this RosterBaseIn.  # noqa: E501


        :return: The roster_legal_exceptions of this RosterBaseIn.  # noqa: E501
        :rtype: list[RosterLegalException]
        """
        return self._roster_legal_exceptions

    @roster_legal_exceptions.setter
    def roster_legal_exceptions(self, roster_legal_exceptions):
        """Sets the roster_legal_exceptions of this RosterBaseIn.


        :param roster_legal_exceptions: The roster_legal_exceptions of this RosterBaseIn.  # noqa: E501
        :type: list[RosterLegalException]
        """

        self._roster_legal_exceptions = roster_legal_exceptions

    @property
    def designators(self):
        """Gets the designators of this RosterBaseIn.  # noqa: E501


        :return: The designators of this RosterBaseIn.  # noqa: E501
        :rtype: list[RosterDesignator]
        """
        return self._designators

    @designators.setter
    def designators(self, designators):
        """Sets the designators of this RosterBaseIn.


        :param designators: The designators of this RosterBaseIn.  # noqa: E501
        :type: list[RosterDesignator]
        """

        self._designators = designators

    @property
    def roster_time(self):
        """Gets the roster_time of this RosterBaseIn.  # noqa: E501


        :return: The roster_time of this RosterBaseIn.  # noqa: E501
        :rtype: RosterTime
        """
        return self._roster_time

    @roster_time.setter
    def roster_time(self, roster_time):
        """Sets the roster_time of this RosterBaseIn.


        :param roster_time: The roster_time of this RosterBaseIn.  # noqa: E501
        :type: RosterTime
        """

        self._roster_time = roster_time

    @property
    def times(self):
        """Gets the times of this RosterBaseIn.  # noqa: E501


        :return: The times of this RosterBaseIn.  # noqa: E501
        :rtype: list[Time]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this RosterBaseIn.


        :param times: The times of this RosterBaseIn.  # noqa: E501
        :type: list[Time]
        """

        self._times = times

    @property
    def dead_head_booking_number(self):
        """Gets the dead_head_booking_number of this RosterBaseIn.  # noqa: E501


        :return: The dead_head_booking_number of this RosterBaseIn.  # noqa: E501
        :rtype: str
        """
        return self._dead_head_booking_number

    @dead_head_booking_number.setter
    def dead_head_booking_number(self, dead_head_booking_number):
        """Sets the dead_head_booking_number of this RosterBaseIn.


        :param dead_head_booking_number: The dead_head_booking_number of this RosterBaseIn.  # noqa: E501
        :type: str
        """

        self._dead_head_booking_number = dead_head_booking_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RosterBaseIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RosterBaseIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
