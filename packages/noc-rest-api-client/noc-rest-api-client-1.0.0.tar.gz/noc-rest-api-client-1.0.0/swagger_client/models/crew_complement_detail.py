# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrewComplementDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'str',
        'minimum': 'int',
        'maximum': 'int',
        'supplementary': 'int',
        'order': 'int'
    }

    attribute_map = {
        'filter': 'Filter',
        'minimum': 'Minimum',
        'maximum': 'Maximum',
        'supplementary': 'Supplementary',
        'order': 'Order'
    }

    def __init__(self, filter=None, minimum=None, maximum=None, supplementary=None, order=None):  # noqa: E501
        """CrewComplementDetail - a model defined in Swagger"""  # noqa: E501
        self._filter = None
        self._minimum = None
        self._maximum = None
        self._supplementary = None
        self._order = None
        self.discriminator = None
        if filter is not None:
            self.filter = filter
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum
        if supplementary is not None:
            self.supplementary = supplementary
        if order is not None:
            self.order = order

    @property
    def filter(self):
        """Gets the filter of this CrewComplementDetail.  # noqa: E501


        :return: The filter of this CrewComplementDetail.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CrewComplementDetail.


        :param filter: The filter of this CrewComplementDetail.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def minimum(self):
        """Gets the minimum of this CrewComplementDetail.  # noqa: E501


        :return: The minimum of this CrewComplementDetail.  # noqa: E501
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this CrewComplementDetail.


        :param minimum: The minimum of this CrewComplementDetail.  # noqa: E501
        :type: int
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this CrewComplementDetail.  # noqa: E501


        :return: The maximum of this CrewComplementDetail.  # noqa: E501
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this CrewComplementDetail.


        :param maximum: The maximum of this CrewComplementDetail.  # noqa: E501
        :type: int
        """

        self._maximum = maximum

    @property
    def supplementary(self):
        """Gets the supplementary of this CrewComplementDetail.  # noqa: E501


        :return: The supplementary of this CrewComplementDetail.  # noqa: E501
        :rtype: int
        """
        return self._supplementary

    @supplementary.setter
    def supplementary(self, supplementary):
        """Sets the supplementary of this CrewComplementDetail.


        :param supplementary: The supplementary of this CrewComplementDetail.  # noqa: E501
        :type: int
        """

        self._supplementary = supplementary

    @property
    def order(self):
        """Gets the order of this CrewComplementDetail.  # noqa: E501


        :return: The order of this CrewComplementDetail.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CrewComplementDetail.


        :param order: The order of this CrewComplementDetail.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrewComplementDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrewComplementDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
