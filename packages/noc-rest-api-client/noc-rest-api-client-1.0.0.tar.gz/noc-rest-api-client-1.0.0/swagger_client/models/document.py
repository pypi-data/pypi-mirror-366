# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'code': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'maiden_name': 'str',
        'date_of_birth': 'datetime',
        'place_of_birth': 'str',
        'country_of_birth': 'str',
        'country': 'str',
        'number': 'str',
        'issue_authority': 'str',
        'issue': 'datetime',
        'issue_country': 'str',
        'expiry': 'datetime',
        'document_name': 'str'
    }

    attribute_map = {
        'active': 'Active',
        'code': 'Code',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'middle_name': 'MiddleName',
        'maiden_name': 'MaidenName',
        'date_of_birth': 'DateOfBirth',
        'place_of_birth': 'PlaceOfBirth',
        'country_of_birth': 'CountryOfBirth',
        'country': 'Country',
        'number': 'Number',
        'issue_authority': 'IssueAuthority',
        'issue': 'Issue',
        'issue_country': 'IssueCountry',
        'expiry': 'Expiry',
        'document_name': 'DocumentName'
    }

    def __init__(self, active=None, code=None, first_name=None, last_name=None, middle_name=None, maiden_name=None, date_of_birth=None, place_of_birth=None, country_of_birth=None, country=None, number=None, issue_authority=None, issue=None, issue_country=None, expiry=None, document_name=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._code = None
        self._first_name = None
        self._last_name = None
        self._middle_name = None
        self._maiden_name = None
        self._date_of_birth = None
        self._place_of_birth = None
        self._country_of_birth = None
        self._country = None
        self._number = None
        self._issue_authority = None
        self._issue = None
        self._issue_country = None
        self._expiry = None
        self._document_name = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if code is not None:
            self.code = code
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if maiden_name is not None:
            self.maiden_name = maiden_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        if country is not None:
            self.country = country
        if number is not None:
            self.number = number
        if issue_authority is not None:
            self.issue_authority = issue_authority
        if issue is not None:
            self.issue = issue
        if issue_country is not None:
            self.issue_country = issue_country
        if expiry is not None:
            self.expiry = expiry
        if document_name is not None:
            self.document_name = document_name

    @property
    def active(self):
        """Gets the active of this Document.  # noqa: E501


        :return: The active of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Document.


        :param active: The active of this Document.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def code(self):
        """Gets the code of this Document.  # noqa: E501

        Document ShortCode  # noqa: E501

        :return: The code of this Document.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Document.

        Document ShortCode  # noqa: E501

        :param code: The code of this Document.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def first_name(self):
        """Gets the first_name of this Document.  # noqa: E501


        :return: The first_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Document.


        :param first_name: The first_name of this Document.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Document.  # noqa: E501


        :return: The last_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Document.


        :param last_name: The last_name of this Document.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Document.  # noqa: E501


        :return: The middle_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Document.


        :param middle_name: The middle_name of this Document.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def maiden_name(self):
        """Gets the maiden_name of this Document.  # noqa: E501


        :return: The maiden_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this Document.


        :param maiden_name: The maiden_name of this Document.  # noqa: E501
        :type: str
        """

        self._maiden_name = maiden_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Document.  # noqa: E501


        :return: The date_of_birth of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Document.


        :param date_of_birth: The date_of_birth of this Document.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this Document.  # noqa: E501


        :return: The place_of_birth of this Document.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this Document.


        :param place_of_birth: The place_of_birth of this Document.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this Document.  # noqa: E501

        Country of birth ShortCode  # noqa: E501

        :return: The country_of_birth of this Document.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this Document.

        Country of birth ShortCode  # noqa: E501

        :param country_of_birth: The country_of_birth of this Document.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def country(self):
        """Gets the country of this Document.  # noqa: E501

        Country ShortCode  # noqa: E501

        :return: The country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Document.

        Country ShortCode  # noqa: E501

        :param country: The country of this Document.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def number(self):
        """Gets the number of this Document.  # noqa: E501

        Document number  # noqa: E501

        :return: The number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Document.

        Document number  # noqa: E501

        :param number: The number of this Document.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def issue_authority(self):
        """Gets the issue_authority of this Document.  # noqa: E501


        :return: The issue_authority of this Document.  # noqa: E501
        :rtype: str
        """
        return self._issue_authority

    @issue_authority.setter
    def issue_authority(self, issue_authority):
        """Sets the issue_authority of this Document.


        :param issue_authority: The issue_authority of this Document.  # noqa: E501
        :type: str
        """

        self._issue_authority = issue_authority

    @property
    def issue(self):
        """Gets the issue of this Document.  # noqa: E501


        :return: The issue of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Document.


        :param issue: The issue of this Document.  # noqa: E501
        :type: datetime
        """

        self._issue = issue

    @property
    def issue_country(self):
        """Gets the issue_country of this Document.  # noqa: E501

        Issue country ShortCode  # noqa: E501

        :return: The issue_country of this Document.  # noqa: E501
        :rtype: str
        """
        return self._issue_country

    @issue_country.setter
    def issue_country(self, issue_country):
        """Sets the issue_country of this Document.

        Issue country ShortCode  # noqa: E501

        :param issue_country: The issue_country of this Document.  # noqa: E501
        :type: str
        """

        self._issue_country = issue_country

    @property
    def expiry(self):
        """Gets the expiry of this Document.  # noqa: E501


        :return: The expiry of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this Document.


        :param expiry: The expiry of this Document.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def document_name(self):
        """Gets the document_name of this Document.  # noqa: E501


        :return: The document_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this Document.


        :param document_name: The document_name of this Document.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
