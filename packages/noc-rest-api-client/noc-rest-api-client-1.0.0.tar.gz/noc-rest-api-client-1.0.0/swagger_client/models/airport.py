# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Airport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'city_name': 'str',
        'local_name': 'str',
        'iata': 'str',
        'icao': 'str',
        'country': 'str',
        'gate': 'str',
        'stand': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'slot_level': 'str',
        'daylight_saving_times': 'list[DaylightSavingTime]',
        'timezones': 'list[Timezone]',
        'slot_levels': 'list[SlotLevel]',
        'station_facilities': 'list[StationFacility]',
        'station_distances': 'list[AirportDistanceData]',
        'station_categories': 'list[StationCategory]'
    }

    attribute_map = {
        'name': 'Name',
        'city_name': 'CityName',
        'local_name': 'LocalName',
        'iata': 'IATA',
        'icao': 'ICAO',
        'country': 'Country',
        'gate': 'Gate',
        'stand': 'Stand',
        'latitude': 'Latitude',
        'longitude': 'Longitude',
        'slot_level': 'SlotLevel',
        'daylight_saving_times': 'DaylightSavingTimes',
        'timezones': 'Timezones',
        'slot_levels': 'SlotLevels',
        'station_facilities': 'StationFacilities',
        'station_distances': 'StationDistances',
        'station_categories': 'StationCategories'
    }

    def __init__(self, name=None, city_name=None, local_name=None, iata=None, icao=None, country=None, gate=None, stand=None, latitude=None, longitude=None, slot_level=None, daylight_saving_times=None, timezones=None, slot_levels=None, station_facilities=None, station_distances=None, station_categories=None):  # noqa: E501
        """Airport - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._city_name = None
        self._local_name = None
        self._iata = None
        self._icao = None
        self._country = None
        self._gate = None
        self._stand = None
        self._latitude = None
        self._longitude = None
        self._slot_level = None
        self._daylight_saving_times = None
        self._timezones = None
        self._slot_levels = None
        self._station_facilities = None
        self._station_distances = None
        self._station_categories = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if city_name is not None:
            self.city_name = city_name
        if local_name is not None:
            self.local_name = local_name
        if iata is not None:
            self.iata = iata
        if icao is not None:
            self.icao = icao
        if country is not None:
            self.country = country
        if gate is not None:
            self.gate = gate
        if stand is not None:
            self.stand = stand
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if slot_level is not None:
            self.slot_level = slot_level
        if daylight_saving_times is not None:
            self.daylight_saving_times = daylight_saving_times
        if timezones is not None:
            self.timezones = timezones
        if slot_levels is not None:
            self.slot_levels = slot_levels
        if station_facilities is not None:
            self.station_facilities = station_facilities
        if station_distances is not None:
            self.station_distances = station_distances
        if station_categories is not None:
            self.station_categories = station_categories

    @property
    def name(self):
        """Gets the name of this Airport.  # noqa: E501


        :return: The name of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Airport.


        :param name: The name of this Airport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def city_name(self):
        """Gets the city_name of this Airport.  # noqa: E501


        :return: The city_name of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this Airport.


        :param city_name: The city_name of this Airport.  # noqa: E501
        :type: str
        """

        self._city_name = city_name

    @property
    def local_name(self):
        """Gets the local_name of this Airport.  # noqa: E501


        :return: The local_name of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this Airport.


        :param local_name: The local_name of this Airport.  # noqa: E501
        :type: str
        """

        self._local_name = local_name

    @property
    def iata(self):
        """Gets the iata of this Airport.  # noqa: E501


        :return: The iata of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._iata

    @iata.setter
    def iata(self, iata):
        """Sets the iata of this Airport.


        :param iata: The iata of this Airport.  # noqa: E501
        :type: str
        """

        self._iata = iata

    @property
    def icao(self):
        """Gets the icao of this Airport.  # noqa: E501


        :return: The icao of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._icao

    @icao.setter
    def icao(self, icao):
        """Sets the icao of this Airport.


        :param icao: The icao of this Airport.  # noqa: E501
        :type: str
        """

        self._icao = icao

    @property
    def country(self):
        """Gets the country of this Airport.  # noqa: E501


        :return: The country of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Airport.


        :param country: The country of this Airport.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def gate(self):
        """Gets the gate of this Airport.  # noqa: E501


        :return: The gate of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._gate

    @gate.setter
    def gate(self, gate):
        """Sets the gate of this Airport.


        :param gate: The gate of this Airport.  # noqa: E501
        :type: str
        """

        self._gate = gate

    @property
    def stand(self):
        """Gets the stand of this Airport.  # noqa: E501


        :return: The stand of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._stand

    @stand.setter
    def stand(self, stand):
        """Sets the stand of this Airport.


        :param stand: The stand of this Airport.  # noqa: E501
        :type: str
        """

        self._stand = stand

    @property
    def latitude(self):
        """Gets the latitude of this Airport.  # noqa: E501


        :return: The latitude of this Airport.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Airport.


        :param latitude: The latitude of this Airport.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Airport.  # noqa: E501


        :return: The longitude of this Airport.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Airport.


        :param longitude: The longitude of this Airport.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def slot_level(self):
        """Gets the slot_level of this Airport.  # noqa: E501


        :return: The slot_level of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._slot_level

    @slot_level.setter
    def slot_level(self, slot_level):
        """Sets the slot_level of this Airport.


        :param slot_level: The slot_level of this Airport.  # noqa: E501
        :type: str
        """

        self._slot_level = slot_level

    @property
    def daylight_saving_times(self):
        """Gets the daylight_saving_times of this Airport.  # noqa: E501


        :return: The daylight_saving_times of this Airport.  # noqa: E501
        :rtype: list[DaylightSavingTime]
        """
        return self._daylight_saving_times

    @daylight_saving_times.setter
    def daylight_saving_times(self, daylight_saving_times):
        """Sets the daylight_saving_times of this Airport.


        :param daylight_saving_times: The daylight_saving_times of this Airport.  # noqa: E501
        :type: list[DaylightSavingTime]
        """

        self._daylight_saving_times = daylight_saving_times

    @property
    def timezones(self):
        """Gets the timezones of this Airport.  # noqa: E501


        :return: The timezones of this Airport.  # noqa: E501
        :rtype: list[Timezone]
        """
        return self._timezones

    @timezones.setter
    def timezones(self, timezones):
        """Sets the timezones of this Airport.


        :param timezones: The timezones of this Airport.  # noqa: E501
        :type: list[Timezone]
        """

        self._timezones = timezones

    @property
    def slot_levels(self):
        """Gets the slot_levels of this Airport.  # noqa: E501


        :return: The slot_levels of this Airport.  # noqa: E501
        :rtype: list[SlotLevel]
        """
        return self._slot_levels

    @slot_levels.setter
    def slot_levels(self, slot_levels):
        """Sets the slot_levels of this Airport.


        :param slot_levels: The slot_levels of this Airport.  # noqa: E501
        :type: list[SlotLevel]
        """

        self._slot_levels = slot_levels

    @property
    def station_facilities(self):
        """Gets the station_facilities of this Airport.  # noqa: E501


        :return: The station_facilities of this Airport.  # noqa: E501
        :rtype: list[StationFacility]
        """
        return self._station_facilities

    @station_facilities.setter
    def station_facilities(self, station_facilities):
        """Sets the station_facilities of this Airport.


        :param station_facilities: The station_facilities of this Airport.  # noqa: E501
        :type: list[StationFacility]
        """

        self._station_facilities = station_facilities

    @property
    def station_distances(self):
        """Gets the station_distances of this Airport.  # noqa: E501


        :return: The station_distances of this Airport.  # noqa: E501
        :rtype: list[AirportDistanceData]
        """
        return self._station_distances

    @station_distances.setter
    def station_distances(self, station_distances):
        """Sets the station_distances of this Airport.


        :param station_distances: The station_distances of this Airport.  # noqa: E501
        :type: list[AirportDistanceData]
        """

        self._station_distances = station_distances

    @property
    def station_categories(self):
        """Gets the station_categories of this Airport.  # noqa: E501


        :return: The station_categories of this Airport.  # noqa: E501
        :rtype: list[StationCategory]
        """
        return self._station_categories

    @station_categories.setter
    def station_categories(self, station_categories):
        """Sets the station_categories of this Airport.


        :param station_categories: The station_categories of this Airport.  # noqa: E501
        :type: list[StationCategory]
        """

        self._station_categories = station_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Airport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Airport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
