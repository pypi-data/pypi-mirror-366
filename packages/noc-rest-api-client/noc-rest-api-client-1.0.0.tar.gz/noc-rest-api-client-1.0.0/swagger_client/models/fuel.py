# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fuel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'source': 'str',
        'quantity': 'float',
        'quantity_unit': 'str',
        'density': 'float',
        'density_unit': 'str'
    }

    attribute_map = {
        'type': 'Type',
        'source': 'Source',
        'quantity': 'Quantity',
        'quantity_unit': 'QuantityUnit',
        'density': 'Density',
        'density_unit': 'DensityUnit'
    }

    def __init__(self, type=None, source=None, quantity=None, quantity_unit=None, density=None, density_unit=None):  # noqa: E501
        """Fuel - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._source = None
        self._quantity = None
        self._quantity_unit = None
        self._density = None
        self._density_unit = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if source is not None:
            self.source = source
        if quantity is not None:
            self.quantity = quantity
        if quantity_unit is not None:
            self.quantity_unit = quantity_unit
        if density is not None:
            self.density = density
        if density_unit is not None:
            self.density_unit = density_unit

    @property
    def type(self):
        """Gets the type of this Fuel.  # noqa: E501


        :return: The type of this Fuel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Fuel.


        :param type: The type of this Fuel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def source(self):
        """Gets the source of this Fuel.  # noqa: E501


        :return: The source of this Fuel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Fuel.


        :param source: The source of this Fuel.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def quantity(self):
        """Gets the quantity of this Fuel.  # noqa: E501


        :return: The quantity of this Fuel.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Fuel.


        :param quantity: The quantity of this Fuel.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this Fuel.  # noqa: E501


        :return: The quantity_unit of this Fuel.  # noqa: E501
        :rtype: str
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this Fuel.


        :param quantity_unit: The quantity_unit of this Fuel.  # noqa: E501
        :type: str
        """

        self._quantity_unit = quantity_unit

    @property
    def density(self):
        """Gets the density of this Fuel.  # noqa: E501


        :return: The density of this Fuel.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this Fuel.


        :param density: The density of this Fuel.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def density_unit(self):
        """Gets the density_unit of this Fuel.  # noqa: E501


        :return: The density_unit of this Fuel.  # noqa: E501
        :rtype: str
        """
        return self._density_unit

    @density_unit.setter
    def density_unit(self, density_unit):
        """Sets the density_unit of this Fuel.


        :param density_unit: The density_unit of this Fuel.  # noqa: E501
        :type: str
        """

        self._density_unit = density_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fuel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fuel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
