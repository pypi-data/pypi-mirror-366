# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Flight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'airline_code': 'str',
        'icao_airline_code': 'str',
        'flight_number': 'int',
        'suffix': 'str',
        'departure_airport_code': 'str',
        'arrival_airport_code': 'str',
        'diversion_airport_code': 'str',
        'flight_date': 'datetime',
        'std': 'datetime',
        'sta': 'datetime',
        'aircraft_registration': 'str',
        'service_type_code': 'str',
        'onward_airline_code': 'str',
        'onward_flight_number': 'int',
        'onward_suffix': 'str',
        'status': 'str',
        'type': 'str',
        'canceled': 'bool',
        'departure_local_time_diff': 'int',
        'arrival_local_time_diff': 'int',
        'irops_parent_id': 'int',
        'overall_modified_time': 'datetime',
        'overall_modified_by_unique_id': 'int',
        'asm_reasons': 'str',
        'complement': 'str',
        'co2': 'float',
        'schedule_gcdkm': 'float',
        'schedule_gcdnm': 'float',
        'schedule_blh': 'str',
        'actual_blh_time_span': 'str',
        'aircraft': 'Aircraft',
        'airports': 'Airports',
        'crew_on_board': 'list[CrewOnBoard]',
        'delays': 'DelaysOut',
        'flightplan': 'Flightplan',
        'fuels': 'list[FuelOut]',
        'loads': 'Loads',
        'notes': 'list[Note]',
        'times': 'list[TimeOut]',
        'latts': 'list[Latt]',
        'roundtrip': 'Roundtrip',
        'project_codes': 'list[ProjectCode]',
        'legal_exceptions': 'list[LegLegalException]',
        'jumpseaters': 'list[Jumpseater]',
        'atc_edct': 'AtcEdctOut',
        'fuel_data': 'FuelData',
        'detailed_statuses': 'list[str]',
        'desk': 'str',
        'departure_sched_taxi_mins': 'int',
        'arrival_sched_taxi_mins': 'int'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'airline_code': 'AirlineCode',
        'icao_airline_code': 'ICAOAirlineCode',
        'flight_number': 'FlightNumber',
        'suffix': 'Suffix',
        'departure_airport_code': 'DepartureAirportCode',
        'arrival_airport_code': 'ArrivalAirportCode',
        'diversion_airport_code': 'DiversionAirportCode',
        'flight_date': 'FlightDate',
        'std': 'STD',
        'sta': 'STA',
        'aircraft_registration': 'AircraftRegistration',
        'service_type_code': 'ServiceTypeCode',
        'onward_airline_code': 'OnwardAirlineCode',
        'onward_flight_number': 'OnwardFlightNumber',
        'onward_suffix': 'OnwardSuffix',
        'status': 'Status',
        'type': 'Type',
        'canceled': 'Canceled',
        'departure_local_time_diff': 'DepartureLocalTimeDiff',
        'arrival_local_time_diff': 'ArrivalLocalTimeDiff',
        'irops_parent_id': 'IROPSParentId',
        'overall_modified_time': 'OverallModifiedTime',
        'overall_modified_by_unique_id': 'OverallModifiedByUniqueId',
        'asm_reasons': 'ASMReasons',
        'complement': 'Complement',
        'co2': 'CO2',
        'schedule_gcdkm': 'ScheduleGCDKM',
        'schedule_gcdnm': 'ScheduleGCDNM',
        'schedule_blh': 'ScheduleBLH',
        'actual_blh_time_span': 'ActualBLHTimeSpan',
        'aircraft': 'Aircraft',
        'airports': 'Airports',
        'crew_on_board': 'CrewOnBoard',
        'delays': 'Delays',
        'flightplan': 'Flightplan',
        'fuels': 'Fuels',
        'loads': 'Loads',
        'notes': 'Notes',
        'times': 'Times',
        'latts': 'Latts',
        'roundtrip': 'Roundtrip',
        'project_codes': 'ProjectCodes',
        'legal_exceptions': 'LegalExceptions',
        'jumpseaters': 'Jumpseaters',
        'atc_edct': 'AtcEdct',
        'fuel_data': 'FuelData',
        'detailed_statuses': 'DetailedStatuses',
        'desk': 'Desk',
        'departure_sched_taxi_mins': 'DepartureSchedTaxiMins',
        'arrival_sched_taxi_mins': 'ArrivalSchedTaxiMins'
    }

    def __init__(self, unique_id=None, airline_code=None, icao_airline_code=None, flight_number=None, suffix=None, departure_airport_code=None, arrival_airport_code=None, diversion_airport_code=None, flight_date=None, std=None, sta=None, aircraft_registration=None, service_type_code=None, onward_airline_code=None, onward_flight_number=None, onward_suffix=None, status=None, type=None, canceled=None, departure_local_time_diff=None, arrival_local_time_diff=None, irops_parent_id=None, overall_modified_time=None, overall_modified_by_unique_id=None, asm_reasons=None, complement=None, co2=None, schedule_gcdkm=None, schedule_gcdnm=None, schedule_blh=None, actual_blh_time_span=None, aircraft=None, airports=None, crew_on_board=None, delays=None, flightplan=None, fuels=None, loads=None, notes=None, times=None, latts=None, roundtrip=None, project_codes=None, legal_exceptions=None, jumpseaters=None, atc_edct=None, fuel_data=None, detailed_statuses=None, desk=None, departure_sched_taxi_mins=None, arrival_sched_taxi_mins=None):  # noqa: E501
        """Flight - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._airline_code = None
        self._icao_airline_code = None
        self._flight_number = None
        self._suffix = None
        self._departure_airport_code = None
        self._arrival_airport_code = None
        self._diversion_airport_code = None
        self._flight_date = None
        self._std = None
        self._sta = None
        self._aircraft_registration = None
        self._service_type_code = None
        self._onward_airline_code = None
        self._onward_flight_number = None
        self._onward_suffix = None
        self._status = None
        self._type = None
        self._canceled = None
        self._departure_local_time_diff = None
        self._arrival_local_time_diff = None
        self._irops_parent_id = None
        self._overall_modified_time = None
        self._overall_modified_by_unique_id = None
        self._asm_reasons = None
        self._complement = None
        self._co2 = None
        self._schedule_gcdkm = None
        self._schedule_gcdnm = None
        self._schedule_blh = None
        self._actual_blh_time_span = None
        self._aircraft = None
        self._airports = None
        self._crew_on_board = None
        self._delays = None
        self._flightplan = None
        self._fuels = None
        self._loads = None
        self._notes = None
        self._times = None
        self._latts = None
        self._roundtrip = None
        self._project_codes = None
        self._legal_exceptions = None
        self._jumpseaters = None
        self._atc_edct = None
        self._fuel_data = None
        self._detailed_statuses = None
        self._desk = None
        self._departure_sched_taxi_mins = None
        self._arrival_sched_taxi_mins = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if airline_code is not None:
            self.airline_code = airline_code
        if icao_airline_code is not None:
            self.icao_airline_code = icao_airline_code
        if flight_number is not None:
            self.flight_number = flight_number
        if suffix is not None:
            self.suffix = suffix
        if departure_airport_code is not None:
            self.departure_airport_code = departure_airport_code
        if arrival_airport_code is not None:
            self.arrival_airport_code = arrival_airport_code
        if diversion_airport_code is not None:
            self.diversion_airport_code = diversion_airport_code
        if flight_date is not None:
            self.flight_date = flight_date
        if std is not None:
            self.std = std
        if sta is not None:
            self.sta = sta
        if aircraft_registration is not None:
            self.aircraft_registration = aircraft_registration
        if service_type_code is not None:
            self.service_type_code = service_type_code
        if onward_airline_code is not None:
            self.onward_airline_code = onward_airline_code
        if onward_flight_number is not None:
            self.onward_flight_number = onward_flight_number
        if onward_suffix is not None:
            self.onward_suffix = onward_suffix
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if canceled is not None:
            self.canceled = canceled
        if departure_local_time_diff is not None:
            self.departure_local_time_diff = departure_local_time_diff
        if arrival_local_time_diff is not None:
            self.arrival_local_time_diff = arrival_local_time_diff
        if irops_parent_id is not None:
            self.irops_parent_id = irops_parent_id
        if overall_modified_time is not None:
            self.overall_modified_time = overall_modified_time
        if overall_modified_by_unique_id is not None:
            self.overall_modified_by_unique_id = overall_modified_by_unique_id
        if asm_reasons is not None:
            self.asm_reasons = asm_reasons
        if complement is not None:
            self.complement = complement
        if co2 is not None:
            self.co2 = co2
        if schedule_gcdkm is not None:
            self.schedule_gcdkm = schedule_gcdkm
        if schedule_gcdnm is not None:
            self.schedule_gcdnm = schedule_gcdnm
        if schedule_blh is not None:
            self.schedule_blh = schedule_blh
        if actual_blh_time_span is not None:
            self.actual_blh_time_span = actual_blh_time_span
        if aircraft is not None:
            self.aircraft = aircraft
        if airports is not None:
            self.airports = airports
        if crew_on_board is not None:
            self.crew_on_board = crew_on_board
        if delays is not None:
            self.delays = delays
        if flightplan is not None:
            self.flightplan = flightplan
        if fuels is not None:
            self.fuels = fuels
        if loads is not None:
            self.loads = loads
        if notes is not None:
            self.notes = notes
        if times is not None:
            self.times = times
        if latts is not None:
            self.latts = latts
        if roundtrip is not None:
            self.roundtrip = roundtrip
        if project_codes is not None:
            self.project_codes = project_codes
        if legal_exceptions is not None:
            self.legal_exceptions = legal_exceptions
        if jumpseaters is not None:
            self.jumpseaters = jumpseaters
        if atc_edct is not None:
            self.atc_edct = atc_edct
        if fuel_data is not None:
            self.fuel_data = fuel_data
        if detailed_statuses is not None:
            self.detailed_statuses = detailed_statuses
        if desk is not None:
            self.desk = desk
        if departure_sched_taxi_mins is not None:
            self.departure_sched_taxi_mins = departure_sched_taxi_mins
        if arrival_sched_taxi_mins is not None:
            self.arrival_sched_taxi_mins = arrival_sched_taxi_mins

    @property
    def unique_id(self):
        """Gets the unique_id of this Flight.  # noqa: E501


        :return: The unique_id of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Flight.


        :param unique_id: The unique_id of this Flight.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def airline_code(self):
        """Gets the airline_code of this Flight.  # noqa: E501


        :return: The airline_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._airline_code

    @airline_code.setter
    def airline_code(self, airline_code):
        """Sets the airline_code of this Flight.


        :param airline_code: The airline_code of this Flight.  # noqa: E501
        :type: str
        """

        self._airline_code = airline_code

    @property
    def icao_airline_code(self):
        """Gets the icao_airline_code of this Flight.  # noqa: E501


        :return: The icao_airline_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._icao_airline_code

    @icao_airline_code.setter
    def icao_airline_code(self, icao_airline_code):
        """Sets the icao_airline_code of this Flight.


        :param icao_airline_code: The icao_airline_code of this Flight.  # noqa: E501
        :type: str
        """

        self._icao_airline_code = icao_airline_code

    @property
    def flight_number(self):
        """Gets the flight_number of this Flight.  # noqa: E501


        :return: The flight_number of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this Flight.


        :param flight_number: The flight_number of this Flight.  # noqa: E501
        :type: int
        """

        self._flight_number = flight_number

    @property
    def suffix(self):
        """Gets the suffix of this Flight.  # noqa: E501


        :return: The suffix of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Flight.


        :param suffix: The suffix of this Flight.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def departure_airport_code(self):
        """Gets the departure_airport_code of this Flight.  # noqa: E501


        :return: The departure_airport_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._departure_airport_code

    @departure_airport_code.setter
    def departure_airport_code(self, departure_airport_code):
        """Sets the departure_airport_code of this Flight.


        :param departure_airport_code: The departure_airport_code of this Flight.  # noqa: E501
        :type: str
        """

        self._departure_airport_code = departure_airport_code

    @property
    def arrival_airport_code(self):
        """Gets the arrival_airport_code of this Flight.  # noqa: E501


        :return: The arrival_airport_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._arrival_airport_code

    @arrival_airport_code.setter
    def arrival_airport_code(self, arrival_airport_code):
        """Sets the arrival_airport_code of this Flight.


        :param arrival_airport_code: The arrival_airport_code of this Flight.  # noqa: E501
        :type: str
        """

        self._arrival_airport_code = arrival_airport_code

    @property
    def diversion_airport_code(self):
        """Gets the diversion_airport_code of this Flight.  # noqa: E501


        :return: The diversion_airport_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._diversion_airport_code

    @diversion_airport_code.setter
    def diversion_airport_code(self, diversion_airport_code):
        """Sets the diversion_airport_code of this Flight.


        :param diversion_airport_code: The diversion_airport_code of this Flight.  # noqa: E501
        :type: str
        """

        self._diversion_airport_code = diversion_airport_code

    @property
    def flight_date(self):
        """Gets the flight_date of this Flight.  # noqa: E501


        :return: The flight_date of this Flight.  # noqa: E501
        :rtype: datetime
        """
        return self._flight_date

    @flight_date.setter
    def flight_date(self, flight_date):
        """Sets the flight_date of this Flight.


        :param flight_date: The flight_date of this Flight.  # noqa: E501
        :type: datetime
        """

        self._flight_date = flight_date

    @property
    def std(self):
        """Gets the std of this Flight.  # noqa: E501


        :return: The std of this Flight.  # noqa: E501
        :rtype: datetime
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this Flight.


        :param std: The std of this Flight.  # noqa: E501
        :type: datetime
        """

        self._std = std

    @property
    def sta(self):
        """Gets the sta of this Flight.  # noqa: E501


        :return: The sta of this Flight.  # noqa: E501
        :rtype: datetime
        """
        return self._sta

    @sta.setter
    def sta(self, sta):
        """Sets the sta of this Flight.


        :param sta: The sta of this Flight.  # noqa: E501
        :type: datetime
        """

        self._sta = sta

    @property
    def aircraft_registration(self):
        """Gets the aircraft_registration of this Flight.  # noqa: E501


        :return: The aircraft_registration of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_registration

    @aircraft_registration.setter
    def aircraft_registration(self, aircraft_registration):
        """Sets the aircraft_registration of this Flight.


        :param aircraft_registration: The aircraft_registration of this Flight.  # noqa: E501
        :type: str
        """

        self._aircraft_registration = aircraft_registration

    @property
    def service_type_code(self):
        """Gets the service_type_code of this Flight.  # noqa: E501


        :return: The service_type_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._service_type_code

    @service_type_code.setter
    def service_type_code(self, service_type_code):
        """Sets the service_type_code of this Flight.


        :param service_type_code: The service_type_code of this Flight.  # noqa: E501
        :type: str
        """

        self._service_type_code = service_type_code

    @property
    def onward_airline_code(self):
        """Gets the onward_airline_code of this Flight.  # noqa: E501


        :return: The onward_airline_code of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._onward_airline_code

    @onward_airline_code.setter
    def onward_airline_code(self, onward_airline_code):
        """Sets the onward_airline_code of this Flight.


        :param onward_airline_code: The onward_airline_code of this Flight.  # noqa: E501
        :type: str
        """

        self._onward_airline_code = onward_airline_code

    @property
    def onward_flight_number(self):
        """Gets the onward_flight_number of this Flight.  # noqa: E501


        :return: The onward_flight_number of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._onward_flight_number

    @onward_flight_number.setter
    def onward_flight_number(self, onward_flight_number):
        """Sets the onward_flight_number of this Flight.


        :param onward_flight_number: The onward_flight_number of this Flight.  # noqa: E501
        :type: int
        """

        self._onward_flight_number = onward_flight_number

    @property
    def onward_suffix(self):
        """Gets the onward_suffix of this Flight.  # noqa: E501


        :return: The onward_suffix of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._onward_suffix

    @onward_suffix.setter
    def onward_suffix(self, onward_suffix):
        """Sets the onward_suffix of this Flight.


        :param onward_suffix: The onward_suffix of this Flight.  # noqa: E501
        :type: str
        """

        self._onward_suffix = onward_suffix

    @property
    def status(self):
        """Gets the status of this Flight.  # noqa: E501


        :return: The status of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Flight.


        :param status: The status of this Flight.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Flight.  # noqa: E501


        :return: The type of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Flight.


        :param type: The type of this Flight.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def canceled(self):
        """Gets the canceled of this Flight.  # noqa: E501


        :return: The canceled of this Flight.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this Flight.


        :param canceled: The canceled of this Flight.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    @property
    def departure_local_time_diff(self):
        """Gets the departure_local_time_diff of this Flight.  # noqa: E501


        :return: The departure_local_time_diff of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._departure_local_time_diff

    @departure_local_time_diff.setter
    def departure_local_time_diff(self, departure_local_time_diff):
        """Sets the departure_local_time_diff of this Flight.


        :param departure_local_time_diff: The departure_local_time_diff of this Flight.  # noqa: E501
        :type: int
        """

        self._departure_local_time_diff = departure_local_time_diff

    @property
    def arrival_local_time_diff(self):
        """Gets the arrival_local_time_diff of this Flight.  # noqa: E501


        :return: The arrival_local_time_diff of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._arrival_local_time_diff

    @arrival_local_time_diff.setter
    def arrival_local_time_diff(self, arrival_local_time_diff):
        """Sets the arrival_local_time_diff of this Flight.


        :param arrival_local_time_diff: The arrival_local_time_diff of this Flight.  # noqa: E501
        :type: int
        """

        self._arrival_local_time_diff = arrival_local_time_diff

    @property
    def irops_parent_id(self):
        """Gets the irops_parent_id of this Flight.  # noqa: E501


        :return: The irops_parent_id of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._irops_parent_id

    @irops_parent_id.setter
    def irops_parent_id(self, irops_parent_id):
        """Sets the irops_parent_id of this Flight.


        :param irops_parent_id: The irops_parent_id of this Flight.  # noqa: E501
        :type: int
        """

        self._irops_parent_id = irops_parent_id

    @property
    def overall_modified_time(self):
        """Gets the overall_modified_time of this Flight.  # noqa: E501


        :return: The overall_modified_time of this Flight.  # noqa: E501
        :rtype: datetime
        """
        return self._overall_modified_time

    @overall_modified_time.setter
    def overall_modified_time(self, overall_modified_time):
        """Sets the overall_modified_time of this Flight.


        :param overall_modified_time: The overall_modified_time of this Flight.  # noqa: E501
        :type: datetime
        """

        self._overall_modified_time = overall_modified_time

    @property
    def overall_modified_by_unique_id(self):
        """Gets the overall_modified_by_unique_id of this Flight.  # noqa: E501


        :return: The overall_modified_by_unique_id of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._overall_modified_by_unique_id

    @overall_modified_by_unique_id.setter
    def overall_modified_by_unique_id(self, overall_modified_by_unique_id):
        """Sets the overall_modified_by_unique_id of this Flight.


        :param overall_modified_by_unique_id: The overall_modified_by_unique_id of this Flight.  # noqa: E501
        :type: int
        """

        self._overall_modified_by_unique_id = overall_modified_by_unique_id

    @property
    def asm_reasons(self):
        """Gets the asm_reasons of this Flight.  # noqa: E501


        :return: The asm_reasons of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._asm_reasons

    @asm_reasons.setter
    def asm_reasons(self, asm_reasons):
        """Sets the asm_reasons of this Flight.


        :param asm_reasons: The asm_reasons of this Flight.  # noqa: E501
        :type: str
        """

        self._asm_reasons = asm_reasons

    @property
    def complement(self):
        """Gets the complement of this Flight.  # noqa: E501


        :return: The complement of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this Flight.


        :param complement: The complement of this Flight.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def co2(self):
        """Gets the co2 of this Flight.  # noqa: E501


        :return: The co2 of this Flight.  # noqa: E501
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """Sets the co2 of this Flight.


        :param co2: The co2 of this Flight.  # noqa: E501
        :type: float
        """

        self._co2 = co2

    @property
    def schedule_gcdkm(self):
        """Gets the schedule_gcdkm of this Flight.  # noqa: E501


        :return: The schedule_gcdkm of this Flight.  # noqa: E501
        :rtype: float
        """
        return self._schedule_gcdkm

    @schedule_gcdkm.setter
    def schedule_gcdkm(self, schedule_gcdkm):
        """Sets the schedule_gcdkm of this Flight.


        :param schedule_gcdkm: The schedule_gcdkm of this Flight.  # noqa: E501
        :type: float
        """

        self._schedule_gcdkm = schedule_gcdkm

    @property
    def schedule_gcdnm(self):
        """Gets the schedule_gcdnm of this Flight.  # noqa: E501


        :return: The schedule_gcdnm of this Flight.  # noqa: E501
        :rtype: float
        """
        return self._schedule_gcdnm

    @schedule_gcdnm.setter
    def schedule_gcdnm(self, schedule_gcdnm):
        """Sets the schedule_gcdnm of this Flight.


        :param schedule_gcdnm: The schedule_gcdnm of this Flight.  # noqa: E501
        :type: float
        """

        self._schedule_gcdnm = schedule_gcdnm

    @property
    def schedule_blh(self):
        """Gets the schedule_blh of this Flight.  # noqa: E501


        :return: The schedule_blh of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._schedule_blh

    @schedule_blh.setter
    def schedule_blh(self, schedule_blh):
        """Sets the schedule_blh of this Flight.


        :param schedule_blh: The schedule_blh of this Flight.  # noqa: E501
        :type: str
        """

        self._schedule_blh = schedule_blh

    @property
    def actual_blh_time_span(self):
        """Gets the actual_blh_time_span of this Flight.  # noqa: E501


        :return: The actual_blh_time_span of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._actual_blh_time_span

    @actual_blh_time_span.setter
    def actual_blh_time_span(self, actual_blh_time_span):
        """Sets the actual_blh_time_span of this Flight.


        :param actual_blh_time_span: The actual_blh_time_span of this Flight.  # noqa: E501
        :type: str
        """

        self._actual_blh_time_span = actual_blh_time_span

    @property
    def aircraft(self):
        """Gets the aircraft of this Flight.  # noqa: E501


        :return: The aircraft of this Flight.  # noqa: E501
        :rtype: Aircraft
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this Flight.


        :param aircraft: The aircraft of this Flight.  # noqa: E501
        :type: Aircraft
        """

        self._aircraft = aircraft

    @property
    def airports(self):
        """Gets the airports of this Flight.  # noqa: E501


        :return: The airports of this Flight.  # noqa: E501
        :rtype: Airports
        """
        return self._airports

    @airports.setter
    def airports(self, airports):
        """Sets the airports of this Flight.


        :param airports: The airports of this Flight.  # noqa: E501
        :type: Airports
        """

        self._airports = airports

    @property
    def crew_on_board(self):
        """Gets the crew_on_board of this Flight.  # noqa: E501


        :return: The crew_on_board of this Flight.  # noqa: E501
        :rtype: list[CrewOnBoard]
        """
        return self._crew_on_board

    @crew_on_board.setter
    def crew_on_board(self, crew_on_board):
        """Sets the crew_on_board of this Flight.


        :param crew_on_board: The crew_on_board of this Flight.  # noqa: E501
        :type: list[CrewOnBoard]
        """

        self._crew_on_board = crew_on_board

    @property
    def delays(self):
        """Gets the delays of this Flight.  # noqa: E501


        :return: The delays of this Flight.  # noqa: E501
        :rtype: DelaysOut
        """
        return self._delays

    @delays.setter
    def delays(self, delays):
        """Sets the delays of this Flight.


        :param delays: The delays of this Flight.  # noqa: E501
        :type: DelaysOut
        """

        self._delays = delays

    @property
    def flightplan(self):
        """Gets the flightplan of this Flight.  # noqa: E501


        :return: The flightplan of this Flight.  # noqa: E501
        :rtype: Flightplan
        """
        return self._flightplan

    @flightplan.setter
    def flightplan(self, flightplan):
        """Sets the flightplan of this Flight.


        :param flightplan: The flightplan of this Flight.  # noqa: E501
        :type: Flightplan
        """

        self._flightplan = flightplan

    @property
    def fuels(self):
        """Gets the fuels of this Flight.  # noqa: E501


        :return: The fuels of this Flight.  # noqa: E501
        :rtype: list[FuelOut]
        """
        return self._fuels

    @fuels.setter
    def fuels(self, fuels):
        """Sets the fuels of this Flight.


        :param fuels: The fuels of this Flight.  # noqa: E501
        :type: list[FuelOut]
        """

        self._fuels = fuels

    @property
    def loads(self):
        """Gets the loads of this Flight.  # noqa: E501


        :return: The loads of this Flight.  # noqa: E501
        :rtype: Loads
        """
        return self._loads

    @loads.setter
    def loads(self, loads):
        """Sets the loads of this Flight.


        :param loads: The loads of this Flight.  # noqa: E501
        :type: Loads
        """

        self._loads = loads

    @property
    def notes(self):
        """Gets the notes of this Flight.  # noqa: E501


        :return: The notes of this Flight.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Flight.


        :param notes: The notes of this Flight.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def times(self):
        """Gets the times of this Flight.  # noqa: E501


        :return: The times of this Flight.  # noqa: E501
        :rtype: list[TimeOut]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this Flight.


        :param times: The times of this Flight.  # noqa: E501
        :type: list[TimeOut]
        """

        self._times = times

    @property
    def latts(self):
        """Gets the latts of this Flight.  # noqa: E501


        :return: The latts of this Flight.  # noqa: E501
        :rtype: list[Latt]
        """
        return self._latts

    @latts.setter
    def latts(self, latts):
        """Sets the latts of this Flight.


        :param latts: The latts of this Flight.  # noqa: E501
        :type: list[Latt]
        """

        self._latts = latts

    @property
    def roundtrip(self):
        """Gets the roundtrip of this Flight.  # noqa: E501


        :return: The roundtrip of this Flight.  # noqa: E501
        :rtype: Roundtrip
        """
        return self._roundtrip

    @roundtrip.setter
    def roundtrip(self, roundtrip):
        """Sets the roundtrip of this Flight.


        :param roundtrip: The roundtrip of this Flight.  # noqa: E501
        :type: Roundtrip
        """

        self._roundtrip = roundtrip

    @property
    def project_codes(self):
        """Gets the project_codes of this Flight.  # noqa: E501


        :return: The project_codes of this Flight.  # noqa: E501
        :rtype: list[ProjectCode]
        """
        return self._project_codes

    @project_codes.setter
    def project_codes(self, project_codes):
        """Sets the project_codes of this Flight.


        :param project_codes: The project_codes of this Flight.  # noqa: E501
        :type: list[ProjectCode]
        """

        self._project_codes = project_codes

    @property
    def legal_exceptions(self):
        """Gets the legal_exceptions of this Flight.  # noqa: E501


        :return: The legal_exceptions of this Flight.  # noqa: E501
        :rtype: list[LegLegalException]
        """
        return self._legal_exceptions

    @legal_exceptions.setter
    def legal_exceptions(self, legal_exceptions):
        """Sets the legal_exceptions of this Flight.


        :param legal_exceptions: The legal_exceptions of this Flight.  # noqa: E501
        :type: list[LegLegalException]
        """

        self._legal_exceptions = legal_exceptions

    @property
    def jumpseaters(self):
        """Gets the jumpseaters of this Flight.  # noqa: E501


        :return: The jumpseaters of this Flight.  # noqa: E501
        :rtype: list[Jumpseater]
        """
        return self._jumpseaters

    @jumpseaters.setter
    def jumpseaters(self, jumpseaters):
        """Sets the jumpseaters of this Flight.


        :param jumpseaters: The jumpseaters of this Flight.  # noqa: E501
        :type: list[Jumpseater]
        """

        self._jumpseaters = jumpseaters

    @property
    def atc_edct(self):
        """Gets the atc_edct of this Flight.  # noqa: E501


        :return: The atc_edct of this Flight.  # noqa: E501
        :rtype: AtcEdctOut
        """
        return self._atc_edct

    @atc_edct.setter
    def atc_edct(self, atc_edct):
        """Sets the atc_edct of this Flight.


        :param atc_edct: The atc_edct of this Flight.  # noqa: E501
        :type: AtcEdctOut
        """

        self._atc_edct = atc_edct

    @property
    def fuel_data(self):
        """Gets the fuel_data of this Flight.  # noqa: E501


        :return: The fuel_data of this Flight.  # noqa: E501
        :rtype: FuelData
        """
        return self._fuel_data

    @fuel_data.setter
    def fuel_data(self, fuel_data):
        """Sets the fuel_data of this Flight.


        :param fuel_data: The fuel_data of this Flight.  # noqa: E501
        :type: FuelData
        """

        self._fuel_data = fuel_data

    @property
    def detailed_statuses(self):
        """Gets the detailed_statuses of this Flight.  # noqa: E501


        :return: The detailed_statuses of this Flight.  # noqa: E501
        :rtype: list[str]
        """
        return self._detailed_statuses

    @detailed_statuses.setter
    def detailed_statuses(self, detailed_statuses):
        """Sets the detailed_statuses of this Flight.


        :param detailed_statuses: The detailed_statuses of this Flight.  # noqa: E501
        :type: list[str]
        """

        self._detailed_statuses = detailed_statuses

    @property
    def desk(self):
        """Gets the desk of this Flight.  # noqa: E501


        :return: The desk of this Flight.  # noqa: E501
        :rtype: str
        """
        return self._desk

    @desk.setter
    def desk(self, desk):
        """Sets the desk of this Flight.


        :param desk: The desk of this Flight.  # noqa: E501
        :type: str
        """

        self._desk = desk

    @property
    def departure_sched_taxi_mins(self):
        """Gets the departure_sched_taxi_mins of this Flight.  # noqa: E501


        :return: The departure_sched_taxi_mins of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._departure_sched_taxi_mins

    @departure_sched_taxi_mins.setter
    def departure_sched_taxi_mins(self, departure_sched_taxi_mins):
        """Sets the departure_sched_taxi_mins of this Flight.


        :param departure_sched_taxi_mins: The departure_sched_taxi_mins of this Flight.  # noqa: E501
        :type: int
        """

        self._departure_sched_taxi_mins = departure_sched_taxi_mins

    @property
    def arrival_sched_taxi_mins(self):
        """Gets the arrival_sched_taxi_mins of this Flight.  # noqa: E501


        :return: The arrival_sched_taxi_mins of this Flight.  # noqa: E501
        :rtype: int
        """
        return self._arrival_sched_taxi_mins

    @arrival_sched_taxi_mins.setter
    def arrival_sched_taxi_mins(self, arrival_sched_taxi_mins):
        """Sets the arrival_sched_taxi_mins of this Flight.


        :param arrival_sched_taxi_mins: The arrival_sched_taxi_mins of this Flight.  # noqa: E501
        :type: int
        """

        self._arrival_sched_taxi_mins = arrival_sched_taxi_mins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Flight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Flight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
