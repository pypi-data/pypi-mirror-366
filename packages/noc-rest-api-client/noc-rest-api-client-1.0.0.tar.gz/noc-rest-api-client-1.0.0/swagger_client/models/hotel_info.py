# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HotelInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'name': 'str',
        'unique_id': 'int',
        'stations': 'list[str]',
        'code': 'str',
        'company': 'Company',
        'street': 'str',
        'zip': 'str',
        'city': 'str',
        'country': 'str',
        'priority': 'int',
        'pickup_to_hotel': 'Pickup',
        'pickup_from_hotel': 'Pickup',
        'earliest_check_in': 'str',
        'latest_check_out': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'active': 'Active',
        'name': 'Name',
        'unique_id': 'UniqueId',
        'stations': 'Stations',
        'code': 'Code',
        'company': 'Company',
        'street': 'Street',
        'zip': 'Zip',
        'city': 'City',
        'country': 'Country',
        'priority': 'Priority',
        'pickup_to_hotel': 'PickupToHotel',
        'pickup_from_hotel': 'PickupFromHotel',
        'earliest_check_in': 'EarliestCheckIn',
        'latest_check_out': 'LatestCheckOut',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, active=None, name=None, unique_id=None, stations=None, code=None, company=None, street=None, zip=None, city=None, country=None, priority=None, pickup_to_hotel=None, pickup_from_hotel=None, earliest_check_in=None, latest_check_out=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """HotelInfo - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._name = None
        self._unique_id = None
        self._stations = None
        self._code = None
        self._company = None
        self._street = None
        self._zip = None
        self._city = None
        self._country = None
        self._priority = None
        self._pickup_to_hotel = None
        self._pickup_from_hotel = None
        self._earliest_check_in = None
        self._latest_check_out = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if name is not None:
            self.name = name
        if unique_id is not None:
            self.unique_id = unique_id
        if stations is not None:
            self.stations = stations
        if code is not None:
            self.code = code
        if company is not None:
            self.company = company
        if street is not None:
            self.street = street
        if zip is not None:
            self.zip = zip
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if priority is not None:
            self.priority = priority
        if pickup_to_hotel is not None:
            self.pickup_to_hotel = pickup_to_hotel
        if pickup_from_hotel is not None:
            self.pickup_from_hotel = pickup_from_hotel
        if earliest_check_in is not None:
            self.earliest_check_in = earliest_check_in
        if latest_check_out is not None:
            self.latest_check_out = latest_check_out
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def active(self):
        """Gets the active of this HotelInfo.  # noqa: E501


        :return: The active of this HotelInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this HotelInfo.


        :param active: The active of this HotelInfo.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def name(self):
        """Gets the name of this HotelInfo.  # noqa: E501


        :return: The name of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HotelInfo.


        :param name: The name of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unique_id(self):
        """Gets the unique_id of this HotelInfo.  # noqa: E501


        :return: The unique_id of this HotelInfo.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this HotelInfo.


        :param unique_id: The unique_id of this HotelInfo.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def stations(self):
        """Gets the stations of this HotelInfo.  # noqa: E501


        :return: The stations of this HotelInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._stations

    @stations.setter
    def stations(self, stations):
        """Sets the stations of this HotelInfo.


        :param stations: The stations of this HotelInfo.  # noqa: E501
        :type: list[str]
        """

        self._stations = stations

    @property
    def code(self):
        """Gets the code of this HotelInfo.  # noqa: E501


        :return: The code of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this HotelInfo.


        :param code: The code of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def company(self):
        """Gets the company of this HotelInfo.  # noqa: E501


        :return: The company of this HotelInfo.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this HotelInfo.


        :param company: The company of this HotelInfo.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def street(self):
        """Gets the street of this HotelInfo.  # noqa: E501


        :return: The street of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this HotelInfo.


        :param street: The street of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this HotelInfo.  # noqa: E501


        :return: The zip of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this HotelInfo.


        :param zip: The zip of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def city(self):
        """Gets the city of this HotelInfo.  # noqa: E501


        :return: The city of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this HotelInfo.


        :param city: The city of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this HotelInfo.  # noqa: E501


        :return: The country of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this HotelInfo.


        :param country: The country of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def priority(self):
        """Gets the priority of this HotelInfo.  # noqa: E501


        :return: The priority of this HotelInfo.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this HotelInfo.


        :param priority: The priority of this HotelInfo.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def pickup_to_hotel(self):
        """Gets the pickup_to_hotel of this HotelInfo.  # noqa: E501


        :return: The pickup_to_hotel of this HotelInfo.  # noqa: E501
        :rtype: Pickup
        """
        return self._pickup_to_hotel

    @pickup_to_hotel.setter
    def pickup_to_hotel(self, pickup_to_hotel):
        """Sets the pickup_to_hotel of this HotelInfo.


        :param pickup_to_hotel: The pickup_to_hotel of this HotelInfo.  # noqa: E501
        :type: Pickup
        """

        self._pickup_to_hotel = pickup_to_hotel

    @property
    def pickup_from_hotel(self):
        """Gets the pickup_from_hotel of this HotelInfo.  # noqa: E501


        :return: The pickup_from_hotel of this HotelInfo.  # noqa: E501
        :rtype: Pickup
        """
        return self._pickup_from_hotel

    @pickup_from_hotel.setter
    def pickup_from_hotel(self, pickup_from_hotel):
        """Sets the pickup_from_hotel of this HotelInfo.


        :param pickup_from_hotel: The pickup_from_hotel of this HotelInfo.  # noqa: E501
        :type: Pickup
        """

        self._pickup_from_hotel = pickup_from_hotel

    @property
    def earliest_check_in(self):
        """Gets the earliest_check_in of this HotelInfo.  # noqa: E501


        :return: The earliest_check_in of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._earliest_check_in

    @earliest_check_in.setter
    def earliest_check_in(self, earliest_check_in):
        """Sets the earliest_check_in of this HotelInfo.


        :param earliest_check_in: The earliest_check_in of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._earliest_check_in = earliest_check_in

    @property
    def latest_check_out(self):
        """Gets the latest_check_out of this HotelInfo.  # noqa: E501


        :return: The latest_check_out of this HotelInfo.  # noqa: E501
        :rtype: str
        """
        return self._latest_check_out

    @latest_check_out.setter
    def latest_check_out(self, latest_check_out):
        """Sets the latest_check_out of this HotelInfo.


        :param latest_check_out: The latest_check_out of this HotelInfo.  # noqa: E501
        :type: str
        """

        self._latest_check_out = latest_check_out

    @property
    def timestamp(self):
        """Gets the timestamp of this HotelInfo.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this HotelInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HotelInfo.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this HotelInfo.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this HotelInfo.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this HotelInfo.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this HotelInfo.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this HotelInfo.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
