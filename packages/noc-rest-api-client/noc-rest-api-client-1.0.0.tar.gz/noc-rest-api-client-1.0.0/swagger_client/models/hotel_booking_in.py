# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HotelBookingIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'comment': 'str',
        'reservation_number': 'str',
        'short_code': 'str',
        'is_revision_confirmed': 'bool'
    }

    attribute_map = {
        'status': 'Status',
        'comment': 'Comment',
        'reservation_number': 'ReservationNumber',
        'short_code': 'ShortCode',
        'is_revision_confirmed': 'IsRevisionConfirmed'
    }

    def __init__(self, status=None, comment=None, reservation_number=None, short_code=None, is_revision_confirmed=None):  # noqa: E501
        """HotelBookingIn - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._comment = None
        self._reservation_number = None
        self._short_code = None
        self._is_revision_confirmed = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if reservation_number is not None:
            self.reservation_number = reservation_number
        if short_code is not None:
            self.short_code = short_code
        if is_revision_confirmed is not None:
            self.is_revision_confirmed = is_revision_confirmed

    @property
    def status(self):
        """Gets the status of this HotelBookingIn.  # noqa: E501


        :return: The status of this HotelBookingIn.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HotelBookingIn.


        :param status: The status of this HotelBookingIn.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unactioned", "Sent", "Rejected", "Confirmed", "CanceledUnactioned", "CanceledSent", "Reusedunactioned", "Modified"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this HotelBookingIn.  # noqa: E501


        :return: The comment of this HotelBookingIn.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HotelBookingIn.


        :param comment: The comment of this HotelBookingIn.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def reservation_number(self):
        """Gets the reservation_number of this HotelBookingIn.  # noqa: E501


        :return: The reservation_number of this HotelBookingIn.  # noqa: E501
        :rtype: str
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this HotelBookingIn.


        :param reservation_number: The reservation_number of this HotelBookingIn.  # noqa: E501
        :type: str
        """

        self._reservation_number = reservation_number

    @property
    def short_code(self):
        """Gets the short_code of this HotelBookingIn.  # noqa: E501


        :return: The short_code of this HotelBookingIn.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this HotelBookingIn.


        :param short_code: The short_code of this HotelBookingIn.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def is_revision_confirmed(self):
        """Gets the is_revision_confirmed of this HotelBookingIn.  # noqa: E501


        :return: The is_revision_confirmed of this HotelBookingIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_revision_confirmed

    @is_revision_confirmed.setter
    def is_revision_confirmed(self, is_revision_confirmed):
        """Sets the is_revision_confirmed of this HotelBookingIn.


        :param is_revision_confirmed: The is_revision_confirmed of this HotelBookingIn.  # noqa: E501
        :type: bool
        """

        self._is_revision_confirmed = is_revision_confirmed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelBookingIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelBookingIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
