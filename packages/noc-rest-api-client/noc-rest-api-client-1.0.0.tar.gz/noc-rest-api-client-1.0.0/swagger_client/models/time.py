# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Time(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'date_time': 'datetime'
    }

    attribute_map = {
        'type': 'Type',
        'date_time': 'DateTime'
    }

    def __init__(self, type=None, date_time=None):  # noqa: E501
        """Time - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._date_time = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if date_time is not None:
            self.date_time = date_time

    @property
    def type(self):
        """Gets the type of this Time.  # noqa: E501

        Time Type can be ActualStart, ActualEnd, ActualCheckIn, ActualCheckOut, CalculatedCheckIn, CalculatedCheckOut, CalculatedUnionCheckIn, CalculatedUnionCheckOut, DutyStart, DutyEnd, ManualCheckIn, ManualCheckOut, RestBeforeStart, RestBeforeEnd, TripStart, TripEnd, UnionCheckIn, UnionCheckOut, ManualDutyStart, ManualDutyEnd, LastOnChoxUTC, CheckIn, CheckOut, DepartureTimeOnAssignment, ArrivalTimeOnAssignment,ETD,ETA or LATT  # noqa: E501

        :return: The type of this Time.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Time.

        Time Type can be ActualStart, ActualEnd, ActualCheckIn, ActualCheckOut, CalculatedCheckIn, CalculatedCheckOut, CalculatedUnionCheckIn, CalculatedUnionCheckOut, DutyStart, DutyEnd, ManualCheckIn, ManualCheckOut, RestBeforeStart, RestBeforeEnd, TripStart, TripEnd, UnionCheckIn, UnionCheckOut, ManualDutyStart, ManualDutyEnd, LastOnChoxUTC, CheckIn, CheckOut, DepartureTimeOnAssignment, ArrivalTimeOnAssignment,ETD,ETA or LATT  # noqa: E501

        :param type: The type of this Time.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def date_time(self):
        """Gets the date_time of this Time.  # noqa: E501


        :return: The date_time of this Time.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this Time.


        :param date_time: The date_time of this Time.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Time, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Time):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
