# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Loads(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'booked_passenger_per_weight': 'PassengerPerWeight',
        'actual_passenger_per_weight': 'PassengerPerWeight',
        'booked_passenger_per_class': 'list[PassengerPerClass]',
        'actual_passenger_per_class': 'list[PassengerPerClass]',
        'booked_deadload': 'list[Deadload]',
        'actual_deadload': 'list[Deadload]'
    }

    attribute_map = {
        'booked_passenger_per_weight': 'BookedPassengerPerWeight',
        'actual_passenger_per_weight': 'ActualPassengerPerWeight',
        'booked_passenger_per_class': 'BookedPassengerPerClass',
        'actual_passenger_per_class': 'ActualPassengerPerClass',
        'booked_deadload': 'BookedDeadload',
        'actual_deadload': 'ActualDeadload'
    }

    def __init__(self, booked_passenger_per_weight=None, actual_passenger_per_weight=None, booked_passenger_per_class=None, actual_passenger_per_class=None, booked_deadload=None, actual_deadload=None):  # noqa: E501
        """Loads - a model defined in Swagger"""  # noqa: E501
        self._booked_passenger_per_weight = None
        self._actual_passenger_per_weight = None
        self._booked_passenger_per_class = None
        self._actual_passenger_per_class = None
        self._booked_deadload = None
        self._actual_deadload = None
        self.discriminator = None
        if booked_passenger_per_weight is not None:
            self.booked_passenger_per_weight = booked_passenger_per_weight
        if actual_passenger_per_weight is not None:
            self.actual_passenger_per_weight = actual_passenger_per_weight
        if booked_passenger_per_class is not None:
            self.booked_passenger_per_class = booked_passenger_per_class
        if actual_passenger_per_class is not None:
            self.actual_passenger_per_class = actual_passenger_per_class
        if booked_deadload is not None:
            self.booked_deadload = booked_deadload
        if actual_deadload is not None:
            self.actual_deadload = actual_deadload

    @property
    def booked_passenger_per_weight(self):
        """Gets the booked_passenger_per_weight of this Loads.  # noqa: E501


        :return: The booked_passenger_per_weight of this Loads.  # noqa: E501
        :rtype: PassengerPerWeight
        """
        return self._booked_passenger_per_weight

    @booked_passenger_per_weight.setter
    def booked_passenger_per_weight(self, booked_passenger_per_weight):
        """Sets the booked_passenger_per_weight of this Loads.


        :param booked_passenger_per_weight: The booked_passenger_per_weight of this Loads.  # noqa: E501
        :type: PassengerPerWeight
        """

        self._booked_passenger_per_weight = booked_passenger_per_weight

    @property
    def actual_passenger_per_weight(self):
        """Gets the actual_passenger_per_weight of this Loads.  # noqa: E501


        :return: The actual_passenger_per_weight of this Loads.  # noqa: E501
        :rtype: PassengerPerWeight
        """
        return self._actual_passenger_per_weight

    @actual_passenger_per_weight.setter
    def actual_passenger_per_weight(self, actual_passenger_per_weight):
        """Sets the actual_passenger_per_weight of this Loads.


        :param actual_passenger_per_weight: The actual_passenger_per_weight of this Loads.  # noqa: E501
        :type: PassengerPerWeight
        """

        self._actual_passenger_per_weight = actual_passenger_per_weight

    @property
    def booked_passenger_per_class(self):
        """Gets the booked_passenger_per_class of this Loads.  # noqa: E501


        :return: The booked_passenger_per_class of this Loads.  # noqa: E501
        :rtype: list[PassengerPerClass]
        """
        return self._booked_passenger_per_class

    @booked_passenger_per_class.setter
    def booked_passenger_per_class(self, booked_passenger_per_class):
        """Sets the booked_passenger_per_class of this Loads.


        :param booked_passenger_per_class: The booked_passenger_per_class of this Loads.  # noqa: E501
        :type: list[PassengerPerClass]
        """

        self._booked_passenger_per_class = booked_passenger_per_class

    @property
    def actual_passenger_per_class(self):
        """Gets the actual_passenger_per_class of this Loads.  # noqa: E501


        :return: The actual_passenger_per_class of this Loads.  # noqa: E501
        :rtype: list[PassengerPerClass]
        """
        return self._actual_passenger_per_class

    @actual_passenger_per_class.setter
    def actual_passenger_per_class(self, actual_passenger_per_class):
        """Sets the actual_passenger_per_class of this Loads.


        :param actual_passenger_per_class: The actual_passenger_per_class of this Loads.  # noqa: E501
        :type: list[PassengerPerClass]
        """

        self._actual_passenger_per_class = actual_passenger_per_class

    @property
    def booked_deadload(self):
        """Gets the booked_deadload of this Loads.  # noqa: E501


        :return: The booked_deadload of this Loads.  # noqa: E501
        :rtype: list[Deadload]
        """
        return self._booked_deadload

    @booked_deadload.setter
    def booked_deadload(self, booked_deadload):
        """Sets the booked_deadload of this Loads.


        :param booked_deadload: The booked_deadload of this Loads.  # noqa: E501
        :type: list[Deadload]
        """

        self._booked_deadload = booked_deadload

    @property
    def actual_deadload(self):
        """Gets the actual_deadload of this Loads.  # noqa: E501


        :return: The actual_deadload of this Loads.  # noqa: E501
        :rtype: list[Deadload]
        """
        return self._actual_deadload

    @actual_deadload.setter
    def actual_deadload(self, actual_deadload):
        """Sets the actual_deadload of this Loads.


        :param actual_deadload: The actual_deadload of this Loads.  # noqa: E501
        :type: list[Deadload]
        """

        self._actual_deadload = actual_deadload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Loads, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Loads):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
