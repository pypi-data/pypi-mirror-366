# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FuelData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'cost': 'float',
        'currency': 'str',
        'payment_type': 'str',
        'receipt': 'str',
        'comment': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'company': 'Company',
        'cost': 'Cost',
        'currency': 'Currency',
        'payment_type': 'PaymentType',
        'receipt': 'Receipt',
        'comment': 'Comment',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, company=None, cost=None, currency=None, payment_type=None, receipt=None, comment=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """FuelData - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._cost = None
        self._currency = None
        self._payment_type = None
        self._receipt = None
        self._comment = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if cost is not None:
            self.cost = cost
        if currency is not None:
            self.currency = currency
        if payment_type is not None:
            self.payment_type = payment_type
        if receipt is not None:
            self.receipt = receipt
        if comment is not None:
            self.comment = comment
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def company(self):
        """Gets the company of this FuelData.  # noqa: E501


        :return: The company of this FuelData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this FuelData.


        :param company: The company of this FuelData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def cost(self):
        """Gets the cost of this FuelData.  # noqa: E501


        :return: The cost of this FuelData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this FuelData.


        :param cost: The cost of this FuelData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def currency(self):
        """Gets the currency of this FuelData.  # noqa: E501


        :return: The currency of this FuelData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FuelData.


        :param currency: The currency of this FuelData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def payment_type(self):
        """Gets the payment_type of this FuelData.  # noqa: E501


        :return: The payment_type of this FuelData.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this FuelData.


        :param payment_type: The payment_type of this FuelData.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def receipt(self):
        """Gets the receipt of this FuelData.  # noqa: E501


        :return: The receipt of this FuelData.  # noqa: E501
        :rtype: str
        """
        return self._receipt

    @receipt.setter
    def receipt(self, receipt):
        """Sets the receipt of this FuelData.


        :param receipt: The receipt of this FuelData.  # noqa: E501
        :type: str
        """

        self._receipt = receipt

    @property
    def comment(self):
        """Gets the comment of this FuelData.  # noqa: E501


        :return: The comment of this FuelData.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FuelData.


        :param comment: The comment of this FuelData.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def timestamp(self):
        """Gets the timestamp of this FuelData.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this FuelData.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FuelData.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this FuelData.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this FuelData.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this FuelData.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this FuelData.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this FuelData.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FuelData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuelData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
