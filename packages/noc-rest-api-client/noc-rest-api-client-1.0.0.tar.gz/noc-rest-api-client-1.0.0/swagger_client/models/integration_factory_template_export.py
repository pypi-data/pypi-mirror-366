# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationFactoryTemplateExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_name': 'str',
        'type': 'str',
        'template_text': 'str',
        'modified_by_user_id': 'int',
        'time_stamp': 'datetime'
    }

    attribute_map = {
        'template_name': 'TemplateName',
        'type': 'Type',
        'template_text': 'TemplateText',
        'modified_by_user_id': 'ModifiedByUserId',
        'time_stamp': 'TimeStamp'
    }

    def __init__(self, template_name=None, type=None, template_text=None, modified_by_user_id=None, time_stamp=None):  # noqa: E501
        """IntegrationFactoryTemplateExport - a model defined in Swagger"""  # noqa: E501
        self._template_name = None
        self._type = None
        self._template_text = None
        self._modified_by_user_id = None
        self._time_stamp = None
        self.discriminator = None
        if template_name is not None:
            self.template_name = template_name
        if type is not None:
            self.type = type
        if template_text is not None:
            self.template_text = template_text
        if modified_by_user_id is not None:
            self.modified_by_user_id = modified_by_user_id
        if time_stamp is not None:
            self.time_stamp = time_stamp

    @property
    def template_name(self):
        """Gets the template_name of this IntegrationFactoryTemplateExport.  # noqa: E501


        :return: The template_name of this IntegrationFactoryTemplateExport.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this IntegrationFactoryTemplateExport.


        :param template_name: The template_name of this IntegrationFactoryTemplateExport.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def type(self):
        """Gets the type of this IntegrationFactoryTemplateExport.  # noqa: E501


        :return: The type of this IntegrationFactoryTemplateExport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntegrationFactoryTemplateExport.


        :param type: The type of this IntegrationFactoryTemplateExport.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def template_text(self):
        """Gets the template_text of this IntegrationFactoryTemplateExport.  # noqa: E501


        :return: The template_text of this IntegrationFactoryTemplateExport.  # noqa: E501
        :rtype: str
        """
        return self._template_text

    @template_text.setter
    def template_text(self, template_text):
        """Sets the template_text of this IntegrationFactoryTemplateExport.


        :param template_text: The template_text of this IntegrationFactoryTemplateExport.  # noqa: E501
        :type: str
        """

        self._template_text = template_text

    @property
    def modified_by_user_id(self):
        """Gets the modified_by_user_id of this IntegrationFactoryTemplateExport.  # noqa: E501


        :return: The modified_by_user_id of this IntegrationFactoryTemplateExport.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_user_id

    @modified_by_user_id.setter
    def modified_by_user_id(self, modified_by_user_id):
        """Sets the modified_by_user_id of this IntegrationFactoryTemplateExport.


        :param modified_by_user_id: The modified_by_user_id of this IntegrationFactoryTemplateExport.  # noqa: E501
        :type: int
        """

        self._modified_by_user_id = modified_by_user_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this IntegrationFactoryTemplateExport.  # noqa: E501


        :return: The time_stamp of this IntegrationFactoryTemplateExport.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this IntegrationFactoryTemplateExport.


        :param time_stamp: The time_stamp of this IntegrationFactoryTemplateExport.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationFactoryTemplateExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationFactoryTemplateExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
