# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment_date1': 'datetime',
        'employment_date2': 'datetime',
        'employment_date3': 'datetime',
        'contracts': 'list[Contract]'
    }

    attribute_map = {
        'employment_date1': 'EmploymentDate1',
        'employment_date2': 'EmploymentDate2',
        'employment_date3': 'EmploymentDate3',
        'contracts': 'Contracts'
    }

    def __init__(self, employment_date1=None, employment_date2=None, employment_date3=None, contracts=None):  # noqa: E501
        """ContractsData - a model defined in Swagger"""  # noqa: E501
        self._employment_date1 = None
        self._employment_date2 = None
        self._employment_date3 = None
        self._contracts = None
        self.discriminator = None
        if employment_date1 is not None:
            self.employment_date1 = employment_date1
        if employment_date2 is not None:
            self.employment_date2 = employment_date2
        if employment_date3 is not None:
            self.employment_date3 = employment_date3
        if contracts is not None:
            self.contracts = contracts

    @property
    def employment_date1(self):
        """Gets the employment_date1 of this ContractsData.  # noqa: E501


        :return: The employment_date1 of this ContractsData.  # noqa: E501
        :rtype: datetime
        """
        return self._employment_date1

    @employment_date1.setter
    def employment_date1(self, employment_date1):
        """Sets the employment_date1 of this ContractsData.


        :param employment_date1: The employment_date1 of this ContractsData.  # noqa: E501
        :type: datetime
        """

        self._employment_date1 = employment_date1

    @property
    def employment_date2(self):
        """Gets the employment_date2 of this ContractsData.  # noqa: E501


        :return: The employment_date2 of this ContractsData.  # noqa: E501
        :rtype: datetime
        """
        return self._employment_date2

    @employment_date2.setter
    def employment_date2(self, employment_date2):
        """Sets the employment_date2 of this ContractsData.


        :param employment_date2: The employment_date2 of this ContractsData.  # noqa: E501
        :type: datetime
        """

        self._employment_date2 = employment_date2

    @property
    def employment_date3(self):
        """Gets the employment_date3 of this ContractsData.  # noqa: E501


        :return: The employment_date3 of this ContractsData.  # noqa: E501
        :rtype: datetime
        """
        return self._employment_date3

    @employment_date3.setter
    def employment_date3(self, employment_date3):
        """Sets the employment_date3 of this ContractsData.


        :param employment_date3: The employment_date3 of this ContractsData.  # noqa: E501
        :type: datetime
        """

        self._employment_date3 = employment_date3

    @property
    def contracts(self):
        """Gets the contracts of this ContractsData.  # noqa: E501


        :return: The contracts of this ContractsData.  # noqa: E501
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this ContractsData.


        :param contracts: The contracts of this ContractsData.  # noqa: E501
        :type: list[Contract]
        """

        self._contracts = contracts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
