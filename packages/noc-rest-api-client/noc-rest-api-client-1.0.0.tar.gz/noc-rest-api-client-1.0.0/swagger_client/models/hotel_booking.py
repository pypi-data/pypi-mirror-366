# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HotelBooking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'end': 'datetime',
        'hotel_name': 'str',
        'hotel_unique_id': 'int',
        'emp_no': 'str',
        'pickups_from': 'list[Pickup]',
        'pickups_to': 'list[Pickup]',
        'booking_datas': 'list[BookingData]',
        'ref_act_unique_id': 'int'
    }

    attribute_map = {
        'start': 'Start',
        'end': 'End',
        'hotel_name': 'HotelName',
        'hotel_unique_id': 'HotelUniqueId',
        'emp_no': 'EmpNo',
        'pickups_from': 'PickupsFrom',
        'pickups_to': 'PickupsTo',
        'booking_datas': 'BookingDatas',
        'ref_act_unique_id': 'RefActUniqueID'
    }

    def __init__(self, start=None, end=None, hotel_name=None, hotel_unique_id=None, emp_no=None, pickups_from=None, pickups_to=None, booking_datas=None, ref_act_unique_id=None):  # noqa: E501
        """HotelBooking - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._end = None
        self._hotel_name = None
        self._hotel_unique_id = None
        self._emp_no = None
        self._pickups_from = None
        self._pickups_to = None
        self._booking_datas = None
        self._ref_act_unique_id = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if hotel_name is not None:
            self.hotel_name = hotel_name
        if hotel_unique_id is not None:
            self.hotel_unique_id = hotel_unique_id
        if emp_no is not None:
            self.emp_no = emp_no
        if pickups_from is not None:
            self.pickups_from = pickups_from
        if pickups_to is not None:
            self.pickups_to = pickups_to
        if booking_datas is not None:
            self.booking_datas = booking_datas
        if ref_act_unique_id is not None:
            self.ref_act_unique_id = ref_act_unique_id

    @property
    def start(self):
        """Gets the start of this HotelBooking.  # noqa: E501


        :return: The start of this HotelBooking.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this HotelBooking.


        :param start: The start of this HotelBooking.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this HotelBooking.  # noqa: E501


        :return: The end of this HotelBooking.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this HotelBooking.


        :param end: The end of this HotelBooking.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def hotel_name(self):
        """Gets the hotel_name of this HotelBooking.  # noqa: E501


        :return: The hotel_name of this HotelBooking.  # noqa: E501
        :rtype: str
        """
        return self._hotel_name

    @hotel_name.setter
    def hotel_name(self, hotel_name):
        """Sets the hotel_name of this HotelBooking.


        :param hotel_name: The hotel_name of this HotelBooking.  # noqa: E501
        :type: str
        """

        self._hotel_name = hotel_name

    @property
    def hotel_unique_id(self):
        """Gets the hotel_unique_id of this HotelBooking.  # noqa: E501


        :return: The hotel_unique_id of this HotelBooking.  # noqa: E501
        :rtype: int
        """
        return self._hotel_unique_id

    @hotel_unique_id.setter
    def hotel_unique_id(self, hotel_unique_id):
        """Sets the hotel_unique_id of this HotelBooking.


        :param hotel_unique_id: The hotel_unique_id of this HotelBooking.  # noqa: E501
        :type: int
        """

        self._hotel_unique_id = hotel_unique_id

    @property
    def emp_no(self):
        """Gets the emp_no of this HotelBooking.  # noqa: E501


        :return: The emp_no of this HotelBooking.  # noqa: E501
        :rtype: str
        """
        return self._emp_no

    @emp_no.setter
    def emp_no(self, emp_no):
        """Sets the emp_no of this HotelBooking.


        :param emp_no: The emp_no of this HotelBooking.  # noqa: E501
        :type: str
        """

        self._emp_no = emp_no

    @property
    def pickups_from(self):
        """Gets the pickups_from of this HotelBooking.  # noqa: E501


        :return: The pickups_from of this HotelBooking.  # noqa: E501
        :rtype: list[Pickup]
        """
        return self._pickups_from

    @pickups_from.setter
    def pickups_from(self, pickups_from):
        """Sets the pickups_from of this HotelBooking.


        :param pickups_from: The pickups_from of this HotelBooking.  # noqa: E501
        :type: list[Pickup]
        """

        self._pickups_from = pickups_from

    @property
    def pickups_to(self):
        """Gets the pickups_to of this HotelBooking.  # noqa: E501


        :return: The pickups_to of this HotelBooking.  # noqa: E501
        :rtype: list[Pickup]
        """
        return self._pickups_to

    @pickups_to.setter
    def pickups_to(self, pickups_to):
        """Sets the pickups_to of this HotelBooking.


        :param pickups_to: The pickups_to of this HotelBooking.  # noqa: E501
        :type: list[Pickup]
        """

        self._pickups_to = pickups_to

    @property
    def booking_datas(self):
        """Gets the booking_datas of this HotelBooking.  # noqa: E501


        :return: The booking_datas of this HotelBooking.  # noqa: E501
        :rtype: list[BookingData]
        """
        return self._booking_datas

    @booking_datas.setter
    def booking_datas(self, booking_datas):
        """Sets the booking_datas of this HotelBooking.


        :param booking_datas: The booking_datas of this HotelBooking.  # noqa: E501
        :type: list[BookingData]
        """

        self._booking_datas = booking_datas

    @property
    def ref_act_unique_id(self):
        """Gets the ref_act_unique_id of this HotelBooking.  # noqa: E501


        :return: The ref_act_unique_id of this HotelBooking.  # noqa: E501
        :rtype: int
        """
        return self._ref_act_unique_id

    @ref_act_unique_id.setter
    def ref_act_unique_id(self, ref_act_unique_id):
        """Sets the ref_act_unique_id of this HotelBooking.


        :param ref_act_unique_id: The ref_act_unique_id of this HotelBooking.  # noqa: E501
        :type: int
        """

        self._ref_act_unique_id = ref_act_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelBooking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelBooking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
