# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NoteType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'data_type': 'str',
        'active': 'bool',
        'default': 'bool',
        'use_name': 'bool',
        'public': 'bool',
        'internal': 'bool',
        'group': 'bool',
        'group_selected_type': 'list[str]',
        'unique_id': 'str',
        'timestamp': 'datetime',
        'modified_by_unique_id': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'data_type': 'DataType',
        'active': 'Active',
        'default': 'Default',
        'use_name': 'UseName',
        'public': 'Public',
        'internal': 'Internal',
        'group': 'Group',
        'group_selected_type': 'GroupSelectedType',
        'unique_id': 'UniqueID',
        'timestamp': 'Timestamp',
        'modified_by_unique_id': 'ModifiedByUniqueId'
    }

    def __init__(self, name=None, data_type=None, active=None, default=None, use_name=None, public=None, internal=None, group=None, group_selected_type=None, unique_id=None, timestamp=None, modified_by_unique_id=None):  # noqa: E501
        """NoteType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._data_type = None
        self._active = None
        self._default = None
        self._use_name = None
        self._public = None
        self._internal = None
        self._group = None
        self._group_selected_type = None
        self._unique_id = None
        self._timestamp = None
        self._modified_by_unique_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if active is not None:
            self.active = active
        if default is not None:
            self.default = default
        if use_name is not None:
            self.use_name = use_name
        if public is not None:
            self.public = public
        if internal is not None:
            self.internal = internal
        if group is not None:
            self.group = group
        if group_selected_type is not None:
            self.group_selected_type = group_selected_type
        if unique_id is not None:
            self.unique_id = unique_id
        if timestamp is not None:
            self.timestamp = timestamp
        if modified_by_unique_id is not None:
            self.modified_by_unique_id = modified_by_unique_id

    @property
    def name(self):
        """Gets the name of this NoteType.  # noqa: E501


        :return: The name of this NoteType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NoteType.


        :param name: The name of this NoteType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this NoteType.  # noqa: E501


        :return: The data_type of this NoteType.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NoteType.


        :param data_type: The data_type of this NoteType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "CompanyActivity", "Schedule", "HumanResource", "Flight", "Weather", "Vehicle", "ReferenceActivity", "Roster", "CompanyActivityList", "StnFacility", "SystemInformation", "PaxCompanyActivity", "Eurocontrol", "FlightPlan", "HotelActivty", "Block", "Maintenance", "Slot", "VehicleList", "HRDocument", "RosterRevisionTransaction", "ScheduleRevisionTransaction", "Violation", "HumanResourceList", "StationsOTP", "BlockElement", "RosterElement", "ReportExport", "GndEvent", "Charter", "GroundDemand", "HRRequest", "Balance", "Import", "VehicleReferenceActivity", "DynamicPaxLoadDemand", "HRLeave", "PayRoll", "Training", "DayNote", "APIS", "ActivitySlot", "HotelRules", "OpenTimeHelper", "HrConsolidation", "SSIMImport", "RosterPublication", "Freetext"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def active(self):
        """Gets the active of this NoteType.  # noqa: E501


        :return: The active of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NoteType.


        :param active: The active of this NoteType.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def default(self):
        """Gets the default of this NoteType.  # noqa: E501


        :return: The default of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this NoteType.


        :param default: The default of this NoteType.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def use_name(self):
        """Gets the use_name of this NoteType.  # noqa: E501


        :return: The use_name of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._use_name

    @use_name.setter
    def use_name(self, use_name):
        """Sets the use_name of this NoteType.


        :param use_name: The use_name of this NoteType.  # noqa: E501
        :type: bool
        """

        self._use_name = use_name

    @property
    def public(self):
        """Gets the public of this NoteType.  # noqa: E501


        :return: The public of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this NoteType.


        :param public: The public of this NoteType.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def internal(self):
        """Gets the internal of this NoteType.  # noqa: E501


        :return: The internal of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this NoteType.


        :param internal: The internal of this NoteType.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def group(self):
        """Gets the group of this NoteType.  # noqa: E501


        :return: The group of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NoteType.


        :param group: The group of this NoteType.  # noqa: E501
        :type: bool
        """

        self._group = group

    @property
    def group_selected_type(self):
        """Gets the group_selected_type of this NoteType.  # noqa: E501


        :return: The group_selected_type of this NoteType.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_selected_type

    @group_selected_type.setter
    def group_selected_type(self, group_selected_type):
        """Sets the group_selected_type of this NoteType.


        :param group_selected_type: The group_selected_type of this NoteType.  # noqa: E501
        :type: list[str]
        """

        self._group_selected_type = group_selected_type

    @property
    def unique_id(self):
        """Gets the unique_id of this NoteType.  # noqa: E501


        :return: The unique_id of this NoteType.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this NoteType.


        :param unique_id: The unique_id of this NoteType.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def timestamp(self):
        """Gets the timestamp of this NoteType.  # noqa: E501

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The timestamp of this NoteType.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this NoteType.

        Modified DateTime Stamp. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param timestamp: The timestamp of this NoteType.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def modified_by_unique_id(self):
        """Gets the modified_by_unique_id of this NoteType.  # noqa: E501

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :return: The modified_by_unique_id of this NoteType.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_unique_id

    @modified_by_unique_id.setter
    def modified_by_unique_id(self, modified_by_unique_id):
        """Sets the modified_by_unique_id of this NoteType.

        Modified By User UniqueId. This field is a readonly property. Do not set it via SET request  # noqa: E501

        :param modified_by_unique_id: The modified_by_unique_id of this NoteType.  # noqa: E501
        :type: int
        """

        self._modified_by_unique_id = modified_by_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
