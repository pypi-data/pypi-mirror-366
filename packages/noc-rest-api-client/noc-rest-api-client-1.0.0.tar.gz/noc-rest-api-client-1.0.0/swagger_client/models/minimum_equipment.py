# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MinimumEquipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'condition': 'str',
        'category': 'str',
        'comment': 'str',
        'valid_hours': 'int',
        'valid_cycles': 'int',
        'external_reference_id': 'int',
        'deleted': 'bool',
        'active': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'name': 'Name',
        'condition': 'Condition',
        'category': 'Category',
        'comment': 'Comment',
        'valid_hours': 'ValidHours',
        'valid_cycles': 'ValidCycles',
        'external_reference_id': 'ExternalReferenceId',
        'deleted': 'Deleted',
        'active': 'Active',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo'
    }

    def __init__(self, name=None, condition=None, category=None, comment=None, valid_hours=None, valid_cycles=None, external_reference_id=None, deleted=None, active=None, valid_from=None, valid_to=None):  # noqa: E501
        """MinimumEquipment - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._condition = None
        self._category = None
        self._comment = None
        self._valid_hours = None
        self._valid_cycles = None
        self._external_reference_id = None
        self._deleted = None
        self._active = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if condition is not None:
            self.condition = condition
        if category is not None:
            self.category = category
        if comment is not None:
            self.comment = comment
        if valid_hours is not None:
            self.valid_hours = valid_hours
        if valid_cycles is not None:
            self.valid_cycles = valid_cycles
        if external_reference_id is not None:
            self.external_reference_id = external_reference_id
        if deleted is not None:
            self.deleted = deleted
        if active is not None:
            self.active = active
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def name(self):
        """Gets the name of this MinimumEquipment.  # noqa: E501


        :return: The name of this MinimumEquipment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MinimumEquipment.


        :param name: The name of this MinimumEquipment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def condition(self):
        """Gets the condition of this MinimumEquipment.  # noqa: E501


        :return: The condition of this MinimumEquipment.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this MinimumEquipment.


        :param condition: The condition of this MinimumEquipment.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def category(self):
        """Gets the category of this MinimumEquipment.  # noqa: E501


        :return: The category of this MinimumEquipment.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MinimumEquipment.


        :param category: The category of this MinimumEquipment.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def comment(self):
        """Gets the comment of this MinimumEquipment.  # noqa: E501


        :return: The comment of this MinimumEquipment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MinimumEquipment.


        :param comment: The comment of this MinimumEquipment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def valid_hours(self):
        """Gets the valid_hours of this MinimumEquipment.  # noqa: E501


        :return: The valid_hours of this MinimumEquipment.  # noqa: E501
        :rtype: int
        """
        return self._valid_hours

    @valid_hours.setter
    def valid_hours(self, valid_hours):
        """Sets the valid_hours of this MinimumEquipment.


        :param valid_hours: The valid_hours of this MinimumEquipment.  # noqa: E501
        :type: int
        """

        self._valid_hours = valid_hours

    @property
    def valid_cycles(self):
        """Gets the valid_cycles of this MinimumEquipment.  # noqa: E501


        :return: The valid_cycles of this MinimumEquipment.  # noqa: E501
        :rtype: int
        """
        return self._valid_cycles

    @valid_cycles.setter
    def valid_cycles(self, valid_cycles):
        """Sets the valid_cycles of this MinimumEquipment.


        :param valid_cycles: The valid_cycles of this MinimumEquipment.  # noqa: E501
        :type: int
        """

        self._valid_cycles = valid_cycles

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this MinimumEquipment.  # noqa: E501


        :return: The external_reference_id of this MinimumEquipment.  # noqa: E501
        :rtype: int
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this MinimumEquipment.


        :param external_reference_id: The external_reference_id of this MinimumEquipment.  # noqa: E501
        :type: int
        """

        self._external_reference_id = external_reference_id

    @property
    def deleted(self):
        """Gets the deleted of this MinimumEquipment.  # noqa: E501


        :return: The deleted of this MinimumEquipment.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this MinimumEquipment.


        :param deleted: The deleted of this MinimumEquipment.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def active(self):
        """Gets the active of this MinimumEquipment.  # noqa: E501


        :return: The active of this MinimumEquipment.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this MinimumEquipment.


        :param active: The active of this MinimumEquipment.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def valid_from(self):
        """Gets the valid_from of this MinimumEquipment.  # noqa: E501


        :return: The valid_from of this MinimumEquipment.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this MinimumEquipment.


        :param valid_from: The valid_from of this MinimumEquipment.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this MinimumEquipment.  # noqa: E501


        :return: The valid_to of this MinimumEquipment.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this MinimumEquipment.


        :param valid_to: The valid_to of this MinimumEquipment.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinimumEquipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinimumEquipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
