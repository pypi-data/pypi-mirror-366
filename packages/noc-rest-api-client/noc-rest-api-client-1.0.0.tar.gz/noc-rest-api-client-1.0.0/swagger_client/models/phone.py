# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Phone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_prefix': 'str',
        'region_prefix': 'str',
        'phone_number': 'str',
        'priority': 'int',
        'type': 'str',
        'comment': 'str',
        'active': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'country_prefix': 'CountryPrefix',
        'region_prefix': 'RegionPrefix',
        'phone_number': 'PhoneNumber',
        'priority': 'Priority',
        'type': 'Type',
        'comment': 'Comment',
        'active': 'Active',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo'
    }

    def __init__(self, country_prefix=None, region_prefix=None, phone_number=None, priority=None, type=None, comment=None, active=None, valid_from=None, valid_to=None):  # noqa: E501
        """Phone - a model defined in Swagger"""  # noqa: E501
        self._country_prefix = None
        self._region_prefix = None
        self._phone_number = None
        self._priority = None
        self._type = None
        self._comment = None
        self._active = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if country_prefix is not None:
            self.country_prefix = country_prefix
        if region_prefix is not None:
            self.region_prefix = region_prefix
        if phone_number is not None:
            self.phone_number = phone_number
        if priority is not None:
            self.priority = priority
        if type is not None:
            self.type = type
        if comment is not None:
            self.comment = comment
        if active is not None:
            self.active = active
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def country_prefix(self):
        """Gets the country_prefix of this Phone.  # noqa: E501


        :return: The country_prefix of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this Phone.


        :param country_prefix: The country_prefix of this Phone.  # noqa: E501
        :type: str
        """

        self._country_prefix = country_prefix

    @property
    def region_prefix(self):
        """Gets the region_prefix of this Phone.  # noqa: E501


        :return: The region_prefix of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._region_prefix

    @region_prefix.setter
    def region_prefix(self, region_prefix):
        """Sets the region_prefix of this Phone.


        :param region_prefix: The region_prefix of this Phone.  # noqa: E501
        :type: str
        """

        self._region_prefix = region_prefix

    @property
    def phone_number(self):
        """Gets the phone_number of this Phone.  # noqa: E501


        :return: The phone_number of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Phone.


        :param phone_number: The phone_number of this Phone.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def priority(self):
        """Gets the priority of this Phone.  # noqa: E501


        :return: The priority of this Phone.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Phone.


        :param priority: The priority of this Phone.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def type(self):
        """Gets the type of this Phone.  # noqa: E501


        :return: The type of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Phone.


        :param type: The type of this Phone.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def comment(self):
        """Gets the comment of this Phone.  # noqa: E501


        :return: The comment of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Phone.


        :param comment: The comment of this Phone.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def active(self):
        """Gets the active of this Phone.  # noqa: E501


        :return: The active of this Phone.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Phone.


        :param active: The active of this Phone.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def valid_from(self):
        """Gets the valid_from of this Phone.  # noqa: E501


        :return: The valid_from of this Phone.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Phone.


        :param valid_from: The valid_from of this Phone.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this Phone.  # noqa: E501


        :return: The valid_to of this Phone.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this Phone.


        :param valid_to: The valid_to of this Phone.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Phone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Phone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
