# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Aircraft(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'prefix': 'Prefix',
        'unique_id': 'int',
        'registration': 'str',
        'type': 'str',
        'version': 'str',
        'config': 'str',
        'serial_number': 'str',
        'minimum_equipment_list': 'list[MinimumEquipment]',
        'name': 'str',
        'nick_name': 'str',
        'aircraft_notes': 'list[AircraftNoteDto]'
    }

    attribute_map = {
        'owner': 'Owner',
        'prefix': 'Prefix',
        'unique_id': 'UniqueId',
        'registration': 'Registration',
        'type': 'Type',
        'version': 'Version',
        'config': 'Config',
        'serial_number': 'SerialNumber',
        'minimum_equipment_list': 'MinimumEquipmentList',
        'name': 'Name',
        'nick_name': 'NickName',
        'aircraft_notes': 'AircraftNotes'
    }

    def __init__(self, owner=None, prefix=None, unique_id=None, registration=None, type=None, version=None, config=None, serial_number=None, minimum_equipment_list=None, name=None, nick_name=None, aircraft_notes=None):  # noqa: E501
        """Aircraft - a model defined in Swagger"""  # noqa: E501
        self._owner = None
        self._prefix = None
        self._unique_id = None
        self._registration = None
        self._type = None
        self._version = None
        self._config = None
        self._serial_number = None
        self._minimum_equipment_list = None
        self._name = None
        self._nick_name = None
        self._aircraft_notes = None
        self.discriminator = None
        if owner is not None:
            self.owner = owner
        if prefix is not None:
            self.prefix = prefix
        if unique_id is not None:
            self.unique_id = unique_id
        if registration is not None:
            self.registration = registration
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if config is not None:
            self.config = config
        if serial_number is not None:
            self.serial_number = serial_number
        if minimum_equipment_list is not None:
            self.minimum_equipment_list = minimum_equipment_list
        if name is not None:
            self.name = name
        if nick_name is not None:
            self.nick_name = nick_name
        if aircraft_notes is not None:
            self.aircraft_notes = aircraft_notes

    @property
    def owner(self):
        """Gets the owner of this Aircraft.  # noqa: E501


        :return: The owner of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Aircraft.


        :param owner: The owner of this Aircraft.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def prefix(self):
        """Gets the prefix of this Aircraft.  # noqa: E501


        :return: The prefix of this Aircraft.  # noqa: E501
        :rtype: Prefix
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Aircraft.


        :param prefix: The prefix of this Aircraft.  # noqa: E501
        :type: Prefix
        """

        self._prefix = prefix

    @property
    def unique_id(self):
        """Gets the unique_id of this Aircraft.  # noqa: E501


        :return: The unique_id of this Aircraft.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Aircraft.


        :param unique_id: The unique_id of this Aircraft.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def registration(self):
        """Gets the registration of this Aircraft.  # noqa: E501


        :return: The registration of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Aircraft.


        :param registration: The registration of this Aircraft.  # noqa: E501
        :type: str
        """

        self._registration = registration

    @property
    def type(self):
        """Gets the type of this Aircraft.  # noqa: E501


        :return: The type of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Aircraft.


        :param type: The type of this Aircraft.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this Aircraft.  # noqa: E501


        :return: The version of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Aircraft.


        :param version: The version of this Aircraft.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def config(self):
        """Gets the config of this Aircraft.  # noqa: E501


        :return: The config of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Aircraft.


        :param config: The config of this Aircraft.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def serial_number(self):
        """Gets the serial_number of this Aircraft.  # noqa: E501


        :return: The serial_number of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Aircraft.


        :param serial_number: The serial_number of this Aircraft.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def minimum_equipment_list(self):
        """Gets the minimum_equipment_list of this Aircraft.  # noqa: E501


        :return: The minimum_equipment_list of this Aircraft.  # noqa: E501
        :rtype: list[MinimumEquipment]
        """
        return self._minimum_equipment_list

    @minimum_equipment_list.setter
    def minimum_equipment_list(self, minimum_equipment_list):
        """Sets the minimum_equipment_list of this Aircraft.


        :param minimum_equipment_list: The minimum_equipment_list of this Aircraft.  # noqa: E501
        :type: list[MinimumEquipment]
        """

        self._minimum_equipment_list = minimum_equipment_list

    @property
    def name(self):
        """Gets the name of this Aircraft.  # noqa: E501


        :return: The name of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Aircraft.


        :param name: The name of this Aircraft.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nick_name(self):
        """Gets the nick_name of this Aircraft.  # noqa: E501


        :return: The nick_name of this Aircraft.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this Aircraft.


        :param nick_name: The nick_name of this Aircraft.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def aircraft_notes(self):
        """Gets the aircraft_notes of this Aircraft.  # noqa: E501


        :return: The aircraft_notes of this Aircraft.  # noqa: E501
        :rtype: list[AircraftNoteDto]
        """
        return self._aircraft_notes

    @aircraft_notes.setter
    def aircraft_notes(self, aircraft_notes):
        """Sets the aircraft_notes of this Aircraft.


        :param aircraft_notes: The aircraft_notes of this Aircraft.  # noqa: E501
        :type: list[AircraftNoteDto]
        """

        self._aircraft_notes = aircraft_notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Aircraft, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Aircraft):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
