# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VehicleNoteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'message': 'str',
        'note_type': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'deleted': 'bool',
        'modified': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'message': 'Message',
        'note_type': 'NoteType',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'deleted': 'Deleted',
        'modified': 'Modified'
    }

    def __init__(self, id=None, message=None, note_type=None, valid_from=None, valid_to=None, deleted=None, modified=None):  # noqa: E501
        """VehicleNoteDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._message = None
        self._note_type = None
        self._valid_from = None
        self._valid_to = None
        self._deleted = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if note_type is not None:
            self.note_type = note_type
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if deleted is not None:
            self.deleted = deleted
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this VehicleNoteDto.  # noqa: E501


        :return: The id of this VehicleNoteDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleNoteDto.


        :param id: The id of this VehicleNoteDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this VehicleNoteDto.  # noqa: E501


        :return: The message of this VehicleNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this VehicleNoteDto.


        :param message: The message of this VehicleNoteDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def note_type(self):
        """Gets the note_type of this VehicleNoteDto.  # noqa: E501


        :return: The note_type of this VehicleNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this VehicleNoteDto.


        :param note_type: The note_type of this VehicleNoteDto.  # noqa: E501
        :type: str
        """

        self._note_type = note_type

    @property
    def valid_from(self):
        """Gets the valid_from of this VehicleNoteDto.  # noqa: E501


        :return: The valid_from of this VehicleNoteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this VehicleNoteDto.


        :param valid_from: The valid_from of this VehicleNoteDto.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this VehicleNoteDto.  # noqa: E501


        :return: The valid_to of this VehicleNoteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this VehicleNoteDto.


        :param valid_to: The valid_to of this VehicleNoteDto.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def deleted(self):
        """Gets the deleted of this VehicleNoteDto.  # noqa: E501


        :return: The deleted of this VehicleNoteDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VehicleNoteDto.


        :param deleted: The deleted of this VehicleNoteDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def modified(self):
        """Gets the modified of this VehicleNoteDto.  # noqa: E501


        :return: The modified of this VehicleNoteDto.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this VehicleNoteDto.


        :param modified: The modified of this VehicleNoteDto.  # noqa: E501
        :type: bool
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleNoteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleNoteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
