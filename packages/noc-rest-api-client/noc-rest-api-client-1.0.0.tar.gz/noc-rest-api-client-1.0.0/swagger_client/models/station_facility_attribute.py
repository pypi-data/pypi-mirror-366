# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StationFacilityAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'comment': 'str',
        'frequency': 'str',
        'default': 'bool',
        'active': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'name': 'Name',
        'value': 'Value',
        'comment': 'Comment',
        'frequency': 'Frequency',
        'default': 'Default',
        'active': 'Active',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo'
    }

    def __init__(self, name=None, value=None, comment=None, frequency=None, default=None, active=None, valid_from=None, valid_to=None):  # noqa: E501
        """StationFacilityAttribute - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._value = None
        self._comment = None
        self._frequency = None
        self._default = None
        self._active = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if comment is not None:
            self.comment = comment
        if frequency is not None:
            self.frequency = frequency
        if default is not None:
            self.default = default
        if active is not None:
            self.active = active
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def name(self):
        """Gets the name of this StationFacilityAttribute.  # noqa: E501


        :return: The name of this StationFacilityAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StationFacilityAttribute.


        :param name: The name of this StationFacilityAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this StationFacilityAttribute.  # noqa: E501


        :return: The value of this StationFacilityAttribute.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this StationFacilityAttribute.


        :param value: The value of this StationFacilityAttribute.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def comment(self):
        """Gets the comment of this StationFacilityAttribute.  # noqa: E501


        :return: The comment of this StationFacilityAttribute.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StationFacilityAttribute.


        :param comment: The comment of this StationFacilityAttribute.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def frequency(self):
        """Gets the frequency of this StationFacilityAttribute.  # noqa: E501


        :return: The frequency of this StationFacilityAttribute.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this StationFacilityAttribute.


        :param frequency: The frequency of this StationFacilityAttribute.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def default(self):
        """Gets the default of this StationFacilityAttribute.  # noqa: E501


        :return: The default of this StationFacilityAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this StationFacilityAttribute.


        :param default: The default of this StationFacilityAttribute.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def active(self):
        """Gets the active of this StationFacilityAttribute.  # noqa: E501


        :return: The active of this StationFacilityAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StationFacilityAttribute.


        :param active: The active of this StationFacilityAttribute.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def valid_from(self):
        """Gets the valid_from of this StationFacilityAttribute.  # noqa: E501


        :return: The valid_from of this StationFacilityAttribute.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this StationFacilityAttribute.


        :param valid_from: The valid_from of this StationFacilityAttribute.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this StationFacilityAttribute.  # noqa: E501


        :return: The valid_to of this StationFacilityAttribute.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this StationFacilityAttribute.


        :param valid_to: The valid_to of this StationFacilityAttribute.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StationFacilityAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationFacilityAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
