# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaintenanceIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'int',
        'external_reference_id': 'int',
        'maintenance_type': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'type': 'str',
        'airport_code': 'str',
        'aircraft_registration': 'str',
        'name': 'str',
        'notes': 'list[Note]',
        'times': 'list[Time]'
    }

    attribute_map = {
        'unique_id': 'UniqueId',
        'external_reference_id': 'ExternalReferenceId',
        'maintenance_type': 'MaintenanceType',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'type': 'Type',
        'airport_code': 'AirportCode',
        'aircraft_registration': 'AircraftRegistration',
        'name': 'Name',
        'notes': 'Notes',
        'times': 'Times'
    }

    def __init__(self, unique_id=None, external_reference_id=None, maintenance_type=None, start_date_time=None, end_date_time=None, type=None, airport_code=None, aircraft_registration=None, name=None, notes=None, times=None):  # noqa: E501
        """MaintenanceIn - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._external_reference_id = None
        self._maintenance_type = None
        self._start_date_time = None
        self._end_date_time = None
        self._type = None
        self._airport_code = None
        self._aircraft_registration = None
        self._name = None
        self._notes = None
        self._times = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if external_reference_id is not None:
            self.external_reference_id = external_reference_id
        if maintenance_type is not None:
            self.maintenance_type = maintenance_type
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if type is not None:
            self.type = type
        if airport_code is not None:
            self.airport_code = airport_code
        if aircraft_registration is not None:
            self.aircraft_registration = aircraft_registration
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if times is not None:
            self.times = times

    @property
    def unique_id(self):
        """Gets the unique_id of this MaintenanceIn.  # noqa: E501


        :return: The unique_id of this MaintenanceIn.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this MaintenanceIn.


        :param unique_id: The unique_id of this MaintenanceIn.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this MaintenanceIn.  # noqa: E501


        :return: The external_reference_id of this MaintenanceIn.  # noqa: E501
        :rtype: int
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this MaintenanceIn.


        :param external_reference_id: The external_reference_id of this MaintenanceIn.  # noqa: E501
        :type: int
        """

        self._external_reference_id = external_reference_id

    @property
    def maintenance_type(self):
        """Gets the maintenance_type of this MaintenanceIn.  # noqa: E501


        :return: The maintenance_type of this MaintenanceIn.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_type

    @maintenance_type.setter
    def maintenance_type(self, maintenance_type):
        """Sets the maintenance_type of this MaintenanceIn.


        :param maintenance_type: The maintenance_type of this MaintenanceIn.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "MAINTENANCE", "VEHICLEREFERENCEACTIVITY"]  # noqa: E501
        if maintenance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_type, allowed_values)
            )

        self._maintenance_type = maintenance_type

    @property
    def start_date_time(self):
        """Gets the start_date_time of this MaintenanceIn.  # noqa: E501


        :return: The start_date_time of this MaintenanceIn.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this MaintenanceIn.


        :param start_date_time: The start_date_time of this MaintenanceIn.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this MaintenanceIn.  # noqa: E501


        :return: The end_date_time of this MaintenanceIn.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this MaintenanceIn.


        :param end_date_time: The end_date_time of this MaintenanceIn.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def type(self):
        """Gets the type of this MaintenanceIn.  # noqa: E501


        :return: The type of this MaintenanceIn.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MaintenanceIn.


        :param type: The type of this MaintenanceIn.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def airport_code(self):
        """Gets the airport_code of this MaintenanceIn.  # noqa: E501


        :return: The airport_code of this MaintenanceIn.  # noqa: E501
        :rtype: str
        """
        return self._airport_code

    @airport_code.setter
    def airport_code(self, airport_code):
        """Sets the airport_code of this MaintenanceIn.


        :param airport_code: The airport_code of this MaintenanceIn.  # noqa: E501
        :type: str
        """

        self._airport_code = airport_code

    @property
    def aircraft_registration(self):
        """Gets the aircraft_registration of this MaintenanceIn.  # noqa: E501


        :return: The aircraft_registration of this MaintenanceIn.  # noqa: E501
        :rtype: str
        """
        return self._aircraft_registration

    @aircraft_registration.setter
    def aircraft_registration(self, aircraft_registration):
        """Sets the aircraft_registration of this MaintenanceIn.


        :param aircraft_registration: The aircraft_registration of this MaintenanceIn.  # noqa: E501
        :type: str
        """

        self._aircraft_registration = aircraft_registration

    @property
    def name(self):
        """Gets the name of this MaintenanceIn.  # noqa: E501


        :return: The name of this MaintenanceIn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintenanceIn.


        :param name: The name of this MaintenanceIn.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this MaintenanceIn.  # noqa: E501


        :return: The notes of this MaintenanceIn.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this MaintenanceIn.


        :param notes: The notes of this MaintenanceIn.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def times(self):
        """Gets the times of this MaintenanceIn.  # noqa: E501


        :return: The times of this MaintenanceIn.  # noqa: E501
        :rtype: list[Time]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this MaintenanceIn.


        :param times: The times of this MaintenanceIn.  # noqa: E501
        :type: list[Time]
        """

        self._times = times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
