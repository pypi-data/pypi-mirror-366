# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Crew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'unique_id': 'int',
        'number': 'str',
        'code1': 'str',
        'code2': 'str',
        'firstname': 'str',
        'middlename': 'str',
        'lastname': 'str',
        'nickname': 'str',
        'gender': 'str',
        'seniority': 'int',
        'base': 'str',
        'rank': 'str',
        'qualification': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'addresses': 'list[Address]',
        'phones': 'list[PhoneOut]',
        'emails': 'list[Email]',
        'documents': 'list[DocumentOut]',
        'bases': 'list[Base]',
        'ranks': 'list[Rank]',
        'qualifications': 'list[Qualification]',
        'special_roles': 'list[SpecialRoleOut]',
        'roster_activities': 'list[RosterActivity]',
        'pairings': 'list[Pairing]',
        'contracts': 'list[Contract]',
        'crew_type': 'CrewType',
        'revision': 'Revision',
        'roster_transactions': 'list[RosterTransaction]',
        'date_of_employment': 'datetime',
        'dates_of_employment': 'list[datetime]',
        'date_of_birth': 'datetime',
        'external_awd_credit': 'str'
    }

    attribute_map = {
        'active': 'Active',
        'unique_id': 'UniqueId',
        'number': 'Number',
        'code1': 'Code1',
        'code2': 'Code2',
        'firstname': 'Firstname',
        'middlename': 'Middlename',
        'lastname': 'Lastname',
        'nickname': 'Nickname',
        'gender': 'Gender',
        'seniority': 'Seniority',
        'base': 'Base',
        'rank': 'Rank',
        'qualification': 'Qualification',
        'type': 'Type',
        'created_at': 'CreatedAt',
        'modified_at': 'ModifiedAt',
        'addresses': 'Addresses',
        'phones': 'Phones',
        'emails': 'Emails',
        'documents': 'Documents',
        'bases': 'Bases',
        'ranks': 'Ranks',
        'qualifications': 'Qualifications',
        'special_roles': 'SpecialRoles',
        'roster_activities': 'RosterActivities',
        'pairings': 'Pairings',
        'contracts': 'Contracts',
        'crew_type': 'CrewType',
        'revision': 'Revision',
        'roster_transactions': 'RosterTransactions',
        'date_of_employment': 'DateOfEmployment',
        'dates_of_employment': 'DatesOfEmployment',
        'date_of_birth': 'DateOfBirth',
        'external_awd_credit': 'ExternalAWDCredit'
    }

    def __init__(self, active=None, unique_id=None, number=None, code1=None, code2=None, firstname=None, middlename=None, lastname=None, nickname=None, gender=None, seniority=None, base=None, rank=None, qualification=None, type=None, created_at=None, modified_at=None, addresses=None, phones=None, emails=None, documents=None, bases=None, ranks=None, qualifications=None, special_roles=None, roster_activities=None, pairings=None, contracts=None, crew_type=None, revision=None, roster_transactions=None, date_of_employment=None, dates_of_employment=None, date_of_birth=None, external_awd_credit=None):  # noqa: E501
        """Crew - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._unique_id = None
        self._number = None
        self._code1 = None
        self._code2 = None
        self._firstname = None
        self._middlename = None
        self._lastname = None
        self._nickname = None
        self._gender = None
        self._seniority = None
        self._base = None
        self._rank = None
        self._qualification = None
        self._type = None
        self._created_at = None
        self._modified_at = None
        self._addresses = None
        self._phones = None
        self._emails = None
        self._documents = None
        self._bases = None
        self._ranks = None
        self._qualifications = None
        self._special_roles = None
        self._roster_activities = None
        self._pairings = None
        self._contracts = None
        self._crew_type = None
        self._revision = None
        self._roster_transactions = None
        self._date_of_employment = None
        self._dates_of_employment = None
        self._date_of_birth = None
        self._external_awd_credit = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if unique_id is not None:
            self.unique_id = unique_id
        if number is not None:
            self.number = number
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if firstname is not None:
            self.firstname = firstname
        if middlename is not None:
            self.middlename = middlename
        if lastname is not None:
            self.lastname = lastname
        if nickname is not None:
            self.nickname = nickname
        if gender is not None:
            self.gender = gender
        if seniority is not None:
            self.seniority = seniority
        if base is not None:
            self.base = base
        if rank is not None:
            self.rank = rank
        if qualification is not None:
            self.qualification = qualification
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if addresses is not None:
            self.addresses = addresses
        if phones is not None:
            self.phones = phones
        if emails is not None:
            self.emails = emails
        if documents is not None:
            self.documents = documents
        if bases is not None:
            self.bases = bases
        if ranks is not None:
            self.ranks = ranks
        if qualifications is not None:
            self.qualifications = qualifications
        if special_roles is not None:
            self.special_roles = special_roles
        if roster_activities is not None:
            self.roster_activities = roster_activities
        if pairings is not None:
            self.pairings = pairings
        if contracts is not None:
            self.contracts = contracts
        if crew_type is not None:
            self.crew_type = crew_type
        if revision is not None:
            self.revision = revision
        if roster_transactions is not None:
            self.roster_transactions = roster_transactions
        if date_of_employment is not None:
            self.date_of_employment = date_of_employment
        if dates_of_employment is not None:
            self.dates_of_employment = dates_of_employment
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if external_awd_credit is not None:
            self.external_awd_credit = external_awd_credit

    @property
    def active(self):
        """Gets the active of this Crew.  # noqa: E501


        :return: The active of this Crew.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Crew.


        :param active: The active of this Crew.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def unique_id(self):
        """Gets the unique_id of this Crew.  # noqa: E501

        Unique ID of the human resource (crew)  # noqa: E501

        :return: The unique_id of this Crew.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Crew.

        Unique ID of the human resource (crew)  # noqa: E501

        :param unique_id: The unique_id of this Crew.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def number(self):
        """Gets the number of this Crew.  # noqa: E501

        Employee Number of the crew  # noqa: E501

        :return: The number of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Crew.

        Employee Number of the crew  # noqa: E501

        :param number: The number of this Crew.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def code1(self):
        """Gets the code1 of this Crew.  # noqa: E501

        Human resource ShortCode1  # noqa: E501

        :return: The code1 of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this Crew.

        Human resource ShortCode1  # noqa: E501

        :param code1: The code1 of this Crew.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this Crew.  # noqa: E501

        Human resource ShortCode2  # noqa: E501

        :return: The code2 of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this Crew.

        Human resource ShortCode2  # noqa: E501

        :param code2: The code2 of this Crew.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def firstname(self):
        """Gets the firstname of this Crew.  # noqa: E501


        :return: The firstname of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Crew.


        :param firstname: The firstname of this Crew.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def middlename(self):
        """Gets the middlename of this Crew.  # noqa: E501


        :return: The middlename of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this Crew.


        :param middlename: The middlename of this Crew.  # noqa: E501
        :type: str
        """

        self._middlename = middlename

    @property
    def lastname(self):
        """Gets the lastname of this Crew.  # noqa: E501


        :return: The lastname of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Crew.


        :param lastname: The lastname of this Crew.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def nickname(self):
        """Gets the nickname of this Crew.  # noqa: E501


        :return: The nickname of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Crew.


        :param nickname: The nickname of this Crew.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def gender(self):
        """Gets the gender of this Crew.  # noqa: E501

        Human resource gender can be either Male or Female  # noqa: E501

        :return: The gender of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Crew.

        Human resource gender can be either Male or Female  # noqa: E501

        :param gender: The gender of this Crew.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def seniority(self):
        """Gets the seniority of this Crew.  # noqa: E501


        :return: The seniority of this Crew.  # noqa: E501
        :rtype: int
        """
        return self._seniority

    @seniority.setter
    def seniority(self, seniority):
        """Sets the seniority of this Crew.


        :param seniority: The seniority of this Crew.  # noqa: E501
        :type: int
        """

        self._seniority = seniority

    @property
    def base(self):
        """Gets the base of this Crew.  # noqa: E501

        The crew base ShortCode  # noqa: E501

        :return: The base of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Crew.

        The crew base ShortCode  # noqa: E501

        :param base: The base of this Crew.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def rank(self):
        """Gets the rank of this Crew.  # noqa: E501

        The crew rank ShortCode  # noqa: E501

        :return: The rank of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Crew.

        The crew rank ShortCode  # noqa: E501

        :param rank: The rank of this Crew.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def qualification(self):
        """Gets the qualification of this Crew.  # noqa: E501

        The crew qualification ShortCode  # noqa: E501

        :return: The qualification of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._qualification

    @qualification.setter
    def qualification(self, qualification):
        """Sets the qualification of this Crew.

        The crew qualification ShortCode  # noqa: E501

        :param qualification: The qualification of this Crew.  # noqa: E501
        :type: str
        """

        self._qualification = qualification

    @property
    def type(self):
        """Gets the type of this Crew.  # noqa: E501

        Human resource type ShortCode  # noqa: E501

        :return: The type of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Crew.

        Human resource type ShortCode  # noqa: E501

        :param type: The type of this Crew.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this Crew.  # noqa: E501


        :return: The created_at of this Crew.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Crew.


        :param created_at: The created_at of this Crew.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Crew.  # noqa: E501


        :return: The modified_at of this Crew.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Crew.


        :param modified_at: The modified_at of this Crew.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def addresses(self):
        """Gets the addresses of this Crew.  # noqa: E501


        :return: The addresses of this Crew.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Crew.


        :param addresses: The addresses of this Crew.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def phones(self):
        """Gets the phones of this Crew.  # noqa: E501


        :return: The phones of this Crew.  # noqa: E501
        :rtype: list[PhoneOut]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Crew.


        :param phones: The phones of this Crew.  # noqa: E501
        :type: list[PhoneOut]
        """

        self._phones = phones

    @property
    def emails(self):
        """Gets the emails of this Crew.  # noqa: E501


        :return: The emails of this Crew.  # noqa: E501
        :rtype: list[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Crew.


        :param emails: The emails of this Crew.  # noqa: E501
        :type: list[Email]
        """

        self._emails = emails

    @property
    def documents(self):
        """Gets the documents of this Crew.  # noqa: E501


        :return: The documents of this Crew.  # noqa: E501
        :rtype: list[DocumentOut]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Crew.


        :param documents: The documents of this Crew.  # noqa: E501
        :type: list[DocumentOut]
        """

        self._documents = documents

    @property
    def bases(self):
        """Gets the bases of this Crew.  # noqa: E501


        :return: The bases of this Crew.  # noqa: E501
        :rtype: list[Base]
        """
        return self._bases

    @bases.setter
    def bases(self, bases):
        """Sets the bases of this Crew.


        :param bases: The bases of this Crew.  # noqa: E501
        :type: list[Base]
        """

        self._bases = bases

    @property
    def ranks(self):
        """Gets the ranks of this Crew.  # noqa: E501


        :return: The ranks of this Crew.  # noqa: E501
        :rtype: list[Rank]
        """
        return self._ranks

    @ranks.setter
    def ranks(self, ranks):
        """Sets the ranks of this Crew.


        :param ranks: The ranks of this Crew.  # noqa: E501
        :type: list[Rank]
        """

        self._ranks = ranks

    @property
    def qualifications(self):
        """Gets the qualifications of this Crew.  # noqa: E501


        :return: The qualifications of this Crew.  # noqa: E501
        :rtype: list[Qualification]
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """Sets the qualifications of this Crew.


        :param qualifications: The qualifications of this Crew.  # noqa: E501
        :type: list[Qualification]
        """

        self._qualifications = qualifications

    @property
    def special_roles(self):
        """Gets the special_roles of this Crew.  # noqa: E501


        :return: The special_roles of this Crew.  # noqa: E501
        :rtype: list[SpecialRoleOut]
        """
        return self._special_roles

    @special_roles.setter
    def special_roles(self, special_roles):
        """Sets the special_roles of this Crew.


        :param special_roles: The special_roles of this Crew.  # noqa: E501
        :type: list[SpecialRoleOut]
        """

        self._special_roles = special_roles

    @property
    def roster_activities(self):
        """Gets the roster_activities of this Crew.  # noqa: E501


        :return: The roster_activities of this Crew.  # noqa: E501
        :rtype: list[RosterActivity]
        """
        return self._roster_activities

    @roster_activities.setter
    def roster_activities(self, roster_activities):
        """Sets the roster_activities of this Crew.


        :param roster_activities: The roster_activities of this Crew.  # noqa: E501
        :type: list[RosterActivity]
        """

        self._roster_activities = roster_activities

    @property
    def pairings(self):
        """Gets the pairings of this Crew.  # noqa: E501


        :return: The pairings of this Crew.  # noqa: E501
        :rtype: list[Pairing]
        """
        return self._pairings

    @pairings.setter
    def pairings(self, pairings):
        """Sets the pairings of this Crew.


        :param pairings: The pairings of this Crew.  # noqa: E501
        :type: list[Pairing]
        """

        self._pairings = pairings

    @property
    def contracts(self):
        """Gets the contracts of this Crew.  # noqa: E501


        :return: The contracts of this Crew.  # noqa: E501
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this Crew.


        :param contracts: The contracts of this Crew.  # noqa: E501
        :type: list[Contract]
        """

        self._contracts = contracts

    @property
    def crew_type(self):
        """Gets the crew_type of this Crew.  # noqa: E501


        :return: The crew_type of this Crew.  # noqa: E501
        :rtype: CrewType
        """
        return self._crew_type

    @crew_type.setter
    def crew_type(self, crew_type):
        """Sets the crew_type of this Crew.


        :param crew_type: The crew_type of this Crew.  # noqa: E501
        :type: CrewType
        """

        self._crew_type = crew_type

    @property
    def revision(self):
        """Gets the revision of this Crew.  # noqa: E501


        :return: The revision of this Crew.  # noqa: E501
        :rtype: Revision
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Crew.


        :param revision: The revision of this Crew.  # noqa: E501
        :type: Revision
        """

        self._revision = revision

    @property
    def roster_transactions(self):
        """Gets the roster_transactions of this Crew.  # noqa: E501


        :return: The roster_transactions of this Crew.  # noqa: E501
        :rtype: list[RosterTransaction]
        """
        return self._roster_transactions

    @roster_transactions.setter
    def roster_transactions(self, roster_transactions):
        """Sets the roster_transactions of this Crew.


        :param roster_transactions: The roster_transactions of this Crew.  # noqa: E501
        :type: list[RosterTransaction]
        """

        self._roster_transactions = roster_transactions

    @property
    def date_of_employment(self):
        """Gets the date_of_employment of this Crew.  # noqa: E501

        DEPRECATED: Use DatesOfEmployment instead  # noqa: E501

        :return: The date_of_employment of this Crew.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_employment

    @date_of_employment.setter
    def date_of_employment(self, date_of_employment):
        """Sets the date_of_employment of this Crew.

        DEPRECATED: Use DatesOfEmployment instead  # noqa: E501

        :param date_of_employment: The date_of_employment of this Crew.  # noqa: E501
        :type: datetime
        """

        self._date_of_employment = date_of_employment

    @property
    def dates_of_employment(self):
        """Gets the dates_of_employment of this Crew.  # noqa: E501


        :return: The dates_of_employment of this Crew.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._dates_of_employment

    @dates_of_employment.setter
    def dates_of_employment(self, dates_of_employment):
        """Sets the dates_of_employment of this Crew.


        :param dates_of_employment: The dates_of_employment of this Crew.  # noqa: E501
        :type: list[datetime]
        """

        self._dates_of_employment = dates_of_employment

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Crew.  # noqa: E501


        :return: The date_of_birth of this Crew.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Crew.


        :param date_of_birth: The date_of_birth of this Crew.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def external_awd_credit(self):
        """Gets the external_awd_credit of this Crew.  # noqa: E501


        :return: The external_awd_credit of this Crew.  # noqa: E501
        :rtype: str
        """
        return self._external_awd_credit

    @external_awd_credit.setter
    def external_awd_credit(self, external_awd_credit):
        """Sets the external_awd_credit of this Crew.


        :param external_awd_credit: The external_awd_credit of this Crew.  # noqa: E501
        :type: str
        """

        self._external_awd_credit = external_awd_credit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Crew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Crew):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
