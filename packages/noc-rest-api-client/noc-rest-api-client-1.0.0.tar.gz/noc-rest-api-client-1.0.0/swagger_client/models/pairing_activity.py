# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PairingActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'times': 'list[TimeOut]',
        'complement_descriptions': 'list[ComplementDescription]',
        'unique_id': 'int',
        'activity_type': 'str',
        'activity_sub_type': 'str',
        'activity_code': 'str',
        'start_airport_code': 'str',
        'end_airport_code': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'start_local_time_diff': 'int',
        'end_local_time_diff': 'int',
        'start_base_time_diff': 'int',
        'end_base_time_diff': 'int',
        'equipment_type': 'str',
        'equipment_version': 'str',
        'complement': 'str',
        'roster_designator': 'str',
        'legal_exception': 'str',
        'credit': 'int',
        'comment': 'str'
    }

    attribute_map = {
        'times': 'Times',
        'complement_descriptions': 'ComplementDescriptions',
        'unique_id': 'UniqueId',
        'activity_type': 'ActivityType',
        'activity_sub_type': 'ActivitySubType',
        'activity_code': 'ActivityCode',
        'start_airport_code': 'StartAirportCode',
        'end_airport_code': 'EndAirportCode',
        'start': 'Start',
        'end': 'End',
        'start_local_time_diff': 'StartLocalTimeDiff',
        'end_local_time_diff': 'EndLocalTimeDiff',
        'start_base_time_diff': 'StartBaseTimeDiff',
        'end_base_time_diff': 'EndBaseTimeDiff',
        'equipment_type': 'EquipmentType',
        'equipment_version': 'EquipmentVersion',
        'complement': 'Complement',
        'roster_designator': 'RosterDesignator',
        'legal_exception': 'LegalException',
        'credit': 'Credit',
        'comment': 'Comment'
    }

    def __init__(self, times=None, complement_descriptions=None, unique_id=None, activity_type=None, activity_sub_type=None, activity_code=None, start_airport_code=None, end_airport_code=None, start=None, end=None, start_local_time_diff=None, end_local_time_diff=None, start_base_time_diff=None, end_base_time_diff=None, equipment_type=None, equipment_version=None, complement=None, roster_designator=None, legal_exception=None, credit=None, comment=None):  # noqa: E501
        """PairingActivity - a model defined in Swagger"""  # noqa: E501
        self._times = None
        self._complement_descriptions = None
        self._unique_id = None
        self._activity_type = None
        self._activity_sub_type = None
        self._activity_code = None
        self._start_airport_code = None
        self._end_airport_code = None
        self._start = None
        self._end = None
        self._start_local_time_diff = None
        self._end_local_time_diff = None
        self._start_base_time_diff = None
        self._end_base_time_diff = None
        self._equipment_type = None
        self._equipment_version = None
        self._complement = None
        self._roster_designator = None
        self._legal_exception = None
        self._credit = None
        self._comment = None
        self.discriminator = None
        if times is not None:
            self.times = times
        if complement_descriptions is not None:
            self.complement_descriptions = complement_descriptions
        if unique_id is not None:
            self.unique_id = unique_id
        if activity_type is not None:
            self.activity_type = activity_type
        if activity_sub_type is not None:
            self.activity_sub_type = activity_sub_type
        if activity_code is not None:
            self.activity_code = activity_code
        if start_airport_code is not None:
            self.start_airport_code = start_airport_code
        if end_airport_code is not None:
            self.end_airport_code = end_airport_code
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if start_local_time_diff is not None:
            self.start_local_time_diff = start_local_time_diff
        if end_local_time_diff is not None:
            self.end_local_time_diff = end_local_time_diff
        if start_base_time_diff is not None:
            self.start_base_time_diff = start_base_time_diff
        if end_base_time_diff is not None:
            self.end_base_time_diff = end_base_time_diff
        if equipment_type is not None:
            self.equipment_type = equipment_type
        if equipment_version is not None:
            self.equipment_version = equipment_version
        if complement is not None:
            self.complement = complement
        if roster_designator is not None:
            self.roster_designator = roster_designator
        if legal_exception is not None:
            self.legal_exception = legal_exception
        if credit is not None:
            self.credit = credit
        if comment is not None:
            self.comment = comment

    @property
    def times(self):
        """Gets the times of this PairingActivity.  # noqa: E501


        :return: The times of this PairingActivity.  # noqa: E501
        :rtype: list[TimeOut]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this PairingActivity.


        :param times: The times of this PairingActivity.  # noqa: E501
        :type: list[TimeOut]
        """

        self._times = times

    @property
    def complement_descriptions(self):
        """Gets the complement_descriptions of this PairingActivity.  # noqa: E501


        :return: The complement_descriptions of this PairingActivity.  # noqa: E501
        :rtype: list[ComplementDescription]
        """
        return self._complement_descriptions

    @complement_descriptions.setter
    def complement_descriptions(self, complement_descriptions):
        """Sets the complement_descriptions of this PairingActivity.


        :param complement_descriptions: The complement_descriptions of this PairingActivity.  # noqa: E501
        :type: list[ComplementDescription]
        """

        self._complement_descriptions = complement_descriptions

    @property
    def unique_id(self):
        """Gets the unique_id of this PairingActivity.  # noqa: E501


        :return: The unique_id of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this PairingActivity.


        :param unique_id: The unique_id of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def activity_type(self):
        """Gets the activity_type of this PairingActivity.  # noqa: E501


        :return: The activity_type of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this PairingActivity.


        :param activity_type: The activity_type of this PairingActivity.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "FLIGHT", "REFERENCEACTIVITY"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def activity_sub_type(self):
        """Gets the activity_sub_type of this PairingActivity.  # noqa: E501


        :return: The activity_sub_type of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_sub_type

    @activity_sub_type.setter
    def activity_sub_type(self, activity_sub_type):
        """Sets the activity_sub_type of this PairingActivity.


        :param activity_sub_type: The activity_sub_type of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._activity_sub_type = activity_sub_type

    @property
    def activity_code(self):
        """Gets the activity_code of this PairingActivity.  # noqa: E501


        :return: The activity_code of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_code

    @activity_code.setter
    def activity_code(self, activity_code):
        """Sets the activity_code of this PairingActivity.


        :param activity_code: The activity_code of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._activity_code = activity_code

    @property
    def start_airport_code(self):
        """Gets the start_airport_code of this PairingActivity.  # noqa: E501


        :return: The start_airport_code of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._start_airport_code

    @start_airport_code.setter
    def start_airport_code(self, start_airport_code):
        """Sets the start_airport_code of this PairingActivity.


        :param start_airport_code: The start_airport_code of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._start_airport_code = start_airport_code

    @property
    def end_airport_code(self):
        """Gets the end_airport_code of this PairingActivity.  # noqa: E501


        :return: The end_airport_code of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._end_airport_code

    @end_airport_code.setter
    def end_airport_code(self, end_airport_code):
        """Sets the end_airport_code of this PairingActivity.


        :param end_airport_code: The end_airport_code of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._end_airport_code = end_airport_code

    @property
    def start(self):
        """Gets the start of this PairingActivity.  # noqa: E501


        :return: The start of this PairingActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PairingActivity.


        :param start: The start of this PairingActivity.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this PairingActivity.  # noqa: E501


        :return: The end of this PairingActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PairingActivity.


        :param end: The end of this PairingActivity.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def start_local_time_diff(self):
        """Gets the start_local_time_diff of this PairingActivity.  # noqa: E501


        :return: The start_local_time_diff of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._start_local_time_diff

    @start_local_time_diff.setter
    def start_local_time_diff(self, start_local_time_diff):
        """Sets the start_local_time_diff of this PairingActivity.


        :param start_local_time_diff: The start_local_time_diff of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._start_local_time_diff = start_local_time_diff

    @property
    def end_local_time_diff(self):
        """Gets the end_local_time_diff of this PairingActivity.  # noqa: E501


        :return: The end_local_time_diff of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._end_local_time_diff

    @end_local_time_diff.setter
    def end_local_time_diff(self, end_local_time_diff):
        """Sets the end_local_time_diff of this PairingActivity.


        :param end_local_time_diff: The end_local_time_diff of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._end_local_time_diff = end_local_time_diff

    @property
    def start_base_time_diff(self):
        """Gets the start_base_time_diff of this PairingActivity.  # noqa: E501


        :return: The start_base_time_diff of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._start_base_time_diff

    @start_base_time_diff.setter
    def start_base_time_diff(self, start_base_time_diff):
        """Sets the start_base_time_diff of this PairingActivity.


        :param start_base_time_diff: The start_base_time_diff of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._start_base_time_diff = start_base_time_diff

    @property
    def end_base_time_diff(self):
        """Gets the end_base_time_diff of this PairingActivity.  # noqa: E501


        :return: The end_base_time_diff of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._end_base_time_diff

    @end_base_time_diff.setter
    def end_base_time_diff(self, end_base_time_diff):
        """Sets the end_base_time_diff of this PairingActivity.


        :param end_base_time_diff: The end_base_time_diff of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._end_base_time_diff = end_base_time_diff

    @property
    def equipment_type(self):
        """Gets the equipment_type of this PairingActivity.  # noqa: E501


        :return: The equipment_type of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this PairingActivity.


        :param equipment_type: The equipment_type of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._equipment_type = equipment_type

    @property
    def equipment_version(self):
        """Gets the equipment_version of this PairingActivity.  # noqa: E501


        :return: The equipment_version of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._equipment_version

    @equipment_version.setter
    def equipment_version(self, equipment_version):
        """Sets the equipment_version of this PairingActivity.


        :param equipment_version: The equipment_version of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._equipment_version = equipment_version

    @property
    def complement(self):
        """Gets the complement of this PairingActivity.  # noqa: E501


        :return: The complement of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this PairingActivity.


        :param complement: The complement of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def roster_designator(self):
        """Gets the roster_designator of this PairingActivity.  # noqa: E501


        :return: The roster_designator of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._roster_designator

    @roster_designator.setter
    def roster_designator(self, roster_designator):
        """Sets the roster_designator of this PairingActivity.


        :param roster_designator: The roster_designator of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._roster_designator = roster_designator

    @property
    def legal_exception(self):
        """Gets the legal_exception of this PairingActivity.  # noqa: E501


        :return: The legal_exception of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._legal_exception

    @legal_exception.setter
    def legal_exception(self, legal_exception):
        """Sets the legal_exception of this PairingActivity.


        :param legal_exception: The legal_exception of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._legal_exception = legal_exception

    @property
    def credit(self):
        """Gets the credit of this PairingActivity.  # noqa: E501


        :return: The credit of this PairingActivity.  # noqa: E501
        :rtype: int
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this PairingActivity.


        :param credit: The credit of this PairingActivity.  # noqa: E501
        :type: int
        """

        self._credit = credit

    @property
    def comment(self):
        """Gets the comment of this PairingActivity.  # noqa: E501


        :return: The comment of this PairingActivity.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PairingActivity.


        :param comment: The comment of this PairingActivity.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PairingActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PairingActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
