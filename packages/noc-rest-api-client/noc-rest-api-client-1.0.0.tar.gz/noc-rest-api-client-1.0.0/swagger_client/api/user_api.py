# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_authenticate_user(self, auth_user, auth_password, **kwargs):  # noqa: E501
        """Authenticate a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_authenticate_user(auth_user, auth_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_user: the user being authenticated (required)
        :param str auth_password: the password of the user being authenticated.� (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_authenticate_user_with_http_info(auth_user, auth_password, **kwargs)  # noqa: E501
        else:
            (data) = self.user_authenticate_user_with_http_info(auth_user, auth_password, **kwargs)  # noqa: E501
            return data

    def user_authenticate_user_with_http_info(self, auth_user, auth_password, **kwargs):  # noqa: E501
        """Authenticate a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_authenticate_user_with_http_info(auth_user, auth_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_user: the user being authenticated (required)
        :param str auth_password: the password of the user being authenticated.� (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_user', 'auth_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_authenticate_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_user' is set
        if ('auth_user' not in params or
                params['auth_user'] is None):
            raise ValueError("Missing the required parameter `auth_user` when calling `user_authenticate_user`")  # noqa: E501
        # verify the required parameter 'auth_password' is set
        if ('auth_password' not in params or
                params['auth_password'] is None):
            raise ValueError("Missing the required parameter `auth_password` when calling `user_authenticate_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'auth_user' in params:
            query_params.append(('AuthUser', params['auth_user']))  # noqa: E501
        if 'auth_password' in params:
            query_params.append(('AuthPassword', params['auth_password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/users/authenticate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_create_user(self, body, **kwargs):  # noqa: E501
        """Create a new user or update an existing one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserIn body: User that you want to create (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_create_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_create_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_create_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new user or update an existing one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_create_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserIn body: User that you want to create (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_create_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_create_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_users(self, **kwargs):  # noqa: E501
        """Get users with optional filtering.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool only_active_user: Flag to specify if only active users should be retrieved (default false).
        :param str unique_id: Optional user unique id.
        :param str username: Optional username.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_users_with_http_info(self, **kwargs):  # noqa: E501
        """Get users with optional filtering.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool only_active_user: Flag to specify if only active users should be retrieved (default false).
        :param str unique_id: Optional user unique id.
        :param str username: Optional username.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['only_active_user', 'unique_id', 'username', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'only_active_user' in params:
            query_params.append(('OnlyActiveUser', params['only_active_user']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'username' in params:
            query_params.append(('Username', params['username']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
