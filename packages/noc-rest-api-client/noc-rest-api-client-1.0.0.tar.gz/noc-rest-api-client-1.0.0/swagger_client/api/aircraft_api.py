# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AircraftApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def aircraft_delete_aircraft_mels(self, body, registration, **kwargs):  # noqa: E501
        """Deletes multiple Minimum Equipment Lists (MELs) associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_delete_aircraft_mels(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteAircraftIn] body: The list of MELs to be deleted. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_delete_aircraft_mels_with_http_info(body, registration, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_delete_aircraft_mels_with_http_info(body, registration, **kwargs)  # noqa: E501
            return data

    def aircraft_delete_aircraft_mels_with_http_info(self, body, registration, **kwargs):  # noqa: E501
        """Deletes multiple Minimum Equipment Lists (MELs) associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_delete_aircraft_mels_with_http_info(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteAircraftIn] body: The list of MELs to be deleted. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_delete_aircraft_mels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `aircraft_delete_aircraft_mels`")  # noqa: E501
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_delete_aircraft_mels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}/mels', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_get_aircraft(self, **kwargs):  # noqa: E501
        """Retrieves aircraft information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The aircraft filter ID .
        :param str filter_name: The aircraft filter name.
        :param str unique_id: The unique id of the aircraft.
        :param str registration: The registration code of the aircraft.
        :param list[str] request_data: The list of fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Aircraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_get_aircraft_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_get_aircraft_with_http_info(**kwargs)  # noqa: E501
            return data

    def aircraft_get_aircraft_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves aircraft information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The aircraft filter ID .
        :param str filter_name: The aircraft filter name.
        :param str unique_id: The unique id of the aircraft.
        :param str registration: The registration code of the aircraft.
        :param list[str] request_data: The list of fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Aircraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id', 'filter_name', 'unique_id', 'registration', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_get_aircraft" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_id' in params:
            query_params.append(('FilterID', params['filter_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueID', params['unique_id']))  # noqa: E501
        if 'registration' in params:
            query_params.append(('registration', params['registration']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Aircraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_get_aircraft_by_unique_id(self, id, **kwargs):  # noqa: E501
        """Retrieves aircraft information by unique ID or registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_by_unique_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique ID or registration of the aircraft. (required)
        :param bool include_mels: Flag indicating whether to include MELs (Minimum Equipment Lists) for the aircraft (default false).
        :param bool include_notes: Flag indicating whether to include notes for the aircraft (default false).
        :return: list[Aircraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_get_aircraft_by_unique_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_get_aircraft_by_unique_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def aircraft_get_aircraft_by_unique_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves aircraft information by unique ID or registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_by_unique_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique ID or registration of the aircraft. (required)
        :param bool include_mels: Flag indicating whether to include MELs (Minimum Equipment Lists) for the aircraft (default false).
        :param bool include_notes: Flag indicating whether to include notes for the aircraft (default false).
        :return: list[Aircraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include_mels', 'include_notes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_get_aircraft_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `aircraft_get_aircraft_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_mels' in params:
            query_params.append(('includeMels', params['include_mels']))  # noqa: E501
        if 'include_notes' in params:
            query_params.append(('includeNotes', params['include_notes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Aircraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_get_aircraft_mels(self, registration, **kwargs):  # noqa: E501
        """Retrieves the Minimum Equipment List (MEL) items associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_mels(registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration: The registration number of the aircraft. (required)
        :return: list[MinimumEquipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_get_aircraft_mels_with_http_info(registration, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_get_aircraft_mels_with_http_info(registration, **kwargs)  # noqa: E501
            return data

    def aircraft_get_aircraft_mels_with_http_info(self, registration, **kwargs):  # noqa: E501
        """Retrieves the Minimum Equipment List (MEL) items associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_mels_with_http_info(registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration: The registration number of the aircraft. (required)
        :return: list[MinimumEquipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_get_aircraft_mels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_get_aircraft_mels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}/mels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MinimumEquipment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_get_aircraft_mels_name(self, registration, name, **kwargs):  # noqa: E501
        """Retrieves the Minimum Equipment List (MEL) items associated with an aircraft by its registration number and MEL name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_mels_name(registration, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration: The registration number of the aircraft. (required)
        :param str name: The name of the MEL items to retrieve. (required)
        :return: list[MinimumEquipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_get_aircraft_mels_name_with_http_info(registration, name, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_get_aircraft_mels_name_with_http_info(registration, name, **kwargs)  # noqa: E501
            return data

    def aircraft_get_aircraft_mels_name_with_http_info(self, registration, name, **kwargs):  # noqa: E501
        """Retrieves the Minimum Equipment List (MEL) items associated with an aircraft by its registration number and MEL name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_get_aircraft_mels_name_with_http_info(registration, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration: The registration number of the aircraft. (required)
        :param str name: The name of the MEL items to retrieve. (required)
        :return: list[MinimumEquipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_get_aircraft_mels_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_get_aircraft_mels_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `aircraft_get_aircraft_mels_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}/mels/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MinimumEquipment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_patch_aircraft_mels(self, body, registration, **kwargs):  # noqa: E501
        """Updates the Minimum Equipment List (MEL) items associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_patch_aircraft_mels(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MinimumEquipment] body: The updated MEL items for the aircraft. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_patch_aircraft_mels_with_http_info(body, registration, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_patch_aircraft_mels_with_http_info(body, registration, **kwargs)  # noqa: E501
            return data

    def aircraft_patch_aircraft_mels_with_http_info(self, body, registration, **kwargs):  # noqa: E501
        """Updates the Minimum Equipment List (MEL) items associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_patch_aircraft_mels_with_http_info(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MinimumEquipment] body: The updated MEL items for the aircraft. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_patch_aircraft_mels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `aircraft_patch_aircraft_mels`")  # noqa: E501
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_patch_aircraft_mels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}/mels', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_post_aircraft(self, body, **kwargs):  # noqa: E501
        """Update an existing aircraft record with the provided data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_post_aircraft(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AircraftIn body: The data of the aircraft to update. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_post_aircraft_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_post_aircraft_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def aircraft_post_aircraft_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update an existing aircraft record with the provided data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_post_aircraft_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AircraftIn body: The data of the aircraft to update. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_post_aircraft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `aircraft_post_aircraft`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_post_aircraft_by_registration(self, body, registration, **kwargs):  # noqa: E501
        """Updates an aircraft using its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_post_aircraft_by_registration(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AircraftIn body: The data representing the aircraft to be updated. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_post_aircraft_by_registration_with_http_info(body, registration, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_post_aircraft_by_registration_with_http_info(body, registration, **kwargs)  # noqa: E501
            return data

    def aircraft_post_aircraft_by_registration_with_http_info(self, body, registration, **kwargs):  # noqa: E501
        """Updates an aircraft using its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_post_aircraft_by_registration_with_http_info(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AircraftIn body: The data representing the aircraft to be updated. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_post_aircraft_by_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `aircraft_post_aircraft_by_registration`")  # noqa: E501
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_post_aircraft_by_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aircraft_put_aircraft_notes(self, body, registration, **kwargs):  # noqa: E501
        """Updates the notes associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_put_aircraft_notes(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[VehicleNoteDto] body: The list of notes to be updated. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aircraft_put_aircraft_notes_with_http_info(body, registration, **kwargs)  # noqa: E501
        else:
            (data) = self.aircraft_put_aircraft_notes_with_http_info(body, registration, **kwargs)  # noqa: E501
            return data

    def aircraft_put_aircraft_notes_with_http_info(self, body, registration, **kwargs):  # noqa: E501
        """Updates the notes associated with an aircraft by its registration number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aircraft_put_aircraft_notes_with_http_info(body, registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[VehicleNoteDto] body: The list of notes to be updated. (required)
        :param str registration: The registration number of the aircraft. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aircraft_put_aircraft_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `aircraft_put_aircraft_notes`")  # noqa: E501
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `aircraft_put_aircraft_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration' in params:
            path_params['registration'] = params['registration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/aircraft/{registration}/notes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
