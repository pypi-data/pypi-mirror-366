# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PairingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pairing_get_pairing_transactions(self, _from, to, transaction_from, **kwargs):  # noqa: E501
        """Get pairings transactions within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairing_transactions(_from, to, transaction_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The pairing valid-from date/time. (required)
        :param datetime to: The pairing valid-to date/time. (required)
        :param datetime transaction_from: The earliest date/time of the transaction. (required)
        :param datetime transaction_to: The latest date/time of the transaction.
        :param str pairing_name: The Pairing Name.
        :param str crew_complement: Crew Complement short codes.(comma separated list)
        :param str station: The station IATA or ICAO code.
        :param list[str] request_data:
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 5000).
        :return: list[PairingTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pairing_get_pairing_transactions_with_http_info(_from, to, transaction_from, **kwargs)  # noqa: E501
        else:
            (data) = self.pairing_get_pairing_transactions_with_http_info(_from, to, transaction_from, **kwargs)  # noqa: E501
            return data

    def pairing_get_pairing_transactions_with_http_info(self, _from, to, transaction_from, **kwargs):  # noqa: E501
        """Get pairings transactions within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairing_transactions_with_http_info(_from, to, transaction_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The pairing valid-from date/time. (required)
        :param datetime to: The pairing valid-to date/time. (required)
        :param datetime transaction_from: The earliest date/time of the transaction. (required)
        :param datetime transaction_to: The latest date/time of the transaction.
        :param str pairing_name: The Pairing Name.
        :param str crew_complement: Crew Complement short codes.(comma separated list)
        :param str station: The station IATA or ICAO code.
        :param list[str] request_data:
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 5000).
        :return: list[PairingTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'transaction_from', 'transaction_to', 'pairing_name', 'crew_complement', 'station', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pairing_get_pairing_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `pairing_get_pairing_transactions`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `pairing_get_pairing_transactions`")  # noqa: E501
        # verify the required parameter 'transaction_from' is set
        if ('transaction_from' not in params or
                params['transaction_from'] is None):
            raise ValueError("Missing the required parameter `transaction_from` when calling `pairing_get_pairing_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'transaction_from' in params:
            query_params.append(('TransactionFrom', params['transaction_from']))  # noqa: E501
        if 'transaction_to' in params:
            query_params.append(('TransactionTo', params['transaction_to']))  # noqa: E501
        if 'pairing_name' in params:
            query_params.append(('PairingName', params['pairing_name']))  # noqa: E501
        if 'crew_complement' in params:
            query_params.append(('CrewComplement', params['crew_complement']))  # noqa: E501
        if 'station' in params:
            query_params.append(('station', params['station']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/pairings/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PairingTransaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pairing_get_pairings(self, _from, to, **kwargs):  # noqa: E501
        """Get pairings within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairings(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str station: The station short code.
        :param str roster_type: The roster type : UNKNOWN, PUBLISHED, NOT_PUBLISHED.
        :param str filter_name: The pairing filter Name
        :param str crew_complement: Crew Complement shortcodes.(comma separated list)
        :param list[str] request_data: Additional pairing fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 2500).
        :return: list[Pairing]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pairing_get_pairings_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.pairing_get_pairings_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def pairing_get_pairings_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get pairings within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairings_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str station: The station short code.
        :param str roster_type: The roster type : UNKNOWN, PUBLISHED, NOT_PUBLISHED.
        :param str filter_name: The pairing filter Name
        :param str crew_complement: Crew Complement shortcodes.(comma separated list)
        :param list[str] request_data: Additional pairing fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 2500).
        :return: list[Pairing]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'station', 'roster_type', 'filter_name', 'crew_complement', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pairing_get_pairings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `pairing_get_pairings`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `pairing_get_pairings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'station' in params:
            query_params.append(('station', params['station']))  # noqa: E501
        if 'roster_type' in params:
            query_params.append(('rosterType', params['roster_type']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filterName', params['filter_name']))  # noqa: E501
        if 'crew_complement' in params:
            query_params.append(('CrewComplement', params['crew_complement']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/pairings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pairing]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pairing_get_pairings_by_unique_id(self, unique_id, **kwargs):  # noqa: E501
        """Get Pairing data by Unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairings_by_unique_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique id of the Pairing. (required)
        :param list[str] request_data: Additional pairing fields to include in the response.
        :return: list[Pairing]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pairing_get_pairings_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pairing_get_pairings_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def pairing_get_pairings_by_unique_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get Pairing data by Unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_get_pairings_by_unique_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique id of the Pairing. (required)
        :param list[str] request_data: Additional pairing fields to include in the response.
        :return: list[Pairing]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pairing_get_pairings_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `pairing_get_pairings_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/pairings/{UniqueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pairing]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pairing_update_comment(self, unique_id, comment, **kwargs):  # noqa: E501
        """Add or update a comment to an existing pairing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_update_comment(unique_id, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Id of the pairing (required)
        :param str comment: Comment to add to the pairing (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pairing_update_comment_with_http_info(unique_id, comment, **kwargs)  # noqa: E501
        else:
            (data) = self.pairing_update_comment_with_http_info(unique_id, comment, **kwargs)  # noqa: E501
            return data

    def pairing_update_comment_with_http_info(self, unique_id, comment, **kwargs):  # noqa: E501
        """Add or update a comment to an existing pairing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pairing_update_comment_with_http_info(unique_id, comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Id of the pairing (required)
        :param str comment: Comment to add to the pairing (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pairing_update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `pairing_update_comment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `pairing_update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'comment' in params:
            query_params.append(('Comment', params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/pairings/{UniqueId}/activitycomment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
