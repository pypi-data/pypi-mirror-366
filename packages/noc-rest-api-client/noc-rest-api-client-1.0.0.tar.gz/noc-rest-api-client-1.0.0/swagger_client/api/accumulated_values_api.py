# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccumulatedValuesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accumulated_values_get_accumulated_values(self, remove_empty, labels, accumulated_values_type_fields, _from, to, **kwargs):  # noqa: E501
        """Retrieves accumulated values based on specified parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accumulated_values_get_accumulated_values(remove_empty, labels, accumulated_values_type_fields, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool remove_empty: Flag indicating whether to exclude empty values (default false). (required)
        :param list[str] labels: An array of labels to filter the accumulated values. (required)
        :param str accumulated_values_type_fields: The type of accumulated values fields. (required)
        :param datetime _from: The start date range. (required)
        :param datetime to: The end date range. (required)
        :param int filter_id: The human resource (crew) filter unique id.
        :param str filter_name: The human resource (crew) filter name.
        :param str unique_id: The human resource (crew) unique ID.
        :param int aggregate_days: The number of days to aggregate.
        :param list[str] request_data: The list of accumulated values fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[AccumulatedValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accumulated_values_get_accumulated_values_with_http_info(remove_empty, labels, accumulated_values_type_fields, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.accumulated_values_get_accumulated_values_with_http_info(remove_empty, labels, accumulated_values_type_fields, _from, to, **kwargs)  # noqa: E501
            return data

    def accumulated_values_get_accumulated_values_with_http_info(self, remove_empty, labels, accumulated_values_type_fields, _from, to, **kwargs):  # noqa: E501
        """Retrieves accumulated values based on specified parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accumulated_values_get_accumulated_values_with_http_info(remove_empty, labels, accumulated_values_type_fields, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool remove_empty: Flag indicating whether to exclude empty values (default false). (required)
        :param list[str] labels: An array of labels to filter the accumulated values. (required)
        :param str accumulated_values_type_fields: The type of accumulated values fields. (required)
        :param datetime _from: The start date range. (required)
        :param datetime to: The end date range. (required)
        :param int filter_id: The human resource (crew) filter unique id.
        :param str filter_name: The human resource (crew) filter name.
        :param str unique_id: The human resource (crew) unique ID.
        :param int aggregate_days: The number of days to aggregate.
        :param list[str] request_data: The list of accumulated values fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[AccumulatedValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_empty', 'labels', 'accumulated_values_type_fields', '_from', 'to', 'filter_id', 'filter_name', 'unique_id', 'aggregate_days', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accumulated_values_get_accumulated_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_empty' is set
        if ('remove_empty' not in params or
                params['remove_empty'] is None):
            raise ValueError("Missing the required parameter `remove_empty` when calling `accumulated_values_get_accumulated_values`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `accumulated_values_get_accumulated_values`")  # noqa: E501
        # verify the required parameter 'accumulated_values_type_fields' is set
        if ('accumulated_values_type_fields' not in params or
                params['accumulated_values_type_fields'] is None):
            raise ValueError("Missing the required parameter `accumulated_values_type_fields` when calling `accumulated_values_get_accumulated_values`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `accumulated_values_get_accumulated_values`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `accumulated_values_get_accumulated_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'remove_empty' in params:
            query_params.append(('RemoveEmpty', params['remove_empty']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('Labels', params['labels']))  # noqa: E501
            collection_formats['Labels'] = 'multi'  # noqa: E501
        if 'accumulated_values_type_fields' in params:
            query_params.append(('AccumulatedValuesTypeFields', params['accumulated_values_type_fields']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('FilterID', params['filter_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueID', params['unique_id']))  # noqa: E501
        if 'aggregate_days' in params:
            query_params.append(('AggregateDays', params['aggregate_days']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('RequestData', params['request_data']))  # noqa: E501
            collection_formats['RequestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/accumulated-values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccumulatedValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
