# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AirportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def airport_get_airports(self, **kwargs):  # noqa: E501
        """Retrieves airports optionally filtered by active status, code (IATA or ICAO), airport name, and additional request data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_get_airports(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool only_active: Flag indicating whether to retrieve only active airports (default is false).
        :param str code: The airport ICAO or IATA code.
        :param str name: The airport name.
        :param list[str] request_data: Additional request data to include.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 5000).
        :return: list[Airport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_get_airports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.airport_get_airports_with_http_info(**kwargs)  # noqa: E501
            return data

    def airport_get_airports_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves airports optionally filtered by active status, code (IATA or ICAO), airport name, and additional request data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_get_airports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool only_active: Flag indicating whether to retrieve only active airports (default is false).
        :param str code: The airport ICAO or IATA code.
        :param str name: The airport name.
        :param list[str] request_data: Additional request data to include.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 5000).
        :return: list[Airport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['only_active', 'code', 'name', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_get_airports" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'only_active' in params:
            query_params.append(('OnlyActive', params['only_active']))  # noqa: E501
        if 'code' in params:
            query_params.append(('Code', params['code']))  # noqa: E501
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Airport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_get_airports_by_code(self, iata_or_icao, **kwargs):  # noqa: E501
        """Retrieves airports by their IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_get_airports_by_code(iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool only_active: Flag indicating whether to retrieve only active airports (default is false).
        :param str name: The name of the airport.
        :param list[str] request_data: Additional request data.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Airport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_get_airports_by_code_with_http_info(iata_or_icao, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_get_airports_by_code_with_http_info(iata_or_icao, **kwargs)  # noqa: E501
            return data

    def airport_get_airports_by_code_with_http_info(self, iata_or_icao, **kwargs):  # noqa: E501
        """Retrieves airports by their IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_get_airports_by_code_with_http_info(iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool only_active: Flag indicating whether to retrieve only active airports (default is false).
        :param str name: The name of the airport.
        :param list[str] request_data: Additional request data.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Airport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iata_or_icao', 'only_active', 'name', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_get_airports_by_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_get_airports_by_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []
        if 'only_active' in params:
            query_params.append(('OnlyActive', params['only_active']))  # noqa: E501
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Airport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_patch_airport(self, body, **kwargs):  # noqa: E501
        """Updates an existing airport with the provided airport data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_patch_airport(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AirportData body: The airport data containing the updated information. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_patch_airport_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_patch_airport_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def airport_patch_airport_with_http_info(self, body, **kwargs):  # noqa: E501
        """Updates an existing airport with the provided airport data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_patch_airport_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AirportData body: The airport data containing the updated information. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_patch_airport" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airport_patch_airport`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_patch_airport_distances_iata(self, body, iata_or_icao, **kwargs):  # noqa: E501
        """Updates the distances of an airport to other airports using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_patch_airport_distances_iata(body, iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AirportDistanceData] body: The data containing the distances to update for the airport. (required)
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_patch_airport_distances_iata_with_http_info(body, iata_or_icao, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_patch_airport_distances_iata_with_http_info(body, iata_or_icao, **kwargs)  # noqa: E501
            return data

    def airport_patch_airport_distances_iata_with_http_info(self, body, iata_or_icao, **kwargs):  # noqa: E501
        """Updates the distances of an airport to other airports using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_patch_airport_distances_iata_with_http_info(body, iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AirportDistanceData] body: The data containing the distances to update for the airport. (required)
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'iata_or_icao']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_patch_airport_distances_iata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airport_patch_airport_distances_iata`")  # noqa: E501
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_patch_airport_distances_iata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}/distances', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_put_airport_active_iat_aor_icao(self, iata_or_icao, isactive, **kwargs):  # noqa: E501
        """Updates the active status of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_active_iat_aor_icao(iata_or_icao, isactive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool isactive: The new active status to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_put_airport_active_iat_aor_icao_with_http_info(iata_or_icao, isactive, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_put_airport_active_iat_aor_icao_with_http_info(iata_or_icao, isactive, **kwargs)  # noqa: E501
            return data

    def airport_put_airport_active_iat_aor_icao_with_http_info(self, iata_or_icao, isactive, **kwargs):  # noqa: E501
        """Updates the active status of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_active_iat_aor_icao_with_http_info(iata_or_icao, isactive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool isactive: The new active status to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iata_or_icao', 'isactive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_put_airport_active_iat_aor_icao" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_put_airport_active_iat_aor_icao`")  # noqa: E501
        # verify the required parameter 'isactive' is set
        if ('isactive' not in params or
                params['isactive'] is None):
            raise ValueError("Missing the required parameter `isactive` when calling `airport_put_airport_active_iat_aor_icao`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []
        if 'isactive' in params:
            query_params.append(('isactive', params['isactive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}/active', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_put_airport_default_iata(self, iata_or_icao, isdefault, **kwargs):  # noqa: E501
        """Updates the default status of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_default_iata(iata_or_icao, isdefault, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool isdefault: The new default status to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_put_airport_default_iata_with_http_info(iata_or_icao, isdefault, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_put_airport_default_iata_with_http_info(iata_or_icao, isdefault, **kwargs)  # noqa: E501
            return data

    def airport_put_airport_default_iata_with_http_info(self, iata_or_icao, isdefault, **kwargs):  # noqa: E501
        """Updates the default status of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_default_iata_with_http_info(iata_or_icao, isdefault, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param bool isdefault: The new default status to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iata_or_icao', 'isdefault']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_put_airport_default_iata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_put_airport_default_iata`")  # noqa: E501
        # verify the required parameter 'isdefault' is set
        if ('isdefault' not in params or
                params['isdefault'] is None):
            raise ValueError("Missing the required parameter `isdefault` when calling `airport_put_airport_default_iata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []
        if 'isdefault' in params:
            query_params.append(('isdefault', params['isdefault']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}/default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_put_airport_name_iata(self, iata_or_icao, name, **kwargs):  # noqa: E501
        """Updates the name of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_name_iata(iata_or_icao, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param str name: The new name to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_put_airport_name_iata_with_http_info(iata_or_icao, name, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_put_airport_name_iata_with_http_info(iata_or_icao, name, **kwargs)  # noqa: E501
            return data

    def airport_put_airport_name_iata_with_http_info(self, iata_or_icao, name, **kwargs):  # noqa: E501
        """Updates the name of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_name_iata_with_http_info(iata_or_icao, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :param str name: The new name to set for the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iata_or_icao', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_put_airport_name_iata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_put_airport_name_iata`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `airport_put_airport_name_iata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airport_put_airport_station_facilities_iata(self, body, iata_or_icao, **kwargs):  # noqa: E501
        """Updates the station facilities of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_station_facilities_iata(body, iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StationFacility] body: The data containing the station facilities to update for the airport. (required)
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airport_put_airport_station_facilities_iata_with_http_info(body, iata_or_icao, **kwargs)  # noqa: E501
        else:
            (data) = self.airport_put_airport_station_facilities_iata_with_http_info(body, iata_or_icao, **kwargs)  # noqa: E501
            return data

    def airport_put_airport_station_facilities_iata_with_http_info(self, body, iata_or_icao, **kwargs):  # noqa: E501
        """Updates the station facilities of an airport using its IATA or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airport_put_airport_station_facilities_iata_with_http_info(body, iata_or_icao, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StationFacility] body: The data containing the station facilities to update for the airport. (required)
        :param str iata_or_icao: The IATA or ICAO code of the airport. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'iata_or_icao']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airport_put_airport_station_facilities_iata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airport_put_airport_station_facilities_iata`")  # noqa: E501
        # verify the required parameter 'iata_or_icao' is set
        if ('iata_or_icao' not in params or
                params['iata_or_icao'] is None):
            raise ValueError("Missing the required parameter `iata_or_icao` when calling `airport_put_airport_station_facilities_iata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_or_icao' in params:
            path_params['iata_or_icao'] = params['iata_or_icao']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/airports/{iata_or_icao}/stationfacilities', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
