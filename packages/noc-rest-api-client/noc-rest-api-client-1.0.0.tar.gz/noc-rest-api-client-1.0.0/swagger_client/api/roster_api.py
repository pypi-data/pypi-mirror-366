# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RosterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def roster_add_notes(self, body, start_time, end_time, activity_code, employee_id, dep_airport, **kwargs):  # noqa: E501
        """Create notes for ReferenceActivity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_add_notes(body, start_time, end_time, activity_code, employee_id, dep_airport, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RosterNoteIn] body: Notes to add (required)
        :param datetime start_time: Start Time of the ReferenceActivity (required)
        :param datetime end_time: End Time of the ReferenceActivity (required)
        :param str activity_code: Activity Code of the ReferenceActivity (required)
        :param str employee_id: Employee number (required)
        :param str dep_airport: Departure Airport code (required)
        :param str arr_airport: Arrival Airport code
        :param str type: Type of the ReferenceActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_add_notes_with_http_info(body, start_time, end_time, activity_code, employee_id, dep_airport, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_add_notes_with_http_info(body, start_time, end_time, activity_code, employee_id, dep_airport, **kwargs)  # noqa: E501
            return data

    def roster_add_notes_with_http_info(self, body, start_time, end_time, activity_code, employee_id, dep_airport, **kwargs):  # noqa: E501
        """Create notes for ReferenceActivity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_add_notes_with_http_info(body, start_time, end_time, activity_code, employee_id, dep_airport, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RosterNoteIn] body: Notes to add (required)
        :param datetime start_time: Start Time of the ReferenceActivity (required)
        :param datetime end_time: End Time of the ReferenceActivity (required)
        :param str activity_code: Activity Code of the ReferenceActivity (required)
        :param str employee_id: Employee number (required)
        :param str dep_airport: Departure Airport code (required)
        :param str arr_airport: Arrival Airport code
        :param str type: Type of the ReferenceActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'start_time', 'end_time', 'activity_code', 'employee_id', 'dep_airport', 'arr_airport', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_add_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_add_notes`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `roster_add_notes`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `roster_add_notes`")  # noqa: E501
        # verify the required parameter 'activity_code' is set
        if ('activity_code' not in params or
                params['activity_code'] is None):
            raise ValueError("Missing the required parameter `activity_code` when calling `roster_add_notes`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `roster_add_notes`")  # noqa: E501
        # verify the required parameter 'dep_airport' is set
        if ('dep_airport' not in params or
                params['dep_airport'] is None):
            raise ValueError("Missing the required parameter `dep_airport` when calling `roster_add_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'activity_code' in params:
            query_params.append(('activityCode', params['activity_code']))  # noqa: E501
        if 'employee_id' in params:
            query_params.append(('employeeId', params['employee_id']))  # noqa: E501
        if 'dep_airport' in params:
            query_params.append(('depAirport', params['dep_airport']))  # noqa: E501
        if 'arr_airport' in params:
            query_params.append(('arrAirport', params['arr_airport']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_add_notes_by_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Create notes for roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_add_notes_by_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RosterNoteIn] body: Notes to add (required)
        :param int unique_id: Unique Id of the roster activity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_add_notes_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_add_notes_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def roster_add_notes_by_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Create notes for roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_add_notes_by_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RosterNoteIn] body: Notes to add (required)
        :param int unique_id: Unique Id of the roster activity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_add_notes_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_add_notes_by_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_add_notes_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/{UniqueId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_delete_roster_notes_by_unique_id(self, unique_id, **kwargs):  # noqa: E501
        """Deletes Roster notes by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_roster_notes_by_unique_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Ids of Notes (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_delete_roster_notes_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_delete_roster_notes_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def roster_delete_roster_notes_by_unique_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Deletes Roster notes by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_roster_notes_by_unique_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Ids of Notes (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_delete_roster_notes_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_delete_roster_notes_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/notes/{UniqueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_delete_rosters(self, **kwargs):  # noqa: E501
        """Delete multiple rosters activities unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_rosters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: An array of unique id of the roster activity.
        :param datetime start_time: The start date/time range.
        :param datetime end_time: The end date/time range.
        :param str filter_name: The roster filter name to apply.
        :param str crew_number: The crew/employee number to filter rosters.
        :param str roster_activity_code: The roster activity code to filter roster list.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_delete_rosters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.roster_delete_rosters_with_http_info(**kwargs)  # noqa: E501
            return data

    def roster_delete_rosters_with_http_info(self, **kwargs):  # noqa: E501
        """Delete multiple rosters activities unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_rosters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: An array of unique id of the roster activity.
        :param datetime start_time: The start date/time range.
        :param datetime end_time: The end date/time range.
        :param str filter_name: The roster filter name to apply.
        :param str crew_number: The crew/employee number to filter rosters.
        :param str roster_activity_code: The roster activity code to filter roster list.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'start_time', 'end_time', 'filter_name', 'crew_number', 'roster_activity_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_delete_rosters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('EndTime', params['end_time']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'crew_number' in params:
            query_params.append(('CrewNumber', params['crew_number']))  # noqa: E501
        if 'roster_activity_code' in params:
            query_params.append(('RosterActivityCode', params['roster_activity_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_delete_rosters_by_unique_ids(self, unique_id, **kwargs):  # noqa: E501
        """Delete a roster by roster activities by unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_rosters_by_unique_ids(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: An array of roster activity unique ids. (required)
        :param datetime start_time: The start date/time range.
        :param datetime end_time: The end date/time range.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_delete_rosters_by_unique_ids_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_delete_rosters_by_unique_ids_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def roster_delete_rosters_by_unique_ids_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Delete a roster by roster activities by unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_delete_rosters_by_unique_ids_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: An array of roster activity unique ids. (required)
        :param datetime start_time: The start date/time range.
        :param datetime end_time: The end date/time range.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_delete_rosters_by_unique_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_delete_rosters_by_unique_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('EndTime', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/{UniqueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_comment_by_logic_key(self, type, _from, to, **kwargs):  # noqa: E501
        """Get comment for roster activities within the specified date range  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_comment_by_logic_key(type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The activity type : Hotel, Flight, Unknown... (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str activity_code: Filter by activity code
        :param str emp_no: Filter by Employee Number
        :param str departure_airport: Filter by Departure Airport
        :param str arrival_airport: Filter by Arrival Airport
        :return: list[RosterComments]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_comment_by_logic_key_with_http_info(type, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_comment_by_logic_key_with_http_info(type, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_get_comment_by_logic_key_with_http_info(self, type, _from, to, **kwargs):  # noqa: E501
        """Get comment for roster activities within the specified date range  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_comment_by_logic_key_with_http_info(type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The activity type : Hotel, Flight, Unknown... (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str activity_code: Filter by activity code
        :param str emp_no: Filter by Employee Number
        :param str departure_airport: Filter by Departure Airport
        :param str arrival_airport: Filter by Arrival Airport
        :return: list[RosterComments]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', '_from', 'to', 'activity_code', 'emp_no', 'departure_airport', 'arrival_airport']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_comment_by_logic_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `roster_get_comment_by_logic_key`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_get_comment_by_logic_key`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_get_comment_by_logic_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'activity_code' in params:
            query_params.append(('ActivityCode', params['activity_code']))  # noqa: E501
        if 'emp_no' in params:
            query_params.append(('EmpNo', params['emp_no']))  # noqa: E501
        if 'departure_airport' in params:
            query_params.append(('DepartureAirport', params['departure_airport']))  # noqa: E501
        if 'arrival_airport' in params:
            query_params.append(('ArrivalAirport', params['arrival_airport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RosterComments]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_comment_by_unique_id(self, unique_id, **kwargs):  # noqa: E501
        """Get comment for roster activities by UniqueId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_comment_by_unique_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique ID of the roster activity (required)
        :return: list[RosterComments]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_comment_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_comment_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def roster_get_comment_by_unique_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get comment for roster activities by UniqueId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_comment_by_unique_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique ID of the roster activity (required)
        :return: list[RosterComments]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_comment_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_get_comment_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/{UniqueId}/comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RosterComments]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_roster_designators_by_unique_id(self, unique_id, _from, to, **kwargs):  # noqa: E501
        """Get roster designators by roster activity unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_roster_designators_by_unique_id(unique_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique ID of the crew member. (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :return: list[RosterDesignator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_roster_designators_by_unique_id_with_http_info(unique_id, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_roster_designators_by_unique_id_with_http_info(unique_id, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_get_roster_designators_by_unique_id_with_http_info(self, unique_id, _from, to, **kwargs):  # noqa: E501
        """Get roster designators by roster activity unique Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_roster_designators_by_unique_id_with_http_info(unique_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique ID of the crew member. (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :return: list[RosterDesignator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_roster_designators_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_get_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_get_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_get_roster_designators_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned_flight/designators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RosterDesignator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_roster_transactions(self, _from, to, **kwargs):  # noqa: E501
        """Get roster transaction by roster activity unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_roster_transactions(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range of the roster. (required)
        :param datetime to: The end date/time range of the roster. (required)
        :param datetime transaction_from: The start date/time range of the transaction (can be different from the roster).
        :param datetime transaction_to: The end date/time range of the transaction (can be different from the roster).
        :param str unique_id: The unique Id of crew member .
        :param str filter_name: The name of the HR Filter to apply.
        :param str roster_filter_name: The name of the Roster Activity Filter to apply
        :param bool only_active: Flag to return only active roster when TRUE.
        :param bool only_with_transactions: Flag to return only roster with transaction when TRUE.
        :param bool with_carry_over_activities: Flag to return only roster with carry over activities when TRUE.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_roster_transactions_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_roster_transactions_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def roster_get_roster_transactions_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get roster transaction by roster activity unique id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_roster_transactions_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range of the roster. (required)
        :param datetime to: The end date/time range of the roster. (required)
        :param datetime transaction_from: The start date/time range of the transaction (can be different from the roster).
        :param datetime transaction_to: The end date/time range of the transaction (can be different from the roster).
        :param str unique_id: The unique Id of crew member .
        :param str filter_name: The name of the HR Filter to apply.
        :param str roster_filter_name: The name of the Roster Activity Filter to apply
        :param bool only_active: Flag to return only active roster when TRUE.
        :param bool only_with_transactions: Flag to return only roster with transaction when TRUE.
        :param bool with_carry_over_activities: Flag to return only roster with carry over activities when TRUE.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'transaction_from', 'transaction_to', 'unique_id', 'filter_name', 'roster_filter_name', 'only_active', 'only_with_transactions', 'with_carry_over_activities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_roster_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_get_roster_transactions`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_get_roster_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'transaction_from' in params:
            query_params.append(('TransactionFrom', params['transaction_from']))  # noqa: E501
        if 'transaction_to' in params:
            query_params.append(('TransactionTo', params['transaction_to']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'roster_filter_name' in params:
            query_params.append(('RosterFilterName', params['roster_filter_name']))  # noqa: E501
        if 'only_active' in params:
            query_params.append(('OnlyActive', params['only_active']))  # noqa: E501
        if 'only_with_transactions' in params:
            query_params.append(('OnlyWithTransactions', params['only_with_transactions']))  # noqa: E501
        if 'with_carry_over_activities' in params:
            query_params.append(('WithCarryOverActivities', params['with_carry_over_activities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_rosters(self, _from, to, **kwargs):  # noqa: E501
        """Get crew and assigned roster activities within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_rosters(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str unique_id: The unique ID of the Crew.
        :param str filter_name: The name of the HR filter to apply.
        :param int roster_filter_id: The unique ID of the roster filter to apply.
        :param str roster_filter_name: The name of the roster filter to apply.
        :param str roster_type: The roster type : UNKNOWN,PUBLISHED,NOT_PUBLISHED
        :param str reference_activity: The name of the reference activity.
        :param bool only_active: Flag to get only active roster when TRUE.
        :param bool crew_with_activities:
        :param bool with_carry_over_activities: Flag to get carry over activities.
        :param list[str] request_data: Additional roster fields to include in the response.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_rosters_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_rosters_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def roster_get_rosters_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get crew and assigned roster activities within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_rosters_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str unique_id: The unique ID of the Crew.
        :param str filter_name: The name of the HR filter to apply.
        :param int roster_filter_id: The unique ID of the roster filter to apply.
        :param str roster_filter_name: The name of the roster filter to apply.
        :param str roster_type: The roster type : UNKNOWN,PUBLISHED,NOT_PUBLISHED
        :param str reference_activity: The name of the reference activity.
        :param bool only_active: Flag to get only active roster when TRUE.
        :param bool crew_with_activities:
        :param bool with_carry_over_activities: Flag to get carry over activities.
        :param list[str] request_data: Additional roster fields to include in the response.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'filter_id', 'unique_id', 'filter_name', 'roster_filter_id', 'roster_filter_name', 'roster_type', 'reference_activity', 'only_active', 'crew_with_activities', 'with_carry_over_activities', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_rosters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_get_rosters`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_get_rosters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('FilterID', params['filter_id']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'roster_filter_id' in params:
            query_params.append(('RosterFilterID', params['roster_filter_id']))  # noqa: E501
        if 'roster_filter_name' in params:
            query_params.append(('RosterFilterName', params['roster_filter_name']))  # noqa: E501
        if 'roster_type' in params:
            query_params.append(('RosterType', params['roster_type']))  # noqa: E501
        if 'reference_activity' in params:
            query_params.append(('ReferenceActivity', params['reference_activity']))  # noqa: E501
        if 'only_active' in params:
            query_params.append(('OnlyActive', params['only_active']))  # noqa: E501
        if 'crew_with_activities' in params:
            query_params.append(('CrewWithActivities', params['crew_with_activities']))  # noqa: E501
        if 'with_carry_over_activities' in params:
            query_params.append(('WithCarryOverActivities', params['with_carry_over_activities']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('RequestData', params['request_data']))  # noqa: E501
            collection_formats['RequestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_get_rosters_by_activity_type(self, type, _from, to, **kwargs):  # noqa: E501
        """Get roster type within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_rosters_by_activity_type(type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The activity type : Hotel, Flight, Unknown... (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str emp_no: The employe/crew number.
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str unique_id: The unique ID of the Roster.
        :param str filter_name: The name of the HR filter to apply.
        :param int roster_filter_id: The unique ID of the roster filter to apply.
        :param str roster_filter_name: The name of the roster filter to apply.
        :param bool only_active: Flag to get only active roster when TRUE.
        :param bool with_carry_over_activities: Flag to get carry over activities.
        :param list[str] request_data: Additional roster fields to include in the response.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_get_rosters_by_activity_type_with_http_info(type, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_get_rosters_by_activity_type_with_http_info(type, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_get_rosters_by_activity_type_with_http_info(self, type, _from, to, **kwargs):  # noqa: E501
        """Get roster type within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_get_rosters_by_activity_type_with_http_info(type, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The activity type : Hotel, Flight, Unknown... (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param str emp_no: The employe/crew number.
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str unique_id: The unique ID of the Roster.
        :param str filter_name: The name of the HR filter to apply.
        :param int roster_filter_id: The unique ID of the roster filter to apply.
        :param str roster_filter_name: The name of the roster filter to apply.
        :param bool only_active: Flag to get only active roster when TRUE.
        :param bool with_carry_over_activities: Flag to get carry over activities.
        :param list[str] request_data: Additional roster fields to include in the response.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', '_from', 'to', 'emp_no', 'filter_id', 'unique_id', 'filter_name', 'roster_filter_id', 'roster_filter_name', 'only_active', 'with_carry_over_activities', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_get_rosters_by_activity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `roster_get_rosters_by_activity_type`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_get_rosters_by_activity_type`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_get_rosters_by_activity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'emp_no' in params:
            query_params.append(('EmpNo', params['emp_no']))  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('FilterId', params['filter_id']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'roster_filter_id' in params:
            query_params.append(('RosterFilterId', params['roster_filter_id']))  # noqa: E501
        if 'roster_filter_name' in params:
            query_params.append(('RosterFilterName', params['roster_filter_name']))  # noqa: E501
        if 'only_active' in params:
            query_params.append(('OnlyActive', params['only_active']))  # noqa: E501
        if 'with_carry_over_activities' in params:
            query_params.append(('WithCarryOverActivities', params['with_carry_over_activities']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('RequestData', params['request_data']))  # noqa: E501
            collection_formats['RequestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/activity-type/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_reference_activities_csv_importer(self, file, **kwargs):  # noqa: E501
        """Sets reference Activities via a csv file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_reference_activities_csv_importer(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str import_mode: The Import Mode for the Reference Activities
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_reference_activities_csv_importer_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_reference_activities_csv_importer_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def roster_reference_activities_csv_importer_with_http_info(self, file, **kwargs):  # noqa: E501
        """Sets reference Activities via a csv file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_reference_activities_csv_importer_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str import_mode: The Import Mode for the Reference Activities
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'import_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_reference_activities_csv_importer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `roster_reference_activities_csv_importer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'import_mode' in params:
            query_params.append(('ImportMode', params['import_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['File'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/ReferenceActivitiesCSVImporter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_comment_by_filter(self, body, _from, to, activity_code, employee_id, dep_airport, **kwargs):  # noqa: E501
        """Set the Comment to reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_comment_by_filter(body, _from, to, activity_code, employee_id, dep_airport, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterCommentIn body: Comment to add to a ReferenceActivity (required)
        :param datetime _from: Start time of the ReferenceActivity (required)
        :param datetime to: End time of the ReferenceActivity (required)
        :param str activity_code: Filter by activity code (required)
        :param str employee_id: Filter by employee number (required)
        :param str dep_airport: Filter by departure airport (required)
        :param str arr_airport: Filter by arrival airport
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_comment_by_filter_with_http_info(body, _from, to, activity_code, employee_id, dep_airport, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_comment_by_filter_with_http_info(body, _from, to, activity_code, employee_id, dep_airport, **kwargs)  # noqa: E501
            return data

    def roster_set_comment_by_filter_with_http_info(self, body, _from, to, activity_code, employee_id, dep_airport, **kwargs):  # noqa: E501
        """Set the Comment to reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_comment_by_filter_with_http_info(body, _from, to, activity_code, employee_id, dep_airport, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterCommentIn body: Comment to add to a ReferenceActivity (required)
        :param datetime _from: Start time of the ReferenceActivity (required)
        :param datetime to: End time of the ReferenceActivity (required)
        :param str activity_code: Filter by activity code (required)
        :param str employee_id: Filter by employee number (required)
        :param str dep_airport: Filter by departure airport (required)
        :param str arr_airport: Filter by arrival airport
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', '_from', 'to', 'activity_code', 'employee_id', 'dep_airport', 'arr_airport']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_comment_by_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_comment_by_filter`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_set_comment_by_filter`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_set_comment_by_filter`")  # noqa: E501
        # verify the required parameter 'activity_code' is set
        if ('activity_code' not in params or
                params['activity_code'] is None):
            raise ValueError("Missing the required parameter `activity_code` when calling `roster_set_comment_by_filter`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `roster_set_comment_by_filter`")  # noqa: E501
        # verify the required parameter 'dep_airport' is set
        if ('dep_airport' not in params or
                params['dep_airport'] is None):
            raise ValueError("Missing the required parameter `dep_airport` when calling `roster_set_comment_by_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'activity_code' in params:
            query_params.append(('ActivityCode', params['activity_code']))  # noqa: E501
        if 'employee_id' in params:
            query_params.append(('EmployeeId', params['employee_id']))  # noqa: E501
        if 'dep_airport' in params:
            query_params.append(('DepAirport', params['dep_airport']))  # noqa: E501
        if 'arr_airport' in params:
            query_params.append(('ArrAirport', params['arr_airport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/comment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_comment_by_unique_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Set the Comment to roster activity by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_comment_by_unique_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterCommentIn body: Comment to add to the Roster Activity (required)
        :param str unique_id: UniqueID of the Roster Activity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_comment_by_unique_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_comment_by_unique_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def roster_set_comment_by_unique_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Set the Comment to roster activity by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_comment_by_unique_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterCommentIn body: Comment to add to the Roster Activity (required)
        :param str unique_id: UniqueID of the Roster Activity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_comment_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_comment_by_unique_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_set_comment_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/{UniqueId}/comment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_flight_number_by_filter(self, body, _from, to, **kwargs):  # noqa: E501
        """Set the flight number, prefix and confirmed status of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_filter(body, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterActivityFlightDetails body: flight information and activity confirmation indicator to set or update the linked roster. (required)
        :param datetime _from: Start time of the reference activity (required)
        :param datetime to: End time of the reference activity (required)
        :param str activity_code: Filter by activity code
        :param str employee_id: Filter by employee number
        :param str dep_airport: Filter by departure airport
        :param str arr_airport: Filter by arrival airport
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_flight_number_by_filter_with_http_info(body, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_flight_number_by_filter_with_http_info(body, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_set_flight_number_by_filter_with_http_info(self, body, _from, to, **kwargs):  # noqa: E501
        """Set the flight number, prefix and confirmed status of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_filter_with_http_info(body, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterActivityFlightDetails body: flight information and activity confirmation indicator to set or update the linked roster. (required)
        :param datetime _from: Start time of the reference activity (required)
        :param datetime to: End time of the reference activity (required)
        :param str activity_code: Filter by activity code
        :param str employee_id: Filter by employee number
        :param str dep_airport: Filter by departure airport
        :param str arr_airport: Filter by arrival airport
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', '_from', 'to', 'activity_code', 'employee_id', 'dep_airport', 'arr_airport']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_flight_number_by_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_flight_number_by_filter`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_set_flight_number_by_filter`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_set_flight_number_by_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'activity_code' in params:
            query_params.append(('ActivityCode', params['activity_code']))  # noqa: E501
        if 'employee_id' in params:
            query_params.append(('EmployeeID', params['employee_id']))  # noqa: E501
        if 'dep_airport' in params:
            query_params.append(('DepAirport', params['dep_airport']))  # noqa: E501
        if 'arr_airport' in params:
            query_params.append(('ArrAirport', params['arr_airport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/transport/flight-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_flight_number_by_filter_obsolete(self, flight_number, _from, to, **kwargs):  # noqa: E501
        """Set the flight number and prefix of a transport reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_filter_obsolete(flight_number, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flight_number: Flight number to add to the RosterActivity (required)
        :param datetime _from: Start time of the reference activity (required)
        :param datetime to: End time of the reference activity (required)
        :param str activity_code: Filter by activity code
        :param str employee_id: Filter by employee number
        :param str dep_airport: Filter by departure airport
        :param str arr_airport: Filter by arrival airport
        :param str prefix: Prefix to add to the RosterActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_flight_number_by_filter_obsolete_with_http_info(flight_number, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_flight_number_by_filter_obsolete_with_http_info(flight_number, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_set_flight_number_by_filter_obsolete_with_http_info(self, flight_number, _from, to, **kwargs):  # noqa: E501
        """Set the flight number and prefix of a transport reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_filter_obsolete_with_http_info(flight_number, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flight_number: Flight number to add to the RosterActivity (required)
        :param datetime _from: Start time of the reference activity (required)
        :param datetime to: End time of the reference activity (required)
        :param str activity_code: Filter by activity code
        :param str employee_id: Filter by employee number
        :param str dep_airport: Filter by departure airport
        :param str arr_airport: Filter by arrival airport
        :param str prefix: Prefix to add to the RosterActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flight_number', '_from', 'to', 'activity_code', 'employee_id', 'dep_airport', 'arr_airport', 'prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_flight_number_by_filter_obsolete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flight_number' is set
        if ('flight_number' not in params or
                params['flight_number'] is None):
            raise ValueError("Missing the required parameter `flight_number` when calling `roster_set_flight_number_by_filter_obsolete`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_set_flight_number_by_filter_obsolete`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_set_flight_number_by_filter_obsolete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'flight_number' in params:
            query_params.append(('Flight_number', params['flight_number']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'activity_code' in params:
            query_params.append(('ActivityCode', params['activity_code']))  # noqa: E501
        if 'employee_id' in params:
            query_params.append(('EmployeeID', params['employee_id']))  # noqa: E501
        if 'dep_airport' in params:
            query_params.append(('DepAirport', params['dep_airport']))  # noqa: E501
        if 'arr_airport' in params:
            query_params.append(('ArrAirport', params['arr_airport']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('Prefix', params['prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/transport-reference-activity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_flight_number_by_unique_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Set the flight number, prefix and confirmed status of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_unique_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterActivityFlightDetails body: flight information and activity confirmation indicator to set or update the linked roster. (required)
        :param int unique_id: UniqueID of the RosterActivity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_flight_number_by_unique_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_flight_number_by_unique_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def roster_set_flight_number_by_unique_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Set the flight number, prefix and confirmed status of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_unique_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterActivityFlightDetails body: flight information and activity confirmation indicator to set or update the linked roster. (required)
        :param int unique_id: UniqueID of the RosterActivity (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_flight_number_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_flight_number_by_unique_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_set_flight_number_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['uniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/{uniqueId}/transport/flight-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_flight_number_by_unique_id_obsolete(self, unique_id, flight_number, **kwargs):  # noqa: E501
        """Set the flight number and prefix  of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_unique_id_obsolete(unique_id, flight_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: UniqueID of the RosterActivity (required)
        :param str flight_number: Flight number to add to the RosterActivity (required)
        :param str prefix: Prefix to add to the RosterActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_flight_number_by_unique_id_obsolete_with_http_info(unique_id, flight_number, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_flight_number_by_unique_id_obsolete_with_http_info(unique_id, flight_number, **kwargs)  # noqa: E501
            return data

    def roster_set_flight_number_by_unique_id_obsolete_with_http_info(self, unique_id, flight_number, **kwargs):  # noqa: E501
        """Set the flight number and prefix  of a transport reference activity. if multiple activities are found then will update the flight number with matching activities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_flight_number_by_unique_id_obsolete_with_http_info(unique_id, flight_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: UniqueID of the RosterActivity (required)
        :param str flight_number: Flight number to add to the RosterActivity (required)
        :param str prefix: Prefix to add to the RosterActivity
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'flight_number', 'prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_flight_number_by_unique_id_obsolete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_set_flight_number_by_unique_id_obsolete`")  # noqa: E501
        # verify the required parameter 'flight_number' is set
        if ('flight_number' not in params or
                params['flight_number'] is None):
            raise ValueError("Missing the required parameter `flight_number` when calling `roster_set_flight_number_by_unique_id_obsolete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'flight_number' in params:
            query_params.append(('Flight_number', params['flight_number']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('Prefix', params['prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/transport-reference-activity/{UniqueId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_roster_assigned_flight(self, body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, **kwargs):  # noqa: E501
        """Update assigned flight roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_assigned_flight(body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterIn body: The roster data to update. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str flight_number: The flight number. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param datetime flight_date: The date of the flight. (required)
        :param str callsign: The flight call sign.
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_roster_assigned_flight_with_http_info(body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_roster_assigned_flight_with_http_info(body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, **kwargs)  # noqa: E501
            return data

    def roster_set_roster_assigned_flight_with_http_info(self, body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, **kwargs):  # noqa: E501
        """Update assigned flight roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_assigned_flight_with_http_info(body, crew_number, flight_number, departure_airport, arrival_airport, flight_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterIn body: The roster data to update. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str flight_number: The flight number. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param datetime flight_date: The date of the flight. (required)
        :param str callsign: The flight call sign.
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crew_number', 'flight_number', 'departure_airport', 'arrival_airport', 'flight_date', 'callsign']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_roster_assigned_flight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_roster_assigned_flight`")  # noqa: E501
        # verify the required parameter 'crew_number' is set
        if ('crew_number' not in params or
                params['crew_number'] is None):
            raise ValueError("Missing the required parameter `crew_number` when calling `roster_set_roster_assigned_flight`")  # noqa: E501
        # verify the required parameter 'flight_number' is set
        if ('flight_number' not in params or
                params['flight_number'] is None):
            raise ValueError("Missing the required parameter `flight_number` when calling `roster_set_roster_assigned_flight`")  # noqa: E501
        # verify the required parameter 'departure_airport' is set
        if ('departure_airport' not in params or
                params['departure_airport'] is None):
            raise ValueError("Missing the required parameter `departure_airport` when calling `roster_set_roster_assigned_flight`")  # noqa: E501
        # verify the required parameter 'arrival_airport' is set
        if ('arrival_airport' not in params or
                params['arrival_airport'] is None):
            raise ValueError("Missing the required parameter `arrival_airport` when calling `roster_set_roster_assigned_flight`")  # noqa: E501
        # verify the required parameter 'flight_date' is set
        if ('flight_date' not in params or
                params['flight_date'] is None):
            raise ValueError("Missing the required parameter `flight_date` when calling `roster_set_roster_assigned_flight`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'crew_number' in params:
            query_params.append(('crewNumber', params['crew_number']))  # noqa: E501
        if 'flight_number' in params:
            query_params.append(('flightNumber', params['flight_number']))  # noqa: E501
        if 'departure_airport' in params:
            query_params.append(('departureAirport', params['departure_airport']))  # noqa: E501
        if 'arrival_airport' in params:
            query_params.append(('arrivalAirport', params['arrival_airport']))  # noqa: E501
        if 'flight_date' in params:
            query_params.append(('flightDate', params['flight_date']))  # noqa: E501
        if 'callsign' in params:
            query_params.append(('callsign', params['callsign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/flight', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_roster_assigned_flight_by_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Update assigned roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_assigned_flight_by_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterIn body: The roster data to update. (required)
        :param int unique_id: The Unique Id of the assigned Roster Activity (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_roster_assigned_flight_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_roster_assigned_flight_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def roster_set_roster_assigned_flight_by_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Update assigned roster activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_assigned_flight_by_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterIn body: The roster data to update. (required)
        :param int unique_id: The Unique Id of the assigned Roster Activity (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_roster_assigned_flight_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_roster_assigned_flight_by_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `roster_set_roster_assigned_flight_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['uniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/{uniqueId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_roster_data(self, body, **kwargs):  # noqa: E501
        """Set flight assignment for a roster. This endpoint is DEPRECATED , use:  rosters/assigned-activity/flight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterBaseIn body: The roster data to update. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_roster_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_roster_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def roster_set_roster_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set flight assignment for a roster. This endpoint is DEPRECATED , use:  rosters/assigned-activity/flight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterBaseIn body: The roster data to update. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_roster_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_roster_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned_flight', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_roster_designators_by_logical_key(self, body, flight_date, departure_airport, arrival_airport, crew_number, **kwargs):  # noqa: E501
        """Set roster designators for a roster activity by flight detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_designators_by_logical_key(body, flight_date, departure_airport, arrival_airport, crew_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterDesignatorObject body: an body object containing roster designator codes (comma separated) and the Confirmed status of roster activity (required)
        :param datetime flight_date: The date of the flight. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str flight_number: The flight number.
        :param str call_sign: The flight call sign.
        :return: FlightOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_roster_designators_by_logical_key_with_http_info(body, flight_date, departure_airport, arrival_airport, crew_number, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_roster_designators_by_logical_key_with_http_info(body, flight_date, departure_airport, arrival_airport, crew_number, **kwargs)  # noqa: E501
            return data

    def roster_set_roster_designators_by_logical_key_with_http_info(self, body, flight_date, departure_airport, arrival_airport, crew_number, **kwargs):  # noqa: E501
        """Set roster designators for a roster activity by flight detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_designators_by_logical_key_with_http_info(body, flight_date, departure_airport, arrival_airport, crew_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosterDesignatorObject body: an body object containing roster designator codes (comma separated) and the Confirmed status of roster activity (required)
        :param datetime flight_date: The date of the flight. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str flight_number: The flight number.
        :param str call_sign: The flight call sign.
        :return: FlightOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'flight_date', 'departure_airport', 'arrival_airport', 'crew_number', 'flight_number', 'call_sign']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_roster_designators_by_logical_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_roster_designators_by_logical_key`")  # noqa: E501
        # verify the required parameter 'flight_date' is set
        if ('flight_date' not in params or
                params['flight_date'] is None):
            raise ValueError("Missing the required parameter `flight_date` when calling `roster_set_roster_designators_by_logical_key`")  # noqa: E501
        # verify the required parameter 'departure_airport' is set
        if ('departure_airport' not in params or
                params['departure_airport'] is None):
            raise ValueError("Missing the required parameter `departure_airport` when calling `roster_set_roster_designators_by_logical_key`")  # noqa: E501
        # verify the required parameter 'arrival_airport' is set
        if ('arrival_airport' not in params or
                params['arrival_airport'] is None):
            raise ValueError("Missing the required parameter `arrival_airport` when calling `roster_set_roster_designators_by_logical_key`")  # noqa: E501
        # verify the required parameter 'crew_number' is set
        if ('crew_number' not in params or
                params['crew_number'] is None):
            raise ValueError("Missing the required parameter `crew_number` when calling `roster_set_roster_designators_by_logical_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'flight_date' in params:
            query_params.append(('FlightDate', params['flight_date']))  # noqa: E501
        if 'departure_airport' in params:
            query_params.append(('DepartureAirport', params['departure_airport']))  # noqa: E501
        if 'arrival_airport' in params:
            query_params.append(('ArrivalAirport', params['arrival_airport']))  # noqa: E501
        if 'crew_number' in params:
            query_params.append(('CrewNumber', params['crew_number']))  # noqa: E501
        if 'flight_number' in params:
            query_params.append(('FlightNumber', params['flight_number']))  # noqa: E501
        if 'call_sign' in params:
            query_params.append(('CallSign', params['call_sign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned-activity/flight/designators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FlightOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_roster_designators_by_unique_id(self, flight_date, departure_airport, arrival_airport, crew_number, roster_designator, **kwargs):  # noqa: E501
        """Set roster designators  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_designators_by_unique_id(flight_date, departure_airport, arrival_airport, crew_number, roster_designator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime flight_date: The date of the flight. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str roster_designator: The roster designator codes (comma separated). (required)
        :param str flight_number: The flight number.
        :param str call_sign: The flight call sign.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_roster_designators_by_unique_id_with_http_info(flight_date, departure_airport, arrival_airport, crew_number, roster_designator, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_roster_designators_by_unique_id_with_http_info(flight_date, departure_airport, arrival_airport, crew_number, roster_designator, **kwargs)  # noqa: E501
            return data

    def roster_set_roster_designators_by_unique_id_with_http_info(self, flight_date, departure_airport, arrival_airport, crew_number, roster_designator, **kwargs):  # noqa: E501
        """Set roster designators  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_roster_designators_by_unique_id_with_http_info(flight_date, departure_airport, arrival_airport, crew_number, roster_designator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime flight_date: The date of the flight. (required)
        :param str departure_airport: The departure station short code. (required)
        :param str arrival_airport: The arrival station short code. (required)
        :param str crew_number: The crew/employe number. (required)
        :param str roster_designator: The roster designator codes (comma separated). (required)
        :param str flight_number: The flight number.
        :param str call_sign: The flight call sign.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flight_date', 'departure_airport', 'arrival_airport', 'crew_number', 'roster_designator', 'flight_number', 'call_sign']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_roster_designators_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flight_date' is set
        if ('flight_date' not in params or
                params['flight_date'] is None):
            raise ValueError("Missing the required parameter `flight_date` when calling `roster_set_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter 'departure_airport' is set
        if ('departure_airport' not in params or
                params['departure_airport'] is None):
            raise ValueError("Missing the required parameter `departure_airport` when calling `roster_set_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter 'arrival_airport' is set
        if ('arrival_airport' not in params or
                params['arrival_airport'] is None):
            raise ValueError("Missing the required parameter `arrival_airport` when calling `roster_set_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter 'crew_number' is set
        if ('crew_number' not in params or
                params['crew_number'] is None):
            raise ValueError("Missing the required parameter `crew_number` when calling `roster_set_roster_designators_by_unique_id`")  # noqa: E501
        # verify the required parameter 'roster_designator' is set
        if ('roster_designator' not in params or
                params['roster_designator'] is None):
            raise ValueError("Missing the required parameter `roster_designator` when calling `roster_set_roster_designators_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'flight_date' in params:
            query_params.append(('FlightDate', params['flight_date']))  # noqa: E501
        if 'departure_airport' in params:
            query_params.append(('DepartureAirport', params['departure_airport']))  # noqa: E501
        if 'arrival_airport' in params:
            query_params.append(('ArrivalAirport', params['arrival_airport']))  # noqa: E501
        if 'crew_number' in params:
            query_params.append(('CrewNumber', params['crew_number']))  # noqa: E501
        if 'roster_designator' in params:
            query_params.append(('RosterDesignator', params['roster_designator']))  # noqa: E501
        if 'flight_number' in params:
            query_params.append(('FlightNumber', params['flight_number']))  # noqa: E501
        if 'call_sign' in params:
            query_params.append(('CallSign', params['call_sign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters/assigned_flight/designators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roster_set_rosters(self, body, _from, to, **kwargs):  # noqa: E501
        """Sets or updates roster information.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_rosters(body, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Crew] body: The crew data model containing information to set or updated the linked roster. (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param bool remove_carry_in_activities: Flag to remove activity when true.
        :param bool remove_carry_out_activities: Flag to remove activity when true.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.roster_set_rosters_with_http_info(body, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.roster_set_rosters_with_http_info(body, _from, to, **kwargs)  # noqa: E501
            return data

    def roster_set_rosters_with_http_info(self, body, _from, to, **kwargs):  # noqa: E501
        """Sets or updates roster information.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.roster_set_rosters_with_http_info(body, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Crew] body: The crew data model containing information to set or updated the linked roster. (required)
        :param datetime _from: The start date/time range. (required)
        :param datetime to: The end date/time range. (required)
        :param bool remove_carry_in_activities: Flag to remove activity when true.
        :param bool remove_carry_out_activities: Flag to remove activity when true.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', '_from', 'to', 'remove_carry_in_activities', 'remove_carry_out_activities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roster_set_rosters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `roster_set_rosters`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `roster_set_rosters`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `roster_set_rosters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'remove_carry_in_activities' in params:
            query_params.append(('RemoveCarryInActivities', params['remove_carry_in_activities']))  # noqa: E501
        if 'remove_carry_out_activities' in params:
            query_params.append(('RemoveCarryOutActivities', params['remove_carry_out_activities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/rosters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
