# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FlightApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def flight_delete_flight_notes_by_unique_id(self, unique_id, **kwargs):  # noqa: E501
        """Deletes Flight Notes by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_delete_flight_notes_by_unique_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Ids of Notes (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_delete_flight_notes_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_delete_flight_notes_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_delete_flight_notes_by_unique_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Deletes Flight Notes by UniqueId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_delete_flight_notes_by_unique_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: Unique Ids of Notes (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_delete_flight_notes_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_delete_flight_notes_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/notes/{UniqueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_airports(self, unique_id, **kwargs):  # noqa: E501
        """Get the airports associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_airports(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: Airports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_airports_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_airports_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_airports_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the airports associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_airports_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: Airports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_airports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_airports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/airports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Airports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_atc_edct(self, unique_id, **kwargs):  # noqa: E501
        """Get the flight ATC EDCT info for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_atc_edct(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique identifier of the flight. (required)
        :return: AtcEdctOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_atc_edct_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_atc_edct_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_atc_edct_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the flight ATC EDCT info for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_atc_edct_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique identifier of the flight. (required)
        :return: AtcEdctOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_atc_edct" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_atc_edct`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/atc-edct', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AtcEdctOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_by_id(self, unique_id, **kwargs):  # noqa: E501
        """Get flight data by its unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_by_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :param list[str] flight_request_filter: Optional list of flight fields to include in the response.
        :return: list[Flight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_by_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_by_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_by_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get flight data by its unique identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_by_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :param list[str] flight_request_filter: Optional list of flight fields to include in the response.
        :return: list[Flight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'flight_request_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'flight_request_filter' in params:
            query_params.append(('FlightRequestFilter', params['flight_request_filter']))  # noqa: E501
            collection_formats['FlightRequestFilter'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Flight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_delays(self, unique_id, **kwargs):  # noqa: E501
        """Get the delays information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_delays(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :return: DelaysOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_delays_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_delays_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_delays_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the delays information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_delays_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :return: DelaysOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_delays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_delays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/delays', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DelaysOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_fuels(self, unique_id, **kwargs):  # noqa: E501
        """Get fuel information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_fuels(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[Fuel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_fuels_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_fuels_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_fuels_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get fuel information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_fuels_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[Fuel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_fuels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_fuels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/fuels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Fuel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_loads(self, unique_id, **kwargs):  # noqa: E501
        """Get the load information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_loads(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :return: Loads
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_loads_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_loads_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_loads_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the load information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_loads_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique id of the flight. (required)
        :return: Loads
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_loads" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_loads`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/loads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loads',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_notes(self, unique_id, **kwargs):  # noqa: E501
        """Get notes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_notes(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[Note]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_notes_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_notes_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_notes_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get notes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_notes_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[Note]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Note]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_project_codes(self, unique_id, **kwargs):  # noqa: E501
        """Get the project codes associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_project_codes(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[ProjectCode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_project_codes_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_project_codes_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_project_codes_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the project codes associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_project_codes_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique ID of the flight. (required)
        :return: list[ProjectCode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_project_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_project_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/projectcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectCode]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flight_times(self, unique_id, **kwargs):  # noqa: E501
        """Get the flight times for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_times(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique identifier of the flight. (required)
        :return: list[Time]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flight_times_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flight_times_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def flight_get_flight_times_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """Get the flight times for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flight_times_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int unique_id: The unique identifier of the flight. (required)
        :return: list[Time]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flight_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_get_flight_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/times', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Time]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_get_flights(self, **kwargs):  # noqa: E501
        """Get flights based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flights(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The ID of the leg filter to apply.
        :param str filter_name: The name of the leg filter to apply.
        :param str unique_id: The unique ID of the flight.
        :param datetime _from: The earliest scheduled departure time.
        :param datetime to: The latest scheduled departure time.
        :param datetime overall_modified_time_from: Earliest Overall Modified Time.
        :param datetime overall_modified_time_to: Latest Overall Modified Time.
        :param str airline: The airline code.
        :param str flight_number: The flight number.
        :param str suffix: The flight suffix.
        :param str departure_airport: The departure airport IATA or ICAO code.
        :param str arrival_airport: The arrival airport IATA or ICAO code.
        :param str aircraft_registration: The aircraft registration number.
        :param list[str] flight_request_filter: A list of flight fields used for additional filtering.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Flight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_get_flights_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.flight_get_flights_with_http_info(**kwargs)  # noqa: E501
            return data

    def flight_get_flights_with_http_info(self, **kwargs):  # noqa: E501
        """Get flights based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_get_flights_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The ID of the leg filter to apply.
        :param str filter_name: The name of the leg filter to apply.
        :param str unique_id: The unique ID of the flight.
        :param datetime _from: The earliest scheduled departure time.
        :param datetime to: The latest scheduled departure time.
        :param datetime overall_modified_time_from: Earliest Overall Modified Time.
        :param datetime overall_modified_time_to: Latest Overall Modified Time.
        :param str airline: The airline code.
        :param str flight_number: The flight number.
        :param str suffix: The flight suffix.
        :param str departure_airport: The departure airport IATA or ICAO code.
        :param str arrival_airport: The arrival airport IATA or ICAO code.
        :param str aircraft_registration: The aircraft registration number.
        :param list[str] flight_request_filter: A list of flight fields used for additional filtering.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Flight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id', 'filter_name', 'unique_id', '_from', 'to', 'overall_modified_time_from', 'overall_modified_time_to', 'airline', 'flight_number', 'suffix', 'departure_airport', 'arrival_airport', 'aircraft_registration', 'flight_request_filter', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_get_flights" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_id' in params:
            query_params.append(('FilterId', params['filter_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'overall_modified_time_from' in params:
            query_params.append(('OverallModifiedTimeFrom', params['overall_modified_time_from']))  # noqa: E501
        if 'overall_modified_time_to' in params:
            query_params.append(('OverallModifiedTimeTo', params['overall_modified_time_to']))  # noqa: E501
        if 'airline' in params:
            query_params.append(('Airline', params['airline']))  # noqa: E501
        if 'flight_number' in params:
            query_params.append(('FlightNumber', params['flight_number']))  # noqa: E501
        if 'suffix' in params:
            query_params.append(('Suffix', params['suffix']))  # noqa: E501
        if 'departure_airport' in params:
            query_params.append(('DepartureAirport', params['departure_airport']))  # noqa: E501
        if 'arrival_airport' in params:
            query_params.append(('ArrivalAirport', params['arrival_airport']))  # noqa: E501
        if 'aircraft_registration' in params:
            query_params.append(('AircraftRegistration', params['aircraft_registration']))  # noqa: E501
        if 'flight_request_filter' in params:
            query_params.append(('FlightRequestFilter', params['flight_request_filter']))  # noqa: E501
            collection_formats['FlightRequestFilter'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Flight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_airports(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the airports associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_airports(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Airports body: The airports data to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_airports_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_airports_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_airports_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the airports associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_airports_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Airports body: The airports data to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_airports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_airports`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_airports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/airports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_data(self, body, **kwargs):  # noqa: E501
        """Sets flight data using the provided flight data object.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestFlightData body: The flight data object containing information to be set. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sets flight data using the provided flight data object.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestFlightData body: The flight data object containing information to be set. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_data_by_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Updates flight data for a specific flight identified by its unique ID.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_data_by_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestFlightData body: The flight data to update. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_data_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_data_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_data_by_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Updates flight data for a specific flight identified by its unique ID.  For notes, UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_data_by_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestFlightData body: The flight data to update. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_data_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_data_by_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_data_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_delays(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the delays information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_delays(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delays body: The delays information to be set for the flight. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_delays_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_delays_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_delays_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the delays information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_delays_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delays body: The delays information to be set for the flight. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_delays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_delays`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_delays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/delays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_desk(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the desk associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_desk(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The desk information to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_desk_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_desk_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_desk_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the desk associated with a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_desk_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The desk information to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_desk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_desk`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_desk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/desk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_flightplan(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the flight plan for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_flightplan(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Flightplan body: The flight plan data to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_flightplan_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_flightplan_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_flightplan_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the flight plan for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_flightplan_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Flightplan body: The flight plan data to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_flightplan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_flightplan`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_flightplan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/flightplan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_fuels(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets or updates the fuel information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_fuels(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Fuel] body: The fuel informations to be set or updated. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_fuels_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_fuels_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_fuels_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets or updates the fuel information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_fuels_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Fuel] body: The fuel informations to be set or updated. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_fuels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_fuels`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_fuels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/fuels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_legal_exceptions_codes(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the legal exceptions codes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_legal_exceptions_codes(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[LegLegalException] body: The legal exceptions codes to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_legal_exceptions_codes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_legal_exceptions_codes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_legal_exceptions_codes_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the legal exceptions codes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_legal_exceptions_codes_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[LegLegalException] body: The legal exceptions codes to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_legal_exceptions_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_legal_exceptions_codes`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_legal_exceptions_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/legalexceptionscodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_loads(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets or updates the load information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_loads(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Loads body: The load information to be set or updated. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_loads_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_loads_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_loads_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets or updates the load information for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_loads_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Loads body: The load information to be set or updated. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_loads" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_loads`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_loads`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/loads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_notes(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets notes for a specific flight identified by its unique ID.  UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_notes(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Note] body: The notes to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_notes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_notes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_notes_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets notes for a specific flight identified by its unique ID.  UniqueId and ModifiedByUniqueId from body are readonly properties. Do not set them via SET request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_notes_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Note] body: The notes to be set for the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_notes`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_project_codes(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the project codes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_project_codes(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ProjectCode] body: The project codes to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_project_codes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_project_codes_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_project_codes_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the project codes for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_project_codes_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ProjectCode] body: The project codes to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_project_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_project_codes`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_project_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/projectcodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_times(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the flight times for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_times(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Time] body: The flight times to be set for the specified flight. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_times_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_times_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_times_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the flight times for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_times_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Time] body: The flight times to be set for the specified flight. (required)
        :param int unique_id: The unique id of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_times`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/times', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flight_set_flight_voyage_report(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the voyage report for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_voyage_report(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoyageReport body: The voyage report data to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flight_set_flight_voyage_report_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.flight_set_flight_voyage_report_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def flight_set_flight_voyage_report_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Sets the voyage report for a specific flight identified by its unique ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flight_set_flight_voyage_report_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoyageReport body: The voyage report data to be associated with the flight. (required)
        :param int unique_id: The unique ID of the flight. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flight_set_flight_voyage_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flight_set_flight_voyage_report`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `flight_set_flight_voyage_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/flights/{UniqueId}/voyagereport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
