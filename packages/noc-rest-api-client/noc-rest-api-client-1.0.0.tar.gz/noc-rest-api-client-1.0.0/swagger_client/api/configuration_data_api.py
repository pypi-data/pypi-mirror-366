# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigurationDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def configuration_data_get_aircraft_types(self, **kwargs):  # noqa: E501
        """Get aircraft types optionally filtered by name, IATA code, or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_aircraft_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the aircraft type.
        :param str iata: The IATA code of the aircraft type.
        :param str icao: The ICAO code of the aircraft type.
        :return: list[AircraftType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_aircraft_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_aircraft_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_aircraft_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get aircraft types optionally filtered by name, IATA code, or ICAO code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_aircraft_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the aircraft type.
        :param str iata: The IATA code of the aircraft type.
        :param str icao: The ICAO code of the aircraft type.
        :return: list[AircraftType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'iata', 'icao']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_aircraft_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'iata' in params:
            query_params.append(('IATA', params['iata']))  # noqa: E501
        if 'icao' in params:
            query_params.append(('ICAO', params['icao']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/aircraft-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AircraftType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_bases(self, **kwargs):  # noqa: E501
        """Get bases optionally filtered by name, short code, or base type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_bases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the base.
        :param str short_code: The shortcode to identifyed the base.
        :param bool twin_base: Set to get twin bases if exists.
        :param str base_type: Set to filter by type.
        :return: list[BasesInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_bases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_bases_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_bases_with_http_info(self, **kwargs):  # noqa: E501
        """Get bases optionally filtered by name, short code, or base type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_bases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the base.
        :param str short_code: The shortcode to identifyed the base.
        :param bool twin_base: Set to get twin bases if exists.
        :param str base_type: Set to filter by type.
        :return: list[BasesInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code', 'twin_base', 'base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_bases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501
        if 'twin_base' in params:
            query_params.append(('TwinBase', params['twin_base']))  # noqa: E501
        if 'base_type' in params:
            query_params.append(('BaseType', params['base_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/bases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BasesInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_crew_complements(self, **kwargs):  # noqa: E501
        """Get crew complements optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_crew_complements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the crew complement.
        :param str short_code: The short code of the crew complement.
        :return: list[CrewComplement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_crew_complements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_crew_complements_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_crew_complements_with_http_info(self, **kwargs):  # noqa: E501
        """Get crew complements optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_crew_complements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the crew complement.
        :param str short_code: The short code of the crew complement.
        :return: list[CrewComplement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_crew_complements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/crew-complements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CrewComplement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_hotel_information(self, **kwargs):  # noqa: E501
        """Get hotel information optionally filtered by name or code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hotel_information(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the hotel.
        :param str code: The code of the hotel.
        :return: list[HotelInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_hotel_information_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_hotel_information_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_hotel_information_with_http_info(self, **kwargs):  # noqa: E501
        """Get hotel information optionally filtered by name or code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hotel_information_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the hotel.
        :param str code: The code of the hotel.
        :return: list[HotelInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_hotel_information" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'code' in params:
            query_params.append(('Code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/hotel-information', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HotelInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_hr_documents(self, **kwargs):  # noqa: E501
        """Get HR documents optionally filtered by their name, code, or document type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hr_documents(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the HR document.
        :param str code: The code of the HR document.
        :param str document_type: The type of the HR document.
        :return: list[HRDocuments]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_hr_documents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_hr_documents_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_hr_documents_with_http_info(self, **kwargs):  # noqa: E501
        """Get HR documents optionally filtered by their name, code, or document type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hr_documents_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the HR document.
        :param str code: The code of the HR document.
        :param str document_type: The type of the HR document.
        :return: list[HRDocuments]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'code', 'document_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_hr_documents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'code' in params:
            query_params.append(('Code', params['code']))  # noqa: E501
        if 'document_type' in params:
            query_params.append(('DocumentType', params['document_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/hr-documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HRDocuments]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_hr_types(self, **kwargs):  # noqa: E501
        """Get HR types optionally filtered by their name, short code, type, or main type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hr_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The HR type name.
        :param str short_code: The HR Type short code.
        :param str type: The HR Type.
        :param str main_type: The Main HR Type.
        :return: list[HRType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_hr_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_hr_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_hr_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get HR types optionally filtered by their name, short code, type, or main type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_hr_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The HR type name.
        :param str short_code: The HR Type short code.
        :param str type: The HR Type.
        :param str main_type: The Main HR Type.
        :return: list[HRType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code', 'type', 'main_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_hr_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'main_type' in params:
            query_params.append(('MainType', params['main_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/hr-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HRType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_leg_legal_exceptions(self, **kwargs):  # noqa: E501
        """Get legal exceptions for legs optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_leg_legal_exceptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the leg legal exception.
        :param str short_code: The short code of the leg legal exception.
        :return: list[LegLegalExceptionConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_leg_legal_exceptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_leg_legal_exceptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_leg_legal_exceptions_with_http_info(self, **kwargs):  # noqa: E501
        """Get legal exceptions for legs optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_leg_legal_exceptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the leg legal exception.
        :param str short_code: The short code of the leg legal exception.
        :return: list[LegLegalExceptionConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_leg_legal_exceptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/leg-legal-exception', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LegLegalExceptionConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_note_types(self, **kwargs):  # noqa: E501
        """Get NoteType optionally filtered by their name or Datatype.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_note_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the NoteType .
        :param str data_type: Set to filter by DataType.
        :return: list[NoteType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_note_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_note_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_note_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get NoteType optionally filtered by their name or Datatype.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_note_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the NoteType .
        :param str data_type: Set to filter by DataType.
        :return: list[NoteType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'data_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_note_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'data_type' in params:
            query_params.append(('DataType', params['data_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/note-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NoteType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_projects(self, **kwargs):  # noqa: E501
        """Get projects optionally filtered by name, short code, project number, cost center, or company.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_projects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project.
        :param str short_code: The short code of the project.
        :param str project_number: The project number.
        :param str cost_center: The cost center.
        :param str company: The company name .
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Get projects optionally filtered by name, short code, project number, cost center, or company.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the project.
        :param str short_code: The short code of the project.
        :param str project_number: The project number.
        :param str cost_center: The cost center.
        :param str company: The company name .
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code', 'project_number', 'cost_center', 'company']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_projects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501
        if 'project_number' in params:
            query_params.append(('ProjectNumber', params['project_number']))  # noqa: E501
        if 'cost_center' in params:
            query_params.append(('CostCenter', params['cost_center']))  # noqa: E501
        if 'company' in params:
            query_params.append(('Company', params['company']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_ranks(self, **kwargs):  # noqa: E501
        """Get Ranks optionally filtered by their name,shortcode or type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_ranks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Rank .
        :param str short_code: The short code of the Rank.
        :param str type: The type of the Rank.
        :return: list[RankConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_ranks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_ranks_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_ranks_with_http_info(self, **kwargs):  # noqa: E501
        """Get Ranks optionally filtered by their name,shortcode or type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_ranks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Rank .
        :param str short_code: The short code of the Rank.
        :param str type: The type of the Rank.
        :return: list[RankConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_ranks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/ranks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RankConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_reason_categories(self, **kwargs):  # noqa: E501
        """Get reason categories optionally filtered by their code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reason_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The reason category shortcode. Default null.
        :return: list[ReasonCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_reason_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_reason_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_reason_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Get reason categories optionally filtered by their code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reason_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The reason category shortcode. Default null.
        :return: list[ReasonCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_reason_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('Code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/reason-categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReasonCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_reasons(self, **kwargs):  # noqa: E501
        """Get reasons optionally filtered by code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reasons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The code of the reason.
        :return: list[Reason]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_reasons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_reasons_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_reasons_with_http_info(self, **kwargs):  # noqa: E501
        """Get reasons optionally filtered by code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reasons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The code of the reason.
        :return: list[Reason]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_reasons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('Code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/reasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Reason]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_reference_activities(self, **kwargs):  # noqa: E501
        """Get reference activities optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reference_activities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the reference activity.
        :param str short_code: The short code of the reference activity.
        :return: list[ReferenceActivity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_reference_activities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_reference_activities_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_reference_activities_with_http_info(self, **kwargs):  # noqa: E501
        """Get reference activities optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_reference_activities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the reference activity.
        :param str short_code: The short code of the reference activity.
        :return: list[ReferenceActivity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_reference_activities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/reference-activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferenceActivity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_roster_designators(self, **kwargs):  # noqa: E501
        """Get roster designators optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_roster_designators(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the roster designator.
        :param str short_code: The short code of the roster designator.
        :return: list[RosterDesignatorCodes]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_roster_designators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_roster_designators_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_roster_designators_with_http_info(self, **kwargs):  # noqa: E501
        """Get roster designators optionally filtered by name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_roster_designators_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the roster designator.
        :param str short_code: The short code of the roster designator.
        :return: list[RosterDesignatorCodes]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_roster_designators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/roster-designators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RosterDesignatorCodes]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_roster_legal_exceptions(self, **kwargs):  # noqa: E501
        """Get roster legal exceptions optionally filtered by their name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_roster_legal_exceptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the roster legal exception.
        :param str short_code: The roster legal exception short code.
        :return: list[RosterLegalExceptionConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_roster_legal_exceptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_roster_legal_exceptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_roster_legal_exceptions_with_http_info(self, **kwargs):  # noqa: E501
        """Get roster legal exceptions optionally filtered by their name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_roster_legal_exceptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the roster legal exception.
        :param str short_code: The roster legal exception short code.
        :return: list[RosterLegalExceptionConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_roster_legal_exceptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/roster-legal-exceptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RosterLegalExceptionConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_sepcial_roles(self, **kwargs):  # noqa: E501
        """Get special roles optionally filtered by role type, roster pattern, and equipment qualification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_sepcial_roles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_type: The type of special role.
        :param list[str] roster_pattern: A list of roster patterns.
        :param list[str] equipment_qualification: A list of equipment qualifications.
        :return: list[SpecialRoleConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_sepcial_roles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_sepcial_roles_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_sepcial_roles_with_http_info(self, **kwargs):  # noqa: E501
        """Get special roles optionally filtered by role type, roster pattern, and equipment qualification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_sepcial_roles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_type: The type of special role.
        :param list[str] roster_pattern: A list of roster patterns.
        :param list[str] equipment_qualification: A list of equipment qualifications.
        :return: list[SpecialRoleConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_type', 'roster_pattern', 'equipment_qualification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_sepcial_roles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'role_type' in params:
            query_params.append(('RoleType', params['role_type']))  # noqa: E501
        if 'roster_pattern' in params:
            query_params.append(('RosterPattern', params['roster_pattern']))  # noqa: E501
            collection_formats['RosterPattern'] = 'multi'  # noqa: E501
        if 'equipment_qualification' in params:
            query_params.append(('EquipmentQualification', params['equipment_qualification']))  # noqa: E501
            collection_formats['EquipmentQualification'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/special-roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SpecialRoleConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configuration_data_get_transaction_codes(self, **kwargs):  # noqa: E501
        """Get transaction codes optionally filtered by their name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_transaction_codes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The transaction code name.
        :param str short_code: The transaction code short code.
        :return: list[TransactionCode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configuration_data_get_transaction_codes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.configuration_data_get_transaction_codes_with_http_info(**kwargs)  # noqa: E501
            return data

    def configuration_data_get_transaction_codes_with_http_info(self, **kwargs):  # noqa: E501
        """Get transaction codes optionally filtered by their name or short code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configuration_data_get_transaction_codes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The transaction code name.
        :param str short_code: The transaction code short code.
        :return: list[TransactionCode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'short_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_data_get_transaction_codes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'short_code' in params:
            query_params.append(('ShortCode', params['short_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/configuration/transaction-codes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransactionCode]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
