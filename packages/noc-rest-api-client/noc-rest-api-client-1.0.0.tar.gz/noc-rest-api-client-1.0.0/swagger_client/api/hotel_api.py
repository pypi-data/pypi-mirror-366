# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HotelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def hotel_get_hotel_bookings(self, _from, to, crew_number, **kwargs):  # noqa: E501
        """Get hotel bookings within the specified date range and crew number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_get_hotel_bookings(_from, to, crew_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The valid from start date/time range. (required)
        :param datetime to: The valid from start date/time range. (required)
        :param str crew_number: The crew number associated with the hotel bookings. (required)
        :param bool include_all_status: Flag to ignore the booking status. Default is false.
        :return: list[HotelBooking]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hotel_get_hotel_bookings_with_http_info(_from, to, crew_number, **kwargs)  # noqa: E501
        else:
            (data) = self.hotel_get_hotel_bookings_with_http_info(_from, to, crew_number, **kwargs)  # noqa: E501
            return data

    def hotel_get_hotel_bookings_with_http_info(self, _from, to, crew_number, **kwargs):  # noqa: E501
        """Get hotel bookings within the specified date range and crew number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_get_hotel_bookings_with_http_info(_from, to, crew_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: The valid from start date/time range. (required)
        :param datetime to: The valid from start date/time range. (required)
        :param str crew_number: The crew number associated with the hotel bookings. (required)
        :param bool include_all_status: Flag to ignore the booking status. Default is false.
        :return: list[HotelBooking]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'crew_number', 'include_all_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hotel_get_hotel_bookings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `hotel_get_hotel_bookings`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `hotel_get_hotel_bookings`")  # noqa: E501
        # verify the required parameter 'crew_number' is set
        if ('crew_number' not in params or
                params['crew_number'] is None):
            raise ValueError("Missing the required parameter `crew_number` when calling `hotel_get_hotel_bookings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'crew_number' in params:
            query_params.append(('CrewNumber', params['crew_number']))  # noqa: E501
        if 'include_all_status' in params:
            query_params.append(('IncludeAllStatus', params['include_all_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/hotel-bookings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HotelBooking]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hotel_hotel_csv_importer(self, file, **kwargs):  # noqa: E501
        """Imports Hotels via a CSV file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_hotel_csv_importer(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hotel_hotel_csv_importer_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.hotel_hotel_csv_importer_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def hotel_hotel_csv_importer_with_http_info(self, file, **kwargs):  # noqa: E501
        """Imports Hotels via a CSV file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_hotel_csv_importer_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hotel_hotel_csv_importer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `hotel_hotel_csv_importer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['File'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/hotel/hotelCSVImporter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hotel_set_hotel_booking_logical_key(self, body, emp_number, _from, to, **kwargs):  # noqa: E501
        """Set hotel bookings within the specified date range and crew number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_set_hotel_booking_logical_key(body, emp_number, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotelBookingIn body: The  model data for status , comments (required)
        :param str emp_number: The Employee Numbers of Crew (comma separated) (required)
        :param datetime _from: The valid from of the reference activity (required)
        :param datetime to: The valid To of the reference activity (required)
        :param str departure_station: The departure station of the Hotel Booking
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hotel_set_hotel_booking_logical_key_with_http_info(body, emp_number, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.hotel_set_hotel_booking_logical_key_with_http_info(body, emp_number, _from, to, **kwargs)  # noqa: E501
            return data

    def hotel_set_hotel_booking_logical_key_with_http_info(self, body, emp_number, _from, to, **kwargs):  # noqa: E501
        """Set hotel bookings within the specified date range and crew number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_set_hotel_booking_logical_key_with_http_info(body, emp_number, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotelBookingIn body: The  model data for status , comments (required)
        :param str emp_number: The Employee Numbers of Crew (comma separated) (required)
        :param datetime _from: The valid from of the reference activity (required)
        :param datetime to: The valid To of the reference activity (required)
        :param str departure_station: The departure station of the Hotel Booking
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number', '_from', 'to', 'departure_station']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hotel_set_hotel_booking_logical_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hotel_set_hotel_booking_logical_key`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `hotel_set_hotel_booking_logical_key`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `hotel_set_hotel_booking_logical_key`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `hotel_set_hotel_booking_logical_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'emp_number' in params:
            query_params.append(('empNumber', params['emp_number']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'departure_station' in params:
            query_params.append(('DepartureStation', params['departure_station']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/hotel-bookings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hotel_set_hotel_bookings_by_id(self, body, unique_id, **kwargs):  # noqa: E501
        """Set hotel bookings with the UniqueId of the reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_set_hotel_bookings_by_id(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotelBookingIn body: The  model data for status , comments (required)
        :param str unique_id: The UniqueId of reference activities (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hotel_set_hotel_bookings_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.hotel_set_hotel_bookings_by_id_with_http_info(body, unique_id, **kwargs)  # noqa: E501
            return data

    def hotel_set_hotel_bookings_by_id_with_http_info(self, body, unique_id, **kwargs):  # noqa: E501
        """Set hotel bookings with the UniqueId of the reference activity.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hotel_set_hotel_bookings_by_id_with_http_info(body, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotelBookingIn body: The  model data for status , comments (required)
        :param str unique_id: The UniqueId of reference activities (comma separated) (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hotel_set_hotel_bookings_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hotel_set_hotel_bookings_by_id`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `hotel_set_hotel_bookings_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/hotel-booking/{UniqueId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
