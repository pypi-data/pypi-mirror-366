# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CrewApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def crew_delete_crew_phone_by_logical_key(self, emp_number, type, **kwargs):  # noqa: E501
        """Delete a phone number for a crew member identified by their empNumber, type, priorty and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phone_by_logical_key(emp_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew member's employee number. (required)
        :param str type: The type of the number phone (required)
        :param int priority:
        :param datetime valid_from: The valid From of the Phone number
        :param datetime valid_to: The valid to of the Phone number
        :param str phone_number: The Phone Number of Crew
        :return: PhoneOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_delete_crew_phone_by_logical_key_with_http_info(emp_number, type, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_delete_crew_phone_by_logical_key_with_http_info(emp_number, type, **kwargs)  # noqa: E501
            return data

    def crew_delete_crew_phone_by_logical_key_with_http_info(self, emp_number, type, **kwargs):  # noqa: E501
        """Delete a phone number for a crew member identified by their empNumber, type, priorty and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phone_by_logical_key_with_http_info(emp_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew member's employee number. (required)
        :param str type: The type of the number phone (required)
        :param int priority:
        :param datetime valid_from: The valid From of the Phone number
        :param datetime valid_to: The valid to of the Phone number
        :param str phone_number: The Phone Number of Crew
        :return: PhoneOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number', 'type', 'priority', 'valid_from', 'valid_to', 'phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_delete_crew_phone_by_logical_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_delete_crew_phone_by_logical_key`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `crew_delete_crew_phone_by_logical_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'priority' in params:
            query_params.append(('Priority', params['priority']))  # noqa: E501
        if 'valid_from' in params:
            query_params.append(('ValidFrom', params['valid_from']))  # noqa: E501
        if 'valid_to' in params:
            query_params.append(('ValidTo', params['valid_to']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phone', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_delete_crew_phone_by_unique_id(self, unique_id, emp_number, **kwargs):  # noqa: E501
        """Deletes specific phone number for a crew member identified by enmployee number and phone unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phone_by_unique_id(unique_id, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique identifier for the phone number. (required)
        :param str emp_number: The crew member's employee number. (required)
        :return: PhoneOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_delete_crew_phone_by_unique_id_with_http_info(unique_id, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_delete_crew_phone_by_unique_id_with_http_info(unique_id, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_delete_crew_phone_by_unique_id_with_http_info(self, unique_id, emp_number, **kwargs):  # noqa: E501
        """Deletes specific phone number for a crew member identified by enmployee number and phone unique id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phone_by_unique_id_with_http_info(unique_id, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique identifier for the phone number. (required)
        :param str emp_number: The crew member's employee number. (required)
        :return: PhoneOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_delete_crew_phone_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `crew_delete_crew_phone_by_unique_id`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_delete_crew_phone_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phone/{UniqueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_delete_crew_phones_by_logical_key(self, emp_number, type, **kwargs):  # noqa: E501
        """DEPREACATED Delete a phone number for a crew member identified by their empNumber, type, priorty and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phones_by_logical_key(emp_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew member's employee number. (required)
        :param str type: The type of the number phone (required)
        :param int priority:
        :param datetime valid_from: The valid From of the Phone number
        :param datetime valid_to: The valid to of the Phone number
        :param str phone_number: The Phone Number of Crew
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_delete_crew_phones_by_logical_key_with_http_info(emp_number, type, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_delete_crew_phones_by_logical_key_with_http_info(emp_number, type, **kwargs)  # noqa: E501
            return data

    def crew_delete_crew_phones_by_logical_key_with_http_info(self, emp_number, type, **kwargs):  # noqa: E501
        """DEPREACATED Delete a phone number for a crew member identified by their empNumber, type, priorty and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phones_by_logical_key_with_http_info(emp_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew member's employee number. (required)
        :param str type: The type of the number phone (required)
        :param int priority:
        :param datetime valid_from: The valid From of the Phone number
        :param datetime valid_to: The valid to of the Phone number
        :param str phone_number: The Phone Number of Crew
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number', 'type', 'priority', 'valid_from', 'valid_to', 'phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_delete_crew_phones_by_logical_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_delete_crew_phones_by_logical_key`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `crew_delete_crew_phones_by_logical_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'priority' in params:
            query_params.append(('Priority', params['priority']))  # noqa: E501
        if 'valid_from' in params:
            query_params.append(('ValidFrom', params['valid_from']))  # noqa: E501
        if 'valid_to' in params:
            query_params.append(('ValidTo', params['valid_to']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phones', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_delete_crew_phones_by_unique_id(self, unique_id, **kwargs):  # noqa: E501
        """DEPRECATED Deletes specific phone number for a crew member identified by phone unique ids.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phones_by_unique_id(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique identifier for the phone number.(comma separated if multiple phones). (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_delete_crew_phones_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_delete_crew_phones_by_unique_id_with_http_info(unique_id, **kwargs)  # noqa: E501
            return data

    def crew_delete_crew_phones_by_unique_id_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """DEPRECATED Deletes specific phone number for a crew member identified by phone unique ids.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_delete_crew_phones_by_unique_id_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The unique identifier for the phone number.(comma separated if multiple phones). (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_delete_crew_phones_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `crew_delete_crew_phones_by_unique_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['UniqueId'] = params['unique_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/phones/{UniqueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew(self, **kwargs):  # noqa: E501
        """Get crew information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str filter_name: The name of the HR filter to apply.
        :param str unique_id: The unique ID of the human resource (crew).
        :param datetime reference_date: The reference date for filtering active crew.
        :param bool only_active_crew: Flag to search only active crew members (default false).
        :param bool only_active_records: Flag to search only active records (default false).
        :param str emp_number: The crew number
        :param list[str] request_data: Additional request data for filtering crew.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_with_http_info(**kwargs)  # noqa: E501
            return data

    def crew_get_crew_with_http_info(self, **kwargs):  # noqa: E501
        """Get crew information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: The unique ID of the HR filter to apply.
        :param str filter_name: The name of the HR filter to apply.
        :param str unique_id: The unique ID of the human resource (crew).
        :param datetime reference_date: The reference date for filtering active crew.
        :param bool only_active_crew: Flag to search only active crew members (default false).
        :param bool only_active_records: Flag to search only active records (default false).
        :param str emp_number: The crew number
        :param list[str] request_data: Additional request data for filtering crew.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id', 'filter_name', 'unique_id', 'reference_date', 'only_active_crew', 'only_active_records', 'emp_number', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_id' in params:
            query_params.append(('FilterID', params['filter_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueID', params['unique_id']))  # noqa: E501
        if 'reference_date' in params:
            query_params.append(('ReferenceDate', params['reference_date']))  # noqa: E501
        if 'only_active_crew' in params:
            query_params.append(('OnlyActiveCrew', params['only_active_crew']))  # noqa: E501
        if 'only_active_records' in params:
            query_params.append(('OnlyActiveRecords', params['only_active_records']))  # noqa: E501
        if 'emp_number' in params:
            query_params.append(('empNumber', params['emp_number']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_addresses(self, emp_number, **kwargs):  # noqa: E501
        """Get addresses for a crew member by employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_addresses(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Address]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_addresses_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_addresses_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_addresses_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get addresses for a crew member by employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_addresses_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Address]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Address]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_bases(self, emp_number, **kwargs):  # noqa: E501
        """Get the bases associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_bases(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Base]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_bases_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_bases_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_bases_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the bases associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_bases_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Base]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_bases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_bases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/bases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Base]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_by_id(self, emp_number, **kwargs):  # noqa: E501
        """Get crew information by employe number and reference date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_by_id(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number . (required)
        :param list[str] request_data: Optional request data for filtering the response (default false).
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_by_id_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_by_id_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_by_id_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get crew information by employe number and reference date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_by_id_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number . (required)
        :param list[str] request_data: Optional request data for filtering the response (default false).
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_contracts(self, emp_number, **kwargs):  # noqa: E501
        """Get the contracts associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_contracts(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_contracts_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_contracts_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_contracts_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the contracts associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_contracts_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Contract]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_contracts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_contracts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/contracts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Contract]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_documents(self, emp_number, **kwargs):  # noqa: E501
        """Get the documents associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_documents(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Document]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_documents_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_documents_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_documents_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the documents associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_documents_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Document]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Document]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_emails(self, emp_number, **kwargs):  # noqa: E501
        """Get email addresses associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_emails(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Email]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_emails_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_emails_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_emails_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get email addresses associated with a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_emails_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Email]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_emails`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/emails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Email]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_phones(self, emp_number, **kwargs):  # noqa: E501
        """Get phone numbers for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_phones(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[PhoneOut]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_phones_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_phones_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_phones_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get phone numbers for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_phones_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[PhoneOut]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PhoneOut]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_qualifications(self, emp_number, **kwargs):  # noqa: E501
        """Get the qualifications for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_qualifications(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Qualification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_qualifications_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_qualifications_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_qualifications_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the qualifications for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_qualifications_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Qualification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_qualifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_qualifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/qualifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Qualification]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_ranks(self, emp_number, **kwargs):  # noqa: E501
        """Get the ranks of a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_ranks(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Rank]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_ranks_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_ranks_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_ranks_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the ranks of a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_ranks_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[Rank]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_ranks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_ranks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/ranks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Rank]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_revisions(self, emp_number, **kwargs):  # noqa: E501
        """Get the revisions for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_revisions(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :param int filter_id: The filter ID.
        :param str filter_name: The filter name.
        :param list[str] request_data: The list of fields to include in the request.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_revisions_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_revisions_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_revisions_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the revisions for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_revisions_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :param int filter_id: The filter ID.
        :param str filter_name: The filter name.
        :param list[str] request_data: The list of fields to include in the request.
        :return: list[Crew]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number', 'filter_id', 'filter_name', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []
        if 'filter_id' in params:
            query_params.append(('FilterId', params['filter_id']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('FilterName', params['filter_name']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('requestData', params['request_data']))  # noqa: E501
            collection_formats['requestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crew]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_special_roles(self, emp_number, **kwargs):  # noqa: E501
        """Get the special roles for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_special_roles(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[SpecialRoleOut]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_special_roles_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_special_roles_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_special_roles_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the special roles for a crew member identified by their employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_special_roles_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: list[SpecialRoleOut]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_special_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_special_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/special-roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SpecialRoleOut]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_get_crew_type(self, emp_number, **kwargs):  # noqa: E501
        """Get the crew type filtered by crew employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_type(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: CrewType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_get_crew_type_with_http_info(emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_get_crew_type_with_http_info(emp_number, **kwargs)  # noqa: E501
            return data

    def crew_get_crew_type_with_http_info(self, emp_number, **kwargs):  # noqa: E501
        """Get the crew type filtered by crew employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_get_crew_type_with_http_info(emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :return: CrewType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_get_crew_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_get_crew_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/crew-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrewType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_patch_crew_phones(self, body, emp_number, **kwargs):  # noqa: E501
        """Adds or updates phone numbers for a crew member identified by empNumber, phone type, priority (defaults to 0) and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_patch_crew_phones(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: The phone Number list to update (required)
        :param str emp_number: The crew member's employee number. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_patch_crew_phones_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_patch_crew_phones_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_patch_crew_phones_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Adds or updates phone numbers for a crew member identified by empNumber, phone type, priority (defaults to 0) and valid from/to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_patch_crew_phones_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: The phone Number list to update (required)
        :param str emp_number: The crew member's employee number. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_patch_crew_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_patch_crew_phones`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_patch_crew_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phones', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew(self, body, **kwargs):  # noqa: E501
        """Create or update existing crew based on information provided in the body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrewIn body: The crew information. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create or update existing crew based on information provided in the body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrewIn body: The crew information. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_addresses(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets addresses for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_addresses(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Address] body: The addresses to set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_addresses_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_addresses_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_addresses_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets addresses for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_addresses_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Address] body: The addresses to set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_addresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_addresses`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_addresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/addresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_bases(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the bases for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_bases(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Base] body: The bases to set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_bases_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_bases_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_bases_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the bases for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_bases_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Base] body: The bases to set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_bases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_bases`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_bases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/bases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_contracts_data(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the contract data for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_contracts_data(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContractsData body: The contract data to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_contracts_data_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_contracts_data_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_contracts_data_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the contract data for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_contracts_data_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContractsData body: The contract data to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_contracts_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_contracts_data`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_contracts_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/contracts-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_documents(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the documents for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_documents(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Document] body: The documents to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_documents_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_documents_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_documents_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the documents for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_documents_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Document] body: The documents to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_documents`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_emails(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets email addresses for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_emails(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Email] body: The collection of email addresses to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_emails_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_emails_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_emails_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets email addresses for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_emails_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Email] body: The collection of email addresses to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_emails`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_emails`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/emails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_phones(self, body, emp_number, **kwargs):  # noqa: E501
        """Add or updates the phone numbers for a crew member identified by employee number, phone type and priority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_phones(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: The phone numbers to be set or updated. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_phones_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_phones_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_phones_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Add or updates the phone numbers for a crew member identified by employee number, phone type and priority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_phones_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: The phone numbers to be set or updated. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_phones`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_qual_rank(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the qualification ranks for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_qual_rank(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualRank] body: The qualification ranks data to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_qual_rank_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_qual_rank_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_qual_rank_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the qualification ranks for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_qual_rank_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualRank] body: The qualification ranks data to be set for the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_qual_rank" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_qual_rank`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_qual_rank`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/qualrank', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_revision(self, emp_number, unique_id, **kwargs):  # noqa: E501
        """Sets a crew revision for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_revision(emp_number, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :param str unique_id: The unique ID of the crew revision. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_revision_with_http_info(emp_number, unique_id, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_revision_with_http_info(emp_number, unique_id, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_revision_with_http_info(self, emp_number, unique_id, **kwargs):  # noqa: E501
        """Sets a crew revision for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_revision_with_http_info(emp_number, unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emp_number: The crew number (required)
        :param str unique_id: The unique ID of the crew revision. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_number', 'unique_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_revision`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `crew_set_crew_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/revisions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_special_roles(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the special roles for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_special_roles(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SpecialRole] body: The special roles to be assigned to the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_special_roles_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_special_roles_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_special_roles_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Sets the special roles for a crew member identified by their employee number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_special_roles_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SpecialRole] body: The special roles to be assigned to the crew member. (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_special_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_special_roles`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_special_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/special-roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_crew_type(self, body, emp_number, **kwargs):  # noqa: E501
        """Create a crew type for an existing crew filtered by employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_type(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrewType body: The crew type (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_crew_type_with_http_info(body, emp_number, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_crew_type_with_http_info(body, emp_number, **kwargs)  # noqa: E501
            return data

    def crew_set_crew_type_with_http_info(self, body, emp_number, **kwargs):  # noqa: E501
        """Create a crew type for an existing crew filtered by employe number.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_crew_type_with_http_info(body, emp_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrewType body: The crew type (required)
        :param str emp_number: The crew number (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'emp_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_crew_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_crew_type`")  # noqa: E501
        # verify the required parameter 'emp_number' is set
        if ('emp_number' not in params or
                params['emp_number'] is None):
            raise ValueError("Missing the required parameter `emp_number` when calling `crew_set_crew_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_number' in params:
            path_params['empNumber'] = params['emp_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/{empNumber}/crew-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crew_set_external_crew(self, body, **kwargs):  # noqa: E501
        """Set external crew information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_external_crew(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ExternalCrew] body: The unique ID of the HR filter to apply. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crew_set_external_crew_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.crew_set_external_crew_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def crew_set_external_crew_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set external crew information based on specified filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crew_set_external_crew_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ExternalCrew] body: The unique ID of the HR filter to apply. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crew_set_external_crew" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crew_set_external_crew`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/crew/externalcrew', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
