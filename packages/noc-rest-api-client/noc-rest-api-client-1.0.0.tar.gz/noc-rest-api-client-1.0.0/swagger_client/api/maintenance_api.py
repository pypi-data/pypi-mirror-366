# coding: utf-8

"""
    RESTful.Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MaintenanceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def maintenance_delete_maintenance(self, start, end, type, airport_code, aircraft_registration, **kwargs):  # noqa: E501
        """Deletes vehicle reference activity records within the specified time range, type, airport code, and aircraft registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_delete_maintenance(start, end, type, airport_code, aircraft_registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: The valid from start date/time of range. (required)
        :param datetime end: The valid to end date/time of range. (required)
        :param str type: The Vehicle Ref Act Name or  Short Code. (required)
        :param str airport_code: The airport IATA or ICAO code associated with the maintenance. (required)
        :param str aircraft_registration: The aircraft registration number. (required)
        :param int unique_id: Vehicle Ref Act Unique id .
        :param str maintenance_type: The maintenance type : UNKNOWN, MAINTENANCE, VEHICLEREFERENCEACTIVITY. Only VEHCILEREFRENCEACTIVITY Supported.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maintenance_delete_maintenance_with_http_info(start, end, type, airport_code, aircraft_registration, **kwargs)  # noqa: E501
        else:
            (data) = self.maintenance_delete_maintenance_with_http_info(start, end, type, airport_code, aircraft_registration, **kwargs)  # noqa: E501
            return data

    def maintenance_delete_maintenance_with_http_info(self, start, end, type, airport_code, aircraft_registration, **kwargs):  # noqa: E501
        """Deletes vehicle reference activity records within the specified time range, type, airport code, and aircraft registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_delete_maintenance_with_http_info(start, end, type, airport_code, aircraft_registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: The valid from start date/time of range. (required)
        :param datetime end: The valid to end date/time of range. (required)
        :param str type: The Vehicle Ref Act Name or  Short Code. (required)
        :param str airport_code: The airport IATA or ICAO code associated with the maintenance. (required)
        :param str aircraft_registration: The aircraft registration number. (required)
        :param int unique_id: Vehicle Ref Act Unique id .
        :param str maintenance_type: The maintenance type : UNKNOWN, MAINTENANCE, VEHICLEREFERENCEACTIVITY. Only VEHCILEREFRENCEACTIVITY Supported.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'type', 'airport_code', 'aircraft_registration', 'unique_id', 'maintenance_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maintenance_delete_maintenance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `maintenance_delete_maintenance`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `maintenance_delete_maintenance`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `maintenance_delete_maintenance`")  # noqa: E501
        # verify the required parameter 'airport_code' is set
        if ('airport_code' not in params or
                params['airport_code'] is None):
            raise ValueError("Missing the required parameter `airport_code` when calling `maintenance_delete_maintenance`")  # noqa: E501
        # verify the required parameter 'aircraft_registration' is set
        if ('aircraft_registration' not in params or
                params['aircraft_registration'] is None):
            raise ValueError("Missing the required parameter `aircraft_registration` when calling `maintenance_delete_maintenance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'airport_code' in params:
            query_params.append(('AirportCode', params['airport_code']))  # noqa: E501
        if 'aircraft_registration' in params:
            query_params.append(('AircraftRegistration', params['aircraft_registration']))  # noqa: E501
        if 'unique_id' in params:
            query_params.append(('UniqueId', params['unique_id']))  # noqa: E501
        if 'maintenance_type' in params:
            query_params.append(('MaintenanceType', params['maintenance_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/maintenance', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maintenance_get_maintenance(self, **kwargs):  # noqa: E501
        """Get maintenance records within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_get_maintenance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The Maint Type or Vehicle Ref Act unique id (if specified then MaintenanceType is required).
        :param datetime _from: The valid from start date/time range.
        :param datetime to: The valid to end date/time range.
        :param str type: The Maint Type Name, Ref Act Name or the Ref Act Short Code.
        :param str station: The station short IATA or ICAO.
        :param str aircraft_registration: The aircraft registration number.
        :param str maintenance_type: The maintenance type :  UNKNOWN, MAINTENANCE, VEHICLEREFERENCEACTIVITY.
        :param list[str] request_data: Additional maintenance fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Maintenance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maintenance_get_maintenance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.maintenance_get_maintenance_with_http_info(**kwargs)  # noqa: E501
            return data

    def maintenance_get_maintenance_with_http_info(self, **kwargs):  # noqa: E501
        """Get maintenance records within the specified date range and optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_get_maintenance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unique_id: The Maint Type or Vehicle Ref Act unique id (if specified then MaintenanceType is required).
        :param datetime _from: The valid from start date/time range.
        :param datetime to: The valid to end date/time range.
        :param str type: The Maint Type Name, Ref Act Name or the Ref Act Short Code.
        :param str station: The station short IATA or ICAO.
        :param str aircraft_registration: The aircraft registration number.
        :param str maintenance_type: The maintenance type :  UNKNOWN, MAINTENANCE, VEHICLEREFERENCEACTIVITY.
        :param list[str] request_data: Additional maintenance fields to include in the response.
        :param int offset: The offset for paginated results (default 0).
        :param int limit: The limit for paginated results (default 1000).
        :return: list[Maintenance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_id', '_from', 'to', 'type', 'station', 'aircraft_registration', 'maintenance_type', 'request_data', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maintenance_get_maintenance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in params:
            query_params.append(('UniqueID', params['unique_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('To', params['to']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'station' in params:
            query_params.append(('Station', params['station']))  # noqa: E501
        if 'aircraft_registration' in params:
            query_params.append(('AircraftRegistration', params['aircraft_registration']))  # noqa: E501
        if 'maintenance_type' in params:
            query_params.append(('MaintenanceType', params['maintenance_type']))  # noqa: E501
        if 'request_data' in params:
            query_params.append(('RequestData', params['request_data']))  # noqa: E501
            collection_formats['RequestData'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/maintenance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Maintenance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maintenance_get_maintenance_by_external_ref_id(self, external_ref_id, **kwargs):  # noqa: E501
        """Get maintenance records by external reference id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_get_maintenance_by_external_ref_id(external_ref_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int external_ref_id: External Reference Id of a vehicle. (required)
        :param list[str] request_data: Additional maintenance fields to include in the response.
        :return: list[Maintenance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maintenance_get_maintenance_by_external_ref_id_with_http_info(external_ref_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maintenance_get_maintenance_by_external_ref_id_with_http_info(external_ref_id, **kwargs)  # noqa: E501
            return data

    def maintenance_get_maintenance_by_external_ref_id_with_http_info(self, external_ref_id, **kwargs):  # noqa: E501
        """Get maintenance records by external reference id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_get_maintenance_by_external_ref_id_with_http_info(external_ref_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int external_ref_id: External Reference Id of a vehicle. (required)
        :param list[str] request_data: Additional maintenance fields to include in the response.
        :return: list[Maintenance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_ref_id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maintenance_get_maintenance_by_external_ref_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_ref_id' is set
        if ('external_ref_id' not in params or
                params['external_ref_id'] is None):
            raise ValueError("Missing the required parameter `external_ref_id` when calling `maintenance_get_maintenance_by_external_ref_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_ref_id' in params:
            path_params['external_ref_id'] = params['external_ref_id']  # noqa: E501

        query_params = []
        if 'request_data' in params:
            query_params.append(('RequestData', params['request_data']))  # noqa: E501
            collection_formats['RequestData'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/maintenance/{external_ref_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Maintenance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maintenance_set_maintenance(self, body, **kwargs):  # noqa: E501
        """Sets or updates vehicle reference activity records using the provided data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_set_maintenance(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceIn body: The maintenance data to be set. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maintenance_set_maintenance_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.maintenance_set_maintenance_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def maintenance_set_maintenance_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sets or updates vehicle reference activity records using the provided data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maintenance_set_maintenance_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceIn body: The maintenance data to be set. (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maintenance_set_maintenance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `maintenance_set_maintenance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/nocrestapi/v1/maintenance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
