Metadata-Version: 2.4
Name: textlasso
Version: 0.1.3
Summary: Simple packege for working with LLM text responses and prompts.
Author-email: Aziz Nadirov <aziznadirov@yahoo.com>
Maintainer-email: Aziz Nadirov <aziznadirov@yahoo.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/AzizNadirov/textlasso
Project-URL: Repository, https://github.com/AzizNadirov/textlasso.git
Keywords: llm,text,crawl,extract,text-cleaning
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENCE
Requires-Dist: pandas>=2.3.1
Requires-Dist: xmltodict>=0.14.2
Dynamic: license-file

# TextLasso ü§†

[![PyPI version](https://badge.fury.io/py/textlasso.svg)](https://badge.fury.io/py/textlasso)
[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**TextLasso** is a simple Python library for extracting structured data from raw text, with special focus on processing LLM (Large Language Model) responses. Whether you're parsing JSON buried in markdown, extracting data from XML, or need to generate structured prompts for AI models, TextLasso has you covered.

## ‚ú® Key Features

- üéØ **Smart Text Extraction**: Extract structured data from messy text with multiple fallback strategies
- üßπ **LLM Response Cleaning**: Automatically clean code blocks, markdown artifacts, and formatting
- üèóÔ∏è **Dataclass Integration**: Convert raw text directly to Python dataclasses with type validation
- ü§ñ **AI Prompt Generation**: Generate structured prompts with schema validation and examples
- üìä **Multiple Formats**: Support for JSON, XML, and extensible to other formats
- üîß **Flexible Configuration**: Configurable error handling, logging, and validation modes
- üé® **Decorator Support**: Enhance existing functions with structured output capabilities

## üöÄ Quick Start

### Installation

```bash
pip install textlasso
```

### Basic Usage

#### Enhancing Prompts

```python
from dataclasses import dataclass
from textlasso import generate_structured_prompt, structured_output

# 1. Response Data Class
@dataclass
class Article:
    title_eng: str
    title_az: str
    content_eng: str
    content_az: str

@dataclass
class ResponseArticle:
    article: Article


original_prompt = "You are a professional copywriter-bot. Generate me an article"
enhanced_prompt = generate_structured_prompt(prompt=original_prompt, 
                                    schema=ResponseArticle, 
                                    strategy="xml")

# prompt
print(enhanced_prompt)   # <Prompt: schema='<class '__main__.ResponseArticle'>', strategy='xml', has_data='False'>
## enhanced prompt:
print(enhanced_prompt.prompt)
# You are a professional copywriter-bot. Generate me an article


# ## OUTPUT FORMAT REQUIREMENTS

# You must respond with a valid XML object that follows this exact structure:

# ### Schema: ResponseArticle
# - **article**: Object (Article) (required)
#   Fields:
#     - **title_eng**: str (required)
#     - **title_az**: str (required)
#     - **content_eng**: str (required)
#     - **content_az**: str (required)


# ### XML Format Rules:
# - Use proper XML syntax with opening and closing tags
# - Root element should match the main dataclass name
# - Use snake_case for element names
# - For arrays, repeat the element name for each item
# - Use self-closing tags for null/empty optional fields
# - Include all required fields as elements


# ## EXAMPLES

# Here are 2 examples of the expected XML format:

# ### Example 1:
# ```xml
# <response_article>
#   <article>
#     <title_eng>example_title_eng_1</title_eng>
#     <title_az>example_title_az_1</title_az>
#     <content_eng>example_content_eng_1</content_eng>
#     <content_az>example_content_az_1</content_az>
#   </article>
# </response_article>

# ```

# ### Example 2:
# ```xml
# <response_article>
#   <article>
#     <title_eng>example_title_eng_2</title_eng>
#     <title_az>example_title_az_2</title_az>
#     <content_eng>example_content_eng_2</content_eng>
#     <content_az>example_content_az_2</content_az>
#   </article>
# </response_article>

# ```

# Remember: Your response must be valid XML that matches the specified structure exactly.
```

If you have a prompt-returning function, you can use the `structured_output` decorator to automatically enhance it with structure requirements:

```python

@structured_output(ResponseArticle, "xml")
def get_prompt(title: str):
    return f"Hi, give me a article about {title}"

prompt = get_prompt("Agile Investing: Profiting from Current Tech Surges and Global Currency Dynamics")
```

Bot `generate_structured_prompt` and `structured_output` returns a `Prompt` object, which has a `prompt` attribute containing the enhanced prompt, `schema` attribute containing the dataclass, and `strategy` attribute containing the extraction strategy. 

**Extraction**: the best part - you can extract data using your `prompt` object, without having to worry about the structure requirements:

```python

# response_txt = some_llm.invoke(prompt.prompt)
response_txt = """Ofcourse here is the article: <response_article>
  <article>
    <title_eng>Agile Investing: Profiting from Current Tech Surges and Global Currency Dynamics</title_eng>
    <title_az>√áevik ƒ∞nvestisiya: Hazƒ±rkƒ± Texnologiya Artƒ±mlarƒ±ndan v…ô Qlobal Valyuta Dinamikalarƒ±ndan Faydalanma</title_az>
    <content_eng>
      Hello, aspiring investors! Invesbot here, ready to guide you through the ever-shifting landscape of finance. Today, we're diving into the exciting world of "agile investing," a strategy designed to help you thrive amidst current tech surges and dynamic global currency movements. Remember, investment is dynamic, so stay tuned!

      ## The Power of Agile Investing

      Traditional "buy-and-hold" strategies might be comforting, but in today's fast-paced markets, agility is key. Agile investing emphasizes flexibility and quick decision-making to respond to rapid market changes. It's about actively managing your portfolio and keenly understanding market conditions to capitalize on opportunities and mitigate risks.

      ### Key Principles of Agile Investing:

      *   **Active Management:** Forget setting it and forgetting it. Agile investing requires continuous monitoring of market trends.
      *   **Technical Analysis:** Use tools like moving averages and Bollinger Bands to identify optimal entry and exit points.
      *   **Diversification:** Spread your investments across different asset classes to reduce risk, especially in volatile markets.
      *   **Stop-Loss Orders:** Implement automated instructions to sell a security when it reaches a certain price, limiting potential losses.
      *   **Short Selling:** Profit from declining prices by borrowing shares, selling them high, and repurchasing them low.

      ## Navigating the Tech Surge: Where to Invest

      The technology sector continues its rapid evolution, fueled by advancements in Artificial Intelligence (AI), cybersecurity, climate tech, and more. The investment climate for frontier technologies has stabilized and, in many cases, rebounded in 2024, with levels of equity investment increasing in areas like cloud and edge computing, bioengineering, and space technologies. Worldwide spending on AI is projected to grow significantly, with a compound annual growth rate of 29% from 2024 to 2028.

      ### Hot Tech Sectors and Companies to Watch:

      *   **Artificial Intelligence (AI):** AI is powering innovation across industries, with significant investment in AI infrastructure. Hybrid AI, which combines various AI methodologies for more versatile systems, is moving beyond experimentation. Companies like Innodata are key in providing high-quality training data for generative AI systems.
      *   **Data Centers & Cloud Computing:** The expansion of data centers and public cloud services is a critical trend, driven by AI innovation. Global spending on public cloud services is projected to reach US$805 billion in 2024 and double by 2028.
      *   **Cybersecurity:** With escalating threats and a widening attack surface (IoT, generative AI, cloud computing), cybersecurity is a critical tech priority. The global cost of cybercrime is projected to reach US$10.5 trillion in 2025. The market for security products is also growing rapidly, expected to reach US$200 billion by 2028.
      *   **Quantum Computing:** This sector has seen an explosion of interest and significant rallies in emerging quantum stocks.
      *   **Semiconductors:** This industry has benefited from major corporate investments in AI infrastructure, and the "picks and shovels" phase of generative AI continues to favor semiconductor and hardware companies.
      *   **Sustainable Technologies/Climate Tech:** Solutions from carbon capture to energy-efficient building materials are gaining momentum, fueled by a growing focus on sustainable business and combating climate change.
      *   **Supply Chain Innovation:** Enhancing efficiency and transparency through digital freight-forwarding services and real-time tracking are key.

      For those looking at specific stocks, the "Magnificent Seven" (Apple, Microsoft, Alphabet, Amazon, NVIDIA, Meta Platforms, and either Tesla or Broadcom) continue to lead the market in innovation. Some of the best-performing tech stocks by one-year return as of July 2025 include Palantir Technologies (PLTR), MicroStrategy (MSTR), Fortinet (FTNT), Shopify (SHOP), Broadcom (AVGO), Zscaler (ZS), and Cisco Systems (CSCO).

      ## Understanding Global Currency Dynamics

      Currency fluctuations can significantly impact your investment returns, especially when investing globally. Changes in exchange rates can diminish or enhance your returns when converting foreign asset values back to your home currency. Even if your portfolio consists only of domestic shares, there can be indirect exposure to currency risk if those companies conduct significant international business.

      ### Factors Driving Currency Fluctuations:

      *   **Economic Strength:** Confidence in a country's economic prospects typically leads to increased demand for its currency, pushing its value up.
      *   **Interest Rates:** Higher interest rates can make investments in a country more attractive, drawing foreign capital and potentially increasing the domestic currency's value. However, very high interest rates can also slow economic growth.
      *   **Trade Balances:** A country with more exports than imports may see its currency appreciate due to higher demand for its goods and, consequently, its currency.
      *   **Political Environment and Market Sentiment:** Big global events, political instability, and overall investor attitude can create sudden currency swings.

      ### Strategies for Managing Currency Risk:

      *   **Hedging Techniques:** Use financial tools like forward contracts, currency futures, or options to lock in an exchange rate and reduce uncertainty.
      *   **Diversifying Currency Exposure:** Spread investments across different currencies. This way, the fall of one currency might be balanced by the rise of another.
      *   **Currency-Hedged Investment Vehicles:** Consider mutual funds or ETFs designed to automatically offset currency fluctuations.
      *   **Multi-Currency Accounts:** Holding different currencies can help manage exchange risk.
      *   **Stay Informed:** Use tools and apps to track currency trends and market news to make timely decisions.
      *   **Invest in Strong Economies/Stable Currencies:** Choosing countries with stable currencies and strong economies can reduce the impact of extreme fluctuations. Developed markets generally offer more currency stability.

      Agile investing in a world of tech surges and currency dynamics requires constant vigilance and quick decision-making. By understanding the underlying trends and employing smart strategies, you can position yourself to potentially turn market volatility into profitable opportunities. Stay informed, stay agile, and happy investing!
    </content_eng>
    <content_az>
      Salam, g…ôl…ôc…ôk investorlar! Qar≈üƒ±nƒ±zda ƒ∞nvesbot var, maliyy…ônin daim d…ôyi≈ü…ôn m…ônz…ôr…ôsind…ô siz…ô yol g√∂st…ôrm…ôy…ô hazƒ±ram. Bu g√ºn biz "√ßevik investisiya"nƒ±n maraqlƒ± d√ºnyasƒ±na ba≈ü vururuq; bu strategiya siz…ô m√∂vcud texnoloji inki≈üaflar v…ô dinamik qlobal valyuta h…ôr…ôk…ôtl…ôri fonunda uƒüur qazanmaƒüa k√∂m…ôk etm…ôk √º√ß√ºn n…ôz…ôrd…ô tutulub. Unutmayƒ±n, investisiya dinamikdir, ona g√∂r…ô d…ô bizi izl…ôyin!

      ## √áevik ƒ∞nvestisiyanƒ±n G√ºc√º

      ∆èn…ôn…ôvi "al-saxla" strategiyalarƒ± rahat ola bil…ôr, lakin m√ºasir s√ºr…ôtl…ô inki≈üaf ed…ôn bazarlarda √ßeviklik …ôsasdƒ±r. √áevik investisiya s√ºr…ôtli bazar d…ôyi≈üiklikl…ôrin…ô reaksiya verm…ôk √º√ß√ºn √ßevikliyi v…ô s√ºr…ôtli q…ôrar q…ôbul etm…ôyi vurƒüulayƒ±r. Bu, f√ºrs…ôtl…ôrd…ôn yararlanmaq v…ô riskl…ôri azaltmaq √º√ß√ºn portfelinizi aktiv ≈ü…ôkild…ô idar…ô etm…ôk v…ô bazar ≈ü…ôrtl…ôrini d…ôrind…ôn anlamaq dem…ôkdir.

      ### √áevik ƒ∞nvestisiyanƒ±n ∆èsas Prinsipl…ôri:

      *   **Aktiv ƒ∞dar…ôetm…ô:** Unudun ki, investisiyanƒ± bir d…ôf…ô qurub sonra yaddan √ßƒ±xarmaq olar. √áevik investisiya bazar tendensiyalarƒ±nƒ±n davamlƒ± izl…ônilm…ôsini t…ôl…ôb edir.
      *   **Texniki Analiz:** Optimal giri≈ü v…ô √ßƒ±xƒ±≈ü n√∂qt…ôl…ôrini m√º…ôyy…ôn etm…ôk √º√ß√ºn h…ôr…ôk…ôtli ortalamalar v…ô Bollinger Bantlarƒ± kimi al…ôtl…ôrd…ôn istifad…ô edin.
      *   **Diversifikasiya:** X√ºsusil…ô d…ôyi≈ük…ôn bazarlarda riski azaltmaq √º√ß√ºn investisiyalarƒ±nƒ±zƒ± m√ºxt…ôlif aktiv sinifl…ôrin…ô yayƒ±n.
      *   **Stop-Loss ∆èmrl…ôri:** Potensial itkil…ôri m…ôhdudla≈üdƒ±rmaq √º√ß√ºn qiym…ôt m√º…ôyy…ôn bir h…ôdd…ô √ßatdƒ±qda qiym…ôtli kaƒüƒ±zƒ± satmaq √º√ß√ºn avtomatla≈üdƒ±rƒ±lmƒ±≈ü t…ôlimatlar t…ôtbiq edin.
      *   **Qƒ±sa Satƒ±≈ü (Short Selling):** S…ôhml…ôri borc g√∂t√ºr…ôr…ôk, y√ºks…ôk qiym…ôt…ô sataraq v…ô a≈üaƒüƒ± qiym…ôt…ô yenid…ôn alaraq qiym…ôt d√º≈üm…ôl…ôrind…ôn qazanc …ôld…ô edin.

      ## Texnologiya Artƒ±mƒ± il…ô Naviqasiya: Harada ƒ∞nvestisiya Etm…ôli

      Texnologiya sektoru S√ºni ƒ∞ntellekt (AI), kiber t…ôhl√ºk…ôsizlik, iqlim texnologiyasƒ± v…ô dig…ôr sah…ôl…ôrd…ôki ir…ôlil…ôyi≈ül…ôrl…ô s√ºr…ôtli inki≈üafƒ±nƒ± davam etdirir. √ñnc√ºl texnologiyalar √º√ß√ºn investisiya iqlimi sabitl…ô≈üib v…ô bir √ßox hallarda 2024-c√º ild…ô b…ôrpa olunub, bulud v…ô k…ônar hesablama, bio-m√ºh…ôndislik v…ô kosmik texnologiyalar kimi sah…ôl…ôrd…ô s…ôhm investisiyalarƒ± artƒ±b. S√ºni ƒ∞ntellekt…ô qlobal x…ôrcl…ôrin 2024-c√º ild…ôn 2028-ci il…ô q…ôd…ôr 29% illik m√ºr…ôkk…ôb artƒ±m tempi il…ô …ôh…ômiyy…ôtli d…ôr…ôc…ôd…ô artacaƒüƒ± proqnozla≈üdƒ±rƒ±lƒ±r.

      ### ƒ∞zl…ônilm…ôsi Vacib Olan ƒ∞sti Texnologiya Sektorlarƒ± v…ô ≈ûirk…ôtl…ôr:

      *   **S√ºni ƒ∞ntellekt (AI):** AI s…ônayel…ôr √ºzr…ô innovasiyalara t…ôkan verir, AI infrastruktura …ôh…ômiyy…ôtli investisiyalar qoyulur. Daha √ßox y√∂nl√º sisteml…ôr √º√ß√ºn m√ºxt…ôlif AI metodologiyalarƒ±nƒ± birl…ô≈üdir…ôn Hibrid AI, eksperimentl…ôrd…ôn k…ônara √ßƒ±xƒ±r. Innodata kimi ≈üirk…ôtl…ôr generativ AI sisteml…ôri √º√ß√ºn y√ºks…ôk keyfiyy…ôtli t…ôlim m…ôlumatlarƒ± t…ômin etm…ôkd…ô …ôsas rol oynayƒ±r.
      *   **M…ôlumat M…ôrk…ôzl…ôri v…ô Bulud Hesablama:** M…ôlumat m…ôrk…ôzl…ôrinin v…ô ictimai bulud xidm…ôtl…ôrinin geni≈ül…ônm…ôsi, AI innovasiyasƒ± t…ôr…ôfind…ôn idar…ô olunan kritik bir tendensiyadƒ±r. ƒ∞ctimai bulud xidm…ôtl…ôrin…ô qlobal x…ôrcl…ôrin 2024-c√º ild…ô 805 milyard AB≈û dollarƒ±na √ßatacaƒüƒ± v…ô 2028-ci il…ô q…ôd…ôr ikiqat artacaƒüƒ± proqnozla≈üdƒ±rƒ±lƒ±r.
      *   **Kiber T…ôhl√ºk…ôsizlik:** Artan t…ôhdidl…ôr v…ô geni≈ül…ôn…ôn h√ºcum s…ôthi (IoT, generativ AI, bulud hesablama) il…ô kiber t…ôhl√ºk…ôsizlik kritik bir texnologiya prioritetidir. Kiber cinay…ôtkarlƒ±ƒüƒ±n qlobal x…ôrcinin 2025-ci ild…ô 10.5 trilyon AB≈û dollarƒ±na √ßatacaƒüƒ± proqnozla≈üdƒ±rƒ±lƒ±r. T…ôhl√ºk…ôsizlik m…ôhsullarƒ± bazarƒ± da s√ºr…ôtl…ô b√∂y√ºy√ºr, 2028-ci il…ô q…ôd…ôr 200 milyard AB≈û dollarƒ±na √ßatacaƒüƒ± g√∂zl…ônilir.
      *   **Kvant Komp√ºteri:** Bu sektor maraqda partlayƒ±≈ü v…ô ortaya √ßƒ±xan kvant s…ôhml…ôrind…ô …ôh…ômiyy…ôtli y√ºks…ôli≈ül…ôr g√∂r√ºb.
      *   **Yarƒ±mke√ßiricil…ôr:** Bu s…ônaye AI infrastrukturuna qoyulan …ôsas korporativ investisiyalardan faydalanƒ±b v…ô generativ AI-nin "k√ºr…ôk v…ô qazma" m…ôrh…ôl…ôsi yarƒ±mke√ßirici v…ô hardware ≈üirk…ôtl…ôrini d…ôst…ôkl…ôm…ôy…ô davam edir.
      *   **Davamlƒ± Texnologiyalar/ƒ∞qlim Texnologiyasƒ±:** Karbon tutulmasƒ±ndan enerji s…ôm…ôr…ôli tikinti materiallarƒ±na q…ôd…ôr h…ôll…ôr, davamlƒ± biznes…ô v…ô iqlim d…ôyi≈üikliyi il…ô m√ºbariz…ôy…ô artan diqq…ôt say…ôsind…ô s√ºr…ôt qazanƒ±r.
      *   **T…ôchizat Z…ônciri ƒ∞nnovasiyasƒ±:** R…ôq…ômsal y√ºkl…ôrin ekspeditor xidm…ôtl…ôri v…ô real-vaxt izl…ôm…ô vasit…ôsil…ô s…ôm…ôr…ôliliyin v…ô ≈ü…ôffaflƒ±ƒüƒ±n artƒ±rƒ±lmasƒ± …ôsasdƒ±r.

      M√º…ôyy…ôn s…ôhml…ôr…ô baxanlar √º√ß√ºn "M√∂ht…ô≈ü…ôm Yeddi" (Apple, Microsoft, Alphabet, Amazon, NVIDIA, Meta Platforms v…ô ya Tesla, ya da Broadcom) innovasiya sah…ôsind…ô bazara r…ôhb…ôrlik etm…ôy…ô davam edir. 2025-ci ilin iyul ayƒ±na olan m…ôlumata g√∂r…ô, bir illik g…ôlirl…ô …ôn yax≈üƒ± n…ôtic…ô g√∂st…ôr…ôn texnologiya s…ôhml…ôrind…ôn b…ôzil…ôri Palantir Technologies (PLTR), MicroStrategy (MSTR), Fortinet (FTNT), Shopify (SHOP), Broadcom (AVGO), Zscaler (ZS) v…ô Cisco Systems (CSCO)-dur.

      ## Qlobal Valyuta Dinamikalarƒ±nƒ± Anlamaq

      Valyuta d…ôyi≈ük…ônliyi, x√ºsusil…ô qlobal s…ôviyy…ôd…ô investisiya ed…ôrk…ôn, investisiya g…ôlirl…ôriniz…ô …ôh…ômiyy…ôtli d…ôr…ôc…ôd…ô t…ôsir g√∂st…ôr…ô bil…ôr. Valyuta m…ôz…ônn…ôl…ôrind…ôki d…ôyi≈üiklikl…ôr xarici aktiv d…ôy…ôrl…ôrini √∂z valyutanƒ±za √ßevir…ôrk…ôn g…ôlirl…ôrinizi azalda v…ô ya artƒ±ra bil…ôr. Portfeliniz yalnƒ±z yerli s…ôhml…ôrd…ôn ibar…ôt olsa bel…ô, h…ômin ≈üirk…ôtl…ôr …ôh…ômiyy…ôtli beyn…ôlxalq biznes f…ôaliyy…ôti g√∂st…ôrirs…ô, dolayƒ± valyuta riski m√∂vcud ola bil…ôr.

      ### Valyuta D…ôyi≈üiklikl…ôrin…ô T…ôsir Ed…ôn Faktorlar:

      *   **ƒ∞qtisadi G√ºc:** Bir √∂lk…ônin iqtisadi perspektivl…ôrin…ô inam, ad…ôt…ôn valyutasƒ±na t…ôl…ôbatƒ±n artmasƒ±na v…ô d…ôy…ôrinin y√ºks…ôlm…ôsin…ô s…ôb…ôb olur.
      *   **Faiz D…ôr…ôc…ôl…ôri:** Daha y√ºks…ôk faiz d…ôr…ôc…ôl…ôri bir √∂lk…ôd…ô investisiyalarƒ± daha c…ôlbedici ed…ô bil…ôr, xarici kapitalƒ± c…ôlb ed…ôr…ôk yerli valyutanƒ±n d…ôy…ôrini potensial olaraq artƒ±ra bil…ôr. Bununla bel…ô, √ßox y√ºks…ôk faiz d…ôr…ôc…ôl…ôri iqtisadi artƒ±mƒ± da l…ôngid…ô bil…ôr.
      *   **Ticar…ôt Balanslarƒ±:** ƒ∞xracatƒ± idxalatƒ±ndan √ßox olan bir √∂lk…ô, mallarƒ±na v…ô n…ôtic…ôd…ô valyutasƒ±na olan y√ºks…ôk t…ôl…ôbat s…ôb…ôbind…ôn valyutasƒ±nƒ±n d…ôy…ôr qazanmasƒ±na s…ôb…ôb ola bil…ôr.
      *   **Siyasi M√ºhit v…ô Bazar Duyƒüusu:** B√∂y√ºk qlobal hadis…ôl…ôr, siyasi qeyri-sabitlik v…ô √ºmumi investor m√ºnasib…ôti q…ôfil valyuta d…ôyi≈üiklikl…ôri yarada bil…ôr.

      ### Valyuta Riskini ƒ∞dar…ô Etm…ôk √º√ß√ºn Strategiyalar:

      *   **Hedcinq Texnikalarƒ±:** M√ºbadil…ô m…ôz…ônn…ôsini kilidl…ôm…ôk v…ô qeyri-m√º…ôyy…ônliyi azaltmaq √º√ß√ºn forvard m√ºqavil…ôl…ôri, valyuta fyu√ßersl…ôri v…ô ya opsionlar kimi maliyy…ô al…ôtl…ôrind…ôn istifad…ô edin.
      *   **Valyuta Ekspozisiyasƒ±nƒ±n Diversifikasiyasƒ±:** ƒ∞nvestisiyalarƒ± m√ºxt…ôlif valyutalara yayƒ±n. Bu yolla, bir valyutanƒ±n d√º≈üm…ôsi ba≈üqasƒ±nƒ±n y√ºks…ôlm…ôsi il…ô tarazla≈üdƒ±rƒ±la bil…ôr.
      *   **Valyuta Hedcinqli ƒ∞nvestisiya Vasit…ôl…ôri:** Valyuta d…ôyi≈ük…ônliyini avtomatik olaraq kompensasiya etm…ôk √º√ß√ºn n…ôz…ôrd…ô tutulmu≈ü qar≈üƒ±lƒ±qlƒ± fondlarƒ± v…ô ya ETF-l…ôri n…ôz…ôrd…ôn ke√ßirin.
      *   **√áox Valyutalƒ± Hesablar:** F…ôrqli valyutalarƒ± saxlamaq m√ºbadil…ô riskini idar…ô etm…ôy…ô k√∂m…ôk ed…ô bil…ôr.
      *   **M…ôlumatlƒ± Olun:** Vaxtƒ±nda q…ôrarlar q…ôbul etm…ôk √º√ß√ºn valyuta tendensiyalarƒ±nƒ± v…ô bazar x…ôb…ôrl…ôrini izl…ôm…ôk √º√ß√ºn al…ôtl…ôrd…ôn v…ô proqramlardan istifad…ô edin.
      *   **G√ºcl√º ƒ∞qtisadiyyatlara/Stabil Valyutalara ƒ∞nvestisiya Edin:** Stabil valyutalarƒ± v…ô g√ºcl√º iqtisadiyyatlarƒ± olan √∂lk…ôl…ôri se√ßm…ôk, ekstremal d…ôyi≈üiklikl…ôrin t…ôsirini azalda bil…ôr. ƒ∞nki≈üaf etmi≈ü bazarlar ad…ôt…ôn daha √ßox valyuta sabitliyi t…ôklif edir.

      Texnologiya inki≈üafƒ±nƒ±n v…ô valyuta dinamikasƒ±nƒ±n h√∂km s√ºrd√ºy√º bir d√ºnyada √ßevik investisiya daimi ayƒ±qlƒ±q v…ô s√ºr…ôtli q…ôrar q…ôbul etm…ôyi t…ôl…ôb edir. ∆èsas tendensiyalarƒ± ba≈üa d√º≈ü…ôr…ôk v…ô aƒüƒ±llƒ± strategiyalar t…ôtbiq ed…ôr…ôk, bazar d…ôyi≈ük…ônliyini g…ôlirli f√ºrs…ôtl…ôr…ô √ßevirm…ôk √º√ß√ºn √∂z√ºn√ºz√º m√∂vqel…ôndir…ô bil…ôrsiniz. M…ôlumatlƒ± qalƒ±n, √ßevik olun v…ô uƒüurlu investisiyalar!
    </content_az>
  </article>
</response_article>
I hope you liked it!
"""

# Yeah, big text... It is LLM response to our enhanced prompt. We are going to use this text to extract some information about the product.
print(data.article.title_az)
# "√áevik ƒ∞nvestisiya: Hazƒ±rkƒ± Texnologiya Artƒ±mlarƒ±ndan v…ô Qlobal Valyuta Dinamikalarƒ±ndan Faydalanma"
# 
``` 

## üìö Comprehensive Examples

### 1. Basic Text Extraction

#### JSON Extraction with Fallback Strategies

```python
from dataclasses import dataclass
from typing import List, Optional
from textlasso import extract

@dataclass
class Product:
    name: str
    price: float
    category: str
    in_stock: bool
    tags: Optional[List[str]] = None

# Works with clean JSON
clean_json = '{"name": "Laptop", "price": 999.99, "category": "Electronics", "in_stock": true}'

# Works with markdown-wrapped JSON
markdown_json = """
Here's your product data:
```json
{
    "name": "Wireless Headphones",
    "price": 199.99,
    "category": "Electronics", 
    "in_stock": false,
    "tags": ["wireless", "bluetooth", "noise-canceling"]
}
\```
"""

# Works with messy responses
messy_response = """
Let me extract that product information for you...

The product details are: {"name": "Smart Watch", "price": 299.99, "category": "Wearables", "in_stock": true}

Is this what you were looking for?
"""

# All of these work automatically
products = [
    extract(clean_json, Product, extract_strategy='json'),
    extract(markdown_json, Product, extract_strategy='json'), 
    extract(messy_response, Product, extract_strategy='json')
]

for product in products:
    print(f"{product.name}: ${product.price} ({'‚úÖ' if product.in_stock else '‚ùå'})")
```

#### XML Extraction

```python
from dataclasses import dataclass
from typing import List, Optional
from textlasso import extract

@dataclass 
class Address:
    street: str
    city: str
    country: str
    zip_code: Optional[str] = None
    
@dataclass
class ResponseAddress:
    address: Address

xml_data = """
<address>
    <street>123 Main St</street>
    <city>San Francisco</city>
    <country>USA</country>
    <zip_code>94102</zip_code>
</address>
"""

response_address = extract(xml_data, ResponseAddress, extract_strategy='xml')
print(f"Address: {response_address.address.street}, {response_address.address.city}, {response_address.address.country}")
# Address: 123 Main St, San Francisco, USA
```

### 2. Complex Nested Data Structures

```python
from dataclasses import dataclass
from typing import List, Optional
from enum import Enum

class Department(Enum):
    ENGINEERING = "engineering"
    MARKETING = "marketing" 
    SALES = "sales"
    HR = "hr"

@dataclass
class Employee:
    id: int
    name: str
    department: Department
    salary: float
    skills: List[str]
    manager_id: Optional[int] = None

@dataclass
class Company:
    name: str
    founded_year: int
    employees: List[Employee]
    headquarters: Address

complex_json = """
{
    "name": "TechCorp Inc",
    "founded_year": 2015,
    "headquarters": {
        "street": "100 Tech Plaza",
        "city": "Austin", 
        "country": "USA",
        "zip_code": "78701"
    },
    "employees": [
        {
            "id": 1,
            "name": "Sarah Chen", 
            "department": "engineering",
            "salary": 120000,
            "skills": ["Python", "React", "AWS"],
            "manager_id": null
        },
        {
            "id": 2,
            "name": "Mike Rodriguez",
            "department": "marketing", 
            "salary": 85000,
            "skills": ["SEO", "Content Strategy", "Analytics"],
            "manager_id": 1
        }
    ]
}
"""

company = extract(complex_json, Company, extract_strategy='json')
print(f"Company: {company.name} ({company.founded_year})")
print(f"HQ: {company.headquarters.city}, {company.headquarters.country}")
print(f"Employees: {len(company.employees)}")

for emp in company.employees:
    print(f"  - {emp.name} ({emp.department.value}): {', '.join(emp.skills)}")

# HQ: Austin, USA
# Employees: 2
#   - Sarah Chen (engineering): Python, React, AWS
#   - Mike Rodriguez (marketing): SEO, Content Strategy, Analytics
```

### 3. LLM Response Cleaning

```python
from textlasso.cleaners import clear_llm_res

# Clean various LLM response formats
messy_responses = [
    "\```json\\n{\"key\": \"value\"}\\n\```",
    "\```\\n{\"key\": \"value\"}\\n\```", 
    "Here's the data: {\"key\": \"value\"} hope it helps!",
    "\```xml\\n<root><item>data</item></root>\\n\```"
]

for response in messy_responses:
    clean_json = clear_llm_res(response, extract_strategy='json')
    clean_xml = clear_llm_res(response, extract_strategy='xml')
    print(f"Original: {response}")
    print(f"JSON cleaned: {clean_json}")
    print(f"XML cleaned: {clean_xml}")
    print("---")
```

### 4. Advanced Data Extraction with Configuration

```python
from textlasso import extract_from_dict
import logging

# Configure custom logging
logger = logging.getLogger("my_extractor")
logger.setLevel(logging.DEBUG)

@dataclass
class FlexibleData:
    required_field: str
    optional_field: Optional[str] = None
    number_field: int = 0

# Strict mode - raises errors on type mismatches
data_with_extra = {
    "required_field": "test",
    "optional_field": "optional", 
    "number_field": "123",  # String instead of int
    "extra_field": "ignored"  # Extra field
}

# Strict mode (default)
try:
    result_strict = extract_from_dict(
        data_with_extra, 
        FlexibleData,
        strict_mode=True,
        ignore_extra_fields=True,
        logger=logger
    )
    print("Strict mode result:", result_strict)
except Exception as e:
    print("Strict mode error:", e)

# Flexible mode - attempts conversion
result_flexible = extract_from_dict(
    data_with_extra,
    FlexibleData, 
    strict_mode=False,
    ignore_extra_fields=True,
    logger=logger
)
print("Flexible mode result:", result_flexible)
```

### 5. Structured Prompt Generation

#### Basic Prompt Generation

Prompt Generator(actually - builder) functions return `Prompt` object, which contains expected data structure, prompt and shortcut for data extraction.
- `prompt.prompt` - enhanced prompt;
- `prompt.prompt_original` - original prompt;
- `prompt.schema` - dataclass with expected structure;
- `prompt.strategy` - extraction strategy (json/xml);
- `prompt.extract("<text to extract>")` - extract data from prompt;
- `prompt.data` - initially is `None`, then `.extract()` overwrites it;
- `prompt.has_data()` - returns True if `prompt.prompt` contains data;


**Note:** `prompt.extract()` method is a shortcut for `textlasso.extract()` function.


```python
from textlasso import generate_structured_prompt

@dataclass
class UserFeedback:
    rating: int
    comment: str
    category: str
    recommended: bool
    issues: Optional[List[str]] = None

# Generate a structured prompt
prompt = generate_structured_prompt(
    prompt="Analyze this customer review and extract structured feedback",
    schema=UserFeedback,
    strategy="json",
    include_schema_description=True,
    example_count=2
)

print(prompt.prompt)
# Output:
# Analyze this customer review and extract structured feedback

# ## OUTPUT FORMAT REQUIREMENTS

# You must respond with a valid JSON object that follows this exact structure:

# ### Schema: UserFeedback
# - **rating**: int (required)
# - **comment**: str (required)
# - **category**: str (required)
# - **recommended**: bool (required)
# - **issues**: Array of str (optional)


# ### JSON Format Rules:
# - Use proper JSON syntax with double quotes for strings
# - Include all required fields
# - Use null for optional fields that are not provided
# - Arrays should contain objects matching the specified structure
# - Numbers should not be quoted
# - Booleans should be true/false (not quoted)


# ## EXAMPLES

# Here are 2 examples of the expected JSON format:

# ### Example 1:
# ```json
# {
#   "rating": 1,
#   "comment": "example_comment_1",
#   "category": "example_category_1",
#   "recommended": true,
#   "issues": [
#     "example_issues_item_1",
#     "example_issues_item_2"
#   ]
# }
# ```

# ### Example 2:
# ```json
# {
#   "rating": 2,
#   "comment": "example_comment_2",
#   "category": "example_category_2",
#   "recommended": false,
#   "issues": [
#     "example_issues_item_1",
#     "example_issues_item_2",
#     "example_issues_item_3"
#   ]
# }
# ```

# Remember: Your response must be valid JSON that matches the specified structure exactly.
```

#### Using the Decorator for Function Enhancement
If you have a prompt returning functions, you can use the `@structured_output` decorator to automatically enhance your prompts with structure requirements.

```python
from dataclasses import dataclass
from typing import Optional, List

from textlasso import structured_output

@dataclass
class NewsArticle:
    title: str
    summary: str
    category: str
    sentiment: str
    key_points: List[str]
    publication_date: Optional[str] = None

# decorate prompt-returning function
@structured_output(schema=NewsArticle, strategy="xml", example_count=1)
def create_article_analysis_prompt(article_text: str) -> str:
    return f"""
    Analyze the following news article and extract key information:
    
    Article: {article_text}
    
    Please provide a comprehensive analysis focusing on the main themes,
    sentiment, and key takeaways.
    """

# The decorator automatically enhances your prompt with structure requirements
article_text = "Breaking: New AI breakthrough announced by researchers..."
enhanced_prompt = create_article_analysis_prompt(article_text)

# This prompt now includes schema definitions, examples, and format requirements
print("Enhanced prompt: ", enhanced_prompt.prompt)

# Enhanced prompt:  
#     Analyze the following news article and extract key information:
    
#     Article: Breaking: New AI breakthrough announced by researchers...
    
#     Please provide a comprehensive analysis focusing on the main themes,
#     sentiment, and key takeaways.
    


# ## OUTPUT FORMAT REQUIREMENTS

# You must respond with a valid XML object that follows this exact structure:

# ### Schema: NewsArticle
# - **title**: str (required)
# - **summary**: str (required)
# - **category**: str (required)
# - **sentiment**: str (required)
# - **key_points**: Array of str (required)
# - **publication_date**: str (optional)


# ### XML Format Rules:
# - Use proper XML syntax with opening and closing tags
# - Root element should match the main dataclass name
# - Use snake_case for element names
# - For arrays, repeat the element name for each item
# - Use self-closing tags for null/empty optional fields
# - Include all required fields as elements
```

### 6. Real-World Use Cases

#### Processing Survey Responses

```python
@dataclass
class SurveyResponse:
    respondent_id: str
    age_group: str
    satisfaction_rating: int
    feedback: str
    would_recommend: bool
    improvement_areas: List[str]

# Simulating LLM processing of survey data
llm_survey_output = """
Based on the survey response, here's the extracted data:

\```json
{
    "respondent_id": "RESP_001",
    "age_group": "25-34", 
    "satisfaction_rating": 4,
    "feedback": "Great service overall, but could improve response time",
    "would_recommend": true,
    "improvement_areas": ["response_time", "pricing"]
}
\```

This response indicates positive sentiment with specific improvement suggestions.
"""

survey = extract(llm_survey_output, SurveyResponse, extract_strategy='json')
print(survey)
# SurveyResponse(respondent_id='RESP_001', age_group='25-34', satisfaction_rating=4, feedback='Great service overall, but could improve response time', would_recommend=True, improvement_areas=['response_time', 'pricing'])
```

#### E-commerce Product Extraction

```python
@dataclass
class ProductReview:
    product_id: str
    reviewer_name: str
    rating: int
    review_text: str
    verified_purchase: bool
    helpful_votes: int
    review_date: str

@structured_output(schema=ProductReview, strategy="xml")
def create_review_extraction_prompt(raw_review: str) -> str:
    return f"""
        Extract structured information from this product review:
        
        {raw_review}
        
        Pay attention to implicit ratings, sentiment, and any verification indicators. 
        """

raw_review = """
    ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ Amazing headphones! by John D. (Verified Purchase) - March 15, 2024
    These headphones exceeded my expectations. Great sound quality and comfortable fit.
    Battery life could be better but overall very satisfied. Would definitely buy again!
    üëç 47 people found this helpful
    """

extraction_prompt = create_review_extraction_prompt(raw_review)
# Send this prompt to your LLM, then extract the response:
# llm = some LLM model
llm_response = llm.invoke(extraction_prompt.prompt)
review = extract(llm_response, ProductReview, extract_strategy='xml')
# or
extraction_prompt.extract(llm_response)
```

## üîß Configuration Options

### Extraction Configuration

```python
from textlasso import extract_from_dict
import logging

# Configure extraction behavior
result = extract_from_dict(
    data_dict=your_data,
    target_class=YourDataClass,
    strict_mode=False,          # Allow type conversions
    ignore_extra_fields=True,   # Ignore unknown fields
    logger=custom_logger,       # Custom logging
    log_level=logging.DEBUG     # Detailed logging
)
```

### Prompt Generation Configuration

```python
from textlasso import generate_structured_prompt

prompt = generate_structured_prompt(
    prompt="Your base prompt",
    schema=YourSchema,
    strategy="json",                    # or "xml"
    include_schema_description=True,    # Include field descriptions
    example_count=3                     # Number of examples (1-3)
)
```

## üìñ API Reference

### Core Functions

#### `extract(text, target_class, extract_strategy='json')`
Extract structured data from text.

**Parameters:**
- `text` (str): Raw text containing data to extract
- `target_class` (type): Dataclass to convert data into
- `extract_strategy` (Literal['json', 'xml']): Extraction strategy

**Returns:** Instance of `target_class`

#### `extract_from_dict(data_dict, target_class, **options)`
Convert dictionary to dataclass with advanced options.

#### `generate_structured_prompt(prompt, schema, strategy, **options)`
Generate enhanced prompts with structure requirements.

### Decorators

#### `@structured_output(schema, strategy='json', **options)`
Enhance prompt functions with structured output requirements.

#### `@chain_prompts(*prompt_funcs, separator='\n\n---\n\n')`
Chain multiple prompt functions together.

#### `@prompt_cache(maxsize=128)`
Cache prompt results for better performance.

### Utilities

#### `clear_llm_res(text, extract_strategy)`
Clean LLM responses by removing code blocks and formatting.

## ü§ù Contributing

We welcome contributions! Here's how to get started:

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make your changes and add tests
4. Run tests: `pytest`
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Built for the AI/LLM community
- Inspired by the need for robust text processing in AI applications
- Special thanks to all contributors and users

## üìû Support

- üìß Email: aziznadirov@yahoo.com
- üêõ Issues: [GitHub Issues](https://github.com/AzizNadirov/textlasso/issues)

---

**TextLasso** - Wrangle your text data with ease! ü§†
