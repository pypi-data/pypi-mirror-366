[project]
name = "fastapi-secure-errors"
version = "0.1.2"
description = "Security-first HTTP error handling for FastAPI."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Ryan Mullins", email = "" }
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.116.1",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["fastapi", "security", "error-handling", "http", "api"]

[project.urls]
Homepage = "https://github.com/ciscomonkey/fastapi-secure-errors"
Repository = "https://github.com/ciscomonkey/fastapi-secure-errors"
Issues = "https://github.com/ciscomonkey/fastapi-secure-errors/issues"
Changelog = "https://github.com/ciscomonkey/fastapi-secure-errors/releases"

[project.scripts]
fastapi-secure-errors = "fastapi_secure_errors:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "fastapi[standard]>=0.116.1",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.0.0",
    "httpx>=0.25.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--showlocals",
    "-v"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: marks tests as async (deselect with '-m \"not asyncio\"')"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "examples/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
