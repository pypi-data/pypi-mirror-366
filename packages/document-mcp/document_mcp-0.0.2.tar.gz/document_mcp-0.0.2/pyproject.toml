[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"



[project]
name = "document-mcp"
version = "0.0.2"
authors = [
  { name="clchinkc" },
]
description = "A MCP server for managing structured Markdown documents"
readme = "README.md"
requires-python = ">=3.10"
keywords = ["mcp", "document", "management"]
license = "MIT"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
dependencies = [
    # Core MCP framework  
    "mcp[cli]>=1.0.0",
    "python-dotenv>=1.0.0",
    
    # Web framework for OpenTelemetry metrics collection
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.21.0",
    
    # AI and ML dependencies
    "pydantic-ai>=0.0.14",
    "google-generativeai>=0.8.3",
    "openai",
    "numpy>=1.24.0",
    
    # HTTP client
    "requests>=2.28.0",
    
    # OpenTelemetry stack for automatic usage analytics
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation>=0.42b0",
    "opentelemetry-exporter-prometheus>=0.55b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.35.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-requests>=0.42b0",
    "python-snappy>=0.7.3",
]

[project.optional-dependencies]
dev = [
    # Core testing framework
    "pytest>=7.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-env>=0.5.2",
    "pytest-xdist>=3.7.0",  # Parallel test execution
    "pytest-timeout>=2.1.0",  # Test timeout protection
    "pytest-benchmark>=4.0.0",  # Performance benchmarking
    
    # Code quality and formatting
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    
    # Performance monitoring
    "memory-profiler>=0.60.0",  # For memory profiling tests
    "psutil>=5.9.0",  # For system resource monitoring
    
    # Development utilities (agents run separately from source)
]

[project.urls]
"Homepage" = "https://github.com/document-mcp/document-mcp"
"Bug Tracker" = "https://github.com/document-mcp/document-mcp/issues"

[project.scripts]
"document-mcp" = "document_mcp.doc_tool_server:main"

[tool.setuptools]
packages = [
    "document_mcp", 
    "document_mcp.config",
    "document_mcp.models",
    "document_mcp.tools", 
    "document_mcp.utils"
]

[tool.setuptools.package-data]
document_mcp = ["*.ini"]

# Ruff configuration
[tool.ruff]
line-length = 110
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "E722", # Bare except (used in error handling patterns)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["document_mcp", "src"]
force-single-line = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration (kept for advanced type checking)
[tool.mypy]
python_version = "3.10"
exclude = "build/"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true



 