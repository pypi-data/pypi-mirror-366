# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
The IDS peak genericAPI is a library that unites GenTL and GenApi. In some places, it also introduces some extra functionality.
The purpose of this extra functionality is to increase the usability and comfort of the standard GenAPI.
"""

from sys import version_info as _swig_python_version_info

from ids_peak.ids_peak import Buffer
from ids_peak_ipl.ids_peak_ipl import Image

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ids_peak_ipl_python_extension
else:
    import _ids_peak_ipl_python_extension


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import ids_peak
import ids_peak_ipl

def BufferToImage(buffer: "Buffer") -> "Image":
    r"""
    Converts a Buffer into a Image.

    This creates a Image as a shallow copy of the buffer (i.e. using the same memory).
    :type buffer: Buffer, in
    :param buffer: The buffer to convert
    :rtype: Image
    :return: The buffer converted to an Image.
    Remarks: Remember that the buffer's memory is only under your control until you re-queue the buffer.
    """
    return _ids_peak_ipl_python_extension.BufferToImage(buffer)

def BufferPartToImage(part: "BufferPart") -> "Image":
    r"""
    Converts a BufferPart into a Image.

    This creates a Image as a shallow copy of the buffer (i.e. using the same memory).

    :type part: BufferPart, in
    :param part: The buffer part to convert
    :rtype: Image
    :return: The buffer part converted to an Image.
    Remarks: Remember that the buffer part's memory is only under your control until you re-queue the buffer.

    Since: 1.8
    """
    return _ids_peak_ipl_python_extension.BufferPartToImage(part)

