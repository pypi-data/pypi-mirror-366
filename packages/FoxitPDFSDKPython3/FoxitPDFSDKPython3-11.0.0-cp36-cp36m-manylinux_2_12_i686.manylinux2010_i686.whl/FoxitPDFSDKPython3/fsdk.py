# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fsdk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fsdk')
    _fsdk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fsdk', [dirname(__file__)])
        except ImportError:
            import _fsdk
            return _fsdk
        try:
            _mod = imp.load_module('_fsdk', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fsdk = swig_import_helper()
    del swig_import_helper
else:
    import _fsdk
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


TRUE = _fsdk.TRUE
FALSE = _fsdk.FALSE
class WStringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WStringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WStringArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_WStringArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_WStringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.WStringArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.WStringArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.WStringArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.WStringArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.WStringArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.WStringArray_RemoveAll(self, *args)
WStringArray_swigregister = _fsdk.WStringArray_swigregister
WStringArray_swigregister(WStringArray)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_StringArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_StringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.StringArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.StringArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.StringArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.StringArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.StringArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.StringArray_RemoveAll(self, *args)
StringArray_swigregister = _fsdk.StringArray_swigregister
StringArray_swigregister(StringArray)

e_ErrSuccess = _fsdk.e_ErrSuccess
e_ErrFile = _fsdk.e_ErrFile
e_ErrFormat = _fsdk.e_ErrFormat
e_ErrPassword = _fsdk.e_ErrPassword
e_ErrHandle = _fsdk.e_ErrHandle
e_ErrCertificate = _fsdk.e_ErrCertificate
e_ErrUnknown = _fsdk.e_ErrUnknown
e_ErrInvalidLicense = _fsdk.e_ErrInvalidLicense
e_ErrParam = _fsdk.e_ErrParam
e_ErrUnsupported = _fsdk.e_ErrUnsupported
e_ErrOutOfMemory = _fsdk.e_ErrOutOfMemory
e_ErrSecurityHandler = _fsdk.e_ErrSecurityHandler
e_ErrNotParsed = _fsdk.e_ErrNotParsed
e_ErrNotFound = _fsdk.e_ErrNotFound
e_ErrInvalidType = _fsdk.e_ErrInvalidType
e_ErrConflict = _fsdk.e_ErrConflict
e_ErrUnknownState = _fsdk.e_ErrUnknownState
e_ErrDataNotReady = _fsdk.e_ErrDataNotReady
e_ErrInvalidData = _fsdk.e_ErrInvalidData
e_ErrXFALoadError = _fsdk.e_ErrXFALoadError
e_ErrNotLoaded = _fsdk.e_ErrNotLoaded
e_ErrInvalidState = _fsdk.e_ErrInvalidState
e_ErrNotCDRM = _fsdk.e_ErrNotCDRM
e_ErrCanNotConnectToServer = _fsdk.e_ErrCanNotConnectToServer
e_ErrInvalidUserToken = _fsdk.e_ErrInvalidUserToken
e_ErrNoRights = _fsdk.e_ErrNoRights
e_ErrRightsExpired = _fsdk.e_ErrRightsExpired
e_ErrDeviceLimitation = _fsdk.e_ErrDeviceLimitation
e_ErrCanNotRemoveSecurityFromServer = _fsdk.e_ErrCanNotRemoveSecurityFromServer
e_ErrCanNotGetACL = _fsdk.e_ErrCanNotGetACL
e_ErrCanNotSetACL = _fsdk.e_ErrCanNotSetACL
e_ErrIsAlreadyCPDF = _fsdk.e_ErrIsAlreadyCPDF
e_ErrIsAlreadyCDRM = _fsdk.e_ErrIsAlreadyCDRM
e_ErrCanNotUploadDocInfo = _fsdk.e_ErrCanNotUploadDocInfo
e_ErrCanNotUploadCDRMInfo = _fsdk.e_ErrCanNotUploadCDRMInfo
e_ErrInvalidWrapper = _fsdk.e_ErrInvalidWrapper
e_ErrCanNotGetClientID = _fsdk.e_ErrCanNotGetClientID
e_ErrCanNotGetUserToken = _fsdk.e_ErrCanNotGetUserToken
e_ErrInvalidACL = _fsdk.e_ErrInvalidACL
e_ErrInvalidClientID = _fsdk.e_ErrInvalidClientID
e_ErrOCREngineNotInit = _fsdk.e_ErrOCREngineNotInit
e_ErrDiskFull = _fsdk.e_ErrDiskFull
e_ErrOCRTrialIsEnd = _fsdk.e_ErrOCRTrialIsEnd
e_ErrFilePathNotExist = _fsdk.e_ErrFilePathNotExist
e_ErrComplianceEngineNotInit = _fsdk.e_ErrComplianceEngineNotInit
e_ErrComplianceEngineInvalidUnlockCode = _fsdk.e_ErrComplianceEngineInvalidUnlockCode
e_ErrComplianceEngineInitFailed = _fsdk.e_ErrComplianceEngineInitFailed
e_ErrTimeStampServerMgrNotInit = _fsdk.e_ErrTimeStampServerMgrNotInit
e_ErrLTVVerifyModeNotSet = _fsdk.e_ErrLTVVerifyModeNotSet
e_ErrLTVRevocationCallbackNotSet = _fsdk.e_ErrLTVRevocationCallbackNotSet
e_ErrLTVCannotSwitchVersion = _fsdk.e_ErrLTVCannotSwitchVersion
e_ErrLTVCannotCheckDTS = _fsdk.e_ErrLTVCannotCheckDTS
e_ErrLTVCannotLoadDSS = _fsdk.e_ErrLTVCannotLoadDSS
e_ErrLTVCannotLoadDTS = _fsdk.e_ErrLTVCannotLoadDTS
e_ErrNeedSigned = _fsdk.e_ErrNeedSigned
e_ErrComplianceResourceFile = _fsdk.e_ErrComplianceResourceFile
e_ErrTimeStampServerMgrNoDefaltServer = _fsdk.e_ErrTimeStampServerMgrNoDefaltServer
e_ErrDefaultTimeStampServer = _fsdk.e_ErrDefaultTimeStampServer
e_ErrNoConnectedPDFModuleRight = _fsdk.e_ErrNoConnectedPDFModuleRight
e_ErrNoXFAModuleRight = _fsdk.e_ErrNoXFAModuleRight
e_ErrNoRedactionModuleRight = _fsdk.e_ErrNoRedactionModuleRight
e_ErrNoRMSModuleRight = _fsdk.e_ErrNoRMSModuleRight
e_ErrNoOCRModuleRight = _fsdk.e_ErrNoOCRModuleRight
e_ErrNoComparisonModuleRight = _fsdk.e_ErrNoComparisonModuleRight
e_ErrNoComplianceModuleRight = _fsdk.e_ErrNoComplianceModuleRight
e_ErrNoOptimizerModuleRight = _fsdk.e_ErrNoOptimizerModuleRight
e_ErrNoConversionModuleRight = _fsdk.e_ErrNoConversionModuleRight
e_ErrOfficeComNotInit = _fsdk.e_ErrOfficeComNotInit
e_ErrNoMicroOfficeInstalled = _fsdk.e_ErrNoMicroOfficeInstalled
e_ErrExcelHasNoContent = _fsdk.e_ErrExcelHasNoContent
e_ErrNoLayoutRecognitionModuleRight = _fsdk.e_ErrNoLayoutRecognitionModuleRight
e_ErrWPSEngineNotFound = _fsdk.e_ErrWPSEngineNotFound
e_ErrLibreofficeEngineNotFound = _fsdk.e_ErrLibreofficeEngineNotFound
e_ErrNoAccessibilityModuleRight = _fsdk.e_ErrNoAccessibilityModuleRight
e_ErrODAEngineNotFound = _fsdk.e_ErrODAEngineNotFound
e_ErrNoTableMakerModuleRight = _fsdk.e_ErrNoTableMakerModuleRight
e_ErrNoDWG2PDFModuleRight = _fsdk.e_ErrNoDWG2PDFModuleRight
e_ErrNoAdvEditModuleRight = _fsdk.e_ErrNoAdvEditModuleRight
e_ErrNoPDF2OfficeModuleRight = _fsdk.e_ErrNoPDF2OfficeModuleRight
e_ErrURLInBlackList = _fsdk.e_ErrURLInBlackList
e_ErrOFDEngineNotInit = _fsdk.e_ErrOFDEngineNotInit
e_ErrNoOFDModuleRight = _fsdk.e_ErrNoOFDModuleRight
e_ErrNo3DModuleRight = _fsdk.e_ErrNo3DModuleRight
e_ErrInvalidRegex = _fsdk.e_ErrInvalidRegex
e_ErrNoDocumentPermission = _fsdk.e_ErrNoDocumentPermission
e_ErrNoOffice2PDFModuleRight = _fsdk.e_ErrNoOffice2PDFModuleRight
e_ErrMIPUPEEngineInitFailed = _fsdk.e_ErrMIPUPEEngineInitFailed
e_ErrMIPProtectionEngineInitFailed = _fsdk.e_ErrMIPProtectionEngineInitFailed
e_ErrMIPCreateProtectionHandlerFailed = _fsdk.e_ErrMIPCreateProtectionHandlerFailed
e_ErrMIPGetExtendedLabelInfoByIdFailed = _fsdk.e_ErrMIPGetExtendedLabelInfoByIdFailed
e_ErrNoPrint2PDFModuleRight = _fsdk.e_ErrNoPrint2PDFModuleRight
e_ErrResponseDataError = _fsdk.e_ErrResponseDataError
e_ErrTimeout = _fsdk.e_ErrTimeout
e_ErrNoImageObject = _fsdk.e_ErrNoImageObject
class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_Base
    __del__ = lambda self: None
Base_swigregister = _fsdk.Base_swigregister
Base_swigregister(Base)

class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __repr__ = _swig_repr
    if _newclass:
        GetUTCTime = staticmethod(_fsdk.DateTime_GetUTCTime)
    else:
        GetUTCTime = _fsdk.DateTime_GetUTCTime
    if _newclass:
        GetLocalTime = staticmethod(_fsdk.DateTime_GetLocalTime)
    else:
        GetLocalTime = _fsdk.DateTime_GetLocalTime

    def __init__(self, *args):
        this = _fsdk.new_DateTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.DateTime_Set(self, *args)

    def IsValid(self, *args):
        return _fsdk.DateTime_IsValid(self, *args)

    def __eq__(self, *args):
        return _fsdk.DateTime___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.DateTime___ne__(self, *args)

    def __gt__(self, *args):
        return _fsdk.DateTime___gt__(self, *args)

    def __ge__(self, *args):
        return _fsdk.DateTime___ge__(self, *args)

    def __lt__(self, *args):
        return _fsdk.DateTime___lt__(self, *args)

    def __le__(self, *args):
        return _fsdk.DateTime___le__(self, *args)

    def ToLocalTime(self, *args):
        return _fsdk.DateTime_ToLocalTime(self, *args)

    def ToUTCTime(self, *args):
        return _fsdk.DateTime_ToUTCTime(self, *args)
    __swig_setmethods__["year"] = _fsdk.DateTime_year_set
    __swig_getmethods__["year"] = _fsdk.DateTime_year_get
    if _newclass:
        year = _swig_property(_fsdk.DateTime_year_get, _fsdk.DateTime_year_set)
    __swig_setmethods__["month"] = _fsdk.DateTime_month_set
    __swig_getmethods__["month"] = _fsdk.DateTime_month_get
    if _newclass:
        month = _swig_property(_fsdk.DateTime_month_get, _fsdk.DateTime_month_set)
    __swig_setmethods__["day"] = _fsdk.DateTime_day_set
    __swig_getmethods__["day"] = _fsdk.DateTime_day_get
    if _newclass:
        day = _swig_property(_fsdk.DateTime_day_get, _fsdk.DateTime_day_set)
    __swig_setmethods__["hour"] = _fsdk.DateTime_hour_set
    __swig_getmethods__["hour"] = _fsdk.DateTime_hour_get
    if _newclass:
        hour = _swig_property(_fsdk.DateTime_hour_get, _fsdk.DateTime_hour_set)
    __swig_setmethods__["minute"] = _fsdk.DateTime_minute_set
    __swig_getmethods__["minute"] = _fsdk.DateTime_minute_get
    if _newclass:
        minute = _swig_property(_fsdk.DateTime_minute_get, _fsdk.DateTime_minute_set)
    __swig_setmethods__["second"] = _fsdk.DateTime_second_set
    __swig_getmethods__["second"] = _fsdk.DateTime_second_get
    if _newclass:
        second = _swig_property(_fsdk.DateTime_second_get, _fsdk.DateTime_second_set)
    __swig_setmethods__["milliseconds"] = _fsdk.DateTime_milliseconds_set
    __swig_getmethods__["milliseconds"] = _fsdk.DateTime_milliseconds_get
    if _newclass:
        milliseconds = _swig_property(_fsdk.DateTime_milliseconds_get, _fsdk.DateTime_milliseconds_set)
    __swig_setmethods__["utc_hour_offset"] = _fsdk.DateTime_utc_hour_offset_set
    __swig_getmethods__["utc_hour_offset"] = _fsdk.DateTime_utc_hour_offset_get
    if _newclass:
        utc_hour_offset = _swig_property(_fsdk.DateTime_utc_hour_offset_get, _fsdk.DateTime_utc_hour_offset_set)
    __swig_setmethods__["utc_minute_offset"] = _fsdk.DateTime_utc_minute_offset_set
    __swig_getmethods__["utc_minute_offset"] = _fsdk.DateTime_utc_minute_offset_get
    if _newclass:
        utc_minute_offset = _swig_property(_fsdk.DateTime_utc_minute_offset_get, _fsdk.DateTime_utc_minute_offset_set)
    __swig_destroy__ = _fsdk.delete_DateTime
    __del__ = lambda self: None
DateTime_swigregister = _fsdk.DateTime_swigregister
DateTime_swigregister(DateTime)

def DateTime_GetUTCTime(*args):
    return _fsdk.DateTime_GetUTCTime(*args)
DateTime_GetUTCTime = _fsdk.DateTime_GetUTCTime

def DateTime_GetLocalTime(*args):
    return _fsdk.DateTime_GetLocalTime(*args)
DateTime_GetLocalTime = _fsdk.DateTime_GetLocalTime

class Exception(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Exception
    __del__ = lambda self: None

    def GetErrCode(self, *args):
        return _fsdk.Exception_GetErrCode(self, *args)

    def GetMessage(self, *args):
        return _fsdk.Exception_GetMessage(self, *args)

    def GetName(self, *args):
        return _fsdk.Exception_GetName(self, *args)
Exception_swigregister = _fsdk.Exception_swigregister
Exception_swigregister(Exception)

e_Rotation0 = _fsdk.e_Rotation0
e_Rotation90 = _fsdk.e_Rotation90
e_Rotation180 = _fsdk.e_Rotation180
e_Rotation270 = _fsdk.e_Rotation270
e_RotationUnknown = _fsdk.e_RotationUnknown
e_RotationPointCenter = _fsdk.e_RotationPointCenter
e_RotationPointLeftTop = _fsdk.e_RotationPointLeftTop
e_RotationPointRightTop = _fsdk.e_RotationPointRightTop
e_RotationPointLeftBottom = _fsdk.e_RotationPointLeftBottom
e_RotationPointRightBottom = _fsdk.e_RotationPointRightBottom
e_AlignmentLeft = _fsdk.e_AlignmentLeft
e_AlignmentCenter = _fsdk.e_AlignmentCenter
e_AlignmentRight = _fsdk.e_AlignmentRight
e_FillModeNone = _fsdk.e_FillModeNone
e_FillModeAlternate = _fsdk.e_FillModeAlternate
e_FillModeWinding = _fsdk.e_FillModeWinding
e_PosTopLeft = _fsdk.e_PosTopLeft
e_PosTopCenter = _fsdk.e_PosTopCenter
e_PosTopRight = _fsdk.e_PosTopRight
e_PosCenterLeft = _fsdk.e_PosCenterLeft
e_PosCenter = _fsdk.e_PosCenter
e_PosCenterRight = _fsdk.e_PosCenterRight
e_PosBottomLeft = _fsdk.e_PosBottomLeft
e_PosBottomCenter = _fsdk.e_PosBottomCenter
e_PosBottomRight = _fsdk.e_PosBottomRight
e_ModuleNameConnectedPDF = _fsdk.e_ModuleNameConnectedPDF
e_ModuleNameXFA = _fsdk.e_ModuleNameXFA
e_ModuleNameRedaction = _fsdk.e_ModuleNameRedaction
e_ModuleNameRMS = _fsdk.e_ModuleNameRMS
e_ModuleNameOCR = _fsdk.e_ModuleNameOCR
e_ModuleNameComparison = _fsdk.e_ModuleNameComparison
e_ModuleNameCompliance = _fsdk.e_ModuleNameCompliance
e_ModuleNameOptimizer = _fsdk.e_ModuleNameOptimizer
e_ModuleNameConversion = _fsdk.e_ModuleNameConversion
e_ModuleNameLayoutRecognition = _fsdk.e_ModuleNameLayoutRecognition
e_ModuleNameAccessibility = _fsdk.e_ModuleNameAccessibility
e_ModuleNameTableMaker = _fsdk.e_ModuleNameTableMaker
e_ModuleNameDWG2PDF = _fsdk.e_ModuleNameDWG2PDF
e_ModuleNameAdvEdit = _fsdk.e_ModuleNameAdvEdit
e_ModuleNamePDF2Office = _fsdk.e_ModuleNamePDF2Office
e_ModuleName3D = _fsdk.e_ModuleName3D
e_ModuleNameOFD = _fsdk.e_ModuleNameOFD
e_ModuleNameOffice2PDF = _fsdk.e_ModuleNameOffice2PDF
e_ModuleNamePrint2PDF = _fsdk.e_ModuleNamePrint2PDF
e_ColorSpaceInvalid = _fsdk.e_ColorSpaceInvalid
e_ColorSpaceDeviceGray = _fsdk.e_ColorSpaceDeviceGray
e_ColorSpaceDeviceRGB = _fsdk.e_ColorSpaceDeviceRGB
e_ColorSpaceDeviceCMYK = _fsdk.e_ColorSpaceDeviceCMYK
e_ColorSpaceCalGray = _fsdk.e_ColorSpaceCalGray
e_ColorSpaceCalRGB = _fsdk.e_ColorSpaceCalRGB
e_ColorSpaceLab = _fsdk.e_ColorSpaceLab
e_ColorSpaceICCBased = _fsdk.e_ColorSpaceICCBased
e_ColorSpaceSeparation = _fsdk.e_ColorSpaceSeparation
e_ColorSpaceDeviceN = _fsdk.e_ColorSpaceDeviceN
e_ColorSpaceIndexed = _fsdk.e_ColorSpaceIndexed
e_ColorSpacePattern = _fsdk.e_ColorSpacePattern
e_ColorSpaceICCBasedDeviceGray = _fsdk.e_ColorSpaceICCBasedDeviceGray
e_ColorSpaceICCBasedDeviceRGB = _fsdk.e_ColorSpaceICCBasedDeviceRGB
e_ColorSpaceICCBasedDeviceCMYK = _fsdk.e_ColorSpaceICCBasedDeviceCMYK
e_LocaleIDUnspecified = _fsdk.e_LocaleIDUnspecified
e_LocaleIDHongKong = _fsdk.e_LocaleIDHongKong
e_LocaleIDTaiwan = _fsdk.e_LocaleIDTaiwan
e_LocaleIDNetherlands = _fsdk.e_LocaleIDNetherlands
e_LocaleIDFrance = _fsdk.e_LocaleIDFrance
e_LocaleIDGermany = _fsdk.e_LocaleIDGermany
e_LocaleIDItaly = _fsdk.e_LocaleIDItaly
e_LocaleIDKorea = _fsdk.e_LocaleIDKorea
e_LocaleIDJapan = _fsdk.e_LocaleIDJapan
e_FileFormatTypeFDF = _fsdk.e_FileFormatTypeFDF
e_FileFormatTypeXFDF = _fsdk.e_FileFormatTypeXFDF
e_FileFormatTypeHTML = _fsdk.e_FileFormatTypeHTML
e_FileFormatTypeXDP = _fsdk.e_FileFormatTypeXDP
e_FileFormatTypeXML = _fsdk.e_FileFormatTypeXML
e_FileFormatTypeXFD = _fsdk.e_FileFormatTypeXFD
e_FileFormatTypePDF = _fsdk.e_FileFormatTypePDF
e_FileFormatTypeTXT = _fsdk.e_FileFormatTypeTXT
class Codec(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Codec, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Codec, name)
    __repr__ = _swig_repr
    if _newclass:
        Base64Encode = staticmethod(_fsdk.Codec_Base64Encode)
    else:
        Base64Encode = _fsdk.Codec_Base64Encode
    if _newclass:
        Base64Decode = staticmethod(_fsdk.Codec_Base64Decode)
    else:
        Base64Decode = _fsdk.Codec_Base64Decode
    if _newclass:
        FlateCompress = staticmethod(_fsdk.Codec_FlateCompress)
    else:
        FlateCompress = _fsdk.Codec_FlateCompress
    if _newclass:
        FlateDecompress = staticmethod(_fsdk.Codec_FlateDecompress)
    else:
        FlateDecompress = _fsdk.Codec_FlateDecompress

    def __init__(self, *args):
        this = _fsdk.new_Codec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Codec
    __del__ = lambda self: None
Codec_swigregister = _fsdk.Codec_swigregister
Codec_swigregister(Codec)

def Codec_Base64Encode(*args):
    return _fsdk.Codec_Base64Encode(*args)
Codec_Base64Encode = _fsdk.Codec_Base64Encode

def Codec_Base64Decode(*args):
    return _fsdk.Codec_Base64Decode(*args)
Codec_Base64Decode = _fsdk.Codec_Base64Decode

def Codec_FlateCompress(*args):
    return _fsdk.Codec_FlateCompress(*args)
Codec_FlateCompress = _fsdk.Codec_FlateCompress

def Codec_FlateDecompress(*args):
    return _fsdk.Codec_FlateDecompress(*args)
Codec_FlateDecompress = _fsdk.Codec_FlateDecompress

class NotifierCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.NotifierCallback_Release(self, *args)

    def OnOutOfMemory(self, *args):
        return _fsdk.NotifierCallback_OnOutOfMemory(self, *args)

    def __init__(self, *args):
        if self.__class__ == NotifierCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_NotifierCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_NotifierCallback(self)
        return weakref_proxy(self)
NotifierCallback_swigregister = _fsdk.NotifierCallback_swigregister
NotifierCallback_swigregister(NotifierCallback)

class Progressive(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progressive, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Progressive, name)
    __repr__ = _swig_repr
    e_Error = _fsdk.Progressive_e_Error
    e_ToBeContinued = _fsdk.Progressive_e_ToBeContinued
    e_Finished = _fsdk.Progressive_e_Finished

    def __init__(self, *args):
        this = _fsdk.new_Progressive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Progressive
    __del__ = lambda self: None

    def Continue(self, *args):
        return _fsdk.Progressive_Continue(self, *args)

    def GetRateOfProgress(self, *args):
        return _fsdk.Progressive_GetRateOfProgress(self, *args)
Progressive_swigregister = _fsdk.Progressive_swigregister
Progressive_swigregister(Progressive)

class RenderConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RenderConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.RenderConfig___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RenderConfig___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.RenderConfig_Set(self, *args)
    __swig_setmethods__["graphics_objs_count_in_one_step"] = _fsdk.RenderConfig_graphics_objs_count_in_one_step_set
    __swig_getmethods__["graphics_objs_count_in_one_step"] = _fsdk.RenderConfig_graphics_objs_count_in_one_step_get
    if _newclass:
        graphics_objs_count_in_one_step = _swig_property(_fsdk.RenderConfig_graphics_objs_count_in_one_step_get, _fsdk.RenderConfig_graphics_objs_count_in_one_step_set)
    __swig_destroy__ = _fsdk.delete_RenderConfig
    __del__ = lambda self: None
RenderConfig_swigregister = _fsdk.RenderConfig_swigregister
RenderConfig_swigregister(RenderConfig)

class Library(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Library, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Library, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_fsdk.Library_Initialize)
    else:
        Initialize = _fsdk.Library_Initialize
    if _newclass:
        Reinitialize = staticmethod(_fsdk.Library_Reinitialize)
    else:
        Reinitialize = _fsdk.Library_Reinitialize
    if _newclass:
        Release = staticmethod(_fsdk.Library_Release)
    else:
        Release = _fsdk.Library_Release
    if _newclass:
        HasModuleLicenseRight = staticmethod(_fsdk.Library_HasModuleLicenseRight)
    else:
        HasModuleLicenseRight = _fsdk.Library_HasModuleLicenseRight
    if _newclass:
        GetVersion = staticmethod(_fsdk.Library_GetVersion)
    else:
        GetVersion = _fsdk.Library_GetVersion
    if _newclass:
        SetCacheSize = staticmethod(_fsdk.Library_SetCacheSize)
    else:
        SetCacheSize = _fsdk.Library_SetCacheSize
    if _newclass:
        EnableJavaScript = staticmethod(_fsdk.Library_EnableJavaScript)
    else:
        EnableJavaScript = _fsdk.Library_EnableJavaScript
    if _newclass:
        SetAnnotIconProviderCallback = staticmethod(_fsdk.Library_SetAnnotIconProviderCallback)
    else:
        SetAnnotIconProviderCallback = _fsdk.Library_SetAnnotIconProviderCallback
    if _newclass:
        SetNotifierCallback = staticmethod(_fsdk.Library_SetNotifierCallback)
    else:
        SetNotifierCallback = _fsdk.Library_SetNotifierCallback
    if _newclass:
        SetActionCallback = staticmethod(_fsdk.Library_SetActionCallback)
    else:
        SetActionCallback = _fsdk.Library_SetActionCallback
    if _newclass:
        SetDocEventCallback = staticmethod(_fsdk.Library_SetDocEventCallback)
    else:
        SetDocEventCallback = _fsdk.Library_SetDocEventCallback
    if _newclass:
        RegisterSignatureCallback = staticmethod(_fsdk.Library_RegisterSignatureCallback)
    else:
        RegisterSignatureCallback = _fsdk.Library_RegisterSignatureCallback
    if _newclass:
        UnregisterSignatureCallback = staticmethod(_fsdk.Library_UnregisterSignatureCallback)
    else:
        UnregisterSignatureCallback = _fsdk.Library_UnregisterSignatureCallback
    if _newclass:
        RegisterSecurityCallback = staticmethod(_fsdk.Library_RegisterSecurityCallback)
    else:
        RegisterSecurityCallback = _fsdk.Library_RegisterSecurityCallback
    if _newclass:
        UnregisterSecurityCallback = staticmethod(_fsdk.Library_UnregisterSecurityCallback)
    else:
        UnregisterSecurityCallback = _fsdk.Library_UnregisterSecurityCallback
    if _newclass:
        SetTimeStampCallback = staticmethod(_fsdk.Library_SetTimeStampCallback)
    else:
        SetTimeStampCallback = _fsdk.Library_SetTimeStampCallback
    if _newclass:
        RegisterXFAAppProviderCallback = staticmethod(_fsdk.Library_RegisterXFAAppProviderCallback)
    else:
        RegisterXFAAppProviderCallback = _fsdk.Library_RegisterXFAAppProviderCallback
    if _newclass:
        SetRenderTextGamma = staticmethod(_fsdk.Library_SetRenderTextGamma)
    else:
        SetRenderTextGamma = _fsdk.Library_SetRenderTextGamma
    if _newclass:
        SetLogFile = staticmethod(_fsdk.Library_SetLogFile)
    else:
        SetLogFile = _fsdk.Library_SetLogFile
    if _newclass:
        FlushLog = staticmethod(_fsdk.Library_FlushLog)
    else:
        FlushLog = _fsdk.Library_FlushLog
    if _newclass:
        SetFontMapperCallback = staticmethod(_fsdk.Library_SetFontMapperCallback)
    else:
        SetFontMapperCallback = _fsdk.Library_SetFontMapperCallback
    if _newclass:
        SetDefaultICCProfilesPath = staticmethod(_fsdk.Library_SetDefaultICCProfilesPath)
    else:
        SetDefaultICCProfilesPath = _fsdk.Library_SetDefaultICCProfilesPath
    if _newclass:
        GetRenderConfig = staticmethod(_fsdk.Library_GetRenderConfig)
    else:
        GetRenderConfig = _fsdk.Library_GetRenderConfig
    if _newclass:
        SetRenderConfig = staticmethod(_fsdk.Library_SetRenderConfig)
    else:
        SetRenderConfig = _fsdk.Library_SetRenderConfig
    if _newclass:
        EnableThreadSafety = staticmethod(_fsdk.Library_EnableThreadSafety)
    else:
        EnableThreadSafety = _fsdk.Library_EnableThreadSafety
    if _newclass:
        InitializeOFDEngine = staticmethod(_fsdk.Library_InitializeOFDEngine)
    else:
        InitializeOFDEngine = _fsdk.Library_InitializeOFDEngine
    if _newclass:
        ReleaseOFDEngine = staticmethod(_fsdk.Library_ReleaseOFDEngine)
    else:
        ReleaseOFDEngine = _fsdk.Library_ReleaseOFDEngine
    if _newclass:
        ExecuteJavaScript = staticmethod(_fsdk.Library_ExecuteJavaScript)
    else:
        ExecuteJavaScript = _fsdk.Library_ExecuteJavaScript
    __swig_destroy__ = _fsdk.delete_Library
    __del__ = lambda self: None
Library_swigregister = _fsdk.Library_swigregister
Library_swigregister(Library)

def Library_Initialize(*args):
    return _fsdk.Library_Initialize(*args)
Library_Initialize = _fsdk.Library_Initialize

def Library_Reinitialize(*args):
    return _fsdk.Library_Reinitialize(*args)
Library_Reinitialize = _fsdk.Library_Reinitialize

def Library_Release(*args):
    return _fsdk.Library_Release(*args)
Library_Release = _fsdk.Library_Release

def Library_HasModuleLicenseRight(*args):
    return _fsdk.Library_HasModuleLicenseRight(*args)
Library_HasModuleLicenseRight = _fsdk.Library_HasModuleLicenseRight

def Library_GetVersion(*args):
    return _fsdk.Library_GetVersion(*args)
Library_GetVersion = _fsdk.Library_GetVersion

def Library_SetCacheSize(*args):
    return _fsdk.Library_SetCacheSize(*args)
Library_SetCacheSize = _fsdk.Library_SetCacheSize

def Library_EnableJavaScript(*args):
    return _fsdk.Library_EnableJavaScript(*args)
Library_EnableJavaScript = _fsdk.Library_EnableJavaScript

def Library_SetAnnotIconProviderCallback(*args):
    return _fsdk.Library_SetAnnotIconProviderCallback(*args)
Library_SetAnnotIconProviderCallback = _fsdk.Library_SetAnnotIconProviderCallback

def Library_SetNotifierCallback(*args):
    return _fsdk.Library_SetNotifierCallback(*args)
Library_SetNotifierCallback = _fsdk.Library_SetNotifierCallback

def Library_SetActionCallback(*args):
    return _fsdk.Library_SetActionCallback(*args)
Library_SetActionCallback = _fsdk.Library_SetActionCallback

def Library_SetDocEventCallback(*args):
    return _fsdk.Library_SetDocEventCallback(*args)
Library_SetDocEventCallback = _fsdk.Library_SetDocEventCallback

def Library_RegisterSignatureCallback(*args):
    return _fsdk.Library_RegisterSignatureCallback(*args)
Library_RegisterSignatureCallback = _fsdk.Library_RegisterSignatureCallback

def Library_UnregisterSignatureCallback(*args):
    return _fsdk.Library_UnregisterSignatureCallback(*args)
Library_UnregisterSignatureCallback = _fsdk.Library_UnregisterSignatureCallback

def Library_RegisterSecurityCallback(*args):
    return _fsdk.Library_RegisterSecurityCallback(*args)
Library_RegisterSecurityCallback = _fsdk.Library_RegisterSecurityCallback

def Library_UnregisterSecurityCallback(*args):
    return _fsdk.Library_UnregisterSecurityCallback(*args)
Library_UnregisterSecurityCallback = _fsdk.Library_UnregisterSecurityCallback

def Library_SetTimeStampCallback(*args):
    return _fsdk.Library_SetTimeStampCallback(*args)
Library_SetTimeStampCallback = _fsdk.Library_SetTimeStampCallback

def Library_RegisterXFAAppProviderCallback(*args):
    return _fsdk.Library_RegisterXFAAppProviderCallback(*args)
Library_RegisterXFAAppProviderCallback = _fsdk.Library_RegisterXFAAppProviderCallback

def Library_SetRenderTextGamma(*args):
    return _fsdk.Library_SetRenderTextGamma(*args)
Library_SetRenderTextGamma = _fsdk.Library_SetRenderTextGamma

def Library_SetLogFile(*args):
    return _fsdk.Library_SetLogFile(*args)
Library_SetLogFile = _fsdk.Library_SetLogFile

def Library_FlushLog(*args):
    return _fsdk.Library_FlushLog(*args)
Library_FlushLog = _fsdk.Library_FlushLog

def Library_SetFontMapperCallback(*args):
    return _fsdk.Library_SetFontMapperCallback(*args)
Library_SetFontMapperCallback = _fsdk.Library_SetFontMapperCallback

def Library_SetDefaultICCProfilesPath(*args):
    return _fsdk.Library_SetDefaultICCProfilesPath(*args)
Library_SetDefaultICCProfilesPath = _fsdk.Library_SetDefaultICCProfilesPath

def Library_GetRenderConfig(*args):
    return _fsdk.Library_GetRenderConfig(*args)
Library_GetRenderConfig = _fsdk.Library_GetRenderConfig

def Library_SetRenderConfig(*args):
    return _fsdk.Library_SetRenderConfig(*args)
Library_SetRenderConfig = _fsdk.Library_SetRenderConfig

def Library_EnableThreadSafety(*args):
    return _fsdk.Library_EnableThreadSafety(*args)
Library_EnableThreadSafety = _fsdk.Library_EnableThreadSafety

def Library_InitializeOFDEngine(*args):
    return _fsdk.Library_InitializeOFDEngine(*args)
Library_InitializeOFDEngine = _fsdk.Library_InitializeOFDEngine

def Library_ReleaseOFDEngine(*args):
    return _fsdk.Library_ReleaseOFDEngine(*args)
Library_ReleaseOFDEngine = _fsdk.Library_ReleaseOFDEngine

def Library_ExecuteJavaScript(*args):
    return _fsdk.Library_ExecuteJavaScript(*args)
Library_ExecuteJavaScript = _fsdk.Library_ExecuteJavaScript

class GraphState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphState, name)
    __repr__ = _swig_repr
    e_LineCapButt = _fsdk.GraphState_e_LineCapButt
    e_LineCapRound = _fsdk.GraphState_e_LineCapRound
    e_LineCapSquare = _fsdk.GraphState_e_LineCapSquare
    e_LineJoinMiter = _fsdk.GraphState_e_LineJoinMiter
    e_LineJoinRound = _fsdk.GraphState_e_LineJoinRound
    e_LineJoinBevel = _fsdk.GraphState_e_LineJoinBevel

    def __init__(self, *args):
        this = _fsdk.new_GraphState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.GraphState_Set(self, *args)
    __swig_setmethods__["line_width"] = _fsdk.GraphState_line_width_set
    __swig_getmethods__["line_width"] = _fsdk.GraphState_line_width_get
    if _newclass:
        line_width = _swig_property(_fsdk.GraphState_line_width_get, _fsdk.GraphState_line_width_set)
    __swig_setmethods__["line_join"] = _fsdk.GraphState_line_join_set
    __swig_getmethods__["line_join"] = _fsdk.GraphState_line_join_get
    if _newclass:
        line_join = _swig_property(_fsdk.GraphState_line_join_get, _fsdk.GraphState_line_join_set)
    __swig_setmethods__["miter_limit"] = _fsdk.GraphState_miter_limit_set
    __swig_getmethods__["miter_limit"] = _fsdk.GraphState_miter_limit_get
    if _newclass:
        miter_limit = _swig_property(_fsdk.GraphState_miter_limit_get, _fsdk.GraphState_miter_limit_set)
    __swig_setmethods__["line_cap"] = _fsdk.GraphState_line_cap_set
    __swig_getmethods__["line_cap"] = _fsdk.GraphState_line_cap_get
    if _newclass:
        line_cap = _swig_property(_fsdk.GraphState_line_cap_get, _fsdk.GraphState_line_cap_set)
    __swig_setmethods__["dash_phase"] = _fsdk.GraphState_dash_phase_set
    __swig_getmethods__["dash_phase"] = _fsdk.GraphState_dash_phase_get
    if _newclass:
        dash_phase = _swig_property(_fsdk.GraphState_dash_phase_get, _fsdk.GraphState_dash_phase_set)
    __swig_setmethods__["dashes"] = _fsdk.GraphState_dashes_set
    __swig_getmethods__["dashes"] = _fsdk.GraphState_dashes_get
    if _newclass:
        dashes = _swig_property(_fsdk.GraphState_dashes_get, _fsdk.GraphState_dashes_set)
    __swig_destroy__ = _fsdk.delete_GraphState
    __del__ = lambda self: None
GraphState_swigregister = _fsdk.GraphState_swigregister
GraphState_swigregister(GraphState)

class DocEventCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocEventCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocEventCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.DocEventCallback_Release(self, *args)

    def OnDocWillOpen(self, *args):
        return _fsdk.DocEventCallback_OnDocWillOpen(self, *args)

    def OnDocOpened(self, *args):
        return _fsdk.DocEventCallback_OnDocOpened(self, *args)

    def OnDocWillDestroy(self, *args):
        return _fsdk.DocEventCallback_OnDocWillDestroy(self, *args)

    def OnDocWillSave(self, *args):
        return _fsdk.DocEventCallback_OnDocWillSave(self, *args)

    def OnDocSaved(self, *args):
        return _fsdk.DocEventCallback_OnDocSaved(self, *args)

    def __init__(self, *args):
        if self.__class__ == DocEventCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_DocEventCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_DocEventCallback(self)
        return weakref_proxy(self)
DocEventCallback_swigregister = _fsdk.DocEventCallback_swigregister
DocEventCallback_swigregister(DocEventCallback)

class Range(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    e_All = _fsdk.Range_e_All
    e_Even = _fsdk.Range_e_Even
    e_Odd = _fsdk.Range_e_Odd

    def __init__(self, *args):
        this = _fsdk.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Range
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Range___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Range___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Range_IsEmpty(self, *args)

    def AddSingle(self, *args):
        return _fsdk.Range_AddSingle(self, *args)

    def AddSegment(self, *args):
        return _fsdk.Range_AddSegment(self, *args)

    def GetSegmentCount(self, *args):
        return _fsdk.Range_GetSegmentCount(self, *args)

    def GetSegmentStart(self, *args):
        return _fsdk.Range_GetSegmentStart(self, *args)

    def GetSegmentEnd(self, *args):
        return _fsdk.Range_GetSegmentEnd(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.Range_RemoveAll(self, *args)
Range_swigregister = _fsdk.Range_swigregister
Range_swigregister(Range)

class Font(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    e_StyleFixedPitch = _fsdk.Font_e_StyleFixedPitch
    e_StyleSerif = _fsdk.Font_e_StyleSerif
    e_StyleSymbolic = _fsdk.Font_e_StyleSymbolic
    e_StyleScript = _fsdk.Font_e_StyleScript
    e_StyleNonSymbolic = _fsdk.Font_e_StyleNonSymbolic
    e_StyleItalic = _fsdk.Font_e_StyleItalic
    e_StyleAllCap = _fsdk.Font_e_StyleAllCap
    e_StylesSmallCap = _fsdk.Font_e_StylesSmallCap
    e_StylesBold = _fsdk.Font_e_StylesBold
    e_CharsetANSI = _fsdk.Font_e_CharsetANSI
    e_CharsetDefault = _fsdk.Font_e_CharsetDefault
    e_CharsetSymbol = _fsdk.Font_e_CharsetSymbol
    e_CharsetShift_JIS = _fsdk.Font_e_CharsetShift_JIS
    e_CharsetHangeul = _fsdk.Font_e_CharsetHangeul
    e_CharsetGB2312 = _fsdk.Font_e_CharsetGB2312
    e_CharsetChineseBig5 = _fsdk.Font_e_CharsetChineseBig5
    e_CharsetThai = _fsdk.Font_e_CharsetThai
    e_CharsetEastEurope = _fsdk.Font_e_CharsetEastEurope
    e_CharsetRussian = _fsdk.Font_e_CharsetRussian
    e_CharsetGreek = _fsdk.Font_e_CharsetGreek
    e_CharsetTurkish = _fsdk.Font_e_CharsetTurkish
    e_CharsetHebrew = _fsdk.Font_e_CharsetHebrew
    e_CharsetArabic = _fsdk.Font_e_CharsetArabic
    e_CharsetBaltic = _fsdk.Font_e_CharsetBaltic
    e_CIDCharsetUnknown = _fsdk.Font_e_CIDCharsetUnknown
    e_CIDCharsetGB1 = _fsdk.Font_e_CIDCharsetGB1
    e_CIDCharsetCNS1 = _fsdk.Font_e_CIDCharsetCNS1
    e_CIDCharsetJAPAN1 = _fsdk.Font_e_CIDCharsetJAPAN1
    e_CIDCharsetKOREA1 = _fsdk.Font_e_CIDCharsetKOREA1
    e_CIDCharsetUNICODE = _fsdk.Font_e_CIDCharsetUNICODE
    e_StdIDCourier = _fsdk.Font_e_StdIDCourier
    e_StdIDCourierB = _fsdk.Font_e_StdIDCourierB
    e_StdIDCourierBI = _fsdk.Font_e_StdIDCourierBI
    e_StdIDCourierI = _fsdk.Font_e_StdIDCourierI
    e_StdIDHelvetica = _fsdk.Font_e_StdIDHelvetica
    e_StdIDHelveticaB = _fsdk.Font_e_StdIDHelveticaB
    e_StdIDHelveticaBI = _fsdk.Font_e_StdIDHelveticaBI
    e_StdIDHelveticaI = _fsdk.Font_e_StdIDHelveticaI
    e_StdIDTimes = _fsdk.Font_e_StdIDTimes
    e_StdIDTimesB = _fsdk.Font_e_StdIDTimesB
    e_StdIDTimesBI = _fsdk.Font_e_StdIDTimesBI
    e_StdIDTimesI = _fsdk.Font_e_StdIDTimesI
    e_StdIDSymbol = _fsdk.Font_e_StdIDSymbol
    e_StdIDZapfDingbats = _fsdk.Font_e_StdIDZapfDingbats
    e_FontTypeType1 = _fsdk.Font_e_FontTypeType1
    e_FontTypeTrueType = _fsdk.Font_e_FontTypeTrueType
    e_FontTypeType3 = _fsdk.Font_e_FontTypeType3
    e_FontTypeCIDFont = _fsdk.Font_e_FontTypeCIDFont

    def __init__(self, *args):
        this = _fsdk.new_Font(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Font___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Font___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Font_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_Font
    __del__ = lambda self: None

    def GetName(self, *args):
        return _fsdk.Font_GetName(self, *args)

    def GetFamilyName(self, *args):
        return _fsdk.Font_GetFamilyName(self, *args)

    def IsBold(self, *args):
        return _fsdk.Font_IsBold(self, *args)

    def IsItalic(self, *args):
        return _fsdk.Font_IsItalic(self, *args)

    def IsEmbedded(self, *args):
        return _fsdk.Font_IsEmbedded(self, *args)

    def IsSupportEmbedded(self, *args):
        return _fsdk.Font_IsSupportEmbedded(self, *args)

    def Embed(self, *args):
        return _fsdk.Font_Embed(self, *args)

    def AddUnicodes(self, *args):
        return _fsdk.Font_AddUnicodes(self, *args)

    def GetAscent(self, *args):
        return _fsdk.Font_GetAscent(self, *args)

    def GetDescent(self, *args):
        return _fsdk.Font_GetDescent(self, *args)

    def GetCharBBox(self, *args):
        return _fsdk.Font_GetCharBBox(self, *args)

    def GetCharWidth(self, *args):
        return _fsdk.Font_GetCharWidth(self, *args)

    def GetStyles(self, *args):
        return _fsdk.Font_GetStyles(self, *args)

    def GetCIDCharset(self, *args):
        return _fsdk.Font_GetCIDCharset(self, *args)

    def IsStandardFont(self, *args):
        return _fsdk.Font_IsStandardFont(self, *args)

    def GetStandard14Font(self, *args):
        return _fsdk.Font_GetStandard14Font(self, *args)

    def GetFontType(self, *args):
        return _fsdk.Font_GetFontType(self, *args)

    def GetBaseFontName(self, *args):
        return _fsdk.Font_GetBaseFontName(self, *args)

    def IsVertWriting(self, *args):
        return _fsdk.Font_IsVertWriting(self, *args)

    def GetEncoding(self, *args):
        return _fsdk.Font_GetEncoding(self, *args)

    def SetEncoding(self, *args):
        return _fsdk.Font_SetEncoding(self, *args)
Font_swigregister = _fsdk.Font_swigregister
Font_swigregister(Font)

class FontMapResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontMapResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontMapResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FontMapResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FontMapResult___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FontMapResult___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.FontMapResult_Set(self, *args)
    __swig_setmethods__["file_read"] = _fsdk.FontMapResult_file_read_set
    __swig_getmethods__["file_read"] = _fsdk.FontMapResult_file_read_get
    if _newclass:
        file_read = _swig_property(_fsdk.FontMapResult_file_read_get, _fsdk.FontMapResult_file_read_set)
    __swig_setmethods__["face_index"] = _fsdk.FontMapResult_face_index_set
    __swig_getmethods__["face_index"] = _fsdk.FontMapResult_face_index_get
    if _newclass:
        face_index = _swig_property(_fsdk.FontMapResult_face_index_get, _fsdk.FontMapResult_face_index_set)
    __swig_destroy__ = _fsdk.delete_FontMapResult
    __del__ = lambda self: None
FontMapResult_swigregister = _fsdk.FontMapResult_swigregister
FontMapResult_swigregister(FontMapResult)

class FontMapperCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontMapperCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontMapperCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.FontMapperCallback_Release(self, *args)

    def MapFont(self, *args):
        return _fsdk.FontMapperCallback_MapFont(self, *args)
FontMapperCallback_swigregister = _fsdk.FontMapperCallback_swigregister
FontMapperCallback_swigregister(FontMapperCallback)

class Path(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    e_TypeMoveTo = _fsdk.Path_e_TypeMoveTo
    e_TypeLineTo = _fsdk.Path_e_TypeLineTo
    e_TypeLineToCloseFigure = _fsdk.Path_e_TypeLineToCloseFigure
    e_TypeBezierTo = _fsdk.Path_e_TypeBezierTo
    e_TypeBezierToCloseFigure = _fsdk.Path_e_TypeBezierToCloseFigure
    __swig_destroy__ = _fsdk.delete_Path
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Path(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Path___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Path___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Path_IsEmpty(self, *args)

    def GetPointCount(self, *args):
        return _fsdk.Path_GetPointCount(self, *args)

    def GetPoint(self, *args):
        return _fsdk.Path_GetPoint(self, *args)

    def GetPointType(self, *args):
        return _fsdk.Path_GetPointType(self, *args)

    def SetPoint(self, *args):
        return _fsdk.Path_SetPoint(self, *args)

    def MoveTo(self, *args):
        return _fsdk.Path_MoveTo(self, *args)

    def LineTo(self, *args):
        return _fsdk.Path_LineTo(self, *args)

    def CubicBezierTo(self, *args):
        return _fsdk.Path_CubicBezierTo(self, *args)

    def CloseFigure(self, *args):
        return _fsdk.Path_CloseFigure(self, *args)

    def RemovePoint(self, *args):
        return _fsdk.Path_RemovePoint(self, *args)

    def AppendRect(self, *args):
        return _fsdk.Path_AppendRect(self, *args)

    def AppendEllipse(self, *args):
        return _fsdk.Path_AppendEllipse(self, *args)

    def Transform(self, *args):
        return _fsdk.Path_Transform(self, *args)

    def Clear(self, *args):
        return _fsdk.Path_Clear(self, *args)

    def IncreasePointCount(self, *args):
        return _fsdk.Path_IncreasePointCount(self, *args)
Path_swigregister = _fsdk.Path_swigregister
Path_swigregister(Path)

class PathArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PathArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PathArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.PathArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.PathArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.PathArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PathArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PathArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PathArray_RemoveAll(self, *args)
PathArray_swigregister = _fsdk.PathArray_swigregister
PathArray_swigregister(PathArray)

class ColorSpace(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorSpace, name)
    __repr__ = _swig_repr
    e_RenderIntentPerceptual = _fsdk.ColorSpace_e_RenderIntentPerceptual
    e_RenderIntentRelColorimetric = _fsdk.ColorSpace_e_RenderIntentRelColorimetric
    e_RenderIntentSaturation = _fsdk.ColorSpace_e_RenderIntentSaturation
    e_RenderIntentAbsColorimetric = _fsdk.ColorSpace_e_RenderIntentAbsColorimetric
    __swig_destroy__ = _fsdk.delete_ColorSpace
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ColorSpace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ColorSpace___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ColorSpace___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ColorSpace_IsEmpty(self, *args)

    def GetComponentCount(self, *args):
        return _fsdk.ColorSpace_GetComponentCount(self, *args)

    def GetColorSpaceType(self, *args):
        return _fsdk.ColorSpace_GetColorSpaceType(self, *args)

    def IsSpotColorSpace(self, *args):
        return _fsdk.ColorSpace_IsSpotColorSpace(self, *args)

    def GetComponentNames(self, *args):
        return _fsdk.ColorSpace_GetComponentNames(self, *args)

    def ConvertColor(self, *args):
        return _fsdk.ColorSpace_ConvertColor(self, *args)
ColorSpace_swigregister = _fsdk.ColorSpace_swigregister
ColorSpace_swigregister(ColorSpace)

class Color(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_Color
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Color___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Color___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Color_IsEmpty(self, *args)

    def GetColorSpace(self, *args):
        return _fsdk.Color_GetColorSpace(self, *args)

    def GetValue(self, *args):
        return _fsdk.Color_GetValue(self, *args)

    def SetValue(self, *args):
        return _fsdk.Color_SetValue(self, *args)

    def ConvertToRGB(self, *args):
        return _fsdk.Color_ConvertToRGB(self, *args)

    def ConvertToCMYK(self, *args):
        return _fsdk.Color_ConvertToCMYK(self, *args)
Color_swigregister = _fsdk.Color_swigregister
Color_swigregister(Color)

_FX_WIN32_DESKTOP_ = _fsdk._FX_WIN32_DESKTOP_
_FX_WIN32_MOBILE_ = _fsdk._FX_WIN32_MOBILE_
_FX_WIN64_ = _fsdk._FX_WIN64_
_FX_LINUX_DESKTOP_ = _fsdk._FX_LINUX_DESKTOP_
_FX_LINUX_EMBEDDED_ = _fsdk._FX_LINUX_EMBEDDED_
_FX_SYMBIAN_ = _fsdk._FX_SYMBIAN_
_FX_MACOSX_ = _fsdk._FX_MACOSX_
_FX_EMBEDDED_ = _fsdk._FX_EMBEDDED_
_FX_SOLARIS_ = _fsdk._FX_SOLARIS_
_FX_PALMOS_ = _fsdk._FX_PALMOS_
_FX_NETBSD_ = _fsdk._FX_NETBSD_
_FX_ANDROID_ = _fsdk._FX_ANDROID_
_FX_VXWORKS_ = _fsdk._FX_VXWORKS_
_FX_MTK_ = _fsdk._FX_MTK_
_FX_IOS_ = _fsdk._FX_IOS_
_FXM_PLATFORM_WINDOWS_ = _fsdk._FXM_PLATFORM_WINDOWS_
_FXM_PLATFORM_LINUX_ = _fsdk._FXM_PLATFORM_LINUX_
_FXM_PLATFORM_APPLE_ = _fsdk._FXM_PLATFORM_APPLE_
_FXM_PLATFORM_ANDROID_ = _fsdk._FXM_PLATFORM_ANDROID_
_FXM_PLATFORM_ = _fsdk._FXM_PLATFORM_
_FX_VC6_ = _fsdk._FX_VC6_
_FX_VC7_ = _fsdk._FX_VC7_
_FX_VC8_ = _fsdk._FX_VC8_
_FX_GCC_ = _fsdk._FX_GCC_
_FX_ADS_ = _fsdk._FX_ADS_
_FX_RVCT_ = _fsdk._FX_RVCT_
_FX_IARCC_ = _fsdk._FX_IARCC_
_FX_NOKIA_X86_ = _fsdk._FX_NOKIA_X86_
_FX_METROWERKS_ = _fsdk._FX_METROWERKS_
_FX_PACC_ = _fsdk._FX_PACC_
_FX_TMS470_ = _fsdk._FX_TMS470_
_FX_MIPS_SDE_ = _fsdk._FX_MIPS_SDE_
_FX_X86_ = _fsdk._FX_X86_
_FX_ARM_ = _fsdk._FX_ARM_
_FX_POWERPC_ = _fsdk._FX_POWERPC_
_FX_SPARC_ = _fsdk._FX_SPARC_
_FX_IA64_ = _fsdk._FX_IA64_
_FX_MIPS_ = _fsdk._FX_MIPS_
_FX_X64_ = _fsdk._FX_X64_
_FX_ARM64_ = _fsdk._FX_ARM64_
_FX_MIPS64_ = _fsdk._FX_MIPS64_
_FX_LOONGARCH64_ = _fsdk._FX_LOONGARCH64_
_FX_W32_ = _fsdk._FX_W32_
_FX_W64_ = _fsdk._FX_W64_
_FX_WORDSIZE_ = _fsdk._FX_WORDSIZE_
_FX_BIG_ENDIAN_ = _fsdk._FX_BIG_ENDIAN_
_FX_LITTLE_ENDIAN_ = _fsdk._FX_LITTLE_ENDIAN_
_FX_ENDIAN_ = _fsdk._FX_ENDIAN_
_FX_DEFAULT_TARGET_ = _fsdk._FX_DEFAULT_TARGET_
_FX_BREW_ = _fsdk._FX_BREW_
FX_PI = _fsdk.FX_PI
FXMEM_NONLEAVE = _fsdk.FXMEM_NONLEAVE
FXMEM_MOVABLE = _fsdk.FXMEM_MOVABLE
FXMEM_DISCARDABLE = _fsdk.FXMEM_DISCARDABLE
class BasicArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
BasicArray_swigregister = _fsdk.BasicArray_swigregister
BasicArray_swigregister(BasicArray)

class PauseCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PauseCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PauseCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PauseCallback
    __del__ = lambda self: None

    def NeedToPauseNow(self, *args):
        return _fsdk.PauseCallback_NeedToPauseNow(self, *args)

    def __init__(self, *args):
        if self.__class__ == PauseCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_PauseCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_PauseCallback(self)
        return weakref_proxy(self)
PauseCallback_swigregister = _fsdk.PauseCallback_swigregister
PauseCallback_swigregister(PauseCallback)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Point_Set(self, *args)

    def Add(self, *args):
        return _fsdk.Point_Add(self, *args)

    def Subtract(self, *args):
        return _fsdk.Point_Subtract(self, *args)

    def Reset(self, *args):
        return _fsdk.Point_Reset(self, *args)

    def __iadd__(self, *args):
        return _fsdk.Point___iadd__(self, *args)

    def __isub__(self, *args):
        return _fsdk.Point___isub__(self, *args)

    def __imul__(self, *args):
        return _fsdk.Point___imul__(self, *args)

    def __itruediv__(self, *args):
        return _fsdk.Point___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_setmethods__["x"] = _fsdk.Point_x_set
    __swig_getmethods__["x"] = _fsdk.Point_x_get
    if _newclass:
        x = _swig_property(_fsdk.Point_x_get, _fsdk.Point_x_set)
    __swig_setmethods__["y"] = _fsdk.Point_y_set
    __swig_getmethods__["y"] = _fsdk.Point_y_get
    if _newclass:
        y = _swig_property(_fsdk.Point_y_get, _fsdk.Point_y_set)
    __swig_destroy__ = _fsdk.delete_Point
    __del__ = lambda self: None
Point_swigregister = _fsdk.Point_swigregister
Point_swigregister(Point)

class PointF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointF, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PointF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PointF_Set(self, *args)

    def Add(self, *args):
        return _fsdk.PointF_Add(self, *args)

    def Subtract(self, *args):
        return _fsdk.PointF_Subtract(self, *args)

    def Reset(self, *args):
        return _fsdk.PointF_Reset(self, *args)

    def __iadd__(self, *args):
        return _fsdk.PointF___iadd__(self, *args)

    def __isub__(self, *args):
        return _fsdk.PointF___isub__(self, *args)

    def __imul__(self, *args):
        return _fsdk.PointF___imul__(self, *args)

    def __itruediv__(self, *args):
        return _fsdk.PointF___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_setmethods__["x"] = _fsdk.PointF_x_set
    __swig_getmethods__["x"] = _fsdk.PointF_x_get
    if _newclass:
        x = _swig_property(_fsdk.PointF_x_get, _fsdk.PointF_x_set)
    __swig_setmethods__["y"] = _fsdk.PointF_y_set
    __swig_getmethods__["y"] = _fsdk.PointF_y_get
    if _newclass:
        y = _swig_property(_fsdk.PointF_y_get, _fsdk.PointF_y_set)
    __swig_destroy__ = _fsdk.delete_PointF
    __del__ = lambda self: None
PointF_swigregister = _fsdk.PointF_swigregister
PointF_swigregister(PointF)

class RectFArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectFArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectFArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RectFArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.RectFArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.RectFArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.RectFArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.RectFArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.RectFArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.RectFArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.RectFArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.RectFArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.RectFArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.RectFArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.RectFArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_RectFArray
    __del__ = lambda self: None
RectFArray_swigregister = _fsdk.RectFArray_swigregister
RectFArray_swigregister(RectFArray)

class PointFArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointFArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointFArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PointFArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.PointFArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.PointFArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.PointFArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PointFArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.PointFArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.PointFArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.PointFArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.PointFArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PointFArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PointFArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.PointFArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_PointFArray
    __del__ = lambda self: None
PointFArray_swigregister = _fsdk.PointFArray_swigregister
PointFArray_swigregister(PointFArray)

class FloatArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FloatArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.FloatArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.FloatArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.FloatArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.FloatArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.FloatArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.FloatArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.FloatArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.FloatArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.FloatArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.FloatArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.FloatArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_FloatArray
    __del__ = lambda self: None
FloatArray_swigregister = _fsdk.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

class Int32Array(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int32Array, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Int32Array, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Int32Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.Int32Array_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.Int32Array_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.Int32Array_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.Int32Array_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.Int32Array_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.Int32Array_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.Int32Array_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.Int32Array_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.Int32Array_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.Int32Array_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.Int32Array_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_Int32Array
    __del__ = lambda self: None
Int32Array_swigregister = _fsdk.Int32Array_swigregister
Int32Array_swigregister(Int32Array)

class UInt32Array(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Array, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Array, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_UInt32Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.UInt32Array_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.UInt32Array_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.UInt32Array_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.UInt32Array_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.UInt32Array_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.UInt32Array_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.UInt32Array_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.UInt32Array_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.UInt32Array_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.UInt32Array_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.UInt32Array_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_UInt32Array
    __del__ = lambda self: None
UInt32Array_swigregister = _fsdk.UInt32Array_swigregister
UInt32Array_swigregister(UInt32Array)

class RectI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _fsdk.RectI_left_set
    __swig_getmethods__["left"] = _fsdk.RectI_left_get
    if _newclass:
        left = _swig_property(_fsdk.RectI_left_get, _fsdk.RectI_left_set)
    __swig_setmethods__["top"] = _fsdk.RectI_top_set
    __swig_getmethods__["top"] = _fsdk.RectI_top_get
    if _newclass:
        top = _swig_property(_fsdk.RectI_top_get, _fsdk.RectI_top_set)
    __swig_setmethods__["right"] = _fsdk.RectI_right_set
    __swig_getmethods__["right"] = _fsdk.RectI_right_get
    if _newclass:
        right = _swig_property(_fsdk.RectI_right_get, _fsdk.RectI_right_set)
    __swig_setmethods__["bottom"] = _fsdk.RectI_bottom_set
    __swig_getmethods__["bottom"] = _fsdk.RectI_bottom_get
    if _newclass:
        bottom = _swig_property(_fsdk.RectI_bottom_get, _fsdk.RectI_bottom_set)

    def __init__(self, *args):
        this = _fsdk.new_RectI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Width(self, *args):
        return _fsdk.RectI_Width(self, *args)

    def Height(self, *args):
        return _fsdk.RectI_Height(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.RectI_IsEmpty(self, *args)

    def Normalize(self, *args):
        return _fsdk.RectI_Normalize(self, *args)

    def Intersect(self, *args):
        return _fsdk.RectI_Intersect(self, *args)

    def Union(self, *args):
        return _fsdk.RectI_Union(self, *args)

    def __eq__(self, *args):
        return _fsdk.RectI___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RectI___ne__(self, *args)

    def Offset(self, *args):
        return _fsdk.RectI_Offset(self, *args)

    def Contains(self, *args):
        return _fsdk.RectI_Contains(self, *args)

    def Valid(self, *args):
        return _fsdk.RectI_Valid(self, *args)
    __swig_destroy__ = _fsdk.delete_RectI
    __del__ = lambda self: None
RectI_swigregister = _fsdk.RectI_swigregister
RectI_swigregister(RectI)

class RectF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectF, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RectF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEmpty(self, *args):
        return _fsdk.RectF_IsEmpty(self, *args)

    def Normalize(self, *args):
        return _fsdk.RectF_Normalize(self, *args)

    def __eq__(self, *args):
        return _fsdk.RectF___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RectF___ne__(self, *args)

    def Reset(self, *args):
        return _fsdk.RectF_Reset(self, *args)

    def Contains(self, *args):
        return _fsdk.RectF_Contains(self, *args)

    def Transform(self, *args):
        return _fsdk.RectF_Transform(self, *args)

    def Intersect(self, *args):
        return _fsdk.RectF_Intersect(self, *args)

    def Union(self, *args):
        return _fsdk.RectF_Union(self, *args)

    def GetInnerRect(self, *args):
        return _fsdk.RectF_GetInnerRect(self, *args)

    def GetOutterRect(self, *args):
        return _fsdk.RectF_GetOutterRect(self, *args)

    def GetClosestRect(self, *args):
        return _fsdk.RectF_GetClosestRect(self, *args)

    def InitRect(self, *args):
        return _fsdk.RectF_InitRect(self, *args)

    def UpdateRect(self, *args):
        return _fsdk.RectF_UpdateRect(self, *args)

    def Width(self, *args):
        return _fsdk.RectF_Width(self, *args)

    def Height(self, *args):
        return _fsdk.RectF_Height(self, *args)

    def Inflate(self, *args):
        return _fsdk.RectF_Inflate(self, *args)

    def Deflate(self, *args):
        return _fsdk.RectF_Deflate(self, *args)

    def Translate(self, *args):
        return _fsdk.RectF_Translate(self, *args)
    if _newclass:
        GetBBox = staticmethod(_fsdk.RectF_GetBBox)
    else:
        GetBBox = _fsdk.RectF_GetBBox
    __swig_setmethods__["left"] = _fsdk.RectF_left_set
    __swig_getmethods__["left"] = _fsdk.RectF_left_get
    if _newclass:
        left = _swig_property(_fsdk.RectF_left_get, _fsdk.RectF_left_set)
    __swig_setmethods__["right"] = _fsdk.RectF_right_set
    __swig_getmethods__["right"] = _fsdk.RectF_right_get
    if _newclass:
        right = _swig_property(_fsdk.RectF_right_get, _fsdk.RectF_right_set)
    __swig_setmethods__["bottom"] = _fsdk.RectF_bottom_set
    __swig_getmethods__["bottom"] = _fsdk.RectF_bottom_get
    if _newclass:
        bottom = _swig_property(_fsdk.RectF_bottom_get, _fsdk.RectF_bottom_set)
    __swig_setmethods__["top"] = _fsdk.RectF_top_set
    __swig_getmethods__["top"] = _fsdk.RectF_top_get
    if _newclass:
        top = _swig_property(_fsdk.RectF_top_get, _fsdk.RectF_top_set)
    __swig_destroy__ = _fsdk.delete_RectF
    __del__ = lambda self: None
RectF_swigregister = _fsdk.RectF_swigregister
RectF_swigregister(RectF)

def RectF_GetBBox(*args):
    return _fsdk.RectF_GetBBox(*args)
RectF_GetBBox = _fsdk.RectF_GetBBox


def FX_IsRectAdjacent(*args):
    return _fsdk.FX_IsRectAdjacent(*args)
FX_IsRectAdjacent = _fsdk.FX_IsRectAdjacent
class Matrix2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Matrix2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Matrix2D___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Matrix2D___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.Matrix2D_Set(self, *args)

    def SetIdentity(self, *args):
        return _fsdk.Matrix2D_SetIdentity(self, *args)

    def SetReverse(self, *args):
        return _fsdk.Matrix2D_SetReverse(self, *args)

    def Concat(self, *args):
        return _fsdk.Matrix2D_Concat(self, *args)

    def ConcatInverse(self, *args):
        return _fsdk.Matrix2D_ConcatInverse(self, *args)

    def Reset(self, *args):
        return _fsdk.Matrix2D_Reset(self, *args)

    def Copy(self, *args):
        return _fsdk.Matrix2D_Copy(self, *args)

    def IsIdentity(self, *args):
        return _fsdk.Matrix2D_IsIdentity(self, *args)

    def IsInvertible(self, *args):
        return _fsdk.Matrix2D_IsInvertible(self, *args)

    def Is90Rotated(self, *args):
        return _fsdk.Matrix2D_Is90Rotated(self, *args)

    def IsScaled(self, *args):
        return _fsdk.Matrix2D_IsScaled(self, *args)

    def Translate(self, *args):
        return _fsdk.Matrix2D_Translate(self, *args)

    def TranslateI(self, *args):
        return _fsdk.Matrix2D_TranslateI(self, *args)

    def Scale(self, *args):
        return _fsdk.Matrix2D_Scale(self, *args)

    def Rotate(self, *args):
        return _fsdk.Matrix2D_Rotate(self, *args)

    def RotateAt(self, *args):
        return _fsdk.Matrix2D_RotateAt(self, *args)

    def Shear(self, *args):
        return _fsdk.Matrix2D_Shear(self, *args)

    def MatchRect(self, *args):
        return _fsdk.Matrix2D_MatchRect(self, *args)

    def GetXUnit(self, *args):
        return _fsdk.Matrix2D_GetXUnit(self, *args)

    def GetYUnit(self, *args):
        return _fsdk.Matrix2D_GetYUnit(self, *args)

    def GetUnitRect(self, *args):
        return _fsdk.Matrix2D_GetUnitRect(self, *args)

    def GetUnitArea(self, *args):
        return _fsdk.Matrix2D_GetUnitArea(self, *args)

    def TransformXDistance(self, *args):
        return _fsdk.Matrix2D_TransformXDistance(self, *args)

    def TransformYDistance(self, *args):
        return _fsdk.Matrix2D_TransformYDistance(self, *args)

    def TransformDistance(self, *args):
        return _fsdk.Matrix2D_TransformDistance(self, *args)

    def TransformPoint(self, *args):
        return _fsdk.Matrix2D_TransformPoint(self, *args)

    def TransformRect(self, *args):
        return _fsdk.Matrix2D_TransformRect(self, *args)
    __swig_setmethods__["a"] = _fsdk.Matrix2D_a_set
    __swig_getmethods__["a"] = _fsdk.Matrix2D_a_get
    if _newclass:
        a = _swig_property(_fsdk.Matrix2D_a_get, _fsdk.Matrix2D_a_set)
    __swig_setmethods__["b"] = _fsdk.Matrix2D_b_set
    __swig_getmethods__["b"] = _fsdk.Matrix2D_b_get
    if _newclass:
        b = _swig_property(_fsdk.Matrix2D_b_get, _fsdk.Matrix2D_b_set)
    __swig_setmethods__["c"] = _fsdk.Matrix2D_c_set
    __swig_getmethods__["c"] = _fsdk.Matrix2D_c_get
    if _newclass:
        c = _swig_property(_fsdk.Matrix2D_c_get, _fsdk.Matrix2D_c_set)
    __swig_setmethods__["d"] = _fsdk.Matrix2D_d_set
    __swig_getmethods__["d"] = _fsdk.Matrix2D_d_get
    if _newclass:
        d = _swig_property(_fsdk.Matrix2D_d_get, _fsdk.Matrix2D_d_set)
    __swig_setmethods__["e"] = _fsdk.Matrix2D_e_set
    __swig_getmethods__["e"] = _fsdk.Matrix2D_e_get
    if _newclass:
        e = _swig_property(_fsdk.Matrix2D_e_get, _fsdk.Matrix2D_e_set)
    __swig_setmethods__["f"] = _fsdk.Matrix2D_f_set
    __swig_getmethods__["f"] = _fsdk.Matrix2D_f_get
    if _newclass:
        f = _swig_property(_fsdk.Matrix2D_f_get, _fsdk.Matrix2D_f_set)
    __swig_destroy__ = _fsdk.delete_Matrix2D
    __del__ = lambda self: None
Matrix2D_swigregister = _fsdk.Matrix2D_swigregister
Matrix2D_swigregister(Matrix2D)

FX_CRT_ID = _fsdk.FX_CRT_ID
FX_GE_ID = _fsdk.FX_GE_ID
FX_CODEC_ID = _fsdk.FX_CODEC_ID
FX_DRM_ID = _fsdk.FX_DRM_ID
FX_PDFAPI_ID = _fsdk.FX_PDFAPI_ID
FX_TEXT_ID = _fsdk.FX_TEXT_ID
FX_DOC_ID = _fsdk.FX_DOC_ID
FX_ERR_TYPE_SUCCESS = _fsdk.FX_ERR_TYPE_SUCCESS
FX_ERR_TYPE_MEMORY = _fsdk.FX_ERR_TYPE_MEMORY
FX_ERR_CODE_OVERFLOW = _fsdk.FX_ERR_CODE_OVERFLOW
FX_ERR_CODE_ALLOC_FAILE = _fsdk.FX_ERR_CODE_ALLOC_FAILE
O_BINARY = _fsdk.O_BINARY
O_LARGEFILE = _fsdk.O_LARGEFILE
FX_FILEMODE_Write = _fsdk.FX_FILEMODE_Write
FX_FILEMODE_ReadOnly = _fsdk.FX_FILEMODE_ReadOnly
FX_FILEMODE_Truncate = _fsdk.FX_FILEMODE_Truncate
class FileWriterCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileWriterCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileWriterCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.FileWriterCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fsdk.FileWriterCallback_GetSize(self, *args)

    def Flush(self, *args):
        return _fsdk.FileWriterCallback_Flush(self, *args)

    def WriteBlock(self, *args):
        return _fsdk.FileWriterCallback_WriteBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileWriterCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_FileWriterCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_FileWriterCallback(self)
        return weakref_proxy(self)
FileWriterCallback_swigregister = _fsdk.FileWriterCallback_swigregister
FileWriterCallback_swigregister(FileWriterCallback)

class FileReaderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReaderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileReaderCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.FileReaderCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fsdk.FileReaderCallback_GetSize(self, *args)

    def ReadBlock(self, *args):
        return _fsdk.FileReaderCallback_ReadBlock(self, *args)

    def __init__(self, *args):
        if self.__class__ == FileReaderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_FileReaderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_FileReaderCallback(self)
        return weakref_proxy(self)
FileReaderCallback_swigregister = _fsdk.FileReaderCallback_swigregister
FileReaderCallback_swigregister(FileReaderCallback)

class StreamCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamCallback, name)
    __repr__ = _swig_repr

    def Retain(self, *args):
        return _fsdk.StreamCallback_Retain(self, *args)

    def Release(self, *args):
        return _fsdk.StreamCallback_Release(self, *args)

    def GetSize(self, *args):
        return _fsdk.StreamCallback_GetSize(self, *args)

    def IsEOF(self, *args):
        return _fsdk.StreamCallback_IsEOF(self, *args)

    def GetPosition(self, *args):
        return _fsdk.StreamCallback_GetPosition(self, *args)

    def ReadBlock(self, *args):
        return _fsdk.StreamCallback_ReadBlock(self, *args)

    def WriteBlock(self, *args):
        return _fsdk.StreamCallback_WriteBlock(self, *args)

    def Flush(self, *args):
        return _fsdk.StreamCallback_Flush(self, *args)

    def __init__(self, *args):
        if self.__class__ == StreamCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_StreamCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_StreamCallback(self)
        return weakref_proxy(self)
StreamCallback_swigregister = _fsdk.StreamCallback_swigregister
StreamCallback_swigregister(StreamCallback)

class CompareResultInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompareResultInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompareResultInfo, name)
    __repr__ = _swig_repr
    e_CompareResultTypeNone = _fsdk.CompareResultInfo_e_CompareResultTypeNone
    e_CompareResultTypeDeleteText = _fsdk.CompareResultInfo_e_CompareResultTypeDeleteText
    e_CompareResultTypeInsertText = _fsdk.CompareResultInfo_e_CompareResultTypeInsertText
    e_CompareResultTypeReplaceText = _fsdk.CompareResultInfo_e_CompareResultTypeReplaceText
    e_CompareResultTypeDeleteImage = _fsdk.CompareResultInfo_e_CompareResultTypeDeleteImage
    e_CompareResultTypeInsertImage = _fsdk.CompareResultInfo_e_CompareResultTypeInsertImage
    e_CompareResultTypeReplaceImage = _fsdk.CompareResultInfo_e_CompareResultTypeReplaceImage
    e_CompareResultTypeDeletePath = _fsdk.CompareResultInfo_e_CompareResultTypeDeletePath
    e_CompareResultTypeInsertPath = _fsdk.CompareResultInfo_e_CompareResultTypeInsertPath
    e_CompareResultTypeReplacePath = _fsdk.CompareResultInfo_e_CompareResultTypeReplacePath
    e_CompareResultTypeDeleteShading = _fsdk.CompareResultInfo_e_CompareResultTypeDeleteShading
    e_CompareResultTypeInsertShading = _fsdk.CompareResultInfo_e_CompareResultTypeInsertShading
    e_CompareResultTypeReplaceShading = _fsdk.CompareResultInfo_e_CompareResultTypeReplaceShading
    e_CompareResultTypeDeleteAnnot = _fsdk.CompareResultInfo_e_CompareResultTypeDeleteAnnot
    e_CompareResultTypeInsertAnnot = _fsdk.CompareResultInfo_e_CompareResultTypeInsertAnnot
    e_CompareResultTypeReplaceAnnot = _fsdk.CompareResultInfo_e_CompareResultTypeReplaceAnnot
    e_CompareResultTypeTextAttriChange = _fsdk.CompareResultInfo_e_CompareResultTypeTextAttriChange

    def __init__(self, *args):
        this = _fsdk.new_CompareResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _fsdk.CompareResultInfo_type_set
    __swig_getmethods__["type"] = _fsdk.CompareResultInfo_type_get
    if _newclass:
        type = _swig_property(_fsdk.CompareResultInfo_type_get, _fsdk.CompareResultInfo_type_set)
    __swig_setmethods__["rect_array"] = _fsdk.CompareResultInfo_rect_array_set
    __swig_getmethods__["rect_array"] = _fsdk.CompareResultInfo_rect_array_get
    if _newclass:
        rect_array = _swig_property(_fsdk.CompareResultInfo_rect_array_get, _fsdk.CompareResultInfo_rect_array_set)
    __swig_setmethods__["diff_contents"] = _fsdk.CompareResultInfo_diff_contents_set
    __swig_getmethods__["diff_contents"] = _fsdk.CompareResultInfo_diff_contents_get
    if _newclass:
        diff_contents = _swig_property(_fsdk.CompareResultInfo_diff_contents_get, _fsdk.CompareResultInfo_diff_contents_set)
    __swig_destroy__ = _fsdk.delete_CompareResultInfo
    __del__ = lambda self: None
CompareResultInfo_swigregister = _fsdk.CompareResultInfo_swigregister
CompareResultInfo_swigregister(CompareResultInfo)

class CompareResultInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompareResultInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompareResultInfoArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_CompareResultInfoArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_CompareResultInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.CompareResultInfoArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.CompareResultInfoArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.CompareResultInfoArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.CompareResultInfoArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.CompareResultInfoArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.CompareResultInfoArray_RemoveAll(self, *args)
CompareResultInfoArray_swigregister = _fsdk.CompareResultInfoArray_swigregister
CompareResultInfoArray_swigregister(CompareResultInfoArray)

class CompareResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompareResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompareResults, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CompareResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        return _fsdk.CompareResults_Clear(self, *args)
    __swig_setmethods__["base_doc_results"] = _fsdk.CompareResults_base_doc_results_set
    __swig_getmethods__["base_doc_results"] = _fsdk.CompareResults_base_doc_results_get
    if _newclass:
        base_doc_results = _swig_property(_fsdk.CompareResults_base_doc_results_get, _fsdk.CompareResults_base_doc_results_set)
    __swig_setmethods__["compared_doc_results"] = _fsdk.CompareResults_compared_doc_results_set
    __swig_getmethods__["compared_doc_results"] = _fsdk.CompareResults_compared_doc_results_get
    if _newclass:
        compared_doc_results = _swig_property(_fsdk.CompareResults_compared_doc_results_get, _fsdk.CompareResults_compared_doc_results_set)
    __swig_destroy__ = _fsdk.delete_CompareResults
    __del__ = lambda self: None
CompareResults_swigregister = _fsdk.CompareResults_swigregister
CompareResults_swigregister(CompareResults)

class Comparison(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comparison, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Comparison, name)
    __repr__ = _swig_repr
    e_CompareTypeAll = _fsdk.Comparison_e_CompareTypeAll
    e_CompareTypeText = _fsdk.Comparison_e_CompareTypeText
    e_CompareTypeAnnotation = _fsdk.Comparison_e_CompareTypeAnnotation

    def __init__(self, *args):
        this = _fsdk.new_Comparison(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Comparison
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Comparison___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Comparison___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Comparison_IsEmpty(self, *args)

    def DoCompare(self, *args):
        return _fsdk.Comparison_DoCompare(self, *args)

    def GenerateComparedDoc(self, *args):
        return _fsdk.Comparison_GenerateComparedDoc(self, *args)
Comparison_swigregister = _fsdk.Comparison_swigregister
Comparison_swigregister(Comparison)

class ComplianceEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplianceEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplianceEngine, name)
    __repr__ = _swig_repr
    e_ViewOrPrintConditionAuto = _fsdk.ComplianceEngine_e_ViewOrPrintConditionAuto
    e_ViewOrPrintConditionCoatedGRACoL2006 = _fsdk.ComplianceEngine_e_ViewOrPrintConditionCoatedGRACoL2006
    e_ViewOrPrintConditionISOCoatedv2ECI = _fsdk.ComplianceEngine_e_ViewOrPrintConditionISOCoatedv2ECI
    e_ViewOrPrintConditionJapanColor2001Coated = _fsdk.ComplianceEngine_e_ViewOrPrintConditionJapanColor2001Coated
    e_ViewOrPrintConditionPSOCoatedv3ECI = _fsdk.ComplianceEngine_e_ViewOrPrintConditionPSOCoatedv3ECI
    if _newclass:
        Initialize = staticmethod(_fsdk.ComplianceEngine_Initialize)
    else:
        Initialize = _fsdk.ComplianceEngine_Initialize
    if _newclass:
        Release = staticmethod(_fsdk.ComplianceEngine_Release)
    else:
        Release = _fsdk.ComplianceEngine_Release
    if _newclass:
        InitializeThreadContext = staticmethod(_fsdk.ComplianceEngine_InitializeThreadContext)
    else:
        InitializeThreadContext = _fsdk.ComplianceEngine_InitializeThreadContext
    if _newclass:
        ReleaseThreadContext = staticmethod(_fsdk.ComplianceEngine_ReleaseThreadContext)
    else:
        ReleaseThreadContext = _fsdk.ComplianceEngine_ReleaseThreadContext
    if _newclass:
        SetTempFolderPath = staticmethod(_fsdk.ComplianceEngine_SetTempFolderPath)
    else:
        SetTempFolderPath = _fsdk.ComplianceEngine_SetTempFolderPath
    if _newclass:
        EnableHandleTransparency = staticmethod(_fsdk.ComplianceEngine_EnableHandleTransparency)
    else:
        EnableHandleTransparency = _fsdk.ComplianceEngine_EnableHandleTransparency
    if _newclass:
        SetLanguage = staticmethod(_fsdk.ComplianceEngine_SetLanguage)
    else:
        SetLanguage = _fsdk.ComplianceEngine_SetLanguage

    def __init__(self, *args):
        this = _fsdk.new_ComplianceEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_ComplianceEngine
    __del__ = lambda self: None
ComplianceEngine_swigregister = _fsdk.ComplianceEngine_swigregister
ComplianceEngine_swigregister(ComplianceEngine)

def ComplianceEngine_Initialize(*args):
    return _fsdk.ComplianceEngine_Initialize(*args)
ComplianceEngine_Initialize = _fsdk.ComplianceEngine_Initialize

def ComplianceEngine_Release(*args):
    return _fsdk.ComplianceEngine_Release(*args)
ComplianceEngine_Release = _fsdk.ComplianceEngine_Release

def ComplianceEngine_InitializeThreadContext(*args):
    return _fsdk.ComplianceEngine_InitializeThreadContext(*args)
ComplianceEngine_InitializeThreadContext = _fsdk.ComplianceEngine_InitializeThreadContext

def ComplianceEngine_ReleaseThreadContext(*args):
    return _fsdk.ComplianceEngine_ReleaseThreadContext(*args)
ComplianceEngine_ReleaseThreadContext = _fsdk.ComplianceEngine_ReleaseThreadContext

def ComplianceEngine_SetTempFolderPath(*args):
    return _fsdk.ComplianceEngine_SetTempFolderPath(*args)
ComplianceEngine_SetTempFolderPath = _fsdk.ComplianceEngine_SetTempFolderPath

def ComplianceEngine_EnableHandleTransparency(*args):
    return _fsdk.ComplianceEngine_EnableHandleTransparency(*args)
ComplianceEngine_EnableHandleTransparency = _fsdk.ComplianceEngine_EnableHandleTransparency

def ComplianceEngine_SetLanguage(*args):
    return _fsdk.ComplianceEngine_SetLanguage(*args)
ComplianceEngine_SetLanguage = _fsdk.ComplianceEngine_SetLanguage

class ProgressCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.ProgressCallback_Release(self, *args)

    def UpdateCurrentStateData(self, *args):
        return _fsdk.ProgressCallback_UpdateCurrentStateData(self, *args)

    def __init__(self, *args):
        if self.__class__ == ProgressCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ProgressCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ProgressCallback(self)
        return weakref_proxy(self)
ProgressCallback_swigregister = _fsdk.ProgressCallback_swigregister
ProgressCallback_swigregister(ProgressCallback)

class PreflightSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreflightSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreflightSettingData, name)
    __repr__ = _swig_repr
    e_LibraryTypeFoxit = _fsdk.PreflightSettingData_e_LibraryTypeFoxit
    e_LibraryTypePDFStandards = _fsdk.PreflightSettingData_e_LibraryTypePDFStandards
    e_LibraryTypePrepressColorTransparency = _fsdk.PreflightSettingData_e_LibraryTypePrepressColorTransparency
    e_OperateTypeProfiles = _fsdk.PreflightSettingData_e_OperateTypeProfiles
    e_OperateTypeSingleChecks = _fsdk.PreflightSettingData_e_OperateTypeSingleChecks
    e_OperateTypeSingleFixups = _fsdk.PreflightSettingData_e_OperateTypeSingleFixups

    def __init__(self, *args):
        this = _fsdk.new_PreflightSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["preflight_key"] = _fsdk.PreflightSettingData_preflight_key_set
    __swig_getmethods__["preflight_key"] = _fsdk.PreflightSettingData_preflight_key_get
    if _newclass:
        preflight_key = _swig_property(_fsdk.PreflightSettingData_preflight_key_get, _fsdk.PreflightSettingData_preflight_key_set)
    __swig_setmethods__["operate_type"] = _fsdk.PreflightSettingData_operate_type_set
    __swig_getmethods__["operate_type"] = _fsdk.PreflightSettingData_operate_type_get
    if _newclass:
        operate_type = _swig_property(_fsdk.PreflightSettingData_operate_type_get, _fsdk.PreflightSettingData_operate_type_set)
    __swig_setmethods__["src_pdf_path"] = _fsdk.PreflightSettingData_src_pdf_path_set
    __swig_getmethods__["src_pdf_path"] = _fsdk.PreflightSettingData_src_pdf_path_get
    if _newclass:
        src_pdf_path = _swig_property(_fsdk.PreflightSettingData_src_pdf_path_get, _fsdk.PreflightSettingData_src_pdf_path_set)
    __swig_setmethods__["saved_pdf_path"] = _fsdk.PreflightSettingData_saved_pdf_path_set
    __swig_getmethods__["saved_pdf_path"] = _fsdk.PreflightSettingData_saved_pdf_path_get
    if _newclass:
        saved_pdf_path = _swig_property(_fsdk.PreflightSettingData_saved_pdf_path_get, _fsdk.PreflightSettingData_saved_pdf_path_set)
    __swig_setmethods__["first_page_index"] = _fsdk.PreflightSettingData_first_page_index_set
    __swig_getmethods__["first_page_index"] = _fsdk.PreflightSettingData_first_page_index_get
    if _newclass:
        first_page_index = _swig_property(_fsdk.PreflightSettingData_first_page_index_get, _fsdk.PreflightSettingData_first_page_index_set)
    __swig_setmethods__["last_page_index"] = _fsdk.PreflightSettingData_last_page_index_set
    __swig_getmethods__["last_page_index"] = _fsdk.PreflightSettingData_last_page_index_get
    if _newclass:
        last_page_index = _swig_property(_fsdk.PreflightSettingData_last_page_index_get, _fsdk.PreflightSettingData_last_page_index_set)
    __swig_destroy__ = _fsdk.delete_PreflightSettingData
    __del__ = lambda self: None
PreflightSettingData_swigregister = _fsdk.PreflightSettingData_swigregister
PreflightSettingData_swigregister(PreflightSettingData)

class PreflightReportSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreflightReportSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreflightReportSettingData, name)
    __repr__ = _swig_repr
    e_ReportFileFormatTypePdf = _fsdk.PreflightReportSettingData_e_ReportFileFormatTypePdf
    e_ReportFileFormatTypeXml = _fsdk.PreflightReportSettingData_e_ReportFileFormatTypeXml
    e_ReportFileFormatTypeTxt = _fsdk.PreflightReportSettingData_e_ReportFileFormatTypeTxt
    e_ReportFileFormatTypeHtml = _fsdk.PreflightReportSettingData_e_ReportFileFormatTypeHtml
    e_ProblemsHighlightMethodTransparentMasks = _fsdk.PreflightReportSettingData_e_ProblemsHighlightMethodTransparentMasks
    e_ProblemsHighlightMethodLayers = _fsdk.PreflightReportSettingData_e_ProblemsHighlightMethodLayers

    def __init__(self, *args):
        this = _fsdk.new_PreflightReportSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["report_file_format_type"] = _fsdk.PreflightReportSettingData_report_file_format_type_set
    __swig_getmethods__["report_file_format_type"] = _fsdk.PreflightReportSettingData_report_file_format_type_get
    if _newclass:
        report_file_format_type = _swig_property(_fsdk.PreflightReportSettingData_report_file_format_type_get, _fsdk.PreflightReportSettingData_report_file_format_type_set)
    __swig_setmethods__["to_generate_overview"] = _fsdk.PreflightReportSettingData_to_generate_overview_set
    __swig_getmethods__["to_generate_overview"] = _fsdk.PreflightReportSettingData_to_generate_overview_get
    if _newclass:
        to_generate_overview = _swig_property(_fsdk.PreflightReportSettingData_to_generate_overview_get, _fsdk.PreflightReportSettingData_to_generate_overview_set)
    __swig_setmethods__["to_highlight_problems"] = _fsdk.PreflightReportSettingData_to_highlight_problems_set
    __swig_getmethods__["to_highlight_problems"] = _fsdk.PreflightReportSettingData_to_highlight_problems_get
    if _newclass:
        to_highlight_problems = _swig_property(_fsdk.PreflightReportSettingData_to_highlight_problems_get, _fsdk.PreflightReportSettingData_to_highlight_problems_set)
    __swig_setmethods__["problems_highlight_method"] = _fsdk.PreflightReportSettingData_problems_highlight_method_set
    __swig_getmethods__["problems_highlight_method"] = _fsdk.PreflightReportSettingData_problems_highlight_method_get
    if _newclass:
        problems_highlight_method = _swig_property(_fsdk.PreflightReportSettingData_problems_highlight_method_get, _fsdk.PreflightReportSettingData_problems_highlight_method_set)
    __swig_setmethods__["report_file_path"] = _fsdk.PreflightReportSettingData_report_file_path_set
    __swig_getmethods__["report_file_path"] = _fsdk.PreflightReportSettingData_report_file_path_get
    if _newclass:
        report_file_path = _swig_property(_fsdk.PreflightReportSettingData_report_file_path_get, _fsdk.PreflightReportSettingData_report_file_path_set)
    __swig_destroy__ = _fsdk.delete_PreflightReportSettingData
    __del__ = lambda self: None
PreflightReportSettingData_swigregister = _fsdk.PreflightReportSettingData_swigregister
PreflightReportSettingData_swigregister(PreflightReportSettingData)

class Preflight(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Preflight, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Preflight, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_Preflight
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Preflight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Preflight___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Preflight___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Preflight_IsEmpty(self, *args)

    def GetGroupNamesArray(self, *args):
        return _fsdk.Preflight_GetGroupNamesArray(self, *args)

    def GetItemKeysArray(self, *args):
        return _fsdk.Preflight_GetItemKeysArray(self, *args)

    def Analyze(self, *args):
        return _fsdk.Preflight_Analyze(self, *args)

    def AnalyzeAndFixup(self, *args):
        return _fsdk.Preflight_AnalyzeAndFixup(self, *args)

    def GenerateReport(self, *args):
        return _fsdk.Preflight_GenerateReport(self, *args)

    def CanFixup(self, *args):
        return _fsdk.Preflight_CanFixup(self, *args)
Preflight_swigregister = _fsdk.Preflight_swigregister
Preflight_swigregister(Preflight)

class FixupData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixupData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FixupData, name)
    __repr__ = _swig_repr
    e_FixupStateSuccess = _fsdk.FixupData_e_FixupStateSuccess
    e_FixupStateFailure = _fsdk.FixupData_e_FixupStateFailure
    e_FixupStateNotRequired = _fsdk.FixupData_e_FixupStateNotRequired

    def __init__(self, *args):
        this = _fsdk.new_FixupData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FixupData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FixupData___ne__(self, *args)
    __swig_setmethods__["used_count"] = _fsdk.FixupData_used_count_set
    __swig_getmethods__["used_count"] = _fsdk.FixupData_used_count_get
    if _newclass:
        used_count = _swig_property(_fsdk.FixupData_used_count_get, _fsdk.FixupData_used_count_set)
    __swig_setmethods__["state"] = _fsdk.FixupData_state_set
    __swig_getmethods__["state"] = _fsdk.FixupData_state_get
    if _newclass:
        state = _swig_property(_fsdk.FixupData_state_get, _fsdk.FixupData_state_set)
    __swig_setmethods__["name"] = _fsdk.FixupData_name_set
    __swig_getmethods__["name"] = _fsdk.FixupData_name_get
    if _newclass:
        name = _swig_property(_fsdk.FixupData_name_get, _fsdk.FixupData_name_set)
    __swig_setmethods__["comment"] = _fsdk.FixupData_comment_set
    __swig_getmethods__["comment"] = _fsdk.FixupData_comment_get
    if _newclass:
        comment = _swig_property(_fsdk.FixupData_comment_get, _fsdk.FixupData_comment_set)
    __swig_setmethods__["reasons"] = _fsdk.FixupData_reasons_set
    __swig_getmethods__["reasons"] = _fsdk.FixupData_reasons_get
    if _newclass:
        reasons = _swig_property(_fsdk.FixupData_reasons_get, _fsdk.FixupData_reasons_set)
    __swig_destroy__ = _fsdk.delete_FixupData
    __del__ = lambda self: None
FixupData_swigregister = _fsdk.FixupData_swigregister
FixupData_swigregister(FixupData)

class HitData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HitData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HitData, name)
    __repr__ = _swig_repr
    e_CheckSeverityInfo = _fsdk.HitData_e_CheckSeverityInfo
    e_CheckSeverityWarning = _fsdk.HitData_e_CheckSeverityWarning
    e_CheckSeverityError = _fsdk.HitData_e_CheckSeverityError

    def __init__(self, *args):
        this = _fsdk.new_HitData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.HitData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.HitData___ne__(self, *args)
    __swig_setmethods__["triggered_count"] = _fsdk.HitData_triggered_count_set
    __swig_getmethods__["triggered_count"] = _fsdk.HitData_triggered_count_get
    if _newclass:
        triggered_count = _swig_property(_fsdk.HitData_triggered_count_get, _fsdk.HitData_triggered_count_set)
    __swig_setmethods__["severity"] = _fsdk.HitData_severity_set
    __swig_getmethods__["severity"] = _fsdk.HitData_severity_get
    if _newclass:
        severity = _swig_property(_fsdk.HitData_severity_get, _fsdk.HitData_severity_set)
    __swig_setmethods__["name"] = _fsdk.HitData_name_set
    __swig_getmethods__["name"] = _fsdk.HitData_name_get
    if _newclass:
        name = _swig_property(_fsdk.HitData_name_get, _fsdk.HitData_name_set)
    __swig_setmethods__["comment"] = _fsdk.HitData_comment_set
    __swig_getmethods__["comment"] = _fsdk.HitData_comment_get
    if _newclass:
        comment = _swig_property(_fsdk.HitData_comment_get, _fsdk.HitData_comment_set)
    __swig_setmethods__["trigger_values"] = _fsdk.HitData_trigger_values_set
    __swig_getmethods__["trigger_values"] = _fsdk.HitData_trigger_values_get
    if _newclass:
        trigger_values = _swig_property(_fsdk.HitData_trigger_values_get, _fsdk.HitData_trigger_values_set)
    __swig_setmethods__["page_index"] = _fsdk.HitData_page_index_set
    __swig_getmethods__["page_index"] = _fsdk.HitData_page_index_get
    if _newclass:
        page_index = _swig_property(_fsdk.HitData_page_index_get, _fsdk.HitData_page_index_set)
    __swig_destroy__ = _fsdk.delete_HitData
    __del__ = lambda self: None
HitData_swigregister = _fsdk.HitData_swigregister
HitData_swigregister(HitData)

class ResultInformation(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResultInformation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_ResultInformation
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ResultInformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ResultInformation___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ResultInformation___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ResultInformation_IsEmpty(self, *args)

    def GetFixupDataCount(self, *args):
        return _fsdk.ResultInformation_GetFixupDataCount(self, *args)

    def GetFixupData(self, *args):
        return _fsdk.ResultInformation_GetFixupData(self, *args)

    def GetHitDataCount(self, *args):
        return _fsdk.ResultInformation_GetHitDataCount(self, *args)

    def GetHitData(self, *args):
        return _fsdk.ResultInformation_GetHitData(self, *args)
ResultInformation_swigregister = _fsdk.ResultInformation_swigregister
ResultInformation_swigregister(ResultInformation)

class PDFACompliance(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFACompliance, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFACompliance, name)
    __repr__ = _swig_repr
    e_VersionPDFA1a = _fsdk.PDFACompliance_e_VersionPDFA1a
    e_VersionPDFA1b = _fsdk.PDFACompliance_e_VersionPDFA1b
    e_VersionPDFA2a = _fsdk.PDFACompliance_e_VersionPDFA2a
    e_VersionPDFA2b = _fsdk.PDFACompliance_e_VersionPDFA2b
    e_VersionPDFA2u = _fsdk.PDFACompliance_e_VersionPDFA2u
    e_VersionPDFA3a = _fsdk.PDFACompliance_e_VersionPDFA3a
    e_VersionPDFA3b = _fsdk.PDFACompliance_e_VersionPDFA3b
    e_VersionPDFA3u = _fsdk.PDFACompliance_e_VersionPDFA3u
    e_VersionPDFA1bWithoutFBC = _fsdk.PDFACompliance_e_VersionPDFA1bWithoutFBC
    e_VersionPDFA2bWithoutFBC = _fsdk.PDFACompliance_e_VersionPDFA2bWithoutFBC
    e_VersionPDFA3bWithoutFBC = _fsdk.PDFACompliance_e_VersionPDFA3bWithoutFBC
    __swig_destroy__ = _fsdk.delete_PDFACompliance
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFACompliance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFACompliance___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFACompliance___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFACompliance_IsEmpty(self, *args)

    def Verify(self, *args):
        return _fsdk.PDFACompliance_Verify(self, *args)

    def ConvertPDFFile(self, *args):
        return _fsdk.PDFACompliance_ConvertPDFFile(self, *args)
PDFACompliance_swigregister = _fsdk.PDFACompliance_swigregister
PDFACompliance_swigregister(PDFACompliance)

class PDFXCompliance(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFXCompliance, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFXCompliance, name)
    __repr__ = _swig_repr
    e_VersionPDFX1a = _fsdk.PDFXCompliance_e_VersionPDFX1a
    e_VersionPDFX3 = _fsdk.PDFXCompliance_e_VersionPDFX3
    e_VersionPDFX4 = _fsdk.PDFXCompliance_e_VersionPDFX4
    e_VersionPDFX4p = _fsdk.PDFXCompliance_e_VersionPDFX4p
    e_VersionPDFX1aCoatedGRACoL2006 = _fsdk.PDFXCompliance_e_VersionPDFX1aCoatedGRACoL2006
    e_VersionPDFX1aISOCoatedv2ECI = _fsdk.PDFXCompliance_e_VersionPDFX1aISOCoatedv2ECI
    e_VersionPDFX1aJapanColor2001Coated = _fsdk.PDFXCompliance_e_VersionPDFX1aJapanColor2001Coated
    e_VersionPDFX1aPSOCoatedv3ECI = _fsdk.PDFXCompliance_e_VersionPDFX1aPSOCoatedv3ECI
    e_VersionPDFX3CoatedGRACoL2006 = _fsdk.PDFXCompliance_e_VersionPDFX3CoatedGRACoL2006
    e_VersionPDFX3ISOCoatedv2ECI = _fsdk.PDFXCompliance_e_VersionPDFX3ISOCoatedv2ECI
    e_VersionPDFX3JapanColor2001Coated = _fsdk.PDFXCompliance_e_VersionPDFX3JapanColor2001Coated
    e_VersionPDFX3PSOCoatedv3ECI = _fsdk.PDFXCompliance_e_VersionPDFX3PSOCoatedv3ECI
    e_VersionPDFX4CoatedGRACoL2006 = _fsdk.PDFXCompliance_e_VersionPDFX4CoatedGRACoL2006
    e_VersionPDFX4ISOCoatedv2ECI = _fsdk.PDFXCompliance_e_VersionPDFX4ISOCoatedv2ECI
    e_VersionPDFX4JapanColor2001Coated = _fsdk.PDFXCompliance_e_VersionPDFX4JapanColor2001Coated
    e_VersionPDFX4PSOCoatedv3ECI = _fsdk.PDFXCompliance_e_VersionPDFX4PSOCoatedv3ECI
    e_VersionPDFX4AndCLLVISOCoatedv2ECI = _fsdk.PDFXCompliance_e_VersionPDFX4AndCLLVISOCoatedv2ECI
    __swig_destroy__ = _fsdk.delete_PDFXCompliance
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFXCompliance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFXCompliance___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFXCompliance___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFXCompliance_IsEmpty(self, *args)

    def Verify(self, *args):
        return _fsdk.PDFXCompliance_Verify(self, *args)

    def ConvertPDFFile(self, *args):
        return _fsdk.PDFXCompliance_ConvertPDFFile(self, *args)
PDFXCompliance_swigregister = _fsdk.PDFXCompliance_swigregister
PDFXCompliance_swigregister(PDFXCompliance)

class PDFECompliance(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFECompliance, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFECompliance, name)
    __repr__ = _swig_repr
    e_VersionPDFE1 = _fsdk.PDFECompliance_e_VersionPDFE1
    __swig_destroy__ = _fsdk.delete_PDFECompliance
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFECompliance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFECompliance___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFECompliance___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFECompliance_IsEmpty(self, *args)

    def Verify(self, *args):
        return _fsdk.PDFECompliance_Verify(self, *args)

    def ConvertPDFFile(self, *args):
        return _fsdk.PDFECompliance_ConvertPDFFile(self, *args)
PDFECompliance_swigregister = _fsdk.PDFECompliance_swigregister
PDFECompliance_swigregister(PDFECompliance)

class PDFCompliance(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFCompliance, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFCompliance, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PDFCompliance
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFCompliance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFCompliance___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFCompliance___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFCompliance_IsEmpty(self, *args)

    def Verify(self, *args):
        return _fsdk.PDFCompliance_Verify(self, *args)

    def ConvertPDFFile(self, *args):
        return _fsdk.PDFCompliance_ConvertPDFFile(self, *args)
PDFCompliance_swigregister = _fsdk.PDFCompliance_swigregister
PDFCompliance_swigregister(PDFCompliance)

class HTML2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTML2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTML2PDFSettingData, name)
    __repr__ = _swig_repr
    e_PageModeSinglePage = _fsdk.HTML2PDFSettingData_e_PageModeSinglePage
    e_PageModeMultiplePage = _fsdk.HTML2PDFSettingData_e_PageModeMultiplePage
    e_ScalingModeNone = _fsdk.HTML2PDFSettingData_e_ScalingModeNone
    e_ScalingModeScale = _fsdk.HTML2PDFSettingData_e_ScalingModeScale
    e_ScalingModeEnlarge = _fsdk.HTML2PDFSettingData_e_ScalingModeEnlarge
    e_EncodingFormatDefault = _fsdk.HTML2PDFSettingData_e_EncodingFormatDefault
    e_EncodingFormatASCII = _fsdk.HTML2PDFSettingData_e_EncodingFormatASCII
    e_EncodingFormatLatin2 = _fsdk.HTML2PDFSettingData_e_EncodingFormatLatin2
    e_EncodingFormatLatin3 = _fsdk.HTML2PDFSettingData_e_EncodingFormatLatin3
    e_EncodingFormatLatin4 = _fsdk.HTML2PDFSettingData_e_EncodingFormatLatin4
    e_EncodingFormatLatin5 = _fsdk.HTML2PDFSettingData_e_EncodingFormatLatin5
    e_EncodingFormatLatin6 = _fsdk.HTML2PDFSettingData_e_EncodingFormatLatin6
    e_EncodingFormatISO_8859_5 = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_8859_5
    e_EncodingFormatArabic = _fsdk.HTML2PDFSettingData_e_EncodingFormatArabic
    e_EncodingFormatGreek = _fsdk.HTML2PDFSettingData_e_EncodingFormatGreek
    e_EncodingFormatHebrew = _fsdk.HTML2PDFSettingData_e_EncodingFormatHebrew
    e_EncodingFormatEUC_JP = _fsdk.HTML2PDFSettingData_e_EncodingFormatEUC_JP
    e_EncodingFormatSJS = _fsdk.HTML2PDFSettingData_e_EncodingFormatSJS
    e_EncodingFormatJIS = _fsdk.HTML2PDFSettingData_e_EncodingFormatJIS
    e_EncodingFormatBIG5 = _fsdk.HTML2PDFSettingData_e_EncodingFormatBIG5
    e_EncodingFormatGB = _fsdk.HTML2PDFSettingData_e_EncodingFormatGB
    e_EncodingFormatEUC_CN = _fsdk.HTML2PDFSettingData_e_EncodingFormatEUC_CN
    e_EncodingFormatKSC = _fsdk.HTML2PDFSettingData_e_EncodingFormatKSC
    e_EncodingFormatUnicode = _fsdk.HTML2PDFSettingData_e_EncodingFormatUnicode
    e_EncodingFormatEUC = _fsdk.HTML2PDFSettingData_e_EncodingFormatEUC
    e_EncodingFormatCNS = _fsdk.HTML2PDFSettingData_e_EncodingFormatCNS
    e_EncodingFormatBIG5_CP950 = _fsdk.HTML2PDFSettingData_e_EncodingFormatBIG5_CP950
    e_EncodingFormatASCII_7_bit = _fsdk.HTML2PDFSettingData_e_EncodingFormatASCII_7_bit
    e_EncodingFormatKOI8R = _fsdk.HTML2PDFSettingData_e_EncodingFormatKOI8R
    e_EncodingFormatCP852 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP852
    e_EncodingFormatCP866 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP866
    e_EncodingFormatCP874 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP874
    e_EncodingFormatCP932 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP932
    e_EncodingFormatCP1250 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1250
    e_EncodingFormatCP1251 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1251
    e_EncodingFormatCP1252 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1252
    e_EncodingFormatCP1253 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1253
    e_EncodingFormatCP1254 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1254
    e_EncodingFormatCP1255 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1255
    e_EncodingFormatCP1256 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1256
    e_EncodingFormatCP1257 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCP1257
    e_EncodingFormatKOI8U = _fsdk.HTML2PDFSettingData_e_EncodingFormatKOI8U
    e_EncodingFormatISO_8859_15 = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_8859_15
    e_EncodingFormatISO_8859_11 = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_8859_11
    e_EncodingFormatISO_8859_8_I = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_8859_8_I
    e_EncodingFormatVISUAL = _fsdk.HTML2PDFSettingData_e_EncodingFormatVISUAL
    e_EncodingFormatCSN_369103 = _fsdk.HTML2PDFSettingData_e_EncodingFormatCSN_369103
    e_EncodingFormatISO_8859_13 = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_8859_13
    e_EncodingFormatISO_2022_KR = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_2022_KR
    e_EncodingFormatGBK = _fsdk.HTML2PDFSettingData_e_EncodingFormatGBK
    e_EncodingFormatGB18030 = _fsdk.HTML2PDFSettingData_e_EncodingFormatGB18030
    e_EncodingFormatBIG5_HKSCS = _fsdk.HTML2PDFSettingData_e_EncodingFormatBIG5_HKSCS
    e_EncodingFormatISO_2022_CN = _fsdk.HTML2PDFSettingData_e_EncodingFormatISO_2022_CN
    e_EncodingFormatTSCII = _fsdk.HTML2PDFSettingData_e_EncodingFormatTSCII
    e_EncodingFormatTAM = _fsdk.HTML2PDFSettingData_e_EncodingFormatTAM
    e_EncodingFormatTAB = _fsdk.HTML2PDFSettingData_e_EncodingFormatTAB
    e_EncodingFormatJAGRAN = _fsdk.HTML2PDFSettingData_e_EncodingFormatJAGRAN
    e_EncodingFormatMACINTOSH = _fsdk.HTML2PDFSettingData_e_EncodingFormatMACINTOSH
    e_EncodingFormatUTF7 = _fsdk.HTML2PDFSettingData_e_EncodingFormatUTF7
    e_EncodingFormatBHASKAR = _fsdk.HTML2PDFSettingData_e_EncodingFormatBHASKAR
    e_EncodingFormatHTCHANAKYA = _fsdk.HTML2PDFSettingData_e_EncodingFormatHTCHANAKYA
    e_EncodingFormatUTF_16BE = _fsdk.HTML2PDFSettingData_e_EncodingFormatUTF_16BE
    e_EncodingFormatUTF_16LE = _fsdk.HTML2PDFSettingData_e_EncodingFormatUTF_16LE
    e_EncodingFormatUTF_32BE = _fsdk.HTML2PDFSettingData_e_EncodingFormatUTF_32BE
    e_EncodingFormatUTF_32LE = _fsdk.HTML2PDFSettingData_e_EncodingFormatUTF_32LE
    e_EncodingFormatX_BINARYENC = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_BINARYENC
    e_EncodingFormatHZ_GB_2312 = _fsdk.HTML2PDFSettingData_e_EncodingFormatHZ_GB_2312
    e_EncodingFormatX_UTF8UTF8 = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_UTF8UTF8
    e_EncodingFormatX_TAM_ELANGO = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_ELANGO
    e_EncodingFormatX_TAM_LTTMBARANI = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_LTTMBARANI
    e_EncodingFormatX_TAM_SHREE = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_SHREE
    e_EncodingFormatX_TAM_TBOOMIS = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_TBOOMIS
    e_EncodingFormatX_TAM_TMNEWS = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_TMNEWS
    e_EncodingFormatX_TAM_WEBTAMIL = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_TAM_WEBTAMIL
    e_EncodingFormatX_KDDI_Shift_JIS = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_KDDI_Shift_JIS
    e_EncodingFormatX_DoCoMo_Shift_JIS = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_DoCoMo_Shift_JIS
    e_EncodingFormatX_SoftBank_Shift_JIS = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_SoftBank_Shift_JIS
    e_EncodingFormatX_KDDI_ISO_2022_JP = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_KDDI_ISO_2022_JP
    e_EncodingFormatX_SoftBank_ISO_2022_JP = _fsdk.HTML2PDFSettingData_e_EncodingFormatX_SoftBank_ISO_2022_JP
    e_MediaStyleScreen = _fsdk.HTML2PDFSettingData_e_MediaStyleScreen
    e_MediaStylePrint = _fsdk.HTML2PDFSettingData_e_MediaStylePrint

    def __init__(self, *args):
        this = _fsdk.new_HTML2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.HTML2PDFSettingData_Set(self, *args)
    __swig_setmethods__["page_width"] = _fsdk.HTML2PDFSettingData_page_width_set
    __swig_getmethods__["page_width"] = _fsdk.HTML2PDFSettingData_page_width_get
    if _newclass:
        page_width = _swig_property(_fsdk.HTML2PDFSettingData_page_width_get, _fsdk.HTML2PDFSettingData_page_width_set)
    __swig_setmethods__["page_height"] = _fsdk.HTML2PDFSettingData_page_height_set
    __swig_getmethods__["page_height"] = _fsdk.HTML2PDFSettingData_page_height_get
    if _newclass:
        page_height = _swig_property(_fsdk.HTML2PDFSettingData_page_height_get, _fsdk.HTML2PDFSettingData_page_height_set)
    __swig_setmethods__["is_to_page_scale"] = _fsdk.HTML2PDFSettingData_is_to_page_scale_set
    __swig_getmethods__["is_to_page_scale"] = _fsdk.HTML2PDFSettingData_is_to_page_scale_get
    if _newclass:
        is_to_page_scale = _swig_property(_fsdk.HTML2PDFSettingData_is_to_page_scale_get, _fsdk.HTML2PDFSettingData_is_to_page_scale_set)
    __swig_setmethods__["page_margin"] = _fsdk.HTML2PDFSettingData_page_margin_set
    __swig_getmethods__["page_margin"] = _fsdk.HTML2PDFSettingData_page_margin_get
    if _newclass:
        page_margin = _swig_property(_fsdk.HTML2PDFSettingData_page_margin_get, _fsdk.HTML2PDFSettingData_page_margin_set)
    __swig_setmethods__["rotate_degrees"] = _fsdk.HTML2PDFSettingData_rotate_degrees_set
    __swig_getmethods__["rotate_degrees"] = _fsdk.HTML2PDFSettingData_rotate_degrees_get
    if _newclass:
        rotate_degrees = _swig_property(_fsdk.HTML2PDFSettingData_rotate_degrees_get, _fsdk.HTML2PDFSettingData_rotate_degrees_set)
    __swig_setmethods__["is_convert_link"] = _fsdk.HTML2PDFSettingData_is_convert_link_set
    __swig_getmethods__["is_convert_link"] = _fsdk.HTML2PDFSettingData_is_convert_link_get
    if _newclass:
        is_convert_link = _swig_property(_fsdk.HTML2PDFSettingData_is_convert_link_get, _fsdk.HTML2PDFSettingData_is_convert_link_set)
    __swig_setmethods__["is_generate_tag"] = _fsdk.HTML2PDFSettingData_is_generate_tag_set
    __swig_getmethods__["is_generate_tag"] = _fsdk.HTML2PDFSettingData_is_generate_tag_get
    if _newclass:
        is_generate_tag = _swig_property(_fsdk.HTML2PDFSettingData_is_generate_tag_get, _fsdk.HTML2PDFSettingData_is_generate_tag_set)
    __swig_setmethods__["page_mode"] = _fsdk.HTML2PDFSettingData_page_mode_set
    __swig_getmethods__["page_mode"] = _fsdk.HTML2PDFSettingData_page_mode_get
    if _newclass:
        page_mode = _swig_property(_fsdk.HTML2PDFSettingData_page_mode_get, _fsdk.HTML2PDFSettingData_page_mode_set)
    __swig_setmethods__["to_generate_bookmarks"] = _fsdk.HTML2PDFSettingData_to_generate_bookmarks_set
    __swig_getmethods__["to_generate_bookmarks"] = _fsdk.HTML2PDFSettingData_to_generate_bookmarks_get
    if _newclass:
        to_generate_bookmarks = _swig_property(_fsdk.HTML2PDFSettingData_to_generate_bookmarks_get, _fsdk.HTML2PDFSettingData_to_generate_bookmarks_set)
    __swig_setmethods__["scaling_mode"] = _fsdk.HTML2PDFSettingData_scaling_mode_set
    __swig_getmethods__["scaling_mode"] = _fsdk.HTML2PDFSettingData_scaling_mode_get
    if _newclass:
        scaling_mode = _swig_property(_fsdk.HTML2PDFSettingData_scaling_mode_get, _fsdk.HTML2PDFSettingData_scaling_mode_set)
    __swig_setmethods__["encoding_format"] = _fsdk.HTML2PDFSettingData_encoding_format_set
    __swig_getmethods__["encoding_format"] = _fsdk.HTML2PDFSettingData_encoding_format_get
    if _newclass:
        encoding_format = _swig_property(_fsdk.HTML2PDFSettingData_encoding_format_get, _fsdk.HTML2PDFSettingData_encoding_format_set)
    __swig_setmethods__["to_render_images"] = _fsdk.HTML2PDFSettingData_to_render_images_set
    __swig_getmethods__["to_render_images"] = _fsdk.HTML2PDFSettingData_to_render_images_get
    if _newclass:
        to_render_images = _swig_property(_fsdk.HTML2PDFSettingData_to_render_images_get, _fsdk.HTML2PDFSettingData_to_render_images_set)
    __swig_setmethods__["to_remove_underline_for_link"] = _fsdk.HTML2PDFSettingData_to_remove_underline_for_link_set
    __swig_getmethods__["to_remove_underline_for_link"] = _fsdk.HTML2PDFSettingData_to_remove_underline_for_link_get
    if _newclass:
        to_remove_underline_for_link = _swig_property(_fsdk.HTML2PDFSettingData_to_remove_underline_for_link_get, _fsdk.HTML2PDFSettingData_to_remove_underline_for_link_set)
    __swig_setmethods__["to_set_headerfooter"] = _fsdk.HTML2PDFSettingData_to_set_headerfooter_set
    __swig_getmethods__["to_set_headerfooter"] = _fsdk.HTML2PDFSettingData_to_set_headerfooter_get
    if _newclass:
        to_set_headerfooter = _swig_property(_fsdk.HTML2PDFSettingData_to_set_headerfooter_get, _fsdk.HTML2PDFSettingData_to_set_headerfooter_set)
    __swig_setmethods__["headerfooter_title"] = _fsdk.HTML2PDFSettingData_headerfooter_title_set
    __swig_getmethods__["headerfooter_title"] = _fsdk.HTML2PDFSettingData_headerfooter_title_get
    if _newclass:
        headerfooter_title = _swig_property(_fsdk.HTML2PDFSettingData_headerfooter_title_get, _fsdk.HTML2PDFSettingData_headerfooter_title_set)
    __swig_setmethods__["headerfooter_url"] = _fsdk.HTML2PDFSettingData_headerfooter_url_set
    __swig_getmethods__["headerfooter_url"] = _fsdk.HTML2PDFSettingData_headerfooter_url_get
    if _newclass:
        headerfooter_url = _swig_property(_fsdk.HTML2PDFSettingData_headerfooter_url_get, _fsdk.HTML2PDFSettingData_headerfooter_url_set)
    __swig_setmethods__["bookmark_root_name"] = _fsdk.HTML2PDFSettingData_bookmark_root_name_set
    __swig_getmethods__["bookmark_root_name"] = _fsdk.HTML2PDFSettingData_bookmark_root_name_get
    if _newclass:
        bookmark_root_name = _swig_property(_fsdk.HTML2PDFSettingData_bookmark_root_name_get, _fsdk.HTML2PDFSettingData_bookmark_root_name_set)
    __swig_setmethods__["to_resize_objects"] = _fsdk.HTML2PDFSettingData_to_resize_objects_set
    __swig_getmethods__["to_resize_objects"] = _fsdk.HTML2PDFSettingData_to_resize_objects_get
    if _newclass:
        to_resize_objects = _swig_property(_fsdk.HTML2PDFSettingData_to_resize_objects_get, _fsdk.HTML2PDFSettingData_to_resize_objects_set)
    __swig_setmethods__["to_print_background"] = _fsdk.HTML2PDFSettingData_to_print_background_set
    __swig_getmethods__["to_print_background"] = _fsdk.HTML2PDFSettingData_to_print_background_get
    if _newclass:
        to_print_background = _swig_property(_fsdk.HTML2PDFSettingData_to_print_background_get, _fsdk.HTML2PDFSettingData_to_print_background_set)
    __swig_setmethods__["to_optimize_tag_tree"] = _fsdk.HTML2PDFSettingData_to_optimize_tag_tree_set
    __swig_getmethods__["to_optimize_tag_tree"] = _fsdk.HTML2PDFSettingData_to_optimize_tag_tree_get
    if _newclass:
        to_optimize_tag_tree = _swig_property(_fsdk.HTML2PDFSettingData_to_optimize_tag_tree_get, _fsdk.HTML2PDFSettingData_to_optimize_tag_tree_set)
    __swig_setmethods__["media_style"] = _fsdk.HTML2PDFSettingData_media_style_set
    __swig_getmethods__["media_style"] = _fsdk.HTML2PDFSettingData_media_style_get
    if _newclass:
        media_style = _swig_property(_fsdk.HTML2PDFSettingData_media_style_get, _fsdk.HTML2PDFSettingData_media_style_set)
    __swig_setmethods__["to_load_active_content"] = _fsdk.HTML2PDFSettingData_to_load_active_content_set
    __swig_getmethods__["to_load_active_content"] = _fsdk.HTML2PDFSettingData_to_load_active_content_get
    if _newclass:
        to_load_active_content = _swig_property(_fsdk.HTML2PDFSettingData_to_load_active_content_get, _fsdk.HTML2PDFSettingData_to_load_active_content_set)
    __swig_setmethods__["to_disable_sandbox"] = _fsdk.HTML2PDFSettingData_to_disable_sandbox_set
    __swig_getmethods__["to_disable_sandbox"] = _fsdk.HTML2PDFSettingData_to_disable_sandbox_get
    if _newclass:
        to_disable_sandbox = _swig_property(_fsdk.HTML2PDFSettingData_to_disable_sandbox_get, _fsdk.HTML2PDFSettingData_to_disable_sandbox_set)
    __swig_setmethods__["to_use_blacklist"] = _fsdk.HTML2PDFSettingData_to_use_blacklist_set
    __swig_getmethods__["to_use_blacklist"] = _fsdk.HTML2PDFSettingData_to_use_blacklist_get
    if _newclass:
        to_use_blacklist = _swig_property(_fsdk.HTML2PDFSettingData_to_use_blacklist_get, _fsdk.HTML2PDFSettingData_to_use_blacklist_set)
    __swig_setmethods__["to_hide_header"] = _fsdk.HTML2PDFSettingData_to_hide_header_set
    __swig_getmethods__["to_hide_header"] = _fsdk.HTML2PDFSettingData_to_hide_header_get
    if _newclass:
        to_hide_header = _swig_property(_fsdk.HTML2PDFSettingData_to_hide_header_get, _fsdk.HTML2PDFSettingData_to_hide_header_set)
    __swig_setmethods__["to_hide_footer"] = _fsdk.HTML2PDFSettingData_to_hide_footer_set
    __swig_getmethods__["to_hide_footer"] = _fsdk.HTML2PDFSettingData_to_hide_footer_get
    if _newclass:
        to_hide_footer = _swig_property(_fsdk.HTML2PDFSettingData_to_hide_footer_get, _fsdk.HTML2PDFSettingData_to_hide_footer_set)
    __swig_setmethods__["to_deny_local_file_access"] = _fsdk.HTML2PDFSettingData_to_deny_local_file_access_set
    __swig_getmethods__["to_deny_local_file_access"] = _fsdk.HTML2PDFSettingData_to_deny_local_file_access_get
    if _newclass:
        to_deny_local_file_access = _swig_property(_fsdk.HTML2PDFSettingData_to_deny_local_file_access_get, _fsdk.HTML2PDFSettingData_to_deny_local_file_access_set)
    __swig_destroy__ = _fsdk.delete_HTML2PDFSettingData
    __del__ = lambda self: None
HTML2PDFSettingData_swigregister = _fsdk.HTML2PDFSettingData_swigregister
HTML2PDFSettingData_swigregister(HTML2PDFSettingData)

class TXT2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TXT2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TXT2PDFSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TXT2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.TXT2PDFSettingData_Set(self, *args)
    __swig_setmethods__["page_width"] = _fsdk.TXT2PDFSettingData_page_width_set
    __swig_getmethods__["page_width"] = _fsdk.TXT2PDFSettingData_page_width_get
    if _newclass:
        page_width = _swig_property(_fsdk.TXT2PDFSettingData_page_width_get, _fsdk.TXT2PDFSettingData_page_width_set)
    __swig_setmethods__["page_height"] = _fsdk.TXT2PDFSettingData_page_height_set
    __swig_getmethods__["page_height"] = _fsdk.TXT2PDFSettingData_page_height_get
    if _newclass:
        page_height = _swig_property(_fsdk.TXT2PDFSettingData_page_height_get, _fsdk.TXT2PDFSettingData_page_height_set)
    __swig_setmethods__["page_margin"] = _fsdk.TXT2PDFSettingData_page_margin_set
    __swig_getmethods__["page_margin"] = _fsdk.TXT2PDFSettingData_page_margin_get
    if _newclass:
        page_margin = _swig_property(_fsdk.TXT2PDFSettingData_page_margin_get, _fsdk.TXT2PDFSettingData_page_margin_set)
    __swig_setmethods__["font"] = _fsdk.TXT2PDFSettingData_font_set
    __swig_getmethods__["font"] = _fsdk.TXT2PDFSettingData_font_get
    if _newclass:
        font = _swig_property(_fsdk.TXT2PDFSettingData_font_get, _fsdk.TXT2PDFSettingData_font_set)
    __swig_setmethods__["text_size"] = _fsdk.TXT2PDFSettingData_text_size_set
    __swig_getmethods__["text_size"] = _fsdk.TXT2PDFSettingData_text_size_get
    if _newclass:
        text_size = _swig_property(_fsdk.TXT2PDFSettingData_text_size_get, _fsdk.TXT2PDFSettingData_text_size_set)
    __swig_setmethods__["text_color"] = _fsdk.TXT2PDFSettingData_text_color_set
    __swig_getmethods__["text_color"] = _fsdk.TXT2PDFSettingData_text_color_get
    if _newclass:
        text_color = _swig_property(_fsdk.TXT2PDFSettingData_text_color_get, _fsdk.TXT2PDFSettingData_text_color_set)
    __swig_setmethods__["linespace"] = _fsdk.TXT2PDFSettingData_linespace_set
    __swig_getmethods__["linespace"] = _fsdk.TXT2PDFSettingData_linespace_get
    if _newclass:
        linespace = _swig_property(_fsdk.TXT2PDFSettingData_linespace_get, _fsdk.TXT2PDFSettingData_linespace_set)
    __swig_setmethods__["is_break_page"] = _fsdk.TXT2PDFSettingData_is_break_page_set
    __swig_getmethods__["is_break_page"] = _fsdk.TXT2PDFSettingData_is_break_page_get
    if _newclass:
        is_break_page = _swig_property(_fsdk.TXT2PDFSettingData_is_break_page_get, _fsdk.TXT2PDFSettingData_is_break_page_set)
    __swig_destroy__ = _fsdk.delete_TXT2PDFSettingData
    __del__ = lambda self: None
TXT2PDFSettingData_swigregister = _fsdk.TXT2PDFSettingData_swigregister
TXT2PDFSettingData_swigregister(TXT2PDFSettingData)

class DWG2PDFProgressCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DWG2PDFProgressCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DWG2PDFProgressCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.DWG2PDFProgressCallback_Release(self, *args)

    def OnProgress(self, *args):
        return _fsdk.DWG2PDFProgressCallback_OnProgress(self, *args)
    __swig_destroy__ = _fsdk.delete_DWG2PDFProgressCallback
    __del__ = lambda self: None
DWG2PDFProgressCallback_swigregister = _fsdk.DWG2PDFProgressCallback_swigregister
DWG2PDFProgressCallback_swigregister(DWG2PDFProgressCallback)

class DWG2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DWG2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DWG2PDFSettingData, name)
    __repr__ = _swig_repr
    e_FlagEmbededTTF = _fsdk.DWG2PDFSettingData_e_FlagEmbededTTF
    e_FlagTTFTextAsGeometry = _fsdk.DWG2PDFSettingData_e_FlagTTFTextAsGeometry
    e_FlagSHXTextAsGeometry = _fsdk.DWG2PDFSettingData_e_FlagSHXTextAsGeometry
    e_FlagSimpleGeomOptimization = _fsdk.DWG2PDFSettingData_e_FlagSimpleGeomOptimization
    e_FlagEnableLayers = _fsdk.DWG2PDFSettingData_e_FlagEnableLayers
    e_FlagIncludeOffLayers = _fsdk.DWG2PDFSettingData_e_FlagIncludeOffLayers
    e_FlagEmbededOptimizedTTF = _fsdk.DWG2PDFSettingData_e_FlagEmbededOptimizedTTF
    e_FlagUseHLR = _fsdk.DWG2PDFSettingData_e_FlagUseHLR
    e_FlagFlateCompression = _fsdk.DWG2PDFSettingData_e_FlagFlateCompression
    e_FlagASCIIHexEncoding = _fsdk.DWG2PDFSettingData_e_FlagASCIIHexEncoding
    e_FlagExportHyperlinks = _fsdk.DWG2PDFSettingData_e_FlagExportHyperlinks
    e_FlagZoomToExtentsMode = _fsdk.DWG2PDFSettingData_e_FlagZoomToExtentsMode
    e_FlagLinearized = _fsdk.DWG2PDFSettingData_e_FlagLinearized
    e_FlagMeasuring = _fsdk.DWG2PDFSettingData_e_FlagMeasuring
    e_DWG2PDFExportHatchesTypeBitmap = _fsdk.DWG2PDFSettingData_e_DWG2PDFExportHatchesTypeBitmap
    e_DWG2PDFExportHatchesTypeDrawing = _fsdk.DWG2PDFSettingData_e_DWG2PDFExportHatchesTypeDrawing
    e_DWG2PDFExportHatchesTypePdfPaths = _fsdk.DWG2PDFSettingData_e_DWG2PDFExportHatchesTypePdfPaths
    e_DWG2PDFExportHatchesTypePolygons = _fsdk.DWG2PDFSettingData_e_DWG2PDFExportHatchesTypePolygons
    e_DWG2PDFSearchableTextTypeNoSearch = _fsdk.DWG2PDFSettingData_e_DWG2PDFSearchableTextTypeNoSearch
    e_DWG2PDFSearchableTextTypeSHX = _fsdk.DWG2PDFSettingData_e_DWG2PDFSearchableTextTypeSHX
    e_DWG2PDFSearchableTextTypeTTF = _fsdk.DWG2PDFSettingData_e_DWG2PDFSearchableTextTypeTTF
    e_DWG2PDFColorPolicyNoPolicy = _fsdk.DWG2PDFSettingData_e_DWG2PDFColorPolicyNoPolicy
    e_DWG2PDFColorPolicyMono = _fsdk.DWG2PDFSettingData_e_DWG2PDFColorPolicyMono
    e_DWG2PDFColorPolicyGrayscale = _fsdk.DWG2PDFSettingData_e_DWG2PDFColorPolicyGrayscale

    def __init__(self, *args):
        this = _fsdk.new_DWG2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["export_flags"] = _fsdk.DWG2PDFSettingData_export_flags_set
    __swig_getmethods__["export_flags"] = _fsdk.DWG2PDFSettingData_export_flags_get
    if _newclass:
        export_flags = _swig_property(_fsdk.DWG2PDFSettingData_export_flags_get, _fsdk.DWG2PDFSettingData_export_flags_set)
    __swig_setmethods__["export_hatches_type"] = _fsdk.DWG2PDFSettingData_export_hatches_type_set
    __swig_getmethods__["export_hatches_type"] = _fsdk.DWG2PDFSettingData_export_hatches_type_get
    if _newclass:
        export_hatches_type = _swig_property(_fsdk.DWG2PDFSettingData_export_hatches_type_get, _fsdk.DWG2PDFSettingData_export_hatches_type_set)
    __swig_setmethods__["other_export_hatches_type"] = _fsdk.DWG2PDFSettingData_other_export_hatches_type_set
    __swig_getmethods__["other_export_hatches_type"] = _fsdk.DWG2PDFSettingData_other_export_hatches_type_get
    if _newclass:
        other_export_hatches_type = _swig_property(_fsdk.DWG2PDFSettingData_other_export_hatches_type_get, _fsdk.DWG2PDFSettingData_other_export_hatches_type_set)
    __swig_setmethods__["gradient_export_hatches_type"] = _fsdk.DWG2PDFSettingData_gradient_export_hatches_type_set
    __swig_getmethods__["gradient_export_hatches_type"] = _fsdk.DWG2PDFSettingData_gradient_export_hatches_type_get
    if _newclass:
        gradient_export_hatches_type = _swig_property(_fsdk.DWG2PDFSettingData_gradient_export_hatches_type_get, _fsdk.DWG2PDFSettingData_gradient_export_hatches_type_set)
    __swig_setmethods__["searchable_text_type"] = _fsdk.DWG2PDFSettingData_searchable_text_type_set
    __swig_getmethods__["searchable_text_type"] = _fsdk.DWG2PDFSettingData_searchable_text_type_get
    if _newclass:
        searchable_text_type = _swig_property(_fsdk.DWG2PDFSettingData_searchable_text_type_get, _fsdk.DWG2PDFSettingData_searchable_text_type_set)
    __swig_setmethods__["is_active_layout"] = _fsdk.DWG2PDFSettingData_is_active_layout_set
    __swig_getmethods__["is_active_layout"] = _fsdk.DWG2PDFSettingData_is_active_layout_get
    if _newclass:
        is_active_layout = _swig_property(_fsdk.DWG2PDFSettingData_is_active_layout_get, _fsdk.DWG2PDFSettingData_is_active_layout_set)
    __swig_setmethods__["output_title"] = _fsdk.DWG2PDFSettingData_output_title_set
    __swig_getmethods__["output_title"] = _fsdk.DWG2PDFSettingData_output_title_get
    if _newclass:
        output_title = _swig_property(_fsdk.DWG2PDFSettingData_output_title_get, _fsdk.DWG2PDFSettingData_output_title_set)
    __swig_setmethods__["output_author"] = _fsdk.DWG2PDFSettingData_output_author_set
    __swig_getmethods__["output_author"] = _fsdk.DWG2PDFSettingData_output_author_get
    if _newclass:
        output_author = _swig_property(_fsdk.DWG2PDFSettingData_output_author_get, _fsdk.DWG2PDFSettingData_output_author_set)
    __swig_setmethods__["output_subject"] = _fsdk.DWG2PDFSettingData_output_subject_set
    __swig_getmethods__["output_subject"] = _fsdk.DWG2PDFSettingData_output_subject_get
    if _newclass:
        output_subject = _swig_property(_fsdk.DWG2PDFSettingData_output_subject_get, _fsdk.DWG2PDFSettingData_output_subject_set)
    __swig_setmethods__["output_keywords"] = _fsdk.DWG2PDFSettingData_output_keywords_set
    __swig_getmethods__["output_keywords"] = _fsdk.DWG2PDFSettingData_output_keywords_get
    if _newclass:
        output_keywords = _swig_property(_fsdk.DWG2PDFSettingData_output_keywords_get, _fsdk.DWG2PDFSettingData_output_keywords_set)
    __swig_setmethods__["output_creator"] = _fsdk.DWG2PDFSettingData_output_creator_set
    __swig_getmethods__["output_creator"] = _fsdk.DWG2PDFSettingData_output_creator_get
    if _newclass:
        output_creator = _swig_property(_fsdk.DWG2PDFSettingData_output_creator_get, _fsdk.DWG2PDFSettingData_output_creator_set)
    __swig_setmethods__["output_producer"] = _fsdk.DWG2PDFSettingData_output_producer_set
    __swig_getmethods__["output_producer"] = _fsdk.DWG2PDFSettingData_output_producer_get
    if _newclass:
        output_producer = _swig_property(_fsdk.DWG2PDFSettingData_output_producer_get, _fsdk.DWG2PDFSettingData_output_producer_set)
    __swig_setmethods__["paper_width"] = _fsdk.DWG2PDFSettingData_paper_width_set
    __swig_getmethods__["paper_width"] = _fsdk.DWG2PDFSettingData_paper_width_get
    if _newclass:
        paper_width = _swig_property(_fsdk.DWG2PDFSettingData_paper_width_get, _fsdk.DWG2PDFSettingData_paper_width_set)
    __swig_setmethods__["paper_height"] = _fsdk.DWG2PDFSettingData_paper_height_set
    __swig_getmethods__["paper_height"] = _fsdk.DWG2PDFSettingData_paper_height_get
    if _newclass:
        paper_height = _swig_property(_fsdk.DWG2PDFSettingData_paper_height_get, _fsdk.DWG2PDFSettingData_paper_height_set)
    __swig_setmethods__["color_policy"] = _fsdk.DWG2PDFSettingData_color_policy_set
    __swig_getmethods__["color_policy"] = _fsdk.DWG2PDFSettingData_color_policy_get
    if _newclass:
        color_policy = _swig_property(_fsdk.DWG2PDFSettingData_color_policy_get, _fsdk.DWG2PDFSettingData_color_policy_set)
    __swig_setmethods__["is_output_progress"] = _fsdk.DWG2PDFSettingData_is_output_progress_set
    __swig_getmethods__["is_output_progress"] = _fsdk.DWG2PDFSettingData_is_output_progress_get
    if _newclass:
        is_output_progress = _swig_property(_fsdk.DWG2PDFSettingData_is_output_progress_get, _fsdk.DWG2PDFSettingData_is_output_progress_set)
    __swig_setmethods__["progress_callback"] = _fsdk.DWG2PDFSettingData_progress_callback_set
    __swig_getmethods__["progress_callback"] = _fsdk.DWG2PDFSettingData_progress_callback_get
    if _newclass:
        progress_callback = _swig_property(_fsdk.DWG2PDFSettingData_progress_callback_get, _fsdk.DWG2PDFSettingData_progress_callback_set)
    __swig_destroy__ = _fsdk.delete_DWG2PDFSettingData
    __del__ = lambda self: None
DWG2PDFSettingData_swigregister = _fsdk.DWG2PDFSettingData_swigregister
DWG2PDFSettingData_swigregister(DWG2PDFSettingData)

class Word2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word2PDFSettingData, name)
    __repr__ = _swig_repr
    e_ConvertOptimizeOptionForPrint = _fsdk.Word2PDFSettingData_e_ConvertOptimizeOptionForPrint
    e_ConvertOptimizeOptionForOnScreen = _fsdk.Word2PDFSettingData_e_ConvertOptimizeOptionForOnScreen
    e_ConvertContentOptionOnlyContent = _fsdk.Word2PDFSettingData_e_ConvertContentOptionOnlyContent
    e_ConvertContentOptionWithMarkup = _fsdk.Word2PDFSettingData_e_ConvertContentOptionWithMarkup
    e_ConvertBookmarkOptionNone = _fsdk.Word2PDFSettingData_e_ConvertBookmarkOptionNone
    e_ConvertBookmarkOptionUseHeadings = _fsdk.Word2PDFSettingData_e_ConvertBookmarkOptionUseHeadings
    e_ConvertBookmarkOptionUseWordBookmark = _fsdk.Word2PDFSettingData_e_ConvertBookmarkOptionUseWordBookmark

    def __init__(self, *args):
        this = _fsdk.new_Word2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Word2PDFSettingData_Set(self, *args)
    __swig_setmethods__["include_doc_props"] = _fsdk.Word2PDFSettingData_include_doc_props_set
    __swig_getmethods__["include_doc_props"] = _fsdk.Word2PDFSettingData_include_doc_props_get
    if _newclass:
        include_doc_props = _swig_property(_fsdk.Word2PDFSettingData_include_doc_props_get, _fsdk.Word2PDFSettingData_include_doc_props_set)
    __swig_setmethods__["optimize_option"] = _fsdk.Word2PDFSettingData_optimize_option_set
    __swig_getmethods__["optimize_option"] = _fsdk.Word2PDFSettingData_optimize_option_get
    if _newclass:
        optimize_option = _swig_property(_fsdk.Word2PDFSettingData_optimize_option_get, _fsdk.Word2PDFSettingData_optimize_option_set)
    __swig_setmethods__["content_option"] = _fsdk.Word2PDFSettingData_content_option_set
    __swig_getmethods__["content_option"] = _fsdk.Word2PDFSettingData_content_option_get
    if _newclass:
        content_option = _swig_property(_fsdk.Word2PDFSettingData_content_option_get, _fsdk.Word2PDFSettingData_content_option_set)
    __swig_setmethods__["bookmark_option"] = _fsdk.Word2PDFSettingData_bookmark_option_set
    __swig_getmethods__["bookmark_option"] = _fsdk.Word2PDFSettingData_bookmark_option_get
    if _newclass:
        bookmark_option = _swig_property(_fsdk.Word2PDFSettingData_bookmark_option_get, _fsdk.Word2PDFSettingData_bookmark_option_set)
    __swig_setmethods__["convert_to_pdfa"] = _fsdk.Word2PDFSettingData_convert_to_pdfa_set
    __swig_getmethods__["convert_to_pdfa"] = _fsdk.Word2PDFSettingData_convert_to_pdfa_get
    if _newclass:
        convert_to_pdfa = _swig_property(_fsdk.Word2PDFSettingData_convert_to_pdfa_get, _fsdk.Word2PDFSettingData_convert_to_pdfa_set)
    __swig_setmethods__["disable_vba_code"] = _fsdk.Word2PDFSettingData_disable_vba_code_set
    __swig_getmethods__["disable_vba_code"] = _fsdk.Word2PDFSettingData_disable_vba_code_get
    if _newclass:
        disable_vba_code = _swig_property(_fsdk.Word2PDFSettingData_disable_vba_code_get, _fsdk.Word2PDFSettingData_disable_vba_code_set)
    __swig_destroy__ = _fsdk.delete_Word2PDFSettingData
    __del__ = lambda self: None
Word2PDFSettingData_swigregister = _fsdk.Word2PDFSettingData_swigregister
Word2PDFSettingData_swigregister(Word2PDFSettingData)

class Excel2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Excel2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Excel2PDFSettingData, name)
    __repr__ = _swig_repr
    e_ConvertQualityStandard = _fsdk.Excel2PDFSettingData_e_ConvertQualityStandard
    e_ConvertQualityMinimum = _fsdk.Excel2PDFSettingData_e_ConvertQualityMinimum
    e_ScaleTypeNone = _fsdk.Excel2PDFSettingData_e_ScaleTypeNone
    e_ScaleTypeFitAllColumns = _fsdk.Excel2PDFSettingData_e_ScaleTypeFitAllColumns
    e_ScaleTypeFitAllRows = _fsdk.Excel2PDFSettingData_e_ScaleTypeFitAllRows
    e_ScaleTypeFitSheet = _fsdk.Excel2PDFSettingData_e_ScaleTypeFitSheet

    def __init__(self, *args):
        this = _fsdk.new_Excel2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Excel2PDFSettingData_Set(self, *args)
    __swig_setmethods__["include_doc_props"] = _fsdk.Excel2PDFSettingData_include_doc_props_set
    __swig_getmethods__["include_doc_props"] = _fsdk.Excel2PDFSettingData_include_doc_props_get
    if _newclass:
        include_doc_props = _swig_property(_fsdk.Excel2PDFSettingData_include_doc_props_get, _fsdk.Excel2PDFSettingData_include_doc_props_set)
    __swig_setmethods__["quality"] = _fsdk.Excel2PDFSettingData_quality_set
    __swig_getmethods__["quality"] = _fsdk.Excel2PDFSettingData_quality_get
    if _newclass:
        quality = _swig_property(_fsdk.Excel2PDFSettingData_quality_get, _fsdk.Excel2PDFSettingData_quality_set)
    __swig_setmethods__["ignore_print_area"] = _fsdk.Excel2PDFSettingData_ignore_print_area_set
    __swig_getmethods__["ignore_print_area"] = _fsdk.Excel2PDFSettingData_ignore_print_area_get
    if _newclass:
        ignore_print_area = _swig_property(_fsdk.Excel2PDFSettingData_ignore_print_area_get, _fsdk.Excel2PDFSettingData_ignore_print_area_set)
    __swig_setmethods__["scale_type"] = _fsdk.Excel2PDFSettingData_scale_type_set
    __swig_getmethods__["scale_type"] = _fsdk.Excel2PDFSettingData_scale_type_get
    if _newclass:
        scale_type = _swig_property(_fsdk.Excel2PDFSettingData_scale_type_get, _fsdk.Excel2PDFSettingData_scale_type_set)
    __swig_setmethods__["convert_to_pdfa"] = _fsdk.Excel2PDFSettingData_convert_to_pdfa_set
    __swig_getmethods__["convert_to_pdfa"] = _fsdk.Excel2PDFSettingData_convert_to_pdfa_get
    if _newclass:
        convert_to_pdfa = _swig_property(_fsdk.Excel2PDFSettingData_convert_to_pdfa_get, _fsdk.Excel2PDFSettingData_convert_to_pdfa_set)
    __swig_setmethods__["disable_vba_code"] = _fsdk.Excel2PDFSettingData_disable_vba_code_set
    __swig_getmethods__["disable_vba_code"] = _fsdk.Excel2PDFSettingData_disable_vba_code_get
    if _newclass:
        disable_vba_code = _swig_property(_fsdk.Excel2PDFSettingData_disable_vba_code_get, _fsdk.Excel2PDFSettingData_disable_vba_code_set)
    __swig_destroy__ = _fsdk.delete_Excel2PDFSettingData
    __del__ = lambda self: None
Excel2PDFSettingData_swigregister = _fsdk.Excel2PDFSettingData_swigregister
Excel2PDFSettingData_swigregister(Excel2PDFSettingData)

class PowerPoint2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerPoint2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PowerPoint2PDFSettingData, name)
    __repr__ = _swig_repr
    e_ConvertIntentPrint = _fsdk.PowerPoint2PDFSettingData_e_ConvertIntentPrint
    e_ConvertIntentScreen = _fsdk.PowerPoint2PDFSettingData_e_ConvertIntentScreen
    e_HandoutOrderHorizontalFirst = _fsdk.PowerPoint2PDFSettingData_e_HandoutOrderHorizontalFirst
    e_HandoutOrderVerticalFirst = _fsdk.PowerPoint2PDFSettingData_e_HandoutOrderVerticalFirst
    e_OutputSlides = _fsdk.PowerPoint2PDFSettingData_e_OutputSlides
    e_OutputNotesPages = _fsdk.PowerPoint2PDFSettingData_e_OutputNotesPages
    e_OutputOutline = _fsdk.PowerPoint2PDFSettingData_e_OutputOutline
    e_OutputOneSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputOneSlideHandouts
    e_OutputTwoSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputTwoSlideHandouts
    e_OutputThreeSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputThreeSlideHandouts
    e_OutputFourSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputFourSlideHandouts
    e_OutputSixSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputSixSlideHandouts
    e_OutputNineSlideHandouts = _fsdk.PowerPoint2PDFSettingData_e_OutputNineSlideHandouts

    def __init__(self, *args):
        this = _fsdk.new_PowerPoint2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PowerPoint2PDFSettingData_Set(self, *args)
    __swig_setmethods__["intent"] = _fsdk.PowerPoint2PDFSettingData_intent_set
    __swig_getmethods__["intent"] = _fsdk.PowerPoint2PDFSettingData_intent_get
    if _newclass:
        intent = _swig_property(_fsdk.PowerPoint2PDFSettingData_intent_get, _fsdk.PowerPoint2PDFSettingData_intent_set)
    __swig_setmethods__["frame_output_slides"] = _fsdk.PowerPoint2PDFSettingData_frame_output_slides_set
    __swig_getmethods__["frame_output_slides"] = _fsdk.PowerPoint2PDFSettingData_frame_output_slides_get
    if _newclass:
        frame_output_slides = _swig_property(_fsdk.PowerPoint2PDFSettingData_frame_output_slides_get, _fsdk.PowerPoint2PDFSettingData_frame_output_slides_set)
    __swig_setmethods__["output_type"] = _fsdk.PowerPoint2PDFSettingData_output_type_set
    __swig_getmethods__["output_type"] = _fsdk.PowerPoint2PDFSettingData_output_type_get
    if _newclass:
        output_type = _swig_property(_fsdk.PowerPoint2PDFSettingData_output_type_get, _fsdk.PowerPoint2PDFSettingData_output_type_set)
    __swig_setmethods__["handout_order"] = _fsdk.PowerPoint2PDFSettingData_handout_order_set
    __swig_getmethods__["handout_order"] = _fsdk.PowerPoint2PDFSettingData_handout_order_get
    if _newclass:
        handout_order = _swig_property(_fsdk.PowerPoint2PDFSettingData_handout_order_get, _fsdk.PowerPoint2PDFSettingData_handout_order_set)
    __swig_setmethods__["output_hidden_slides"] = _fsdk.PowerPoint2PDFSettingData_output_hidden_slides_set
    __swig_getmethods__["output_hidden_slides"] = _fsdk.PowerPoint2PDFSettingData_output_hidden_slides_get
    if _newclass:
        output_hidden_slides = _swig_property(_fsdk.PowerPoint2PDFSettingData_output_hidden_slides_get, _fsdk.PowerPoint2PDFSettingData_output_hidden_slides_set)
    __swig_setmethods__["include_doc_props"] = _fsdk.PowerPoint2PDFSettingData_include_doc_props_set
    __swig_getmethods__["include_doc_props"] = _fsdk.PowerPoint2PDFSettingData_include_doc_props_get
    if _newclass:
        include_doc_props = _swig_property(_fsdk.PowerPoint2PDFSettingData_include_doc_props_get, _fsdk.PowerPoint2PDFSettingData_include_doc_props_set)
    __swig_setmethods__["disable_vba_code"] = _fsdk.PowerPoint2PDFSettingData_disable_vba_code_set
    __swig_getmethods__["disable_vba_code"] = _fsdk.PowerPoint2PDFSettingData_disable_vba_code_get
    if _newclass:
        disable_vba_code = _swig_property(_fsdk.PowerPoint2PDFSettingData_disable_vba_code_get, _fsdk.PowerPoint2PDFSettingData_disable_vba_code_set)
    __swig_destroy__ = _fsdk.delete_PowerPoint2PDFSettingData
    __del__ = lambda self: None
PowerPoint2PDFSettingData_swigregister = _fsdk.PowerPoint2PDFSettingData_swigregister
PowerPoint2PDFSettingData_swigregister(PowerPoint2PDFSettingData)

class HTML2PDFRelatedResource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTML2PDFRelatedResource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTML2PDFRelatedResource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_HTML2PDFRelatedResource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["related_resource_file"] = _fsdk.HTML2PDFRelatedResource_related_resource_file_set
    __swig_getmethods__["related_resource_file"] = _fsdk.HTML2PDFRelatedResource_related_resource_file_get
    if _newclass:
        related_resource_file = _swig_property(_fsdk.HTML2PDFRelatedResource_related_resource_file_get, _fsdk.HTML2PDFRelatedResource_related_resource_file_set)
    __swig_setmethods__["resource_file_relative_path"] = _fsdk.HTML2PDFRelatedResource_resource_file_relative_path_set
    __swig_getmethods__["resource_file_relative_path"] = _fsdk.HTML2PDFRelatedResource_resource_file_relative_path_get
    if _newclass:
        resource_file_relative_path = _swig_property(_fsdk.HTML2PDFRelatedResource_resource_file_relative_path_get, _fsdk.HTML2PDFRelatedResource_resource_file_relative_path_set)
    __swig_destroy__ = _fsdk.delete_HTML2PDFRelatedResource
    __del__ = lambda self: None
HTML2PDFRelatedResource_swigregister = _fsdk.HTML2PDFRelatedResource_swigregister
HTML2PDFRelatedResource_swigregister(HTML2PDFRelatedResource)

class HTML2PDFRelatedResourceArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTML2PDFRelatedResourceArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTML2PDFRelatedResourceArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_HTML2PDFRelatedResourceArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_HTML2PDFRelatedResourceArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.HTML2PDFRelatedResourceArray_RemoveAll(self, *args)
HTML2PDFRelatedResourceArray_swigregister = _fsdk.HTML2PDFRelatedResourceArray_swigregister
HTML2PDFRelatedResourceArray_swigregister(HTML2PDFRelatedResourceArray)

class OFDConvertParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFDConvertParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OFDConvertParam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_OFDConvertParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.OFDConvertParam_Set(self, *args)
    __swig_setmethods__["is_embed_font"] = _fsdk.OFDConvertParam_is_embed_font_set
    __swig_getmethods__["is_embed_font"] = _fsdk.OFDConvertParam_is_embed_font_get
    if _newclass:
        is_embed_font = _swig_property(_fsdk.OFDConvertParam_is_embed_font_get, _fsdk.OFDConvertParam_is_embed_font_set)
    __swig_destroy__ = _fsdk.delete_OFDConvertParam
    __del__ = lambda self: None
OFDConvertParam_swigregister = _fsdk.OFDConvertParam_swigregister
OFDConvertParam_swigregister(OFDConvertParam)

class Convert(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convert, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Convert, name)
    __repr__ = _swig_repr
    if _newclass:
        FromHTML = staticmethod(_fsdk.Convert_FromHTML)
    else:
        FromHTML = _fsdk.Convert_FromHTML
    if _newclass:
        FromTXT = staticmethod(_fsdk.Convert_FromTXT)
    else:
        FromTXT = _fsdk.Convert_FromTXT
    if _newclass:
        FromImage = staticmethod(_fsdk.Convert_FromImage)
    else:
        FromImage = _fsdk.Convert_FromImage
    if _newclass:
        FromDWG = staticmethod(_fsdk.Convert_FromDWG)
    else:
        FromDWG = _fsdk.Convert_FromDWG
    if _newclass:
        FromWord = staticmethod(_fsdk.Convert_FromWord)
    else:
        FromWord = _fsdk.Convert_FromWord
    if _newclass:
        FromExcel = staticmethod(_fsdk.Convert_FromExcel)
    else:
        FromExcel = _fsdk.Convert_FromExcel
    if _newclass:
        FromPowerPoint = staticmethod(_fsdk.Convert_FromPowerPoint)
    else:
        FromPowerPoint = _fsdk.Convert_FromPowerPoint
    if _newclass:
        ToXML = staticmethod(_fsdk.Convert_ToXML)
    else:
        ToXML = _fsdk.Convert_ToXML
    if _newclass:
        FromOFD = staticmethod(_fsdk.Convert_FromOFD)
    else:
        FromOFD = _fsdk.Convert_FromOFD
    if _newclass:
        ToOFD = staticmethod(_fsdk.Convert_ToOFD)
    else:
        ToOFD = _fsdk.Convert_ToOFD

    def __init__(self, *args):
        this = _fsdk.new_Convert(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Convert
    __del__ = lambda self: None
Convert_swigregister = _fsdk.Convert_swigregister
Convert_swigregister(Convert)

def Convert_FromHTML(*args):
    return _fsdk.Convert_FromHTML(*args)
Convert_FromHTML = _fsdk.Convert_FromHTML

def Convert_FromTXT(*args):
    return _fsdk.Convert_FromTXT(*args)
Convert_FromTXT = _fsdk.Convert_FromTXT

def Convert_FromImage(*args):
    return _fsdk.Convert_FromImage(*args)
Convert_FromImage = _fsdk.Convert_FromImage

def Convert_FromDWG(*args):
    return _fsdk.Convert_FromDWG(*args)
Convert_FromDWG = _fsdk.Convert_FromDWG

def Convert_FromWord(*args):
    return _fsdk.Convert_FromWord(*args)
Convert_FromWord = _fsdk.Convert_FromWord

def Convert_FromExcel(*args):
    return _fsdk.Convert_FromExcel(*args)
Convert_FromExcel = _fsdk.Convert_FromExcel

def Convert_FromPowerPoint(*args):
    return _fsdk.Convert_FromPowerPoint(*args)
Convert_FromPowerPoint = _fsdk.Convert_FromPowerPoint

def Convert_ToXML(*args):
    return _fsdk.Convert_ToXML(*args)
Convert_ToXML = _fsdk.Convert_ToXML

def Convert_FromOFD(*args):
    return _fsdk.Convert_FromOFD(*args)
Convert_FromOFD = _fsdk.Convert_FromOFD

def Convert_ToOFD(*args):
    return _fsdk.Convert_ToOFD(*args)
Convert_ToOFD = _fsdk.Convert_ToOFD

class LRElement(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LRElement, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LRElement, name)
    __repr__ = _swig_repr
    e_ElementTypeDocument = _fsdk.LRElement_e_ElementTypeDocument
    e_ElementTypeDocumentFragment = _fsdk.LRElement_e_ElementTypeDocumentFragment
    e_ElementTypePart = _fsdk.LRElement_e_ElementTypePart
    e_ElementTypeArt = _fsdk.LRElement_e_ElementTypeArt
    e_ElementTypeSect = _fsdk.LRElement_e_ElementTypeSect
    e_ElementTypeDiv = _fsdk.LRElement_e_ElementTypeDiv
    e_ElementTypeBlockQuote = _fsdk.LRElement_e_ElementTypeBlockQuote
    e_ElementTypeCaption = _fsdk.LRElement_e_ElementTypeCaption
    e_ElementTypeTOC = _fsdk.LRElement_e_ElementTypeTOC
    e_ElementTypeTOCI = _fsdk.LRElement_e_ElementTypeTOCI
    e_ElementTypeIndex = _fsdk.LRElement_e_ElementTypeIndex
    e_ElementTypeAside = _fsdk.LRElement_e_ElementTypeAside
    e_ElementTypeTitle = _fsdk.LRElement_e_ElementTypeTitle
    e_ElementTypeFENote = _fsdk.LRElement_e_ElementTypeFENote
    e_ElementTypeNonStruct = _fsdk.LRElement_e_ElementTypeNonStruct
    e_ElementTypePrivate = _fsdk.LRElement_e_ElementTypePrivate
    e_ElementTypeParagraph = _fsdk.LRElement_e_ElementTypeParagraph
    e_ElementTypeHeading = _fsdk.LRElement_e_ElementTypeHeading
    e_ElementTypeHeading1 = _fsdk.LRElement_e_ElementTypeHeading1
    e_ElementTypeHeading2 = _fsdk.LRElement_e_ElementTypeHeading2
    e_ElementTypeHeading3 = _fsdk.LRElement_e_ElementTypeHeading3
    e_ElementTypeHeading4 = _fsdk.LRElement_e_ElementTypeHeading4
    e_ElementTypeHeading5 = _fsdk.LRElement_e_ElementTypeHeading5
    e_ElementTypeHeading6 = _fsdk.LRElement_e_ElementTypeHeading6
    e_ElementTypeHeadingN = _fsdk.LRElement_e_ElementTypeHeadingN
    e_ElementTypeList = _fsdk.LRElement_e_ElementTypeList
    e_ElementTypeListItem = _fsdk.LRElement_e_ElementTypeListItem
    e_ElementTypeListLabel = _fsdk.LRElement_e_ElementTypeListLabel
    e_ElementTypeListBody = _fsdk.LRElement_e_ElementTypeListBody
    e_ElementTypeTable = _fsdk.LRElement_e_ElementTypeTable
    e_ElementTypeTableRow = _fsdk.LRElement_e_ElementTypeTableRow
    e_ElementTypeTableHeaderCell = _fsdk.LRElement_e_ElementTypeTableHeaderCell
    e_ElementTypeTableDataCell = _fsdk.LRElement_e_ElementTypeTableDataCell
    e_ElementTypeTableHeaderGroup = _fsdk.LRElement_e_ElementTypeTableHeaderGroup
    e_ElementTypeTableBodyGroup = _fsdk.LRElement_e_ElementTypeTableBodyGroup
    e_ElementTypeTableFootGroup = _fsdk.LRElement_e_ElementTypeTableFootGroup
    e_ElementTypeSpan = _fsdk.LRElement_e_ElementTypeSpan
    e_ElementTypeQuote = _fsdk.LRElement_e_ElementTypeQuote
    e_ElementTypeNote = _fsdk.LRElement_e_ElementTypeNote
    e_ElementTypeReference = _fsdk.LRElement_e_ElementTypeReference
    e_ElementTypeBibEntry = _fsdk.LRElement_e_ElementTypeBibEntry
    e_ElementTypeCode = _fsdk.LRElement_e_ElementTypeCode
    e_ElementTypeLink = _fsdk.LRElement_e_ElementTypeLink
    e_ElementTypeAnnot = _fsdk.LRElement_e_ElementTypeAnnot
    e_ElementTypeRuby = _fsdk.LRElement_e_ElementTypeRuby
    e_ElementTypeRubyBase = _fsdk.LRElement_e_ElementTypeRubyBase
    e_ElementTypeRubyAnnot = _fsdk.LRElement_e_ElementTypeRubyAnnot
    e_ElementTypeRubyPunc = _fsdk.LRElement_e_ElementTypeRubyPunc
    e_ElementTypeWarichu = _fsdk.LRElement_e_ElementTypeWarichu
    e_ElementTypeWarichuText = _fsdk.LRElement_e_ElementTypeWarichuText
    e_ElementTypeWarichuPunc = _fsdk.LRElement_e_ElementTypeWarichuPunc
    e_ElementTypeEm = _fsdk.LRElement_e_ElementTypeEm
    e_ElementTypeStrong = _fsdk.LRElement_e_ElementTypeStrong
    e_ElementTypeSub = _fsdk.LRElement_e_ElementTypeSub
    e_ElementTypeFigure = _fsdk.LRElement_e_ElementTypeFigure
    e_ElementTypeFormula = _fsdk.LRElement_e_ElementTypeFormula
    e_ElementTypeForm = _fsdk.LRElement_e_ElementTypeForm
    e_ElementTypeArtifact = _fsdk.LRElement_e_ElementTypeArtifact
    e_ElementTypeTextObject = _fsdk.LRElement_e_ElementTypeTextObject
    e_ElementTypePathObject = _fsdk.LRElement_e_ElementTypePathObject
    e_ElementTypeImageObject = _fsdk.LRElement_e_ElementTypeImageObject
    e_ElementTypeShadingObject = _fsdk.LRElement_e_ElementTypeShadingObject
    e_ElementTypeFormObject = _fsdk.LRElement_e_ElementTypeFormObject
    e_ElementTypeContainerObject = _fsdk.LRElement_e_ElementTypeContainerObject
    e_ElementTypeAnnotObject = _fsdk.LRElement_e_ElementTypeAnnotObject
    e_ElementTypePageObject = _fsdk.LRElement_e_ElementTypePageObject
    e_ElementTypeTextContent = _fsdk.LRElement_e_ElementTypeTextContent
    e_ElementTypePathContent = _fsdk.LRElement_e_ElementTypePathContent
    e_ElementTypeImageContent = _fsdk.LRElement_e_ElementTypeImageContent
    e_ElementTypeShadingContent = _fsdk.LRElement_e_ElementTypeShadingContent
    e_ElementTypeComplexContent = _fsdk.LRElement_e_ElementTypeComplexContent
    e_ElementTypeAnnotContent = _fsdk.LRElement_e_ElementTypeAnnotContent

    def __init__(self, *args):
        this = _fsdk.new_LRElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_LRElement
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.LRElement___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LRElement___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.LRElement_IsEmpty(self, *args)

    def GetElementType(self, *args):
        return _fsdk.LRElement_GetElementType(self, *args)

    def IsContentElement(self, *args):
        return _fsdk.LRElement_IsContentElement(self, *args)

    def IsGraphicsObjectElement(self, *args):
        return _fsdk.LRElement_IsGraphicsObjectElement(self, *args)

    def IsStructureElement(self, *args):
        return _fsdk.LRElement_IsStructureElement(self, *args)

    def StringifyType(self, *args):
        return _fsdk.LRElement_StringifyType(self, *args)
    if _newclass:
        StringifyElementType = staticmethod(_fsdk.LRElement_StringifyElementType)
    else:
        StringifyElementType = _fsdk.LRElement_StringifyElementType
LRElement_swigregister = _fsdk.LRElement_swigregister
LRElement_swigregister(LRElement)

def LRElement_StringifyElementType(*args):
    return _fsdk.LRElement_StringifyElementType(*args)
LRElement_StringifyElementType = _fsdk.LRElement_StringifyElementType

class LRStructureElement(LRElement):
    __swig_setmethods__ = {}
    for _s in [LRElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LRStructureElement, name, value)
    __swig_getmethods__ = {}
    for _s in [LRElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LRStructureElement, name)
    __repr__ = _swig_repr
    e_AttributeTypeInvalid = _fsdk.LRStructureElement_e_AttributeTypeInvalid
    e_AttributeTypeRole = _fsdk.LRStructureElement_e_AttributeTypeRole
    e_AttributeTypePlacement = _fsdk.LRStructureElement_e_AttributeTypePlacement
    e_AttributeTypeRotation = _fsdk.LRStructureElement_e_AttributeTypeRotation
    e_AttributeTypeWritingMode = _fsdk.LRStructureElement_e_AttributeTypeWritingMode
    e_AttributeTypeDestination = _fsdk.LRStructureElement_e_AttributeTypeDestination
    e_AttributeTypeBBox = _fsdk.LRStructureElement_e_AttributeTypeBBox
    e_AttributeTypeWidth = _fsdk.LRStructureElement_e_AttributeTypeWidth
    e_AttributeTypeHeight = _fsdk.LRStructureElement_e_AttributeTypeHeight
    e_AttributeTypeBackgroundColor = _fsdk.LRStructureElement_e_AttributeTypeBackgroundColor
    e_AttributeTypeBorderColor = _fsdk.LRStructureElement_e_AttributeTypeBorderColor
    e_AttributeTypeBorderStyle = _fsdk.LRStructureElement_e_AttributeTypeBorderStyle
    e_AttributeTypeBorderThickness = _fsdk.LRStructureElement_e_AttributeTypeBorderThickness
    e_AttributeTypeAttached = _fsdk.LRStructureElement_e_AttributeTypeAttached
    e_AttributeTypeSubType = _fsdk.LRStructureElement_e_AttributeTypeSubType
    e_AttributeTypePadding = _fsdk.LRStructureElement_e_AttributeTypePadding
    e_AttributeTypeColor = _fsdk.LRStructureElement_e_AttributeTypeColor
    e_AttributeTypeSpaceBefore = _fsdk.LRStructureElement_e_AttributeTypeSpaceBefore
    e_AttributeTypeSpaceAfter = _fsdk.LRStructureElement_e_AttributeTypeSpaceAfter
    e_AttributeTypeStartIndent = _fsdk.LRStructureElement_e_AttributeTypeStartIndent
    e_AttributeTypeEndIndent = _fsdk.LRStructureElement_e_AttributeTypeEndIndent
    e_AttributeTypeTextIndent = _fsdk.LRStructureElement_e_AttributeTypeTextIndent
    e_AttributeTypeTextAlign = _fsdk.LRStructureElement_e_AttributeTypeTextAlign
    e_AttributeTypeBlockAlign = _fsdk.LRStructureElement_e_AttributeTypeBlockAlign
    e_AttributeTypeInlineAlign = _fsdk.LRStructureElement_e_AttributeTypeInlineAlign
    e_AttributeTypeTBorderStyle = _fsdk.LRStructureElement_e_AttributeTypeTBorderStyle
    e_AttributeTypeTPadding = _fsdk.LRStructureElement_e_AttributeTypeTPadding
    e_AttributeTypeBaselineShift = _fsdk.LRStructureElement_e_AttributeTypeBaselineShift
    e_AttributeTypeLineHeight = _fsdk.LRStructureElement_e_AttributeTypeLineHeight
    e_AttributeTypeTextDecorationColor = _fsdk.LRStructureElement_e_AttributeTypeTextDecorationColor
    e_AttributeTypeTextDecorationThickness = _fsdk.LRStructureElement_e_AttributeTypeTextDecorationThickness
    e_AttributeTypeTextDecorationType = _fsdk.LRStructureElement_e_AttributeTypeTextDecorationType
    e_AttributeTypeRubyAlign = _fsdk.LRStructureElement_e_AttributeTypeRubyAlign
    e_AttributeTypeRubyPosition = _fsdk.LRStructureElement_e_AttributeTypeRubyPosition
    e_AttributeTypeGlyphOrientationVertical = _fsdk.LRStructureElement_e_AttributeTypeGlyphOrientationVertical
    e_AttributeTypeColumnCount = _fsdk.LRStructureElement_e_AttributeTypeColumnCount
    e_AttributeTypeColumnGap = _fsdk.LRStructureElement_e_AttributeTypeColumnGap
    e_AttributeTypeColumnWidths = _fsdk.LRStructureElement_e_AttributeTypeColumnWidths
    e_AttributeTypeListNumbering = _fsdk.LRStructureElement_e_AttributeTypeListNumbering
    e_AttributeTypeFieldRole = _fsdk.LRStructureElement_e_AttributeTypeFieldRole
    e_AttributeTypeFieldChecked = _fsdk.LRStructureElement_e_AttributeTypeFieldChecked
    e_AttributeTypeFieldDesc = _fsdk.LRStructureElement_e_AttributeTypeFieldDesc
    e_AttributeTypeRowSpan = _fsdk.LRStructureElement_e_AttributeTypeRowSpan
    e_AttributeTypeColSpan = _fsdk.LRStructureElement_e_AttributeTypeColSpan
    e_AttributeTypeTableHeaders = _fsdk.LRStructureElement_e_AttributeTypeTableHeaders
    e_AttributeTypeTableHeaderScope = _fsdk.LRStructureElement_e_AttributeTypeTableHeaderScope
    e_AttributeTypeTableSummary = _fsdk.LRStructureElement_e_AttributeTypeTableSummary
    e_AttributeTypeShort = _fsdk.LRStructureElement_e_AttributeTypeShort
    e_AttributeTypeDirection = _fsdk.LRStructureElement_e_AttributeTypeDirection
    e_AttributeTypeABox = _fsdk.LRStructureElement_e_AttributeTypeABox
    e_AttributeTypeVersion = _fsdk.LRStructureElement_e_AttributeTypeVersion
    e_AttributeValueEnumInvalid = _fsdk.LRStructureElement_e_AttributeValueEnumInvalid
    e_AttributeValueEnumBlock = _fsdk.LRStructureElement_e_AttributeValueEnumBlock
    e_AttributeValueEnumInline = _fsdk.LRStructureElement_e_AttributeValueEnumInline
    e_AttributeValueEnumWarichu = _fsdk.LRStructureElement_e_AttributeValueEnumWarichu
    e_AttributeValueEnumBefore = _fsdk.LRStructureElement_e_AttributeValueEnumBefore
    e_AttributeValueEnumAfter = _fsdk.LRStructureElement_e_AttributeValueEnumAfter
    e_AttributeValueEnumStart = _fsdk.LRStructureElement_e_AttributeValueEnumStart
    e_AttributeValueEnumEnd = _fsdk.LRStructureElement_e_AttributeValueEnumEnd
    e_AttributeValueEnumLrTb = _fsdk.LRStructureElement_e_AttributeValueEnumLrTb
    e_AttributeValueEnumRlTb = _fsdk.LRStructureElement_e_AttributeValueEnumRlTb
    e_AttributeValueEnumTbRl = _fsdk.LRStructureElement_e_AttributeValueEnumTbRl
    e_AttributeValueEnumTbLr = _fsdk.LRStructureElement_e_AttributeValueEnumTbLr
    e_AttributeValueEnumNone = _fsdk.LRStructureElement_e_AttributeValueEnumNone
    e_AttributeValueEnumHidden = _fsdk.LRStructureElement_e_AttributeValueEnumHidden
    e_AttributeValueEnumDotted = _fsdk.LRStructureElement_e_AttributeValueEnumDotted
    e_AttributeValueEnumDashed = _fsdk.LRStructureElement_e_AttributeValueEnumDashed
    e_AttributeValueEnumSolid = _fsdk.LRStructureElement_e_AttributeValueEnumSolid
    e_AttributeValueEnumDouble = _fsdk.LRStructureElement_e_AttributeValueEnumDouble
    e_AttributeValueEnumGroove = _fsdk.LRStructureElement_e_AttributeValueEnumGroove
    e_AttributeValueEnumRidge = _fsdk.LRStructureElement_e_AttributeValueEnumRidge
    e_AttributeValueEnumInset = _fsdk.LRStructureElement_e_AttributeValueEnumInset
    e_AttributeValueEnumOutset = _fsdk.LRStructureElement_e_AttributeValueEnumOutset
    e_AttributeValueEnumNormal = _fsdk.LRStructureElement_e_AttributeValueEnumNormal
    e_AttributeValueEnumAuto = _fsdk.LRStructureElement_e_AttributeValueEnumAuto
    e_AttributeValueEnumCenter = _fsdk.LRStructureElement_e_AttributeValueEnumCenter
    e_AttributeValueEnumJustify = _fsdk.LRStructureElement_e_AttributeValueEnumJustify
    e_AttributeValueEnumMiddle = _fsdk.LRStructureElement_e_AttributeValueEnumMiddle
    e_AttributeValueEnumUnderline = _fsdk.LRStructureElement_e_AttributeValueEnumUnderline
    e_AttributeValueEnumOverline = _fsdk.LRStructureElement_e_AttributeValueEnumOverline
    e_AttributeValueEnumLineThrough = _fsdk.LRStructureElement_e_AttributeValueEnumLineThrough
    e_AttributeValueEnumDistribute = _fsdk.LRStructureElement_e_AttributeValueEnumDistribute
    e_AttributeValueEnumDisc = _fsdk.LRStructureElement_e_AttributeValueEnumDisc
    e_AttributeValueEnumCircle = _fsdk.LRStructureElement_e_AttributeValueEnumCircle
    e_AttributeValueEnumSquare = _fsdk.LRStructureElement_e_AttributeValueEnumSquare
    e_AttributeValueEnumDecimal = _fsdk.LRStructureElement_e_AttributeValueEnumDecimal
    e_AttributeValueEnumUpperRoman = _fsdk.LRStructureElement_e_AttributeValueEnumUpperRoman
    e_AttributeValueEnumLowerRoman = _fsdk.LRStructureElement_e_AttributeValueEnumLowerRoman
    e_AttributeValueEnumUpperAlpha = _fsdk.LRStructureElement_e_AttributeValueEnumUpperAlpha
    e_AttributeValueEnumLowerAlpha = _fsdk.LRStructureElement_e_AttributeValueEnumLowerAlpha
    e_AttributeValueEnumUnordered = _fsdk.LRStructureElement_e_AttributeValueEnumUnordered
    e_AttributeValueEnumOrdered = _fsdk.LRStructureElement_e_AttributeValueEnumOrdered
    e_AttributeValueEnumFloat = _fsdk.LRStructureElement_e_AttributeValueEnumFloat
    e_AttributeValueEnumRB = _fsdk.LRStructureElement_e_AttributeValueEnumRB
    e_AttributeValueEnumCB = _fsdk.LRStructureElement_e_AttributeValueEnumCB
    e_AttributeValueEnumPB = _fsdk.LRStructureElement_e_AttributeValueEnumPB
    e_AttributeValueEnumTV = _fsdk.LRStructureElement_e_AttributeValueEnumTV
    e_AttributeValueEnumOn = _fsdk.LRStructureElement_e_AttributeValueEnumOn
    e_AttributeValueEnumOff = _fsdk.LRStructureElement_e_AttributeValueEnumOff
    e_AttributeValueEnumNeutral = _fsdk.LRStructureElement_e_AttributeValueEnumNeutral
    e_AttributeValueEnumRow = _fsdk.LRStructureElement_e_AttributeValueEnumRow
    e_AttributeValueEnumColumn = _fsdk.LRStructureElement_e_AttributeValueEnumColumn
    e_AttributeValueEnumBoth = _fsdk.LRStructureElement_e_AttributeValueEnumBoth
    e_AttributeValueEnumLeft = _fsdk.LRStructureElement_e_AttributeValueEnumLeft
    e_AttributeValueEnumTop = _fsdk.LRStructureElement_e_AttributeValueEnumTop
    e_AttributeValueEnumBottom = _fsdk.LRStructureElement_e_AttributeValueEnumBottom
    e_AttributeValueEnumRight = _fsdk.LRStructureElement_e_AttributeValueEnumRight
    e_AttributeValueEnumPagination = _fsdk.LRStructureElement_e_AttributeValueEnumPagination
    e_AttributeValueEnumLayout = _fsdk.LRStructureElement_e_AttributeValueEnumLayout
    e_AttributeValueEnumPage = _fsdk.LRStructureElement_e_AttributeValueEnumPage
    e_AttributeValueEnumBackground = _fsdk.LRStructureElement_e_AttributeValueEnumBackground
    e_AttributeValueEnumHeader = _fsdk.LRStructureElement_e_AttributeValueEnumHeader
    e_AttributeValueEnumFooter = _fsdk.LRStructureElement_e_AttributeValueEnumFooter
    e_AttributeValueEnumWatermark = _fsdk.LRStructureElement_e_AttributeValueEnumWatermark
    e_AttributeValueEnumPageNum = _fsdk.LRStructureElement_e_AttributeValueEnumPageNum
    e_AttributeValueEnumBates = _fsdk.LRStructureElement_e_AttributeValueEnumBates
    e_AttributeValueEnumOther = _fsdk.LRStructureElement_e_AttributeValueEnumOther
    e_AttributeValueTypeEmpty = _fsdk.LRStructureElement_e_AttributeValueTypeEmpty
    e_AttributeValueTypeEnum = _fsdk.LRStructureElement_e_AttributeValueTypeEnum
    e_AttributeValueTypeInt32 = _fsdk.LRStructureElement_e_AttributeValueTypeInt32
    e_AttributeValueTypeFloat = _fsdk.LRStructureElement_e_AttributeValueTypeFloat
    e_AttributeValueTypeARGB = _fsdk.LRStructureElement_e_AttributeValueTypeARGB
    e_AttributeValueTypeWStr = _fsdk.LRStructureElement_e_AttributeValueTypeWStr
    e_AttributeValueTypeElement = _fsdk.LRStructureElement_e_AttributeValueTypeElement
    e_AttributeValueTypeEnumArray = _fsdk.LRStructureElement_e_AttributeValueTypeEnumArray
    e_AttributeValueTypeInt32Array = _fsdk.LRStructureElement_e_AttributeValueTypeInt32Array
    e_AttributeValueTypeFloatArray = _fsdk.LRStructureElement_e_AttributeValueTypeFloatArray
    e_AttributeValueTypeARGBArray = _fsdk.LRStructureElement_e_AttributeValueTypeARGBArray
    e_AttributeValueTypeWStrArray = _fsdk.LRStructureElement_e_AttributeValueTypeWStrArray
    e_AttributeValueTypeElementArray = _fsdk.LRStructureElement_e_AttributeValueTypeElementArray

    def __init__(self, *args):
        this = _fsdk.new_LRStructureElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_LRStructureElement
    __del__ = lambda self: None
    if _newclass:
        StringifyAttributeType = staticmethod(_fsdk.LRStructureElement_StringifyAttributeType)
    else:
        StringifyAttributeType = _fsdk.LRStructureElement_StringifyAttributeType
    if _newclass:
        ParseAttributeType = staticmethod(_fsdk.LRStructureElement_ParseAttributeType)
    else:
        ParseAttributeType = _fsdk.LRStructureElement_ParseAttributeType
    if _newclass:
        StringifyEnumVariant = staticmethod(_fsdk.LRStructureElement_StringifyEnumVariant)
    else:
        StringifyEnumVariant = _fsdk.LRStructureElement_StringifyEnumVariant
    if _newclass:
        IsArrayAttributeValueType = staticmethod(_fsdk.LRStructureElement_IsArrayAttributeValueType)
    else:
        IsArrayAttributeValueType = _fsdk.LRStructureElement_IsArrayAttributeValueType

    def GetSupportedAttributeCount(self, *args):
        return _fsdk.LRStructureElement_GetSupportedAttributeCount(self, *args)

    def GetSupportedAttribute(self, *args):
        return _fsdk.LRStructureElement_GetSupportedAttribute(self, *args)

    def GetAttributeValueCount(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueCount(self, *args)

    def GetAttributeValueType(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueType(self, *args)

    def GetAttributeValueEnum(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueEnum(self, *args)

    def GetAttributeValueInt32(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueInt32(self, *args)

    def GetAttributeValueFloat(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueFloat(self, *args)

    def GetAttributeValueARGB(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueARGB(self, *args)

    def GetAttributeValueString(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueString(self, *args)

    def GetAttributeValueElement(self, *args):
        return _fsdk.LRStructureElement_GetAttributeValueElement(self, *args)

    def GetParentElement(self, *args):
        return _fsdk.LRStructureElement_GetParentElement(self, *args)

    def GetChildCount(self, *args):
        return _fsdk.LRStructureElement_GetChildCount(self, *args)

    def GetChild(self, *args):
        return _fsdk.LRStructureElement_GetChild(self, *args)

    def GetBBox(self, *args):
        return _fsdk.LRStructureElement_GetBBox(self, *args)
LRStructureElement_swigregister = _fsdk.LRStructureElement_swigregister
LRStructureElement_swigregister(LRStructureElement)

def LRStructureElement_StringifyAttributeType(*args):
    return _fsdk.LRStructureElement_StringifyAttributeType(*args)
LRStructureElement_StringifyAttributeType = _fsdk.LRStructureElement_StringifyAttributeType

def LRStructureElement_ParseAttributeType(*args):
    return _fsdk.LRStructureElement_ParseAttributeType(*args)
LRStructureElement_ParseAttributeType = _fsdk.LRStructureElement_ParseAttributeType

def LRStructureElement_StringifyEnumVariant(*args):
    return _fsdk.LRStructureElement_StringifyEnumVariant(*args)
LRStructureElement_StringifyEnumVariant = _fsdk.LRStructureElement_StringifyEnumVariant

def LRStructureElement_IsArrayAttributeValueType(*args):
    return _fsdk.LRStructureElement_IsArrayAttributeValueType(*args)
LRStructureElement_IsArrayAttributeValueType = _fsdk.LRStructureElement_IsArrayAttributeValueType

class LRGraphicsObjectElement(LRElement):
    __swig_setmethods__ = {}
    for _s in [LRElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LRGraphicsObjectElement, name, value)
    __swig_getmethods__ = {}
    for _s in [LRElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LRGraphicsObjectElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LRGraphicsObjectElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_LRGraphicsObjectElement
    __del__ = lambda self: None

    def GetParentGraphicsObjectElement(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetParentGraphicsObjectElement(self, *args)

    def GetGraphicsObject(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetGraphicsObject(self, *args)

    def GetDict(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetDict(self, *args)

    def GetGraphicsObjectIndex(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetGraphicsObjectIndex(self, *args)

    def GetBBox(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetBBox(self, *args)

    def GetMatrix(self, *args):
        return _fsdk.LRGraphicsObjectElement_GetMatrix(self, *args)
LRGraphicsObjectElement_swigregister = _fsdk.LRGraphicsObjectElement_swigregister
LRGraphicsObjectElement_swigregister(LRGraphicsObjectElement)

class LRContentElement(LRElement):
    __swig_setmethods__ = {}
    for _s in [LRElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LRContentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [LRElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LRContentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LRContentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_LRContentElement
    __del__ = lambda self: None

    def GetParentElement(self, *args):
        return _fsdk.LRContentElement_GetParentElement(self, *args)

    def GetGraphicsObjectElement(self, *args):
        return _fsdk.LRContentElement_GetGraphicsObjectElement(self, *args)

    def GetGraphicsObjectRange(self, *args):
        return _fsdk.LRContentElement_GetGraphicsObjectRange(self, *args)

    def GetBBox(self, *args):
        return _fsdk.LRContentElement_GetBBox(self, *args)

    def GetMatrix(self, *args):
        return _fsdk.LRContentElement_GetMatrix(self, *args)
LRContentElement_swigregister = _fsdk.LRContentElement_swigregister
LRContentElement_swigregister(LRContentElement)

class LRContext(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LRContext, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LRContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LRContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_LRContext
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.LRContext___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LRContext___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.LRContext_IsEmpty(self, *args)

    def StartParse(self, *args):
        return _fsdk.LRContext_StartParse(self, *args)

    def GetRootElement(self, *args):
        return _fsdk.LRContext_GetRootElement(self, *args)
LRContext_swigregister = _fsdk.LRContext_swigregister
LRContext_swigregister(LRContext)

class TaggedPDFCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaggedPDFCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaggedPDFCallback, name)
    __repr__ = _swig_repr
    e_ReportCategoryRegion = _fsdk.TaggedPDFCallback_e_ReportCategoryRegion
    e_ReportCategoryArtifact = _fsdk.TaggedPDFCallback_e_ReportCategoryArtifact
    e_ReportCategoryParagraph = _fsdk.TaggedPDFCallback_e_ReportCategoryParagraph
    e_ReportCategoryListItem = _fsdk.TaggedPDFCallback_e_ReportCategoryListItem
    e_ReportCategoryFigure = _fsdk.TaggedPDFCallback_e_ReportCategoryFigure
    e_ReportCategoryTable = _fsdk.TaggedPDFCallback_e_ReportCategoryTable
    e_ReportCategoryTableRow = _fsdk.TaggedPDFCallback_e_ReportCategoryTableRow
    e_ReportCategoryTableHeader = _fsdk.TaggedPDFCallback_e_ReportCategoryTableHeader
    e_ReportCategoryTocItem = _fsdk.TaggedPDFCallback_e_ReportCategoryTocItem
    e_ReportConfidenceHigh = _fsdk.TaggedPDFCallback_e_ReportConfidenceHigh
    e_ReportConfidenceMediumHigh = _fsdk.TaggedPDFCallback_e_ReportConfidenceMediumHigh
    e_ReportConfidenceMedium = _fsdk.TaggedPDFCallback_e_ReportConfidenceMedium
    e_ReportConfidenceMediumLow = _fsdk.TaggedPDFCallback_e_ReportConfidenceMediumLow
    e_ReportConfidenceLow = _fsdk.TaggedPDFCallback_e_ReportConfidenceLow

    def Release(self, *args):
        return _fsdk.TaggedPDFCallback_Release(self, *args)

    def Report(self, *args):
        return _fsdk.TaggedPDFCallback_Report(self, *args)

    def __init__(self, *args):
        if self.__class__ == TaggedPDFCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_TaggedPDFCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_TaggedPDFCallback(self)
        return weakref_proxy(self)
TaggedPDFCallback_swigregister = _fsdk.TaggedPDFCallback_swigregister
TaggedPDFCallback_swigregister(TaggedPDFCallback)

class TaggedPDF(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaggedPDF, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaggedPDF, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TaggedPDF
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TaggedPDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TaggedPDF___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TaggedPDF___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TaggedPDF_IsEmpty(self, *args)

    def SetCallback(self, *args):
        return _fsdk.TaggedPDF_SetCallback(self, *args)

    def StartTagDocument(self, *args):
        return _fsdk.TaggedPDF_StartTagDocument(self, *args)

    def GetFigureCount(self, *args):
        return _fsdk.TaggedPDF_GetFigureCount(self, *args)

    def SetAsDecorativeFigure(self, *args):
        return _fsdk.TaggedPDF_SetAsDecorativeFigure(self, *args)

    def SetFigureAlternateText(self, *args):
        return _fsdk.TaggedPDF_SetFigureAlternateText(self, *args)

    def GetFigureAlternateText(self, *args):
        return _fsdk.TaggedPDF_GetFigureAlternateText(self, *args)

    def GetFigureRect(self, *args):
        return _fsdk.TaggedPDF_GetFigureRect(self, *args)

    def GetFigurePageIndex(self, *args):
        return _fsdk.TaggedPDF_GetFigurePageIndex(self, *args)
TaggedPDF_swigregister = _fsdk.TaggedPDF_swigregister
TaggedPDF_swigregister(TaggedPDF)

class OFDPage(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFDPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OFDPage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_OFDPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Release(self, *args):
        return _fsdk.OFDPage_Release(self, *args)

    def __eq__(self, *args):
        return _fsdk.OFDPage___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OFDPage___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OFDPage_IsEmpty(self, *args)

    def GetWidth(self, *args):
        return _fsdk.OFDPage_GetWidth(self, *args)

    def GetHeight(self, *args):
        return _fsdk.OFDPage_GetHeight(self, *args)

    def GetDisplayMatrix(self, *args):
        return _fsdk.OFDPage_GetDisplayMatrix(self, *args)
    __swig_destroy__ = _fsdk.delete_OFDPage
    __del__ = lambda self: None
OFDPage_swigregister = _fsdk.OFDPage_swigregister
OFDPage_swigregister(OFDPage)

class OFDDoc(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFDDoc, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OFDDoc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_OFDDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Release(self, *args):
        return _fsdk.OFDDoc_Release(self, *args)

    def __eq__(self, *args):
        return _fsdk.OFDDoc___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OFDDoc___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OFDDoc_IsEmpty(self, *args)

    def GetPageCount(self, *args):
        return _fsdk.OFDDoc_GetPageCount(self, *args)

    def GetPage(self, *args):
        return _fsdk.OFDDoc_GetPage(self, *args)
    __swig_destroy__ = _fsdk.delete_OFDDoc
    __del__ = lambda self: None
OFDDoc_swigregister = _fsdk.OFDDoc_swigregister
OFDDoc_swigregister(OFDDoc)

class OFDRenderer(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFDRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OFDRenderer, name)
    __repr__ = _swig_repr
    e_ColorModeNormal = _fsdk.OFDRenderer_e_ColorModeNormal
    e_ColorModeMappingGray = _fsdk.OFDRenderer_e_ColorModeMappingGray
    e_ColorModeMapping = _fsdk.OFDRenderer_e_ColorModeMapping
    e_ContentFlagAllContent = _fsdk.OFDRenderer_e_ContentFlagAllContent
    e_ContentFlagPage = _fsdk.OFDRenderer_e_ContentFlagPage
    e_ContentFlagAnnot = _fsdk.OFDRenderer_e_ContentFlagAnnot
    e_ContentFlagHighLightAnnots = _fsdk.OFDRenderer_e_ContentFlagHighLightAnnots
    e_ContentFlagStampAnnots = _fsdk.OFDRenderer_e_ContentFlagStampAnnots

    def __init__(self, *args):
        this = _fsdk.new_OFDRenderer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_OFDRenderer
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.OFDRenderer___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OFDRenderer___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OFDRenderer_IsEmpty(self, *args)

    def SetColorMode(self, *args):
        return _fsdk.OFDRenderer_SetColorMode(self, *args)

    def SetContentFlag(self, *args):
        return _fsdk.OFDRenderer_SetContentFlag(self, *args)

    def StartRender(self, *args):
        return _fsdk.OFDRenderer_StartRender(self, *args)
OFDRenderer_swigregister = _fsdk.OFDRenderer_swigregister
OFDRenderer_swigregister(OFDRenderer)

class AuditSpaceSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuditSpaceSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuditSpaceSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_AuditSpaceSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["content_streams"] = _fsdk.AuditSpaceSize_content_streams_set
    __swig_getmethods__["content_streams"] = _fsdk.AuditSpaceSize_content_streams_get
    if _newclass:
        content_streams = _swig_property(_fsdk.AuditSpaceSize_content_streams_get, _fsdk.AuditSpaceSize_content_streams_set)
    __swig_setmethods__["images"] = _fsdk.AuditSpaceSize_images_set
    __swig_getmethods__["images"] = _fsdk.AuditSpaceSize_images_get
    if _newclass:
        images = _swig_property(_fsdk.AuditSpaceSize_images_get, _fsdk.AuditSpaceSize_images_set)
    __swig_setmethods__["fonts"] = _fsdk.AuditSpaceSize_fonts_set
    __swig_getmethods__["fonts"] = _fsdk.AuditSpaceSize_fonts_get
    if _newclass:
        fonts = _swig_property(_fsdk.AuditSpaceSize_fonts_get, _fsdk.AuditSpaceSize_fonts_set)
    __swig_setmethods__["bookmarks"] = _fsdk.AuditSpaceSize_bookmarks_set
    __swig_getmethods__["bookmarks"] = _fsdk.AuditSpaceSize_bookmarks_get
    if _newclass:
        bookmarks = _swig_property(_fsdk.AuditSpaceSize_bookmarks_get, _fsdk.AuditSpaceSize_bookmarks_set)
    __swig_setmethods__["x_object_forms"] = _fsdk.AuditSpaceSize_x_object_forms_set
    __swig_getmethods__["x_object_forms"] = _fsdk.AuditSpaceSize_x_object_forms_get
    if _newclass:
        x_object_forms = _swig_property(_fsdk.AuditSpaceSize_x_object_forms_get, _fsdk.AuditSpaceSize_x_object_forms_set)
    __swig_setmethods__["structure_infos"] = _fsdk.AuditSpaceSize_structure_infos_set
    __swig_getmethods__["structure_infos"] = _fsdk.AuditSpaceSize_structure_infos_get
    if _newclass:
        structure_infos = _swig_property(_fsdk.AuditSpaceSize_structure_infos_get, _fsdk.AuditSpaceSize_structure_infos_set)
    __swig_setmethods__["acroforms"] = _fsdk.AuditSpaceSize_acroforms_set
    __swig_getmethods__["acroforms"] = _fsdk.AuditSpaceSize_acroforms_get
    if _newclass:
        acroforms = _swig_property(_fsdk.AuditSpaceSize_acroforms_get, _fsdk.AuditSpaceSize_acroforms_set)
    __swig_setmethods__["link_annots"] = _fsdk.AuditSpaceSize_link_annots_set
    __swig_getmethods__["link_annots"] = _fsdk.AuditSpaceSize_link_annots_get
    if _newclass:
        link_annots = _swig_property(_fsdk.AuditSpaceSize_link_annots_get, _fsdk.AuditSpaceSize_link_annots_set)
    __swig_setmethods__["named_destnations"] = _fsdk.AuditSpaceSize_named_destnations_set
    __swig_getmethods__["named_destnations"] = _fsdk.AuditSpaceSize_named_destnations_get
    if _newclass:
        named_destnations = _swig_property(_fsdk.AuditSpaceSize_named_destnations_get, _fsdk.AuditSpaceSize_named_destnations_set)
    __swig_setmethods__["color_space"] = _fsdk.AuditSpaceSize_color_space_set
    __swig_getmethods__["color_space"] = _fsdk.AuditSpaceSize_color_space_get
    if _newclass:
        color_space = _swig_property(_fsdk.AuditSpaceSize_color_space_get, _fsdk.AuditSpaceSize_color_space_set)
    __swig_setmethods__["pattern_infos"] = _fsdk.AuditSpaceSize_pattern_infos_set
    __swig_getmethods__["pattern_infos"] = _fsdk.AuditSpaceSize_pattern_infos_get
    if _newclass:
        pattern_infos = _swig_property(_fsdk.AuditSpaceSize_pattern_infos_get, _fsdk.AuditSpaceSize_pattern_infos_set)
    __swig_setmethods__["piece_infos"] = _fsdk.AuditSpaceSize_piece_infos_set
    __swig_getmethods__["piece_infos"] = _fsdk.AuditSpaceSize_piece_infos_get
    if _newclass:
        piece_infos = _swig_property(_fsdk.AuditSpaceSize_piece_infos_get, _fsdk.AuditSpaceSize_piece_infos_set)
    __swig_setmethods__["comments_and_3d_contents"] = _fsdk.AuditSpaceSize_comments_and_3d_contents_set
    __swig_getmethods__["comments_and_3d_contents"] = _fsdk.AuditSpaceSize_comments_and_3d_contents_get
    if _newclass:
        comments_and_3d_contents = _swig_property(_fsdk.AuditSpaceSize_comments_and_3d_contents_get, _fsdk.AuditSpaceSize_comments_and_3d_contents_set)
    __swig_setmethods__["shading_pattern_infos"] = _fsdk.AuditSpaceSize_shading_pattern_infos_set
    __swig_getmethods__["shading_pattern_infos"] = _fsdk.AuditSpaceSize_shading_pattern_infos_get
    if _newclass:
        shading_pattern_infos = _swig_property(_fsdk.AuditSpaceSize_shading_pattern_infos_get, _fsdk.AuditSpaceSize_shading_pattern_infos_set)
    __swig_setmethods__["extend_graphics_states"] = _fsdk.AuditSpaceSize_extend_graphics_states_set
    __swig_getmethods__["extend_graphics_states"] = _fsdk.AuditSpaceSize_extend_graphics_states_get
    if _newclass:
        extend_graphics_states = _swig_property(_fsdk.AuditSpaceSize_extend_graphics_states_get, _fsdk.AuditSpaceSize_extend_graphics_states_set)
    __swig_setmethods__["cross_ref_tables"] = _fsdk.AuditSpaceSize_cross_ref_tables_set
    __swig_getmethods__["cross_ref_tables"] = _fsdk.AuditSpaceSize_cross_ref_tables_get
    if _newclass:
        cross_ref_tables = _swig_property(_fsdk.AuditSpaceSize_cross_ref_tables_get, _fsdk.AuditSpaceSize_cross_ref_tables_set)
    __swig_setmethods__["thumbs"] = _fsdk.AuditSpaceSize_thumbs_set
    __swig_getmethods__["thumbs"] = _fsdk.AuditSpaceSize_thumbs_get
    if _newclass:
        thumbs = _swig_property(_fsdk.AuditSpaceSize_thumbs_get, _fsdk.AuditSpaceSize_thumbs_set)
    __swig_setmethods__["embed_files"] = _fsdk.AuditSpaceSize_embed_files_set
    __swig_getmethods__["embed_files"] = _fsdk.AuditSpaceSize_embed_files_get
    if _newclass:
        embed_files = _swig_property(_fsdk.AuditSpaceSize_embed_files_get, _fsdk.AuditSpaceSize_embed_files_set)
    __swig_setmethods__["web_infos"] = _fsdk.AuditSpaceSize_web_infos_set
    __swig_getmethods__["web_infos"] = _fsdk.AuditSpaceSize_web_infos_get
    if _newclass:
        web_infos = _swig_property(_fsdk.AuditSpaceSize_web_infos_get, _fsdk.AuditSpaceSize_web_infos_set)
    __swig_destroy__ = _fsdk.delete_AuditSpaceSize
    __del__ = lambda self: None
AuditSpaceSize_swigregister = _fsdk.AuditSpaceSize_swigregister
AuditSpaceSize_swigregister(AuditSpaceSize)

class ImageCompressionCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCompressionCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCompressionCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.ImageCompressionCallback_Release(self, *args)

    def GetTemporaryFileStream(self, *args):
        return _fsdk.ImageCompressionCallback_GetTemporaryFileStream(self, *args)

    def __init__(self, *args):
        if self.__class__ == ImageCompressionCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ImageCompressionCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ImageCompressionCallback(self)
        return weakref_proxy(self)
ImageCompressionCallback_swigregister = _fsdk.ImageCompressionCallback_swigregister
ImageCompressionCallback_swigregister(ImageCompressionCallback)

class Optimizer(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)
    __repr__ = _swig_repr
    if _newclass:
        Optimize = staticmethod(_fsdk.Optimizer_Optimize)
    else:
        Optimize = _fsdk.Optimizer_Optimize
    if _newclass:
        StartSubsetEmbedFont = staticmethod(_fsdk.Optimizer_StartSubsetEmbedFont)
    else:
        StartSubsetEmbedFont = _fsdk.Optimizer_StartSubsetEmbedFont
    if _newclass:
        OptimizeScannedPDF = staticmethod(_fsdk.Optimizer_OptimizeScannedPDF)
    else:
        OptimizeScannedPDF = _fsdk.Optimizer_OptimizeScannedPDF
    if _newclass:
        ComputeAuditSpace = staticmethod(_fsdk.Optimizer_ComputeAuditSpace)
    else:
        ComputeAuditSpace = _fsdk.Optimizer_ComputeAuditSpace

    def __init__(self, *args):
        this = _fsdk.new_Optimizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Optimizer
    __del__ = lambda self: None
Optimizer_swigregister = _fsdk.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

def Optimizer_Optimize(*args):
    return _fsdk.Optimizer_Optimize(*args)
Optimizer_Optimize = _fsdk.Optimizer_Optimize

def Optimizer_StartSubsetEmbedFont(*args):
    return _fsdk.Optimizer_StartSubsetEmbedFont(*args)
Optimizer_StartSubsetEmbedFont = _fsdk.Optimizer_StartSubsetEmbedFont

def Optimizer_OptimizeScannedPDF(*args):
    return _fsdk.Optimizer_OptimizeScannedPDF(*args)
Optimizer_OptimizeScannedPDF = _fsdk.Optimizer_OptimizeScannedPDF

def Optimizer_ComputeAuditSpace(*args):
    return _fsdk.Optimizer_ComputeAuditSpace(*args)
Optimizer_ComputeAuditSpace = _fsdk.Optimizer_ComputeAuditSpace

class ImageSettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSettings, name)
    __repr__ = _swig_repr
    e_ImageCompressHigh = _fsdk.ImageSettings_e_ImageCompressHigh
    e_ImageCompressjpeg = _fsdk.ImageSettings_e_ImageCompressjpeg
    e_ImageCompressjpeg2000 = _fsdk.ImageSettings_e_ImageCompressjpeg2000
    e_ImageCompressRetain = _fsdk.ImageSettings_e_ImageCompressRetain
    e_ImageCompressZip = _fsdk.ImageSettings_e_ImageCompressZip
    e_ImageCompressQualityMinimum = _fsdk.ImageSettings_e_ImageCompressQualityMinimum
    e_ImageCompressQualityLow = _fsdk.ImageSettings_e_ImageCompressQualityLow
    e_ImageCompressQualityMedium = _fsdk.ImageSettings_e_ImageCompressQualityMedium
    e_ImageCompressQualityHigh = _fsdk.ImageSettings_e_ImageCompressQualityHigh
    e_ImageCompressQualityMaximum = _fsdk.ImageSettings_e_ImageCompressQualityMaximum
    e_ImageCompressQualityLossless = _fsdk.ImageSettings_e_ImageCompressQualityLossless
    e_StretchDefault = _fsdk.ImageSettings_e_StretchDefault
    e_StretchOff = _fsdk.ImageSettings_e_StretchOff
    e_StretchInterpol = _fsdk.ImageSettings_e_StretchInterpol
    e_StretchDownsample = _fsdk.ImageSettings_e_StretchDownsample
    e_StretchBicubic = _fsdk.ImageSettings_e_StretchBicubic
    e_StretchNoSmooth = _fsdk.ImageSettings_e_StretchNoSmooth
    __swig_destroy__ = _fsdk.delete_ImageSettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ImageSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ImageSettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ImageSettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ImageSettings_IsEmpty(self, *args)

    def SetStretchMode(self, *args):
        return _fsdk.ImageSettings_SetStretchMode(self, *args)

    def SetImageDPI(self, *args):
        return _fsdk.ImageSettings_SetImageDPI(self, *args)

    def SetImageDPILimit(self, *args):
        return _fsdk.ImageSettings_SetImageDPILimit(self, *args)

    def SetCompressionMode(self, *args):
        return _fsdk.ImageSettings_SetCompressionMode(self, *args)

    def SetQuality(self, *args):
        return _fsdk.ImageSettings_SetQuality(self, *args)

    def SetBackgroundDownScale(self, *args):
        return _fsdk.ImageSettings_SetBackgroundDownScale(self, *args)

    def SetForegroundDownScale(self, *args):
        return _fsdk.ImageSettings_SetForegroundDownScale(self, *args)

    def SetTextSensitivity(self, *args):
        return _fsdk.ImageSettings_SetTextSensitivity(self, *args)

    def SetTileSize(self, *args):
        return _fsdk.ImageSettings_SetTileSize(self, *args)
ImageSettings_swigregister = _fsdk.ImageSettings_swigregister
ImageSettings_swigregister(ImageSettings)

class MonoImageSettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonoImageSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonoImageSettings, name)
    __repr__ = _swig_repr
    e_ImageCompressCCITT3 = _fsdk.MonoImageSettings_e_ImageCompressCCITT3
    e_ImageCompressCCITT4 = _fsdk.MonoImageSettings_e_ImageCompressCCITT4
    e_ImageCompressHigh = _fsdk.MonoImageSettings_e_ImageCompressHigh
    e_ImageCompressjbig2 = _fsdk.MonoImageSettings_e_ImageCompressjbig2
    e_ImageCompressRetain = _fsdk.MonoImageSettings_e_ImageCompressRetain
    e_ImageCompressRunLength = _fsdk.MonoImageSettings_e_ImageCompressRunLength
    e_ImageCompressZip = _fsdk.MonoImageSettings_e_ImageCompressZip
    e_ImageCompressQualityLossless = _fsdk.MonoImageSettings_e_ImageCompressQualityLossless
    e_ImageCompressQualityLossy = _fsdk.MonoImageSettings_e_ImageCompressQualityLossy
    e_ImageCompressQualityMinimum = _fsdk.MonoImageSettings_e_ImageCompressQualityMinimum
    e_ImageCompressQualityLow = _fsdk.MonoImageSettings_e_ImageCompressQualityLow
    e_ImageCompressQualityMedium = _fsdk.MonoImageSettings_e_ImageCompressQualityMedium
    e_ImageCompressQualityHigh = _fsdk.MonoImageSettings_e_ImageCompressQualityHigh
    e_ImageCompressQualityMaximum = _fsdk.MonoImageSettings_e_ImageCompressQualityMaximum
    e_StretchDefault = _fsdk.MonoImageSettings_e_StretchDefault
    e_StretchOff = _fsdk.MonoImageSettings_e_StretchOff
    e_StretchInterpol = _fsdk.MonoImageSettings_e_StretchInterpol
    e_StretchDownsample = _fsdk.MonoImageSettings_e_StretchDownsample
    e_StretchBicubic = _fsdk.MonoImageSettings_e_StretchBicubic
    e_StretchNoSmooth = _fsdk.MonoImageSettings_e_StretchNoSmooth
    __swig_destroy__ = _fsdk.delete_MonoImageSettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_MonoImageSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.MonoImageSettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.MonoImageSettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.MonoImageSettings_IsEmpty(self, *args)

    def SetImageDPI(self, *args):
        return _fsdk.MonoImageSettings_SetImageDPI(self, *args)

    def SetImageDPILimit(self, *args):
        return _fsdk.MonoImageSettings_SetImageDPILimit(self, *args)

    def SetCompressionMode(self, *args):
        return _fsdk.MonoImageSettings_SetCompressionMode(self, *args)

    def SetStretchMode(self, *args):
        return _fsdk.MonoImageSettings_SetStretchMode(self, *args)

    def SetQuality(self, *args):
        return _fsdk.MonoImageSettings_SetQuality(self, *args)
MonoImageSettings_swigregister = _fsdk.MonoImageSettings_swigregister
MonoImageSettings_swigregister(MonoImageSettings)

class UnembeddedFontSettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnembeddedFontSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnembeddedFontSettings, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_UnembeddedFontSettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_UnembeddedFontSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.UnembeddedFontSettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.UnembeddedFontSettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.UnembeddedFontSettings_IsEmpty(self, *args)

    def SetSubsetAllEmFonts(self, *args):
        return _fsdk.UnembeddedFontSettings_SetSubsetAllEmFonts(self, *args)

    def SetUnembeddedFontNameArray(self, *args):
        return _fsdk.UnembeddedFontSettings_SetUnembeddedFontNameArray(self, *args)
UnembeddedFontSettings_swigregister = _fsdk.UnembeddedFontSettings_swigregister
UnembeddedFontSettings_swigregister(UnembeddedFontSettings)

class OptimizerSettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerSettings, name)
    __repr__ = _swig_repr
    e_OptimizerCompressImages = _fsdk.OptimizerSettings_e_OptimizerCompressImages
    e_OptimizerCleanUp = _fsdk.OptimizerSettings_e_OptimizerCleanUp
    e_OptimizerDiscardObjects = _fsdk.OptimizerSettings_e_OptimizerDiscardObjects
    e_OptimizerUnembeddedFonts = _fsdk.OptimizerSettings_e_OptimizerUnembeddedFonts
    e_OptimizerDiscardUserData = _fsdk.OptimizerSettings_e_OptimizerDiscardUserData
    e_CleanUpUseFlateForNonEncodedStream = _fsdk.OptimizerSettings_e_CleanUpUseFlateForNonEncodedStream
    e_CleanUpUseFlateInsteadOfLZW = _fsdk.OptimizerSettings_e_CleanUpUseFlateInsteadOfLZW
    e_CleanUpRemoveInvalidBookmarks = _fsdk.OptimizerSettings_e_CleanUpRemoveInvalidBookmarks
    e_CleanUpRemoveInvalidLinks = _fsdk.OptimizerSettings_e_CleanUpRemoveInvalidLinks
    e_CleanUpDiscardUnreferencedNamedDes = _fsdk.OptimizerSettings_e_CleanUpDiscardUnreferencedNamedDes
    e_CleanUpOptPageContent = _fsdk.OptimizerSettings_e_CleanUpOptPageContent
    e_DiscardObjectsFormActions = _fsdk.OptimizerSettings_e_DiscardObjectsFormActions
    e_DiscardObjectsFlattenFormFields = _fsdk.OptimizerSettings_e_DiscardObjectsFlattenFormFields
    e_DiscardObjectsJavaScriptActions = _fsdk.OptimizerSettings_e_DiscardObjectsJavaScriptActions
    e_DiscardObjectsEmbeddedPageThumbnails = _fsdk.OptimizerSettings_e_DiscardObjectsEmbeddedPageThumbnails
    e_DiscardObjectsEmbeddedPrintSettings = _fsdk.OptimizerSettings_e_DiscardObjectsEmbeddedPrintSettings
    e_DiscardObjectsBookmarks = _fsdk.OptimizerSettings_e_DiscardObjectsBookmarks
    e_DiscardObjectsAlternateImages = _fsdk.OptimizerSettings_e_DiscardObjectsAlternateImages
    e_DiscardObjectsDocumentTags = _fsdk.OptimizerSettings_e_DiscardObjectsDocumentTags
    e_DiscardObjectsEmbeddedSearchIndex = _fsdk.OptimizerSettings_e_DiscardObjectsEmbeddedSearchIndex
    e_DiscardObjectsDetectAndMergeImageFragment = _fsdk.OptimizerSettings_e_DiscardObjectsDetectAndMergeImageFragment
    e_DiscardObjectsSmoothlinestocurves = _fsdk.OptimizerSettings_e_DiscardObjectsSmoothlinestocurves
    e_DiscardUserDataAllAnnotsFormsAndMultimedia = _fsdk.OptimizerSettings_e_DiscardUserDataAllAnnotsFormsAndMultimedia
    e_DiscardUserDataExternalCrossReferences = _fsdk.OptimizerSettings_e_DiscardUserDataExternalCrossReferences
    e_DiscardUserDataDocumentInfoAndMetaData = _fsdk.OptimizerSettings_e_DiscardUserDataDocumentInfoAndMetaData
    e_DiscardUserDataFileAttchments = _fsdk.OptimizerSettings_e_DiscardUserDataFileAttchments
    e_DiscardUserDataPrivateDataOfOtherApp = _fsdk.OptimizerSettings_e_DiscardUserDataPrivateDataOfOtherApp
    e_DiscardUserDataLayer = _fsdk.OptimizerSettings_e_DiscardUserDataLayer
    e_DiscardUserAllData = _fsdk.OptimizerSettings_e_DiscardUserAllData
    __swig_destroy__ = _fsdk.delete_OptimizerSettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_OptimizerSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.OptimizerSettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OptimizerSettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OptimizerSettings_IsEmpty(self, *args)

    def SetOptimizerOptions(self, *args):
        return _fsdk.OptimizerSettings_SetOptimizerOptions(self, *args)

    def SetColorGrayImageSettings(self, *args):
        return _fsdk.OptimizerSettings_SetColorGrayImageSettings(self, *args)

    def SetColorImageSettings(self, *args):
        return _fsdk.OptimizerSettings_SetColorImageSettings(self, *args)

    def SetGrayscaleImageSettings(self, *args):
        return _fsdk.OptimizerSettings_SetGrayscaleImageSettings(self, *args)

    def SetMonoImageSettings(self, *args):
        return _fsdk.OptimizerSettings_SetMonoImageSettings(self, *args)

    def SetUnembeddedFontSettings(self, *args):
        return _fsdk.OptimizerSettings_SetUnembeddedFontSettings(self, *args)

    def SetCleanUpOptions(self, *args):
        return _fsdk.OptimizerSettings_SetCleanUpOptions(self, *args)

    def SetDiscardObjectsOptions(self, *args):
        return _fsdk.OptimizerSettings_SetDiscardObjectsOptions(self, *args)

    def SetDiscardUserDataOptions(self, *args):
        return _fsdk.OptimizerSettings_SetDiscardUserDataOptions(self, *args)
OptimizerSettings_swigregister = _fsdk.OptimizerSettings_swigregister
OptimizerSettings_swigregister(OptimizerSettings)

class OptimizeScannedPDFSettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizeScannedPDFSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizeScannedPDFSettings, name)
    __repr__ = _swig_repr
    e_ScannedImageCompressHigh = _fsdk.OptimizeScannedPDFSettings_e_ScannedImageCompressHigh
    e_ScannedImageCompressjpeg = _fsdk.OptimizeScannedPDFSettings_e_ScannedImageCompressjpeg
    e_ScannedImageCompressjpeg2000LossLess = _fsdk.OptimizeScannedPDFSettings_e_ScannedImageCompressjpeg2000LossLess
    e_ScannedImageCompressjpeg2000Lossy = _fsdk.OptimizeScannedPDFSettings_e_ScannedImageCompressjpeg2000Lossy
    e_ScannedMonoImageCompressjbig2Lossy = _fsdk.OptimizeScannedPDFSettings_e_ScannedMonoImageCompressjbig2Lossy
    e_ScannedMonoImageCompressjbig2LossLess = _fsdk.OptimizeScannedPDFSettings_e_ScannedMonoImageCompressjbig2LossLess
    e_ScannedMonoImageCompressCCITT4 = _fsdk.OptimizeScannedPDFSettings_e_ScannedMonoImageCompressCCITT4
    e_ScannedMonoImageCompressHigh = _fsdk.OptimizeScannedPDFSettings_e_ScannedMonoImageCompressHigh
    __swig_destroy__ = _fsdk.delete_OptimizeScannedPDFSettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_OptimizeScannedPDFSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.OptimizeScannedPDFSettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OptimizeScannedPDFSettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OptimizeScannedPDFSettings_IsEmpty(self, *args)

    def SetOptimizedPages(self, *args):
        return _fsdk.OptimizeScannedPDFSettings_SetOptimizedPages(self, *args)

    def SetColorGrayImageCompressionMode(self, *args):
        return _fsdk.OptimizeScannedPDFSettings_SetColorGrayImageCompressionMode(self, *args)

    def SetColorGrayImageCompressionQuality(self, *args):
        return _fsdk.OptimizeScannedPDFSettings_SetColorGrayImageCompressionQuality(self, *args)

    def SetMonoImageCompressionMode(self, *args):
        return _fsdk.OptimizeScannedPDFSettings_SetMonoImageCompressionMode(self, *args)
OptimizeScannedPDFSettings_swigregister = _fsdk.OptimizeScannedPDFSettings_swigregister
OptimizeScannedPDFSettings_swigregister(OptimizeScannedPDFSettings)

class WidgetChoiceOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetChoiceOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetChoiceOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_WidgetChoiceOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.WidgetChoiceOption_Set(self, *args)
    __swig_setmethods__["option_label"] = _fsdk.WidgetChoiceOption_option_label_set
    __swig_getmethods__["option_label"] = _fsdk.WidgetChoiceOption_option_label_get
    if _newclass:
        option_label = _swig_property(_fsdk.WidgetChoiceOption_option_label_get, _fsdk.WidgetChoiceOption_option_label_set)
    __swig_setmethods__["selected"] = _fsdk.WidgetChoiceOption_selected_set
    __swig_getmethods__["selected"] = _fsdk.WidgetChoiceOption_selected_get
    if _newclass:
        selected = _swig_property(_fsdk.WidgetChoiceOption_selected_get, _fsdk.WidgetChoiceOption_selected_set)
    __swig_destroy__ = _fsdk.delete_WidgetChoiceOption
    __del__ = lambda self: None
WidgetChoiceOption_swigregister = _fsdk.WidgetChoiceOption_swigregister
WidgetChoiceOption_swigregister(WidgetChoiceOption)

class WidgetChoiceOptionArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetChoiceOptionArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetChoiceOptionArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_WidgetChoiceOptionArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_WidgetChoiceOptionArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.WidgetChoiceOptionArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.WidgetChoiceOptionArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.WidgetChoiceOptionArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.WidgetChoiceOptionArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.WidgetChoiceOptionArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.WidgetChoiceOptionArray_RemoveAll(self, *args)
WidgetChoiceOptionArray_swigregister = _fsdk.WidgetChoiceOptionArray_swigregister
WidgetChoiceOptionArray_swigregister(WidgetChoiceOptionArray)

class AppProviderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppProviderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppProviderCallback, name)
    __repr__ = _swig_repr
    e_AppInfoVersion = _fsdk.AppProviderCallback_e_AppInfoVersion
    e_AppInfoLanguage = _fsdk.AppProviderCallback_e_AppInfoLanguage
    e_AppInfoPlatform = _fsdk.AppProviderCallback_e_AppInfoPlatform
    e_AppInfoVariation = _fsdk.AppProviderCallback_e_AppInfoVariation
    e_AppInfoName = _fsdk.AppProviderCallback_e_AppInfoName
    e_AppInfoType = _fsdk.AppProviderCallback_e_AppInfoType
    e_BeepTypeError = _fsdk.AppProviderCallback_e_BeepTypeError
    e_BeepTypeWarning = _fsdk.AppProviderCallback_e_BeepTypeWarning
    e_BeepTypeQuestion = _fsdk.AppProviderCallback_e_BeepTypeQuestion
    e_BeepTypeStatus = _fsdk.AppProviderCallback_e_BeepTypeStatus
    e_BeepTypeDefault = _fsdk.AppProviderCallback_e_BeepTypeDefault
    e_StringIDValidateFailed = _fsdk.AppProviderCallback_e_StringIDValidateFailed
    e_StringIDCalcOverride = _fsdk.AppProviderCallback_e_StringIDCalcOverride
    e_StringIDModifyField = _fsdk.AppProviderCallback_e_StringIDModifyField
    e_StringIDNotModifyField = _fsdk.AppProviderCallback_e_StringIDNotModifyField
    e_StringIDAppName = _fsdk.AppProviderCallback_e_StringIDAppName
    e_StringIDImageFilter = _fsdk.AppProviderCallback_e_StringIDImageFilter
    e_StringIDUnknownCaught = _fsdk.AppProviderCallback_e_StringIDUnknownCaught
    e_StringIDUnableToSet = _fsdk.AppProviderCallback_e_StringIDUnableToSet
    e_StringIDValueExcalmatory = _fsdk.AppProviderCallback_e_StringIDValueExcalmatory
    e_StringIDInvalidEnumValue = _fsdk.AppProviderCallback_e_StringIDInvalidEnumValue
    e_StringIDUnsupportMethod = _fsdk.AppProviderCallback_e_StringIDUnsupportMethod
    e_StringIDUnsupportProperty = _fsdk.AppProviderCallback_e_StringIDUnsupportProperty
    e_StringIDInvalidPropertySetOperation = _fsdk.AppProviderCallback_e_StringIDInvalidPropertySetOperation
    e_StringIDNotDefaultValue = _fsdk.AppProviderCallback_e_StringIDNotDefaultValue
    e_StringIDUnableSetLanguage = _fsdk.AppProviderCallback_e_StringIDUnableSetLanguage
    e_StringIDUnableSetNumPages = _fsdk.AppProviderCallback_e_StringIDUnableSetNumPages
    e_StringIDUnableSetPlatformValue = _fsdk.AppProviderCallback_e_StringIDUnableSetPlatformValue
    e_StringIDUnableSetValidationsEnabledValue = _fsdk.AppProviderCallback_e_StringIDUnableSetValidationsEnabledValue
    e_StringIDUnableSetValidationsValue = _fsdk.AppProviderCallback_e_StringIDUnableSetValidationsValue
    e_StringIDUnableSetVersion = _fsdk.AppProviderCallback_e_StringIDUnableSetVersion
    e_StringIDUnableSetReady = _fsdk.AppProviderCallback_e_StringIDUnableSetReady
    e_StringIDNumberOfOccur = _fsdk.AppProviderCallback_e_StringIDNumberOfOccur
    e_StringIDUnableSetClassName = _fsdk.AppProviderCallback_e_StringIDUnableSetClassName
    e_StringIDUnableSetLengthValue = _fsdk.AppProviderCallback_e_StringIDUnableSetLengthValue
    e_StringIDUnsupportChar = _fsdk.AppProviderCallback_e_StringIDUnsupportChar
    e_StringIDBadSuffix = _fsdk.AppProviderCallback_e_StringIDBadSuffix
    e_StringIDExpectedIdent = _fsdk.AppProviderCallback_e_StringIDExpectedIdent
    e_StringIDExpectedString = _fsdk.AppProviderCallback_e_StringIDExpectedString
    e_StringIDInvalidateChar = _fsdk.AppProviderCallback_e_StringIDInvalidateChar
    e_StringIDRedefinition = _fsdk.AppProviderCallback_e_StringIDRedefinition
    e_StringIDInvalidToken = _fsdk.AppProviderCallback_e_StringIDInvalidToken
    e_StringIDInvalidExpression = _fsdk.AppProviderCallback_e_StringIDInvalidExpression
    e_StringIDUndefineIdentifier = _fsdk.AppProviderCallback_e_StringIDUndefineIdentifier
    e_StringIDInvalidateLeftValue = _fsdk.AppProviderCallback_e_StringIDInvalidateLeftValue
    e_StringIDCompilerError = _fsdk.AppProviderCallback_e_StringIDCompilerError
    e_StringIDCannotModifyValue = _fsdk.AppProviderCallback_e_StringIDCannotModifyValue
    e_StringIDParametersError = _fsdk.AppProviderCallback_e_StringIDParametersError
    e_StringIDExpectedEndIf = _fsdk.AppProviderCallback_e_StringIDExpectedEndIf
    e_StringIDUnexpectedExpression = _fsdk.AppProviderCallback_e_StringIDUnexpectedExpression
    e_StringIDConditionIsNull = _fsdk.AppProviderCallback_e_StringIDConditionIsNull
    e_StringIDIllegalBreak = _fsdk.AppProviderCallback_e_StringIDIllegalBreak
    e_StringIDIllegalContinue = _fsdk.AppProviderCallback_e_StringIDIllegalContinue
    e_StringIDExpectedOperator = _fsdk.AppProviderCallback_e_StringIDExpectedOperator
    e_StringIDDivideZero = _fsdk.AppProviderCallback_e_StringIDDivideZero
    e_StringIDCannotCovertToObject = _fsdk.AppProviderCallback_e_StringIDCannotCovertToObject
    e_StringIDNotFoundContainer = _fsdk.AppProviderCallback_e_StringIDNotFoundContainer
    e_StringIDNotFoundProperty = _fsdk.AppProviderCallback_e_StringIDNotFoundProperty
    e_StringIDNotFoundMethod = _fsdk.AppProviderCallback_e_StringIDNotFoundMethod
    e_StringIDNotFoundConst = _fsdk.AppProviderCallback_e_StringIDNotFoundConst
    e_StringIDNotAssignObject = _fsdk.AppProviderCallback_e_StringIDNotAssignObject
    e_StringIDInvalidateInstruction = _fsdk.AppProviderCallback_e_StringIDInvalidateInstruction
    e_StringIDExpectedNumber = _fsdk.AppProviderCallback_e_StringIDExpectedNumber
    e_StringIDValidateOutOfArray = _fsdk.AppProviderCallback_e_StringIDValidateOutOfArray
    e_StringIDCannotAssign = _fsdk.AppProviderCallback_e_StringIDCannotAssign
    e_StringIDNotFoundFunction = _fsdk.AppProviderCallback_e_StringIDNotFoundFunction
    e_StringIDIsNotArray = _fsdk.AppProviderCallback_e_StringIDIsNotArray
    e_StringIDOutOfArrayRange = _fsdk.AppProviderCallback_e_StringIDOutOfArrayRange
    e_StringIDNotSupportArrayCalculate = _fsdk.AppProviderCallback_e_StringIDNotSupportArrayCalculate
    e_StringIDArgumentNotArray = _fsdk.AppProviderCallback_e_StringIDArgumentNotArray
    e_StringIDArgumentExpectContainer = _fsdk.AppProviderCallback_e_StringIDArgumentExpectContainer
    e_StringIDAccessProertyInNotObject = _fsdk.AppProviderCallback_e_StringIDAccessProertyInNotObject
    e_StringIDFunctionBuildIn = _fsdk.AppProviderCallback_e_StringIDFunctionBuildIn
    e_StringIDErrorMessage = _fsdk.AppProviderCallback_e_StringIDErrorMessage
    e_StringIDIndexValueOutOfBounds = _fsdk.AppProviderCallback_e_StringIDIndexValueOutOfBounds
    e_StringIDIncorrectNumberOfMethod = _fsdk.AppProviderCallback_e_StringIDIncorrectNumberOfMethod
    e_StringIDArgumentMismatch = _fsdk.AppProviderCallback_e_StringIDArgumentMismatch
    e_StringIDInvalidEnumerate = _fsdk.AppProviderCallback_e_StringIDInvalidEnumerate
    e_StringIDInvalidAppend = _fsdk.AppProviderCallback_e_StringIDInvalidAppend
    e_StringIDSOMExpectedList = _fsdk.AppProviderCallback_e_StringIDSOMExpectedList
    e_StringIDNotHaveProperty = _fsdk.AppProviderCallback_e_StringIDNotHaveProperty
    e_StringIDInvalidNodeType = _fsdk.AppProviderCallback_e_StringIDInvalidNodeType
    e_StringIDViolateBoundary = _fsdk.AppProviderCallback_e_StringIDViolateBoundary
    e_StringIDServerDeny = _fsdk.AppProviderCallback_e_StringIDServerDeny
    e_StringIDWeekDaySun = _fsdk.AppProviderCallback_e_StringIDWeekDaySun
    e_StringIDWeekDayMon = _fsdk.AppProviderCallback_e_StringIDWeekDayMon
    e_StringIDWeekDayTue = _fsdk.AppProviderCallback_e_StringIDWeekDayTue
    e_StringIDWeekDayWed = _fsdk.AppProviderCallback_e_StringIDWeekDayWed
    e_StringIDWeekDayThu = _fsdk.AppProviderCallback_e_StringIDWeekDayThu
    e_StringIDWeekDayFri = _fsdk.AppProviderCallback_e_StringIDWeekDayFri
    e_StringIDWeekDaySat = _fsdk.AppProviderCallback_e_StringIDWeekDaySat
    e_StringIDMonthJan = _fsdk.AppProviderCallback_e_StringIDMonthJan
    e_StringIDMonthFeb = _fsdk.AppProviderCallback_e_StringIDMonthFeb
    e_StringIDMonthMarch = _fsdk.AppProviderCallback_e_StringIDMonthMarch
    e_StringIDMonthApril = _fsdk.AppProviderCallback_e_StringIDMonthApril
    e_StringIDMonthMay = _fsdk.AppProviderCallback_e_StringIDMonthMay
    e_StringIDMonthJune = _fsdk.AppProviderCallback_e_StringIDMonthJune
    e_StringIDMonthJuly = _fsdk.AppProviderCallback_e_StringIDMonthJuly
    e_StringIDMonthAug = _fsdk.AppProviderCallback_e_StringIDMonthAug
    e_StringIDMonthSep = _fsdk.AppProviderCallback_e_StringIDMonthSep
    e_StringIDMonthOct = _fsdk.AppProviderCallback_e_StringIDMonthOct
    e_StringIDMonthNov = _fsdk.AppProviderCallback_e_StringIDMonthNov
    e_StringIDMonthDec = _fsdk.AppProviderCallback_e_StringIDMonthDec
    e_StringIDToday = _fsdk.AppProviderCallback_e_StringIDToday
    e_StringIDValidateLimit = _fsdk.AppProviderCallback_e_StringIDValidateLimit
    e_StringIDValidateNullWarning = _fsdk.AppProviderCallback_e_StringIDValidateNullWarning
    e_StringIDValidateNullError = _fsdk.AppProviderCallback_e_StringIDValidateNullError
    e_StringIDValidateWarning = _fsdk.AppProviderCallback_e_StringIDValidateWarning
    e_StringIDValidateError = _fsdk.AppProviderCallback_e_StringIDValidateError
    e_StringIDValidateNumberError = _fsdk.AppProviderCallback_e_StringIDValidateNumberError
    e_StringIDScriptFailedError = _fsdk.AppProviderCallback_e_StringIDScriptFailedError
    e_StringIDScriptInvalidValue = _fsdk.AppProviderCallback_e_StringIDScriptInvalidValue
    e_StringIDSubmitValidateNullError = _fsdk.AppProviderCallback_e_StringIDSubmitValidateNullError
    e_StringIDInvalidBarcodeValue = _fsdk.AppProviderCallback_e_StringIDInvalidBarcodeValue
    e_StringIDScriptArgumentMismatch = _fsdk.AppProviderCallback_e_StringIDScriptArgumentMismatch
    e_MsgBoxIconError = _fsdk.AppProviderCallback_e_MsgBoxIconError
    e_MsgBoxIconWarning = _fsdk.AppProviderCallback_e_MsgBoxIconWarning
    e_MsgBoxIconQuestion = _fsdk.AppProviderCallback_e_MsgBoxIconQuestion
    e_MsgBoxIconStatus = _fsdk.AppProviderCallback_e_MsgBoxIconStatus
    e_MsgBtnTypeOK = _fsdk.AppProviderCallback_e_MsgBtnTypeOK
    e_MsgBtnTypeOKCancel = _fsdk.AppProviderCallback_e_MsgBtnTypeOKCancel
    e_MsgBtnTypeYesNo = _fsdk.AppProviderCallback_e_MsgBtnTypeYesNo
    e_MsgBtnTypeYesNoCancel = _fsdk.AppProviderCallback_e_MsgBtnTypeYesNoCancel
    e_MsgBtnIDOK = _fsdk.AppProviderCallback_e_MsgBtnIDOK
    e_MsgBtnIDCancel = _fsdk.AppProviderCallback_e_MsgBtnIDCancel
    e_MsgBtnIDNo = _fsdk.AppProviderCallback_e_MsgBtnIDNo
    e_MsgBtnIDYes = _fsdk.AppProviderCallback_e_MsgBtnIDYes

    def Release(self, *args):
        return _fsdk.AppProviderCallback_Release(self, *args)

    def GetAppInfo(self, *args):
        return _fsdk.AppProviderCallback_GetAppInfo(self, *args)

    def Beep(self, *args):
        return _fsdk.AppProviderCallback_Beep(self, *args)

    def MsgBox(self, *args):
        return _fsdk.AppProviderCallback_MsgBox(self, *args)

    def Response(self, *args):
        return _fsdk.AppProviderCallback_Response(self, *args)

    def DownLoadUrl(self, *args):
        return _fsdk.AppProviderCallback_DownLoadUrl(self, *args)

    def PostRequestURL(self, *args):
        return _fsdk.AppProviderCallback_PostRequestURL(self, *args)

    def PutRequestURL(self, *args):
        return _fsdk.AppProviderCallback_PutRequestURL(self, *args)

    def LoadString(self, *args):
        return _fsdk.AppProviderCallback_LoadString(self, *args)

    def ShowFileDialog(self, *args):
        return _fsdk.AppProviderCallback_ShowFileDialog(self, *args)

    def __init__(self, *args):
        if self.__class__ == AppProviderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_AppProviderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_AppProviderCallback(self)
        return weakref_proxy(self)
AppProviderCallback_swigregister = _fsdk.AppProviderCallback_swigregister
AppProviderCallback_swigregister(AppProviderCallback)

class DocProviderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocProviderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocProviderCallback, name)
    __repr__ = _swig_repr
    e_InvalidateFlagAllPages = _fsdk.DocProviderCallback_e_InvalidateFlagAllPages
    e_InvalidateFlagCurrentPage = _fsdk.DocProviderCallback_e_InvalidateFlagCurrentPage
    e_PrintOptionShowDialog = _fsdk.DocProviderCallback_e_PrintOptionShowDialog
    e_PrintOptionCanCancel = _fsdk.DocProviderCallback_e_PrintOptionCanCancel
    e_PrintOptionShrinkPage = _fsdk.DocProviderCallback_e_PrintOptionShrinkPage
    e_PrintOptionAsImage = _fsdk.DocProviderCallback_e_PrintOptionAsImage
    e_PrintOptionReverseOrder = _fsdk.DocProviderCallback_e_PrintOptionReverseOrder
    e_PrintOptionPrintAnnot = _fsdk.DocProviderCallback_e_PrintOptionPrintAnnot
    e_SubmitInXDP = _fsdk.DocProviderCallback_e_SubmitInXDP
    e_SubmitInPDF = _fsdk.DocProviderCallback_e_SubmitInPDF
    e_SubmitInUrlEncoded = _fsdk.DocProviderCallback_e_SubmitInUrlEncoded
    e_SubmitInXFD = _fsdk.DocProviderCallback_e_SubmitInXFD
    e_SubmitInXML = _fsdk.DocProviderCallback_e_SubmitInXML
    e_TextEncodingNone = _fsdk.DocProviderCallback_e_TextEncodingNone
    e_TextEncodingBig5 = _fsdk.DocProviderCallback_e_TextEncodingBig5
    e_TextEncodingFontSpecific = _fsdk.DocProviderCallback_e_TextEncodingFontSpecific
    e_TextEncodingGBK = _fsdk.DocProviderCallback_e_TextEncodingGBK
    e_TextEncodingGB18030 = _fsdk.DocProviderCallback_e_TextEncodingGB18030
    e_TextEncodingGB2312 = _fsdk.DocProviderCallback_e_TextEncodingGB2312
    e_TextEncodingISO8859NN = _fsdk.DocProviderCallback_e_TextEncodingISO8859NN
    e_TextEncodingKSC5601 = _fsdk.DocProviderCallback_e_TextEncodingKSC5601
    e_TextEncodingShiftJIS = _fsdk.DocProviderCallback_e_TextEncodingShiftJIS
    e_TextEncodingUCS2 = _fsdk.DocProviderCallback_e_TextEncodingUCS2
    e_TextEncodingUTF16 = _fsdk.DocProviderCallback_e_TextEncodingUTF16
    e_TextEncodingUTF8 = _fsdk.DocProviderCallback_e_TextEncodingUTF8
    e_PageViewEventTypeAdded = _fsdk.DocProviderCallback_e_PageViewEventTypeAdded
    e_PageViewEventTypeRemoved = _fsdk.DocProviderCallback_e_PageViewEventTypeRemoved
    e_PageViewEventTypeAllRemoved = _fsdk.DocProviderCallback_e_PageViewEventTypeAllRemoved
    e_WidgetEventTypeAdded = _fsdk.DocProviderCallback_e_WidgetEventTypeAdded
    e_WidgetEventTypeBeforeRemoved = _fsdk.DocProviderCallback_e_WidgetEventTypeBeforeRemoved

    def Release(self, *args):
        return _fsdk.DocProviderCallback_Release(self, *args)

    def InvalidateRect(self, *args):
        return _fsdk.DocProviderCallback_InvalidateRect(self, *args)

    def DisplayCaret(self, *args):
        return _fsdk.DocProviderCallback_DisplayCaret(self, *args)

    def GetPopupPos(self, *args):
        return _fsdk.DocProviderCallback_GetPopupPos(self, *args)

    def PopupMenu(self, *args):
        return _fsdk.DocProviderCallback_PopupMenu(self, *args)

    def GetCurrentPage(self, *args):
        return _fsdk.DocProviderCallback_GetCurrentPage(self, *args)

    def SetCurrentPage(self, *args):
        return _fsdk.DocProviderCallback_SetCurrentPage(self, *args)

    def SetChangeMark(self, *args):
        return _fsdk.DocProviderCallback_SetChangeMark(self, *args)

    def GetTitle(self, *args):
        return _fsdk.DocProviderCallback_GetTitle(self, *args)

    def SetFocus(self, *args):
        return _fsdk.DocProviderCallback_SetFocus(self, *args)

    def ExportData(self, *args):
        return _fsdk.DocProviderCallback_ExportData(self, *args)

    def ImportData(self, *args):
        return _fsdk.DocProviderCallback_ImportData(self, *args)

    def GotoURL(self, *args):
        return _fsdk.DocProviderCallback_GotoURL(self, *args)

    def Print(self, *args):
        return _fsdk.DocProviderCallback_Print(self, *args)

    def GetHighlightColor(self, *args):
        return _fsdk.DocProviderCallback_GetHighlightColor(self, *args)

    def SubmitData(self, *args):
        return _fsdk.DocProviderCallback_SubmitData(self, *args)

    def PageViewEvent(self, *args):
        return _fsdk.DocProviderCallback_PageViewEvent(self, *args)

    def WidgetEvent(self, *args):
        return _fsdk.DocProviderCallback_WidgetEvent(self, *args)

    def __init__(self, *args):
        if self.__class__ == DocProviderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_DocProviderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_DocProviderCallback(self)
        return weakref_proxy(self)
DocProviderCallback_swigregister = _fsdk.DocProviderCallback_swigregister
DocProviderCallback_swigregister(DocProviderCallback)

class XFADoc(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XFADoc, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XFADoc, name)
    __repr__ = _swig_repr
    e_EventTypeUnknown = _fsdk.XFADoc_e_EventTypeUnknown
    e_EventTypePostPrint = _fsdk.XFADoc_e_EventTypePostPrint
    e_EventTypePrePrint = _fsdk.XFADoc_e_EventTypePrePrint
    e_Dynamic = _fsdk.XFADoc_e_Dynamic
    e_Static = _fsdk.XFADoc_e_Static
    e_XDP = _fsdk.XFADoc_e_XDP
    e_ExportDataTypeXML = _fsdk.XFADoc_e_ExportDataTypeXML
    e_ExportDataTypeStaticXDP = _fsdk.XFADoc_e_ExportDataTypeStaticXDP
    e_ExportDataTypeXDP = _fsdk.XFADoc_e_ExportDataTypeXDP

    def __init__(self, *args):
        this = _fsdk.new_XFADoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.XFADoc___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.XFADoc___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.XFADoc_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_XFADoc
    __del__ = lambda self: None

    def StartLoad(self, *args):
        return _fsdk.XFADoc_StartLoad(self, *args)

    def SetDocProviderCallback(self, *args):
        return _fsdk.XFADoc_SetDocProviderCallback(self, *args)

    def GetType(self, *args):
        return _fsdk.XFADoc_GetType(self, *args)

    def GetPageCount(self, *args):
        return _fsdk.XFADoc_GetPageCount(self, *args)

    def GetPage(self, *args):
        return _fsdk.XFADoc_GetPage(self, *args)

    def ExportData(self, *args):
        return _fsdk.XFADoc_ExportData(self, *args)

    def SetPDFPath(self, *args):
        return _fsdk.XFADoc_SetPDFPath(self, *args)

    def ImportData(self, *args):
        return _fsdk.XFADoc_ImportData(self, *args)

    def ResetForm(self, *args):
        return _fsdk.XFADoc_ResetForm(self, *args)

    def FlattenTo(self, *args):
        return _fsdk.XFADoc_FlattenTo(self, *args)

    def ProcessEvent(self, *args):
        return _fsdk.XFADoc_ProcessEvent(self, *args)

    def SetFocus(self, *args):
        return _fsdk.XFADoc_SetFocus(self, *args)

    def KillFocus(self, *args):
        return _fsdk.XFADoc_KillFocus(self, *args)

    def GetWidgetByFullName(self, *args):
        return _fsdk.XFADoc_GetWidgetByFullName(self, *args)
XFADoc_swigregister = _fsdk.XFADoc_swigregister
XFADoc_swigregister(XFADoc)

class XFAPage(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XFAPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XFAPage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_XFAPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.XFAPage___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.XFAPage___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_XFAPage
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.XFAPage_IsEmpty(self, *args)

    def GetDisplayMatrix(self, *args):
        return _fsdk.XFAPage_GetDisplayMatrix(self, *args)

    def GetWidth(self, *args):
        return _fsdk.XFAPage_GetWidth(self, *args)

    def GetHeight(self, *args):
        return _fsdk.XFAPage_GetHeight(self, *args)

    def GetWidgetAtDevicePoint(self, *args):
        return _fsdk.XFAPage_GetWidgetAtDevicePoint(self, *args)

    def GetIndex(self, *args):
        return _fsdk.XFAPage_GetIndex(self, *args)

    def GetWidgetCount(self, *args):
        return _fsdk.XFAPage_GetWidgetCount(self, *args)

    def GetWidget(self, *args):
        return _fsdk.XFAPage_GetWidget(self, *args)

    def GetWidgetByFullName(self, *args):
        return _fsdk.XFAPage_GetWidgetByFullName(self, *args)

    def GetFirstWidget(self, *args):
        return _fsdk.XFAPage_GetFirstWidget(self, *args)

    def GetLastWidget(self, *args):
        return _fsdk.XFAPage_GetLastWidget(self, *args)

    def GetNextWidget(self, *args):
        return _fsdk.XFAPage_GetNextWidget(self, *args)

    def GetPrevWidget(self, *args):
        return _fsdk.XFAPage_GetPrevWidget(self, *args)
XFAPage_swigregister = _fsdk.XFAPage_swigregister
XFAPage_swigregister(XFAPage)

class XFAWidget(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XFAWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XFAWidget, name)
    __repr__ = _swig_repr
    e_HitTestAreaUnknown = _fsdk.XFAWidget_e_HitTestAreaUnknown
    e_HitTestAreaClient = _fsdk.XFAWidget_e_HitTestAreaClient
    e_HitTestAreaTitleBar = _fsdk.XFAWidget_e_HitTestAreaTitleBar
    e_HitTestAreaHyperLink = _fsdk.XFAWidget_e_HitTestAreaHyperLink
    e_WidgetTypeBarcode = _fsdk.XFAWidget_e_WidgetTypeBarcode
    e_WidgetTypePushButton = _fsdk.XFAWidget_e_WidgetTypePushButton
    e_WidgetTypeCheckButton = _fsdk.XFAWidget_e_WidgetTypeCheckButton
    e_WidgetTypeArc = _fsdk.XFAWidget_e_WidgetTypeArc
    e_WidgetTypeDateTimeEdit = _fsdk.XFAWidget_e_WidgetTypeDateTimeEdit
    e_WidgetTypeNumericEdit = _fsdk.XFAWidget_e_WidgetTypeNumericEdit
    e_WidgetTypeSignature = _fsdk.XFAWidget_e_WidgetTypeSignature
    e_WidgetTypeChoiceList = _fsdk.XFAWidget_e_WidgetTypeChoiceList
    e_WidgetTypeImageEdit = _fsdk.XFAWidget_e_WidgetTypeImageEdit
    e_WidgetTypeLine = _fsdk.XFAWidget_e_WidgetTypeLine
    e_WidgetTypePasswordEdit = _fsdk.XFAWidget_e_WidgetTypePasswordEdit
    e_WidgetTypeRadioButton = _fsdk.XFAWidget_e_WidgetTypeRadioButton
    e_WidgetTypeRectangle = _fsdk.XFAWidget_e_WidgetTypeRectangle
    e_WidgetTypeTextEdit = _fsdk.XFAWidget_e_WidgetTypeTextEdit
    e_WidgetTypeUnknown = _fsdk.XFAWidget_e_WidgetTypeUnknown
    e_WidgetTypeExclGroup = _fsdk.XFAWidget_e_WidgetTypeExclGroup
    e_WidgetTypeImage = _fsdk.XFAWidget_e_WidgetTypeImage
    e_PresenceUnknown = _fsdk.XFAWidget_e_PresenceUnknown
    e_PresenceVisible = _fsdk.XFAWidget_e_PresenceVisible
    e_PresenceHidden = _fsdk.XFAWidget_e_PresenceHidden
    e_PresenceInactive = _fsdk.XFAWidget_e_PresenceInactive
    e_PresenceInvisible = _fsdk.XFAWidget_e_PresenceInvisible
    e_WidgetNameTypeField = _fsdk.XFAWidget_e_WidgetNameTypeField
    e_WidgetNameTypeCaption = _fsdk.XFAWidget_e_WidgetNameTypeCaption
    e_WidgetNameTypeFullName = _fsdk.XFAWidget_e_WidgetNameTypeFullName
    e_WidgethAlignTypeCenter = _fsdk.XFAWidget_e_WidgethAlignTypeCenter
    e_WidgethAlignTypeJustify = _fsdk.XFAWidget_e_WidgethAlignTypeJustify
    e_WidgethAlignTypeJustifyAll = _fsdk.XFAWidget_e_WidgethAlignTypeJustifyAll
    e_WidgethAlignTypeLeft = _fsdk.XFAWidget_e_WidgethAlignTypeLeft
    e_WidgethAlignTypeRadix = _fsdk.XFAWidget_e_WidgethAlignTypeRadix
    e_WidgethAlignTypeRight = _fsdk.XFAWidget_e_WidgethAlignTypeRight
    e_WidgetvAlignTypeTop = _fsdk.XFAWidget_e_WidgetvAlignTypeTop
    e_WidgetvAlignTypeBottom = _fsdk.XFAWidget_e_WidgetvAlignTypeBottom
    e_WidgetvAlignTypeMiddle = _fsdk.XFAWidget_e_WidgetvAlignTypeMiddle
    e_WidgetEdgePositionTop = _fsdk.XFAWidget_e_WidgetEdgePositionTop
    e_WidgetEdgePositionRight = _fsdk.XFAWidget_e_WidgetEdgePositionRight
    e_WidgetEdgePositionBottom = _fsdk.XFAWidget_e_WidgetEdgePositionBottom
    e_WidgetEdgePositionLeft = _fsdk.XFAWidget_e_WidgetEdgePositionLeft

    def __init__(self, *args):
        this = _fsdk.new_XFAWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.XFAWidget___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.XFAWidget___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.XFAWidget_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_XFAWidget
    __del__ = lambda self: None

    def GetXFAPage(self, *args):
        return _fsdk.XFAWidget_GetXFAPage(self, *args)

    def GetIndex(self, *args):
        return _fsdk.XFAWidget_GetIndex(self, *args)

    def ResetData(self, *args):
        return _fsdk.XFAWidget_ResetData(self, *args)

    def GetRect(self, *args):
        return _fsdk.XFAWidget_GetRect(self, *args)

    def GetValue(self, *args):
        return _fsdk.XFAWidget_GetValue(self, *args)

    def SetValue(self, *args):
        return _fsdk.XFAWidget_SetValue(self, *args)

    def GetDefaultValue(self, *args):
        return _fsdk.XFAWidget_GetDefaultValue(self, *args)

    def SetDefaultValue(self, *args):
        return _fsdk.XFAWidget_SetDefaultValue(self, *args)

    def GetName(self, *args):
        return _fsdk.XFAWidget_GetName(self, *args)

    def GetOptions(self, *args):
        return _fsdk.XFAWidget_GetOptions(self, *args)

    def SetOptions(self, *args):
        return _fsdk.XFAWidget_SetOptions(self, *args)

    def IsChecked(self, *args):
        return _fsdk.XFAWidget_IsChecked(self, *args)

    def SetCheckState(self, *args):
        return _fsdk.XFAWidget_SetCheckState(self, *args)

    def IsListBox(self, *args):
        return _fsdk.XFAWidget_IsListBox(self, *args)

    def IsSupportMultiline(self, *args):
        return _fsdk.XFAWidget_IsSupportMultiline(self, *args)

    def IsSupportMultiSelect(self, *args):
        return _fsdk.XFAWidget_IsSupportMultiSelect(self, *args)

    def GetPresence(self, *args):
        return _fsdk.XFAWidget_GetPresence(self, *args)

    def OnMouseEnter(self, *args):
        return _fsdk.XFAWidget_OnMouseEnter(self, *args)

    def OnMouseExit(self, *args):
        return _fsdk.XFAWidget_OnMouseExit(self, *args)

    def OnLButtonDown(self, *args):
        return _fsdk.XFAWidget_OnLButtonDown(self, *args)

    def OnLButtonUp(self, *args):
        return _fsdk.XFAWidget_OnLButtonUp(self, *args)

    def OnLButtonDoubleClick(self, *args):
        return _fsdk.XFAWidget_OnLButtonDoubleClick(self, *args)

    def OnMouseMove(self, *args):
        return _fsdk.XFAWidget_OnMouseMove(self, *args)

    def OnRButtonDown(self, *args):
        return _fsdk.XFAWidget_OnRButtonDown(self, *args)

    def OnRButtonUp(self, *args):
        return _fsdk.XFAWidget_OnRButtonUp(self, *args)

    def OnKeyDown(self, *args):
        return _fsdk.XFAWidget_OnKeyDown(self, *args)

    def OnKeyUp(self, *args):
        return _fsdk.XFAWidget_OnKeyUp(self, *args)

    def OnChar(self, *args):
        return _fsdk.XFAWidget_OnChar(self, *args)

    def OnHitTest(self, *args):
        return _fsdk.XFAWidget_OnHitTest(self, *args)

    def GetType(self, *args):
        return _fsdk.XFAWidget_GetType(self, *args)

    def GetHAlign(self, *args):
        return _fsdk.XFAWidget_GetHAlign(self, *args)

    def GetVAlign(self, *args):
        return _fsdk.XFAWidget_GetVAlign(self, *args)

    def HasEdge(self, *args):
        return _fsdk.XFAWidget_HasEdge(self, *args)

    def GetSignature(self, *args):
        return _fsdk.XFAWidget_GetSignature(self, *args)

    def GetToolTip(self, *args):
        return _fsdk.XFAWidget_GetToolTip(self, *args)

    def GetBitmap(self, *args):
        return _fsdk.XFAWidget_GetBitmap(self, *args)

    def SetImage(self, *args):
        return _fsdk.XFAWidget_SetImage(self, *args)

    def IsAllowRichText(self, *args):
        return _fsdk.XFAWidget_IsAllowRichText(self, *args)

    def IsReadOnly(self, *args):
        return _fsdk.XFAWidget_IsReadOnly(self, *args)

    def IsRequired(self, *args):
        return _fsdk.XFAWidget_IsRequired(self, *args)

    def ValidateValue(self, *args):
        return _fsdk.XFAWidget_ValidateValue(self, *args)

    def GetJavaScript(self, *args):
        return _fsdk.XFAWidget_GetJavaScript(self, *args)

    def GetXMLContent(self, *args):
        return _fsdk.XFAWidget_GetXMLContent(self, *args)
XFAWidget_swigregister = _fsdk.XFAWidget_swigregister
XFAWidget_swigregister(XFAWidget)

class WidgetMenu(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetMenu, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_WidgetMenu(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.WidgetMenu___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.WidgetMenu___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_WidgetMenu
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.WidgetMenu_IsEmpty(self, *args)

    def CanCopy(self, *args):
        return _fsdk.WidgetMenu_CanCopy(self, *args)

    def CanCut(self, *args):
        return _fsdk.WidgetMenu_CanCut(self, *args)

    def CanPaste(self, *args):
        return _fsdk.WidgetMenu_CanPaste(self, *args)

    def CanSelectAll(self, *args):
        return _fsdk.WidgetMenu_CanSelectAll(self, *args)

    def CanDelete(self, *args):
        return _fsdk.WidgetMenu_CanDelete(self, *args)

    def CanDeSelect(self, *args):
        return _fsdk.WidgetMenu_CanDeSelect(self, *args)

    def Copy(self, *args):
        return _fsdk.WidgetMenu_Copy(self, *args)

    def Cut(self, *args):
        return _fsdk.WidgetMenu_Cut(self, *args)

    def Paste(self, *args):
        return _fsdk.WidgetMenu_Paste(self, *args)

    def SelectAll(self, *args):
        return _fsdk.WidgetMenu_SelectAll(self, *args)

    def Delete(self, *args):
        return _fsdk.WidgetMenu_Delete(self, *args)

    def DeSelect(self, *args):
        return _fsdk.WidgetMenu_DeSelect(self, *args)

    def CanUndo(self, *args):
        return _fsdk.WidgetMenu_CanUndo(self, *args)

    def CanRedo(self, *args):
        return _fsdk.WidgetMenu_CanRedo(self, *args)

    def Undo(self, *args):
        return _fsdk.WidgetMenu_Undo(self, *args)

    def Redo(self, *args):
        return _fsdk.WidgetMenu_Redo(self, *args)

    def Bold(self, *args):
        return _fsdk.WidgetMenu_Bold(self, *args)

    def Italic(self, *args):
        return _fsdk.WidgetMenu_Italic(self, *args)

    def Underline(self, *args):
        return _fsdk.WidgetMenu_Underline(self, *args)

    def Superscript(self, *args):
        return _fsdk.WidgetMenu_Superscript(self, *args)

    def Subscript(self, *args):
        return _fsdk.WidgetMenu_Subscript(self, *args)

    def ClearStyle(self, *args):
        return _fsdk.WidgetMenu_ClearStyle(self, *args)
WidgetMenu_swigregister = _fsdk.WidgetMenu_swigregister
WidgetMenu_swigregister(WidgetMenu)

class FormFileInfo(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFileInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFileInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_FormFileInfo
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_FormFileInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FormFileInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FormFileInfo___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.FormFileInfo_IsEmpty(self, *args)
FormFileInfo_swigregister = _fsdk.FormFileInfo_swigregister
FormFileInfo_swigregister(FormFileInfo)

class FormFileInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFileInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormFileInfoArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_FormFileInfoArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_FormFileInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.FormFileInfoArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.FormFileInfoArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.FormFileInfoArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.FormFileInfoArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.FormFileInfoArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.FormFileInfoArray_RemoveAll(self, *args)
FormFileInfoArray_swigregister = _fsdk.FormFileInfoArray_swigregister
FormFileInfoArray_swigregister(FormFileInfoArray)

class FormCombination(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormCombination, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormCombination, name)
    __repr__ = _swig_repr
    if _newclass:
        CombineFormsToCSV = staticmethod(_fsdk.FormCombination_CombineFormsToCSV)
    else:
        CombineFormsToCSV = _fsdk.FormCombination_CombineFormsToCSV

    def __init__(self, *args):
        this = _fsdk.new_FormCombination(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_FormCombination
    __del__ = lambda self: None
FormCombination_swigregister = _fsdk.FormCombination_swigregister
FormCombination_swigregister(FormCombination)

def FormCombination_CombineFormsToCSV(*args):
    return _fsdk.FormCombination_CombineFormsToCSV(*args)
FormCombination_CombineFormsToCSV = _fsdk.FormCombination_CombineFormsToCSV

class Redaction(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redaction, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Redaction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Redaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Redaction
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Redaction___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Redaction___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Redaction_IsEmpty(self, *args)

    def MarkRedactAnnot(self, *args):
        return _fsdk.Redaction_MarkRedactAnnot(self, *args)

    def Apply(self, *args):
        return _fsdk.Redaction_Apply(self, *args)

    def StartApply(self, *args):
        return _fsdk.Redaction_StartApply(self, *args)
Redaction_swigregister = _fsdk.Redaction_swigregister
Redaction_swigregister(Redaction)

class FindOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FindOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FindOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FindOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FindOption___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FindOption___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.FindOption_Set(self, *args)
    __swig_setmethods__["is_whole_word"] = _fsdk.FindOption_is_whole_word_set
    __swig_getmethods__["is_whole_word"] = _fsdk.FindOption_is_whole_word_get
    if _newclass:
        is_whole_word = _swig_property(_fsdk.FindOption_is_whole_word_get, _fsdk.FindOption_is_whole_word_set)
    __swig_setmethods__["is_case_sensitive"] = _fsdk.FindOption_is_case_sensitive_set
    __swig_getmethods__["is_case_sensitive"] = _fsdk.FindOption_is_case_sensitive_get
    if _newclass:
        is_case_sensitive = _swig_property(_fsdk.FindOption_is_case_sensitive_get, _fsdk.FindOption_is_case_sensitive_set)
    __swig_destroy__ = _fsdk.delete_FindOption
    __del__ = lambda self: None
FindOption_swigregister = _fsdk.FindOption_swigregister
FindOption_swigregister(FindOption)

class ReplaceCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplaceCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReplaceCallback, name)
    __repr__ = _swig_repr

    def NeedToReplace(self, *args):
        return _fsdk.ReplaceCallback_NeedToReplace(self, *args)

    def Release(self, *args):
        return _fsdk.ReplaceCallback_Release(self, *args)

    def __init__(self, *args):
        if self.__class__ == ReplaceCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ReplaceCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ReplaceCallback(self)
        return weakref_proxy(self)
ReplaceCallback_swigregister = _fsdk.ReplaceCallback_swigregister
ReplaceCallback_swigregister(ReplaceCallback)

class TextSearchReplace(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSearchReplace, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextSearchReplace, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TextSearchReplace
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TextSearchReplace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TextSearchReplace___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TextSearchReplace___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TextSearchReplace_IsEmpty(self, *args)

    def SetPattern(self, *args):
        return _fsdk.TextSearchReplace_SetPattern(self, *args)

    def SetReplaceCallback(self, *args):
        return _fsdk.TextSearchReplace_SetReplaceCallback(self, *args)

    def ReplacePrev(self, *args):
        return _fsdk.TextSearchReplace_ReplacePrev(self, *args)

    def ReplaceNext(self, *args):
        return _fsdk.TextSearchReplace_ReplaceNext(self, *args)
TextSearchReplace_swigregister = _fsdk.TextSearchReplace_swigregister
TextSearchReplace_swigregister(TextSearchReplace)

class ParagraphEditingProviderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParagraphEditingProviderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParagraphEditingProviderCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_Release(self, *args)

    def GetRenderMatrix(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetRenderMatrix(self, *args)

    def GetPageViewHandle(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetPageViewHandle(self, *args)

    def GetClientRect(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetClientRect(self, *args)

    def GetScale(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetScale(self, *args)

    def GotoPageView(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GotoPageView(self, *args)

    def GetVisiblePageIndexArray(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetVisiblePageIndexArray(self, *args)

    def GetPageVisibleRect(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetPageVisibleRect(self, *args)

    def GetPageRect(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetPageRect(self, *args)

    def GetCurrentPageIndex(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetCurrentPageIndex(self, *args)

    def GetRotation(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_GetRotation(self, *args)

    def InvalidateRect(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_InvalidateRect(self, *args)

    def AddUndoItem(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_AddUndoItem(self, *args)

    def SetDocChangeMark(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_SetDocChangeMark(self, *args)

    def NotifyTextInputReachLimit(self, *args):
        return _fsdk.ParagraphEditingProviderCallback_NotifyTextInputReachLimit(self, *args)

    def __init__(self, *args):
        if self.__class__ == ParagraphEditingProviderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ParagraphEditingProviderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ParagraphEditingProviderCallback(self)
        return weakref_proxy(self)
ParagraphEditingProviderCallback_swigregister = _fsdk.ParagraphEditingProviderCallback_swigregister
ParagraphEditingProviderCallback_swigregister(ParagraphEditingProviderCallback)

class ParagraphEditingUndoItem(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParagraphEditingUndoItem, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParagraphEditingUndoItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ParagraphEditingUndoItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_ParagraphEditingUndoItem
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.ParagraphEditingUndoItem___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ParagraphEditingUndoItem___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ParagraphEditingUndoItem_IsEmpty(self, *args)

    def Undo(self, *args):
        return _fsdk.ParagraphEditingUndoItem_Undo(self, *args)

    def Redo(self, *args):
        return _fsdk.ParagraphEditingUndoItem_Redo(self, *args)
ParagraphEditingUndoItem_swigregister = _fsdk.ParagraphEditingUndoItem_swigregister
ParagraphEditingUndoItem_swigregister(ParagraphEditingUndoItem)

class ParagraphEditing(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParagraphEditing, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParagraphEditing, name)
    __repr__ = _swig_repr
    e_BulletTypeNone = _fsdk.ParagraphEditing_e_BulletTypeNone
    e_BulletTypeSolidCircle = _fsdk.ParagraphEditing_e_BulletTypeSolidCircle
    e_BulletTypeSolidRectangle = _fsdk.ParagraphEditing_e_BulletTypeSolidRectangle
    e_BulletTypeSolidDiamond = _fsdk.ParagraphEditing_e_BulletTypeSolidDiamond
    e_BulletTypeCheck = _fsdk.ParagraphEditing_e_BulletTypeCheck
    e_BulletTypeRightArrow = _fsdk.ParagraphEditing_e_BulletTypeRightArrow
    e_BulletTypeInverseTangentCircle = _fsdk.ParagraphEditing_e_BulletTypeInverseTangentCircle
    e_BulletTypeDiagonalUpRightArrow = _fsdk.ParagraphEditing_e_BulletTypeDiagonalUpRightArrow
    e_BulletTypeBlackDiamondMinusWhite = _fsdk.ParagraphEditing_e_BulletTypeBlackDiamondMinusWhite
    e_NumberingTypeNone = _fsdk.ParagraphEditing_e_NumberingTypeNone
    e_NumberingTypeDecimalDot = _fsdk.ParagraphEditing_e_NumberingTypeDecimalDot
    e_NumberingTypeDecimalRParen = _fsdk.ParagraphEditing_e_NumberingTypeDecimalRParen
    e_NumberingTypeUpperLatinDot = _fsdk.ParagraphEditing_e_NumberingTypeUpperLatinDot
    e_NumberingTypeLowerLatinRParen = _fsdk.ParagraphEditing_e_NumberingTypeLowerLatinRParen
    e_NumberingTypeLowerLatinDot = _fsdk.ParagraphEditing_e_NumberingTypeLowerLatinDot
    __swig_destroy__ = _fsdk.delete_ParagraphEditing
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ParagraphEditing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ParagraphEditing___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ParagraphEditing___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ParagraphEditing_IsEmpty(self, *args)

    def Activate(self, *args):
        return _fsdk.ParagraphEditing_Activate(self, *args)

    def Deactivate(self, *args):
        return _fsdk.ParagraphEditing_Deactivate(self, *args)

    def StartEditing(self, *args):
        return _fsdk.ParagraphEditing_StartEditing(self, *args)

    def ExitEditing(self, *args):
        return _fsdk.ParagraphEditing_ExitEditing(self, *args)

    def InsertText(self, *args):
        return _fsdk.ParagraphEditing_InsertText(self, *args)

    def Render(self, *args):
        return _fsdk.ParagraphEditing_Render(self, *args)

    def OnChar(self, *args):
        return _fsdk.ParagraphEditing_OnChar(self, *args)

    def OnKeyDown(self, *args):
        return _fsdk.ParagraphEditing_OnKeyDown(self, *args)

    def OnKeyUp(self, *args):
        return _fsdk.ParagraphEditing_OnKeyUp(self, *args)

    def OnLButtonDown(self, *args):
        return _fsdk.ParagraphEditing_OnLButtonDown(self, *args)

    def OnLButtonUp(self, *args):
        return _fsdk.ParagraphEditing_OnLButtonUp(self, *args)

    def OnLButtonDoubleClick(self, *args):
        return _fsdk.ParagraphEditing_OnLButtonDoubleClick(self, *args)

    def OnMouseMove(self, *args):
        return _fsdk.ParagraphEditing_OnMouseMove(self, *args)

    def OnMouseWheel(self, *args):
        return _fsdk.ParagraphEditing_OnMouseWheel(self, *args)

    def CanSelectAll(self, *args):
        return _fsdk.ParagraphEditing_CanSelectAll(self, *args)

    def SelectAll(self, *args):
        return _fsdk.ParagraphEditing_SelectAll(self, *args)

    def CanDelete(self, *args):
        return _fsdk.ParagraphEditing_CanDelete(self, *args)

    def DeleteSelected(self, *args):
        return _fsdk.ParagraphEditing_DeleteSelected(self, *args)

    def CanCopy(self, *args):
        return _fsdk.ParagraphEditing_CanCopy(self, *args)

    def CopySelected(self, *args):
        return _fsdk.ParagraphEditing_CopySelected(self, *args)

    def CanCut(self, *args):
        return _fsdk.ParagraphEditing_CanCut(self, *args)

    def CutSelected(self, *args):
        return _fsdk.ParagraphEditing_CutSelected(self, *args)

    def CanPaste(self, *args):
        return _fsdk.ParagraphEditing_CanPaste(self, *args)

    def PasteSelected(self, *args):
        return _fsdk.ParagraphEditing_PasteSelected(self, *args)

    def CanDeselectAll(self, *args):
        return _fsdk.ParagraphEditing_CanDeselectAll(self, *args)

    def DeselectAll(self, *args):
        return _fsdk.ParagraphEditing_DeselectAll(self, *args)

    def SetFontName(self, *args):
        return _fsdk.ParagraphEditing_SetFontName(self, *args)

    def SetFontSize(self, *args):
        return _fsdk.ParagraphEditing_SetFontSize(self, *args)

    def SetTextColor(self, *args):
        return _fsdk.ParagraphEditing_SetTextColor(self, *args)

    def SetBold(self, *args):
        return _fsdk.ParagraphEditing_SetBold(self, *args)

    def SetItalic(self, *args):
        return _fsdk.ParagraphEditing_SetItalic(self, *args)

    def SetAlignment(self, *args):
        return _fsdk.ParagraphEditing_SetAlignment(self, *args)

    def SetCharSpace(self, *args):
        return _fsdk.ParagraphEditing_SetCharSpace(self, *args)

    def SetCharHorizontalScale(self, *args):
        return _fsdk.ParagraphEditing_SetCharHorizontalScale(self, *args)

    def SetLineSpace(self, *args):
        return _fsdk.ParagraphEditing_SetLineSpace(self, *args)

    def SetUnderline(self, *args):
        return _fsdk.ParagraphEditing_SetUnderline(self, *args)

    def SetStrikethrough(self, *args):
        return _fsdk.ParagraphEditing_SetStrikethrough(self, *args)

    def SetSuperscript(self, *args):
        return _fsdk.ParagraphEditing_SetSuperscript(self, *args)

    def SetSubscript(self, *args):
        return _fsdk.ParagraphEditing_SetSubscript(self, *args)

    def SetParagraphSpacing(self, *args):
        return _fsdk.ParagraphEditing_SetParagraphSpacing(self, *args)

    def Indent(self, *args):
        return _fsdk.ParagraphEditing_Indent(self, *args)

    def Dedent(self, *args):
        return _fsdk.ParagraphEditing_Dedent(self, *args)

    def SetBulletedList(self, *args):
        return _fsdk.ParagraphEditing_SetBulletedList(self, *args)

    def SetNumberedList(self, *args):
        return _fsdk.ParagraphEditing_SetNumberedList(self, *args)
ParagraphEditing_swigregister = _fsdk.ParagraphEditing_swigregister
ParagraphEditing_swigregister(ParagraphEditing)

class JoinSplit(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JoinSplit, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JoinSplit, name)
    __repr__ = _swig_repr
    e_JoinSplitOperationTypeJoin = _fsdk.JoinSplit_e_JoinSplitOperationTypeJoin
    e_JoinSplitOperationTypeSpilt = _fsdk.JoinSplit_e_JoinSplitOperationTypeSpilt
    e_JoinSplitOperationTypeLink = _fsdk.JoinSplit_e_JoinSplitOperationTypeLink
    e_JoinSplitOperationTypeUnlink = _fsdk.JoinSplit_e_JoinSplitOperationTypeUnlink
    e_JoinSplitOperationTypeSelectNone = _fsdk.JoinSplit_e_JoinSplitOperationTypeSelectNone
    e_JoinSplitOperationTypeClose = _fsdk.JoinSplit_e_JoinSplitOperationTypeClose
    __swig_destroy__ = _fsdk.delete_JoinSplit
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_JoinSplit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.JoinSplit___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.JoinSplit___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.JoinSplit_IsEmpty(self, *args)

    def Activate(self, *args):
        return _fsdk.JoinSplit_Activate(self, *args)

    def Deactivate(self, *args):
        return _fsdk.JoinSplit_Deactivate(self, *args)

    def ExitJoinEditing(self, *args):
        return _fsdk.JoinSplit_ExitJoinEditing(self, *args)

    def Render(self, *args):
        return _fsdk.JoinSplit_Render(self, *args)

    def OnLButtonDown(self, *args):
        return _fsdk.JoinSplit_OnLButtonDown(self, *args)

    def OnLButtonUp(self, *args):
        return _fsdk.JoinSplit_OnLButtonUp(self, *args)

    def OnMouseMove(self, *args):
        return _fsdk.JoinSplit_OnMouseMove(self, *args)

    def GetEnableStatus(self, *args):
        return _fsdk.JoinSplit_GetEnableStatus(self, *args)

    def JoinBoxes(self, *args):
        return _fsdk.JoinSplit_JoinBoxes(self, *args)

    def SplitBoxes(self, *args):
        return _fsdk.JoinSplit_SplitBoxes(self, *args)

    def LinkBoxes(self, *args):
        return _fsdk.JoinSplit_LinkBoxes(self, *args)

    def UnlinkBoxes(self, *args):
        return _fsdk.JoinSplit_UnlinkBoxes(self, *args)

    def SelectNone(self, *args):
        return _fsdk.JoinSplit_SelectNone(self, *args)
JoinSplit_swigregister = _fsdk.JoinSplit_swigregister
JoinSplit_swigregister(JoinSplit)

class ParagraphEditingMgr(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParagraphEditingMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParagraphEditingMgr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_ParagraphEditingMgr
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ParagraphEditingMgr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ParagraphEditingMgr___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ParagraphEditingMgr___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ParagraphEditingMgr_IsEmpty(self, *args)

    def GetParagraphEditing(self, *args):
        return _fsdk.ParagraphEditingMgr_GetParagraphEditing(self, *args)

    def GetJoinSplit(self, *args):
        return _fsdk.ParagraphEditingMgr_GetJoinSplit(self, *args)

    def SetSystemDPI(self, *args):
        return _fsdk.ParagraphEditingMgr_SetSystemDPI(self, *args)
ParagraphEditingMgr_swigregister = _fsdk.ParagraphEditingMgr_swigregister
ParagraphEditingMgr_swigregister(ParagraphEditingMgr)

class TableBorderInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableBorderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableBorderInfo, name)
    __repr__ = _swig_repr
    e_TableBorderStyleSolid = _fsdk.TableBorderInfo_e_TableBorderStyleSolid
    e_TableBorderStyleDashed = _fsdk.TableBorderInfo_e_TableBorderStyleDashed

    def __init__(self, *args):
        this = _fsdk.new_TableBorderInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TableBorderInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TableBorderInfo___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TableBorderInfo_Set(self, *args)
    __swig_setmethods__["table_border_style"] = _fsdk.TableBorderInfo_table_border_style_set
    __swig_getmethods__["table_border_style"] = _fsdk.TableBorderInfo_table_border_style_get
    if _newclass:
        table_border_style = _swig_property(_fsdk.TableBorderInfo_table_border_style_get, _fsdk.TableBorderInfo_table_border_style_set)
    __swig_setmethods__["line_width"] = _fsdk.TableBorderInfo_line_width_set
    __swig_getmethods__["line_width"] = _fsdk.TableBorderInfo_line_width_get
    if _newclass:
        line_width = _swig_property(_fsdk.TableBorderInfo_line_width_get, _fsdk.TableBorderInfo_line_width_set)
    __swig_setmethods__["color"] = _fsdk.TableBorderInfo_color_set
    __swig_getmethods__["color"] = _fsdk.TableBorderInfo_color_get
    if _newclass:
        color = _swig_property(_fsdk.TableBorderInfo_color_get, _fsdk.TableBorderInfo_color_set)
    __swig_setmethods__["dash_phase"] = _fsdk.TableBorderInfo_dash_phase_set
    __swig_getmethods__["dash_phase"] = _fsdk.TableBorderInfo_dash_phase_get
    if _newclass:
        dash_phase = _swig_property(_fsdk.TableBorderInfo_dash_phase_get, _fsdk.TableBorderInfo_dash_phase_set)
    __swig_setmethods__["dashes"] = _fsdk.TableBorderInfo_dashes_set
    __swig_getmethods__["dashes"] = _fsdk.TableBorderInfo_dashes_get
    if _newclass:
        dashes = _swig_property(_fsdk.TableBorderInfo_dashes_get, _fsdk.TableBorderInfo_dashes_set)
    __swig_destroy__ = _fsdk.delete_TableBorderInfo
    __del__ = lambda self: None
TableBorderInfo_swigregister = _fsdk.TableBorderInfo_swigregister
TableBorderInfo_swigregister(TableBorderInfo)

class TableCellDataColArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableCellDataColArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableCellDataColArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TableCellDataColArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TableCellDataColArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.TableCellDataColArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.TableCellDataColArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.TableCellDataColArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.TableCellDataColArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.TableCellDataColArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.TableCellDataColArray_RemoveAll(self, *args)
TableCellDataColArray_swigregister = _fsdk.TableCellDataColArray_swigregister
TableCellDataColArray_swigregister(TableCellDataColArray)

class TableCellDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableCellDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableCellDataArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TableCellDataArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TableCellDataArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.TableCellDataArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.TableCellDataArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.TableCellDataArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.TableCellDataArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.TableCellDataArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.TableCellDataArray_RemoveAll(self, *args)
TableCellDataArray_swigregister = _fsdk.TableCellDataArray_swigregister
TableCellDataArray_swigregister(TableCellDataArray)

class TableCellData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableCellData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableCellData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TableCellData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TableCellData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TableCellData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TableCellData_Set(self, *args)
    __swig_setmethods__["cell_text_style"] = _fsdk.TableCellData_cell_text_style_set
    __swig_getmethods__["cell_text_style"] = _fsdk.TableCellData_cell_text_style_get
    if _newclass:
        cell_text_style = _swig_property(_fsdk.TableCellData_cell_text_style_get, _fsdk.TableCellData_cell_text_style_set)
    __swig_setmethods__["cell_fill_color"] = _fsdk.TableCellData_cell_fill_color_set
    __swig_getmethods__["cell_fill_color"] = _fsdk.TableCellData_cell_fill_color_get
    if _newclass:
        cell_fill_color = _swig_property(_fsdk.TableCellData_cell_fill_color_get, _fsdk.TableCellData_cell_fill_color_set)
    __swig_setmethods__["cell_text"] = _fsdk.TableCellData_cell_text_set
    __swig_getmethods__["cell_text"] = _fsdk.TableCellData_cell_text_get
    if _newclass:
        cell_text = _swig_property(_fsdk.TableCellData_cell_text_get, _fsdk.TableCellData_cell_text_set)
    __swig_setmethods__["cell_image"] = _fsdk.TableCellData_cell_image_set
    __swig_getmethods__["cell_image"] = _fsdk.TableCellData_cell_image_get
    if _newclass:
        cell_image = _swig_property(_fsdk.TableCellData_cell_image_get, _fsdk.TableCellData_cell_image_set)
    __swig_setmethods__["cell_margin"] = _fsdk.TableCellData_cell_margin_set
    __swig_getmethods__["cell_margin"] = _fsdk.TableCellData_cell_margin_get
    if _newclass:
        cell_margin = _swig_property(_fsdk.TableCellData_cell_margin_get, _fsdk.TableCellData_cell_margin_set)
    __swig_destroy__ = _fsdk.delete_TableCellData
    __del__ = lambda self: None
TableCellData_swigregister = _fsdk.TableCellData_swigregister
TableCellData_swigregister(TableCellData)

class TableCellIndexArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableCellIndexArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableCellIndexArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TableCellIndexArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TableCellIndexArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.TableCellIndexArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.TableCellIndexArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.TableCellIndexArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.TableCellIndexArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.TableCellIndexArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.TableCellIndexArray_RemoveAll(self, *args)
TableCellIndexArray_swigregister = _fsdk.TableCellIndexArray_swigregister
TableCellIndexArray_swigregister(TableCellIndexArray)

class TableData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TableData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TableData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TableData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TableData_Set(self, *args)
    __swig_setmethods__["rect"] = _fsdk.TableData_rect_set
    __swig_getmethods__["rect"] = _fsdk.TableData_rect_get
    if _newclass:
        rect = _swig_property(_fsdk.TableData_rect_get, _fsdk.TableData_rect_set)
    __swig_setmethods__["row_count"] = _fsdk.TableData_row_count_set
    __swig_getmethods__["row_count"] = _fsdk.TableData_row_count_get
    if _newclass:
        row_count = _swig_property(_fsdk.TableData_row_count_get, _fsdk.TableData_row_count_set)
    __swig_setmethods__["col_count"] = _fsdk.TableData_col_count_set
    __swig_getmethods__["col_count"] = _fsdk.TableData_col_count_get
    if _newclass:
        col_count = _swig_property(_fsdk.TableData_col_count_get, _fsdk.TableData_col_count_set)
    __swig_setmethods__["outside_border_left"] = _fsdk.TableData_outside_border_left_set
    __swig_getmethods__["outside_border_left"] = _fsdk.TableData_outside_border_left_get
    if _newclass:
        outside_border_left = _swig_property(_fsdk.TableData_outside_border_left_get, _fsdk.TableData_outside_border_left_set)
    __swig_setmethods__["outside_border_right"] = _fsdk.TableData_outside_border_right_set
    __swig_getmethods__["outside_border_right"] = _fsdk.TableData_outside_border_right_get
    if _newclass:
        outside_border_right = _swig_property(_fsdk.TableData_outside_border_right_get, _fsdk.TableData_outside_border_right_set)
    __swig_setmethods__["outside_border_top"] = _fsdk.TableData_outside_border_top_set
    __swig_getmethods__["outside_border_top"] = _fsdk.TableData_outside_border_top_get
    if _newclass:
        outside_border_top = _swig_property(_fsdk.TableData_outside_border_top_get, _fsdk.TableData_outside_border_top_set)
    __swig_setmethods__["outside_border_bottom"] = _fsdk.TableData_outside_border_bottom_set
    __swig_getmethods__["outside_border_bottom"] = _fsdk.TableData_outside_border_bottom_get
    if _newclass:
        outside_border_bottom = _swig_property(_fsdk.TableData_outside_border_bottom_get, _fsdk.TableData_outside_border_bottom_set)
    __swig_setmethods__["inside_border_row"] = _fsdk.TableData_inside_border_row_set
    __swig_getmethods__["inside_border_row"] = _fsdk.TableData_inside_border_row_get
    if _newclass:
        inside_border_row = _swig_property(_fsdk.TableData_inside_border_row_get, _fsdk.TableData_inside_border_row_set)
    __swig_setmethods__["inside_border_col"] = _fsdk.TableData_inside_border_col_set
    __swig_getmethods__["inside_border_col"] = _fsdk.TableData_inside_border_col_get
    if _newclass:
        inside_border_col = _swig_property(_fsdk.TableData_inside_border_col_get, _fsdk.TableData_inside_border_col_set)
    __swig_setmethods__["merge_cells"] = _fsdk.TableData_merge_cells_set
    __swig_getmethods__["merge_cells"] = _fsdk.TableData_merge_cells_get
    if _newclass:
        merge_cells = _swig_property(_fsdk.TableData_merge_cells_get, _fsdk.TableData_merge_cells_set)
    __swig_setmethods__["row_height_array"] = _fsdk.TableData_row_height_array_set
    __swig_getmethods__["row_height_array"] = _fsdk.TableData_row_height_array_get
    if _newclass:
        row_height_array = _swig_property(_fsdk.TableData_row_height_array_get, _fsdk.TableData_row_height_array_set)
    __swig_setmethods__["col_width_array"] = _fsdk.TableData_col_width_array_set
    __swig_getmethods__["col_width_array"] = _fsdk.TableData_col_width_array_get
    if _newclass:
        col_width_array = _swig_property(_fsdk.TableData_col_width_array_get, _fsdk.TableData_col_width_array_set)
    __swig_destroy__ = _fsdk.delete_TableData
    __del__ = lambda self: None
TableData_swigregister = _fsdk.TableData_swigregister
TableData_swigregister(TableData)

class TableGeneratorCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableGeneratorCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableGeneratorCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.TableGeneratorCallback_Release(self, *args)

    def GetTableTopMarginToPage(self, *args):
        return _fsdk.TableGeneratorCallback_GetTableTopMarginToPage(self, *args)

    def GetNewPageBasicInfo(self, *args):
        return _fsdk.TableGeneratorCallback_GetNewPageBasicInfo(self, *args)

    def __init__(self, *args):
        if self.__class__ == TableGeneratorCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_TableGeneratorCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TableGeneratorCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_TableGeneratorCallback(self)
        return weakref_proxy(self)
TableGeneratorCallback_swigregister = _fsdk.TableGeneratorCallback_swigregister
TableGeneratorCallback_swigregister(TableGeneratorCallback)

class TableGenerator(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableGenerator, name)
    __repr__ = _swig_repr
    if _newclass:
        AddTableToPage = staticmethod(_fsdk.TableGenerator_AddTableToPage)
    else:
        AddTableToPage = _fsdk.TableGenerator_AddTableToPage
    if _newclass:
        InsertTablePagesToDocument = staticmethod(_fsdk.TableGenerator_InsertTablePagesToDocument)
    else:
        InsertTablePagesToDocument = _fsdk.TableGenerator_InsertTablePagesToDocument

    def __init__(self, *args):
        this = _fsdk.new_TableGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TableGenerator
    __del__ = lambda self: None
TableGenerator_swigregister = _fsdk.TableGenerator_swigregister
TableGenerator_swigregister(TableGenerator)

def TableGenerator_AddTableToPage(*args):
    return _fsdk.TableGenerator_AddTableToPage(*args)
TableGenerator_AddTableToPage = _fsdk.TableGenerator_AddTableToPage

def TableGenerator_InsertTablePagesToDocument(*args):
    return _fsdk.TableGenerator_InsertTablePagesToDocument(*args)
TableGenerator_InsertTablePagesToDocument = _fsdk.TableGenerator_InsertTablePagesToDocument

class AsyncReaderCallback(FileReaderCallback):
    __swig_setmethods__ = {}
    for _s in [FileReaderCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncReaderCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [FileReaderCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncReaderCallback, name)
    __repr__ = _swig_repr

    def IsDataAvail(self, *args):
        return _fsdk.AsyncReaderCallback_IsDataAvail(self, *args)

    def AddDownloadHint(self, *args):
        return _fsdk.AsyncReaderCallback_AddDownloadHint(self, *args)

    def __init__(self, *args):
        if self.__class__ == AsyncReaderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_AsyncReaderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_AsyncReaderCallback(self)
        return weakref_proxy(self)
AsyncReaderCallback_swigregister = _fsdk.AsyncReaderCallback_swigregister
AsyncReaderCallback_swigregister(AsyncReaderCallback)

class PDF2WordSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2WordSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2WordSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PDF2WordSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PDF2WordSettingData_Set(self, *args)
    __swig_setmethods__["enable_retain_page_layout"] = _fsdk.PDF2WordSettingData_enable_retain_page_layout_set
    __swig_getmethods__["enable_retain_page_layout"] = _fsdk.PDF2WordSettingData_enable_retain_page_layout_get
    if _newclass:
        enable_retain_page_layout = _swig_property(_fsdk.PDF2WordSettingData_enable_retain_page_layout_get, _fsdk.PDF2WordSettingData_enable_retain_page_layout_set)
    __swig_setmethods__["enable_generate_headers_and_footers"] = _fsdk.PDF2WordSettingData_enable_generate_headers_and_footers_set
    __swig_getmethods__["enable_generate_headers_and_footers"] = _fsdk.PDF2WordSettingData_enable_generate_headers_and_footers_get
    if _newclass:
        enable_generate_headers_and_footers = _swig_property(_fsdk.PDF2WordSettingData_enable_generate_headers_and_footers_get, _fsdk.PDF2WordSettingData_enable_generate_headers_and_footers_set)
    __swig_setmethods__["enable_generate_footnotes_and_endnotes"] = _fsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_set
    __swig_getmethods__["enable_generate_footnotes_and_endnotes"] = _fsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_get
    if _newclass:
        enable_generate_footnotes_and_endnotes = _swig_property(_fsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_get, _fsdk.PDF2WordSettingData_enable_generate_footnotes_and_endnotes_set)
    __swig_setmethods__["enable_generate_page_rendered_break"] = _fsdk.PDF2WordSettingData_enable_generate_page_rendered_break_set
    __swig_getmethods__["enable_generate_page_rendered_break"] = _fsdk.PDF2WordSettingData_enable_generate_page_rendered_break_get
    if _newclass:
        enable_generate_page_rendered_break = _swig_property(_fsdk.PDF2WordSettingData_enable_generate_page_rendered_break_get, _fsdk.PDF2WordSettingData_enable_generate_page_rendered_break_set)
    __swig_destroy__ = _fsdk.delete_PDF2WordSettingData
    __del__ = lambda self: None
PDF2WordSettingData_swigregister = _fsdk.PDF2WordSettingData_swigregister
PDF2WordSettingData_swigregister(PDF2WordSettingData)

class PDF2PowerPointSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2PowerPointSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2PowerPointSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PDF2PowerPointSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PDF2PowerPointSettingData_Set(self, *args)
    __swig_setmethods__["enable_aggressively_split_sections"] = _fsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_set
    __swig_getmethods__["enable_aggressively_split_sections"] = _fsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_get
    if _newclass:
        enable_aggressively_split_sections = _swig_property(_fsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_get, _fsdk.PDF2PowerPointSettingData_enable_aggressively_split_sections_set)
    __swig_destroy__ = _fsdk.delete_PDF2PowerPointSettingData
    __del__ = lambda self: None
PDF2PowerPointSettingData_swigregister = _fsdk.PDF2PowerPointSettingData_swigregister
PDF2PowerPointSettingData_swigregister(PDF2PowerPointSettingData)

class PDF2ExcelSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2ExcelSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2ExcelSettingData, name)
    __repr__ = _swig_repr
    e_WorkbookSettingsDocument = _fsdk.PDF2ExcelSettingData_e_WorkbookSettingsDocument
    e_WorkbookSettingsEachTable = _fsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachTable
    e_WorkbookSettingsEachPage = _fsdk.PDF2ExcelSettingData_e_WorkbookSettingsEachPage

    def __init__(self, *args):
        this = _fsdk.new_PDF2ExcelSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PDF2ExcelSettingData_Set(self, *args)
    __swig_setmethods__["decimal_symbol"] = _fsdk.PDF2ExcelSettingData_decimal_symbol_set
    __swig_getmethods__["decimal_symbol"] = _fsdk.PDF2ExcelSettingData_decimal_symbol_get
    if _newclass:
        decimal_symbol = _swig_property(_fsdk.PDF2ExcelSettingData_decimal_symbol_get, _fsdk.PDF2ExcelSettingData_decimal_symbol_set)
    __swig_setmethods__["thousands_separator"] = _fsdk.PDF2ExcelSettingData_thousands_separator_set
    __swig_getmethods__["thousands_separator"] = _fsdk.PDF2ExcelSettingData_thousands_separator_get
    if _newclass:
        thousands_separator = _swig_property(_fsdk.PDF2ExcelSettingData_thousands_separator_get, _fsdk.PDF2ExcelSettingData_thousands_separator_set)
    __swig_setmethods__["workbook_settings"] = _fsdk.PDF2ExcelSettingData_workbook_settings_set
    __swig_getmethods__["workbook_settings"] = _fsdk.PDF2ExcelSettingData_workbook_settings_get
    if _newclass:
        workbook_settings = _swig_property(_fsdk.PDF2ExcelSettingData_workbook_settings_get, _fsdk.PDF2ExcelSettingData_workbook_settings_set)
    __swig_destroy__ = _fsdk.delete_PDF2ExcelSettingData
    __del__ = lambda self: None
PDF2ExcelSettingData_swigregister = _fsdk.PDF2ExcelSettingData_swigregister
PDF2ExcelSettingData_swigregister(PDF2ExcelSettingData)

class PDF2OfficeSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2OfficeSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2OfficeSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PDF2OfficeSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PDF2OfficeSettingData_Set(self, *args)
    __swig_setmethods__["metrics_data_folder_path"] = _fsdk.PDF2OfficeSettingData_metrics_data_folder_path_set
    __swig_getmethods__["metrics_data_folder_path"] = _fsdk.PDF2OfficeSettingData_metrics_data_folder_path_get
    if _newclass:
        metrics_data_folder_path = _swig_property(_fsdk.PDF2OfficeSettingData_metrics_data_folder_path_get, _fsdk.PDF2OfficeSettingData_metrics_data_folder_path_set)
    __swig_setmethods__["enable_ml_recognition"] = _fsdk.PDF2OfficeSettingData_enable_ml_recognition_set
    __swig_getmethods__["enable_ml_recognition"] = _fsdk.PDF2OfficeSettingData_enable_ml_recognition_get
    if _newclass:
        enable_ml_recognition = _swig_property(_fsdk.PDF2OfficeSettingData_enable_ml_recognition_get, _fsdk.PDF2OfficeSettingData_enable_ml_recognition_set)
    __swig_setmethods__["page_range"] = _fsdk.PDF2OfficeSettingData_page_range_set
    __swig_getmethods__["page_range"] = _fsdk.PDF2OfficeSettingData_page_range_get
    if _newclass:
        page_range = _swig_property(_fsdk.PDF2OfficeSettingData_page_range_get, _fsdk.PDF2OfficeSettingData_page_range_set)
    __swig_setmethods__["include_pdf_comments"] = _fsdk.PDF2OfficeSettingData_include_pdf_comments_set
    __swig_getmethods__["include_pdf_comments"] = _fsdk.PDF2OfficeSettingData_include_pdf_comments_get
    if _newclass:
        include_pdf_comments = _swig_property(_fsdk.PDF2OfficeSettingData_include_pdf_comments_get, _fsdk.PDF2OfficeSettingData_include_pdf_comments_set)
    __swig_setmethods__["word_setting_data"] = _fsdk.PDF2OfficeSettingData_word_setting_data_set
    __swig_getmethods__["word_setting_data"] = _fsdk.PDF2OfficeSettingData_word_setting_data_get
    if _newclass:
        word_setting_data = _swig_property(_fsdk.PDF2OfficeSettingData_word_setting_data_get, _fsdk.PDF2OfficeSettingData_word_setting_data_set)
    __swig_setmethods__["power_point_setting_data"] = _fsdk.PDF2OfficeSettingData_power_point_setting_data_set
    __swig_getmethods__["power_point_setting_data"] = _fsdk.PDF2OfficeSettingData_power_point_setting_data_get
    if _newclass:
        power_point_setting_data = _swig_property(_fsdk.PDF2OfficeSettingData_power_point_setting_data_get, _fsdk.PDF2OfficeSettingData_power_point_setting_data_set)
    __swig_setmethods__["excel_setting_data"] = _fsdk.PDF2OfficeSettingData_excel_setting_data_set
    __swig_getmethods__["excel_setting_data"] = _fsdk.PDF2OfficeSettingData_excel_setting_data_get
    if _newclass:
        excel_setting_data = _swig_property(_fsdk.PDF2OfficeSettingData_excel_setting_data_get, _fsdk.PDF2OfficeSettingData_excel_setting_data_set)
    __swig_setmethods__["enable_trailing_space"] = _fsdk.PDF2OfficeSettingData_enable_trailing_space_set
    __swig_getmethods__["enable_trailing_space"] = _fsdk.PDF2OfficeSettingData_enable_trailing_space_get
    if _newclass:
        enable_trailing_space = _swig_property(_fsdk.PDF2OfficeSettingData_enable_trailing_space_get, _fsdk.PDF2OfficeSettingData_enable_trailing_space_set)
    __swig_setmethods__["include_images"] = _fsdk.PDF2OfficeSettingData_include_images_set
    __swig_getmethods__["include_images"] = _fsdk.PDF2OfficeSettingData_include_images_get
    if _newclass:
        include_images = _swig_property(_fsdk.PDF2OfficeSettingData_include_images_get, _fsdk.PDF2OfficeSettingData_include_images_set)
    __swig_setmethods__["timeout"] = _fsdk.PDF2OfficeSettingData_timeout_set
    __swig_getmethods__["timeout"] = _fsdk.PDF2OfficeSettingData_timeout_get
    if _newclass:
        timeout = _swig_property(_fsdk.PDF2OfficeSettingData_timeout_get, _fsdk.PDF2OfficeSettingData_timeout_set)
    __swig_destroy__ = _fsdk.delete_PDF2OfficeSettingData
    __del__ = lambda self: None
PDF2OfficeSettingData_swigregister = _fsdk.PDF2OfficeSettingData_swigregister
PDF2OfficeSettingData_swigregister(PDF2OfficeSettingData)

class ConvertCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertCallback, name)
    __repr__ = _swig_repr

    def NeedToPause(self, *args):
        return _fsdk.ConvertCallback_NeedToPause(self, *args)

    def ProgressNotify(self, *args):
        return _fsdk.ConvertCallback_ProgressNotify(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ConvertCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_ConvertCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ConvertCallback(self)
        return weakref_proxy(self)
ConvertCallback_swigregister = _fsdk.ConvertCallback_swigregister
ConvertCallback_swigregister(ConvertCallback)

class ConvertCheckCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertCheckCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertCheckCallback, name)
    __repr__ = _swig_repr

    def CheckUserPermissions(self, *args):
        return _fsdk.ConvertCheckCallback_CheckUserPermissions(self, *args)

    def __init__(self, *args):
        if self.__class__ == ConvertCheckCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ConvertCheckCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_ConvertCheckCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ConvertCheckCallback(self)
        return weakref_proxy(self)
ConvertCheckCallback_swigregister = _fsdk.ConvertCheckCallback_swigregister
ConvertCheckCallback_swigregister(ConvertCheckCallback)

class PDF2Office(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2Office, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2Office, name)
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_fsdk.PDF2Office_Initialize)
    else:
        Initialize = _fsdk.PDF2Office_Initialize
    if _newclass:
        Release = staticmethod(_fsdk.PDF2Office_Release)
    else:
        Release = _fsdk.PDF2Office_Release
    if _newclass:
        SetConvertCheckCallback = staticmethod(_fsdk.PDF2Office_SetConvertCheckCallback)
    else:
        SetConvertCheckCallback = _fsdk.PDF2Office_SetConvertCheckCallback
    if _newclass:
        StartConvertToWord = staticmethod(_fsdk.PDF2Office_StartConvertToWord)
    else:
        StartConvertToWord = _fsdk.PDF2Office_StartConvertToWord
    if _newclass:
        StartConvertToExcel = staticmethod(_fsdk.PDF2Office_StartConvertToExcel)
    else:
        StartConvertToExcel = _fsdk.PDF2Office_StartConvertToExcel
    if _newclass:
        StartConvertToPowerPoint = staticmethod(_fsdk.PDF2Office_StartConvertToPowerPoint)
    else:
        StartConvertToPowerPoint = _fsdk.PDF2Office_StartConvertToPowerPoint

    def __init__(self, *args):
        this = _fsdk.new_PDF2Office(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PDF2Office
    __del__ = lambda self: None
PDF2Office_swigregister = _fsdk.PDF2Office_swigregister
PDF2Office_swigregister(PDF2Office)

def PDF2Office_Initialize(*args):
    return _fsdk.PDF2Office_Initialize(*args)
PDF2Office_Initialize = _fsdk.PDF2Office_Initialize

def PDF2Office_Release(*args):
    return _fsdk.PDF2Office_Release(*args)
PDF2Office_Release = _fsdk.PDF2Office_Release

def PDF2Office_SetConvertCheckCallback(*args):
    return _fsdk.PDF2Office_SetConvertCheckCallback(*args)
PDF2Office_SetConvertCheckCallback = _fsdk.PDF2Office_SetConvertCheckCallback

def PDF2Office_StartConvertToWord(*args):
    return _fsdk.PDF2Office_StartConvertToWord(*args)
PDF2Office_StartConvertToWord = _fsdk.PDF2Office_StartConvertToWord

def PDF2Office_StartConvertToExcel(*args):
    return _fsdk.PDF2Office_StartConvertToExcel(*args)
PDF2Office_StartConvertToExcel = _fsdk.PDF2Office_StartConvertToExcel

def PDF2Office_StartConvertToPowerPoint(*args):
    return _fsdk.PDF2Office_StartConvertToPowerPoint(*args)
PDF2Office_StartConvertToPowerPoint = _fsdk.PDF2Office_StartConvertToPowerPoint

class Word2PDFConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word2PDFConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word2PDFConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Word2PDFConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Word2PDFConfig_Set(self, *args)
    __swig_setmethods__["is_generate_bookmark"] = _fsdk.Word2PDFConfig_is_generate_bookmark_set
    __swig_getmethods__["is_generate_bookmark"] = _fsdk.Word2PDFConfig_is_generate_bookmark_get
    if _newclass:
        is_generate_bookmark = _swig_property(_fsdk.Word2PDFConfig_is_generate_bookmark_get, _fsdk.Word2PDFConfig_is_generate_bookmark_set)
    __swig_destroy__ = _fsdk.delete_Word2PDFConfig
    __del__ = lambda self: None
Word2PDFConfig_swigregister = _fsdk.Word2PDFConfig_swigregister
Word2PDFConfig_swigregister(Word2PDFConfig)

class Excel2PDFConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Excel2PDFConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Excel2PDFConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Excel2PDFConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Excel2PDFConfig_Set(self, *args)
    __swig_setmethods__["is_separate_workbook"] = _fsdk.Excel2PDFConfig_is_separate_workbook_set
    __swig_getmethods__["is_separate_workbook"] = _fsdk.Excel2PDFConfig_is_separate_workbook_get
    if _newclass:
        is_separate_workbook = _swig_property(_fsdk.Excel2PDFConfig_is_separate_workbook_get, _fsdk.Excel2PDFConfig_is_separate_workbook_set)
    __swig_setmethods__["is_output_hidden_worksheets"] = _fsdk.Excel2PDFConfig_is_output_hidden_worksheets_set
    __swig_getmethods__["is_output_hidden_worksheets"] = _fsdk.Excel2PDFConfig_is_output_hidden_worksheets_get
    if _newclass:
        is_output_hidden_worksheets = _swig_property(_fsdk.Excel2PDFConfig_is_output_hidden_worksheets_get, _fsdk.Excel2PDFConfig_is_output_hidden_worksheets_set)
    __swig_setmethods__["worksheet_names"] = _fsdk.Excel2PDFConfig_worksheet_names_set
    __swig_getmethods__["worksheet_names"] = _fsdk.Excel2PDFConfig_worksheet_names_get
    if _newclass:
        worksheet_names = _swig_property(_fsdk.Excel2PDFConfig_worksheet_names_get, _fsdk.Excel2PDFConfig_worksheet_names_set)
    __swig_destroy__ = _fsdk.delete_Excel2PDFConfig
    __del__ = lambda self: None
Excel2PDFConfig_swigregister = _fsdk.Excel2PDFConfig_swigregister
Excel2PDFConfig_swigregister(Excel2PDFConfig)

class Office2PDFSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Office2PDFSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Office2PDFSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Office2PDFSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.Office2PDFSettingData_Set(self, *args)
    __swig_setmethods__["resource_folder_path"] = _fsdk.Office2PDFSettingData_resource_folder_path_set
    __swig_getmethods__["resource_folder_path"] = _fsdk.Office2PDFSettingData_resource_folder_path_get
    if _newclass:
        resource_folder_path = _swig_property(_fsdk.Office2PDFSettingData_resource_folder_path_get, _fsdk.Office2PDFSettingData_resource_folder_path_set)
    __swig_setmethods__["is_embed_font"] = _fsdk.Office2PDFSettingData_is_embed_font_set
    __swig_getmethods__["is_embed_font"] = _fsdk.Office2PDFSettingData_is_embed_font_get
    if _newclass:
        is_embed_font = _swig_property(_fsdk.Office2PDFSettingData_is_embed_font_get, _fsdk.Office2PDFSettingData_is_embed_font_set)
    __swig_setmethods__["word_setting_data"] = _fsdk.Office2PDFSettingData_word_setting_data_set
    __swig_getmethods__["word_setting_data"] = _fsdk.Office2PDFSettingData_word_setting_data_get
    if _newclass:
        word_setting_data = _swig_property(_fsdk.Office2PDFSettingData_word_setting_data_get, _fsdk.Office2PDFSettingData_word_setting_data_set)
    __swig_setmethods__["excel_setting_data"] = _fsdk.Office2PDFSettingData_excel_setting_data_set
    __swig_getmethods__["excel_setting_data"] = _fsdk.Office2PDFSettingData_excel_setting_data_get
    if _newclass:
        excel_setting_data = _swig_property(_fsdk.Office2PDFSettingData_excel_setting_data_get, _fsdk.Office2PDFSettingData_excel_setting_data_set)
    __swig_destroy__ = _fsdk.delete_Office2PDFSettingData
    __del__ = lambda self: None
Office2PDFSettingData_swigregister = _fsdk.Office2PDFSettingData_swigregister
Office2PDFSettingData_swigregister(Office2PDFSettingData)

class Office2PDF(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Office2PDF, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Office2PDF, name)
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_fsdk.Office2PDF_Initialize)
    else:
        Initialize = _fsdk.Office2PDF_Initialize
    if _newclass:
        Release = staticmethod(_fsdk.Office2PDF_Release)
    else:
        Release = _fsdk.Office2PDF_Release
    if _newclass:
        ConvertFromWord = staticmethod(_fsdk.Office2PDF_ConvertFromWord)
    else:
        ConvertFromWord = _fsdk.Office2PDF_ConvertFromWord
    if _newclass:
        ConvertFromExcel = staticmethod(_fsdk.Office2PDF_ConvertFromExcel)
    else:
        ConvertFromExcel = _fsdk.Office2PDF_ConvertFromExcel
    if _newclass:
        ConvertFromPowerPoint = staticmethod(_fsdk.Office2PDF_ConvertFromPowerPoint)
    else:
        ConvertFromPowerPoint = _fsdk.Office2PDF_ConvertFromPowerPoint

    def __init__(self, *args):
        this = _fsdk.new_Office2PDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Office2PDF
    __del__ = lambda self: None
Office2PDF_swigregister = _fsdk.Office2PDF_swigregister
Office2PDF_swigregister(Office2PDF)

def Office2PDF_Initialize(*args):
    return _fsdk.Office2PDF_Initialize(*args)
Office2PDF_Initialize = _fsdk.Office2PDF_Initialize

def Office2PDF_Release(*args):
    return _fsdk.Office2PDF_Release(*args)
Office2PDF_Release = _fsdk.Office2PDF_Release

def Office2PDF_ConvertFromWord(*args):
    return _fsdk.Office2PDF_ConvertFromWord(*args)
Office2PDF_ConvertFromWord = _fsdk.Office2PDF_ConvertFromWord

def Office2PDF_ConvertFromExcel(*args):
    return _fsdk.Office2PDF_ConvertFromExcel(*args)
Office2PDF_ConvertFromExcel = _fsdk.Office2PDF_ConvertFromExcel

def Office2PDF_ConvertFromPowerPoint(*args):
    return _fsdk.Office2PDF_ConvertFromPowerPoint(*args)
Office2PDF_ConvertFromPowerPoint = _fsdk.Office2PDF_ConvertFromPowerPoint

class Bitmap(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitmap, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bitmap, name)
    __repr__ = _swig_repr
    e_DIBInvalid = _fsdk.Bitmap_e_DIBInvalid
    e_DIB1bpp = _fsdk.Bitmap_e_DIB1bpp
    e_DIBRgb = _fsdk.Bitmap_e_DIBRgb
    e_DIBRgb32 = _fsdk.Bitmap_e_DIBRgb32
    e_DIBArgb = _fsdk.Bitmap_e_DIBArgb
    e_DIBCmyk = _fsdk.Bitmap_e_DIBCmyk
    e_DIB8bppMask = _fsdk.Bitmap_e_DIB8bppMask
    e_DIB8bpp = _fsdk.Bitmap_e_DIB8bpp
    e_DIB8bppGray = _fsdk.Bitmap_e_DIB8bppGray
    e_DIBAbgr = _fsdk.Bitmap_e_DIBAbgr
    e_DIBRgb565 = _fsdk.Bitmap_e_DIBRgb565
    e_Downsample = _fsdk.Bitmap_e_Downsample
    e_Quadratic = _fsdk.Bitmap_e_Quadratic
    e_Bicubic = _fsdk.Bitmap_e_Bicubic

    def __init__(self, *args):
        this = _fsdk.new_Bitmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Bitmap
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Bitmap___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Bitmap___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Bitmap_IsEmpty(self, *args)

    def Clone(self, *args):
        return _fsdk.Bitmap_Clone(self, *args)

    def GetWidth(self, *args):
        return _fsdk.Bitmap_GetWidth(self, *args)

    def GetHeight(self, *args):
        return _fsdk.Bitmap_GetHeight(self, *args)

    def GetPitch(self, *args):
        return _fsdk.Bitmap_GetPitch(self, *args)

    def GetBpp(self, *args):
        return _fsdk.Bitmap_GetBpp(self, *args)

    def GetBuffer(self, *args):
        return _fsdk.Bitmap_GetBuffer(self, *args)

    def GetFormat(self, *args):
        return _fsdk.Bitmap_GetFormat(self, *args)

    def FillRect(self, *args):
        return _fsdk.Bitmap_FillRect(self, *args)

    def ConvertFormat(self, *args):
        return _fsdk.Bitmap_ConvertFormat(self, *args)

    def CalculateBBoxByColor(self, *args):
        return _fsdk.Bitmap_CalculateBBoxByColor(self, *args)

    def DetectBBoxByColorDiffer(self, *args):
        return _fsdk.Bitmap_DetectBBoxByColorDiffer(self, *args)

    def SwapXY(self, *args):
        return _fsdk.Bitmap_SwapXY(self, *args)

    def Flip(self, *args):
        return _fsdk.Bitmap_Flip(self, *args)

    def StretchTo(self, *args):
        return _fsdk.Bitmap_StretchTo(self, *args)

    def TransformTo(self, *args):
        return _fsdk.Bitmap_TransformTo(self, *args)

    def GetMask(self, *args):
        return _fsdk.Bitmap_GetMask(self, *args)

    def ConvertToMono(self, *args):
        return _fsdk.Bitmap_ConvertToMono(self, *args)
Bitmap_swigregister = _fsdk.Bitmap_swigregister
Bitmap_swigregister(Bitmap)

class Image(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    e_Unknown = _fsdk.Image_e_Unknown
    e_None = _fsdk.Image_e_None
    e_BMP = _fsdk.Image_e_BMP
    e_JPG = _fsdk.Image_e_JPG
    e_PNG = _fsdk.Image_e_PNG
    e_GIF = _fsdk.Image_e_GIF
    e_TIF = _fsdk.Image_e_TIF
    e_JPX = _fsdk.Image_e_JPX
    e_JBIG2 = _fsdk.Image_e_JBIG2
    e_WEBP = _fsdk.Image_e_WEBP
    e_OrientationNone = _fsdk.Image_e_OrientationNone
    e_OrientationNormal = _fsdk.Image_e_OrientationNormal
    e_OrientationFlipH = _fsdk.Image_e_OrientationFlipH
    e_OrientationRotate180 = _fsdk.Image_e_OrientationRotate180
    e_OrientationFlipV = _fsdk.Image_e_OrientationFlipV
    e_OrientationRotate90FlipH = _fsdk.Image_e_OrientationRotate90FlipH
    e_OrientationRotate90 = _fsdk.Image_e_OrientationRotate90
    e_OrientationRotate270FlipH = _fsdk.Image_e_OrientationRotate270FlipH
    e_OrientationRotate270 = _fsdk.Image_e_OrientationRotate270
    __swig_destroy__ = _fsdk.delete_Image
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEmpty(self, *args):
        return _fsdk.Image_IsEmpty(self, *args)

    def __eq__(self, *args):
        return _fsdk.Image___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Image___ne__(self, *args)

    def GetType(self, *args):
        return _fsdk.Image_GetType(self, *args)

    def GetWidth(self, *args):
        return _fsdk.Image_GetWidth(self, *args)

    def GetHeight(self, *args):
        return _fsdk.Image_GetHeight(self, *args)

    def GetFrameCount(self, *args):
        return _fsdk.Image_GetFrameCount(self, *args)

    def GetFrameBitmap(self, *args):
        return _fsdk.Image_GetFrameBitmap(self, *args)

    def GetXDPI(self, *args):
        return _fsdk.Image_GetXDPI(self, *args)

    def GetYDPI(self, *args):
        return _fsdk.Image_GetYDPI(self, *args)

    def AddFrame(self, *args):
        return _fsdk.Image_AddFrame(self, *args)

    def SetDPIs(self, *args):
        return _fsdk.Image_SetDPIs(self, *args)

    def SaveAs(self, *args):
        return _fsdk.Image_SaveAs(self, *args)

    def GetOrientation(self, *args):
        return _fsdk.Image_GetOrientation(self, *args)
Image_swigregister = _fsdk.Image_swigregister
Image_swigregister(Image)

class PrintDeviceSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintDeviceSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintDeviceSettingData, name)
    __repr__ = _swig_repr
    e_Portrait = _fsdk.PrintDeviceSettingData_e_Portrait
    e_Landscape = _fsdk.PrintDeviceSettingData_e_Landscape

    def __init__(self, *args):
        this = _fsdk.new_PrintDeviceSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PrintDeviceSettingData_Set(self, *args)
    __swig_setmethods__["device_width"] = _fsdk.PrintDeviceSettingData_device_width_set
    __swig_getmethods__["device_width"] = _fsdk.PrintDeviceSettingData_device_width_get
    if _newclass:
        device_width = _swig_property(_fsdk.PrintDeviceSettingData_device_width_get, _fsdk.PrintDeviceSettingData_device_width_set)
    __swig_setmethods__["device_height"] = _fsdk.PrintDeviceSettingData_device_height_set
    __swig_getmethods__["device_height"] = _fsdk.PrintDeviceSettingData_device_height_get
    if _newclass:
        device_height = _swig_property(_fsdk.PrintDeviceSettingData_device_height_get, _fsdk.PrintDeviceSettingData_device_height_set)
    __swig_setmethods__["device_margin"] = _fsdk.PrintDeviceSettingData_device_margin_set
    __swig_getmethods__["device_margin"] = _fsdk.PrintDeviceSettingData_device_margin_get
    if _newclass:
        device_margin = _swig_property(_fsdk.PrintDeviceSettingData_device_margin_get, _fsdk.PrintDeviceSettingData_device_margin_set)
    __swig_setmethods__["orientation"] = _fsdk.PrintDeviceSettingData_orientation_set
    __swig_getmethods__["orientation"] = _fsdk.PrintDeviceSettingData_orientation_get
    if _newclass:
        orientation = _swig_property(_fsdk.PrintDeviceSettingData_orientation_get, _fsdk.PrintDeviceSettingData_orientation_set)
    __swig_setmethods__["resolution"] = _fsdk.PrintDeviceSettingData_resolution_set
    __swig_getmethods__["resolution"] = _fsdk.PrintDeviceSettingData_resolution_get
    if _newclass:
        resolution = _swig_property(_fsdk.PrintDeviceSettingData_resolution_get, _fsdk.PrintDeviceSettingData_resolution_set)
    __swig_setmethods__["copies"] = _fsdk.PrintDeviceSettingData_copies_set
    __swig_getmethods__["copies"] = _fsdk.PrintDeviceSettingData_copies_get
    if _newclass:
        copies = _swig_property(_fsdk.PrintDeviceSettingData_copies_get, _fsdk.PrintDeviceSettingData_copies_set)
    __swig_destroy__ = _fsdk.delete_PrintDeviceSettingData
    __del__ = lambda self: None
PrintDeviceSettingData_swigregister = _fsdk.PrintDeviceSettingData_swigregister
PrintDeviceSettingData_swigregister(PrintDeviceSettingData)

class Renderer(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Renderer, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Renderer, name)
    __repr__ = _swig_repr
    e_ColorModeNormal = _fsdk.Renderer_e_ColorModeNormal
    e_ColorModeMappingGray = _fsdk.Renderer_e_ColorModeMappingGray
    e_ColorModeMapping = _fsdk.Renderer_e_ColorModeMapping
    e_ColorModeAlpha = _fsdk.Renderer_e_ColorModeAlpha
    e_ColorModeForeground = _fsdk.Renderer_e_ColorModeForeground
    e_RenderPage = _fsdk.Renderer_e_RenderPage
    e_RenderAnnot = _fsdk.Renderer_e_RenderAnnot
    e_RenderHighlight = _fsdk.Renderer_e_RenderHighlight
    e_RenderExceptHighlight = _fsdk.Renderer_e_RenderExceptHighlight
    e_RenderScreen = _fsdk.Renderer_e_RenderScreen
    e_ColorModeForegroundText = _fsdk.Renderer_e_ColorModeForegroundText
    e_ColorModeForegroundPath = _fsdk.Renderer_e_ColorModeForegroundPath
    e_ColorModeForegroundBlackText = _fsdk.Renderer_e_ColorModeForegroundBlackText
    e_ColorModeForegroundBlackPath = _fsdk.Renderer_e_ColorModeForegroundBlackPath

    def __init__(self, *args):
        this = _fsdk.new_Renderer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Renderer
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Renderer___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Renderer___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Renderer_IsEmpty(self, *args)

    def StartQuickRender(self, *args):
        return _fsdk.Renderer_StartQuickRender(self, *args)

    def StartRender(self, *args):
        return _fsdk.Renderer_StartRender(self, *args)

    def StartRenderReflowPage(self, *args):
        return _fsdk.Renderer_StartRenderReflowPage(self, *args)

    def StartRenderXFAPage(self, *args):
        return _fsdk.Renderer_StartRenderXFAPage(self, *args)

    def StartRenderBitmap(self, *args):
        return _fsdk.Renderer_StartRenderBitmap(self, *args)

    def SetRenderAnnotAppearanceType(self, *args):
        return _fsdk.Renderer_SetRenderAnnotAppearanceType(self, *args)

    def RenderAnnot(self, *args):
        return _fsdk.Renderer_RenderAnnot(self, *args)

    def RenderFormControls(self, *args):
        return _fsdk.Renderer_RenderFormControls(self, *args)

    def RenderGraphicsObject(self, *args):
        return _fsdk.Renderer_RenderGraphicsObject(self, *args)

    def SetClipRect(self, *args):
        return _fsdk.Renderer_SetClipRect(self, *args)

    def ClearClips(self, *args):
        return _fsdk.Renderer_ClearClips(self, *args)

    def SetClipPathFill(self, *args):
        return _fsdk.Renderer_SetClipPathFill(self, *args)

    def SetClipPathStroke(self, *args):
        return _fsdk.Renderer_SetClipPathStroke(self, *args)

    def SetRenderContentFlags(self, *args):
        return _fsdk.Renderer_SetRenderContentFlags(self, *args)

    def SetRenderAnnotsForThumbnail(self, *args):
        return _fsdk.Renderer_SetRenderAnnotsForThumbnail(self, *args)

    def SetRenderFormField(self, *args):
        return _fsdk.Renderer_SetRenderFormField(self, *args)

    def SetRenderSignature(self, *args):
        return _fsdk.Renderer_SetRenderSignature(self, *args)

    def SetLayerContext(self, *args):
        return _fsdk.Renderer_SetLayerContext(self, *args)

    def SetRenderLayer(self, *args):
        return _fsdk.Renderer_SetRenderLayer(self, *args)

    def SetColorMode(self, *args):
        return _fsdk.Renderer_SetColorMode(self, *args)

    def SetMappingModeColors(self, *args):
        return _fsdk.Renderer_SetMappingModeColors(self, *args)

    def SetForegroundColorMode(self, *args):
        return _fsdk.Renderer_SetForegroundColorMode(self, *args)

    def SetForegroundColor(self, *args):
        return _fsdk.Renderer_SetForegroundColor(self, *args)

    def SetClearType(self, *args):
        return _fsdk.Renderer_SetClearType(self, *args)

    def SetPrintTextAsGraphic(self, *args):
        return _fsdk.Renderer_SetPrintTextAsGraphic(self, *args)

    def SetPrintTextAsImage(self, *args):
        return _fsdk.Renderer_SetPrintTextAsImage(self, *args)

    def SetForceDownSample(self, *args):
        return _fsdk.Renderer_SetForceDownSample(self, *args)

    def SetJPEGDownSample(self, *args):
        return _fsdk.Renderer_SetJPEGDownSample(self, *args)

    def SetJPXDownSample(self, *args):
        return _fsdk.Renderer_SetJPXDownSample(self, *args)

    def EnableForPrint(self, *args):
        return _fsdk.Renderer_EnableForPrint(self, *args)

    def SetForceHalftone(self, *args):
        return _fsdk.Renderer_SetForceHalftone(self, *args)

    def SetRenderPathThinLine(self, *args):
        return _fsdk.Renderer_SetRenderPathThinLine(self, *args)

    def SetRenderTextAntiAliasing(self, *args):
        return _fsdk.Renderer_SetRenderTextAntiAliasing(self, *args)

    def SetRenderPathAntiAliasing(self, *args):
        return _fsdk.Renderer_SetRenderPathAntiAliasing(self, *args)

    def SetRenderPathFullCovered(self, *args):
        return _fsdk.Renderer_SetRenderPathFullCovered(self, *args)

    def SetRenderImageAntiAliasing(self, *args):
        return _fsdk.Renderer_SetRenderImageAntiAliasing(self, *args)

    def SetRenderEnhanceThinLines(self, *args):
        return _fsdk.Renderer_SetRenderEnhanceThinLines(self, *args)

    def SetRenderSignatureState(self, *args):
        return _fsdk.Renderer_SetRenderSignatureState(self, *args)

    def SetScreenDPIScale(self, *args):
        return _fsdk.Renderer_SetScreenDPIScale(self, *args)
Renderer_swigregister = _fsdk.Renderer_swigregister
Renderer_swigregister(Renderer)

class Barcode(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barcode, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Barcode, name)
    __repr__ = _swig_repr
    e_FormatCode39 = _fsdk.Barcode_e_FormatCode39
    e_FormatCode128 = _fsdk.Barcode_e_FormatCode128
    e_FormatEAN8 = _fsdk.Barcode_e_FormatEAN8
    e_FormatUPCA = _fsdk.Barcode_e_FormatUPCA
    e_FormatEAN13 = _fsdk.Barcode_e_FormatEAN13
    e_FormatITF = _fsdk.Barcode_e_FormatITF
    e_FormatPDF417 = _fsdk.Barcode_e_FormatPDF417
    e_FormatQRCode = _fsdk.Barcode_e_FormatQRCode
    e_QRCorrectionLevelLow = _fsdk.Barcode_e_QRCorrectionLevelLow
    e_QRCorrectionLevelMedium = _fsdk.Barcode_e_QRCorrectionLevelMedium
    e_QRCorrectionLevelQuater = _fsdk.Barcode_e_QRCorrectionLevelQuater
    e_QRCorrectionLevelHigh = _fsdk.Barcode_e_QRCorrectionLevelHigh
    __swig_destroy__ = _fsdk.delete_Barcode
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Barcode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Barcode___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Barcode___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Barcode_IsEmpty(self, *args)

    def GenerateBitmap(self, *args):
        return _fsdk.Barcode_GenerateBitmap(self, *args)
Barcode_swigregister = _fsdk.Barcode_swigregister
Barcode_swigregister(Barcode)

class FDFDoc(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFDoc, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDFDoc, name)
    __repr__ = _swig_repr
    e_FDF = _fsdk.FDFDoc_e_FDF
    e_XFDF = _fsdk.FDFDoc_e_XFDF

    def __init__(self, *args):
        this = _fsdk.new_FDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FDFDoc___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FDFDoc___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_FDFDoc
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.FDFDoc_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.FDFDoc_GetType(self, *args)

    def GetPDFPath(self, *args):
        return _fsdk.FDFDoc_GetPDFPath(self, *args)

    def SetPDFPath(self, *args):
        return _fsdk.FDFDoc_SetPDFPath(self, *args)

    def SaveAs(self, *args):
        return _fsdk.FDFDoc_SaveAs(self, *args)

    def GetCatalog(self, *args):
        return _fsdk.FDFDoc_GetCatalog(self, *args)

    def GetFDFDict(self, *args):
        return _fsdk.FDFDoc_GetFDFDict(self, *args)
FDFDoc_swigregister = _fsdk.FDFDoc_swigregister
FDFDoc_swigregister(FDFDoc)

class SearchCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.SearchCallback_Release(self, *args)

    def RetrieveSearchResult(self, *args):
        return _fsdk.SearchCallback_RetrieveSearchResult(self, *args)

    def __init__(self, *args):
        if self.__class__ == SearchCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_SearchCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_SearchCallback(self)
        return weakref_proxy(self)
SearchCallback_swigregister = _fsdk.SearchCallback_swigregister
SearchCallback_swigregister(SearchCallback)

class DocumentsSource(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentsSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentsSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_DocumentsSource
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_DocumentsSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.DocumentsSource___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.DocumentsSource___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.DocumentsSource_IsEmpty(self, *args)
DocumentsSource_swigregister = _fsdk.DocumentsSource_swigregister
DocumentsSource_swigregister(DocumentsSource)

class FullTextSearch(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FullTextSearch, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FullTextSearch, name)
    __repr__ = _swig_repr
    e_RankNone = _fsdk.FullTextSearch_e_RankNone
    e_RankHitCountASC = _fsdk.FullTextSearch_e_RankHitCountASC
    e_RankHitCountDESC = _fsdk.FullTextSearch_e_RankHitCountDESC
    __swig_destroy__ = _fsdk.delete_FullTextSearch
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_FullTextSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FullTextSearch___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FullTextSearch___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.FullTextSearch_IsEmpty(self, *args)

    def SetDataBasePath(self, *args):
        return _fsdk.FullTextSearch_SetDataBasePath(self, *args)

    def StartUpdateIndex(self, *args):
        return _fsdk.FullTextSearch_StartUpdateIndex(self, *args)

    def UpdateIndexWithFilePath(self, *args):
        return _fsdk.FullTextSearch_UpdateIndexWithFilePath(self, *args)

    def SearchOf(self, *args):
        return _fsdk.FullTextSearch_SearchOf(self, *args)
FullTextSearch_swigregister = _fsdk.FullTextSearch_swigregister
FullTextSearch_swigregister(FullTextSearch)

class MenuListArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MenuListArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MenuListArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_MenuListArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_MenuListArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.MenuListArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.MenuListArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.MenuListArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.MenuListArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.MenuListArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.MenuListArray_RemoveAll(self, *args)
MenuListArray_swigregister = _fsdk.MenuListArray_swigregister
MenuListArray_swigregister(MenuListArray)

class MenuItemExArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MenuItemExArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MenuItemExArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_MenuItemExArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_MenuItemExArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.MenuItemExArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.MenuItemExArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.MenuItemExArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.MenuItemExArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.MenuItemExArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.MenuItemExArray_RemoveAll(self, *args)
MenuItemExArray_swigregister = _fsdk.MenuItemExArray_swigregister
MenuItemExArray_swigregister(MenuItemExArray)

class MenuList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MenuList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MenuList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_MenuList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.MenuList_Set(self, *args)
    __swig_setmethods__["level"] = _fsdk.MenuList_level_set
    __swig_getmethods__["level"] = _fsdk.MenuList_level_get
    if _newclass:
        level = _swig_property(_fsdk.MenuList_level_get, _fsdk.MenuList_level_set)
    __swig_setmethods__["name"] = _fsdk.MenuList_name_set
    __swig_getmethods__["name"] = _fsdk.MenuList_name_get
    if _newclass:
        name = _swig_property(_fsdk.MenuList_name_get, _fsdk.MenuList_name_set)
    __swig_setmethods__["sub_menu_list_array"] = _fsdk.MenuList_sub_menu_list_array_set
    __swig_getmethods__["sub_menu_list_array"] = _fsdk.MenuList_sub_menu_list_array_get
    if _newclass:
        sub_menu_list_array = _swig_property(_fsdk.MenuList_sub_menu_list_array_get, _fsdk.MenuList_sub_menu_list_array_set)
    __swig_destroy__ = _fsdk.delete_MenuList
    __del__ = lambda self: None
MenuList_swigregister = _fsdk.MenuList_swigregister
MenuList_swigregister(MenuList)

class MenuItemEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MenuItemEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MenuItemEx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_MenuItemEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.MenuItemEx_Set(self, *args)
    __swig_setmethods__["item_name"] = _fsdk.MenuItemEx_item_name_set
    __swig_getmethods__["item_name"] = _fsdk.MenuItemEx_item_name_get
    if _newclass:
        item_name = _swig_property(_fsdk.MenuItemEx_item_name_get, _fsdk.MenuItemEx_item_name_set)
    __swig_setmethods__["return_name"] = _fsdk.MenuItemEx_return_name_set
    __swig_getmethods__["return_name"] = _fsdk.MenuItemEx_return_name_get
    if _newclass:
        return_name = _swig_property(_fsdk.MenuItemEx_return_name_get, _fsdk.MenuItemEx_return_name_set)
    __swig_setmethods__["is_checked"] = _fsdk.MenuItemEx_is_checked_set
    __swig_getmethods__["is_checked"] = _fsdk.MenuItemEx_is_checked_get
    if _newclass:
        is_checked = _swig_property(_fsdk.MenuItemEx_is_checked_get, _fsdk.MenuItemEx_is_checked_set)
    __swig_setmethods__["is_enabled"] = _fsdk.MenuItemEx_is_enabled_set
    __swig_getmethods__["is_enabled"] = _fsdk.MenuItemEx_is_enabled_get
    if _newclass:
        is_enabled = _swig_property(_fsdk.MenuItemEx_is_enabled_get, _fsdk.MenuItemEx_is_enabled_set)
    __swig_setmethods__["sub_menu_item_array"] = _fsdk.MenuItemEx_sub_menu_item_array_set
    __swig_getmethods__["sub_menu_item_array"] = _fsdk.MenuItemEx_sub_menu_item_array_get
    if _newclass:
        sub_menu_item_array = _swig_property(_fsdk.MenuItemEx_sub_menu_item_array_get, _fsdk.MenuItemEx_sub_menu_item_array_set)
    __swig_destroy__ = _fsdk.delete_MenuItemEx
    __del__ = lambda self: None
MenuItemEx_swigregister = _fsdk.MenuItemEx_swigregister
MenuItemEx_swigregister(MenuItemEx)

class IdentityProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityProperties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_IdentityProperties(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.IdentityProperties_Set(self, *args)
    __swig_setmethods__["corporation"] = _fsdk.IdentityProperties_corporation_set
    __swig_getmethods__["corporation"] = _fsdk.IdentityProperties_corporation_get
    if _newclass:
        corporation = _swig_property(_fsdk.IdentityProperties_corporation_get, _fsdk.IdentityProperties_corporation_set)
    __swig_setmethods__["email"] = _fsdk.IdentityProperties_email_set
    __swig_getmethods__["email"] = _fsdk.IdentityProperties_email_get
    if _newclass:
        email = _swig_property(_fsdk.IdentityProperties_email_get, _fsdk.IdentityProperties_email_set)
    __swig_setmethods__["login_name"] = _fsdk.IdentityProperties_login_name_set
    __swig_getmethods__["login_name"] = _fsdk.IdentityProperties_login_name_get
    if _newclass:
        login_name = _swig_property(_fsdk.IdentityProperties_login_name_get, _fsdk.IdentityProperties_login_name_set)
    __swig_setmethods__["name"] = _fsdk.IdentityProperties_name_set
    __swig_getmethods__["name"] = _fsdk.IdentityProperties_name_get
    if _newclass:
        name = _swig_property(_fsdk.IdentityProperties_name_get, _fsdk.IdentityProperties_name_set)
    __swig_setmethods__["first_name"] = _fsdk.IdentityProperties_first_name_set
    __swig_getmethods__["first_name"] = _fsdk.IdentityProperties_first_name_get
    if _newclass:
        first_name = _swig_property(_fsdk.IdentityProperties_first_name_get, _fsdk.IdentityProperties_first_name_set)
    __swig_setmethods__["last_name"] = _fsdk.IdentityProperties_last_name_set
    __swig_getmethods__["last_name"] = _fsdk.IdentityProperties_last_name_get
    if _newclass:
        last_name = _swig_property(_fsdk.IdentityProperties_last_name_get, _fsdk.IdentityProperties_last_name_set)
    __swig_setmethods__["title"] = _fsdk.IdentityProperties_title_set
    __swig_getmethods__["title"] = _fsdk.IdentityProperties_title_get
    if _newclass:
        title = _swig_property(_fsdk.IdentityProperties_title_get, _fsdk.IdentityProperties_title_set)
    __swig_setmethods__["department"] = _fsdk.IdentityProperties_department_set
    __swig_getmethods__["department"] = _fsdk.IdentityProperties_department_get
    if _newclass:
        department = _swig_property(_fsdk.IdentityProperties_department_get, _fsdk.IdentityProperties_department_set)
    __swig_destroy__ = _fsdk.delete_IdentityProperties
    __del__ = lambda self: None
IdentityProperties_swigregister = _fsdk.IdentityProperties_swigregister
IdentityProperties_swigregister(IdentityProperties)

class ButtonItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ButtonItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ButtonItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ButtonItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.ButtonItem_Set(self, *args)
    __swig_setmethods__["name"] = _fsdk.ButtonItem_name_set
    __swig_getmethods__["name"] = _fsdk.ButtonItem_name_get
    if _newclass:
        name = _swig_property(_fsdk.ButtonItem_name_get, _fsdk.ButtonItem_name_set)
    __swig_setmethods__["pos"] = _fsdk.ButtonItem_pos_set
    __swig_getmethods__["pos"] = _fsdk.ButtonItem_pos_get
    if _newclass:
        pos = _swig_property(_fsdk.ButtonItem_pos_get, _fsdk.ButtonItem_pos_set)
    __swig_setmethods__["_exec"] = _fsdk.ButtonItem__exec_set
    __swig_getmethods__["_exec"] = _fsdk.ButtonItem__exec_get
    if _newclass:
        _exec = _swig_property(_fsdk.ButtonItem__exec_get, _fsdk.ButtonItem__exec_set)
    __swig_setmethods__["enable"] = _fsdk.ButtonItem_enable_set
    __swig_getmethods__["enable"] = _fsdk.ButtonItem_enable_get
    if _newclass:
        enable = _swig_property(_fsdk.ButtonItem_enable_get, _fsdk.ButtonItem_enable_set)
    __swig_setmethods__["marked"] = _fsdk.ButtonItem_marked_set
    __swig_getmethods__["marked"] = _fsdk.ButtonItem_marked_get
    if _newclass:
        marked = _swig_property(_fsdk.ButtonItem_marked_get, _fsdk.ButtonItem_marked_set)
    __swig_setmethods__["tooltip"] = _fsdk.ButtonItem_tooltip_set
    __swig_getmethods__["tooltip"] = _fsdk.ButtonItem_tooltip_get
    if _newclass:
        tooltip = _swig_property(_fsdk.ButtonItem_tooltip_get, _fsdk.ButtonItem_tooltip_set)
    __swig_setmethods__["label"] = _fsdk.ButtonItem_label_set
    __swig_getmethods__["label"] = _fsdk.ButtonItem_label_get
    if _newclass:
        label = _swig_property(_fsdk.ButtonItem_label_get, _fsdk.ButtonItem_label_set)
    __swig_setmethods__["bitmap"] = _fsdk.ButtonItem_bitmap_set
    __swig_getmethods__["bitmap"] = _fsdk.ButtonItem_bitmap_get
    if _newclass:
        bitmap = _swig_property(_fsdk.ButtonItem_bitmap_get, _fsdk.ButtonItem_bitmap_set)
    __swig_destroy__ = _fsdk.delete_ButtonItem
    __del__ = lambda self: None
ButtonItem_swigregister = _fsdk.ButtonItem_swigregister
ButtonItem_swigregister(ButtonItem)

class MenuItemConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MenuItemConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MenuItemConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_MenuItemConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.MenuItemConfig_Set(self, *args)
    __swig_setmethods__["name"] = _fsdk.MenuItemConfig_name_set
    __swig_getmethods__["name"] = _fsdk.MenuItemConfig_name_get
    if _newclass:
        name = _swig_property(_fsdk.MenuItemConfig_name_get, _fsdk.MenuItemConfig_name_set)
    __swig_setmethods__["user"] = _fsdk.MenuItemConfig_user_set
    __swig_getmethods__["user"] = _fsdk.MenuItemConfig_user_get
    if _newclass:
        user = _swig_property(_fsdk.MenuItemConfig_user_get, _fsdk.MenuItemConfig_user_set)
    __swig_setmethods__["parent"] = _fsdk.MenuItemConfig_parent_set
    __swig_getmethods__["parent"] = _fsdk.MenuItemConfig_parent_get
    if _newclass:
        parent = _swig_property(_fsdk.MenuItemConfig_parent_get, _fsdk.MenuItemConfig_parent_set)
    __swig_setmethods__["pos"] = _fsdk.MenuItemConfig_pos_set
    __swig_getmethods__["pos"] = _fsdk.MenuItemConfig_pos_get
    if _newclass:
        pos = _swig_property(_fsdk.MenuItemConfig_pos_get, _fsdk.MenuItemConfig_pos_set)
    __swig_setmethods__["pos_str"] = _fsdk.MenuItemConfig_pos_str_set
    __swig_getmethods__["pos_str"] = _fsdk.MenuItemConfig_pos_str_get
    if _newclass:
        pos_str = _swig_property(_fsdk.MenuItemConfig_pos_str_get, _fsdk.MenuItemConfig_pos_str_set)
    __swig_setmethods__["_exec"] = _fsdk.MenuItemConfig__exec_set
    __swig_getmethods__["_exec"] = _fsdk.MenuItemConfig__exec_get
    if _newclass:
        _exec = _swig_property(_fsdk.MenuItemConfig__exec_get, _fsdk.MenuItemConfig__exec_set)
    __swig_setmethods__["enable"] = _fsdk.MenuItemConfig_enable_set
    __swig_getmethods__["enable"] = _fsdk.MenuItemConfig_enable_get
    if _newclass:
        enable = _swig_property(_fsdk.MenuItemConfig_enable_get, _fsdk.MenuItemConfig_enable_set)
    __swig_setmethods__["marked"] = _fsdk.MenuItemConfig_marked_set
    __swig_getmethods__["marked"] = _fsdk.MenuItemConfig_marked_get
    if _newclass:
        marked = _swig_property(_fsdk.MenuItemConfig_marked_get, _fsdk.MenuItemConfig_marked_set)
    __swig_destroy__ = _fsdk.delete_MenuItemConfig
    __del__ = lambda self: None
MenuItemConfig_swigregister = _fsdk.MenuItemConfig_swigregister
MenuItemConfig_swigregister(MenuItemConfig)

class DialogDescriptionElementArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DialogDescriptionElementArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DialogDescriptionElementArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_DialogDescriptionElementArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_DialogDescriptionElementArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.DialogDescriptionElementArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.DialogDescriptionElementArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.DialogDescriptionElementArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.DialogDescriptionElementArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.DialogDescriptionElementArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.DialogDescriptionElementArray_RemoveAll(self, *args)
DialogDescriptionElementArray_swigregister = _fsdk.DialogDescriptionElementArray_swigregister
DialogDescriptionElementArray_swigregister(DialogDescriptionElementArray)

class DialogDescriptionElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DialogDescriptionElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DialogDescriptionElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_DialogDescriptionElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.DialogDescriptionElement_Set(self, *args)
    __swig_setmethods__["name"] = _fsdk.DialogDescriptionElement_name_set
    __swig_getmethods__["name"] = _fsdk.DialogDescriptionElement_name_get
    if _newclass:
        name = _swig_property(_fsdk.DialogDescriptionElement_name_get, _fsdk.DialogDescriptionElement_name_set)
    __swig_setmethods__["item_id"] = _fsdk.DialogDescriptionElement_item_id_set
    __swig_getmethods__["item_id"] = _fsdk.DialogDescriptionElement_item_id_get
    if _newclass:
        item_id = _swig_property(_fsdk.DialogDescriptionElement_item_id_get, _fsdk.DialogDescriptionElement_item_id_set)
    __swig_setmethods__["type"] = _fsdk.DialogDescriptionElement_type_set
    __swig_getmethods__["type"] = _fsdk.DialogDescriptionElement_type_get
    if _newclass:
        type = _swig_property(_fsdk.DialogDescriptionElement_type_get, _fsdk.DialogDescriptionElement_type_set)
    __swig_setmethods__["next_tab"] = _fsdk.DialogDescriptionElement_next_tab_set
    __swig_getmethods__["next_tab"] = _fsdk.DialogDescriptionElement_next_tab_get
    if _newclass:
        next_tab = _swig_property(_fsdk.DialogDescriptionElement_next_tab_get, _fsdk.DialogDescriptionElement_next_tab_set)
    __swig_setmethods__["width"] = _fsdk.DialogDescriptionElement_width_set
    __swig_getmethods__["width"] = _fsdk.DialogDescriptionElement_width_get
    if _newclass:
        width = _swig_property(_fsdk.DialogDescriptionElement_width_get, _fsdk.DialogDescriptionElement_width_set)
    __swig_setmethods__["height"] = _fsdk.DialogDescriptionElement_height_set
    __swig_getmethods__["height"] = _fsdk.DialogDescriptionElement_height_get
    if _newclass:
        height = _swig_property(_fsdk.DialogDescriptionElement_height_get, _fsdk.DialogDescriptionElement_height_set)
    __swig_setmethods__["char_width"] = _fsdk.DialogDescriptionElement_char_width_set
    __swig_getmethods__["char_width"] = _fsdk.DialogDescriptionElement_char_width_get
    if _newclass:
        char_width = _swig_property(_fsdk.DialogDescriptionElement_char_width_get, _fsdk.DialogDescriptionElement_char_width_set)
    __swig_setmethods__["char_height"] = _fsdk.DialogDescriptionElement_char_height_set
    __swig_getmethods__["char_height"] = _fsdk.DialogDescriptionElement_char_height_get
    if _newclass:
        char_height = _swig_property(_fsdk.DialogDescriptionElement_char_height_get, _fsdk.DialogDescriptionElement_char_height_set)
    __swig_setmethods__["font"] = _fsdk.DialogDescriptionElement_font_set
    __swig_getmethods__["font"] = _fsdk.DialogDescriptionElement_font_get
    if _newclass:
        font = _swig_property(_fsdk.DialogDescriptionElement_font_get, _fsdk.DialogDescriptionElement_font_set)
    __swig_setmethods__["bold"] = _fsdk.DialogDescriptionElement_bold_set
    __swig_getmethods__["bold"] = _fsdk.DialogDescriptionElement_bold_get
    if _newclass:
        bold = _swig_property(_fsdk.DialogDescriptionElement_bold_get, _fsdk.DialogDescriptionElement_bold_set)
    __swig_setmethods__["italic"] = _fsdk.DialogDescriptionElement_italic_set
    __swig_getmethods__["italic"] = _fsdk.DialogDescriptionElement_italic_get
    if _newclass:
        italic = _swig_property(_fsdk.DialogDescriptionElement_italic_get, _fsdk.DialogDescriptionElement_italic_set)
    __swig_setmethods__["alignment"] = _fsdk.DialogDescriptionElement_alignment_set
    __swig_getmethods__["alignment"] = _fsdk.DialogDescriptionElement_alignment_get
    if _newclass:
        alignment = _swig_property(_fsdk.DialogDescriptionElement_alignment_get, _fsdk.DialogDescriptionElement_alignment_set)
    __swig_setmethods__["align_children"] = _fsdk.DialogDescriptionElement_align_children_set
    __swig_getmethods__["align_children"] = _fsdk.DialogDescriptionElement_align_children_get
    if _newclass:
        align_children = _swig_property(_fsdk.DialogDescriptionElement_align_children_get, _fsdk.DialogDescriptionElement_align_children_set)
    __swig_setmethods__["element_array"] = _fsdk.DialogDescriptionElement_element_array_set
    __swig_getmethods__["element_array"] = _fsdk.DialogDescriptionElement_element_array_get
    if _newclass:
        element_array = _swig_property(_fsdk.DialogDescriptionElement_element_array_get, _fsdk.DialogDescriptionElement_element_array_set)
    __swig_destroy__ = _fsdk.delete_DialogDescriptionElement
    __del__ = lambda self: None
DialogDescriptionElement_swigregister = _fsdk.DialogDescriptionElement_swigregister
DialogDescriptionElement_swigregister(DialogDescriptionElement)

class DialogDescriptionConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DialogDescriptionConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DialogDescriptionConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_DialogDescriptionConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.DialogDescriptionConfig_Set(self, *args)
    __swig_setmethods__["name"] = _fsdk.DialogDescriptionConfig_name_set
    __swig_getmethods__["name"] = _fsdk.DialogDescriptionConfig_name_get
    if _newclass:
        name = _swig_property(_fsdk.DialogDescriptionConfig_name_get, _fsdk.DialogDescriptionConfig_name_set)
    __swig_setmethods__["first_tab"] = _fsdk.DialogDescriptionConfig_first_tab_set
    __swig_getmethods__["first_tab"] = _fsdk.DialogDescriptionConfig_first_tab_get
    if _newclass:
        first_tab = _swig_property(_fsdk.DialogDescriptionConfig_first_tab_get, _fsdk.DialogDescriptionConfig_first_tab_set)
    __swig_setmethods__["width"] = _fsdk.DialogDescriptionConfig_width_set
    __swig_getmethods__["width"] = _fsdk.DialogDescriptionConfig_width_get
    if _newclass:
        width = _swig_property(_fsdk.DialogDescriptionConfig_width_get, _fsdk.DialogDescriptionConfig_width_set)
    __swig_setmethods__["height"] = _fsdk.DialogDescriptionConfig_height_set
    __swig_getmethods__["height"] = _fsdk.DialogDescriptionConfig_height_get
    if _newclass:
        height = _swig_property(_fsdk.DialogDescriptionConfig_height_get, _fsdk.DialogDescriptionConfig_height_set)
    __swig_setmethods__["char_width"] = _fsdk.DialogDescriptionConfig_char_width_set
    __swig_getmethods__["char_width"] = _fsdk.DialogDescriptionConfig_char_width_get
    if _newclass:
        char_width = _swig_property(_fsdk.DialogDescriptionConfig_char_width_get, _fsdk.DialogDescriptionConfig_char_width_set)
    __swig_setmethods__["char_height"] = _fsdk.DialogDescriptionConfig_char_height_set
    __swig_getmethods__["char_height"] = _fsdk.DialogDescriptionConfig_char_height_get
    if _newclass:
        char_height = _swig_property(_fsdk.DialogDescriptionConfig_char_height_get, _fsdk.DialogDescriptionConfig_char_height_set)
    __swig_setmethods__["align_children"] = _fsdk.DialogDescriptionConfig_align_children_set
    __swig_getmethods__["align_children"] = _fsdk.DialogDescriptionConfig_align_children_get
    if _newclass:
        align_children = _swig_property(_fsdk.DialogDescriptionConfig_align_children_get, _fsdk.DialogDescriptionConfig_align_children_set)
    __swig_setmethods__["element_array"] = _fsdk.DialogDescriptionConfig_element_array_set
    __swig_getmethods__["element_array"] = _fsdk.DialogDescriptionConfig_element_array_get
    if _newclass:
        element_array = _swig_property(_fsdk.DialogDescriptionConfig_element_array_get, _fsdk.DialogDescriptionConfig_element_array_set)
    __swig_destroy__ = _fsdk.delete_DialogDescriptionConfig
    __del__ = lambda self: None
DialogDescriptionConfig_swigregister = _fsdk.DialogDescriptionConfig_swigregister
DialogDescriptionConfig_swigregister(DialogDescriptionConfig)

class SOAPAuthenticateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOAPAuthenticateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOAPAuthenticateInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SOAPAuthenticateInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SOAPAuthenticateInfo_Set(self, *args)
    __swig_setmethods__["username"] = _fsdk.SOAPAuthenticateInfo_username_set
    __swig_getmethods__["username"] = _fsdk.SOAPAuthenticateInfo_username_get
    if _newclass:
        username = _swig_property(_fsdk.SOAPAuthenticateInfo_username_get, _fsdk.SOAPAuthenticateInfo_username_set)
    __swig_setmethods__["password"] = _fsdk.SOAPAuthenticateInfo_password_set
    __swig_getmethods__["password"] = _fsdk.SOAPAuthenticateInfo_password_get
    if _newclass:
        password = _swig_property(_fsdk.SOAPAuthenticateInfo_password_get, _fsdk.SOAPAuthenticateInfo_password_set)
    __swig_setmethods__["is_use_platform_auth"] = _fsdk.SOAPAuthenticateInfo_is_use_platform_auth_set
    __swig_getmethods__["is_use_platform_auth"] = _fsdk.SOAPAuthenticateInfo_is_use_platform_auth_get
    if _newclass:
        is_use_platform_auth = _swig_property(_fsdk.SOAPAuthenticateInfo_is_use_platform_auth_get, _fsdk.SOAPAuthenticateInfo_is_use_platform_auth_set)
    __swig_destroy__ = _fsdk.delete_SOAPAuthenticateInfo
    __del__ = lambda self: None
SOAPAuthenticateInfo_swigregister = _fsdk.SOAPAuthenticateInfo_swigregister
SOAPAuthenticateInfo_swigregister(SOAPAuthenticateInfo)

class SOAPRequestProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOAPRequestProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOAPRequestProperties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SOAPRequestProperties(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SOAPRequestProperties_Set(self, *args)
    __swig_setmethods__["request_url"] = _fsdk.SOAPRequestProperties_request_url_set
    __swig_getmethods__["request_url"] = _fsdk.SOAPRequestProperties_request_url_get
    if _newclass:
        request_url = _swig_property(_fsdk.SOAPRequestProperties_request_url_get, _fsdk.SOAPRequestProperties_request_url_set)
    __swig_setmethods__["request_content"] = _fsdk.SOAPRequestProperties_request_content_set
    __swig_getmethods__["request_content"] = _fsdk.SOAPRequestProperties_request_content_get
    if _newclass:
        request_content = _swig_property(_fsdk.SOAPRequestProperties_request_content_get, _fsdk.SOAPRequestProperties_request_content_set)
    __swig_setmethods__["soap_action"] = _fsdk.SOAPRequestProperties_soap_action_set
    __swig_getmethods__["soap_action"] = _fsdk.SOAPRequestProperties_soap_action_get
    if _newclass:
        soap_action = _swig_property(_fsdk.SOAPRequestProperties_soap_action_get, _fsdk.SOAPRequestProperties_soap_action_set)
    __swig_setmethods__["soap_namespace"] = _fsdk.SOAPRequestProperties_soap_namespace_set
    __swig_getmethods__["soap_namespace"] = _fsdk.SOAPRequestProperties_soap_namespace_get
    if _newclass:
        soap_namespace = _swig_property(_fsdk.SOAPRequestProperties_soap_namespace_get, _fsdk.SOAPRequestProperties_soap_namespace_set)
    __swig_setmethods__["soap_version"] = _fsdk.SOAPRequestProperties_soap_version_set
    __swig_getmethods__["soap_version"] = _fsdk.SOAPRequestProperties_soap_version_get
    if _newclass:
        soap_version = _swig_property(_fsdk.SOAPRequestProperties_soap_version_get, _fsdk.SOAPRequestProperties_soap_version_set)
    __swig_setmethods__["content_type"] = _fsdk.SOAPRequestProperties_content_type_set
    __swig_getmethods__["content_type"] = _fsdk.SOAPRequestProperties_content_type_get
    if _newclass:
        content_type = _swig_property(_fsdk.SOAPRequestProperties_content_type_get, _fsdk.SOAPRequestProperties_content_type_set)
    __swig_setmethods__["is_encode"] = _fsdk.SOAPRequestProperties_is_encode_set
    __swig_getmethods__["is_encode"] = _fsdk.SOAPRequestProperties_is_encode_get
    if _newclass:
        is_encode = _swig_property(_fsdk.SOAPRequestProperties_is_encode_get, _fsdk.SOAPRequestProperties_is_encode_set)
    __swig_setmethods__["is_wiredump"] = _fsdk.SOAPRequestProperties_is_wiredump_set
    __swig_getmethods__["is_wiredump"] = _fsdk.SOAPRequestProperties_is_wiredump_get
    if _newclass:
        is_wiredump = _swig_property(_fsdk.SOAPRequestProperties_is_wiredump_get, _fsdk.SOAPRequestProperties_is_wiredump_set)
    __swig_setmethods__["request_header"] = _fsdk.SOAPRequestProperties_request_header_set
    __swig_getmethods__["request_header"] = _fsdk.SOAPRequestProperties_request_header_get
    if _newclass:
        request_header = _swig_property(_fsdk.SOAPRequestProperties_request_header_get, _fsdk.SOAPRequestProperties_request_header_set)
    __swig_setmethods__["authenticate"] = _fsdk.SOAPRequestProperties_authenticate_set
    __swig_getmethods__["authenticate"] = _fsdk.SOAPRequestProperties_authenticate_get
    if _newclass:
        authenticate = _swig_property(_fsdk.SOAPRequestProperties_authenticate_get, _fsdk.SOAPRequestProperties_authenticate_set)
    __swig_destroy__ = _fsdk.delete_SOAPRequestProperties
    __del__ = lambda self: None
SOAPRequestProperties_swigregister = _fsdk.SOAPRequestProperties_swigregister
SOAPRequestProperties_swigregister(SOAPRequestProperties)

class SOAPResponseInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOAPResponseInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOAPResponseInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SOAPResponseInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SOAPResponseInfo_Set(self, *args)
    __swig_setmethods__["response_header"] = _fsdk.SOAPResponseInfo_response_header_set
    __swig_getmethods__["response_header"] = _fsdk.SOAPResponseInfo_response_header_get
    if _newclass:
        response_header = _swig_property(_fsdk.SOAPResponseInfo_response_header_get, _fsdk.SOAPResponseInfo_response_header_set)
    __swig_setmethods__["response_body"] = _fsdk.SOAPResponseInfo_response_body_set
    __swig_getmethods__["response_body"] = _fsdk.SOAPResponseInfo_response_body_get
    if _newclass:
        response_body = _swig_property(_fsdk.SOAPResponseInfo_response_body_get, _fsdk.SOAPResponseInfo_response_body_set)
    __swig_setmethods__["network_error"] = _fsdk.SOAPResponseInfo_network_error_set
    __swig_getmethods__["network_error"] = _fsdk.SOAPResponseInfo_network_error_get
    if _newclass:
        network_error = _swig_property(_fsdk.SOAPResponseInfo_network_error_get, _fsdk.SOAPResponseInfo_network_error_set)
    __swig_setmethods__["status_code"] = _fsdk.SOAPResponseInfo_status_code_set
    __swig_getmethods__["status_code"] = _fsdk.SOAPResponseInfo_status_code_get
    if _newclass:
        status_code = _swig_property(_fsdk.SOAPResponseInfo_status_code_get, _fsdk.SOAPResponseInfo_status_code_set)
    __swig_destroy__ = _fsdk.delete_SOAPResponseInfo
    __del__ = lambda self: None
SOAPResponseInfo_swigregister = _fsdk.SOAPResponseInfo_swigregister
SOAPResponseInfo_swigregister(SOAPResponseInfo)

class PrintParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintParams, name)
    __repr__ = _swig_repr
    e_PrintContentDocument = _fsdk.PrintParams_e_PrintContentDocument
    e_PrintContentDocAndAnnots = _fsdk.PrintParams_e_PrintContentDocAndAnnots
    e_PrintContentFormFieldsOnly = _fsdk.PrintParams_e_PrintContentFormFieldsOnly
    e_DuplexTypeSimplex = _fsdk.PrintParams_e_DuplexTypeSimplex
    e_DuplexTypeDuplexFlipLongEdge = _fsdk.PrintParams_e_DuplexTypeDuplexFlipLongEdge
    e_DuplexTypeDuplexFlipShortEdge = _fsdk.PrintParams_e_DuplexTypeDuplexFlipShortEdge
    e_BookletDuplexModeBothSides = _fsdk.PrintParams_e_BookletDuplexModeBothSides
    e_BookletDuplexModeFrontSideOnly = _fsdk.PrintParams_e_BookletDuplexModeFrontSideOnly
    e_BookletDuplexModeBackSideOnly = _fsdk.PrintParams_e_BookletDuplexModeBackSideOnly
    e_BookletBindingRight = _fsdk.PrintParams_e_BookletBindingRight
    e_BookletBindingLeft = _fsdk.PrintParams_e_BookletBindingLeft
    e_BookletBindingLeftTall = _fsdk.PrintParams_e_BookletBindingLeftTall
    e_BookletBindingRightTall = _fsdk.PrintParams_e_BookletBindingRightTall
    e_PageOrderHorizontal = _fsdk.PrintParams_e_PageOrderHorizontal
    e_PageOrderHorizontalReversed = _fsdk.PrintParams_e_PageOrderHorizontalReversed
    e_PageOrderVertical = _fsdk.PrintParams_e_PageOrderVertical
    e_PrintHandlingNone = _fsdk.PrintParams_e_PrintHandlingNone
    e_PrintHandlingFitPaper = _fsdk.PrintParams_e_PrintHandlingFitPaper
    e_PrintHandlingReducePaper = _fsdk.PrintParams_e_PrintHandlingReducePaper
    e_PrintHandlingMultiplePages = _fsdk.PrintParams_e_PrintHandlingMultiplePages
    e_PrintHandlingTileLargePages = _fsdk.PrintParams_e_PrintHandlingTileLargePages
    e_PrintHandlingBooklet = _fsdk.PrintParams_e_PrintHandlingBooklet

    def __init__(self, *args):
        this = _fsdk.new_PrintParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["is_show_ui"] = _fsdk.PrintParams_is_show_ui_set
    __swig_getmethods__["is_show_ui"] = _fsdk.PrintParams_is_show_ui_get
    if _newclass:
        is_show_ui = _swig_property(_fsdk.PrintParams_is_show_ui_get, _fsdk.PrintParams_is_show_ui_set)
    __swig_setmethods__["is_reverse"] = _fsdk.PrintParams_is_reverse_set
    __swig_getmethods__["is_reverse"] = _fsdk.PrintParams_is_reverse_get
    if _newclass:
        is_reverse = _swig_property(_fsdk.PrintParams_is_reverse_get, _fsdk.PrintParams_is_reverse_set)
    __swig_setmethods__["is_print_as_image"] = _fsdk.PrintParams_is_print_as_image_set
    __swig_getmethods__["is_print_as_image"] = _fsdk.PrintParams_is_print_as_image_get
    if _newclass:
        is_print_as_image = _swig_property(_fsdk.PrintParams_is_print_as_image_get, _fsdk.PrintParams_is_print_as_image_set)
    __swig_setmethods__["is_print_auto_center"] = _fsdk.PrintParams_is_print_auto_center_set
    __swig_getmethods__["is_print_auto_center"] = _fsdk.PrintParams_is_print_auto_center_get
    if _newclass:
        is_print_auto_center = _swig_property(_fsdk.PrintParams_is_print_auto_center_get, _fsdk.PrintParams_is_print_auto_center_set)
    __swig_setmethods__["is_print_auto_rotate"] = _fsdk.PrintParams_is_print_auto_rotate_set
    __swig_getmethods__["is_print_auto_rotate"] = _fsdk.PrintParams_is_print_auto_rotate_get
    if _newclass:
        is_print_auto_rotate = _swig_property(_fsdk.PrintParams_is_print_auto_rotate_get, _fsdk.PrintParams_is_print_auto_rotate_set)
    __swig_setmethods__["is_simulate_overprinting"] = _fsdk.PrintParams_is_simulate_overprinting_set
    __swig_getmethods__["is_simulate_overprinting"] = _fsdk.PrintParams_is_simulate_overprinting_get
    if _newclass:
        is_simulate_overprinting = _swig_property(_fsdk.PrintParams_is_simulate_overprinting_get, _fsdk.PrintParams_is_simulate_overprinting_set)
    __swig_setmethods__["is_print_page_border"] = _fsdk.PrintParams_is_print_page_border_set
    __swig_getmethods__["is_print_page_border"] = _fsdk.PrintParams_is_print_page_border_get
    if _newclass:
        is_print_page_border = _swig_property(_fsdk.PrintParams_is_print_page_border_get, _fsdk.PrintParams_is_print_page_border_set)
    __swig_setmethods__["page_range"] = _fsdk.PrintParams_page_range_set
    __swig_getmethods__["page_range"] = _fsdk.PrintParams_page_range_get
    if _newclass:
        page_range = _swig_property(_fsdk.PrintParams_page_range_get, _fsdk.PrintParams_page_range_set)
    __swig_setmethods__["print_content"] = _fsdk.PrintParams_print_content_set
    __swig_getmethods__["print_content"] = _fsdk.PrintParams_print_content_get
    if _newclass:
        print_content = _swig_property(_fsdk.PrintParams_print_content_get, _fsdk.PrintParams_print_content_set)
    __swig_setmethods__["printer_name"] = _fsdk.PrintParams_printer_name_set
    __swig_getmethods__["printer_name"] = _fsdk.PrintParams_printer_name_get
    if _newclass:
        printer_name = _swig_property(_fsdk.PrintParams_printer_name_get, _fsdk.PrintParams_printer_name_set)
    __swig_setmethods__["output_file_name"] = _fsdk.PrintParams_output_file_name_set
    __swig_getmethods__["output_file_name"] = _fsdk.PrintParams_output_file_name_get
    if _newclass:
        output_file_name = _swig_property(_fsdk.PrintParams_output_file_name_get, _fsdk.PrintParams_output_file_name_set)
    __swig_setmethods__["num_copies"] = _fsdk.PrintParams_num_copies_set
    __swig_getmethods__["num_copies"] = _fsdk.PrintParams_num_copies_get
    if _newclass:
        num_copies = _swig_property(_fsdk.PrintParams_num_copies_get, _fsdk.PrintParams_num_copies_set)
    __swig_setmethods__["duplex_type"] = _fsdk.PrintParams_duplex_type_set
    __swig_getmethods__["duplex_type"] = _fsdk.PrintParams_duplex_type_get
    if _newclass:
        duplex_type = _swig_property(_fsdk.PrintParams_duplex_type_get, _fsdk.PrintParams_duplex_type_set)
    __swig_setmethods__["is_tile_label"] = _fsdk.PrintParams_is_tile_label_set
    __swig_getmethods__["is_tile_label"] = _fsdk.PrintParams_is_tile_label_get
    if _newclass:
        is_tile_label = _swig_property(_fsdk.PrintParams_is_tile_label_get, _fsdk.PrintParams_is_tile_label_set)
    __swig_setmethods__["tile_mark"] = _fsdk.PrintParams_tile_mark_set
    __swig_getmethods__["tile_mark"] = _fsdk.PrintParams_tile_mark_get
    if _newclass:
        tile_mark = _swig_property(_fsdk.PrintParams_tile_mark_get, _fsdk.PrintParams_tile_mark_set)
    __swig_setmethods__["tile_overlap"] = _fsdk.PrintParams_tile_overlap_set
    __swig_getmethods__["tile_overlap"] = _fsdk.PrintParams_tile_overlap_get
    if _newclass:
        tile_overlap = _swig_property(_fsdk.PrintParams_tile_overlap_get, _fsdk.PrintParams_tile_overlap_set)
    __swig_setmethods__["tile_scale"] = _fsdk.PrintParams_tile_scale_set
    __swig_getmethods__["tile_scale"] = _fsdk.PrintParams_tile_scale_get
    if _newclass:
        tile_scale = _swig_property(_fsdk.PrintParams_tile_scale_get, _fsdk.PrintParams_tile_scale_set)
    __swig_setmethods__["handling"] = _fsdk.PrintParams_handling_set
    __swig_getmethods__["handling"] = _fsdk.PrintParams_handling_get
    if _newclass:
        handling = _swig_property(_fsdk.PrintParams_handling_get, _fsdk.PrintParams_handling_set)
    __swig_setmethods__["binding"] = _fsdk.PrintParams_binding_set
    __swig_getmethods__["binding"] = _fsdk.PrintParams_binding_get
    if _newclass:
        binding = _swig_property(_fsdk.PrintParams_binding_get, _fsdk.PrintParams_binding_set)
    __swig_setmethods__["booklet_duplex_mode"] = _fsdk.PrintParams_booklet_duplex_mode_set
    __swig_getmethods__["booklet_duplex_mode"] = _fsdk.PrintParams_booklet_duplex_mode_get
    if _newclass:
        booklet_duplex_mode = _swig_property(_fsdk.PrintParams_booklet_duplex_mode_get, _fsdk.PrintParams_booklet_duplex_mode_set)
    __swig_setmethods__["num_pages_h"] = _fsdk.PrintParams_num_pages_h_set
    __swig_getmethods__["num_pages_h"] = _fsdk.PrintParams_num_pages_h_get
    if _newclass:
        num_pages_h = _swig_property(_fsdk.PrintParams_num_pages_h_get, _fsdk.PrintParams_num_pages_h_set)
    __swig_setmethods__["num_pages_v"] = _fsdk.PrintParams_num_pages_v_set
    __swig_getmethods__["num_pages_v"] = _fsdk.PrintParams_num_pages_v_get
    if _newclass:
        num_pages_v = _swig_property(_fsdk.PrintParams_num_pages_v_get, _fsdk.PrintParams_num_pages_v_set)
    __swig_setmethods__["page_order"] = _fsdk.PrintParams_page_order_set
    __swig_getmethods__["page_order"] = _fsdk.PrintParams_page_order_get
    if _newclass:
        page_order = _swig_property(_fsdk.PrintParams_page_order_get, _fsdk.PrintParams_page_order_set)
    __swig_destroy__ = _fsdk.delete_PrintParams
    __del__ = lambda self: None
PrintParams_swigregister = _fsdk.PrintParams_swigregister
PrintParams_swigregister(PrintParams)

class FloatingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingInfo, name)
    __repr__ = _swig_repr
    e_WindowPositionTopLeft = _fsdk.FloatingInfo_e_WindowPositionTopLeft
    e_WindowPositionTopCenter = _fsdk.FloatingInfo_e_WindowPositionTopCenter
    e_WindowPositionTopRight = _fsdk.FloatingInfo_e_WindowPositionTopRight
    e_WindowPositionCenterLeft = _fsdk.FloatingInfo_e_WindowPositionCenterLeft
    e_WindowPositionCenter = _fsdk.FloatingInfo_e_WindowPositionCenter
    e_WindowPositionCenterRight = _fsdk.FloatingInfo_e_WindowPositionCenterRight
    e_WindowPositionBottomLeft = _fsdk.FloatingInfo_e_WindowPositionBottomLeft
    e_WindowPositionBottomCenter = _fsdk.FloatingInfo_e_WindowPositionBottomCenter
    e_WindowPositionBottomRight = _fsdk.FloatingInfo_e_WindowPositionBottomRight
    e_RelativeTargetPageWindow = _fsdk.FloatingInfo_e_RelativeTargetPageWindow
    e_RelativeTargetAppWindow = _fsdk.FloatingInfo_e_RelativeTargetAppWindow
    e_RelativeTargetDesktop = _fsdk.FloatingInfo_e_RelativeTargetDesktop
    e_RelativeTargetMonitor = _fsdk.FloatingInfo_e_RelativeTargetMonitor
    e_ResizeTypeNo = _fsdk.FloatingInfo_e_ResizeTypeNo
    e_ResizeTypeKeepRatio = _fsdk.FloatingInfo_e_ResizeTypeKeepRatio
    e_ResizeTypeYes = _fsdk.FloatingInfo_e_ResizeTypeYes
    e_OffScreenAllow = _fsdk.FloatingInfo_e_OffScreenAllow
    e_OffScreenForceOnScreen = _fsdk.FloatingInfo_e_OffScreenForceOnScreen
    e_OffScreenCancel = _fsdk.FloatingInfo_e_OffScreenCancel

    def __init__(self, *args):
        this = _fsdk.new_FloatingInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.FloatingInfo_Set(self, *args)
    __swig_setmethods__["window_pos"] = _fsdk.FloatingInfo_window_pos_set
    __swig_getmethods__["window_pos"] = _fsdk.FloatingInfo_window_pos_get
    if _newclass:
        window_pos = _swig_property(_fsdk.FloatingInfo_window_pos_get, _fsdk.FloatingInfo_window_pos_set)
    __swig_setmethods__["relative_target"] = _fsdk.FloatingInfo_relative_target_set
    __swig_getmethods__["relative_target"] = _fsdk.FloatingInfo_relative_target_get
    if _newclass:
        relative_target = _swig_property(_fsdk.FloatingInfo_relative_target_get, _fsdk.FloatingInfo_relative_target_set)
    __swig_setmethods__["resize_type"] = _fsdk.FloatingInfo_resize_type_set
    __swig_getmethods__["resize_type"] = _fsdk.FloatingInfo_resize_type_get
    if _newclass:
        resize_type = _swig_property(_fsdk.FloatingInfo_resize_type_get, _fsdk.FloatingInfo_resize_type_set)
    __swig_setmethods__["has_close"] = _fsdk.FloatingInfo_has_close_set
    __swig_getmethods__["has_close"] = _fsdk.FloatingInfo_has_close_get
    if _newclass:
        has_close = _swig_property(_fsdk.FloatingInfo_has_close_get, _fsdk.FloatingInfo_has_close_set)
    __swig_setmethods__["has_title"] = _fsdk.FloatingInfo_has_title_set
    __swig_getmethods__["has_title"] = _fsdk.FloatingInfo_has_title_get
    if _newclass:
        has_title = _swig_property(_fsdk.FloatingInfo_has_title_get, _fsdk.FloatingInfo_has_title_set)
    __swig_setmethods__["title"] = _fsdk.FloatingInfo_title_set
    __swig_getmethods__["title"] = _fsdk.FloatingInfo_title_get
    if _newclass:
        title = _swig_property(_fsdk.FloatingInfo_title_get, _fsdk.FloatingInfo_title_set)
    __swig_setmethods__["off_screen"] = _fsdk.FloatingInfo_off_screen_set
    __swig_getmethods__["off_screen"] = _fsdk.FloatingInfo_off_screen_get
    if _newclass:
        off_screen = _swig_property(_fsdk.FloatingInfo_off_screen_get, _fsdk.FloatingInfo_off_screen_set)
    __swig_setmethods__["rect"] = _fsdk.FloatingInfo_rect_set
    __swig_getmethods__["rect"] = _fsdk.FloatingInfo_rect_get
    if _newclass:
        rect = _swig_property(_fsdk.FloatingInfo_rect_get, _fsdk.FloatingInfo_rect_set)
    __swig_destroy__ = _fsdk.delete_FloatingInfo
    __del__ = lambda self: None
FloatingInfo_swigregister = _fsdk.FloatingInfo_swigregister
FloatingInfo_swigregister(FloatingInfo)

class MediaSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaSettings, name)
    __repr__ = _swig_repr
    e_PlayerWindowTypeDockedPage = _fsdk.MediaSettings_e_PlayerWindowTypeDockedPage
    e_PlayerWindowTypeFloating = _fsdk.MediaSettings_e_PlayerWindowTypeFloating
    e_PlayerWindowTypeFullScreen = _fsdk.MediaSettings_e_PlayerWindowTypeFullScreen

    def __init__(self, *args):
        this = _fsdk.new_MediaSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.MediaSettings_Set(self, *args)
    __swig_setmethods__["auto_play"] = _fsdk.MediaSettings_auto_play_set
    __swig_getmethods__["auto_play"] = _fsdk.MediaSettings_auto_play_get
    if _newclass:
        auto_play = _swig_property(_fsdk.MediaSettings_auto_play_get, _fsdk.MediaSettings_auto_play_set)
    __swig_setmethods__["base_url"] = _fsdk.MediaSettings_base_url_set
    __swig_getmethods__["base_url"] = _fsdk.MediaSettings_base_url_get
    if _newclass:
        base_url = _swig_property(_fsdk.MediaSettings_base_url_get, _fsdk.MediaSettings_base_url_set)
    __swig_setmethods__["bg_color"] = _fsdk.MediaSettings_bg_color_set
    __swig_getmethods__["bg_color"] = _fsdk.MediaSettings_bg_color_get
    if _newclass:
        bg_color = _swig_property(_fsdk.MediaSettings_bg_color_get, _fsdk.MediaSettings_bg_color_set)
    __swig_setmethods__["bg_opacity"] = _fsdk.MediaSettings_bg_opacity_set
    __swig_getmethods__["bg_opacity"] = _fsdk.MediaSettings_bg_opacity_get
    if _newclass:
        bg_opacity = _swig_property(_fsdk.MediaSettings_bg_opacity_get, _fsdk.MediaSettings_bg_opacity_set)
    __swig_setmethods__["duration"] = _fsdk.MediaSettings_duration_set
    __swig_getmethods__["duration"] = _fsdk.MediaSettings_duration_get
    if _newclass:
        duration = _swig_property(_fsdk.MediaSettings_duration_get, _fsdk.MediaSettings_duration_set)
    __swig_setmethods__["page"] = _fsdk.MediaSettings_page_set
    __swig_getmethods__["page"] = _fsdk.MediaSettings_page_get
    if _newclass:
        page = _swig_property(_fsdk.MediaSettings_page_get, _fsdk.MediaSettings_page_set)
    __swig_setmethods__["repeat"] = _fsdk.MediaSettings_repeat_set
    __swig_getmethods__["repeat"] = _fsdk.MediaSettings_repeat_get
    if _newclass:
        repeat = _swig_property(_fsdk.MediaSettings_repeat_get, _fsdk.MediaSettings_repeat_set)
    __swig_setmethods__["show_ui"] = _fsdk.MediaSettings_show_ui_set
    __swig_getmethods__["show_ui"] = _fsdk.MediaSettings_show_ui_get
    if _newclass:
        show_ui = _swig_property(_fsdk.MediaSettings_show_ui_get, _fsdk.MediaSettings_show_ui_set)
    __swig_setmethods__["is_visible"] = _fsdk.MediaSettings_is_visible_set
    __swig_getmethods__["is_visible"] = _fsdk.MediaSettings_is_visible_get
    if _newclass:
        is_visible = _swig_property(_fsdk.MediaSettings_is_visible_get, _fsdk.MediaSettings_is_visible_set)
    __swig_setmethods__["volume"] = _fsdk.MediaSettings_volume_set
    __swig_getmethods__["volume"] = _fsdk.MediaSettings_volume_get
    if _newclass:
        volume = _swig_property(_fsdk.MediaSettings_volume_get, _fsdk.MediaSettings_volume_set)
    __swig_setmethods__["window_type"] = _fsdk.MediaSettings_window_type_set
    __swig_getmethods__["window_type"] = _fsdk.MediaSettings_window_type_get
    if _newclass:
        window_type = _swig_property(_fsdk.MediaSettings_window_type_get, _fsdk.MediaSettings_window_type_set)
    __swig_setmethods__["floating_wnd_info"] = _fsdk.MediaSettings_floating_wnd_info_set
    __swig_getmethods__["floating_wnd_info"] = _fsdk.MediaSettings_floating_wnd_info_get
    if _newclass:
        floating_wnd_info = _swig_property(_fsdk.MediaSettings_floating_wnd_info_get, _fsdk.MediaSettings_floating_wnd_info_set)
    __swig_destroy__ = _fsdk.delete_MediaSettings
    __del__ = lambda self: None
MediaSettings_swigregister = _fsdk.MediaSettings_swigregister
MediaSettings_swigregister(MediaSettings)

class PlayerArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerArgs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PlayerArgs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PlayerArgs_Set(self, *args)
    __swig_setmethods__["doc"] = _fsdk.PlayerArgs_doc_set
    __swig_getmethods__["doc"] = _fsdk.PlayerArgs_doc_get
    if _newclass:
        doc = _swig_property(_fsdk.PlayerArgs_doc_get, _fsdk.PlayerArgs_doc_set)
    __swig_setmethods__["screen_annot"] = _fsdk.PlayerArgs_screen_annot_set
    __swig_getmethods__["screen_annot"] = _fsdk.PlayerArgs_screen_annot_get
    if _newclass:
        screen_annot = _swig_property(_fsdk.PlayerArgs_screen_annot_get, _fsdk.PlayerArgs_screen_annot_set)
    __swig_setmethods__["rendition"] = _fsdk.PlayerArgs_rendition_set
    __swig_getmethods__["rendition"] = _fsdk.PlayerArgs_rendition_get
    if _newclass:
        rendition = _swig_property(_fsdk.PlayerArgs_rendition_get, _fsdk.PlayerArgs_rendition_set)
    __swig_setmethods__["URL"] = _fsdk.PlayerArgs_URL_set
    __swig_getmethods__["URL"] = _fsdk.PlayerArgs_URL_get
    if _newclass:
        URL = _swig_property(_fsdk.PlayerArgs_URL_get, _fsdk.PlayerArgs_URL_set)
    __swig_setmethods__["audio_format"] = _fsdk.PlayerArgs_audio_format_set
    __swig_getmethods__["audio_format"] = _fsdk.PlayerArgs_audio_format_get
    if _newclass:
        audio_format = _swig_property(_fsdk.PlayerArgs_audio_format_get, _fsdk.PlayerArgs_audio_format_set)
    __swig_setmethods__["player_settings"] = _fsdk.PlayerArgs_player_settings_set
    __swig_getmethods__["player_settings"] = _fsdk.PlayerArgs_player_settings_get
    if _newclass:
        player_settings = _swig_property(_fsdk.PlayerArgs_player_settings_get, _fsdk.PlayerArgs_player_settings_set)
    __swig_destroy__ = _fsdk.delete_PlayerArgs
    __del__ = lambda self: None
PlayerArgs_swigregister = _fsdk.PlayerArgs_swigregister
PlayerArgs_swigregister(PlayerArgs)

class SearchOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchOption, name)
    __repr__ = _swig_repr
    e_WordMatchingMatchPhrase = _fsdk.SearchOption_e_WordMatchingMatchPhrase
    e_WordMatchingMatchAllWords = _fsdk.SearchOption_e_WordMatchingMatchAllWords
    e_WordMatchingMatchAnyWord = _fsdk.SearchOption_e_WordMatchingMatchAnyWord

    def __init__(self, *args):
        this = _fsdk.new_SearchOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SearchOption_Set(self, *args)
    __swig_setmethods__["is_whole_word"] = _fsdk.SearchOption_is_whole_word_set
    __swig_getmethods__["is_whole_word"] = _fsdk.SearchOption_is_whole_word_get
    if _newclass:
        is_whole_word = _swig_property(_fsdk.SearchOption_is_whole_word_get, _fsdk.SearchOption_is_whole_word_set)
    __swig_setmethods__["is_case_sensitive"] = _fsdk.SearchOption_is_case_sensitive_set
    __swig_getmethods__["is_case_sensitive"] = _fsdk.SearchOption_is_case_sensitive_get
    if _newclass:
        is_case_sensitive = _swig_property(_fsdk.SearchOption_is_case_sensitive_get, _fsdk.SearchOption_is_case_sensitive_set)
    __swig_setmethods__["is_search_bookmarks"] = _fsdk.SearchOption_is_search_bookmarks_set
    __swig_getmethods__["is_search_bookmarks"] = _fsdk.SearchOption_is_search_bookmarks_get
    if _newclass:
        is_search_bookmarks = _swig_property(_fsdk.SearchOption_is_search_bookmarks_get, _fsdk.SearchOption_is_search_bookmarks_set)
    __swig_setmethods__["is_search_in_markup"] = _fsdk.SearchOption_is_search_in_markup_set
    __swig_getmethods__["is_search_in_markup"] = _fsdk.SearchOption_is_search_in_markup_get
    if _newclass:
        is_search_in_markup = _swig_property(_fsdk.SearchOption_is_search_in_markup_get, _fsdk.SearchOption_is_search_in_markup_set)
    __swig_setmethods__["is_search_in_attachments"] = _fsdk.SearchOption_is_search_in_attachments_set
    __swig_getmethods__["is_search_in_attachments"] = _fsdk.SearchOption_is_search_in_attachments_get
    if _newclass:
        is_search_in_attachments = _swig_property(_fsdk.SearchOption_is_search_in_attachments_get, _fsdk.SearchOption_is_search_in_attachments_set)
    __swig_setmethods__["is_ignore_accents"] = _fsdk.SearchOption_is_ignore_accents_set
    __swig_getmethods__["is_ignore_accents"] = _fsdk.SearchOption_is_ignore_accents_get
    if _newclass:
        is_ignore_accents = _swig_property(_fsdk.SearchOption_is_ignore_accents_get, _fsdk.SearchOption_is_ignore_accents_set)
    __swig_setmethods__["is_proximity"] = _fsdk.SearchOption_is_proximity_set
    __swig_getmethods__["is_proximity"] = _fsdk.SearchOption_is_proximity_get
    if _newclass:
        is_proximity = _swig_property(_fsdk.SearchOption_is_proximity_get, _fsdk.SearchOption_is_proximity_set)
    __swig_setmethods__["is_stemming"] = _fsdk.SearchOption_is_stemming_set
    __swig_getmethods__["is_stemming"] = _fsdk.SearchOption_is_stemming_get
    if _newclass:
        is_stemming = _swig_property(_fsdk.SearchOption_is_stemming_get, _fsdk.SearchOption_is_stemming_set)
    __swig_setmethods__["is_ignore_full_width"] = _fsdk.SearchOption_is_ignore_full_width_set
    __swig_getmethods__["is_ignore_full_width"] = _fsdk.SearchOption_is_ignore_full_width_get
    if _newclass:
        is_ignore_full_width = _swig_property(_fsdk.SearchOption_is_ignore_full_width_get, _fsdk.SearchOption_is_ignore_full_width_set)
    __swig_setmethods__["max_docs"] = _fsdk.SearchOption_max_docs_set
    __swig_getmethods__["max_docs"] = _fsdk.SearchOption_max_docs_get
    if _newclass:
        max_docs = _swig_property(_fsdk.SearchOption_max_docs_get, _fsdk.SearchOption_max_docs_set)
    __swig_setmethods__["word_matching"] = _fsdk.SearchOption_word_matching_set
    __swig_getmethods__["word_matching"] = _fsdk.SearchOption_word_matching_get
    if _newclass:
        word_matching = _swig_property(_fsdk.SearchOption_word_matching_get, _fsdk.SearchOption_word_matching_set)
    __swig_setmethods__["is_search_doc_text"] = _fsdk.SearchOption_is_search_doc_text_set
    __swig_getmethods__["is_search_doc_text"] = _fsdk.SearchOption_is_search_doc_text_get
    if _newclass:
        is_search_doc_text = _swig_property(_fsdk.SearchOption_is_search_doc_text_get, _fsdk.SearchOption_is_search_doc_text_set)
    __swig_destroy__ = _fsdk.delete_SearchOption
    __del__ = lambda self: None
SearchOption_swigregister = _fsdk.SearchOption_swigregister
SearchOption_swigregister(SearchOption)

class SearchIndexConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchIndexConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchIndexConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SearchIndexConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SearchIndexConfig_Set(self, *args)
    __swig_setmethods__["name"] = _fsdk.SearchIndexConfig_name_set
    __swig_getmethods__["name"] = _fsdk.SearchIndexConfig_name_get
    if _newclass:
        name = _swig_property(_fsdk.SearchIndexConfig_name_get, _fsdk.SearchIndexConfig_name_set)
    __swig_setmethods__["is_available"] = _fsdk.SearchIndexConfig_is_available_set
    __swig_getmethods__["is_available"] = _fsdk.SearchIndexConfig_is_available_get
    if _newclass:
        is_available = _swig_property(_fsdk.SearchIndexConfig_is_available_get, _fsdk.SearchIndexConfig_is_available_set)
    __swig_setmethods__["path"] = _fsdk.SearchIndexConfig_path_set
    __swig_getmethods__["path"] = _fsdk.SearchIndexConfig_path_get
    if _newclass:
        path = _swig_property(_fsdk.SearchIndexConfig_path_get, _fsdk.SearchIndexConfig_path_set)
    __swig_setmethods__["is_selected"] = _fsdk.SearchIndexConfig_is_selected_set
    __swig_getmethods__["is_selected"] = _fsdk.SearchIndexConfig_is_selected_get
    if _newclass:
        is_selected = _swig_property(_fsdk.SearchIndexConfig_is_selected_get, _fsdk.SearchIndexConfig_is_selected_set)
    __swig_destroy__ = _fsdk.delete_SearchIndexConfig
    __del__ = lambda self: None
SearchIndexConfig_swigregister = _fsdk.SearchIndexConfig_swigregister
SearchIndexConfig_swigregister(SearchIndexConfig)

class MediaPlayerCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaPlayerCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaPlayerCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    e_JSMediaPlayerStateOpen = _fsdk.MediaPlayerCallback_e_JSMediaPlayerStateOpen
    e_JSMediaPlayerStateClose = _fsdk.MediaPlayerCallback_e_JSMediaPlayerStateClose
    e_JSMediaPlayerStatePlaying = _fsdk.MediaPlayerCallback_e_JSMediaPlayerStatePlaying
    e_JSMediaPlayerStateStop = _fsdk.MediaPlayerCallback_e_JSMediaPlayerStateStop
    e_JSMediaPlayerStateSuspend = _fsdk.MediaPlayerCallback_e_JSMediaPlayerStateSuspend

    def Release(self, *args):
        return _fsdk.MediaPlayerCallback_Release(self, *args)

    def Play(self, *args):
        return _fsdk.MediaPlayerCallback_Play(self, *args)

    def Close(self, *args):
        return _fsdk.MediaPlayerCallback_Close(self, *args)

    def Stop(self, *args):
        return _fsdk.MediaPlayerCallback_Stop(self, *args)

    def Seek(self, *args):
        return _fsdk.MediaPlayerCallback_Seek(self, *args)

    def GetState(self, *args):
        return _fsdk.MediaPlayerCallback_GetState(self, *args)

    def GetPlayerSettings(self, *args):
        return _fsdk.MediaPlayerCallback_GetPlayerSettings(self, *args)
MediaPlayerCallback_swigregister = _fsdk.MediaPlayerCallback_swigregister
MediaPlayerCallback_swigregister(MediaPlayerCallback)

class ActionCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionCallback, name)
    __repr__ = _swig_repr
    e_LanguageUnknown = _fsdk.ActionCallback_e_LanguageUnknown
    e_LanguageCHS = _fsdk.ActionCallback_e_LanguageCHS
    e_LanguageCHT = _fsdk.ActionCallback_e_LanguageCHT
    e_LanguageDAN = _fsdk.ActionCallback_e_LanguageDAN
    e_LanguageDEU = _fsdk.ActionCallback_e_LanguageDEU
    e_LanguageENU = _fsdk.ActionCallback_e_LanguageENU
    e_LanguageESP = _fsdk.ActionCallback_e_LanguageESP
    e_LanguageFRA = _fsdk.ActionCallback_e_LanguageFRA
    e_LanguageITA = _fsdk.ActionCallback_e_LanguageITA
    e_LanguageKOR = _fsdk.ActionCallback_e_LanguageKOR
    e_LanguageJPN = _fsdk.ActionCallback_e_LanguageJPN
    e_LanguageNLD = _fsdk.ActionCallback_e_LanguageNLD
    e_LanguageNOR = _fsdk.ActionCallback_e_LanguageNOR
    e_LanguagePTB = _fsdk.ActionCallback_e_LanguagePTB
    e_LanguageSUO = _fsdk.ActionCallback_e_LanguageSUO
    e_LanguageSVE = _fsdk.ActionCallback_e_LanguageSVE
    e_AppInfoTypeFormsVersion = _fsdk.ActionCallback_e_AppInfoTypeFormsVersion
    e_AppInfoTypeViewerType = _fsdk.ActionCallback_e_AppInfoTypeViewerType
    e_AppInfoTypeViewerVariation = _fsdk.ActionCallback_e_AppInfoTypeViewerVariation
    e_AppInfoTypeViewerVersion = _fsdk.ActionCallback_e_AppInfoTypeViewerVersion
    e_AppInfoTypeAppVersion = _fsdk.ActionCallback_e_AppInfoTypeAppVersion
    e_MailTypeDoc = _fsdk.ActionCallback_e_MailTypeDoc
    e_MailTypeForm = _fsdk.ActionCallback_e_MailTypeForm
    e_MailTypeMsg = _fsdk.ActionCallback_e_MailTypeMsg
    e_JSFieldValueChangedByFormat = _fsdk.ActionCallback_e_JSFieldValueChangedByFormat
    e_JSFieldValueChangedByCalculation = _fsdk.ActionCallback_e_JSFieldValueChangedByCalculation
    e_JSFieldValueChangedBySetValue = _fsdk.ActionCallback_e_JSFieldValueChangedBySetValue
    e_JSFieldValueChangedBySetReadOnly = _fsdk.ActionCallback_e_JSFieldValueChangedBySetReadOnly
    e_JSFieldValueChangedByFillColor = _fsdk.ActionCallback_e_JSFieldValueChangedByFillColor
    e_JSMediaPlayerStateOpen = _fsdk.ActionCallback_e_JSMediaPlayerStateOpen
    e_JSMediaPlayerStateClose = _fsdk.ActionCallback_e_JSMediaPlayerStateClose
    e_JSMediaPlayerStatePlaying = _fsdk.ActionCallback_e_JSMediaPlayerStatePlaying
    e_JSMediaPlayerStateStop = _fsdk.ActionCallback_e_JSMediaPlayerStateStop
    e_JSMediaPlayerStateSuspend = _fsdk.ActionCallback_e_JSMediaPlayerStateSuspend
    e_LayoutModeSinglePage = _fsdk.ActionCallback_e_LayoutModeSinglePage
    e_LayoutModeContinuous = _fsdk.ActionCallback_e_LayoutModeContinuous
    e_LayoutModeFacing = _fsdk.ActionCallback_e_LayoutModeFacing
    e_LayoutModeContinuousFacing = _fsdk.ActionCallback_e_LayoutModeContinuousFacing
    e_JSMailResultFailed = _fsdk.ActionCallback_e_JSMailResultFailed
    e_JSMailResultSuccess = _fsdk.ActionCallback_e_JSMailResultSuccess
    e_JSMailResultUserAbort = _fsdk.ActionCallback_e_JSMailResultUserAbort
    e_SearchScopeActiveDoc = _fsdk.ActionCallback_e_SearchScopeActiveDoc
    e_SearchScopeFolder = _fsdk.ActionCallback_e_SearchScopeFolder
    e_SearchScopeIndex = _fsdk.ActionCallback_e_SearchScopeIndex
    e_SearchScopeActiveIndexes = _fsdk.ActionCallback_e_SearchScopeActiveIndexes

    def Release(self, *args):
        return _fsdk.ActionCallback_Release(self, *args)

    def InvalidateRect(self, *args):
        return _fsdk.ActionCallback_InvalidateRect(self, *args)

    def GetCurrentPage(self, *args):
        return _fsdk.ActionCallback_GetCurrentPage(self, *args)

    def SetCurrentPage(self, *args):
        return _fsdk.ActionCallback_SetCurrentPage(self, *args)

    def GetPageRotation(self, *args):
        return _fsdk.ActionCallback_GetPageRotation(self, *args)

    def SetPageRotation(self, *args):
        return _fsdk.ActionCallback_SetPageRotation(self, *args)

    def ExecuteNamedAction(self, *args):
        return _fsdk.ActionCallback_ExecuteNamedAction(self, *args)

    def SetDocChangeMark(self, *args):
        return _fsdk.ActionCallback_SetDocChangeMark(self, *args)

    def GetDocChangeMark(self, *args):
        return _fsdk.ActionCallback_GetDocChangeMark(self, *args)

    def GetOpenedDocCount(self, *args):
        return _fsdk.ActionCallback_GetOpenedDocCount(self, *args)

    def GetOpenedDoc(self, *args):
        return _fsdk.ActionCallback_GetOpenedDoc(self, *args)

    def GetCurrentDoc(self, *args):
        return _fsdk.ActionCallback_GetCurrentDoc(self, *args)

    def CreateBlankDoc(self, *args):
        return _fsdk.ActionCallback_CreateBlankDoc(self, *args)

    def CloseDoc(self, *args):
        return _fsdk.ActionCallback_CloseDoc(self, *args)

    def OpenDoc(self, *args):
        return _fsdk.ActionCallback_OpenDoc(self, *args)

    def Beep(self, *args):
        return _fsdk.ActionCallback_Beep(self, *args)

    def Response(self, *args):
        return _fsdk.ActionCallback_Response(self, *args)

    def GetFilePath(self, *args):
        return _fsdk.ActionCallback_GetFilePath(self, *args)

    def IsLocalFile(self, *args):
        return _fsdk.ActionCallback_IsLocalFile(self, *args)

    def GetAttachmentsFilePath(self, *args):
        return _fsdk.ActionCallback_GetAttachmentsFilePath(self, *args)

    def GetExtractedEmbeddedFilePath(self, *args):
        return _fsdk.ActionCallback_GetExtractedEmbeddedFilePath(self, *args)

    def Print(self, *args):
        return _fsdk.ActionCallback_Print(self, *args)

    def SubmitForm(self, *args):
        return _fsdk.ActionCallback_SubmitForm(self, *args)

    def LaunchURL(self, *args):
        return _fsdk.ActionCallback_LaunchURL(self, *args)

    def BrowseFile(self, *args):
        return _fsdk.ActionCallback_BrowseFile(self, *args)

    def GetLanguage(self, *args):
        return _fsdk.ActionCallback_GetLanguage(self, *args)

    def Alert(self, *args):
        return _fsdk.ActionCallback_Alert(self, *args)

    def GetIdentityProperties(self, *args):
        return _fsdk.ActionCallback_GetIdentityProperties(self, *args)

    def SetIdentityProperties(self, *args):
        return _fsdk.ActionCallback_SetIdentityProperties(self, *args)

    def PopupMenu(self, *args):
        return _fsdk.ActionCallback_PopupMenu(self, *args)

    def PopupMenuEx(self, *args):
        return _fsdk.ActionCallback_PopupMenuEx(self, *args)

    def GetAppInfo(self, *args):
        return _fsdk.ActionCallback_GetAppInfo(self, *args)

    def MailData(self, *args):
        return _fsdk.ActionCallback_MailData(self, *args)

    def VerifySignature(self, *args):
        return _fsdk.ActionCallback_VerifySignature(self, *args)

    def GetUntitledBookmarkName(self, *args):
        return _fsdk.ActionCallback_GetUntitledBookmarkName(self, *args)

    def GetPrinterNameList(self, *args):
        return _fsdk.ActionCallback_GetPrinterNameList(self, *args)

    def AddToolButton(self, *args):
        return _fsdk.ActionCallback_AddToolButton(self, *args)

    def RemoveToolButtom(self, *args):
        return _fsdk.ActionCallback_RemoveToolButtom(self, *args)

    def GetMenuItemNameList(self, *args):
        return _fsdk.ActionCallback_GetMenuItemNameList(self, *args)

    def AddMenuItem(self, *args):
        return _fsdk.ActionCallback_AddMenuItem(self, *args)

    def AddSubMenu(self, *args):
        return _fsdk.ActionCallback_AddSubMenu(self, *args)

    def ShowDialog(self, *args):
        return _fsdk.ActionCallback_ShowDialog(self, *args)

    def GetFullScreen(self, *args):
        return _fsdk.ActionCallback_GetFullScreen(self, *args)

    def SetFullScreen(self, *args):
        return _fsdk.ActionCallback_SetFullScreen(self, *args)

    def OnFieldValueChanged(self, *args):
        return _fsdk.ActionCallback_OnFieldValueChanged(self, *args)

    def UpdateLogicalLabel(self, *args):
        return _fsdk.ActionCallback_UpdateLogicalLabel(self, *args)

    def MailDoc(self, *args):
        return _fsdk.ActionCallback_MailDoc(self, *args)

    def GetTemporaryFileName(self, *args):
        return _fsdk.ActionCallback_GetTemporaryFileName(self, *args)

    def OpenMediaPlayer(self, *args):
        return _fsdk.ActionCallback_OpenMediaPlayer(self, *args)

    def GetTemporaryDirectory(self, *args):
        return _fsdk.ActionCallback_GetTemporaryDirectory(self, *args)

    def Scroll(self, *args):
        return _fsdk.ActionCallback_Scroll(self, *args)

    def SelectPageNthWord(self, *args):
        return _fsdk.ActionCallback_SelectPageNthWord(self, *args)

    def GetMousePosition(self, *args):
        return _fsdk.ActionCallback_GetMousePosition(self, *args)

    def GetPageWindowRect(self, *args):
        return _fsdk.ActionCallback_GetPageWindowRect(self, *args)

    def GetLayoutMode(self, *args):
        return _fsdk.ActionCallback_GetLayoutMode(self, *args)

    def SetLayoutMode(self, *args):
        return _fsdk.ActionCallback_SetLayoutMode(self, *args)

    def GetPageScale(self, *args):
        return _fsdk.ActionCallback_GetPageScale(self, *args)

    def SetPageScale(self, *args):
        return _fsdk.ActionCallback_SetPageScale(self, *args)

    def GetPageZoomMode(self, *args):
        return _fsdk.ActionCallback_GetPageZoomMode(self, *args)

    def Query(self, *args):
        return _fsdk.ActionCallback_Query(self, *args)

    def AddSearchIndex(self, *args):
        return _fsdk.ActionCallback_AddSearchIndex(self, *args)

    def RemoveSearchIndex(self, *args):
        return _fsdk.ActionCallback_RemoveSearchIndex(self, *args)

    def GetSignatureAPStyleNameList(self, *args):
        return _fsdk.ActionCallback_GetSignatureAPStyleNameList(self, *args)

    def SoapRequest(self, *args):
        return _fsdk.ActionCallback_SoapRequest(self, *args)

    def EnablePageLoop(self, *args):
        return _fsdk.ActionCallback_EnablePageLoop(self, *args)

    def IsPageLoop(self, *args):
        return _fsdk.ActionCallback_IsPageLoop(self, *args)

    def SetDefaultPageTransitionMode(self, *args):
        return _fsdk.ActionCallback_SetDefaultPageTransitionMode(self, *args)

    def IsCurrentDocOpenedInBrowser(self, *args):
        return _fsdk.ActionCallback_IsCurrentDocOpenedInBrowser(self, *args)

    def PostMessageToHtml(self, *args):
        return _fsdk.ActionCallback_PostMessageToHtml(self, *args)

    def __init__(self, *args):
        if self.__class__ == ActionCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_ActionCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_ActionCallback(self)
        return weakref_proxy(self)
ActionCallback_swigregister = _fsdk.ActionCallback_swigregister
ActionCallback_swigregister(ActionCallback)

class Destination(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Destination, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Destination, name)
    __repr__ = _swig_repr
    e_ZoomXYZ = _fsdk.Destination_e_ZoomXYZ
    e_ZoomFitPage = _fsdk.Destination_e_ZoomFitPage
    e_ZoomFitHorz = _fsdk.Destination_e_ZoomFitHorz
    e_ZoomFitVert = _fsdk.Destination_e_ZoomFitVert
    e_ZoomFitRect = _fsdk.Destination_e_ZoomFitRect
    e_ZoomFitBBox = _fsdk.Destination_e_ZoomFitBBox
    e_ZoomFitBHorz = _fsdk.Destination_e_ZoomFitBHorz
    e_ZoomFitBVert = _fsdk.Destination_e_ZoomFitBVert
    if _newclass:
        CreateXYZ = staticmethod(_fsdk.Destination_CreateXYZ)
    else:
        CreateXYZ = _fsdk.Destination_CreateXYZ
    if _newclass:
        CreateFitPage = staticmethod(_fsdk.Destination_CreateFitPage)
    else:
        CreateFitPage = _fsdk.Destination_CreateFitPage
    if _newclass:
        CreateFitHorz = staticmethod(_fsdk.Destination_CreateFitHorz)
    else:
        CreateFitHorz = _fsdk.Destination_CreateFitHorz
    if _newclass:
        CreateFitVert = staticmethod(_fsdk.Destination_CreateFitVert)
    else:
        CreateFitVert = _fsdk.Destination_CreateFitVert
    if _newclass:
        CreateFitRect = staticmethod(_fsdk.Destination_CreateFitRect)
    else:
        CreateFitRect = _fsdk.Destination_CreateFitRect
    if _newclass:
        CreateFitBBox = staticmethod(_fsdk.Destination_CreateFitBBox)
    else:
        CreateFitBBox = _fsdk.Destination_CreateFitBBox
    if _newclass:
        CreateFitBHorz = staticmethod(_fsdk.Destination_CreateFitBHorz)
    else:
        CreateFitBHorz = _fsdk.Destination_CreateFitBHorz
    if _newclass:
        CreateFitBVert = staticmethod(_fsdk.Destination_CreateFitBVert)
    else:
        CreateFitBVert = _fsdk.Destination_CreateFitBVert
    if _newclass:
        CreateFromPDFArray = staticmethod(_fsdk.Destination_CreateFromPDFArray)
    else:
        CreateFromPDFArray = _fsdk.Destination_CreateFromPDFArray
    __swig_destroy__ = _fsdk.delete_Destination
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Destination(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Destination___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Destination___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Destination_IsEmpty(self, *args)

    def GetPageIndex(self, *args):
        return _fsdk.Destination_GetPageIndex(self, *args)

    def GetZoomMode(self, *args):
        return _fsdk.Destination_GetZoomMode(self, *args)

    def GetLeft(self, *args):
        return _fsdk.Destination_GetLeft(self, *args)

    def IsLeftNull(self, *args):
        return _fsdk.Destination_IsLeftNull(self, *args)

    def GetTop(self, *args):
        return _fsdk.Destination_GetTop(self, *args)

    def IsTopNull(self, *args):
        return _fsdk.Destination_IsTopNull(self, *args)

    def GetRight(self, *args):
        return _fsdk.Destination_GetRight(self, *args)

    def GetBottom(self, *args):
        return _fsdk.Destination_GetBottom(self, *args)

    def GetZoomFactor(self, *args):
        return _fsdk.Destination_GetZoomFactor(self, *args)

    def GetDestArray(self, *args):
        return _fsdk.Destination_GetDestArray(self, *args)
Destination_swigregister = _fsdk.Destination_swigregister
Destination_swigregister(Destination)

def Destination_CreateXYZ(*args):
    return _fsdk.Destination_CreateXYZ(*args)
Destination_CreateXYZ = _fsdk.Destination_CreateXYZ

def Destination_CreateFitPage(*args):
    return _fsdk.Destination_CreateFitPage(*args)
Destination_CreateFitPage = _fsdk.Destination_CreateFitPage

def Destination_CreateFitHorz(*args):
    return _fsdk.Destination_CreateFitHorz(*args)
Destination_CreateFitHorz = _fsdk.Destination_CreateFitHorz

def Destination_CreateFitVert(*args):
    return _fsdk.Destination_CreateFitVert(*args)
Destination_CreateFitVert = _fsdk.Destination_CreateFitVert

def Destination_CreateFitRect(*args):
    return _fsdk.Destination_CreateFitRect(*args)
Destination_CreateFitRect = _fsdk.Destination_CreateFitRect

def Destination_CreateFitBBox(*args):
    return _fsdk.Destination_CreateFitBBox(*args)
Destination_CreateFitBBox = _fsdk.Destination_CreateFitBBox

def Destination_CreateFitBHorz(*args):
    return _fsdk.Destination_CreateFitBHorz(*args)
Destination_CreateFitBHorz = _fsdk.Destination_CreateFitBHorz

def Destination_CreateFitBVert(*args):
    return _fsdk.Destination_CreateFitBVert(*args)
Destination_CreateFitBVert = _fsdk.Destination_CreateFitBVert

def Destination_CreateFromPDFArray(*args):
    return _fsdk.Destination_CreateFromPDFArray(*args)
Destination_CreateFromPDFArray = _fsdk.Destination_CreateFromPDFArray

class Action(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    e_TypeUnknown = _fsdk.Action_e_TypeUnknown
    e_TypeGoto = _fsdk.Action_e_TypeGoto
    e_TypeGoToR = _fsdk.Action_e_TypeGoToR
    e_TypeGoToE = _fsdk.Action_e_TypeGoToE
    e_TypeLaunch = _fsdk.Action_e_TypeLaunch
    e_TypeThread = _fsdk.Action_e_TypeThread
    e_TypeURI = _fsdk.Action_e_TypeURI
    e_TypeSound = _fsdk.Action_e_TypeSound
    e_TypeMovie = _fsdk.Action_e_TypeMovie
    e_TypeHide = _fsdk.Action_e_TypeHide
    e_TypeNamed = _fsdk.Action_e_TypeNamed
    e_TypeSubmitForm = _fsdk.Action_e_TypeSubmitForm
    e_TypeResetForm = _fsdk.Action_e_TypeResetForm
    e_TypeImportData = _fsdk.Action_e_TypeImportData
    e_TypeJavaScript = _fsdk.Action_e_TypeJavaScript
    e_TypeSetOCGState = _fsdk.Action_e_TypeSetOCGState
    e_TypeRendition = _fsdk.Action_e_TypeRendition
    e_TypeTrans = _fsdk.Action_e_TypeTrans
    e_TypeGoTo3DView = _fsdk.Action_e_TypeGoTo3DView
    e_NewWindowFlagFalse = _fsdk.Action_e_NewWindowFlagFalse
    e_NewWindowFlagTrue = _fsdk.Action_e_NewWindowFlagTrue
    e_NewWindowFlagNone = _fsdk.Action_e_NewWindowFlagNone
    if _newclass:
        Create = staticmethod(_fsdk.Action_Create)
    else:
        Create = _fsdk.Action_Create

    def __init__(self, *args):
        this = _fsdk.new_Action(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Action
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Action___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Action___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Action_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.Action_GetType(self, *args)

    def GetDocument(self, *args):
        return _fsdk.Action_GetDocument(self, *args)

    def GetDict(self, *args):
        return _fsdk.Action_GetDict(self, *args)

    def GetSubActionCount(self, *args):
        return _fsdk.Action_GetSubActionCount(self, *args)

    def GetSubAction(self, *args):
        return _fsdk.Action_GetSubAction(self, *args)

    def SetSubAction(self, *args):
        return _fsdk.Action_SetSubAction(self, *args)

    def InsertSubAction(self, *args):
        return _fsdk.Action_InsertSubAction(self, *args)

    def RemoveSubAction(self, *args):
        return _fsdk.Action_RemoveSubAction(self, *args)

    def RemoveAllSubActions(self, *args):
        return _fsdk.Action_RemoveAllSubActions(self, *args)
Action_swigregister = _fsdk.Action_swigregister
Action_swigregister(Action)

def Action_Create(*args):
    return _fsdk.Action_Create(*args)
Action_Create = _fsdk.Action_Create

class GotoAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GotoAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GotoAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_GotoAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetDestination(self, *args):
        return _fsdk.GotoAction_GetDestination(self, *args)

    def SetDestination(self, *args):
        return _fsdk.GotoAction_SetDestination(self, *args)
    __swig_destroy__ = _fsdk.delete_GotoAction
    __del__ = lambda self: None
GotoAction_swigregister = _fsdk.GotoAction_swigregister
GotoAction_swigregister(GotoAction)

class URIAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, URIAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, URIAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_URIAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetURI(self, *args):
        return _fsdk.URIAction_GetURI(self, *args)

    def SetURI(self, *args):
        return _fsdk.URIAction_SetURI(self, *args)

    def IsTrackPosition(self, *args):
        return _fsdk.URIAction_IsTrackPosition(self, *args)

    def SetTrackPositionFlag(self, *args):
        return _fsdk.URIAction_SetTrackPositionFlag(self, *args)
    __swig_destroy__ = _fsdk.delete_URIAction
    __del__ = lambda self: None
URIAction_swigregister = _fsdk.URIAction_swigregister
URIAction_swigregister(URIAction)

class JavaScriptAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JavaScriptAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JavaScriptAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_JavaScriptAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetScript(self, *args):
        return _fsdk.JavaScriptAction_GetScript(self, *args)

    def SetScript(self, *args):
        return _fsdk.JavaScriptAction_SetScript(self, *args)
    __swig_destroy__ = _fsdk.delete_JavaScriptAction
    __del__ = lambda self: None
JavaScriptAction_swigregister = _fsdk.JavaScriptAction_swigregister
JavaScriptAction_swigregister(JavaScriptAction)

class NamedAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamedAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_NamedAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetName(self, *args):
        return _fsdk.NamedAction_GetName(self, *args)

    def SetName(self, *args):
        return _fsdk.NamedAction_SetName(self, *args)
    __swig_destroy__ = _fsdk.delete_NamedAction
    __del__ = lambda self: None
NamedAction_swigregister = _fsdk.NamedAction_swigregister
NamedAction_swigregister(NamedAction)

class RemoteGotoAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteGotoAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RemoteGotoAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RemoteGotoAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetDestination(self, *args):
        return _fsdk.RemoteGotoAction_GetDestination(self, *args)

    def SetDestination(self, *args):
        return _fsdk.RemoteGotoAction_SetDestination(self, *args)

    def GetDestinationName(self, *args):
        return _fsdk.RemoteGotoAction_GetDestinationName(self, *args)

    def SetDestinationName(self, *args):
        return _fsdk.RemoteGotoAction_SetDestinationName(self, *args)

    def GetFileSpec(self, *args):
        return _fsdk.RemoteGotoAction_GetFileSpec(self, *args)

    def SetFileSpec(self, *args):
        return _fsdk.RemoteGotoAction_SetFileSpec(self, *args)

    def GetNewWindowFlag(self, *args):
        return _fsdk.RemoteGotoAction_GetNewWindowFlag(self, *args)

    def SetNewWindowFlag(self, *args):
        return _fsdk.RemoteGotoAction_SetNewWindowFlag(self, *args)
    __swig_destroy__ = _fsdk.delete_RemoteGotoAction
    __del__ = lambda self: None
RemoteGotoAction_swigregister = _fsdk.RemoteGotoAction_swigregister
RemoteGotoAction_swigregister(RemoteGotoAction)

class EmbeddedGotoTarget(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedGotoTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedGotoTarget, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_EmbeddedGotoTarget
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_EmbeddedGotoTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.EmbeddedGotoTarget___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.EmbeddedGotoTarget___ne__(self, *args)

    def GetDict(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetDict(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.EmbeddedGotoTarget_IsEmpty(self, *args)

    def GetRelationship(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetRelationship(self, *args)

    def SetRelationship(self, *args):
        return _fsdk.EmbeddedGotoTarget_SetRelationship(self, *args)

    def GetAttachedFileName(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetAttachedFileName(self, *args)

    def SetAttachedFileName(self, *args):
        return _fsdk.EmbeddedGotoTarget_SetAttachedFileName(self, *args)

    def GetPageIndex(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetPageIndex(self, *args)

    def SetPageIndex(self, *args):
        return _fsdk.EmbeddedGotoTarget_SetPageIndex(self, *args)

    def GetFileAttachmentAnnotIndex(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetFileAttachmentAnnotIndex(self, *args)

    def SetFileAttachmentAnnotIndex(self, *args):
        return _fsdk.EmbeddedGotoTarget_SetFileAttachmentAnnotIndex(self, *args)

    def GetTarget(self, *args):
        return _fsdk.EmbeddedGotoTarget_GetTarget(self, *args)

    def SetTarget(self, *args):
        return _fsdk.EmbeddedGotoTarget_SetTarget(self, *args)
EmbeddedGotoTarget_swigregister = _fsdk.EmbeddedGotoTarget_swigregister
EmbeddedGotoTarget_swigregister(EmbeddedGotoTarget)

class EmbeddedGotoAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedGotoAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedGotoAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_EmbeddedGotoAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetDestination(self, *args):
        return _fsdk.EmbeddedGotoAction_GetDestination(self, *args)

    def SetDestination(self, *args):
        return _fsdk.EmbeddedGotoAction_SetDestination(self, *args)

    def GetDestinationName(self, *args):
        return _fsdk.EmbeddedGotoAction_GetDestinationName(self, *args)

    def SetDestinationName(self, *args):
        return _fsdk.EmbeddedGotoAction_SetDestinationName(self, *args)

    def GetRootFile(self, *args):
        return _fsdk.EmbeddedGotoAction_GetRootFile(self, *args)

    def SetRootFile(self, *args):
        return _fsdk.EmbeddedGotoAction_SetRootFile(self, *args)

    def GetNewWindowFlag(self, *args):
        return _fsdk.EmbeddedGotoAction_GetNewWindowFlag(self, *args)

    def SetNewWindowFlag(self, *args):
        return _fsdk.EmbeddedGotoAction_SetNewWindowFlag(self, *args)

    def GetTarget(self, *args):
        return _fsdk.EmbeddedGotoAction_GetTarget(self, *args)

    def SetTarget(self, *args):
        return _fsdk.EmbeddedGotoAction_SetTarget(self, *args)
    __swig_destroy__ = _fsdk.delete_EmbeddedGotoAction
    __del__ = lambda self: None
EmbeddedGotoAction_swigregister = _fsdk.EmbeddedGotoAction_swigregister
EmbeddedGotoAction_swigregister(EmbeddedGotoAction)

class SubmitFormAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubmitFormAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubmitFormAction, name)
    __repr__ = _swig_repr
    e_FlagExclude = _fsdk.SubmitFormAction_e_FlagExclude
    e_FlagIncludeNoValueFields = _fsdk.SubmitFormAction_e_FlagIncludeNoValueFields
    e_FlagExportFormat = _fsdk.SubmitFormAction_e_FlagExportFormat
    e_FlagGetMethod = _fsdk.SubmitFormAction_e_FlagGetMethod
    e_FlagWithCoordinates = _fsdk.SubmitFormAction_e_FlagWithCoordinates
    e_FlagAsXFDF = _fsdk.SubmitFormAction_e_FlagAsXFDF
    e_FlagIncludeAppendSaves = _fsdk.SubmitFormAction_e_FlagIncludeAppendSaves
    e_FlagIncludeAnnotations = _fsdk.SubmitFormAction_e_FlagIncludeAnnotations
    e_FlagSubmitAsPDF = _fsdk.SubmitFormAction_e_FlagSubmitAsPDF
    e_FlagCanonicalFormat = _fsdk.SubmitFormAction_e_FlagCanonicalFormat
    e_FlagExclNonUserAnnots = _fsdk.SubmitFormAction_e_FlagExclNonUserAnnots
    e_FlagExclFKey = _fsdk.SubmitFormAction_e_FlagExclFKey
    e_FlagEmbedForm = _fsdk.SubmitFormAction_e_FlagEmbedForm

    def __init__(self, *args):
        this = _fsdk.new_SubmitFormAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetURL(self, *args):
        return _fsdk.SubmitFormAction_GetURL(self, *args)

    def SetURL(self, *args):
        return _fsdk.SubmitFormAction_SetURL(self, *args)

    def GetFieldNames(self, *args):
        return _fsdk.SubmitFormAction_GetFieldNames(self, *args)

    def SetFieldNames(self, *args):
        return _fsdk.SubmitFormAction_SetFieldNames(self, *args)

    def GetFlags(self, *args):
        return _fsdk.SubmitFormAction_GetFlags(self, *args)

    def SetFlags(self, *args):
        return _fsdk.SubmitFormAction_SetFlags(self, *args)
    __swig_destroy__ = _fsdk.delete_SubmitFormAction
    __del__ = lambda self: None
SubmitFormAction_swigregister = _fsdk.SubmitFormAction_swigregister
SubmitFormAction_swigregister(SubmitFormAction)

class ResetFormAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResetFormAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResetFormAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ResetFormAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFieldNames(self, *args):
        return _fsdk.ResetFormAction_GetFieldNames(self, *args)

    def SetFieldNames(self, *args):
        return _fsdk.ResetFormAction_SetFieldNames(self, *args)

    def GetFlags(self, *args):
        return _fsdk.ResetFormAction_GetFlags(self, *args)

    def SetFlags(self, *args):
        return _fsdk.ResetFormAction_SetFlags(self, *args)
    __swig_destroy__ = _fsdk.delete_ResetFormAction
    __del__ = lambda self: None
ResetFormAction_swigregister = _fsdk.ResetFormAction_swigregister
ResetFormAction_swigregister(ResetFormAction)

class ImportDataAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImportDataAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImportDataAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ImportDataAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFDFFileSpec(self, *args):
        return _fsdk.ImportDataAction_GetFDFFileSpec(self, *args)

    def SetFDFFileSpec(self, *args):
        return _fsdk.ImportDataAction_SetFDFFileSpec(self, *args)
    __swig_destroy__ = _fsdk.delete_ImportDataAction
    __del__ = lambda self: None
ImportDataAction_swigregister = _fsdk.ImportDataAction_swigregister
ImportDataAction_swigregister(ImportDataAction)

class HideAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HideAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HideAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_HideAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFieldNames(self, *args):
        return _fsdk.HideAction_GetFieldNames(self, *args)

    def SetFieldNames(self, *args):
        return _fsdk.HideAction_SetFieldNames(self, *args)

    def GetHideState(self, *args):
        return _fsdk.HideAction_GetHideState(self, *args)

    def SetHideState(self, *args):
        return _fsdk.HideAction_SetHideState(self, *args)
    __swig_destroy__ = _fsdk.delete_HideAction
    __del__ = lambda self: None
HideAction_swigregister = _fsdk.HideAction_swigregister
HideAction_swigregister(HideAction)

class LaunchAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaunchAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LaunchAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LaunchAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFileSpec(self, *args):
        return _fsdk.LaunchAction_GetFileSpec(self, *args)

    def SetFileSpec(self, *args):
        return _fsdk.LaunchAction_SetFileSpec(self, *args)

    def GetNewWindowFlag(self, *args):
        return _fsdk.LaunchAction_GetNewWindowFlag(self, *args)

    def SetNewWindowFlag(self, *args):
        return _fsdk.LaunchAction_SetNewWindowFlag(self, *args)

    def GetWinFileName(self, *args):
        return _fsdk.LaunchAction_GetWinFileName(self, *args)

    def GetWinDefaultDirectory(self, *args):
        return _fsdk.LaunchAction_GetWinDefaultDirectory(self, *args)

    def GetWinAppOperation(self, *args):
        return _fsdk.LaunchAction_GetWinAppOperation(self, *args)

    def GetWinAppParameter(self, *args):
        return _fsdk.LaunchAction_GetWinAppParameter(self, *args)

    def SetWinLaunchParameter(self, *args):
        return _fsdk.LaunchAction_SetWinLaunchParameter(self, *args)
    __swig_destroy__ = _fsdk.delete_LaunchAction
    __del__ = lambda self: None
LaunchAction_swigregister = _fsdk.LaunchAction_swigregister
LaunchAction_swigregister(LaunchAction)

class RenditionAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenditionAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenditionAction, name)
    __repr__ = _swig_repr
    e_OpTypeNone = _fsdk.RenditionAction_e_OpTypeNone
    e_OpTypeAssociate = _fsdk.RenditionAction_e_OpTypeAssociate
    e_OpTypeStop = _fsdk.RenditionAction_e_OpTypeStop
    e_OpTypePause = _fsdk.RenditionAction_e_OpTypePause
    e_OpTypeResume = _fsdk.RenditionAction_e_OpTypeResume
    e_OpTypePlay = _fsdk.RenditionAction_e_OpTypePlay

    def __init__(self, *args):
        this = _fsdk.new_RenditionAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOperationType(self, *args):
        return _fsdk.RenditionAction_GetOperationType(self, *args)

    def SetOperationType(self, *args):
        return _fsdk.RenditionAction_SetOperationType(self, *args)

    def GetRenditionCount(self, *args):
        return _fsdk.RenditionAction_GetRenditionCount(self, *args)

    def GetRendition(self, *args):
        return _fsdk.RenditionAction_GetRendition(self, *args)

    def InsertRendition(self, *args):
        return _fsdk.RenditionAction_InsertRendition(self, *args)

    def RemoveRendition(self, *args):
        return _fsdk.RenditionAction_RemoveRendition(self, *args)

    def GetScreenAnnot(self, *args):
        return _fsdk.RenditionAction_GetScreenAnnot(self, *args)

    def SetScreenAnnot(self, *args):
        return _fsdk.RenditionAction_SetScreenAnnot(self, *args)

    def GetJavaScript(self, *args):
        return _fsdk.RenditionAction_GetJavaScript(self, *args)

    def SetJavaScript(self, *args):
        return _fsdk.RenditionAction_SetJavaScript(self, *args)
    __swig_destroy__ = _fsdk.delete_RenditionAction
    __del__ = lambda self: None
RenditionAction_swigregister = _fsdk.RenditionAction_swigregister
RenditionAction_swigregister(RenditionAction)

class SetOCGStateAction(Action):
    __swig_setmethods__ = {}
    for _s in [Action]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetOCGStateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Action]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetOCGStateAction, name)
    __repr__ = _swig_repr
    e_OCGStateOn = _fsdk.SetOCGStateAction_e_OCGStateOn
    e_OCGStateOff = _fsdk.SetOCGStateAction_e_OCGStateOff
    e_OCGStateToggle = _fsdk.SetOCGStateAction_e_OCGStateToggle

    def __init__(self, *args):
        this = _fsdk.new_SetOCGStateAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOCGStateCount(self, *args):
        return _fsdk.SetOCGStateAction_GetOCGStateCount(self, *args)

    def GetOCGState(self, *args):
        return _fsdk.SetOCGStateAction_GetOCGState(self, *args)

    def GetOCGStateArray(self, *args):
        return _fsdk.SetOCGStateAction_GetOCGStateArray(self, *args)

    def InsertOCGStates(self, *args):
        return _fsdk.SetOCGStateAction_InsertOCGStates(self, *args)

    def ReplaceOCGStates(self, *args):
        return _fsdk.SetOCGStateAction_ReplaceOCGStates(self, *args)

    def RemoveOCGStates(self, *args):
        return _fsdk.SetOCGStateAction_RemoveOCGStates(self, *args)

    def IsRadioButtonStatePreserved(self, *args):
        return _fsdk.SetOCGStateAction_IsRadioButtonStatePreserved(self, *args)

    def SetRadioButtonStatePreserved(self, *args):
        return _fsdk.SetOCGStateAction_SetRadioButtonStatePreserved(self, *args)
    __swig_destroy__ = _fsdk.delete_SetOCGStateAction
    __del__ = lambda self: None
SetOCGStateAction_swigregister = _fsdk.SetOCGStateAction_swigregister
SetOCGStateAction_swigregister(SetOCGStateAction)

class AdditionalAction(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdditionalAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdditionalAction, name)
    __repr__ = _swig_repr
    e_TriggerPageOpened = _fsdk.AdditionalAction_e_TriggerPageOpened
    e_TriggerPageClosed = _fsdk.AdditionalAction_e_TriggerPageClosed
    e_TriggerDocWillClose = _fsdk.AdditionalAction_e_TriggerDocWillClose
    e_TriggerDocWillSave = _fsdk.AdditionalAction_e_TriggerDocWillSave
    e_TriggerDocSaved = _fsdk.AdditionalAction_e_TriggerDocSaved
    e_TriggerDocWillPrint = _fsdk.AdditionalAction_e_TriggerDocWillPrint
    e_TriggerDocPrinted = _fsdk.AdditionalAction_e_TriggerDocPrinted
    e_TriggerFieldKeyStroke = _fsdk.AdditionalAction_e_TriggerFieldKeyStroke
    e_TriggerFieldWillFormat = _fsdk.AdditionalAction_e_TriggerFieldWillFormat
    e_TriggerFieldValueChanged = _fsdk.AdditionalAction_e_TriggerFieldValueChanged
    e_TriggerFieldRecalculateValue = _fsdk.AdditionalAction_e_TriggerFieldRecalculateValue
    e_TriggerAnnotCursorEnter = _fsdk.AdditionalAction_e_TriggerAnnotCursorEnter
    e_TriggerAnnotCursorExit = _fsdk.AdditionalAction_e_TriggerAnnotCursorExit
    e_TriggerAnnotMouseButtonPressed = _fsdk.AdditionalAction_e_TriggerAnnotMouseButtonPressed
    e_TriggerAnnotMouseButtonReleased = _fsdk.AdditionalAction_e_TriggerAnnotMouseButtonReleased
    e_TriggerAnnotReceiveInputFocus = _fsdk.AdditionalAction_e_TriggerAnnotReceiveInputFocus
    e_TriggerAnnotLoseInputFocus = _fsdk.AdditionalAction_e_TriggerAnnotLoseInputFocus
    e_TriggerAnnotPageOpened = _fsdk.AdditionalAction_e_TriggerAnnotPageOpened
    e_TriggerAnnotPageClosed = _fsdk.AdditionalAction_e_TriggerAnnotPageClosed
    e_TriggerAnnotPageVisible = _fsdk.AdditionalAction_e_TriggerAnnotPageVisible
    e_TriggerAnnotPageInvisible = _fsdk.AdditionalAction_e_TriggerAnnotPageInvisible
    __swig_destroy__ = _fsdk.delete_AdditionalAction
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_AdditionalAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.AdditionalAction___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.AdditionalAction___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.AdditionalAction_IsEmpty(self, *args)

    def GetAction(self, *args):
        return _fsdk.AdditionalAction_GetAction(self, *args)

    def SetAction(self, *args):
        return _fsdk.AdditionalAction_SetAction(self, *args)

    def RemoveAction(self, *args):
        return _fsdk.AdditionalAction_RemoveAction(self, *args)

    def RemoveAllActions(self, *args):
        return _fsdk.AdditionalAction_RemoveAllActions(self, *args)

    def DoJSAction(self, *args):
        return _fsdk.AdditionalAction_DoJSAction(self, *args)

    def GetDict(self, *args):
        return _fsdk.AdditionalAction_GetDict(self, *args)
AdditionalAction_swigregister = _fsdk.AdditionalAction_swigregister
AdditionalAction_swigregister(AdditionalAction)

class DefaultAppearance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultAppearance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultAppearance, name)
    __repr__ = _swig_repr
    e_FlagFont = _fsdk.DefaultAppearance_e_FlagFont
    e_FlagTextColor = _fsdk.DefaultAppearance_e_FlagTextColor
    e_FlagFontSize = _fsdk.DefaultAppearance_e_FlagFontSize

    def __init__(self, *args):
        this = _fsdk.new_DefaultAppearance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.DefaultAppearance___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.DefaultAppearance___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.DefaultAppearance_Set(self, *args)
    __swig_setmethods__["flags"] = _fsdk.DefaultAppearance_flags_set
    __swig_getmethods__["flags"] = _fsdk.DefaultAppearance_flags_get
    if _newclass:
        flags = _swig_property(_fsdk.DefaultAppearance_flags_get, _fsdk.DefaultAppearance_flags_set)
    __swig_setmethods__["font"] = _fsdk.DefaultAppearance_font_set
    __swig_getmethods__["font"] = _fsdk.DefaultAppearance_font_get
    if _newclass:
        font = _swig_property(_fsdk.DefaultAppearance_font_get, _fsdk.DefaultAppearance_font_set)
    __swig_setmethods__["text_size"] = _fsdk.DefaultAppearance_text_size_set
    __swig_getmethods__["text_size"] = _fsdk.DefaultAppearance_text_size_get
    if _newclass:
        text_size = _swig_property(_fsdk.DefaultAppearance_text_size_get, _fsdk.DefaultAppearance_text_size_set)
    __swig_setmethods__["text_color"] = _fsdk.DefaultAppearance_text_color_set
    __swig_getmethods__["text_color"] = _fsdk.DefaultAppearance_text_color_get
    if _newclass:
        text_color = _swig_property(_fsdk.DefaultAppearance_text_color_get, _fsdk.DefaultAppearance_text_color_set)
    __swig_destroy__ = _fsdk.delete_DefaultAppearance
    __del__ = lambda self: None
DefaultAppearance_swigregister = _fsdk.DefaultAppearance_swigregister
DefaultAppearance_swigregister(DefaultAppearance)

class RichTextStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RichTextStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RichTextStyle, name)
    __repr__ = _swig_repr
    e_CornerMarkNone = _fsdk.RichTextStyle_e_CornerMarkNone
    e_CornerMarkSuperscript = _fsdk.RichTextStyle_e_CornerMarkSuperscript
    e_CornerMarkSubscript = _fsdk.RichTextStyle_e_CornerMarkSubscript

    def __init__(self, *args):
        this = _fsdk.new_RichTextStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.RichTextStyle___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RichTextStyle___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.RichTextStyle_Set(self, *args)
    __swig_setmethods__["font"] = _fsdk.RichTextStyle_font_set
    __swig_getmethods__["font"] = _fsdk.RichTextStyle_font_get
    if _newclass:
        font = _swig_property(_fsdk.RichTextStyle_font_get, _fsdk.RichTextStyle_font_set)
    __swig_setmethods__["text_size"] = _fsdk.RichTextStyle_text_size_set
    __swig_getmethods__["text_size"] = _fsdk.RichTextStyle_text_size_get
    if _newclass:
        text_size = _swig_property(_fsdk.RichTextStyle_text_size_get, _fsdk.RichTextStyle_text_size_set)
    __swig_setmethods__["text_alignment"] = _fsdk.RichTextStyle_text_alignment_set
    __swig_getmethods__["text_alignment"] = _fsdk.RichTextStyle_text_alignment_get
    if _newclass:
        text_alignment = _swig_property(_fsdk.RichTextStyle_text_alignment_get, _fsdk.RichTextStyle_text_alignment_set)
    __swig_setmethods__["text_color"] = _fsdk.RichTextStyle_text_color_set
    __swig_getmethods__["text_color"] = _fsdk.RichTextStyle_text_color_get
    if _newclass:
        text_color = _swig_property(_fsdk.RichTextStyle_text_color_get, _fsdk.RichTextStyle_text_color_set)
    __swig_setmethods__["is_bold"] = _fsdk.RichTextStyle_is_bold_set
    __swig_getmethods__["is_bold"] = _fsdk.RichTextStyle_is_bold_get
    if _newclass:
        is_bold = _swig_property(_fsdk.RichTextStyle_is_bold_get, _fsdk.RichTextStyle_is_bold_set)
    __swig_setmethods__["is_italic"] = _fsdk.RichTextStyle_is_italic_set
    __swig_getmethods__["is_italic"] = _fsdk.RichTextStyle_is_italic_get
    if _newclass:
        is_italic = _swig_property(_fsdk.RichTextStyle_is_italic_get, _fsdk.RichTextStyle_is_italic_set)
    __swig_setmethods__["is_underline"] = _fsdk.RichTextStyle_is_underline_set
    __swig_getmethods__["is_underline"] = _fsdk.RichTextStyle_is_underline_get
    if _newclass:
        is_underline = _swig_property(_fsdk.RichTextStyle_is_underline_get, _fsdk.RichTextStyle_is_underline_set)
    __swig_setmethods__["is_strikethrough"] = _fsdk.RichTextStyle_is_strikethrough_set
    __swig_getmethods__["is_strikethrough"] = _fsdk.RichTextStyle_is_strikethrough_get
    if _newclass:
        is_strikethrough = _swig_property(_fsdk.RichTextStyle_is_strikethrough_get, _fsdk.RichTextStyle_is_strikethrough_set)
    __swig_setmethods__["mark_style"] = _fsdk.RichTextStyle_mark_style_set
    __swig_getmethods__["mark_style"] = _fsdk.RichTextStyle_mark_style_get
    if _newclass:
        mark_style = _swig_property(_fsdk.RichTextStyle_mark_style_get, _fsdk.RichTextStyle_mark_style_set)
    __swig_setmethods__["char_space"] = _fsdk.RichTextStyle_char_space_set
    __swig_getmethods__["char_space"] = _fsdk.RichTextStyle_char_space_get
    if _newclass:
        char_space = _swig_property(_fsdk.RichTextStyle_char_space_get, _fsdk.RichTextStyle_char_space_set)
    __swig_setmethods__["word_space"] = _fsdk.RichTextStyle_word_space_set
    __swig_getmethods__["word_space"] = _fsdk.RichTextStyle_word_space_get
    if _newclass:
        word_space = _swig_property(_fsdk.RichTextStyle_word_space_get, _fsdk.RichTextStyle_word_space_set)
    __swig_destroy__ = _fsdk.delete_RichTextStyle
    __del__ = lambda self: None
RichTextStyle_swigregister = _fsdk.RichTextStyle_swigregister
RichTextStyle_swigregister(RichTextStyle)

class BorderInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BorderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BorderInfo, name)
    __repr__ = _swig_repr
    e_Solid = _fsdk.BorderInfo_e_Solid
    e_Dashed = _fsdk.BorderInfo_e_Dashed
    e_UnderLine = _fsdk.BorderInfo_e_UnderLine
    e_Beveled = _fsdk.BorderInfo_e_Beveled
    e_Inset = _fsdk.BorderInfo_e_Inset
    e_Cloudy = _fsdk.BorderInfo_e_Cloudy

    def __init__(self, *args):
        this = _fsdk.new_BorderInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.BorderInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.BorderInfo___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.BorderInfo_Set(self, *args)
    __swig_setmethods__["width"] = _fsdk.BorderInfo_width_set
    __swig_getmethods__["width"] = _fsdk.BorderInfo_width_get
    if _newclass:
        width = _swig_property(_fsdk.BorderInfo_width_get, _fsdk.BorderInfo_width_set)
    __swig_setmethods__["style"] = _fsdk.BorderInfo_style_set
    __swig_getmethods__["style"] = _fsdk.BorderInfo_style_get
    if _newclass:
        style = _swig_property(_fsdk.BorderInfo_style_get, _fsdk.BorderInfo_style_set)
    __swig_setmethods__["cloud_intensity"] = _fsdk.BorderInfo_cloud_intensity_set
    __swig_getmethods__["cloud_intensity"] = _fsdk.BorderInfo_cloud_intensity_get
    if _newclass:
        cloud_intensity = _swig_property(_fsdk.BorderInfo_cloud_intensity_get, _fsdk.BorderInfo_cloud_intensity_set)
    __swig_setmethods__["dash_phase"] = _fsdk.BorderInfo_dash_phase_set
    __swig_getmethods__["dash_phase"] = _fsdk.BorderInfo_dash_phase_get
    if _newclass:
        dash_phase = _swig_property(_fsdk.BorderInfo_dash_phase_get, _fsdk.BorderInfo_dash_phase_set)
    __swig_setmethods__["dashes"] = _fsdk.BorderInfo_dashes_set
    __swig_getmethods__["dashes"] = _fsdk.BorderInfo_dashes_get
    if _newclass:
        dashes = _swig_property(_fsdk.BorderInfo_dashes_get, _fsdk.BorderInfo_dashes_set)
    __swig_destroy__ = _fsdk.delete_BorderInfo
    __del__ = lambda self: None
BorderInfo_swigregister = _fsdk.BorderInfo_swigregister
BorderInfo_swigregister(BorderInfo)

class QuadPoints(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPoints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_QuadPoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.QuadPoints___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.QuadPoints___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.QuadPoints_Set(self, *args)
    __swig_setmethods__["first"] = _fsdk.QuadPoints_first_set
    __swig_getmethods__["first"] = _fsdk.QuadPoints_first_get
    if _newclass:
        first = _swig_property(_fsdk.QuadPoints_first_get, _fsdk.QuadPoints_first_set)
    __swig_setmethods__["second"] = _fsdk.QuadPoints_second_set
    __swig_getmethods__["second"] = _fsdk.QuadPoints_second_get
    if _newclass:
        second = _swig_property(_fsdk.QuadPoints_second_get, _fsdk.QuadPoints_second_set)
    __swig_setmethods__["third"] = _fsdk.QuadPoints_third_set
    __swig_getmethods__["third"] = _fsdk.QuadPoints_third_get
    if _newclass:
        third = _swig_property(_fsdk.QuadPoints_third_get, _fsdk.QuadPoints_third_set)
    __swig_setmethods__["fourth"] = _fsdk.QuadPoints_fourth_set
    __swig_getmethods__["fourth"] = _fsdk.QuadPoints_fourth_get
    if _newclass:
        fourth = _swig_property(_fsdk.QuadPoints_fourth_get, _fsdk.QuadPoints_fourth_set)
    __swig_destroy__ = _fsdk.delete_QuadPoints
    __del__ = lambda self: None
QuadPoints_swigregister = _fsdk.QuadPoints_swigregister
QuadPoints_swigregister(QuadPoints)

class QuadPointsArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPointsArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPointsArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_QuadPointsArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_QuadPointsArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.QuadPointsArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.QuadPointsArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.QuadPointsArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.QuadPointsArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.QuadPointsArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.QuadPointsArray_RemoveAll(self, *args)
QuadPointsArray_swigregister = _fsdk.QuadPointsArray_swigregister
QuadPointsArray_swigregister(QuadPointsArray)

class IconFit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IconFit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IconFit, name)
    __repr__ = _swig_repr
    e_ScaleWayNone = _fsdk.IconFit_e_ScaleWayNone
    e_ScaleWayAlways = _fsdk.IconFit_e_ScaleWayAlways
    e_ScaleWayBigger = _fsdk.IconFit_e_ScaleWayBigger
    e_ScaleWaySmaller = _fsdk.IconFit_e_ScaleWaySmaller
    e_ScaleWayNever = _fsdk.IconFit_e_ScaleWayNever

    def __init__(self, *args):
        this = _fsdk.new_IconFit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.IconFit___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.IconFit___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.IconFit_Set(self, *args)
    __swig_setmethods__["scale_way_type"] = _fsdk.IconFit_scale_way_type_set
    __swig_getmethods__["scale_way_type"] = _fsdk.IconFit_scale_way_type_get
    if _newclass:
        scale_way_type = _swig_property(_fsdk.IconFit_scale_way_type_get, _fsdk.IconFit_scale_way_type_set)
    __swig_setmethods__["is_proportional_scaling"] = _fsdk.IconFit_is_proportional_scaling_set
    __swig_getmethods__["is_proportional_scaling"] = _fsdk.IconFit_is_proportional_scaling_get
    if _newclass:
        is_proportional_scaling = _swig_property(_fsdk.IconFit_is_proportional_scaling_get, _fsdk.IconFit_is_proportional_scaling_set)
    __swig_setmethods__["horizontal_fraction"] = _fsdk.IconFit_horizontal_fraction_set
    __swig_getmethods__["horizontal_fraction"] = _fsdk.IconFit_horizontal_fraction_get
    if _newclass:
        horizontal_fraction = _swig_property(_fsdk.IconFit_horizontal_fraction_get, _fsdk.IconFit_horizontal_fraction_set)
    __swig_setmethods__["vertical_fraction"] = _fsdk.IconFit_vertical_fraction_set
    __swig_getmethods__["vertical_fraction"] = _fsdk.IconFit_vertical_fraction_get
    if _newclass:
        vertical_fraction = _swig_property(_fsdk.IconFit_vertical_fraction_get, _fsdk.IconFit_vertical_fraction_set)
    __swig_setmethods__["fit_bounds"] = _fsdk.IconFit_fit_bounds_set
    __swig_getmethods__["fit_bounds"] = _fsdk.IconFit_fit_bounds_get
    if _newclass:
        fit_bounds = _swig_property(_fsdk.IconFit_fit_bounds_get, _fsdk.IconFit_fit_bounds_set)
    __swig_destroy__ = _fsdk.delete_IconFit
    __del__ = lambda self: None
IconFit_swigregister = _fsdk.IconFit_swigregister
IconFit_swigregister(IconFit)

class Annot(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Annot, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Annot, name)
    __repr__ = _swig_repr
    e_UnknownType = _fsdk.Annot_e_UnknownType
    e_Note = _fsdk.Annot_e_Note
    e_Link = _fsdk.Annot_e_Link
    e_FreeText = _fsdk.Annot_e_FreeText
    e_Line = _fsdk.Annot_e_Line
    e_Square = _fsdk.Annot_e_Square
    e_Circle = _fsdk.Annot_e_Circle
    e_Polygon = _fsdk.Annot_e_Polygon
    e_PolyLine = _fsdk.Annot_e_PolyLine
    e_Highlight = _fsdk.Annot_e_Highlight
    e_Underline = _fsdk.Annot_e_Underline
    e_Squiggly = _fsdk.Annot_e_Squiggly
    e_StrikeOut = _fsdk.Annot_e_StrikeOut
    e_Stamp = _fsdk.Annot_e_Stamp
    e_Caret = _fsdk.Annot_e_Caret
    e_Ink = _fsdk.Annot_e_Ink
    e_PSInk = _fsdk.Annot_e_PSInk
    e_FileAttachment = _fsdk.Annot_e_FileAttachment
    e_Sound = _fsdk.Annot_e_Sound
    e_Movie = _fsdk.Annot_e_Movie
    e_Widget = _fsdk.Annot_e_Widget
    e_Screen = _fsdk.Annot_e_Screen
    e_PrinterMark = _fsdk.Annot_e_PrinterMark
    e_TrapNet = _fsdk.Annot_e_TrapNet
    e_Watermark = _fsdk.Annot_e_Watermark
    e_3D = _fsdk.Annot_e_3D
    e_Popup = _fsdk.Annot_e_Popup
    e_Redact = _fsdk.Annot_e_Redact
    e_RichMedia = _fsdk.Annot_e_RichMedia
    e_PagingSeal = _fsdk.Annot_e_PagingSeal
    e_FlagInvisible = _fsdk.Annot_e_FlagInvisible
    e_FlagHidden = _fsdk.Annot_e_FlagHidden
    e_FlagPrint = _fsdk.Annot_e_FlagPrint
    e_FlagNoZoom = _fsdk.Annot_e_FlagNoZoom
    e_FlagNoRotate = _fsdk.Annot_e_FlagNoRotate
    e_FlagNoView = _fsdk.Annot_e_FlagNoView
    e_FlagReadOnly = _fsdk.Annot_e_FlagReadOnly
    e_FlagLocked = _fsdk.Annot_e_FlagLocked
    e_FlagToggleNoView = _fsdk.Annot_e_FlagToggleNoView
    e_FlagLockedContents = _fsdk.Annot_e_FlagLockedContents
    e_HighlightingNone = _fsdk.Annot_e_HighlightingNone
    e_HighlightingInvert = _fsdk.Annot_e_HighlightingInvert
    e_HighlightingOutline = _fsdk.Annot_e_HighlightingOutline
    e_HighlightingPush = _fsdk.Annot_e_HighlightingPush
    e_HighlightingToggle = _fsdk.Annot_e_HighlightingToggle
    e_PropertyModifiedDate = _fsdk.Annot_e_PropertyModifiedDate
    e_PropertyCreationDate = _fsdk.Annot_e_PropertyCreationDate
    e_PropertyBorderColor = _fsdk.Annot_e_PropertyBorderColor
    e_PropertyFillColor = _fsdk.Annot_e_PropertyFillColor
    e_MKEntryRotation = _fsdk.Annot_e_MKEntryRotation
    e_MKEntryBorderColor = _fsdk.Annot_e_MKEntryBorderColor
    e_MKEntryBackgroundColor = _fsdk.Annot_e_MKEntryBackgroundColor
    e_MKEntryNormalCaption = _fsdk.Annot_e_MKEntryNormalCaption
    e_MKEntryRolloverCaption = _fsdk.Annot_e_MKEntryRolloverCaption
    e_MKEntryDownCaption = _fsdk.Annot_e_MKEntryDownCaption
    e_MKEntryNormalIcon = _fsdk.Annot_e_MKEntryNormalIcon
    e_MKEntryRolloverIcon = _fsdk.Annot_e_MKEntryRolloverIcon
    e_MKEntryDownIcon = _fsdk.Annot_e_MKEntryDownIcon
    e_MKEntryIconFit = _fsdk.Annot_e_MKEntryIconFit
    e_MKEntryIconCaptionRelation = _fsdk.Annot_e_MKEntryIconCaptionRelation
    e_MKRelationNoIcon = _fsdk.Annot_e_MKRelationNoIcon
    e_MKRelationNoCaption = _fsdk.Annot_e_MKRelationNoCaption
    e_MKRelationCaptionBelowIcon = _fsdk.Annot_e_MKRelationCaptionBelowIcon
    e_MKRelationCaptionAboveIcon = _fsdk.Annot_e_MKRelationCaptionAboveIcon
    e_MKRelationCaptionRight = _fsdk.Annot_e_MKRelationCaptionRight
    e_MKRelationCaptionLeft = _fsdk.Annot_e_MKRelationCaptionLeft
    e_MKRelationCaptionOvrlayOnIcon = _fsdk.Annot_e_MKRelationCaptionOvrlayOnIcon
    e_AppearanceTypeNormal = _fsdk.Annot_e_AppearanceTypeNormal
    e_AppearanceTypeRollover = _fsdk.Annot_e_AppearanceTypeRollover
    e_AppearanceTypeDown = _fsdk.Annot_e_AppearanceTypeDown

    def __init__(self, *args):
        this = _fsdk.new_Annot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Annot___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Annot___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_Annot
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Annot_IsEmpty(self, *args)

    def GetPage(self, *args):
        return _fsdk.Annot_GetPage(self, *args)

    def IsMarkup(self, *args):
        return _fsdk.Annot_IsMarkup(self, *args)

    def GetType(self, *args):
        return _fsdk.Annot_GetType(self, *args)

    def GetIndex(self, *args):
        return _fsdk.Annot_GetIndex(self, *args)

    def GetContent(self, *args):
        return _fsdk.Annot_GetContent(self, *args)

    def SetContent(self, *args):
        return _fsdk.Annot_SetContent(self, *args)

    def GetModifiedDateTime(self, *args):
        return _fsdk.Annot_GetModifiedDateTime(self, *args)

    def SetModifiedDateTime(self, *args):
        return _fsdk.Annot_SetModifiedDateTime(self, *args)

    def GetFlags(self, *args):
        return _fsdk.Annot_GetFlags(self, *args)

    def SetFlags(self, *args):
        return _fsdk.Annot_SetFlags(self, *args)

    def GetUniqueID(self, *args):
        return _fsdk.Annot_GetUniqueID(self, *args)

    def SetUniqueID(self, *args):
        return _fsdk.Annot_SetUniqueID(self, *args)

    def GetRect(self, *args):
        return _fsdk.Annot_GetRect(self, *args)

    def GetDisplayMatrix(self, *args):
        return _fsdk.Annot_GetDisplayMatrix(self, *args)

    def Move(self, *args):
        return _fsdk.Annot_Move(self, *args)

    def GetBorderInfo(self, *args):
        return _fsdk.Annot_GetBorderInfo(self, *args)

    def SetBorderInfo(self, *args):
        return _fsdk.Annot_SetBorderInfo(self, *args)

    def GetBorderColor(self, *args):
        return _fsdk.Annot_GetBorderColor(self, *args)

    def SetBorderColor(self, *args):
        return _fsdk.Annot_SetBorderColor(self, *args)

    def ResetAppearanceStream(self, *args):
        return _fsdk.Annot_ResetAppearanceStream(self, *args)

    def GetDeviceRect(self, *args):
        return _fsdk.Annot_GetDeviceRect(self, *args)

    def GetDict(self, *args):
        return _fsdk.Annot_GetDict(self, *args)

    def HasProperty(self, *args):
        return _fsdk.Annot_HasProperty(self, *args)

    def RemoveProperty(self, *args):
        return _fsdk.Annot_RemoveProperty(self, *args)

    def GetOptionalContent(self, *args):
        return _fsdk.Annot_GetOptionalContent(self, *args)

    def GetAppearanceStream(self, *args):
        return _fsdk.Annot_GetAppearanceStream(self, *args)
Annot_swigregister = _fsdk.Annot_swigregister
Annot_swigregister(Annot)

class AnnotArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_AnnotArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_AnnotArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.AnnotArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.AnnotArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.AnnotArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.AnnotArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.AnnotArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.AnnotArray_RemoveAll(self, *args)
AnnotArray_swigregister = _fsdk.AnnotArray_swigregister
AnnotArray_swigregister(AnnotArray)

class ShadingColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ShadingColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ShadingColor___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ShadingColor___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.ShadingColor_Set(self, *args)
    __swig_setmethods__["first_color"] = _fsdk.ShadingColor_first_color_set
    __swig_getmethods__["first_color"] = _fsdk.ShadingColor_first_color_get
    if _newclass:
        first_color = _swig_property(_fsdk.ShadingColor_first_color_get, _fsdk.ShadingColor_first_color_set)
    __swig_setmethods__["second_color"] = _fsdk.ShadingColor_second_color_set
    __swig_getmethods__["second_color"] = _fsdk.ShadingColor_second_color_get
    if _newclass:
        second_color = _swig_property(_fsdk.ShadingColor_second_color_get, _fsdk.ShadingColor_second_color_set)
    __swig_destroy__ = _fsdk.delete_ShadingColor
    __del__ = lambda self: None
ShadingColor_swigregister = _fsdk.ShadingColor_swigregister
ShadingColor_swigregister(ShadingColor)

class IconProviderCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IconProviderCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IconProviderCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.IconProviderCallback_Release(self, *args)

    def GetProviderID(self, *args):
        return _fsdk.IconProviderCallback_GetProviderID(self, *args)

    def GetProviderVersion(self, *args):
        return _fsdk.IconProviderCallback_GetProviderVersion(self, *args)

    def HasIcon(self, *args):
        return _fsdk.IconProviderCallback_HasIcon(self, *args)

    def CanChangeColor(self, *args):
        return _fsdk.IconProviderCallback_CanChangeColor(self, *args)

    def GetIcon(self, *args):
        return _fsdk.IconProviderCallback_GetIcon(self, *args)

    def GetShadingColor(self, *args):
        return _fsdk.IconProviderCallback_GetShadingColor(self, *args)

    def GetDisplayWidth(self, *args):
        return _fsdk.IconProviderCallback_GetDisplayWidth(self, *args)

    def GetDisplayHeight(self, *args):
        return _fsdk.IconProviderCallback_GetDisplayHeight(self, *args)

    def __init__(self, *args):
        if self.__class__ == IconProviderCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_IconProviderCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_IconProviderCallback(self)
        return weakref_proxy(self)
IconProviderCallback_swigregister = _fsdk.IconProviderCallback_swigregister
IconProviderCallback_swigregister(IconProviderCallback)

class MarkupArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkupArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarkupArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_MarkupArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_MarkupArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.MarkupArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.MarkupArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.MarkupArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.MarkupArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.MarkupArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.MarkupArray_RemoveAll(self, *args)
MarkupArray_swigregister = _fsdk.MarkupArray_swigregister
MarkupArray_swigregister(MarkupArray)

class NoteArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoteArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoteArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_NoteArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_NoteArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.NoteArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.NoteArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.NoteArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.NoteArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.NoteArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.NoteArray_RemoveAll(self, *args)
NoteArray_swigregister = _fsdk.NoteArray_swigregister
NoteArray_swigregister(NoteArray)

class Markup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Markup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Markup, name)
    __repr__ = _swig_repr
    e_StateModelMarked = _fsdk.Markup_e_StateModelMarked
    e_StateModelReview = _fsdk.Markup_e_StateModelReview
    e_StateNone = _fsdk.Markup_e_StateNone
    e_StateMarked = _fsdk.Markup_e_StateMarked
    e_StateUnmarked = _fsdk.Markup_e_StateUnmarked
    e_StateAccepted = _fsdk.Markup_e_StateAccepted
    e_StateRejected = _fsdk.Markup_e_StateRejected
    e_StateCancelled = _fsdk.Markup_e_StateCancelled
    e_StateCompleted = _fsdk.Markup_e_StateCompleted
    e_StateDeferred = _fsdk.Markup_e_StateDeferred
    e_StateFuture = _fsdk.Markup_e_StateFuture
    e_EndingStyleNone = _fsdk.Markup_e_EndingStyleNone
    e_EndingStyleSquare = _fsdk.Markup_e_EndingStyleSquare
    e_EndingStyleCircle = _fsdk.Markup_e_EndingStyleCircle
    e_EndingStyleDiamond = _fsdk.Markup_e_EndingStyleDiamond
    e_EndingStyleOpenArrow = _fsdk.Markup_e_EndingStyleOpenArrow
    e_EndingStyleClosedArrow = _fsdk.Markup_e_EndingStyleClosedArrow
    e_EndingStyleButt = _fsdk.Markup_e_EndingStyleButt
    e_EndingStyleROpenArrow = _fsdk.Markup_e_EndingStyleROpenArrow
    e_EndingStyleRClosedArrow = _fsdk.Markup_e_EndingStyleRClosedArrow
    e_EndingStyleSlash = _fsdk.Markup_e_EndingStyleSlash
    e_MeasureTypeX = _fsdk.Markup_e_MeasureTypeX
    e_MeasureTypeY = _fsdk.Markup_e_MeasureTypeY
    e_MeasureTypeD = _fsdk.Markup_e_MeasureTypeD
    e_MeasureTypeA = _fsdk.Markup_e_MeasureTypeA
    e_MeasureTypeT = _fsdk.Markup_e_MeasureTypeT
    e_MeasureTypeS = _fsdk.Markup_e_MeasureTypeS

    def __init__(self, *args):
        this = _fsdk.new_Markup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Markup
    __del__ = lambda self: None

    def GetPopup(self, *args):
        return _fsdk.Markup_GetPopup(self, *args)

    def SetPopup(self, *args):
        return _fsdk.Markup_SetPopup(self, *args)

    def RemovePopup(self, *args):
        return _fsdk.Markup_RemovePopup(self, *args)

    def GetTitle(self, *args):
        return _fsdk.Markup_GetTitle(self, *args)

    def SetTitle(self, *args):
        return _fsdk.Markup_SetTitle(self, *args)

    def GetSubject(self, *args):
        return _fsdk.Markup_GetSubject(self, *args)

    def SetSubject(self, *args):
        return _fsdk.Markup_SetSubject(self, *args)

    def GetOpacity(self, *args):
        return _fsdk.Markup_GetOpacity(self, *args)

    def SetOpacity(self, *args):
        return _fsdk.Markup_SetOpacity(self, *args)

    def GetIntent(self, *args):
        return _fsdk.Markup_GetIntent(self, *args)

    def SetIntent(self, *args):
        return _fsdk.Markup_SetIntent(self, *args)

    def GetCreationDateTime(self, *args):
        return _fsdk.Markup_GetCreationDateTime(self, *args)

    def SetCreationDateTime(self, *args):
        return _fsdk.Markup_SetCreationDateTime(self, *args)

    def GetReplyCount(self, *args):
        return _fsdk.Markup_GetReplyCount(self, *args)

    def GetReply(self, *args):
        return _fsdk.Markup_GetReply(self, *args)

    def AddReply(self, *args):
        return _fsdk.Markup_AddReply(self, *args)

    def RemoveReply(self, *args):
        return _fsdk.Markup_RemoveReply(self, *args)

    def RemoveAllReplies(self, *args):
        return _fsdk.Markup_RemoveAllReplies(self, *args)

    def IsGrouped(self, *args):
        return _fsdk.Markup_IsGrouped(self, *args)

    def GetGroupHeader(self, *args):
        return _fsdk.Markup_GetGroupHeader(self, *args)

    def GetGroupElements(self, *args):
        return _fsdk.Markup_GetGroupElements(self, *args)

    def Ungroup(self, *args):
        return _fsdk.Markup_Ungroup(self, *args)

    def GetStateAnnots(self, *args):
        return _fsdk.Markup_GetStateAnnots(self, *args)

    def AddStateAnnot(self, *args):
        return _fsdk.Markup_AddStateAnnot(self, *args)

    def RemoveAllStateAnnots(self, *args):
        return _fsdk.Markup_RemoveAllStateAnnots(self, *args)

    def GetRichTextCount(self, *args):
        return _fsdk.Markup_GetRichTextCount(self, *args)

    def GetRichTextContent(self, *args):
        return _fsdk.Markup_GetRichTextContent(self, *args)

    def SetRichTextContent(self, *args):
        return _fsdk.Markup_SetRichTextContent(self, *args)

    def GetRichTextStyle(self, *args):
        return _fsdk.Markup_GetRichTextStyle(self, *args)

    def SetRichTextStyle(self, *args):
        return _fsdk.Markup_SetRichTextStyle(self, *args)

    def AddRichText(self, *args):
        return _fsdk.Markup_AddRichText(self, *args)

    def InsertRichText(self, *args):
        return _fsdk.Markup_InsertRichText(self, *args)

    def RemoveRichText(self, *args):
        return _fsdk.Markup_RemoveRichText(self, *args)

    def SetBorderOpacity(self, *args):
        return _fsdk.Markup_SetBorderOpacity(self, *args)

    def GetBorderOpacity(self, *args):
        return _fsdk.Markup_GetBorderOpacity(self, *args)

    def SetFillOpacity(self, *args):
        return _fsdk.Markup_SetFillOpacity(self, *args)

    def GetFillOpacity(self, *args):
        return _fsdk.Markup_GetFillOpacity(self, *args)
Markup_swigregister = _fsdk.Markup_swigregister
Markup_swigregister(Markup)

class Note(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Note, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Note, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Note(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Note
    __del__ = lambda self: None

    def GetOpenStatus(self, *args):
        return _fsdk.Note_GetOpenStatus(self, *args)

    def SetOpenStatus(self, *args):
        return _fsdk.Note_SetOpenStatus(self, *args)

    def GetIconName(self, *args):
        return _fsdk.Note_GetIconName(self, *args)

    def SetIconName(self, *args):
        return _fsdk.Note_SetIconName(self, *args)

    def GetReplyTo(self, *args):
        return _fsdk.Note_GetReplyTo(self, *args)

    def IsStateAnnot(self, *args):
        return _fsdk.Note_IsStateAnnot(self, *args)

    def GetStateModel(self, *args):
        return _fsdk.Note_GetStateModel(self, *args)

    def GetState(self, *args):
        return _fsdk.Note_GetState(self, *args)

    def SetState(self, *args):
        return _fsdk.Note_SetState(self, *args)
Note_swigregister = _fsdk.Note_swigregister
Note_swigregister(Note)

class TextMarkup(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextMarkup, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextMarkup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TextMarkup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TextMarkup
    __del__ = lambda self: None

    def GetQuadPoints(self, *args):
        return _fsdk.TextMarkup_GetQuadPoints(self, *args)

    def SetQuadPoints(self, *args):
        return _fsdk.TextMarkup_SetQuadPoints(self, *args)
TextMarkup_swigregister = _fsdk.TextMarkup_swigregister
TextMarkup_swigregister(TextMarkup)

class Highlight(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Highlight, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Highlight, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Highlight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Highlight
    __del__ = lambda self: None
Highlight_swigregister = _fsdk.Highlight_swigregister
Highlight_swigregister(Highlight)

class Underline(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Underline, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Underline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Underline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Underline
    __del__ = lambda self: None
Underline_swigregister = _fsdk.Underline_swigregister
Underline_swigregister(Underline)

class StrikeOut(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeOut, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeOut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_StrikeOut(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_StrikeOut
    __del__ = lambda self: None
StrikeOut_swigregister = _fsdk.StrikeOut_swigregister
StrikeOut_swigregister(StrikeOut)

class Squiggly(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Squiggly, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Squiggly, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Squiggly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Squiggly
    __del__ = lambda self: None
Squiggly_swigregister = _fsdk.Squiggly_swigregister
Squiggly_swigregister(Squiggly)

class Link(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Link(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Link
    __del__ = lambda self: None

    def GetQuadPoints(self, *args):
        return _fsdk.Link_GetQuadPoints(self, *args)

    def SetQuadPoints(self, *args):
        return _fsdk.Link_SetQuadPoints(self, *args)

    def GetHighlightingMode(self, *args):
        return _fsdk.Link_GetHighlightingMode(self, *args)

    def SetHighlightingMode(self, *args):
        return _fsdk.Link_SetHighlightingMode(self, *args)

    def GetAction(self, *args):
        return _fsdk.Link_GetAction(self, *args)

    def SetAction(self, *args):
        return _fsdk.Link_SetAction(self, *args)

    def RemoveAction(self, *args):
        return _fsdk.Link_RemoveAction(self, *args)

    def ExecuteJavaScriptAction(self, *args):
        return _fsdk.Link_ExecuteJavaScriptAction(self, *args)
Link_swigregister = _fsdk.Link_swigregister
Link_swigregister(Link)

class Square(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Square, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Square(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Square
    __del__ = lambda self: None

    def GetFillColor(self, *args):
        return _fsdk.Square_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.Square_SetFillColor(self, *args)

    def GetInnerRect(self, *args):
        return _fsdk.Square_GetInnerRect(self, *args)

    def SetInnerRect(self, *args):
        return _fsdk.Square_SetInnerRect(self, *args)

    def SetMeasureRatio(self, *args):
        return _fsdk.Square_SetMeasureRatio(self, *args)

    def GetMeasureRatio(self, *args):
        return _fsdk.Square_GetMeasureRatio(self, *args)

    def GetMeasureRatioW(self, *args):
        return _fsdk.Square_GetMeasureRatioW(self, *args)

    def SetMeasureUnit(self, *args):
        return _fsdk.Square_SetMeasureUnit(self, *args)

    def GetMeasureUnit(self, *args):
        return _fsdk.Square_GetMeasureUnit(self, *args)

    def GetMeasureUnitW(self, *args):
        return _fsdk.Square_GetMeasureUnitW(self, *args)

    def SetMeasureConversionFactor(self, *args):
        return _fsdk.Square_SetMeasureConversionFactor(self, *args)

    def GetMeasureConversionFactor(self, *args):
        return _fsdk.Square_GetMeasureConversionFactor(self, *args)
Square_swigregister = _fsdk.Square_swigregister
Square_swigregister(Square)

class Circle(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Circle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Circle
    __del__ = lambda self: None

    def GetFillColor(self, *args):
        return _fsdk.Circle_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.Circle_SetFillColor(self, *args)

    def GetInnerRect(self, *args):
        return _fsdk.Circle_GetInnerRect(self, *args)

    def SetInnerRect(self, *args):
        return _fsdk.Circle_SetInnerRect(self, *args)

    def SetMeasureRatio(self, *args):
        return _fsdk.Circle_SetMeasureRatio(self, *args)

    def GetMeasureRatio(self, *args):
        return _fsdk.Circle_GetMeasureRatio(self, *args)

    def GetMeasureRatioW(self, *args):
        return _fsdk.Circle_GetMeasureRatioW(self, *args)

    def SetMeasureUnit(self, *args):
        return _fsdk.Circle_SetMeasureUnit(self, *args)

    def GetMeasureUnit(self, *args):
        return _fsdk.Circle_GetMeasureUnit(self, *args)

    def GetMeasureUnitW(self, *args):
        return _fsdk.Circle_GetMeasureUnitW(self, *args)

    def SetMeasureConversionFactor(self, *args):
        return _fsdk.Circle_SetMeasureConversionFactor(self, *args)

    def GetMeasureConversionFactor(self, *args):
        return _fsdk.Circle_GetMeasureConversionFactor(self, *args)
Circle_swigregister = _fsdk.Circle_swigregister
Circle_swigregister(Circle)

class FreeText(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FreeText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_FreeText
    __del__ = lambda self: None

    def GetFillColor(self, *args):
        return _fsdk.FreeText_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.FreeText_SetFillColor(self, *args)

    def GetAlignment(self, *args):
        return _fsdk.FreeText_GetAlignment(self, *args)

    def SetAlignment(self, *args):
        return _fsdk.FreeText_SetAlignment(self, *args)

    def GetInnerRect(self, *args):
        return _fsdk.FreeText_GetInnerRect(self, *args)

    def SetInnerRect(self, *args):
        return _fsdk.FreeText_SetInnerRect(self, *args)

    def GetDefaultAppearance(self, *args):
        return _fsdk.FreeText_GetDefaultAppearance(self, *args)

    def SetDefaultAppearance(self, *args):
        return _fsdk.FreeText_SetDefaultAppearance(self, *args)

    def GetCalloutLineEndingStyle(self, *args):
        return _fsdk.FreeText_GetCalloutLineEndingStyle(self, *args)

    def SetCalloutLineEndingStyle(self, *args):
        return _fsdk.FreeText_SetCalloutLineEndingStyle(self, *args)

    def GetCalloutLinePoints(self, *args):
        return _fsdk.FreeText_GetCalloutLinePoints(self, *args)

    def SetCalloutLinePoints(self, *args):
        return _fsdk.FreeText_SetCalloutLinePoints(self, *args)

    def SetTextMatrix(self, *args):
        return _fsdk.FreeText_SetTextMatrix(self, *args)

    def GetTextMatrix(self, *args):
        return _fsdk.FreeText_GetTextMatrix(self, *args)

    def GetRotation(self, *args):
        return _fsdk.FreeText_GetRotation(self, *args)

    def SetRotation(self, *args):
        return _fsdk.FreeText_SetRotation(self, *args)

    def Rotate(self, *args):
        return _fsdk.FreeText_Rotate(self, *args)

    def AllowTextOverflow(self, *args):
        return _fsdk.FreeText_AllowTextOverflow(self, *args)
FreeText_swigregister = _fsdk.FreeText_swigregister
FreeText_swigregister(FreeText)

class Line(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr
    e_CapPosInline = _fsdk.Line_e_CapPosInline
    e_CapPosTop = _fsdk.Line_e_CapPosTop

    def __init__(self, *args):
        this = _fsdk.new_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Line
    __del__ = lambda self: None

    def GetLineStartStyle(self, *args):
        return _fsdk.Line_GetLineStartStyle(self, *args)

    def SetLineStartStyle(self, *args):
        return _fsdk.Line_SetLineStartStyle(self, *args)

    def GetLineEndStyle(self, *args):
        return _fsdk.Line_GetLineEndStyle(self, *args)

    def SetLineEndStyle(self, *args):
        return _fsdk.Line_SetLineEndStyle(self, *args)

    def GetStyleFillColor(self, *args):
        return _fsdk.Line_GetStyleFillColor(self, *args)

    def SetStyleFillColor(self, *args):
        return _fsdk.Line_SetStyleFillColor(self, *args)

    def GetStartPoint(self, *args):
        return _fsdk.Line_GetStartPoint(self, *args)

    def SetStartPoint(self, *args):
        return _fsdk.Line_SetStartPoint(self, *args)

    def GetEndPoint(self, *args):
        return _fsdk.Line_GetEndPoint(self, *args)

    def SetEndPoint(self, *args):
        return _fsdk.Line_SetEndPoint(self, *args)

    def HasCaption(self, *args):
        return _fsdk.Line_HasCaption(self, *args)

    def EnableCaption(self, *args):
        return _fsdk.Line_EnableCaption(self, *args)

    def GetCaptionPositionType(self, *args):
        return _fsdk.Line_GetCaptionPositionType(self, *args)

    def SetCaptionPositionType(self, *args):
        return _fsdk.Line_SetCaptionPositionType(self, *args)

    def GetCaptionOffset(self, *args):
        return _fsdk.Line_GetCaptionOffset(self, *args)

    def SetCaptionOffset(self, *args):
        return _fsdk.Line_SetCaptionOffset(self, *args)

    def GetLeaderLineLength(self, *args):
        return _fsdk.Line_GetLeaderLineLength(self, *args)

    def SetLeaderLineLength(self, *args):
        return _fsdk.Line_SetLeaderLineLength(self, *args)

    def GetLeaderLineExtensionLength(self, *args):
        return _fsdk.Line_GetLeaderLineExtensionLength(self, *args)

    def SetLeaderLineExtensionLength(self, *args):
        return _fsdk.Line_SetLeaderLineExtensionLength(self, *args)

    def GetLeaderLineOffset(self, *args):
        return _fsdk.Line_GetLeaderLineOffset(self, *args)

    def SetLeaderLineOffset(self, *args):
        return _fsdk.Line_SetLeaderLineOffset(self, *args)

    def SetMeasureRatio(self, *args):
        return _fsdk.Line_SetMeasureRatio(self, *args)

    def GetMeasureRatio(self, *args):
        return _fsdk.Line_GetMeasureRatio(self, *args)

    def GetMeasureRatioW(self, *args):
        return _fsdk.Line_GetMeasureRatioW(self, *args)

    def SetMeasureUnit(self, *args):
        return _fsdk.Line_SetMeasureUnit(self, *args)

    def GetMeasureUnit(self, *args):
        return _fsdk.Line_GetMeasureUnit(self, *args)

    def GetMeasureUnitW(self, *args):
        return _fsdk.Line_GetMeasureUnitW(self, *args)

    def SetMeasureConversionFactor(self, *args):
        return _fsdk.Line_SetMeasureConversionFactor(self, *args)

    def GetMeasureConversionFactor(self, *args):
        return _fsdk.Line_GetMeasureConversionFactor(self, *args)
Line_swigregister = _fsdk.Line_swigregister
Line_swigregister(Line)

class Ink(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ink, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Ink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Ink
    __del__ = lambda self: None

    def GetInkList(self, *args):
        return _fsdk.Ink_GetInkList(self, *args)

    def SetInkList(self, *args):
        return _fsdk.Ink_SetInkList(self, *args)

    def EnableUseBezier(self, *args):
        return _fsdk.Ink_EnableUseBezier(self, *args)
Ink_swigregister = _fsdk.Ink_swigregister
Ink_swigregister(Ink)

class Stamp(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stamp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Stamp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Stamp
    __del__ = lambda self: None

    def GetIconName(self, *args):
        return _fsdk.Stamp_GetIconName(self, *args)

    def SetIconName(self, *args):
        return _fsdk.Stamp_SetIconName(self, *args)

    def SetBitmap(self, *args):
        return _fsdk.Stamp_SetBitmap(self, *args)

    def SetImage(self, *args):
        return _fsdk.Stamp_SetImage(self, *args)

    def SetRotation(self, *args):
        return _fsdk.Stamp_SetRotation(self, *args)

    def GetRotation(self, *args):
        return _fsdk.Stamp_GetRotation(self, *args)

    def Rotate(self, *args):
        return _fsdk.Stamp_Rotate(self, *args)
Stamp_swigregister = _fsdk.Stamp_swigregister
Stamp_swigregister(Stamp)

class Screen(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Screen, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Screen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Screen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Screen
    __del__ = lambda self: None

    def SetImage(self, *args):
        return _fsdk.Screen_SetImage(self, *args)

    def GetBitmap(self, *args):
        return _fsdk.Screen_GetBitmap(self, *args)

    def GetMKDict(self, *args):
        return _fsdk.Screen_GetMKDict(self, *args)

    def SetMKDict(self, *args):
        return _fsdk.Screen_SetMKDict(self, *args)

    def SetRotation(self, *args):
        return _fsdk.Screen_SetRotation(self, *args)

    def GetRotation(self, *args):
        return _fsdk.Screen_GetRotation(self, *args)

    def GetOpacity(self, *args):
        return _fsdk.Screen_GetOpacity(self, *args)

    def SetOpacity(self, *args):
        return _fsdk.Screen_SetOpacity(self, *args)

    def GetTitle(self, *args):
        return _fsdk.Screen_GetTitle(self, *args)

    def SetTitle(self, *args):
        return _fsdk.Screen_SetTitle(self, *args)

    def GetAction(self, *args):
        return _fsdk.Screen_GetAction(self, *args)

    def SetAction(self, *args):
        return _fsdk.Screen_SetAction(self, *args)

    def RemoveAction(self, *args):
        return _fsdk.Screen_RemoveAction(self, *args)
Screen_swigregister = _fsdk.Screen_swigregister
Screen_swigregister(Screen)

class Polygon(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Polygon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Polygon
    __del__ = lambda self: None

    def GetFillColor(self, *args):
        return _fsdk.Polygon_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.Polygon_SetFillColor(self, *args)

    def GetVertexes(self, *args):
        return _fsdk.Polygon_GetVertexes(self, *args)

    def SetVertexes(self, *args):
        return _fsdk.Polygon_SetVertexes(self, *args)

    def SetMeasureRatio(self, *args):
        return _fsdk.Polygon_SetMeasureRatio(self, *args)

    def GetMeasureRatio(self, *args):
        return _fsdk.Polygon_GetMeasureRatio(self, *args)

    def GetMeasureRatioW(self, *args):
        return _fsdk.Polygon_GetMeasureRatioW(self, *args)

    def SetMeasureUnit(self, *args):
        return _fsdk.Polygon_SetMeasureUnit(self, *args)

    def GetMeasureUnit(self, *args):
        return _fsdk.Polygon_GetMeasureUnit(self, *args)

    def GetMeasureUnitW(self, *args):
        return _fsdk.Polygon_GetMeasureUnitW(self, *args)

    def SetMeasureConversionFactor(self, *args):
        return _fsdk.Polygon_SetMeasureConversionFactor(self, *args)

    def GetMeasureConversionFactor(self, *args):
        return _fsdk.Polygon_GetMeasureConversionFactor(self, *args)
Polygon_swigregister = _fsdk.Polygon_swigregister
Polygon_swigregister(Polygon)

class PolyLine(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyLine, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PolyLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PolyLine
    __del__ = lambda self: None

    def GetStyleFillColor(self, *args):
        return _fsdk.PolyLine_GetStyleFillColor(self, *args)

    def SetStyleFillColor(self, *args):
        return _fsdk.PolyLine_SetStyleFillColor(self, *args)

    def GetVertexes(self, *args):
        return _fsdk.PolyLine_GetVertexes(self, *args)

    def SetVertexes(self, *args):
        return _fsdk.PolyLine_SetVertexes(self, *args)

    def GetLineStartStyle(self, *args):
        return _fsdk.PolyLine_GetLineStartStyle(self, *args)

    def SetLineStartStyle(self, *args):
        return _fsdk.PolyLine_SetLineStartStyle(self, *args)

    def GetLineEndStyle(self, *args):
        return _fsdk.PolyLine_GetLineEndStyle(self, *args)

    def SetLineEndStyle(self, *args):
        return _fsdk.PolyLine_SetLineEndStyle(self, *args)

    def SetMeasureRatio(self, *args):
        return _fsdk.PolyLine_SetMeasureRatio(self, *args)

    def GetMeasureRatio(self, *args):
        return _fsdk.PolyLine_GetMeasureRatio(self, *args)

    def GetMeasureRatioW(self, *args):
        return _fsdk.PolyLine_GetMeasureRatioW(self, *args)

    def SetMeasureUnit(self, *args):
        return _fsdk.PolyLine_SetMeasureUnit(self, *args)

    def GetMeasureUnit(self, *args):
        return _fsdk.PolyLine_GetMeasureUnit(self, *args)

    def GetMeasureUnitW(self, *args):
        return _fsdk.PolyLine_GetMeasureUnitW(self, *args)

    def SetMeasureConversionFactor(self, *args):
        return _fsdk.PolyLine_SetMeasureConversionFactor(self, *args)

    def GetMeasureConversionFactor(self, *args):
        return _fsdk.PolyLine_GetMeasureConversionFactor(self, *args)
PolyLine_swigregister = _fsdk.PolyLine_swigregister
PolyLine_swigregister(PolyLine)

class Caret(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Caret, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Caret, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Caret(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Caret
    __del__ = lambda self: None

    def GetInnerRect(self, *args):
        return _fsdk.Caret_GetInnerRect(self, *args)

    def SetInnerRect(self, *args):
        return _fsdk.Caret_SetInnerRect(self, *args)
Caret_swigregister = _fsdk.Caret_swigregister
Caret_swigregister(Caret)

class FileAttachment(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAttachment, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileAttachment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FileAttachment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_FileAttachment
    __del__ = lambda self: None

    def SetFileSpec(self, *args):
        return _fsdk.FileAttachment_SetFileSpec(self, *args)

    def GetFileSpec(self, *args):
        return _fsdk.FileAttachment_GetFileSpec(self, *args)

    def GetIconName(self, *args):
        return _fsdk.FileAttachment_GetIconName(self, *args)

    def SetIconName(self, *args):
        return _fsdk.FileAttachment_SetIconName(self, *args)
FileAttachment_swigregister = _fsdk.FileAttachment_swigregister
FileAttachment_swigregister(FileAttachment)

class Popup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Popup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Popup
    __del__ = lambda self: None

    def GetOpenStatus(self, *args):
        return _fsdk.Popup_GetOpenStatus(self, *args)

    def SetOpenStatus(self, *args):
        return _fsdk.Popup_SetOpenStatus(self, *args)

    def GetParent(self, *args):
        return _fsdk.Popup_GetParent(self, *args)
Popup_swigregister = _fsdk.Popup_swigregister
Popup_swigregister(Popup)

class PSInk(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSInk, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PSInk, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PSInk(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PSInk
    __del__ = lambda self: None
PSInk_swigregister = _fsdk.PSInk_swigregister
PSInk_swigregister(PSInk)

class Widget(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    __repr__ = _swig_repr
    e_LineSpacingSingle = _fsdk.Widget_e_LineSpacingSingle
    e_LineSpacingOneAndHalf = _fsdk.Widget_e_LineSpacingOneAndHalf
    e_LineSpacingDouble = _fsdk.Widget_e_LineSpacingDouble
    e_LineSpacingExactValue = _fsdk.Widget_e_LineSpacingExactValue
    e_LineSpacingAuto = _fsdk.Widget_e_LineSpacingAuto

    def __init__(self, *args):
        this = _fsdk.new_Widget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Widget
    __del__ = lambda self: None

    def GetField(self, *args):
        return _fsdk.Widget_GetField(self, *args)

    def GetControl(self, *args):
        return _fsdk.Widget_GetControl(self, *args)

    def GetHighlightingMode(self, *args):
        return _fsdk.Widget_GetHighlightingMode(self, *args)

    def SetHighlightingMode(self, *args):
        return _fsdk.Widget_SetHighlightingMode(self, *args)

    def GetAction(self, *args):
        return _fsdk.Widget_GetAction(self, *args)

    def SetAction(self, *args):
        return _fsdk.Widget_SetAction(self, *args)

    def RemoveAction(self, *args):
        return _fsdk.Widget_RemoveAction(self, *args)

    def HasMKEntry(self, *args):
        return _fsdk.Widget_HasMKEntry(self, *args)

    def RemoveMKEntry(self, *args):
        return _fsdk.Widget_RemoveMKEntry(self, *args)

    def GetMKRotation(self, *args):
        return _fsdk.Widget_GetMKRotation(self, *args)

    def SetMKRotation(self, *args):
        return _fsdk.Widget_SetMKRotation(self, *args)

    def GetMKBorderColor(self, *args):
        return _fsdk.Widget_GetMKBorderColor(self, *args)

    def SetMKBorderColor(self, *args):
        return _fsdk.Widget_SetMKBorderColor(self, *args)

    def GetMKBackgroundColor(self, *args):
        return _fsdk.Widget_GetMKBackgroundColor(self, *args)

    def SetMKBackgroundColor(self, *args):
        return _fsdk.Widget_SetMKBackgroundColor(self, *args)

    def GetMKNormalCaption(self, *args):
        return _fsdk.Widget_GetMKNormalCaption(self, *args)

    def SetMKNormalCaption(self, *args):
        return _fsdk.Widget_SetMKNormalCaption(self, *args)

    def GetMKRolloverCaption(self, *args):
        return _fsdk.Widget_GetMKRolloverCaption(self, *args)

    def SetMKRolloverCaption(self, *args):
        return _fsdk.Widget_SetMKRolloverCaption(self, *args)

    def GetMKDownCaption(self, *args):
        return _fsdk.Widget_GetMKDownCaption(self, *args)

    def SetMKDownCaption(self, *args):
        return _fsdk.Widget_SetMKDownCaption(self, *args)

    def GetMKNormalIconBitmap(self, *args):
        return _fsdk.Widget_GetMKNormalIconBitmap(self, *args)

    def SetMKNormalIconBitmap(self, *args):
        return _fsdk.Widget_SetMKNormalIconBitmap(self, *args)

    def SetMKNormalIconImage(self, *args):
        return _fsdk.Widget_SetMKNormalIconImage(self, *args)

    def GetMKRolloverIconBitmap(self, *args):
        return _fsdk.Widget_GetMKRolloverIconBitmap(self, *args)

    def SetMKRolloverIconBitmap(self, *args):
        return _fsdk.Widget_SetMKRolloverIconBitmap(self, *args)

    def SetMKRolloverIconImage(self, *args):
        return _fsdk.Widget_SetMKRolloverIconImage(self, *args)

    def GetMKDownIconBitmap(self, *args):
        return _fsdk.Widget_GetMKDownIconBitmap(self, *args)

    def SetMKDownIconBitmap(self, *args):
        return _fsdk.Widget_SetMKDownIconBitmap(self, *args)

    def SetMKDownIconImage(self, *args):
        return _fsdk.Widget_SetMKDownIconImage(self, *args)

    def GetMKIconFit(self, *args):
        return _fsdk.Widget_GetMKIconFit(self, *args)

    def SetMKIconFit(self, *args):
        return _fsdk.Widget_SetMKIconFit(self, *args)

    def GetMKIconCaptionRelation(self, *args):
        return _fsdk.Widget_GetMKIconCaptionRelation(self, *args)

    def SetMKIconCaptionRelation(self, *args):
        return _fsdk.Widget_SetMKIconCaptionRelation(self, *args)

    def SetAppearanceState(self, *args):
        return _fsdk.Widget_SetAppearanceState(self, *args)

    def GetAppearanceState(self, *args):
        return _fsdk.Widget_GetAppearanceState(self, *args)

    def GetAppearanceOnStateName(self, *args):
        return _fsdk.Widget_GetAppearanceOnStateName(self, *args)

    def GetLineSpacing(self, *args):
        return _fsdk.Widget_GetLineSpacing(self, *args)

    def SetLineSpacing(self, *args):
        return _fsdk.Widget_SetLineSpacing(self, *args)
Widget_swigregister = _fsdk.Widget_swigregister
Widget_swigregister(Widget)

class Redact(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redact, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Redact, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Redact(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Redact
    __del__ = lambda self: None

    def GetQuadPoints(self, *args):
        return _fsdk.Redact_GetQuadPoints(self, *args)

    def SetQuadPoints(self, *args):
        return _fsdk.Redact_SetQuadPoints(self, *args)

    def GetFillColor(self, *args):
        return _fsdk.Redact_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.Redact_SetFillColor(self, *args)

    def GetApplyFillColor(self, *args):
        return _fsdk.Redact_GetApplyFillColor(self, *args)

    def SetApplyFillColor(self, *args):
        return _fsdk.Redact_SetApplyFillColor(self, *args)

    def GetOverlayText(self, *args):
        return _fsdk.Redact_GetOverlayText(self, *args)

    def SetOverlayText(self, *args):
        return _fsdk.Redact_SetOverlayText(self, *args)

    def IsOverlayTextRepeated(self, *args):
        return _fsdk.Redact_IsOverlayTextRepeated(self, *args)

    def EnableRepeatOverlayText(self, *args):
        return _fsdk.Redact_EnableRepeatOverlayText(self, *args)

    def GetOverlayTextAlignment(self, *args):
        return _fsdk.Redact_GetOverlayTextAlignment(self, *args)

    def SetOverlayTextAlignment(self, *args):
        return _fsdk.Redact_SetOverlayTextAlignment(self, *args)

    def EnableAutoFontSize(self, *args):
        return _fsdk.Redact_EnableAutoFontSize(self, *args)

    def GetDefaultAppearance(self, *args):
        return _fsdk.Redact_GetDefaultAppearance(self, *args)

    def SetDefaultAppearance(self, *args):
        return _fsdk.Redact_SetDefaultAppearance(self, *args)

    def Apply(self, *args):
        return _fsdk.Redact_Apply(self, *args)
Redact_swigregister = _fsdk.Redact_swigregister
Redact_swigregister(Redact)

class Sound(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    e_SampleEncodingFormatRaw = _fsdk.Sound_e_SampleEncodingFormatRaw
    e_SampleEncodingFormatSigned = _fsdk.Sound_e_SampleEncodingFormatSigned
    e_SampleEncodingFormatMuLaw = _fsdk.Sound_e_SampleEncodingFormatMuLaw
    e_SampleEncodingFormatALaw = _fsdk.Sound_e_SampleEncodingFormatALaw

    def __init__(self, *args):
        this = _fsdk.new_Sound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Sound
    __del__ = lambda self: None

    def GetSoundStream(self, *args):
        return _fsdk.Sound_GetSoundStream(self, *args)

    def GetSamplingRate(self, *args):
        return _fsdk.Sound_GetSamplingRate(self, *args)

    def GetChannelCount(self, *args):
        return _fsdk.Sound_GetChannelCount(self, *args)

    def GetBits(self, *args):
        return _fsdk.Sound_GetBits(self, *args)

    def GetSampleEncodingFormat(self, *args):
        return _fsdk.Sound_GetSampleEncodingFormat(self, *args)

    def GetCompressionFormat(self, *args):
        return _fsdk.Sound_GetCompressionFormat(self, *args)

    def GetFileSpec(self, *args):
        return _fsdk.Sound_GetFileSpec(self, *args)
Sound_swigregister = _fsdk.Sound_swigregister
Sound_swigregister(Sound)

class PagingSeal(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagingSeal, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PagingSeal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PagingSeal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PagingSeal
    __del__ = lambda self: None

    def GetPagingSealSignature(self, *args):
        return _fsdk.PagingSeal_GetPagingSealSignature(self, *args)
PagingSeal_swigregister = _fsdk.PagingSeal_swigregister
PagingSeal_swigregister(PagingSeal)

class GraphicsObjectArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsObjectArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsObjectArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_GraphicsObjectArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.GraphicsObjectArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.GraphicsObjectArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.GraphicsObjectArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.GraphicsObjectArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.GraphicsObjectArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.GraphicsObjectArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.GraphicsObjectArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.GraphicsObjectArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.GraphicsObjectArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.GraphicsObjectArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.GraphicsObjectArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_GraphicsObjectArray
    __del__ = lambda self: None
GraphicsObjectArray_swigregister = _fsdk.GraphicsObjectArray_swigregister
GraphicsObjectArray_swigregister(GraphicsObjectArray)

class TextObjectArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextObjectArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextObjectArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TextObjectArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.TextObjectArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.TextObjectArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.TextObjectArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.TextObjectArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.TextObjectArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.TextObjectArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.TextObjectArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.TextObjectArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.TextObjectArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.TextObjectArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.TextObjectArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_TextObjectArray
    __del__ = lambda self: None
TextObjectArray_swigregister = _fsdk.TextObjectArray_swigregister
TextObjectArray_swigregister(TextObjectArray)

class ColorState(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorState, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorState, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_ColorState
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ColorState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ColorState___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ColorState___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ColorState_IsEmpty(self, *args)

    def GetFillColor(self, *args):
        return _fsdk.ColorState_GetFillColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.ColorState_SetFillColor(self, *args)

    def GetStrokeColor(self, *args):
        return _fsdk.ColorState_GetStrokeColor(self, *args)

    def SetStrokeColor(self, *args):
        return _fsdk.ColorState_SetStrokeColor(self, *args)
ColorState_swigregister = _fsdk.ColorState_swigregister
ColorState_swigregister(ColorState)

class MarkedContent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkedContent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarkedContent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_MarkedContent
    __del__ = lambda self: None

    def HasTag(self, *args):
        return _fsdk.MarkedContent_HasTag(self, *args)

    def GetItemCount(self, *args):
        return _fsdk.MarkedContent_GetItemCount(self, *args)

    def GetItemTagName(self, *args):
        return _fsdk.MarkedContent_GetItemTagName(self, *args)

    def GetItemMCID(self, *args):
        return _fsdk.MarkedContent_GetItemMCID(self, *args)

    def GetItemPropertyDict(self, *args):
        return _fsdk.MarkedContent_GetItemPropertyDict(self, *args)

    def AddItem(self, *args):
        return _fsdk.MarkedContent_AddItem(self, *args)

    def RemoveItem(self, *args):
        return _fsdk.MarkedContent_RemoveItem(self, *args)
MarkedContent_swigregister = _fsdk.MarkedContent_swigregister
MarkedContent_swigregister(MarkedContent)

class GraphicsObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    e_BlendNormal = _fsdk.GraphicsObject_e_BlendNormal
    e_BlendMultiply = _fsdk.GraphicsObject_e_BlendMultiply
    e_BlendScreen = _fsdk.GraphicsObject_e_BlendScreen
    e_BlendOverlay = _fsdk.GraphicsObject_e_BlendOverlay
    e_BlendDarken = _fsdk.GraphicsObject_e_BlendDarken
    e_BlendLighten = _fsdk.GraphicsObject_e_BlendLighten
    e_BlendColorDodge = _fsdk.GraphicsObject_e_BlendColorDodge
    e_BlendColorBurn = _fsdk.GraphicsObject_e_BlendColorBurn
    e_BlendHardlight = _fsdk.GraphicsObject_e_BlendHardlight
    e_BlendSoftlight = _fsdk.GraphicsObject_e_BlendSoftlight
    e_BlendDifference = _fsdk.GraphicsObject_e_BlendDifference
    e_BlendExclusion = _fsdk.GraphicsObject_e_BlendExclusion
    e_BlendHue = _fsdk.GraphicsObject_e_BlendHue
    e_BlendSaturation = _fsdk.GraphicsObject_e_BlendSaturation
    e_BlendColor = _fsdk.GraphicsObject_e_BlendColor
    e_BlendLuminosity = _fsdk.GraphicsObject_e_BlendLuminosity
    e_TypeAll = _fsdk.GraphicsObject_e_TypeAll
    e_TypeText = _fsdk.GraphicsObject_e_TypeText
    e_TypePath = _fsdk.GraphicsObject_e_TypePath
    e_TypeImage = _fsdk.GraphicsObject_e_TypeImage
    e_TypeShading = _fsdk.GraphicsObject_e_TypeShading
    e_TypeFormXObject = _fsdk.GraphicsObject_e_TypeFormXObject
    e_TypeInlines = _fsdk.GraphicsObject_e_TypeInlines
    e_TypeEmptyMarkedContent = _fsdk.GraphicsObject_e_TypeEmptyMarkedContent

    def Release(self, *args):
        return _fsdk.GraphicsObject_Release(self, *args)

    def GetType(self, *args):
        return _fsdk.GraphicsObject_GetType(self, *args)

    def GetRect(self, *args):
        return _fsdk.GraphicsObject_GetRect(self, *args)

    def HasTransparency(self, *args):
        return _fsdk.GraphicsObject_HasTransparency(self, *args)

    def GetStrokeColor(self, *args):
        return _fsdk.GraphicsObject_GetStrokeColor(self, *args)

    def GetFillColor(self, *args):
        return _fsdk.GraphicsObject_GetFillColor(self, *args)

    def SetStrokeColor(self, *args):
        return _fsdk.GraphicsObject_SetStrokeColor(self, *args)

    def SetFillColor(self, *args):
        return _fsdk.GraphicsObject_SetFillColor(self, *args)

    def GetColorState(self, *args):
        return _fsdk.GraphicsObject_GetColorState(self, *args)

    def SetColorState(self, *args):
        return _fsdk.GraphicsObject_SetColorState(self, *args)

    def SetFillOpacity(self, *args):
        return _fsdk.GraphicsObject_SetFillOpacity(self, *args)

    def SetStrokeOpacity(self, *args):
        return _fsdk.GraphicsObject_SetStrokeOpacity(self, *args)

    def GetFillOpacity(self, *args):
        return _fsdk.GraphicsObject_GetFillOpacity(self, *args)

    def GetStrokeOpacity(self, *args):
        return _fsdk.GraphicsObject_GetStrokeOpacity(self, *args)

    def GetMatrix(self, *args):
        return _fsdk.GraphicsObject_GetMatrix(self, *args)

    def SetMatrix(self, *args):
        return _fsdk.GraphicsObject_SetMatrix(self, *args)

    def Transform(self, *args):
        return _fsdk.GraphicsObject_Transform(self, *args)

    def Clone(self, *args):
        return _fsdk.GraphicsObject_Clone(self, *args)

    def GetGraphState(self, *args):
        return _fsdk.GraphicsObject_GetGraphState(self, *args)

    def SetGraphState(self, *args):
        return _fsdk.GraphicsObject_SetGraphState(self, *args)

    def GetBlendMode(self, *args):
        return _fsdk.GraphicsObject_GetBlendMode(self, *args)

    def SetBlendMode(self, *args):
        return _fsdk.GraphicsObject_SetBlendMode(self, *args)

    def GetClipPathCount(self, *args):
        return _fsdk.GraphicsObject_GetClipPathCount(self, *args)

    def GetClipPath(self, *args):
        return _fsdk.GraphicsObject_GetClipPath(self, *args)

    def GetClipPathFillMode(self, *args):
        return _fsdk.GraphicsObject_GetClipPathFillMode(self, *args)

    def AddClipPath(self, *args):
        return _fsdk.GraphicsObject_AddClipPath(self, *args)

    def RemoveClipPath(self, *args):
        return _fsdk.GraphicsObject_RemoveClipPath(self, *args)

    def GetClipTextObjectCount(self, *args):
        return _fsdk.GraphicsObject_GetClipTextObjectCount(self, *args)

    def GetClipTextObject(self, *args):
        return _fsdk.GraphicsObject_GetClipTextObject(self, *args)

    def AddClipTextObject(self, *args):
        return _fsdk.GraphicsObject_AddClipTextObject(self, *args)

    def RemoveClipTextObject(self, *args):
        return _fsdk.GraphicsObject_RemoveClipTextObject(self, *args)

    def GetClipRect(self, *args):
        return _fsdk.GraphicsObject_GetClipRect(self, *args)

    def SetClipRect(self, *args):
        return _fsdk.GraphicsObject_SetClipRect(self, *args)

    def ClearClips(self, *args):
        return _fsdk.GraphicsObject_ClearClips(self, *args)

    def GetMarkedContent(self, *args):
        return _fsdk.GraphicsObject_GetMarkedContent(self, *args)

    def GetLayers(self, *args):
        return _fsdk.GraphicsObject_GetLayers(self, *args)

    def GetTextObject(self, *args):
        return _fsdk.GraphicsObject_GetTextObject(self, *args)

    def GetFormXObject(self, *args):
        return _fsdk.GraphicsObject_GetFormXObject(self, *args)

    def GetImageObject(self, *args):
        return _fsdk.GraphicsObject_GetImageObject(self, *args)

    def GetPathObject(self, *args):
        return _fsdk.GraphicsObject_GetPathObject(self, *args)

    def GetShadingObject(self, *args):
        return _fsdk.GraphicsObject_GetShadingObject(self, *args)

    def Rotate(self, *args):
        return _fsdk.GraphicsObject_Rotate(self, *args)
GraphicsObject_swigregister = _fsdk.GraphicsObject_swigregister
GraphicsObject_swigregister(GraphicsObject)

class TextState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextState, name)
    __repr__ = _swig_repr
    e_ModeFill = _fsdk.TextState_e_ModeFill
    e_ModeStroke = _fsdk.TextState_e_ModeStroke
    e_ModeFillStroke = _fsdk.TextState_e_ModeFillStroke
    e_ModeInvisible = _fsdk.TextState_e_ModeInvisible
    e_ModeFillClip = _fsdk.TextState_e_ModeFillClip
    e_ModeStrokeClip = _fsdk.TextState_e_ModeStrokeClip
    e_ModeFillStrokeClip = _fsdk.TextState_e_ModeFillStrokeClip
    e_ModeClip = _fsdk.TextState_e_ModeClip

    def __init__(self, *args):
        this = _fsdk.new_TextState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.TextState_Set(self, *args)
    __swig_setmethods__["version"] = _fsdk.TextState_version_set
    __swig_getmethods__["version"] = _fsdk.TextState_version_get
    if _newclass:
        version = _swig_property(_fsdk.TextState_version_get, _fsdk.TextState_version_set)
    __swig_setmethods__["font"] = _fsdk.TextState_font_set
    __swig_getmethods__["font"] = _fsdk.TextState_font_get
    if _newclass:
        font = _swig_property(_fsdk.TextState_font_get, _fsdk.TextState_font_set)
    __swig_setmethods__["font_size"] = _fsdk.TextState_font_size_set
    __swig_getmethods__["font_size"] = _fsdk.TextState_font_size_get
    if _newclass:
        font_size = _swig_property(_fsdk.TextState_font_size_get, _fsdk.TextState_font_size_set)
    __swig_setmethods__["font_vertical_size"] = _fsdk.TextState_font_vertical_size_set
    __swig_getmethods__["font_vertical_size"] = _fsdk.TextState_font_vertical_size_get
    if _newclass:
        font_vertical_size = _swig_property(_fsdk.TextState_font_vertical_size_get, _fsdk.TextState_font_vertical_size_set)
    __swig_setmethods__["font_horizontal_size"] = _fsdk.TextState_font_horizontal_size_set
    __swig_getmethods__["font_horizontal_size"] = _fsdk.TextState_font_horizontal_size_get
    if _newclass:
        font_horizontal_size = _swig_property(_fsdk.TextState_font_horizontal_size_get, _fsdk.TextState_font_horizontal_size_set)
    __swig_setmethods__["charspace"] = _fsdk.TextState_charspace_set
    __swig_getmethods__["charspace"] = _fsdk.TextState_charspace_get
    if _newclass:
        charspace = _swig_property(_fsdk.TextState_charspace_get, _fsdk.TextState_charspace_set)
    __swig_setmethods__["wordspace"] = _fsdk.TextState_wordspace_set
    __swig_getmethods__["wordspace"] = _fsdk.TextState_wordspace_get
    if _newclass:
        wordspace = _swig_property(_fsdk.TextState_wordspace_get, _fsdk.TextState_wordspace_set)
    __swig_setmethods__["textmode"] = _fsdk.TextState_textmode_set
    __swig_getmethods__["textmode"] = _fsdk.TextState_textmode_get
    if _newclass:
        textmode = _swig_property(_fsdk.TextState_textmode_get, _fsdk.TextState_textmode_set)
    __swig_setmethods__["origin_position"] = _fsdk.TextState_origin_position_set
    __swig_getmethods__["origin_position"] = _fsdk.TextState_origin_position_get
    if _newclass:
        origin_position = _swig_property(_fsdk.TextState_origin_position_get, _fsdk.TextState_origin_position_set)
    __swig_setmethods__["textmatrix"] = _fsdk.TextState_textmatrix_set
    __swig_getmethods__["textmatrix"] = _fsdk.TextState_textmatrix_get
    if _newclass:
        textmatrix = _swig_property(_fsdk.TextState_textmatrix_get, _fsdk.TextState_textmatrix_set)
    __swig_destroy__ = _fsdk.delete_TextState
    __del__ = lambda self: None
TextState_swigregister = _fsdk.TextState_swigregister
TextState_swigregister(TextState)

class ImageObject(GraphicsObject):
    __swig_setmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.ImageObject_Create)
    else:
        Create = _fsdk.ImageObject_Create

    def SetBitmap(self, *args):
        return _fsdk.ImageObject_SetBitmap(self, *args)

    def SetImage(self, *args):
        return _fsdk.ImageObject_SetImage(self, *args)

    def CloneBitmap(self, *args):
        return _fsdk.ImageObject_CloneBitmap(self, *args)
    if _newclass:
        CreateFromType3TextObject = staticmethod(_fsdk.ImageObject_CreateFromType3TextObject)
    else:
        CreateFromType3TextObject = _fsdk.ImageObject_CreateFromType3TextObject

    def GetColorSpace(self, *args):
        return _fsdk.ImageObject_GetColorSpace(self, *args)

    def GetStream(self, *args):
        return _fsdk.ImageObject_GetStream(self, *args)

    def IsImageMask(self, *args):
        return _fsdk.ImageObject_IsImageMask(self, *args)

    def GetMask(self, *args):
        return _fsdk.ImageObject_GetMask(self, *args)
ImageObject_swigregister = _fsdk.ImageObject_swigregister
ImageObject_swigregister(ImageObject)

def ImageObject_Create(*args):
    return _fsdk.ImageObject_Create(*args)
ImageObject_Create = _fsdk.ImageObject_Create

def ImageObject_CreateFromType3TextObject(*args):
    return _fsdk.ImageObject_CreateFromType3TextObject(*args)
ImageObject_CreateFromType3TextObject = _fsdk.ImageObject_CreateFromType3TextObject

class TextObject(GraphicsObject):
    __swig_setmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.TextObject_Create)
    else:
        Create = _fsdk.TextObject_Create

    def GetText(self, *args):
        return _fsdk.TextObject_GetText(self, *args)

    def SetText(self, *args):
        return _fsdk.TextObject_SetText(self, *args)

    def GetTextState(self, *args):
        return _fsdk.TextObject_GetTextState(self, *args)

    def SetTextState(self, *args):
        return _fsdk.TextObject_SetTextState(self, *args)

    def GetCharCount(self, *args):
        return _fsdk.TextObject_GetCharCount(self, *args)

    def GetCharPos(self, *args):
        return _fsdk.TextObject_GetCharPos(self, *args)

    def GetCharWidthByIndex(self, *args):
        return _fsdk.TextObject_GetCharWidthByIndex(self, *args)

    def GetCharHeightByIndex(self, *args):
        return _fsdk.TextObject_GetCharHeightByIndex(self, *args)
TextObject_swigregister = _fsdk.TextObject_swigregister
TextObject_swigregister(TextObject)

def TextObject_Create(*args):
    return _fsdk.TextObject_Create(*args)
TextObject_Create = _fsdk.TextObject_Create

class PathObject(GraphicsObject):
    __swig_setmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.PathObject_Create)
    else:
        Create = _fsdk.PathObject_Create
    if _newclass:
        CreateFromTextObject = staticmethod(_fsdk.PathObject_CreateFromTextObject)
    else:
        CreateFromTextObject = _fsdk.PathObject_CreateFromTextObject

    def GetFillMode(self, *args):
        return _fsdk.PathObject_GetFillMode(self, *args)

    def SetFillMode(self, *args):
        return _fsdk.PathObject_SetFillMode(self, *args)

    def GetStrokeState(self, *args):
        return _fsdk.PathObject_GetStrokeState(self, *args)

    def SetStrokeState(self, *args):
        return _fsdk.PathObject_SetStrokeState(self, *args)

    def GetPathData(self, *args):
        return _fsdk.PathObject_GetPathData(self, *args)

    def SetPathData(self, *args):
        return _fsdk.PathObject_SetPathData(self, *args)
PathObject_swigregister = _fsdk.PathObject_swigregister
PathObject_swigregister(PathObject)

def PathObject_Create(*args):
    return _fsdk.PathObject_Create(*args)
PathObject_Create = _fsdk.PathObject_Create

def PathObject_CreateFromTextObject(*args):
    return _fsdk.PathObject_CreateFromTextObject(*args)
PathObject_CreateFromTextObject = _fsdk.PathObject_CreateFromTextObject

class FormXObject(GraphicsObject):
    __swig_setmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormXObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormXObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.FormXObject_Create)
    else:
        Create = _fsdk.FormXObject_Create

    def GetStream(self, *args):
        return _fsdk.FormXObject_GetStream(self, *args)

    def GetGraphicsObjects(self, *args):
        return _fsdk.FormXObject_GetGraphicsObjects(self, *args)

    def ImportPageContent(self, *args):
        return _fsdk.FormXObject_ImportPageContent(self, *args)
FormXObject_swigregister = _fsdk.FormXObject_swigregister
FormXObject_swigregister(FormXObject)

def FormXObject_Create(*args):
    return _fsdk.FormXObject_Create(*args)
FormXObject_Create = _fsdk.FormXObject_Create

class ShadingObject(GraphicsObject):
    __swig_setmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPDFObject(self, *args):
        return _fsdk.ShadingObject_GetPDFObject(self, *args)
ShadingObject_swigregister = _fsdk.ShadingObject_swigregister
ShadingObject_swigregister(ShadingObject)

class TimerCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerCallback, name)
    __repr__ = _swig_repr

    def OnTimer(self, *args):
        return _fsdk.TimerCallback_OnTimer(self, *args)

    def __init__(self, *args):
        if self.__class__ == TimerCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_TimerCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_TimerCallback(self)
        return weakref_proxy(self)
TimerCallback_swigregister = _fsdk.TimerCallback_swigregister
TimerCallback_swigregister(TimerCallback)

class FillerAssistCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillerAssistCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FillerAssistCallback, name)
    __repr__ = _swig_repr
    e_PopupMenuItemNone = _fsdk.FillerAssistCallback_e_PopupMenuItemNone
    e_PopupMenuItemCut = _fsdk.FillerAssistCallback_e_PopupMenuItemCut
    e_PopupMenuItemCopy = _fsdk.FillerAssistCallback_e_PopupMenuItemCopy
    e_PopupMenuItemPaste = _fsdk.FillerAssistCallback_e_PopupMenuItemPaste
    e_PopupMenuItemDelete = _fsdk.FillerAssistCallback_e_PopupMenuItemDelete
    e_PopupMenuItemSelectAll = _fsdk.FillerAssistCallback_e_PopupMenuItemSelectAll

    def Release(self, *args):
        return _fsdk.FillerAssistCallback_Release(self, *args)

    def GetVersion(self, *args):
        return _fsdk.FillerAssistCallback_GetVersion(self, *args)

    def Refresh(self, *args):
        return _fsdk.FillerAssistCallback_Refresh(self, *args)

    def SetTimerCallback(self, *args):
        return _fsdk.FillerAssistCallback_SetTimerCallback(self, *args)

    def KillTimer(self, *args):
        return _fsdk.FillerAssistCallback_KillTimer(self, *args)

    def FocusGotOnControl(self, *args):
        return _fsdk.FillerAssistCallback_FocusGotOnControl(self, *args)

    def FocusLostFromControl(self, *args):
        return _fsdk.FillerAssistCallback_FocusLostFromControl(self, *args)

    def CreatePopupMenu(self, *args):
        return _fsdk.FillerAssistCallback_CreatePopupMenu(self, *args)

    def AppendPopupMenuItem(self, *args):
        return _fsdk.FillerAssistCallback_AppendPopupMenuItem(self, *args)

    def EnablePopupMenuItem(self, *args):
        return _fsdk.FillerAssistCallback_EnablePopupMenuItem(self, *args)

    def ShowPopupMenu(self, *args):
        return _fsdk.FillerAssistCallback_ShowPopupMenu(self, *args)

    def DestroyPopupMenu(self, *args):
        return _fsdk.FillerAssistCallback_DestroyPopupMenu(self, *args)

    def SetClipboardText(self, *args):
        return _fsdk.FillerAssistCallback_SetClipboardText(self, *args)

    def GetClipboardText(self, *args):
        return _fsdk.FillerAssistCallback_GetClipboardText(self, *args)

    def ReportInvalidValue(self, *args):
        return _fsdk.FillerAssistCallback_ReportInvalidValue(self, *args)

    def __init__(self, *args):
        if self.__class__ == FillerAssistCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_FillerAssistCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_FillerAssistCallback(self)
        return weakref_proxy(self)
FillerAssistCallback_swigregister = _fsdk.FillerAssistCallback_swigregister
FillerAssistCallback_swigregister(FillerAssistCallback)

class Filler(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filler, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Filler, name)
    __repr__ = _swig_repr
    e_VkeyUnknown = _fsdk.Filler_e_VkeyUnknown
    e_VkeyBack = _fsdk.Filler_e_VkeyBack
    e_VkeyTab = _fsdk.Filler_e_VkeyTab
    e_VkeyReturn = _fsdk.Filler_e_VkeyReturn
    e_VkeyShift = _fsdk.Filler_e_VkeyShift
    e_VkeyControl = _fsdk.Filler_e_VkeyControl
    e_VkeyMenu = _fsdk.Filler_e_VkeyMenu
    e_VkeyPause = _fsdk.Filler_e_VkeyPause
    e_VkeyEscape = _fsdk.Filler_e_VkeyEscape
    e_VkeySpace = _fsdk.Filler_e_VkeySpace
    e_VkeyPrior = _fsdk.Filler_e_VkeyPrior
    e_VkeyNext = _fsdk.Filler_e_VkeyNext
    e_VkeyEnd = _fsdk.Filler_e_VkeyEnd
    e_VkeyHome = _fsdk.Filler_e_VkeyHome
    e_VkeyLeft = _fsdk.Filler_e_VkeyLeft
    e_VkeyUp = _fsdk.Filler_e_VkeyUp
    e_VkeyRight = _fsdk.Filler_e_VkeyRight
    e_VkeyDown = _fsdk.Filler_e_VkeyDown
    e_VkeyPrint = _fsdk.Filler_e_VkeyPrint
    e_VkeySnapshot = _fsdk.Filler_e_VkeySnapshot
    e_VkeyInsert = _fsdk.Filler_e_VkeyInsert
    e_VkeyDelete = _fsdk.Filler_e_VkeyDelete
    e_VkeyHelp = _fsdk.Filler_e_VkeyHelp
    e_Vkey0 = _fsdk.Filler_e_Vkey0
    e_Vkey1 = _fsdk.Filler_e_Vkey1
    e_Vkey2 = _fsdk.Filler_e_Vkey2
    e_Vkey3 = _fsdk.Filler_e_Vkey3
    e_Vkey4 = _fsdk.Filler_e_Vkey4
    e_Vkey5 = _fsdk.Filler_e_Vkey5
    e_Vkey6 = _fsdk.Filler_e_Vkey6
    e_Vkey7 = _fsdk.Filler_e_Vkey7
    e_Vkey8 = _fsdk.Filler_e_Vkey8
    e_Vkey9 = _fsdk.Filler_e_Vkey9
    e_VkeyA = _fsdk.Filler_e_VkeyA
    e_VkeyB = _fsdk.Filler_e_VkeyB
    e_VkeyC = _fsdk.Filler_e_VkeyC
    e_VkeyD = _fsdk.Filler_e_VkeyD
    e_VkeyE = _fsdk.Filler_e_VkeyE
    e_VkeyF = _fsdk.Filler_e_VkeyF
    e_VkeyG = _fsdk.Filler_e_VkeyG
    e_VkeyH = _fsdk.Filler_e_VkeyH
    e_VkeyI = _fsdk.Filler_e_VkeyI
    e_VkeyJ = _fsdk.Filler_e_VkeyJ
    e_VkeyK = _fsdk.Filler_e_VkeyK
    e_VkeyL = _fsdk.Filler_e_VkeyL
    e_VkeyM = _fsdk.Filler_e_VkeyM
    e_VkeyN = _fsdk.Filler_e_VkeyN
    e_VkeyO = _fsdk.Filler_e_VkeyO
    e_VkeyP = _fsdk.Filler_e_VkeyP
    e_VkeyQ = _fsdk.Filler_e_VkeyQ
    e_VkeyR = _fsdk.Filler_e_VkeyR
    e_VkeyS = _fsdk.Filler_e_VkeyS
    e_VkeyT = _fsdk.Filler_e_VkeyT
    e_VkeyU = _fsdk.Filler_e_VkeyU
    e_VkeyV = _fsdk.Filler_e_VkeyV
    e_VkeyW = _fsdk.Filler_e_VkeyW
    e_VkeyX = _fsdk.Filler_e_VkeyX
    e_VkeyY = _fsdk.Filler_e_VkeyY
    e_VkeyZ = _fsdk.Filler_e_VkeyZ
    e_VkeyNumpad0 = _fsdk.Filler_e_VkeyNumpad0
    e_VkeyNumpad1 = _fsdk.Filler_e_VkeyNumpad1
    e_VkeyNumpad2 = _fsdk.Filler_e_VkeyNumpad2
    e_VkeyNumpad3 = _fsdk.Filler_e_VkeyNumpad3
    e_VkeyNumpad4 = _fsdk.Filler_e_VkeyNumpad4
    e_VkeyNumpad5 = _fsdk.Filler_e_VkeyNumpad5
    e_VkeyNumpad6 = _fsdk.Filler_e_VkeyNumpad6
    e_VkeyNumpad7 = _fsdk.Filler_e_VkeyNumpad7
    e_VkeyNumpad8 = _fsdk.Filler_e_VkeyNumpad8
    e_VkeyNumpad9 = _fsdk.Filler_e_VkeyNumpad9
    e_VkeyMultiply = _fsdk.Filler_e_VkeyMultiply
    e_VkeyAdd = _fsdk.Filler_e_VkeyAdd
    e_VkeySeparator = _fsdk.Filler_e_VkeySeparator
    e_VkeySubtract = _fsdk.Filler_e_VkeySubtract
    e_VkeyDecimal = _fsdk.Filler_e_VkeyDecimal
    e_VkeyDivide = _fsdk.Filler_e_VkeyDivide
    e_VkeyF1 = _fsdk.Filler_e_VkeyF1
    e_VkeyF2 = _fsdk.Filler_e_VkeyF2
    e_VkeyF3 = _fsdk.Filler_e_VkeyF3
    e_VkeyF4 = _fsdk.Filler_e_VkeyF4
    e_VkeyF5 = _fsdk.Filler_e_VkeyF5
    e_VkeyF6 = _fsdk.Filler_e_VkeyF6
    e_VkeyF7 = _fsdk.Filler_e_VkeyF7
    e_VkeyF8 = _fsdk.Filler_e_VkeyF8
    e_VkeyF9 = _fsdk.Filler_e_VkeyF9
    e_VkeyF10 = _fsdk.Filler_e_VkeyF10
    e_VkeyF11 = _fsdk.Filler_e_VkeyF11
    e_VkeyF12 = _fsdk.Filler_e_VkeyF12
    e_EventFlagShiftKey = _fsdk.Filler_e_EventFlagShiftKey
    e_EventFlagControlKey = _fsdk.Filler_e_EventFlagControlKey
    e_EventFlagAltKey = _fsdk.Filler_e_EventFlagAltKey
    e_EventFlagMetaKey = _fsdk.Filler_e_EventFlagMetaKey
    e_EventFlagKeyPad = _fsdk.Filler_e_EventFlagKeyPad
    e_EventFlagAutoRepeat = _fsdk.Filler_e_EventFlagAutoRepeat
    e_EventFlagLeftButtonDown = _fsdk.Filler_e_EventFlagLeftButtonDown
    e_EventFlagMiddleButtonDown = _fsdk.Filler_e_EventFlagMiddleButtonDown
    e_EventFlagRightButtonDown = _fsdk.Filler_e_EventFlagRightButtonDown
    e_EventFlagCommand = _fsdk.Filler_e_EventFlagCommand
    __swig_destroy__ = _fsdk.delete_Filler
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Filler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Filler___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Filler___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Filler_IsEmpty(self, *args)

    def Render(self, *args):
        return _fsdk.Filler_Render(self, *args)

    def OnLButtonDown(self, *args):
        return _fsdk.Filler_OnLButtonDown(self, *args)

    def OnLButtonUp(self, *args):
        return _fsdk.Filler_OnLButtonUp(self, *args)

    def OnLButtonDoubleClick(self, *args):
        return _fsdk.Filler_OnLButtonDoubleClick(self, *args)

    def OnMouseMove(self, *args):
        return _fsdk.Filler_OnMouseMove(self, *args)

    def OnMouseEnter(self, *args):
        return _fsdk.Filler_OnMouseEnter(self, *args)

    def OnMouseHover(self, *args):
        return _fsdk.Filler_OnMouseHover(self, *args)

    def OnMouseLeave(self, *args):
        return _fsdk.Filler_OnMouseLeave(self, *args)

    def OnMouseWheel(self, *args):
        return _fsdk.Filler_OnMouseWheel(self, *args)

    def OnRButtonDown(self, *args):
        return _fsdk.Filler_OnRButtonDown(self, *args)

    def OnRButtonUp(self, *args):
        return _fsdk.Filler_OnRButtonUp(self, *args)

    def OnRButtonDoubleClick(self, *args):
        return _fsdk.Filler_OnRButtonDoubleClick(self, *args)

    def OnWheelButtonDown(self, *args):
        return _fsdk.Filler_OnWheelButtonDown(self, *args)

    def OnWheelButtonUp(self, *args):
        return _fsdk.Filler_OnWheelButtonUp(self, *args)

    def OnWheelButtonDoubleClick(self, *args):
        return _fsdk.Filler_OnWheelButtonDoubleClick(self, *args)

    def OnKeyDown(self, *args):
        return _fsdk.Filler_OnKeyDown(self, *args)

    def OnKeyUp(self, *args):
        return _fsdk.Filler_OnKeyUp(self, *args)

    def OnChar(self, *args):
        return _fsdk.Filler_OnChar(self, *args)

    def SetFocus(self, *args):
        return _fsdk.Filler_SetFocus(self, *args)

    def KillFocus(self, *args):
        return _fsdk.Filler_KillFocus(self, *args)

    def HighlightFormFields(self, *args):
        return _fsdk.Filler_HighlightFormFields(self, *args)

    def SetHighlightColor(self, *args):
        return _fsdk.Filler_SetHighlightColor(self, *args)

    def ShowOverflowIndicator(self, *args):
        return _fsdk.Filler_ShowOverflowIndicator(self, *args)

    def OnCut(self, *args):
        return _fsdk.Filler_OnCut(self, *args)

    def OnCopy(self, *args):
        return _fsdk.Filler_OnCopy(self, *args)

    def OnPaste(self, *args):
        return _fsdk.Filler_OnPaste(self, *args)

    def OnSelectAll(self, *args):
        return _fsdk.Filler_OnSelectAll(self, *args)

    def OnDelete(self, *args):
        return _fsdk.Filler_OnDelete(self, *args)

    def GetEditingTextCaretPosition(self, *args):
        return _fsdk.Filler_GetEditingTextCaretPosition(self, *args)
Filler_swigregister = _fsdk.Filler_swigregister
Filler_swigregister(Filler)

class FieldArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_FieldArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_FieldArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.FieldArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.FieldArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.FieldArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.FieldArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.FieldArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.FieldArray_RemoveAll(self, *args)
FieldArray_swigregister = _fsdk.FieldArray_swigregister
FieldArray_swigregister(FieldArray)

class ChoiceOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChoiceOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChoiceOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ChoiceOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.ChoiceOption_Set(self, *args)
    __swig_setmethods__["option_value"] = _fsdk.ChoiceOption_option_value_set
    __swig_getmethods__["option_value"] = _fsdk.ChoiceOption_option_value_get
    if _newclass:
        option_value = _swig_property(_fsdk.ChoiceOption_option_value_get, _fsdk.ChoiceOption_option_value_set)
    __swig_setmethods__["option_label"] = _fsdk.ChoiceOption_option_label_set
    __swig_getmethods__["option_label"] = _fsdk.ChoiceOption_option_label_get
    if _newclass:
        option_label = _swig_property(_fsdk.ChoiceOption_option_label_get, _fsdk.ChoiceOption_option_label_set)
    __swig_setmethods__["selected"] = _fsdk.ChoiceOption_selected_set
    __swig_getmethods__["selected"] = _fsdk.ChoiceOption_selected_get
    if _newclass:
        selected = _swig_property(_fsdk.ChoiceOption_selected_get, _fsdk.ChoiceOption_selected_set)
    __swig_setmethods__["default_selected"] = _fsdk.ChoiceOption_default_selected_set
    __swig_getmethods__["default_selected"] = _fsdk.ChoiceOption_default_selected_get
    if _newclass:
        default_selected = _swig_property(_fsdk.ChoiceOption_default_selected_get, _fsdk.ChoiceOption_default_selected_set)
    __swig_destroy__ = _fsdk.delete_ChoiceOption
    __del__ = lambda self: None
ChoiceOption_swigregister = _fsdk.ChoiceOption_swigregister
ChoiceOption_swigregister(ChoiceOption)

class ChoiceOptionArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChoiceOptionArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChoiceOptionArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_ChoiceOptionArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_ChoiceOptionArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.ChoiceOptionArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.ChoiceOptionArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.ChoiceOptionArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.ChoiceOptionArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.ChoiceOptionArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.ChoiceOptionArray_RemoveAll(self, *args)
ChoiceOptionArray_swigregister = _fsdk.ChoiceOptionArray_swigregister
ChoiceOptionArray_swigregister(ChoiceOptionArray)

class Field(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    e_TypeUnknown = _fsdk.Field_e_TypeUnknown
    e_TypePushButton = _fsdk.Field_e_TypePushButton
    e_TypeCheckBox = _fsdk.Field_e_TypeCheckBox
    e_TypeRadioButton = _fsdk.Field_e_TypeRadioButton
    e_TypeComboBox = _fsdk.Field_e_TypeComboBox
    e_TypeListBox = _fsdk.Field_e_TypeListBox
    e_TypeTextField = _fsdk.Field_e_TypeTextField
    e_TypeSignature = _fsdk.Field_e_TypeSignature
    e_FlagReadOnly = _fsdk.Field_e_FlagReadOnly
    e_FlagRequired = _fsdk.Field_e_FlagRequired
    e_FlagNoExport = _fsdk.Field_e_FlagNoExport
    e_FlagButtonNoToggleToOff = _fsdk.Field_e_FlagButtonNoToggleToOff
    e_FlagButtonRadiosInUnison = _fsdk.Field_e_FlagButtonRadiosInUnison
    e_FlagTextMultiline = _fsdk.Field_e_FlagTextMultiline
    e_FlagTextPassword = _fsdk.Field_e_FlagTextPassword
    e_FlagTextFileSelect = _fsdk.Field_e_FlagTextFileSelect
    e_FlagTextNoSpellCheck = _fsdk.Field_e_FlagTextNoSpellCheck
    e_FlagTextDoNotScroll = _fsdk.Field_e_FlagTextDoNotScroll
    e_FlagTextComb = _fsdk.Field_e_FlagTextComb
    e_FlagComboEdit = _fsdk.Field_e_FlagComboEdit
    e_FlagChoiceMultiSelect = _fsdk.Field_e_FlagChoiceMultiSelect
    e_FlagTextRichText = _fsdk.Field_e_FlagTextRichText
    e_FlagChoiceSort = _fsdk.Field_e_FlagChoiceSort
    e_FlagChoiceCommitOnSelChange = _fsdk.Field_e_FlagChoiceCommitOnSelChange

    def __init__(self, *args):
        this = _fsdk.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Field___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Field___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_Field
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Field_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.Field_GetType(self, *args)

    def GetFlags(self, *args):
        return _fsdk.Field_GetFlags(self, *args)

    def SetFlags(self, *args):
        return _fsdk.Field_SetFlags(self, *args)

    def GetName(self, *args):
        return _fsdk.Field_GetName(self, *args)

    def GetDefaultValue(self, *args):
        return _fsdk.Field_GetDefaultValue(self, *args)

    def SetDefaultValue(self, *args):
        return _fsdk.Field_SetDefaultValue(self, *args)

    def GetValue(self, *args):
        return _fsdk.Field_GetValue(self, *args)

    def SetValue(self, *args):
        return _fsdk.Field_SetValue(self, *args)

    def GetAlignment(self, *args):
        return _fsdk.Field_GetAlignment(self, *args)

    def SetAlignment(self, *args):
        return _fsdk.Field_SetAlignment(self, *args)

    def GetAlternateName(self, *args):
        return _fsdk.Field_GetAlternateName(self, *args)

    def SetAlternateName(self, *args):
        return _fsdk.Field_SetAlternateName(self, *args)

    def GetDefaultAppearance(self, *args):
        return _fsdk.Field_GetDefaultAppearance(self, *args)

    def SetDefaultAppearance(self, *args):
        return _fsdk.Field_SetDefaultAppearance(self, *args)

    def GetMappingName(self, *args):
        return _fsdk.Field_GetMappingName(self, *args)

    def SetMappingName(self, *args):
        return _fsdk.Field_SetMappingName(self, *args)

    def GetMaxLength(self, *args):
        return _fsdk.Field_GetMaxLength(self, *args)

    def SetMaxLength(self, *args):
        return _fsdk.Field_SetMaxLength(self, *args)

    def GetOptions(self, *args):
        return _fsdk.Field_GetOptions(self, *args)

    def SetOptions(self, *args):
        return _fsdk.Field_SetOptions(self, *args)

    def GetTopVisibleIndex(self, *args):
        return _fsdk.Field_GetTopVisibleIndex(self, *args)

    def SetTopVisibleIndex(self, *args):
        return _fsdk.Field_SetTopVisibleIndex(self, *args)

    def GetControlCount(self, *args):
        return _fsdk.Field_GetControlCount(self, *args)

    def GetControl(self, *args):
        return _fsdk.Field_GetControl(self, *args)

    def Reset(self, *args):
        return _fsdk.Field_Reset(self, *args)

    def GetDict(self, *args):
        return _fsdk.Field_GetDict(self, *args)

    def GetValueObj(self, *args):
        return _fsdk.Field_GetValueObj(self, *args)

    def GetDefaultValueObj(self, *args):
        return _fsdk.Field_GetDefaultValueObj(self, *args)

    def GetInheritedAttribute(self, *args):
        return _fsdk.Field_GetInheritedAttribute(self, *args)
Field_swigregister = _fsdk.Field_swigregister
Field_swigregister(Field)

class Form(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Form, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Form, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Form(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Form___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Form___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_Form
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Form_IsEmpty(self, *args)

    def GetAlignment(self, *args):
        return _fsdk.Form_GetAlignment(self, *args)

    def SetAlignment(self, *args):
        return _fsdk.Form_SetAlignment(self, *args)

    def NeedConstructAppearances(self, *args):
        return _fsdk.Form_NeedConstructAppearances(self, *args)

    def SetConstructAppearances(self, *args):
        return _fsdk.Form_SetConstructAppearances(self, *args)

    def GetControlAtDevicePoint(self, *args):
        return _fsdk.Form_GetControlAtDevicePoint(self, *args)

    def GetControlAtPoint(self, *args):
        return _fsdk.Form_GetControlAtPoint(self, *args)

    def GetDefaultAppearance(self, *args):
        return _fsdk.Form_GetDefaultAppearance(self, *args)

    def SetDefaultAppearance(self, *args):
        return _fsdk.Form_SetDefaultAppearance(self, *args)

    def GetDocument(self, *args):
        return _fsdk.Form_GetDocument(self, *args)

    def GetFieldsInCalculationOrder(self, *args):
        return _fsdk.Form_GetFieldsInCalculationOrder(self, *args)

    def SetFieldsInCalculationOrder(self, *args):
        return _fsdk.Form_SetFieldsInCalculationOrder(self, *args)

    def ValidateFieldName(self, *args):
        return _fsdk.Form_ValidateFieldName(self, *args)

    def RenameField(self, *args):
        return _fsdk.Form_RenameField(self, *args)

    def AddControl(self, *args):
        return _fsdk.Form_AddControl(self, *args)

    def MoveControl(self, *args):
        return _fsdk.Form_MoveControl(self, *args)

    def RemoveField(self, *args):
        return _fsdk.Form_RemoveField(self, *args)

    def RemoveControl(self, *args):
        return _fsdk.Form_RemoveControl(self, *args)

    def GetFieldCount(self, *args):
        return _fsdk.Form_GetFieldCount(self, *args)

    def GetField(self, *args):
        return _fsdk.Form_GetField(self, *args)

    def GetControlCount(self, *args):
        return _fsdk.Form_GetControlCount(self, *args)

    def GetControl(self, *args):
        return _fsdk.Form_GetControl(self, *args)

    def GetFormFiller(self, *args):
        return _fsdk.Form_GetFormFiller(self, *args)

    def Reset(self, *args):
        return _fsdk.Form_Reset(self, *args)

    def ExportToXML(self, *args):
        return _fsdk.Form_ExportToXML(self, *args)

    def ImportFromXML(self, *args):
        return _fsdk.Form_ImportFromXML(self, *args)

    def ExportToCSV(self, *args):
        return _fsdk.Form_ExportToCSV(self, *args)

    def ExportToHTML(self, *args):
        return _fsdk.Form_ExportToHTML(self, *args)

    def ExportToTXT(self, *args):
        return _fsdk.Form_ExportToTXT(self, *args)

    def GetDict(self, *args):
        return _fsdk.Form_GetDict(self, *args)

    def FixPageFields(self, *args):
        return _fsdk.Form_FixPageFields(self, *args)
Form_swigregister = _fsdk.Form_swigregister
Form_swigregister(Form)

class Control(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Control, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Control, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Control(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Control___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Control___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_Control
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Control_IsEmpty(self, *args)

    def GetField(self, *args):
        return _fsdk.Control_GetField(self, *args)

    def GetWidgetDict(self, *args):
        return _fsdk.Control_GetWidgetDict(self, *args)

    def GetWidget(self, *args):
        return _fsdk.Control_GetWidget(self, *args)

    def GetIndex(self, *args):
        return _fsdk.Control_GetIndex(self, *args)

    def GetExportValue(self, *args):
        return _fsdk.Control_GetExportValue(self, *args)

    def SetExportValue(self, *args):
        return _fsdk.Control_SetExportValue(self, *args)

    def IsChecked(self, *args):
        return _fsdk.Control_IsChecked(self, *args)

    def SetChecked(self, *args):
        return _fsdk.Control_SetChecked(self, *args)

    def IsDefaultChecked(self, *args):
        return _fsdk.Control_IsDefaultChecked(self, *args)

    def SetDefaultChecked(self, *args):
        return _fsdk.Control_SetDefaultChecked(self, *args)

    def GetDefaultAppearance(self, *args):
        return _fsdk.Control_GetDefaultAppearance(self, *args)

    def SetDefaultAppearance(self, *args):
        return _fsdk.Control_SetDefaultAppearance(self, *args)

    def GetAlignment(self, *args):
        return _fsdk.Control_GetAlignment(self, *args)

    def SetAlignment(self, *args):
        return _fsdk.Control_SetAlignment(self, *args)
Control_swigregister = _fsdk.Control_swigregister
Control_swigregister(Control)

class PDFDictionaryArray(BasicArray):
    __swig_setmethods__ = {}
    for _s in [BasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDictionaryArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDictionaryArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PDFDictionaryArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.PDFDictionaryArray_GetSize(self, *args)

    def GetUpperBound(self, *args):
        return _fsdk.PDFDictionaryArray_GetUpperBound(self, *args)

    def SetSize(self, *args):
        return _fsdk.PDFDictionaryArray_SetSize(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PDFDictionaryArray_RemoveAll(self, *args)

    def GetAt(self, *args):
        return _fsdk.PDFDictionaryArray_GetAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.PDFDictionaryArray_SetAt(self, *args)

    def SetAtGrow(self, *args):
        return _fsdk.PDFDictionaryArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _fsdk.PDFDictionaryArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PDFDictionaryArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PDFDictionaryArray_InsertAt(self, *args)

    def Find(self, *args):
        return _fsdk.PDFDictionaryArray_Find(self, *args)
    __swig_destroy__ = _fsdk.delete_PDFDictionaryArray
    __del__ = lambda self: None
PDFDictionaryArray_swigregister = _fsdk.PDFDictionaryArray_swigregister
PDFDictionaryArray_swigregister(PDFDictionaryArray)

class PDFObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    e_InvalidType = _fsdk.PDFObject_e_InvalidType
    e_Boolean = _fsdk.PDFObject_e_Boolean
    e_Number = _fsdk.PDFObject_e_Number
    e_String = _fsdk.PDFObject_e_String
    e_Name = _fsdk.PDFObject_e_Name
    e_Array = _fsdk.PDFObject_e_Array
    e_Dictionary = _fsdk.PDFObject_e_Dictionary
    e_Stream = _fsdk.PDFObject_e_Stream
    e_Null = _fsdk.PDFObject_e_Null
    e_Reference = _fsdk.PDFObject_e_Reference
    if _newclass:
        CreateFromBoolean = staticmethod(_fsdk.PDFObject_CreateFromBoolean)
    else:
        CreateFromBoolean = _fsdk.PDFObject_CreateFromBoolean
    if _newclass:
        CreateFromFloat = staticmethod(_fsdk.PDFObject_CreateFromFloat)
    else:
        CreateFromFloat = _fsdk.PDFObject_CreateFromFloat
    if _newclass:
        CreateFromInteger = staticmethod(_fsdk.PDFObject_CreateFromInteger)
    else:
        CreateFromInteger = _fsdk.PDFObject_CreateFromInteger
    if _newclass:
        CreateFromString = staticmethod(_fsdk.PDFObject_CreateFromString)
    else:
        CreateFromString = _fsdk.PDFObject_CreateFromString
    if _newclass:
        CreateFromNameW = staticmethod(_fsdk.PDFObject_CreateFromNameW)
    else:
        CreateFromNameW = _fsdk.PDFObject_CreateFromNameW
    if _newclass:
        CreateFromName = staticmethod(_fsdk.PDFObject_CreateFromName)
    else:
        CreateFromName = _fsdk.PDFObject_CreateFromName
    if _newclass:
        CreateFromDateTime = staticmethod(_fsdk.PDFObject_CreateFromDateTime)
    else:
        CreateFromDateTime = _fsdk.PDFObject_CreateFromDateTime
    if _newclass:
        CreateReference = staticmethod(_fsdk.PDFObject_CreateReference)
    else:
        CreateReference = _fsdk.PDFObject_CreateReference

    def Release(self, *args):
        return _fsdk.PDFObject_Release(self, *args)

    def CloneObject(self, *args):
        return _fsdk.PDFObject_CloneObject(self, *args)

    def DeepCloneObject(self, *args):
        return _fsdk.PDFObject_DeepCloneObject(self, *args)

    def IsIdentical(self, *args):
        return _fsdk.PDFObject_IsIdentical(self, *args)

    def GetType(self, *args):
        return _fsdk.PDFObject_GetType(self, *args)

    def GetObjNum(self, *args):
        return _fsdk.PDFObject_GetObjNum(self, *args)

    def GetInteger(self, *args):
        return _fsdk.PDFObject_GetInteger(self, *args)

    def GetFloat(self, *args):
        return _fsdk.PDFObject_GetFloat(self, *args)

    def GetBoolean(self, *args):
        return _fsdk.PDFObject_GetBoolean(self, *args)

    def GetMatrix(self, *args):
        return _fsdk.PDFObject_GetMatrix(self, *args)

    def GetRect(self, *args):
        return _fsdk.PDFObject_GetRect(self, *args)

    def GetDirectObject(self, *args):
        return _fsdk.PDFObject_GetDirectObject(self, *args)

    def GetDateTime(self, *args):
        return _fsdk.PDFObject_GetDateTime(self, *args)

    def GetName(self, *args):
        return _fsdk.PDFObject_GetName(self, *args)

    def GetString(self, *args):
        return _fsdk.PDFObject_GetString(self, *args)

    def GetWideString(self, *args):
        return _fsdk.PDFObject_GetWideString(self, *args)

    def GetArray(self, *args):
        return _fsdk.PDFObject_GetArray(self, *args)

    def GetDict(self, *args):
        return _fsdk.PDFObject_GetDict(self, *args)

    def GetStream(self, *args):
        return _fsdk.PDFObject_GetStream(self, *args)
PDFObject_swigregister = _fsdk.PDFObject_swigregister
PDFObject_swigregister(PDFObject)

def PDFObject_CreateFromBoolean(*args):
    return _fsdk.PDFObject_CreateFromBoolean(*args)
PDFObject_CreateFromBoolean = _fsdk.PDFObject_CreateFromBoolean

def PDFObject_CreateFromFloat(*args):
    return _fsdk.PDFObject_CreateFromFloat(*args)
PDFObject_CreateFromFloat = _fsdk.PDFObject_CreateFromFloat

def PDFObject_CreateFromInteger(*args):
    return _fsdk.PDFObject_CreateFromInteger(*args)
PDFObject_CreateFromInteger = _fsdk.PDFObject_CreateFromInteger

def PDFObject_CreateFromString(*args):
    return _fsdk.PDFObject_CreateFromString(*args)
PDFObject_CreateFromString = _fsdk.PDFObject_CreateFromString

def PDFObject_CreateFromNameW(*args):
    return _fsdk.PDFObject_CreateFromNameW(*args)
PDFObject_CreateFromNameW = _fsdk.PDFObject_CreateFromNameW

def PDFObject_CreateFromName(*args):
    return _fsdk.PDFObject_CreateFromName(*args)
PDFObject_CreateFromName = _fsdk.PDFObject_CreateFromName

def PDFObject_CreateFromDateTime(*args):
    return _fsdk.PDFObject_CreateFromDateTime(*args)
PDFObject_CreateFromDateTime = _fsdk.PDFObject_CreateFromDateTime

def PDFObject_CreateReference(*args):
    return _fsdk.PDFObject_CreateReference(*args)
PDFObject_CreateReference = _fsdk.PDFObject_CreateReference

class PDFStream(PDFObject):
    __swig_setmethods__ = {}
    for _s in [PDFObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFStream, name, value)
    __swig_getmethods__ = {}
    for _s in [PDFObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    e_Unknown = _fsdk.PDFStream_e_Unknown
    e_NoneDecode = _fsdk.PDFStream_e_NoneDecode
    e_ASCIIHexDecode = _fsdk.PDFStream_e_ASCIIHexDecode
    e_ASCII85Decode = _fsdk.PDFStream_e_ASCII85Decode
    e_LZWDecode = _fsdk.PDFStream_e_LZWDecode
    e_FlateDecode = _fsdk.PDFStream_e_FlateDecode
    e_RunLengthDecode = _fsdk.PDFStream_e_RunLengthDecode
    e_CCITTFaxDecode = _fsdk.PDFStream_e_CCITTFaxDecode
    e_JBIG2Decode = _fsdk.PDFStream_e_JBIG2Decode
    e_DCTDecode = _fsdk.PDFStream_e_DCTDecode
    e_JPXDecode = _fsdk.PDFStream_e_JPXDecode
    e_Crypt = _fsdk.PDFStream_e_Crypt
    if _newclass:
        Create = staticmethod(_fsdk.PDFStream_Create)
    else:
        Create = _fsdk.PDFStream_Create

    def GetDictionary(self, *args):
        return _fsdk.PDFStream_GetDictionary(self, *args)

    def GetStreamFilter(self, *args):
        return _fsdk.PDFStream_GetStreamFilter(self, *args)

    def GetDataSize(self, *args):
        return _fsdk.PDFStream_GetDataSize(self, *args)

    def GetData(self, *args):
        return _fsdk.PDFStream_GetData(self, *args)

    def SetData(self, *args):
        return _fsdk.PDFStream_SetData(self, *args)

    def ImportData(self, *args):
        return _fsdk.PDFStream_ImportData(self, *args)

    def ExportData(self, *args):
        return _fsdk.PDFStream_ExportData(self, *args)
    __swig_destroy__ = _fsdk.delete_PDFStream
    __del__ = lambda self: None
PDFStream_swigregister = _fsdk.PDFStream_swigregister
PDFStream_swigregister(PDFStream)

def PDFStream_Create(*args):
    return _fsdk.PDFStream_Create(*args)
PDFStream_Create = _fsdk.PDFStream_Create

class PDFArray(PDFObject):
    __swig_setmethods__ = {}
    for _s in [PDFObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFArray, name, value)
    __swig_getmethods__ = {}
    for _s in [PDFObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.PDFArray_Create)
    else:
        Create = _fsdk.PDFArray_Create
    if _newclass:
        CreateFromMatrix = staticmethod(_fsdk.PDFArray_CreateFromMatrix)
    else:
        CreateFromMatrix = _fsdk.PDFArray_CreateFromMatrix
    if _newclass:
        CreateFromRect = staticmethod(_fsdk.PDFArray_CreateFromRect)
    else:
        CreateFromRect = _fsdk.PDFArray_CreateFromRect

    def GetElementCount(self, *args):
        return _fsdk.PDFArray_GetElementCount(self, *args)

    def GetElement(self, *args):
        return _fsdk.PDFArray_GetElement(self, *args)

    def AddElement(self, *args):
        return _fsdk.PDFArray_AddElement(self, *args)

    def AddBoolean(self, *args):
        return _fsdk.PDFArray_AddBoolean(self, *args)

    def AddDateTime(self, *args):
        return _fsdk.PDFArray_AddDateTime(self, *args)

    def AddFloat(self, *args):
        return _fsdk.PDFArray_AddFloat(self, *args)

    def AddInteger(self, *args):
        return _fsdk.PDFArray_AddInteger(self, *args)

    def AddMatrix(self, *args):
        return _fsdk.PDFArray_AddMatrix(self, *args)

    def AddRect(self, *args):
        return _fsdk.PDFArray_AddRect(self, *args)

    def AddName(self, *args):
        return _fsdk.PDFArray_AddName(self, *args)

    def AddString(self, *args):
        return _fsdk.PDFArray_AddString(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PDFArray_InsertAt(self, *args)

    def SetAt(self, *args):
        return _fsdk.PDFArray_SetAt(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PDFArray_RemoveAt(self, *args)

    def AddReference(self, *args):
        return _fsdk.PDFArray_AddReference(self, *args)
    __swig_destroy__ = _fsdk.delete_PDFArray
    __del__ = lambda self: None
PDFArray_swigregister = _fsdk.PDFArray_swigregister
PDFArray_swigregister(PDFArray)

def PDFArray_Create(*args):
    return _fsdk.PDFArray_Create(*args)
PDFArray_Create = _fsdk.PDFArray_Create

def PDFArray_CreateFromMatrix(*args):
    return _fsdk.PDFArray_CreateFromMatrix(*args)
PDFArray_CreateFromMatrix = _fsdk.PDFArray_CreateFromMatrix

def PDFArray_CreateFromRect(*args):
    return _fsdk.PDFArray_CreateFromRect(*args)
PDFArray_CreateFromRect = _fsdk.PDFArray_CreateFromRect

class PDFDictionary(PDFObject):
    __swig_setmethods__ = {}
    for _s in [PDFObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDictionary, name, value)
    __swig_getmethods__ = {}
    for _s in [PDFObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDictionary, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_fsdk.PDFDictionary_Create)
    else:
        Create = _fsdk.PDFDictionary_Create

    def HasKey(self, *args):
        return _fsdk.PDFDictionary_HasKey(self, *args)

    def GetElement(self, *args):
        return _fsdk.PDFDictionary_GetElement(self, *args)

    def MoveNext(self, *args):
        return _fsdk.PDFDictionary_MoveNext(self, *args)

    def GetKey(self, *args):
        return _fsdk.PDFDictionary_GetKey(self, *args)

    def GetValue(self, *args):
        return _fsdk.PDFDictionary_GetValue(self, *args)

    def SetAt(self, *args):
        return _fsdk.PDFDictionary_SetAt(self, *args)

    def SetAtReference(self, *args):
        return _fsdk.PDFDictionary_SetAtReference(self, *args)

    def SetAtBoolean(self, *args):
        return _fsdk.PDFDictionary_SetAtBoolean(self, *args)

    def SetAtDateTime(self, *args):
        return _fsdk.PDFDictionary_SetAtDateTime(self, *args)

    def SetAtFloat(self, *args):
        return _fsdk.PDFDictionary_SetAtFloat(self, *args)

    def SetAtInteger(self, *args):
        return _fsdk.PDFDictionary_SetAtInteger(self, *args)

    def SetAtMatrix(self, *args):
        return _fsdk.PDFDictionary_SetAtMatrix(self, *args)

    def SetAtRect(self, *args):
        return _fsdk.PDFDictionary_SetAtRect(self, *args)

    def SetAtName(self, *args):
        return _fsdk.PDFDictionary_SetAtName(self, *args)

    def SetAtString(self, *args):
        return _fsdk.PDFDictionary_SetAtString(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PDFDictionary_RemoveAt(self, *args)
    __swig_destroy__ = _fsdk.delete_PDFDictionary
    __del__ = lambda self: None
PDFDictionary_swigregister = _fsdk.PDFDictionary_swigregister
PDFDictionary_swigregister(PDFDictionary)

def PDFDictionary_Create(*args):
    return _fsdk.PDFDictionary_Create(*args)
PDFDictionary_Create = _fsdk.PDFDictionary_Create

class PDFNameTree(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFNameTree, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFNameTree, name)
    __repr__ = _swig_repr
    e_Dests = _fsdk.PDFNameTree_e_Dests
    e_JavaScript = _fsdk.PDFNameTree_e_JavaScript
    e_EmbeddedFiles = _fsdk.PDFNameTree_e_EmbeddedFiles
    e_Pages = _fsdk.PDFNameTree_e_Pages
    e_Templates = _fsdk.PDFNameTree_e_Templates
    __swig_destroy__ = _fsdk.delete_PDFNameTree
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFNameTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFNameTree___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFNameTree___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFNameTree_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.PDFNameTree_GetType(self, *args)

    def HasName(self, *args):
        return _fsdk.PDFNameTree_HasName(self, *args)

    def GetCount(self, *args):
        return _fsdk.PDFNameTree_GetCount(self, *args)

    def GetName(self, *args):
        return _fsdk.PDFNameTree_GetName(self, *args)

    def GetObj(self, *args):
        return _fsdk.PDFNameTree_GetObj(self, *args)

    def SetObj(self, *args):
        return _fsdk.PDFNameTree_SetObj(self, *args)

    def Rename(self, *args):
        return _fsdk.PDFNameTree_Rename(self, *args)

    def Add(self, *args):
        return _fsdk.PDFNameTree_Add(self, *args)

    def RemoveObj(self, *args):
        return _fsdk.PDFNameTree_RemoveObj(self, *args)

    def RemoveAllObjs(self, *args):
        return _fsdk.PDFNameTree_RemoveAllObjs(self, *args)
PDFNameTree_swigregister = _fsdk.PDFNameTree_swigregister
PDFNameTree_swigregister(PDFNameTree)

class PDFNumberTree(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFNumberTree, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFNumberTree, name)
    __repr__ = _swig_repr
    e_PageLabels = _fsdk.PDFNumberTree_e_PageLabels
    __swig_destroy__ = _fsdk.delete_PDFNumberTree
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFNumberTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFNumberTree___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFNumberTree___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFNumberTree_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.PDFNumberTree_GetType(self, *args)

    def HasNumber(self, *args):
        return _fsdk.PDFNumberTree_HasNumber(self, *args)

    def GetObj(self, *args):
        return _fsdk.PDFNumberTree_GetObj(self, *args)

    def SetObj(self, *args):
        return _fsdk.PDFNumberTree_SetObj(self, *args)

    def RemoveObj(self, *args):
        return _fsdk.PDFNumberTree_RemoveObj(self, *args)

    def RemoveAllObjs(self, *args):
        return _fsdk.PDFNumberTree_RemoveAllObjs(self, *args)
PDFNumberTree_swigregister = _fsdk.PDFNumberTree_swigregister
PDFNumberTree_swigregister(PDFNumberTree)

class StructTreeEntity(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructTreeEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructTreeEntity, name)
    __repr__ = _swig_repr
    e_UnknownType = _fsdk.StructTreeEntity_e_UnknownType
    e_StructTreeEntityTypeElement = _fsdk.StructTreeEntity_e_StructTreeEntityTypeElement
    e_StructTreeEntityTypeMarkedContent = _fsdk.StructTreeEntity_e_StructTreeEntityTypeMarkedContent
    e_StructTreeEntityTypeObjectContent = _fsdk.StructTreeEntity_e_StructTreeEntityTypeObjectContent
    __swig_destroy__ = _fsdk.delete_StructTreeEntity
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_StructTreeEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.StructTreeEntity___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.StructTreeEntity___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.StructTreeEntity_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.StructTreeEntity_GetType(self, *args)

    def GetPage(self, *args):
        return _fsdk.StructTreeEntity_GetPage(self, *args)
StructTreeEntity_swigregister = _fsdk.StructTreeEntity_swigregister
StructTreeEntity_swigregister(StructTreeEntity)

class StructElement(StructTreeEntity):
    __swig_setmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructElement, name)
    __repr__ = _swig_repr
    e_ElementInfoTypeTitle = _fsdk.StructElement_e_ElementInfoTypeTitle
    e_ElementInfoTypeLanguage = _fsdk.StructElement_e_ElementInfoTypeLanguage
    e_ElementInfoTypeAltDescription = _fsdk.StructElement_e_ElementInfoTypeAltDescription
    e_ElementInfoTypeExpandedForm = _fsdk.StructElement_e_ElementInfoTypeExpandedForm
    e_ElementInfoTypeActualText = _fsdk.StructElement_e_ElementInfoTypeActualText

    def __init__(self, *args):
        this = _fsdk.new_StructElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_StructElement
    __del__ = lambda self: None

    def GetStructureTypeName(self, *args):
        return _fsdk.StructElement_GetStructureTypeName(self, *args)

    def GetChildCount(self, *args):
        return _fsdk.StructElement_GetChildCount(self, *args)

    def GetChild(self, *args):
        return _fsdk.StructElement_GetChild(self, *args)

    def HasElementInfo(self, *args):
        return _fsdk.StructElement_HasElementInfo(self, *args)

    def GetElementInfo(self, *args):
        return _fsdk.StructElement_GetElementInfo(self, *args)

    def GetParentElement(self, *args):
        return _fsdk.StructElement_GetParentElement(self, *args)
StructElement_swigregister = _fsdk.StructElement_swigregister
StructElement_swigregister(StructElement)

class StructMarkedContent(StructTreeEntity):
    __swig_setmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructMarkedContent, name, value)
    __swig_getmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructMarkedContent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_StructMarkedContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_StructMarkedContent
    __del__ = lambda self: None

    def GetParentElement(self, *args):
        return _fsdk.StructMarkedContent_GetParentElement(self, *args)

    def GetMCID(self, *args):
        return _fsdk.StructMarkedContent_GetMCID(self, *args)

    def GetStmDict(self, *args):
        return _fsdk.StructMarkedContent_GetStmDict(self, *args)

    def GetStmOwnerDict(self, *args):
        return _fsdk.StructMarkedContent_GetStmOwnerDict(self, *args)
StructMarkedContent_swigregister = _fsdk.StructMarkedContent_swigregister
StructMarkedContent_swigregister(StructMarkedContent)

class StructObjectContent(StructTreeEntity):
    __swig_setmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructObjectContent, name, value)
    __swig_getmethods__ = {}
    for _s in [StructTreeEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructObjectContent, name)
    __repr__ = _swig_repr
    e_UnknownType = _fsdk.StructObjectContent_e_UnknownType
    e_StructObjectTypeInvalid = _fsdk.StructObjectContent_e_StructObjectTypeInvalid
    e_StructObjectTypeImage = _fsdk.StructObjectContent_e_StructObjectTypeImage
    e_StructObjectTypeForm = _fsdk.StructObjectContent_e_StructObjectTypeForm
    e_StructObjectTypeAnnot = _fsdk.StructObjectContent_e_StructObjectTypeAnnot

    def __init__(self, *args):
        this = _fsdk.new_StructObjectContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_StructObjectContent
    __del__ = lambda self: None

    def GetParentElement(self, *args):
        return _fsdk.StructObjectContent_GetParentElement(self, *args)

    def GetObjectType(self, *args):
        return _fsdk.StructObjectContent_GetObjectType(self, *args)

    def GetDict(self, *args):
        return _fsdk.StructObjectContent_GetDict(self, *args)
StructObjectContent_swigregister = _fsdk.StructObjectContent_swigregister
StructObjectContent_swigregister(StructObjectContent)

class PDFStructTree(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFStructTree, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFStructTree, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PDFStructTree
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFStructTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFStructTree___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFStructTree___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFStructTree_IsEmpty(self, *args)

    def GetChildCount(self, *args):
        return _fsdk.PDFStructTree_GetChildCount(self, *args)

    def GetChild(self, *args):
        return _fsdk.PDFStructTree_GetChild(self, *args)
PDFStructTree_swigregister = _fsdk.PDFStructTree_swigregister
PDFStructTree_swigregister(PDFStructTree)

class CombineDocumentInfo(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineDocumentInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombineDocumentInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_CombineDocumentInfo
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_CombineDocumentInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.CombineDocumentInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.CombineDocumentInfo___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.CombineDocumentInfo_IsEmpty(self, *args)

    def SetBookmarkTitle(self, *args):
        return _fsdk.CombineDocumentInfo_SetBookmarkTitle(self, *args)

    def SetPDFFileName(self, *args):
        return _fsdk.CombineDocumentInfo_SetPDFFileName(self, *args)
CombineDocumentInfo_swigregister = _fsdk.CombineDocumentInfo_swigregister
CombineDocumentInfo_swigregister(CombineDocumentInfo)

class CombineDocumentInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineDocumentInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CombineDocumentInfoArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_CombineDocumentInfoArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_CombineDocumentInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.CombineDocumentInfoArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.CombineDocumentInfoArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.CombineDocumentInfoArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.CombineDocumentInfoArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.CombineDocumentInfoArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.CombineDocumentInfoArray_RemoveAll(self, *args)
CombineDocumentInfoArray_swigregister = _fsdk.CombineDocumentInfoArray_swigregister
CombineDocumentInfoArray_swigregister(CombineDocumentInfoArray)

class Combination(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Combination, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Combination, name)
    __repr__ = _swig_repr
    e_CombineDocsOptionBookmark = _fsdk.Combination_e_CombineDocsOptionBookmark
    e_CombineDocsOptionAcroformRename = _fsdk.Combination_e_CombineDocsOptionAcroformRename
    e_CombineDocsOptionStructrueTree = _fsdk.Combination_e_CombineDocsOptionStructrueTree
    e_CombineDocsOptionOutputIntents = _fsdk.Combination_e_CombineDocsOptionOutputIntents
    e_CombineDocsOptionOCProperties = _fsdk.Combination_e_CombineDocsOptionOCProperties
    e_CombineDocsOptionMarkInfos = _fsdk.Combination_e_CombineDocsOptionMarkInfos
    e_CombineDocsOptionPageLabels = _fsdk.Combination_e_CombineDocsOptionPageLabels
    e_CombineDocsOptionNames = _fsdk.Combination_e_CombineDocsOptionNames
    e_CombineDocsOptionObjectStream = _fsdk.Combination_e_CombineDocsOptionObjectStream
    e_CombineDocsOptionDuplicateStream = _fsdk.Combination_e_CombineDocsOptionDuplicateStream
    if _newclass:
        StartCombineDocuments = staticmethod(_fsdk.Combination_StartCombineDocuments)
    else:
        StartCombineDocuments = _fsdk.Combination_StartCombineDocuments

    def __init__(self, *args):
        this = _fsdk.new_Combination(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Combination
    __del__ = lambda self: None
Combination_swigregister = _fsdk.Combination_swigregister
Combination_swigregister(Combination)

def Combination_StartCombineDocuments(*args):
    return _fsdk.Combination_StartCombineDocuments(*args)
Combination_StartCombineDocuments = _fsdk.Combination_StartCombineDocuments

class AssociatedFiles(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssociatedFiles, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssociatedFiles, name)
    __repr__ = _swig_repr
    e_RelationshipUnspecified = _fsdk.AssociatedFiles_e_RelationshipUnspecified
    e_RelationshipSource = _fsdk.AssociatedFiles_e_RelationshipSource
    e_RelationshipData = _fsdk.AssociatedFiles_e_RelationshipData
    e_RelationshipAlternative = _fsdk.AssociatedFiles_e_RelationshipAlternative
    e_RelationshipSupplement = _fsdk.AssociatedFiles_e_RelationshipSupplement
    e_RelationshipEncryptedPayload = _fsdk.AssociatedFiles_e_RelationshipEncryptedPayload
    e_RelationshipFormData = _fsdk.AssociatedFiles_e_RelationshipFormData
    e_RelationshipSchema = _fsdk.AssociatedFiles_e_RelationshipSchema

    def __eq__(self, *args):
        return _fsdk.AssociatedFiles___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.AssociatedFiles___ne__(self, *args)

    def __init__(self, *args):
        this = _fsdk.new_AssociatedFiles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_AssociatedFiles
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.AssociatedFiles_IsEmpty(self, *args)

    def GetAssociatedFilesCount(self, *args):
        return _fsdk.AssociatedFiles_GetAssociatedFilesCount(self, *args)

    def GetAssociatedFile(self, *args):
        return _fsdk.AssociatedFiles_GetAssociatedFile(self, *args)

    def AssociateFile(self, *args):
        return _fsdk.AssociatedFiles_AssociateFile(self, *args)

    def RemoveAssociatedFile(self, *args):
        return _fsdk.AssociatedFiles_RemoveAssociatedFile(self, *args)
AssociatedFiles_swigregister = _fsdk.AssociatedFiles_swigregister
AssociatedFiles_swigregister(AssociatedFiles)

class FileSpec(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSpec, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileSpec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FileSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FileSpec___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FileSpec___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_FileSpec
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.FileSpec_IsEmpty(self, *args)

    def GetFileName(self, *args):
        return _fsdk.FileSpec_GetFileName(self, *args)

    def SetFileName(self, *args):
        return _fsdk.FileSpec_SetFileName(self, *args)

    def GetAssociteFileRelationship(self, *args):
        return _fsdk.FileSpec_GetAssociteFileRelationship(self, *args)

    def SetAssociteFileRelationship(self, *args):
        return _fsdk.FileSpec_SetAssociteFileRelationship(self, *args)

    def GetFileSize(self, *args):
        return _fsdk.FileSpec_GetFileSize(self, *args)

    def GetCompressedEmbeddedFileSize(self, *args):
        return _fsdk.FileSpec_GetCompressedEmbeddedFileSize(self, *args)

    def GetFileData(self, *args):
        return _fsdk.FileSpec_GetFileData(self, *args)

    def Embed(self, *args):
        return _fsdk.FileSpec_Embed(self, *args)

    def IsEmbedded(self, *args):
        return _fsdk.FileSpec_IsEmbedded(self, *args)

    def GetDescription(self, *args):
        return _fsdk.FileSpec_GetDescription(self, *args)

    def SetDescription(self, *args):
        return _fsdk.FileSpec_SetDescription(self, *args)

    def GetCreationDateTime(self, *args):
        return _fsdk.FileSpec_GetCreationDateTime(self, *args)

    def SetCreationDateTime(self, *args):
        return _fsdk.FileSpec_SetCreationDateTime(self, *args)

    def GetModifiedDateTime(self, *args):
        return _fsdk.FileSpec_GetModifiedDateTime(self, *args)

    def SetModifiedDateTime(self, *args):
        return _fsdk.FileSpec_SetModifiedDateTime(self, *args)

    def GetChecksum(self, *args):
        return _fsdk.FileSpec_GetChecksum(self, *args)

    def SetChecksum(self, *args):
        return _fsdk.FileSpec_SetChecksum(self, *args)

    def GetSubtype(self, *args):
        return _fsdk.FileSpec_GetSubtype(self, *args)

    def SetSubtype(self, *args):
        return _fsdk.FileSpec_SetSubtype(self, *args)

    def GetDict(self, *args):
        return _fsdk.FileSpec_GetDict(self, *args)

    def ExportToFile(self, *args):
        return _fsdk.FileSpec_ExportToFile(self, *args)

    def ExportToFileStream(self, *args):
        return _fsdk.FileSpec_ExportToFileStream(self, *args)
FileSpec_swigregister = _fsdk.FileSpec_swigregister
FileSpec_swigregister(FileSpec)

class TextFillSignObjectData(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFillSignObjectData, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextFillSignObjectData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TextFillSignObjectData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.TextFillSignObjectData_Set(self, *args)
    __swig_setmethods__["text_state"] = _fsdk.TextFillSignObjectData_text_state_set
    __swig_getmethods__["text_state"] = _fsdk.TextFillSignObjectData_text_state_get
    if _newclass:
        text_state = _swig_property(_fsdk.TextFillSignObjectData_text_state_get, _fsdk.TextFillSignObjectData_text_state_set)
    __swig_setmethods__["text"] = _fsdk.TextFillSignObjectData_text_set
    __swig_getmethods__["text"] = _fsdk.TextFillSignObjectData_text_get
    if _newclass:
        text = _swig_property(_fsdk.TextFillSignObjectData_text_get, _fsdk.TextFillSignObjectData_text_set)
    __swig_destroy__ = _fsdk.delete_TextFillSignObjectData
    __del__ = lambda self: None
TextFillSignObjectData_swigregister = _fsdk.TextFillSignObjectData_swigregister
TextFillSignObjectData_swigregister(TextFillSignObjectData)

class TextFillSignObjectDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFillSignObjectDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextFillSignObjectDataArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TextFillSignObjectDataArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TextFillSignObjectDataArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.TextFillSignObjectDataArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.TextFillSignObjectDataArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.TextFillSignObjectDataArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.TextFillSignObjectDataArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.TextFillSignObjectDataArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.TextFillSignObjectDataArray_RemoveAll(self, *args)
TextFillSignObjectDataArray_swigregister = _fsdk.TextFillSignObjectDataArray_swigregister
TextFillSignObjectDataArray_swigregister(TextFillSignObjectDataArray)

class FillSign(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillSign, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillSign, name)
    __repr__ = _swig_repr
    e_FillSignObjectTypeText = _fsdk.FillSign_e_FillSignObjectTypeText
    e_FillSignObjectTypeCrossMark = _fsdk.FillSign_e_FillSignObjectTypeCrossMark
    e_FillSignObjectTypeCheckMark = _fsdk.FillSign_e_FillSignObjectTypeCheckMark
    e_FillSignObjectTypeRoundRectangle = _fsdk.FillSign_e_FillSignObjectTypeRoundRectangle
    e_FillSignObjectTypeLine = _fsdk.FillSign_e_FillSignObjectTypeLine
    e_FillSignObjectTypeDot = _fsdk.FillSign_e_FillSignObjectTypeDot
    e_FillSignObjectTypeSignature = _fsdk.FillSign_e_FillSignObjectTypeSignature
    e_FillSignObjectTypeInitialsSignature = _fsdk.FillSign_e_FillSignObjectTypeInitialsSignature

    def __init__(self, *args):
        this = _fsdk.new_FillSign(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_FillSign
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.FillSign___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FillSign___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.FillSign_IsEmpty(self, *args)

    def AddObject(self, *args):
        return _fsdk.FillSign_AddObject(self, *args)

    def AddTextObject(self, *args):
        return _fsdk.FillSign_AddTextObject(self, *args)

    def RemoveObject(self, *args):
        return _fsdk.FillSign_RemoveObject(self, *args)

    def GetObjectAtPoint(self, *args):
        return _fsdk.FillSign_GetObjectAtPoint(self, *args)

    def GetObjectAtDevicePoint(self, *args):
        return _fsdk.FillSign_GetObjectAtDevicePoint(self, *args)
FillSign_swigregister = _fsdk.FillSign_swigregister
FillSign_swigregister(FillSign)

class FillSignObject(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillSignObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillSignObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_FillSignObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.FillSignObject___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.FillSignObject___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.FillSignObject_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_FillSignObject
    __del__ = lambda self: None

    def GetType(self, *args):
        return _fsdk.FillSignObject_GetType(self, *args)

    def Move(self, *args):
        return _fsdk.FillSignObject_Move(self, *args)

    def GetRect(self, *args):
        return _fsdk.FillSignObject_GetRect(self, *args)

    def GenerateContent(self, *args):
        return _fsdk.FillSignObject_GenerateContent(self, *args)
FillSignObject_swigregister = _fsdk.FillSignObject_swigregister
FillSignObject_swigregister(FillSignObject)

class TextFillSignObject(FillSignObject):
    __swig_setmethods__ = {}
    for _s in [FillSignObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFillSignObject, name, value)
    __swig_getmethods__ = {}
    for _s in [FillSignObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextFillSignObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TextFillSignObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TextFillSignObject
    __del__ = lambda self: None

    def GetTextDataArray(self, *args):
        return _fsdk.TextFillSignObject_GetTextDataArray(self, *args)

    def IsCombFieldMode(self, *args):
        return _fsdk.TextFillSignObject_IsCombFieldMode(self, *args)
TextFillSignObject_swigregister = _fsdk.TextFillSignObject_swigregister
TextFillSignObject_swigregister(TextFillSignObject)

class SignatureFillSignObject(FillSignObject):
    __swig_setmethods__ = {}
    for _s in [FillSignObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureFillSignObject, name, value)
    __swig_getmethods__ = {}
    for _s in [FillSignObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureFillSignObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SignatureFillSignObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_SignatureFillSignObject
    __del__ = lambda self: None

    def IsInitialsType(self, *args):
        return _fsdk.SignatureFillSignObject_IsInitialsType(self, *args)

    def SetBitmap(self, *args):
        return _fsdk.SignatureFillSignObject_SetBitmap(self, *args)
SignatureFillSignObject_swigregister = _fsdk.SignatureFillSignObject_swigregister
SignatureFillSignObject_swigregister(SignatureFillSignObject)

class LayerNodeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerNodeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerNodeArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_LayerNodeArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_LayerNodeArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.LayerNodeArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.LayerNodeArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.LayerNodeArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.LayerNodeArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.LayerNodeArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.LayerNodeArray_RemoveAll(self, *args)
LayerNodeArray_swigregister = _fsdk.LayerNodeArray_swigregister
LayerNodeArray_swigregister(LayerNodeArray)

class LayerZoomData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerZoomData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerZoomData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LayerZoomData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.LayerZoomData_Set(self, *args)
    __swig_setmethods__["min_factor"] = _fsdk.LayerZoomData_min_factor_set
    __swig_getmethods__["min_factor"] = _fsdk.LayerZoomData_min_factor_get
    if _newclass:
        min_factor = _swig_property(_fsdk.LayerZoomData_min_factor_get, _fsdk.LayerZoomData_min_factor_set)
    __swig_setmethods__["max_factor"] = _fsdk.LayerZoomData_max_factor_set
    __swig_getmethods__["max_factor"] = _fsdk.LayerZoomData_max_factor_get
    if _newclass:
        max_factor = _swig_property(_fsdk.LayerZoomData_max_factor_get, _fsdk.LayerZoomData_max_factor_set)
    __swig_destroy__ = _fsdk.delete_LayerZoomData
    __del__ = lambda self: None
LayerZoomData_swigregister = _fsdk.LayerZoomData_swigregister
LayerZoomData_swigregister(LayerZoomData)

class LayerTree(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerTree, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerTree, name)
    __repr__ = _swig_repr
    e_StateON = _fsdk.LayerTree_e_StateON
    e_StateOFF = _fsdk.LayerTree_e_StateOFF
    e_StateUnchanged = _fsdk.LayerTree_e_StateUnchanged
    e_StateUndefined = _fsdk.LayerTree_e_StateUndefined

    def __init__(self, *args):
        this = _fsdk.new_LayerTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.LayerTree___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LayerTree___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.LayerTree_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_LayerTree
    __del__ = lambda self: None

    def SetBaseState(self, *args):
        return _fsdk.LayerTree_SetBaseState(self, *args)

    def GetRootNode(self, *args):
        return _fsdk.LayerTree_GetRootNode(self, *args)

    def GetDict(self, *args):
        return _fsdk.LayerTree_GetDict(self, *args)

    def GetOCGs(self, *args):
        return _fsdk.LayerTree_GetOCGs(self, *args)

    def GetOCGsByPageIndex(self, *args):
        return _fsdk.LayerTree_GetOCGsByPageIndex(self, *args)
LayerTree_swigregister = _fsdk.LayerTree_swigregister
LayerTree_swigregister(LayerTree)

class LayerPrintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerPrintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerPrintData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LayerPrintData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.LayerPrintData_Set(self, *args)
    __swig_setmethods__["subtype"] = _fsdk.LayerPrintData_subtype_set
    __swig_getmethods__["subtype"] = _fsdk.LayerPrintData_subtype_get
    if _newclass:
        subtype = _swig_property(_fsdk.LayerPrintData_subtype_get, _fsdk.LayerPrintData_subtype_set)
    __swig_setmethods__["print_state"] = _fsdk.LayerPrintData_print_state_set
    __swig_getmethods__["print_state"] = _fsdk.LayerPrintData_print_state_get
    if _newclass:
        print_state = _swig_property(_fsdk.LayerPrintData_print_state_get, _fsdk.LayerPrintData_print_state_set)
    __swig_destroy__ = _fsdk.delete_LayerPrintData
    __del__ = lambda self: None
LayerPrintData_swigregister = _fsdk.LayerPrintData_swigregister
LayerPrintData_swigregister(LayerPrintData)

class LayerContext(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerContext, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerContext, name)
    __repr__ = _swig_repr
    e_UsageView = _fsdk.LayerContext_e_UsageView
    e_UsageDesign = _fsdk.LayerContext_e_UsageDesign
    e_UsagePrint = _fsdk.LayerContext_e_UsagePrint
    e_UsageExport = _fsdk.LayerContext_e_UsageExport
    e_UsageZoom = _fsdk.LayerContext_e_UsageZoom

    def __init__(self, *args):
        this = _fsdk.new_LayerContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.LayerContext___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LayerContext___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_LayerContext
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.LayerContext_IsEmpty(self, *args)

    def GetDocument(self, *args):
        return _fsdk.LayerContext_GetDocument(self, *args)

    def GetUsageType(self, *args):
        return _fsdk.LayerContext_GetUsageType(self, *args)

    def Reset(self, *args):
        return _fsdk.LayerContext_Reset(self, *args)

    def CopyStates(self, *args):
        return _fsdk.LayerContext_CopyStates(self, *args)

    def MergeStates(self, *args):
        return _fsdk.LayerContext_MergeStates(self, *args)

    def IsVisible(self, *args):
        return _fsdk.LayerContext_IsVisible(self, *args)

    def SetVisible(self, *args):
        return _fsdk.LayerContext_SetVisible(self, *args)
LayerContext_swigregister = _fsdk.LayerContext_swigregister
LayerContext_swigregister(LayerContext)

class LayerNode(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_LayerNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.LayerNode___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LayerNode___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.LayerNode_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_LayerNode
    __del__ = lambda self: None

    def GetChildrenCount(self, *args):
        return _fsdk.LayerNode_GetChildrenCount(self, *args)

    def GetChild(self, *args):
        return _fsdk.LayerNode_GetChild(self, *args)

    def RemoveChild(self, *args):
        return _fsdk.LayerNode_RemoveChild(self, *args)

    def MoveTo(self, *args):
        return _fsdk.LayerNode_MoveTo(self, *args)

    def AddChild(self, *args):
        return _fsdk.LayerNode_AddChild(self, *args)

    def GetName(self, *args):
        return _fsdk.LayerNode_GetName(self, *args)

    def IsLocked(self, *args):
        return _fsdk.LayerNode_IsLocked(self, *args)

    def HasLayer(self, *args):
        return _fsdk.LayerNode_HasLayer(self, *args)

    def HasIntent(self, *args):
        return _fsdk.LayerNode_HasIntent(self, *args)

    def IsInPage(self, *args):
        return _fsdk.LayerNode_IsInPage(self, *args)

    def GetViewUsage(self, *args):
        return _fsdk.LayerNode_GetViewUsage(self, *args)

    def GetExportUsage(self, *args):
        return _fsdk.LayerNode_GetExportUsage(self, *args)

    def GetPrintUsage(self, *args):
        return _fsdk.LayerNode_GetPrintUsage(self, *args)

    def GetZoomUsage(self, *args):
        return _fsdk.LayerNode_GetZoomUsage(self, *args)

    def SetName(self, *args):
        return _fsdk.LayerNode_SetName(self, *args)

    def SetDefaultVisible(self, *args):
        return _fsdk.LayerNode_SetDefaultVisible(self, *args)

    def SetViewUsage(self, *args):
        return _fsdk.LayerNode_SetViewUsage(self, *args)

    def SetExportUsage(self, *args):
        return _fsdk.LayerNode_SetExportUsage(self, *args)

    def SetPrintUsage(self, *args):
        return _fsdk.LayerNode_SetPrintUsage(self, *args)

    def SetZoomUsage(self, *args):
        return _fsdk.LayerNode_SetZoomUsage(self, *args)

    def GetGraphicsObjects(self, *args):
        return _fsdk.LayerNode_GetGraphicsObjects(self, *args)

    def AddGraphicsObject(self, *args):
        return _fsdk.LayerNode_AddGraphicsObject(self, *args)

    def RemoveGraphicsObject(self, *args):
        return _fsdk.LayerNode_RemoveGraphicsObject(self, *args)

    def RemoveUsage(self, *args):
        return _fsdk.LayerNode_RemoveUsage(self, *args)

    def GetDict(self, *args):
        return _fsdk.LayerNode_GetDict(self, *args)

    def GetAnnots(self, *args):
        return _fsdk.LayerNode_GetAnnots(self, *args)
LayerNode_swigregister = _fsdk.LayerNode_swigregister
LayerNode_swigregister(LayerNode)

class Response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Response, name)
    __repr__ = _swig_repr
    e_TypeNone = _fsdk.Response_e_TypeNone
    e_TypeCRL = _fsdk.Response_e_TypeCRL
    e_TypeOCSP = _fsdk.Response_e_TypeOCSP

    def __init__(self, *args):
        this = _fsdk.new_Response(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Response___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Response___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.Response_Set(self, *args)
    __swig_setmethods__["type"] = _fsdk.Response_type_set
    __swig_getmethods__["type"] = _fsdk.Response_type_get
    if _newclass:
        type = _swig_property(_fsdk.Response_type_get, _fsdk.Response_type_set)
    __swig_setmethods__["response_data"] = _fsdk.Response_response_data_set
    __swig_getmethods__["response_data"] = _fsdk.Response_response_data_get
    if _newclass:
        response_data = _swig_property(_fsdk.Response_response_data_get, _fsdk.Response_response_data_set)
    __swig_destroy__ = _fsdk.delete_Response
    __del__ = lambda self: None
Response_swigregister = _fsdk.Response_swigregister
Response_swigregister(Response)

class TimeRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TimeRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TimeRange___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TimeRange___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TimeRange_Set(self, *args)
    __swig_setmethods__["start_time"] = _fsdk.TimeRange_start_time_set
    __swig_getmethods__["start_time"] = _fsdk.TimeRange_start_time_get
    if _newclass:
        start_time = _swig_property(_fsdk.TimeRange_start_time_get, _fsdk.TimeRange_start_time_set)
    __swig_setmethods__["end_time"] = _fsdk.TimeRange_end_time_set
    __swig_getmethods__["end_time"] = _fsdk.TimeRange_end_time_get
    if _newclass:
        end_time = _swig_property(_fsdk.TimeRange_end_time_get, _fsdk.TimeRange_end_time_set)
    __swig_destroy__ = _fsdk.delete_TimeRange
    __del__ = lambda self: None
TimeRange_swigregister = _fsdk.TimeRange_swigregister
TimeRange_swigregister(TimeRange)

class CertVerifyResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertVerifyResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CertVerifyResult, name)
    __repr__ = _swig_repr
    e_CertStatusValid = _fsdk.CertVerifyResult_e_CertStatusValid
    e_CertStatusRevoked = _fsdk.CertVerifyResult_e_CertStatusRevoked
    e_CertStatusExpired = _fsdk.CertVerifyResult_e_CertStatusExpired
    e_CertStatusUnknown = _fsdk.CertVerifyResult_e_CertStatusUnknown
    e_ReasonNoStatus = _fsdk.CertVerifyResult_e_ReasonNoStatus
    e_ReasonUnspecified = _fsdk.CertVerifyResult_e_ReasonUnspecified
    e_ReasonKeyCompromise = _fsdk.CertVerifyResult_e_ReasonKeyCompromise
    e_ReasonCACompromise = _fsdk.CertVerifyResult_e_ReasonCACompromise
    e_ReasonAffiliationChanged = _fsdk.CertVerifyResult_e_ReasonAffiliationChanged
    e_ReasonSuperseded = _fsdk.CertVerifyResult_e_ReasonSuperseded
    e_ReasonCessationOfOperation = _fsdk.CertVerifyResult_e_ReasonCessationOfOperation
    e_ReasonCertificateHold = _fsdk.CertVerifyResult_e_ReasonCertificateHold
    e_ReasonRemoveFromCRL = _fsdk.CertVerifyResult_e_ReasonRemoveFromCRL
    e_ReasonPrivilegeWithDrawn = _fsdk.CertVerifyResult_e_ReasonPrivilegeWithDrawn
    e_ReasonAACompromise = _fsdk.CertVerifyResult_e_ReasonAACompromise
    e_LocationNotSet = _fsdk.CertVerifyResult_e_LocationNotSet
    e_LocationDSS = _fsdk.CertVerifyResult_e_LocationDSS
    e_LocationSignature = _fsdk.CertVerifyResult_e_LocationSignature
    e_LocationOnline = _fsdk.CertVerifyResult_e_LocationOnline

    def __init__(self, *args):
        this = _fsdk.new_CertVerifyResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.CertVerifyResult___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.CertVerifyResult___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.CertVerifyResult_Set(self, *args)
    __swig_setmethods__["cert"] = _fsdk.CertVerifyResult_cert_set
    __swig_getmethods__["cert"] = _fsdk.CertVerifyResult_cert_get
    if _newclass:
        cert = _swig_property(_fsdk.CertVerifyResult_cert_get, _fsdk.CertVerifyResult_cert_set)
    __swig_setmethods__["is_ca"] = _fsdk.CertVerifyResult_is_ca_set
    __swig_getmethods__["is_ca"] = _fsdk.CertVerifyResult_is_ca_get
    if _newclass:
        is_ca = _swig_property(_fsdk.CertVerifyResult_is_ca_get, _fsdk.CertVerifyResult_is_ca_set)
    __swig_setmethods__["is_trusted"] = _fsdk.CertVerifyResult_is_trusted_set
    __swig_getmethods__["is_trusted"] = _fsdk.CertVerifyResult_is_trusted_get
    if _newclass:
        is_trusted = _swig_property(_fsdk.CertVerifyResult_is_trusted_get, _fsdk.CertVerifyResult_is_trusted_set)
    __swig_setmethods__["response"] = _fsdk.CertVerifyResult_response_set
    __swig_getmethods__["response"] = _fsdk.CertVerifyResult_response_get
    if _newclass:
        response = _swig_property(_fsdk.CertVerifyResult_response_get, _fsdk.CertVerifyResult_response_set)
    __swig_setmethods__["response_effect_time_range"] = _fsdk.CertVerifyResult_response_effect_time_range_set
    __swig_getmethods__["response_effect_time_range"] = _fsdk.CertVerifyResult_response_effect_time_range_get
    if _newclass:
        response_effect_time_range = _swig_property(_fsdk.CertVerifyResult_response_effect_time_range_get, _fsdk.CertVerifyResult_response_effect_time_range_set)
    __swig_setmethods__["revoke_time"] = _fsdk.CertVerifyResult_revoke_time_set
    __swig_getmethods__["revoke_time"] = _fsdk.CertVerifyResult_revoke_time_get
    if _newclass:
        revoke_time = _swig_property(_fsdk.CertVerifyResult_revoke_time_get, _fsdk.CertVerifyResult_revoke_time_set)
    __swig_setmethods__["cert_status"] = _fsdk.CertVerifyResult_cert_status_set
    __swig_getmethods__["cert_status"] = _fsdk.CertVerifyResult_cert_status_get
    if _newclass:
        cert_status = _swig_property(_fsdk.CertVerifyResult_cert_status_get, _fsdk.CertVerifyResult_cert_status_set)
    __swig_setmethods__["reason"] = _fsdk.CertVerifyResult_reason_set
    __swig_getmethods__["reason"] = _fsdk.CertVerifyResult_reason_get
    if _newclass:
        reason = _swig_property(_fsdk.CertVerifyResult_reason_get, _fsdk.CertVerifyResult_reason_set)
    __swig_setmethods__["cert_check_time"] = _fsdk.CertVerifyResult_cert_check_time_set
    __swig_getmethods__["cert_check_time"] = _fsdk.CertVerifyResult_cert_check_time_get
    if _newclass:
        cert_check_time = _swig_property(_fsdk.CertVerifyResult_cert_check_time_get, _fsdk.CertVerifyResult_cert_check_time_set)
    __swig_setmethods__["exist_signature_vri_creation_time"] = _fsdk.CertVerifyResult_exist_signature_vri_creation_time_set
    __swig_getmethods__["exist_signature_vri_creation_time"] = _fsdk.CertVerifyResult_exist_signature_vri_creation_time_get
    if _newclass:
        exist_signature_vri_creation_time = _swig_property(_fsdk.CertVerifyResult_exist_signature_vri_creation_time_get, _fsdk.CertVerifyResult_exist_signature_vri_creation_time_set)
    __swig_setmethods__["signature_vri_creation_time"] = _fsdk.CertVerifyResult_signature_vri_creation_time_set
    __swig_getmethods__["signature_vri_creation_time"] = _fsdk.CertVerifyResult_signature_vri_creation_time_get
    if _newclass:
        signature_vri_creation_time = _swig_property(_fsdk.CertVerifyResult_signature_vri_creation_time_get, _fsdk.CertVerifyResult_signature_vri_creation_time_set)
    __swig_setmethods__["exist_response_signature_vri_creation_time"] = _fsdk.CertVerifyResult_exist_response_signature_vri_creation_time_set
    __swig_getmethods__["exist_response_signature_vri_creation_time"] = _fsdk.CertVerifyResult_exist_response_signature_vri_creation_time_get
    if _newclass:
        exist_response_signature_vri_creation_time = _swig_property(_fsdk.CertVerifyResult_exist_response_signature_vri_creation_time_get, _fsdk.CertVerifyResult_exist_response_signature_vri_creation_time_set)
    __swig_setmethods__["response_signature_vri_creation_time"] = _fsdk.CertVerifyResult_response_signature_vri_creation_time_set
    __swig_getmethods__["response_signature_vri_creation_time"] = _fsdk.CertVerifyResult_response_signature_vri_creation_time_get
    if _newclass:
        response_signature_vri_creation_time = _swig_property(_fsdk.CertVerifyResult_response_signature_vri_creation_time_get, _fsdk.CertVerifyResult_response_signature_vri_creation_time_set)
    __swig_setmethods__["response_info_location"] = _fsdk.CertVerifyResult_response_info_location_set
    __swig_getmethods__["response_info_location"] = _fsdk.CertVerifyResult_response_info_location_get
    if _newclass:
        response_info_location = _swig_property(_fsdk.CertVerifyResult_response_info_location_get, _fsdk.CertVerifyResult_response_info_location_set)
    __swig_destroy__ = _fsdk.delete_CertVerifyResult
    __del__ = lambda self: None
CertVerifyResult_swigregister = _fsdk.CertVerifyResult_swigregister
CertVerifyResult_swigregister(CertVerifyResult)

class CertVerifyResultArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertVerifyResultArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CertVerifyResultArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_CertVerifyResultArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_CertVerifyResultArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.CertVerifyResultArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.CertVerifyResultArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.CertVerifyResultArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.CertVerifyResultArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.CertVerifyResultArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.CertVerifyResultArray_RemoveAll(self, *args)
CertVerifyResultArray_swigregister = _fsdk.CertVerifyResultArray_swigregister
CertVerifyResultArray_swigregister(CertVerifyResultArray)

class CertIssuerPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertIssuerPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CertIssuerPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CertIssuerPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.CertIssuerPair___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.CertIssuerPair___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.CertIssuerPair_Set(self, *args)
    __swig_setmethods__["cert"] = _fsdk.CertIssuerPair_cert_set
    __swig_getmethods__["cert"] = _fsdk.CertIssuerPair_cert_get
    if _newclass:
        cert = _swig_property(_fsdk.CertIssuerPair_cert_get, _fsdk.CertIssuerPair_cert_set)
    __swig_setmethods__["issuer"] = _fsdk.CertIssuerPair_issuer_set
    __swig_getmethods__["issuer"] = _fsdk.CertIssuerPair_issuer_get
    if _newclass:
        issuer = _swig_property(_fsdk.CertIssuerPair_issuer_get, _fsdk.CertIssuerPair_issuer_set)
    __swig_destroy__ = _fsdk.delete_CertIssuerPair
    __del__ = lambda self: None
CertIssuerPair_swigregister = _fsdk.CertIssuerPair_swigregister
CertIssuerPair_swigregister(CertIssuerPair)

class RevocationArrayInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevocationArrayInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevocationArrayInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RevocationArrayInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.RevocationArrayInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RevocationArrayInfo___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.RevocationArrayInfo_Set(self, *args)
    __swig_setmethods__["ocsp_array"] = _fsdk.RevocationArrayInfo_ocsp_array_set
    __swig_getmethods__["ocsp_array"] = _fsdk.RevocationArrayInfo_ocsp_array_get
    if _newclass:
        ocsp_array = _swig_property(_fsdk.RevocationArrayInfo_ocsp_array_get, _fsdk.RevocationArrayInfo_ocsp_array_set)
    __swig_setmethods__["crl_array"] = _fsdk.RevocationArrayInfo_crl_array_set
    __swig_getmethods__["crl_array"] = _fsdk.RevocationArrayInfo_crl_array_get
    if _newclass:
        crl_array = _swig_property(_fsdk.RevocationArrayInfo_crl_array_get, _fsdk.RevocationArrayInfo_crl_array_set)
    __swig_destroy__ = _fsdk.delete_RevocationArrayInfo
    __del__ = lambda self: None
RevocationArrayInfo_swigregister = _fsdk.RevocationArrayInfo_swigregister
RevocationArrayInfo_swigregister(RevocationArrayInfo)

class RevocationCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevocationCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevocationCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.RevocationCallback_Release(self, *args)

    def GetCertChainFromSignature(self, *args):
        return _fsdk.RevocationCallback_GetCertChainFromSignature(self, *args)

    def GetResponseOnLineForSingleCert(self, *args):
        return _fsdk.RevocationCallback_GetResponseOnLineForSingleCert(self, *args)

    def VerifyOCSP(self, *args):
        return _fsdk.RevocationCallback_VerifyOCSP(self, *args)

    def VerifyCRL(self, *args):
        return _fsdk.RevocationCallback_VerifyCRL(self, *args)

    def IsCA(self, *args):
        return _fsdk.RevocationCallback_IsCA(self, *args)

    def GetDTSTime(self, *args):
        return _fsdk.RevocationCallback_GetDTSTime(self, *args)

    def GetTSTSignature(self, *args):
        return _fsdk.RevocationCallback_GetTSTSignature(self, *args)

    def GetTSTTime(self, *args):
        return _fsdk.RevocationCallback_GetTSTTime(self, *args)

    def GetOCSPCertAndIssuer(self, *args):
        return _fsdk.RevocationCallback_GetOCSPCertAndIssuer(self, *args)

    def GetOCSPProducedAtTime(self, *args):
        return _fsdk.RevocationCallback_GetOCSPProducedAtTime(self, *args)

    def IsOCSPNeedCheck(self, *args):
        return _fsdk.RevocationCallback_IsOCSPNeedCheck(self, *args)

    def GetCertValidTimeRange(self, *args):
        return _fsdk.RevocationCallback_GetCertValidTimeRange(self, *args)

    def GetOCSPSignature(self, *args):
        return _fsdk.RevocationCallback_GetOCSPSignature(self, *args)

    def GetCRLSignature(self, *args):
        return _fsdk.RevocationCallback_GetCRLSignature(self, *args)

    def GetRevocationInfoFromSignatureData(self, *args):
        return _fsdk.RevocationCallback_GetRevocationInfoFromSignatureData(self, *args)

    def IsIssuerMatchCert(self, *args):
        return _fsdk.RevocationCallback_IsIssuerMatchCert(self, *args)

    def __init__(self, *args):
        if self.__class__ == RevocationCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_RevocationCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_RevocationCallback(self)
        return weakref_proxy(self)
RevocationCallback_swigregister = _fsdk.RevocationCallback_swigregister
RevocationCallback_swigregister(RevocationCallback)

class TrustedCertStoreCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrustedCertStoreCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrustedCertStoreCallback, name)
    __repr__ = _swig_repr

    def IsCertTrusted(self, *args):
        return _fsdk.TrustedCertStoreCallback_IsCertTrusted(self, *args)

    def IsCertTrustedRoot(self, *args):
        return _fsdk.TrustedCertStoreCallback_IsCertTrustedRoot(self, *args)

    def __init__(self, *args):
        if self.__class__ == TrustedCertStoreCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_TrustedCertStoreCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TrustedCertStoreCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_TrustedCertStoreCallback(self)
        return weakref_proxy(self)
TrustedCertStoreCallback_swigregister = _fsdk.TrustedCertStoreCallback_swigregister
TrustedCertStoreCallback_swigregister(TrustedCertStoreCallback)

class SignatureVerifyResultArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureVerifyResultArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureVerifyResultArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SignatureVerifyResultArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SignatureVerifyResultArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.SignatureVerifyResultArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.SignatureVerifyResultArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.SignatureVerifyResultArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.SignatureVerifyResultArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.SignatureVerifyResultArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.SignatureVerifyResultArray_RemoveAll(self, *args)
SignatureVerifyResultArray_swigregister = _fsdk.SignatureVerifyResultArray_swigregister
SignatureVerifyResultArray_swigregister(SignatureVerifyResultArray)

class LTVVerifier(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LTVVerifier, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LTVVerifier, name)
    __repr__ = _swig_repr
    e_SignatureCreationTime = _fsdk.LTVVerifier_e_SignatureCreationTime
    e_SignatureTSTTime = _fsdk.LTVVerifier_e_SignatureTSTTime
    e_CurrentTime = _fsdk.LTVVerifier_e_CurrentTime
    e_VRICreationTime = _fsdk.LTVVerifier_e_VRICreationTime
    e_VerifyModeAcrobat = _fsdk.LTVVerifier_e_VerifyModeAcrobat

    def __init__(self, *args):
        this = _fsdk.new_LTVVerifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.LTVVerifier___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.LTVVerifier___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_LTVVerifier
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.LTVVerifier_IsEmpty(self, *args)

    def SetRevocationCallback(self, *args):
        return _fsdk.LTVVerifier_SetRevocationCallback(self, *args)

    def SetVerifyMode(self, *args):
        return _fsdk.LTVVerifier_SetVerifyMode(self, *args)

    def SetTrustedCertStoreCallback(self, *args):
        return _fsdk.LTVVerifier_SetTrustedCertStoreCallback(self, *args)

    def Verify(self, *args):
        return _fsdk.LTVVerifier_Verify(self, *args)

    def VerifySignature(self, *args):
        return _fsdk.LTVVerifier_VerifySignature(self, *args)

    def AddDSS(self, *args):
        return _fsdk.LTVVerifier_AddDSS(self, *args)
LTVVerifier_swigregister = _fsdk.LTVVerifier_swigregister
LTVVerifier_swigregister(LTVVerifier)

class SignatureVerifyResult(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureVerifyResult, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureVerifyResult, name)
    __repr__ = _swig_repr
    e_LTVStateInactive = _fsdk.SignatureVerifyResult_e_LTVStateInactive
    e_LTVStateEnable = _fsdk.SignatureVerifyResult_e_LTVStateEnable
    e_LTVStateNotEnable = _fsdk.SignatureVerifyResult_e_LTVStateNotEnable

    def __init__(self, *args):
        this = _fsdk.new_SignatureVerifyResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.SignatureVerifyResult___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SignatureVerifyResult___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SignatureVerifyResult_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_SignatureVerifyResult
    __del__ = lambda self: None

    def GetSignatureName(self, *args):
        return _fsdk.SignatureVerifyResult_GetSignatureName(self, *args)

    def GetSignatureHashValue(self, *args):
        return _fsdk.SignatureVerifyResult_GetSignatureHashValue(self, *args)

    def GetSignatureState(self, *args):
        return _fsdk.SignatureVerifyResult_GetSignatureState(self, *args)

    def GetSignatureCheckTime(self, *args):
        return _fsdk.SignatureVerifyResult_GetSignatureCheckTime(self, *args)

    def GetSignatureCheckTimeType(self, *args):
        return _fsdk.SignatureVerifyResult_GetSignatureCheckTimeType(self, *args)

    def GetLTVState(self, *args):
        return _fsdk.SignatureVerifyResult_GetLTVState(self, *args)

    def GetCertificateVerifyResults(self, *args):
        return _fsdk.SignatureVerifyResult_GetCertificateVerifyResults(self, *args)

    def GetOCSPSigantureVerifyResults(self, *args):
        return _fsdk.SignatureVerifyResult_GetOCSPSigantureVerifyResults(self, *args)

    def GetTSTSignatureVerifyResult(self, *args):
        return _fsdk.SignatureVerifyResult_GetTSTSignatureVerifyResult(self, *args)
SignatureVerifyResult_swigregister = _fsdk.SignatureVerifyResult_swigregister
SignatureVerifyResult_swigregister(SignatureVerifyResult)

class Bookmark(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bookmark, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bookmark, name)
    __repr__ = _swig_repr
    e_StyleNormal = _fsdk.Bookmark_e_StyleNormal
    e_StyleItalic = _fsdk.Bookmark_e_StyleItalic
    e_StyleBold = _fsdk.Bookmark_e_StyleBold
    e_PosFirstChild = _fsdk.Bookmark_e_PosFirstChild
    e_PosLastChild = _fsdk.Bookmark_e_PosLastChild
    e_PosPrevSibling = _fsdk.Bookmark_e_PosPrevSibling
    e_PosNextSibling = _fsdk.Bookmark_e_PosNextSibling
    e_PosFirstSibling = _fsdk.Bookmark_e_PosFirstSibling
    e_PosLastSibling = _fsdk.Bookmark_e_PosLastSibling

    def __init__(self, *args):
        this = _fsdk.new_Bookmark(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Bookmark___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Bookmark___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Bookmark_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_Bookmark
    __del__ = lambda self: None

    def GetParent(self, *args):
        return _fsdk.Bookmark_GetParent(self, *args)

    def HasChild(self, *args):
        return _fsdk.Bookmark_HasChild(self, *args)

    def GetFirstChild(self, *args):
        return _fsdk.Bookmark_GetFirstChild(self, *args)

    def GetNextSibling(self, *args):
        return _fsdk.Bookmark_GetNextSibling(self, *args)

    def GetDestination(self, *args):
        return _fsdk.Bookmark_GetDestination(self, *args)

    def SetDestination(self, *args):
        return _fsdk.Bookmark_SetDestination(self, *args)

    def GetTitle(self, *args):
        return _fsdk.Bookmark_GetTitle(self, *args)

    def SetTitle(self, *args):
        return _fsdk.Bookmark_SetTitle(self, *args)

    def GetColor(self, *args):
        return _fsdk.Bookmark_GetColor(self, *args)

    def SetColor(self, *args):
        return _fsdk.Bookmark_SetColor(self, *args)

    def GetStyle(self, *args):
        return _fsdk.Bookmark_GetStyle(self, *args)

    def SetStyle(self, *args):
        return _fsdk.Bookmark_SetStyle(self, *args)

    def Insert(self, *args):
        return _fsdk.Bookmark_Insert(self, *args)

    def MoveTo(self, *args):
        return _fsdk.Bookmark_MoveTo(self, *args)

    def GetAction(self, *args):
        return _fsdk.Bookmark_GetAction(self, *args)

    def SetAction(self, *args):
        return _fsdk.Bookmark_SetAction(self, *args)

    def RemoveAction(self, *args):
        return _fsdk.Bookmark_RemoveAction(self, *args)

    def IsRoot(self, *args):
        return _fsdk.Bookmark_IsRoot(self, *args)

    def IsFirstChild(self, *args):
        return _fsdk.Bookmark_IsFirstChild(self, *args)

    def IsLastChild(self, *args):
        return _fsdk.Bookmark_IsLastChild(self, *args)

    def GetDict(self, *args):
        return _fsdk.Bookmark_GetDict(self, *args)
Bookmark_swigregister = _fsdk.Bookmark_swigregister
Bookmark_swigregister(Bookmark)

class PageNumberRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageNumberRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageNumberRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PageNumberRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PageNumberRange_Set(self, *args)
    __swig_setmethods__["start_number"] = _fsdk.PageNumberRange_start_number_set
    __swig_getmethods__["start_number"] = _fsdk.PageNumberRange_start_number_get
    if _newclass:
        start_number = _swig_property(_fsdk.PageNumberRange_start_number_get, _fsdk.PageNumberRange_start_number_set)
    __swig_setmethods__["end_number"] = _fsdk.PageNumberRange_end_number_set
    __swig_getmethods__["end_number"] = _fsdk.PageNumberRange_end_number_get
    if _newclass:
        end_number = _swig_property(_fsdk.PageNumberRange_end_number_get, _fsdk.PageNumberRange_end_number_set)
    __swig_setmethods__["filter"] = _fsdk.PageNumberRange_filter_set
    __swig_getmethods__["filter"] = _fsdk.PageNumberRange_filter_get
    if _newclass:
        filter = _swig_property(_fsdk.PageNumberRange_filter_get, _fsdk.PageNumberRange_filter_set)
    __swig_destroy__ = _fsdk.delete_PageNumberRange
    __del__ = lambda self: None
PageNumberRange_swigregister = _fsdk.PageNumberRange_swigregister
PageNumberRange_swigregister(PageNumberRange)

class HeaderFooterContent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderFooterContent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderFooterContent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_HeaderFooterContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.HeaderFooterContent_Set(self, *args)
    __swig_setmethods__["header_left_content"] = _fsdk.HeaderFooterContent_header_left_content_set
    __swig_getmethods__["header_left_content"] = _fsdk.HeaderFooterContent_header_left_content_get
    if _newclass:
        header_left_content = _swig_property(_fsdk.HeaderFooterContent_header_left_content_get, _fsdk.HeaderFooterContent_header_left_content_set)
    __swig_setmethods__["header_center_content"] = _fsdk.HeaderFooterContent_header_center_content_set
    __swig_getmethods__["header_center_content"] = _fsdk.HeaderFooterContent_header_center_content_get
    if _newclass:
        header_center_content = _swig_property(_fsdk.HeaderFooterContent_header_center_content_get, _fsdk.HeaderFooterContent_header_center_content_set)
    __swig_setmethods__["header_right_content"] = _fsdk.HeaderFooterContent_header_right_content_set
    __swig_getmethods__["header_right_content"] = _fsdk.HeaderFooterContent_header_right_content_get
    if _newclass:
        header_right_content = _swig_property(_fsdk.HeaderFooterContent_header_right_content_get, _fsdk.HeaderFooterContent_header_right_content_set)
    __swig_setmethods__["footer_left_content"] = _fsdk.HeaderFooterContent_footer_left_content_set
    __swig_getmethods__["footer_left_content"] = _fsdk.HeaderFooterContent_footer_left_content_get
    if _newclass:
        footer_left_content = _swig_property(_fsdk.HeaderFooterContent_footer_left_content_get, _fsdk.HeaderFooterContent_footer_left_content_set)
    __swig_setmethods__["footer_center_content"] = _fsdk.HeaderFooterContent_footer_center_content_set
    __swig_getmethods__["footer_center_content"] = _fsdk.HeaderFooterContent_footer_center_content_get
    if _newclass:
        footer_center_content = _swig_property(_fsdk.HeaderFooterContent_footer_center_content_get, _fsdk.HeaderFooterContent_footer_center_content_set)
    __swig_setmethods__["footer_right_content"] = _fsdk.HeaderFooterContent_footer_right_content_set
    __swig_getmethods__["footer_right_content"] = _fsdk.HeaderFooterContent_footer_right_content_get
    if _newclass:
        footer_right_content = _swig_property(_fsdk.HeaderFooterContent_footer_right_content_get, _fsdk.HeaderFooterContent_footer_right_content_set)
    __swig_destroy__ = _fsdk.delete_HeaderFooterContent
    __del__ = lambda self: None
HeaderFooterContent_swigregister = _fsdk.HeaderFooterContent_swigregister
HeaderFooterContent_swigregister(HeaderFooterContent)

class HeaderFooter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderFooter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderFooter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_HeaderFooter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.HeaderFooter_Set(self, *args)
    __swig_setmethods__["font"] = _fsdk.HeaderFooter_font_set
    __swig_getmethods__["font"] = _fsdk.HeaderFooter_font_get
    if _newclass:
        font = _swig_property(_fsdk.HeaderFooter_font_get, _fsdk.HeaderFooter_font_set)
    __swig_setmethods__["text_size"] = _fsdk.HeaderFooter_text_size_set
    __swig_getmethods__["text_size"] = _fsdk.HeaderFooter_text_size_get
    if _newclass:
        text_size = _swig_property(_fsdk.HeaderFooter_text_size_get, _fsdk.HeaderFooter_text_size_set)
    __swig_setmethods__["text_color"] = _fsdk.HeaderFooter_text_color_set
    __swig_getmethods__["text_color"] = _fsdk.HeaderFooter_text_color_get
    if _newclass:
        text_color = _swig_property(_fsdk.HeaderFooter_text_color_get, _fsdk.HeaderFooter_text_color_set)
    __swig_setmethods__["page_range"] = _fsdk.HeaderFooter_page_range_set
    __swig_getmethods__["page_range"] = _fsdk.HeaderFooter_page_range_get
    if _newclass:
        page_range = _swig_property(_fsdk.HeaderFooter_page_range_get, _fsdk.HeaderFooter_page_range_set)
    __swig_setmethods__["page_margin"] = _fsdk.HeaderFooter_page_margin_set
    __swig_getmethods__["page_margin"] = _fsdk.HeaderFooter_page_margin_get
    if _newclass:
        page_margin = _swig_property(_fsdk.HeaderFooter_page_margin_get, _fsdk.HeaderFooter_page_margin_set)
    __swig_setmethods__["has_text_shrinked"] = _fsdk.HeaderFooter_has_text_shrinked_set
    __swig_getmethods__["has_text_shrinked"] = _fsdk.HeaderFooter_has_text_shrinked_get
    if _newclass:
        has_text_shrinked = _swig_property(_fsdk.HeaderFooter_has_text_shrinked_get, _fsdk.HeaderFooter_has_text_shrinked_set)
    __swig_setmethods__["has_fixedsize_for_print"] = _fsdk.HeaderFooter_has_fixedsize_for_print_set
    __swig_getmethods__["has_fixedsize_for_print"] = _fsdk.HeaderFooter_has_fixedsize_for_print_get
    if _newclass:
        has_fixedsize_for_print = _swig_property(_fsdk.HeaderFooter_has_fixedsize_for_print_get, _fsdk.HeaderFooter_has_fixedsize_for_print_set)
    __swig_setmethods__["start_page_number"] = _fsdk.HeaderFooter_start_page_number_set
    __swig_getmethods__["start_page_number"] = _fsdk.HeaderFooter_start_page_number_get
    if _newclass:
        start_page_number = _swig_property(_fsdk.HeaderFooter_start_page_number_get, _fsdk.HeaderFooter_start_page_number_set)
    __swig_setmethods__["content"] = _fsdk.HeaderFooter_content_set
    __swig_getmethods__["content"] = _fsdk.HeaderFooter_content_get
    if _newclass:
        content = _swig_property(_fsdk.HeaderFooter_content_get, _fsdk.HeaderFooter_content_set)
    __swig_setmethods__["is_to_embed_font"] = _fsdk.HeaderFooter_is_to_embed_font_set
    __swig_getmethods__["is_to_embed_font"] = _fsdk.HeaderFooter_is_to_embed_font_get
    if _newclass:
        is_to_embed_font = _swig_property(_fsdk.HeaderFooter_is_to_embed_font_get, _fsdk.HeaderFooter_is_to_embed_font_set)
    __swig_setmethods__["is_underline"] = _fsdk.HeaderFooter_is_underline_set
    __swig_getmethods__["is_underline"] = _fsdk.HeaderFooter_is_underline_get
    if _newclass:
        is_underline = _swig_property(_fsdk.HeaderFooter_is_underline_get, _fsdk.HeaderFooter_is_underline_set)
    __swig_setmethods__["is_replace_font"] = _fsdk.HeaderFooter_is_replace_font_set
    __swig_getmethods__["is_replace_font"] = _fsdk.HeaderFooter_is_replace_font_get
    if _newclass:
        is_replace_font = _swig_property(_fsdk.HeaderFooter_is_replace_font_get, _fsdk.HeaderFooter_is_replace_font_set)
    __swig_destroy__ = _fsdk.delete_HeaderFooter
    __del__ = lambda self: None
HeaderFooter_swigregister = _fsdk.HeaderFooter_swigregister
HeaderFooter_swigregister(HeaderFooter)

class HeaderFooterContentGenerator(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderFooterContentGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderFooterContentGenerator, name)
    __repr__ = _swig_repr
    e_DateFormatMSlashD = _fsdk.HeaderFooterContentGenerator_e_DateFormatMSlashD
    e_DateFormatMSlashDSlashYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMSlashDSlashYY
    e_DateFormatMSlashDSlashYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMSlashDSlashYYYY
    e_DateFormatMMSlashDDSlashYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMSlashDDSlashYY
    e_DateFormatMMSlashDDSlashYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMSlashDDSlashYYYY
    e_DateFormatDSlashMSlashYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDSlashMSlashYY
    e_DateFormatDSlashMSlashYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDSlashMSlashYYYY
    e_DateFormatDDSlashMMSlashYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDDSlashMMSlashYY
    e_DateFormatDDSlashMMSlashYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDDSlashMMSlashYYYY
    e_DateFormatMMSlashYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMSlashYY
    e_DateFormatMMSlashYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMSlashYYYY
    e_DateFormatMDotDDotYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMDotDDotYY
    e_DateFormatMDotDDotYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMDotDDotYYYY
    e_DateFormatMMDotDDDotYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMDotDDDotYY
    e_DateFormatMMDotDDDotYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMDotDDDotYYYY
    e_DateFormatMMDotYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatMMDotYY
    e_DateFormatDDotMDotYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDDotMDotYYYY
    e_DateFormatDDDotMMDotYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDDDotMMDotYY
    e_DateFormatDDDotMMDotYYYY = _fsdk.HeaderFooterContentGenerator_e_DateFormatDDDotMMDotYYYY
    e_DateFormatYYHyphenMMHyphenDD = _fsdk.HeaderFooterContentGenerator_e_DateFormatYYHyphenMMHyphenDD
    e_DateFormatYYYYHyphenMMHyphenDD = _fsdk.HeaderFooterContentGenerator_e_DateFormatYYYYHyphenMMHyphenDD
    e_PageNumberFormatDefault = _fsdk.HeaderFooterContentGenerator_e_PageNumberFormatDefault
    e_PageNumberFormatNumberOfCount = _fsdk.HeaderFooterContentGenerator_e_PageNumberFormatNumberOfCount
    e_PageNumberFormatNumberSlashCount = _fsdk.HeaderFooterContentGenerator_e_PageNumberFormatNumberSlashCount
    e_PageNumberFormatPageNumber = _fsdk.HeaderFooterContentGenerator_e_PageNumberFormatPageNumber
    e_PageNumberFormatPageNumberOfCount = _fsdk.HeaderFooterContentGenerator_e_PageNumberFormatPageNumberOfCount
    __swig_destroy__ = _fsdk.delete_HeaderFooterContentGenerator
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_HeaderFooterContentGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.HeaderFooterContentGenerator___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.HeaderFooterContentGenerator___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.HeaderFooterContentGenerator_IsEmpty(self, *args)

    def AddDate(self, *args):
        return _fsdk.HeaderFooterContentGenerator_AddDate(self, *args)

    def AddPageNumber(self, *args):
        return _fsdk.HeaderFooterContentGenerator_AddPageNumber(self, *args)

    def AddString(self, *args):
        return _fsdk.HeaderFooterContentGenerator_AddString(self, *args)

    def Clear(self, *args):
        return _fsdk.HeaderFooterContentGenerator_Clear(self, *args)

    def GenerateContent(self, *args):
        return _fsdk.HeaderFooterContentGenerator_GenerateContent(self, *args)
HeaderFooterContentGenerator_swigregister = _fsdk.HeaderFooterContentGenerator_swigregister
HeaderFooterContentGenerator_swigregister(HeaderFooterContentGenerator)

class TiledWatermarkSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiledWatermarkSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiledWatermarkSettings, name)
    __repr__ = _swig_repr
    e_FlagAsPageContents = _fsdk.TiledWatermarkSettings_e_FlagAsPageContents
    e_FlagAsAnnot = _fsdk.TiledWatermarkSettings_e_FlagAsAnnot
    e_FlagOnTop = _fsdk.TiledWatermarkSettings_e_FlagOnTop
    e_FlagNoPrint = _fsdk.TiledWatermarkSettings_e_FlagNoPrint
    e_FlagInvisible = _fsdk.TiledWatermarkSettings_e_FlagInvisible

    def __init__(self, *args):
        this = _fsdk.new_TiledWatermarkSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.TiledWatermarkSettings_Set(self, *args)
    __swig_setmethods__["row_space"] = _fsdk.TiledWatermarkSettings_row_space_set
    __swig_getmethods__["row_space"] = _fsdk.TiledWatermarkSettings_row_space_get
    if _newclass:
        row_space = _swig_property(_fsdk.TiledWatermarkSettings_row_space_get, _fsdk.TiledWatermarkSettings_row_space_set)
    __swig_setmethods__["col_space"] = _fsdk.TiledWatermarkSettings_col_space_set
    __swig_getmethods__["col_space"] = _fsdk.TiledWatermarkSettings_col_space_get
    if _newclass:
        col_space = _swig_property(_fsdk.TiledWatermarkSettings_col_space_get, _fsdk.TiledWatermarkSettings_col_space_set)
    __swig_setmethods__["rotation"] = _fsdk.TiledWatermarkSettings_rotation_set
    __swig_getmethods__["rotation"] = _fsdk.TiledWatermarkSettings_rotation_get
    if _newclass:
        rotation = _swig_property(_fsdk.TiledWatermarkSettings_rotation_get, _fsdk.TiledWatermarkSettings_rotation_set)
    __swig_setmethods__["opacity"] = _fsdk.TiledWatermarkSettings_opacity_set
    __swig_getmethods__["opacity"] = _fsdk.TiledWatermarkSettings_opacity_get
    if _newclass:
        opacity = _swig_property(_fsdk.TiledWatermarkSettings_opacity_get, _fsdk.TiledWatermarkSettings_opacity_set)
    __swig_setmethods__["scale"] = _fsdk.TiledWatermarkSettings_scale_set
    __swig_getmethods__["scale"] = _fsdk.TiledWatermarkSettings_scale_get
    if _newclass:
        scale = _swig_property(_fsdk.TiledWatermarkSettings_scale_get, _fsdk.TiledWatermarkSettings_scale_set)
    __swig_setmethods__["flags"] = _fsdk.TiledWatermarkSettings_flags_set
    __swig_getmethods__["flags"] = _fsdk.TiledWatermarkSettings_flags_get
    if _newclass:
        flags = _swig_property(_fsdk.TiledWatermarkSettings_flags_get, _fsdk.TiledWatermarkSettings_flags_set)
    __swig_destroy__ = _fsdk.delete_TiledWatermarkSettings
    __del__ = lambda self: None
TiledWatermarkSettings_swigregister = _fsdk.TiledWatermarkSettings_swigregister
TiledWatermarkSettings_swigregister(TiledWatermarkSettings)

class WrapperData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapperData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WrapperData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_WrapperData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.WrapperData_Set(self, *args)
    __swig_setmethods__["version"] = _fsdk.WrapperData_version_set
    __swig_getmethods__["version"] = _fsdk.WrapperData_version_get
    if _newclass:
        version = _swig_property(_fsdk.WrapperData_version_get, _fsdk.WrapperData_version_set)
    __swig_setmethods__["type"] = _fsdk.WrapperData_type_set
    __swig_getmethods__["type"] = _fsdk.WrapperData_type_get
    if _newclass:
        type = _swig_property(_fsdk.WrapperData_type_get, _fsdk.WrapperData_type_set)
    __swig_setmethods__["app_id"] = _fsdk.WrapperData_app_id_set
    __swig_getmethods__["app_id"] = _fsdk.WrapperData_app_id_get
    if _newclass:
        app_id = _swig_property(_fsdk.WrapperData_app_id_get, _fsdk.WrapperData_app_id_set)
    __swig_setmethods__["uri"] = _fsdk.WrapperData_uri_set
    __swig_getmethods__["uri"] = _fsdk.WrapperData_uri_get
    if _newclass:
        uri = _swig_property(_fsdk.WrapperData_uri_get, _fsdk.WrapperData_uri_set)
    __swig_setmethods__["description"] = _fsdk.WrapperData_description_set
    __swig_getmethods__["description"] = _fsdk.WrapperData_description_get
    if _newclass:
        description = _swig_property(_fsdk.WrapperData_description_get, _fsdk.WrapperData_description_set)
    __swig_destroy__ = _fsdk.delete_WrapperData
    __del__ = lambda self: None
WrapperData_swigregister = _fsdk.WrapperData_swigregister
WrapperData_swigregister(WrapperData)

class PayLoadData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PayLoadData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PayLoadData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PayLoadData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PayLoadData_Set(self, *args)
    __swig_setmethods__["version"] = _fsdk.PayLoadData_version_set
    __swig_getmethods__["version"] = _fsdk.PayLoadData_version_get
    if _newclass:
        version = _swig_property(_fsdk.PayLoadData_version_get, _fsdk.PayLoadData_version_set)
    __swig_setmethods__["crypto_filter"] = _fsdk.PayLoadData_crypto_filter_set
    __swig_getmethods__["crypto_filter"] = _fsdk.PayLoadData_crypto_filter_get
    if _newclass:
        crypto_filter = _swig_property(_fsdk.PayLoadData_crypto_filter_get, _fsdk.PayLoadData_crypto_filter_set)
    __swig_setmethods__["file_name"] = _fsdk.PayLoadData_file_name_set
    __swig_getmethods__["file_name"] = _fsdk.PayLoadData_file_name_get
    if _newclass:
        file_name = _swig_property(_fsdk.PayLoadData_file_name_get, _fsdk.PayLoadData_file_name_set)
    __swig_setmethods__["file_size"] = _fsdk.PayLoadData_file_size_set
    __swig_getmethods__["file_size"] = _fsdk.PayLoadData_file_size_get
    if _newclass:
        file_size = _swig_property(_fsdk.PayLoadData_file_size_get, _fsdk.PayLoadData_file_size_set)
    __swig_setmethods__["description"] = _fsdk.PayLoadData_description_set
    __swig_getmethods__["description"] = _fsdk.PayLoadData_description_get
    if _newclass:
        description = _swig_property(_fsdk.PayLoadData_description_get, _fsdk.PayLoadData_description_set)
    __swig_destroy__ = _fsdk.delete_PayLoadData
    __del__ = lambda self: None
PayLoadData_swigregister = _fsdk.PayLoadData_swigregister
PayLoadData_swigregister(PayLoadData)

class HiddenInfoSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiddenInfoSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HiddenInfoSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_HiddenInfoSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["enable_remove_metadata"] = _fsdk.HiddenInfoSettingData_enable_remove_metadata_set
    __swig_getmethods__["enable_remove_metadata"] = _fsdk.HiddenInfoSettingData_enable_remove_metadata_get
    if _newclass:
        enable_remove_metadata = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_metadata_get, _fsdk.HiddenInfoSettingData_enable_remove_metadata_set)
    __swig_setmethods__["enable_remove_fileattachment"] = _fsdk.HiddenInfoSettingData_enable_remove_fileattachment_set
    __swig_getmethods__["enable_remove_fileattachment"] = _fsdk.HiddenInfoSettingData_enable_remove_fileattachment_get
    if _newclass:
        enable_remove_fileattachment = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_fileattachment_get, _fsdk.HiddenInfoSettingData_enable_remove_fileattachment_set)
    __swig_setmethods__["enable_remove_bookmark"] = _fsdk.HiddenInfoSettingData_enable_remove_bookmark_set
    __swig_getmethods__["enable_remove_bookmark"] = _fsdk.HiddenInfoSettingData_enable_remove_bookmark_get
    if _newclass:
        enable_remove_bookmark = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_bookmark_get, _fsdk.HiddenInfoSettingData_enable_remove_bookmark_set)
    __swig_setmethods__["enable_remove_searchIndex"] = _fsdk.HiddenInfoSettingData_enable_remove_searchIndex_set
    __swig_getmethods__["enable_remove_searchIndex"] = _fsdk.HiddenInfoSettingData_enable_remove_searchIndex_get
    if _newclass:
        enable_remove_searchIndex = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_searchIndex_get, _fsdk.HiddenInfoSettingData_enable_remove_searchIndex_set)
    __swig_setmethods__["enable_remove_comment"] = _fsdk.HiddenInfoSettingData_enable_remove_comment_set
    __swig_getmethods__["enable_remove_comment"] = _fsdk.HiddenInfoSettingData_enable_remove_comment_get
    if _newclass:
        enable_remove_comment = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_comment_get, _fsdk.HiddenInfoSettingData_enable_remove_comment_set)
    __swig_setmethods__["enable_remove_form_fields"] = _fsdk.HiddenInfoSettingData_enable_remove_form_fields_set
    __swig_getmethods__["enable_remove_form_fields"] = _fsdk.HiddenInfoSettingData_enable_remove_form_fields_get
    if _newclass:
        enable_remove_form_fields = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_form_fields_get, _fsdk.HiddenInfoSettingData_enable_remove_form_fields_set)
    __swig_setmethods__["enable_remove_hidden_text"] = _fsdk.HiddenInfoSettingData_enable_remove_hidden_text_set
    __swig_getmethods__["enable_remove_hidden_text"] = _fsdk.HiddenInfoSettingData_enable_remove_hidden_text_get
    if _newclass:
        enable_remove_hidden_text = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_hidden_text_get, _fsdk.HiddenInfoSettingData_enable_remove_hidden_text_set)
    __swig_setmethods__["enable_remove_hidden_layer"] = _fsdk.HiddenInfoSettingData_enable_remove_hidden_layer_set
    __swig_getmethods__["enable_remove_hidden_layer"] = _fsdk.HiddenInfoSettingData_enable_remove_hidden_layer_get
    if _newclass:
        enable_remove_hidden_layer = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_hidden_layer_get, _fsdk.HiddenInfoSettingData_enable_remove_hidden_layer_set)
    __swig_setmethods__["enable_remove_content"] = _fsdk.HiddenInfoSettingData_enable_remove_content_set
    __swig_getmethods__["enable_remove_content"] = _fsdk.HiddenInfoSettingData_enable_remove_content_get
    if _newclass:
        enable_remove_content = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_content_get, _fsdk.HiddenInfoSettingData_enable_remove_content_set)
    __swig_setmethods__["enable_remove_link"] = _fsdk.HiddenInfoSettingData_enable_remove_link_set
    __swig_getmethods__["enable_remove_link"] = _fsdk.HiddenInfoSettingData_enable_remove_link_get
    if _newclass:
        enable_remove_link = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_link_get, _fsdk.HiddenInfoSettingData_enable_remove_link_set)
    __swig_setmethods__["enable_remove_overlaping"] = _fsdk.HiddenInfoSettingData_enable_remove_overlaping_set
    __swig_getmethods__["enable_remove_overlaping"] = _fsdk.HiddenInfoSettingData_enable_remove_overlaping_get
    if _newclass:
        enable_remove_overlaping = _swig_property(_fsdk.HiddenInfoSettingData_enable_remove_overlaping_get, _fsdk.HiddenInfoSettingData_enable_remove_overlaping_set)
    __swig_destroy__ = _fsdk.delete_HiddenInfoSettingData
    __del__ = lambda self: None
HiddenInfoSettingData_swigregister = _fsdk.HiddenInfoSettingData_swigregister
HiddenInfoSettingData_swigregister(HiddenInfoSettingData)

class PageBasicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBasicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageBasicInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PageBasicInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.PageBasicInfo_Set(self, *args)
    __swig_setmethods__["width"] = _fsdk.PageBasicInfo_width_set
    __swig_getmethods__["width"] = _fsdk.PageBasicInfo_width_get
    if _newclass:
        width = _swig_property(_fsdk.PageBasicInfo_width_get, _fsdk.PageBasicInfo_width_set)
    __swig_setmethods__["height"] = _fsdk.PageBasicInfo_height_set
    __swig_getmethods__["height"] = _fsdk.PageBasicInfo_height_get
    if _newclass:
        height = _swig_property(_fsdk.PageBasicInfo_height_get, _fsdk.PageBasicInfo_height_set)
    __swig_setmethods__["rotation"] = _fsdk.PageBasicInfo_rotation_set
    __swig_getmethods__["rotation"] = _fsdk.PageBasicInfo_rotation_get
    if _newclass:
        rotation = _swig_property(_fsdk.PageBasicInfo_rotation_get, _fsdk.PageBasicInfo_rotation_set)
    __swig_destroy__ = _fsdk.delete_PageBasicInfo
    __del__ = lambda self: None
PageBasicInfo_swigregister = _fsdk.PageBasicInfo_swigregister
PageBasicInfo_swigregister(PageBasicInfo)

class PageBasicInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBasicInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageBasicInfoArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PageBasicInfoArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PageBasicInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.PageBasicInfoArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.PageBasicInfoArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.PageBasicInfoArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PageBasicInfoArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PageBasicInfoArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PageBasicInfoArray_RemoveAll(self, *args)
PageBasicInfoArray_swigregister = _fsdk.PageBasicInfoArray_swigregister
PageBasicInfoArray_swigregister(PageBasicInfoArray)

class EmbeddedFontData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedFontData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedFontData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_EmbeddedFontData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["nonstandard_font_name_array"] = _fsdk.EmbeddedFontData_nonstandard_font_name_array_set
    __swig_getmethods__["nonstandard_font_name_array"] = _fsdk.EmbeddedFontData_nonstandard_font_name_array_get
    if _newclass:
        nonstandard_font_name_array = _swig_property(_fsdk.EmbeddedFontData_nonstandard_font_name_array_get, _fsdk.EmbeddedFontData_nonstandard_font_name_array_set)
    __swig_setmethods__["standard_font_name_array"] = _fsdk.EmbeddedFontData_standard_font_name_array_set
    __swig_getmethods__["standard_font_name_array"] = _fsdk.EmbeddedFontData_standard_font_name_array_get
    if _newclass:
        standard_font_name_array = _swig_property(_fsdk.EmbeddedFontData_standard_font_name_array_get, _fsdk.EmbeddedFontData_standard_font_name_array_set)
    __swig_destroy__ = _fsdk.delete_EmbeddedFontData
    __del__ = lambda self: None
EmbeddedFontData_swigregister = _fsdk.EmbeddedFontData_swigregister
EmbeddedFontData_swigregister(EmbeddedFontData)

class TableOfContentsConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableOfContentsConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableOfContentsConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_TableOfContentsConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TableOfContentsConfig___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TableOfContentsConfig___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TableOfContentsConfig_Set(self, *args)
    __swig_setmethods__["title"] = _fsdk.TableOfContentsConfig_title_set
    __swig_getmethods__["title"] = _fsdk.TableOfContentsConfig_title_get
    if _newclass:
        title = _swig_property(_fsdk.TableOfContentsConfig_title_get, _fsdk.TableOfContentsConfig_title_set)
    __swig_setmethods__["bookmark_level_array"] = _fsdk.TableOfContentsConfig_bookmark_level_array_set
    __swig_getmethods__["bookmark_level_array"] = _fsdk.TableOfContentsConfig_bookmark_level_array_get
    if _newclass:
        bookmark_level_array = _swig_property(_fsdk.TableOfContentsConfig_bookmark_level_array_get, _fsdk.TableOfContentsConfig_bookmark_level_array_set)
    __swig_setmethods__["is_show_serial_number"] = _fsdk.TableOfContentsConfig_is_show_serial_number_set
    __swig_getmethods__["is_show_serial_number"] = _fsdk.TableOfContentsConfig_is_show_serial_number_get
    if _newclass:
        is_show_serial_number = _swig_property(_fsdk.TableOfContentsConfig_is_show_serial_number_get, _fsdk.TableOfContentsConfig_is_show_serial_number_set)
    __swig_setmethods__["include_toc_pages"] = _fsdk.TableOfContentsConfig_include_toc_pages_set
    __swig_getmethods__["include_toc_pages"] = _fsdk.TableOfContentsConfig_include_toc_pages_get
    if _newclass:
        include_toc_pages = _swig_property(_fsdk.TableOfContentsConfig_include_toc_pages_get, _fsdk.TableOfContentsConfig_include_toc_pages_set)
    __swig_destroy__ = _fsdk.delete_TableOfContentsConfig
    __del__ = lambda self: None
TableOfContentsConfig_swigregister = _fsdk.TableOfContentsConfig_swigregister
TableOfContentsConfig_swigregister(TableOfContentsConfig)

class PDFDoc(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDoc, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDoc, name)
    __repr__ = _swig_repr
    e_PwdInvalid = _fsdk.PDFDoc_e_PwdInvalid
    e_PwdNoPassword = _fsdk.PDFDoc_e_PwdNoPassword
    e_PwdUser = _fsdk.PDFDoc_e_PwdUser
    e_PwdOwner = _fsdk.PDFDoc_e_PwdOwner
    e_EncryptUnknown = _fsdk.PDFDoc_e_EncryptUnknown
    e_EncryptNone = _fsdk.PDFDoc_e_EncryptNone
    e_EncryptPassword = _fsdk.PDFDoc_e_EncryptPassword
    e_EncryptCertificate = _fsdk.PDFDoc_e_EncryptCertificate
    e_EncryptFoxitDRM = _fsdk.PDFDoc_e_EncryptFoxitDRM
    e_EncryptCustom = _fsdk.PDFDoc_e_EncryptCustom
    e_EncryptRMS = _fsdk.PDFDoc_e_EncryptRMS
    e_EncryptCDRM = _fsdk.PDFDoc_e_EncryptCDRM
    e_PermPrint = _fsdk.PDFDoc_e_PermPrint
    e_PermModify = _fsdk.PDFDoc_e_PermModify
    e_PermExtract = _fsdk.PDFDoc_e_PermExtract
    e_PermAnnotForm = _fsdk.PDFDoc_e_PermAnnotForm
    e_PermFillForm = _fsdk.PDFDoc_e_PermFillForm
    e_PermExtractAccess = _fsdk.PDFDoc_e_PermExtractAccess
    e_PermAssemble = _fsdk.PDFDoc_e_PermAssemble
    e_PermPrintHigh = _fsdk.PDFDoc_e_PermPrintHigh
    e_SaveFlagNormal = _fsdk.PDFDoc_e_SaveFlagNormal
    e_SaveFlagIncremental = _fsdk.PDFDoc_e_SaveFlagIncremental
    e_SaveFlagNoOriginal = _fsdk.PDFDoc_e_SaveFlagNoOriginal
    e_SaveFlagXRefStream = _fsdk.PDFDoc_e_SaveFlagXRefStream
    e_SaveFlagLinearized = _fsdk.PDFDoc_e_SaveFlagLinearized
    e_SaveFlagRemoveRedundantObjects = _fsdk.PDFDoc_e_SaveFlagRemoveRedundantObjects
    e_SaveFlagNoUpdatingMetadataDateTime = _fsdk.PDFDoc_e_SaveFlagNoUpdatingMetadataDateTime
    e_ImportFlagNormal = _fsdk.PDFDoc_e_ImportFlagNormal
    e_ImportFlagWithLayers = _fsdk.PDFDoc_e_ImportFlagWithLayers
    e_ImportFlagShareStream = _fsdk.PDFDoc_e_ImportFlagShareStream
    e_ExtractPagesOptionAnnotation = _fsdk.PDFDoc_e_ExtractPagesOptionAnnotation
    e_ExtractPagesOptionStructureTree = _fsdk.PDFDoc_e_ExtractPagesOptionStructureTree
    e_ExtractPagesOptionJavascript = _fsdk.PDFDoc_e_ExtractPagesOptionJavascript
    e_ExtractPagesOptionOCProperties = _fsdk.PDFDoc_e_ExtractPagesOptionOCProperties
    e_ExtractPagesOptionObjectStream = _fsdk.PDFDoc_e_ExtractPagesOptionObjectStream
    e_ExtractPagesOptionAttachFiles = _fsdk.PDFDoc_e_ExtractPagesOptionAttachFiles
    e_ExtractPagesOptionBookmark = _fsdk.PDFDoc_e_ExtractPagesOptionBookmark
    e_ExtractPagesOptionSignature = _fsdk.PDFDoc_e_ExtractPagesOptionSignature
    e_InsertDocOptionAttachments = _fsdk.PDFDoc_e_InsertDocOptionAttachments
    e_InsertDocOptionBookmark = _fsdk.PDFDoc_e_InsertDocOptionBookmark
    e_DisplayUseNone = _fsdk.PDFDoc_e_DisplayUseNone
    e_DisplayUseOutlines = _fsdk.PDFDoc_e_DisplayUseOutlines
    e_DisplayUseThumbs = _fsdk.PDFDoc_e_DisplayUseThumbs
    e_DisplayFullScreen = _fsdk.PDFDoc_e_DisplayFullScreen
    e_DisplayUseOC = _fsdk.PDFDoc_e_DisplayUseOC
    e_DisplayUseAttachment = _fsdk.PDFDoc_e_DisplayUseAttachment
    e_Forms = _fsdk.PDFDoc_e_Forms
    e_Annots = _fsdk.PDFDoc_e_Annots
    e_Links = _fsdk.PDFDoc_e_Links
    e_WrapperNone = _fsdk.PDFDoc_e_WrapperNone
    e_WrapperFoxit = _fsdk.PDFDoc_e_WrapperFoxit
    e_WrapperPDFV2 = _fsdk.PDFDoc_e_WrapperPDFV2
    __swig_destroy__ = _fsdk.delete_PDFDoc
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PDFDoc___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PDFDoc___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PDFDoc_IsEmpty(self, *args)

    def GetFileSize(self, *args):
        return _fsdk.PDFDoc_GetFileSize(self, *args)

    def IsLinearized(self, *args):
        return _fsdk.PDFDoc_IsLinearized(self, *args)

    def IsTaggedPDF(self, *args):
        return _fsdk.PDFDoc_IsTaggedPDF(self, *args)

    def Load(self, *args):
        return _fsdk.PDFDoc_Load(self, *args)

    def LoadW(self, *args):
        return _fsdk.PDFDoc_LoadW(self, *args)

    def StartLoad(self, *args):
        return _fsdk.PDFDoc_StartLoad(self, *args)

    def StartLoadW(self, *args):
        return _fsdk.PDFDoc_StartLoadW(self, *args)

    def GetFirstAvailPageIndex(self, *args):
        return _fsdk.PDFDoc_GetFirstAvailPageIndex(self, *args)

    def IsXFA(self, *args):
        return _fsdk.PDFDoc_IsXFA(self, *args)

    def IsEncrypted(self, *args):
        return _fsdk.PDFDoc_IsEncrypted(self, *args)

    def ClearRenderCache(self, *args):
        return _fsdk.PDFDoc_ClearRenderCache(self, *args)

    def GetPasswordType(self, *args):
        return _fsdk.PDFDoc_GetPasswordType(self, *args)

    def GetEncryptionType(self, *args):
        return _fsdk.PDFDoc_GetEncryptionType(self, *args)

    def CheckPassword(self, *args):
        return _fsdk.PDFDoc_CheckPassword(self, *args)

    def IsUserPassword(self, *args):
        return _fsdk.PDFDoc_IsUserPassword(self, *args)

    def IsOwnerPassword(self, *args):
        return _fsdk.PDFDoc_IsOwnerPassword(self, *args)

    def GetUserPassword(self, *args):
        return _fsdk.PDFDoc_GetUserPassword(self, *args)

    def GetStdEncryptData(self, *args):
        return _fsdk.PDFDoc_GetStdEncryptData(self, *args)

    def GetCertificateEncryptData(self, *args):
        return _fsdk.PDFDoc_GetCertificateEncryptData(self, *args)

    def GetDRMEncryptData(self, *args):
        return _fsdk.PDFDoc_GetDRMEncryptData(self, *args)

    def GetCustomEncryptData(self, *args):
        return _fsdk.PDFDoc_GetCustomEncryptData(self, *args)

    def GetRMSEncryptData(self, *args):
        return _fsdk.PDFDoc_GetRMSEncryptData(self, *args)

    def SaveAs(self, *args):
        return _fsdk.PDFDoc_SaveAs(self, *args)

    def StartSaveAs(self, *args):
        return _fsdk.PDFDoc_StartSaveAs(self, *args)

    def GetRootBookmark(self, *args):
        return _fsdk.PDFDoc_GetRootBookmark(self, *args)

    def CreateRootBookmark(self, *args):
        return _fsdk.PDFDoc_CreateRootBookmark(self, *args)

    def GetBookmarkLevelDepth(self, *args):
        return _fsdk.PDFDoc_GetBookmarkLevelDepth(self, *args)

    def RemoveBookmark(self, *args):
        return _fsdk.PDFDoc_RemoveBookmark(self, *args)

    def HasLayer(self, *args):
        return _fsdk.PDFDoc_HasLayer(self, *args)

    def HasHeaderFooter(self, *args):
        return _fsdk.PDFDoc_HasHeaderFooter(self, *args)

    def GetEditableHeaderFooter(self, *args):
        return _fsdk.PDFDoc_GetEditableHeaderFooter(self, *args)

    def AddHeaderFooter(self, *args):
        return _fsdk.PDFDoc_AddHeaderFooter(self, *args)

    def UpdateHeaderFooter(self, *args):
        return _fsdk.PDFDoc_UpdateHeaderFooter(self, *args)

    def RemoveAllHeaderFooters(self, *args):
        return _fsdk.PDFDoc_RemoveAllHeaderFooters(self, *args)

    def GetPageCount(self, *args):
        return _fsdk.PDFDoc_GetPageCount(self, *args)

    def GetPage(self, *args):
        return _fsdk.PDFDoc_GetPage(self, *args)

    def GetDisplayMode(self, *args):
        return _fsdk.PDFDoc_GetDisplayMode(self, *args)

    def SetDisplayMode(self, *args):
        return _fsdk.PDFDoc_SetDisplayMode(self, *args)

    def GetCatalog(self, *args):
        return _fsdk.PDFDoc_GetCatalog(self, *args)

    def GetTrailer(self, *args):
        return _fsdk.PDFDoc_GetTrailer(self, *args)

    def GetInfo(self, *args):
        return _fsdk.PDFDoc_GetInfo(self, *args)

    def GetEncryptDict(self, *args):
        return _fsdk.PDFDoc_GetEncryptDict(self, *args)

    def GetPagesDict(self, *args):
        return _fsdk.PDFDoc_GetPagesDict(self, *args)

    def GetIndirectObject(self, *args):
        return _fsdk.PDFDoc_GetIndirectObject(self, *args)

    def AddIndirectObject(self, *args):
        return _fsdk.PDFDoc_AddIndirectObject(self, *args)

    def DeleteIndirectObject(self, *args):
        return _fsdk.PDFDoc_DeleteIndirectObject(self, *args)

    def GetUserPermissions(self, *args):
        return _fsdk.PDFDoc_GetUserPermissions(self, *args)

    def IsWrapper(self, *args):
        return _fsdk.PDFDoc_IsWrapper(self, *args)

    def GetWrapperType(self, *args):
        return _fsdk.PDFDoc_GetWrapperType(self, *args)

    def GetWrapperData(self, *args):
        return _fsdk.PDFDoc_GetWrapperData(self, *args)

    def GetWrapperOffset(self, *args):
        return _fsdk.PDFDoc_GetWrapperOffset(self, *args)

    def GetPayLoadData(self, *args):
        return _fsdk.PDFDoc_GetPayLoadData(self, *args)

    def StartGetPayloadFile(self, *args):
        return _fsdk.PDFDoc_StartGetPayloadFile(self, *args)

    def SaveAsWrapperFile(self, *args):
        return _fsdk.PDFDoc_SaveAsWrapperFile(self, *args)

    def StartSaveAsPayloadFile(self, *args):
        return _fsdk.PDFDoc_StartSaveAsPayloadFile(self, *args)

    def HasForm(self, *args):
        return _fsdk.PDFDoc_HasForm(self, *args)

    def GetReadingBookmarkCount(self, *args):
        return _fsdk.PDFDoc_GetReadingBookmarkCount(self, *args)

    def GetReadingBookmark(self, *args):
        return _fsdk.PDFDoc_GetReadingBookmark(self, *args)

    def InsertReadingBookmark(self, *args):
        return _fsdk.PDFDoc_InsertReadingBookmark(self, *args)

    def RemoveReadingBookmark(self, *args):
        return _fsdk.PDFDoc_RemoveReadingBookmark(self, *args)

    def GetSignatureCount(self, *args):
        return _fsdk.PDFDoc_GetSignatureCount(self, *args)

    def GetSignature(self, *args):
        return _fsdk.PDFDoc_GetSignature(self, *args)

    def RemoveSignature(self, *args):
        return _fsdk.PDFDoc_RemoveSignature(self, *args)

    def InsertPage(self, *args):
        return _fsdk.PDFDoc_InsertPage(self, *args)

    def AddPageFromTemplate(self, *args):
        return _fsdk.PDFDoc_AddPageFromTemplate(self, *args)

    def HidePageTemplate(self, *args):
        return _fsdk.PDFDoc_HidePageTemplate(self, *args)

    def RemovePage(self, *args):
        return _fsdk.PDFDoc_RemovePage(self, *args)

    def MovePageTo(self, *args):
        return _fsdk.PDFDoc_MovePageTo(self, *args)

    def MovePagesTo(self, *args):
        return _fsdk.PDFDoc_MovePagesTo(self, *args)

    def StartImportPagesFromFilePath(self, *args):
        return _fsdk.PDFDoc_StartImportPagesFromFilePath(self, *args)

    def StartImportPages(self, *args):
        return _fsdk.PDFDoc_StartImportPages(self, *args)

    def StartExtractPages(self, *args):
        return _fsdk.PDFDoc_StartExtractPages(self, *args)

    def InsertDocument(self, *args):
        return _fsdk.PDFDoc_InsertDocument(self, *args)

    def Sanitize(self, *args):
        return _fsdk.PDFDoc_Sanitize(self, *args)

    def RemoveHiddenInfo(self, *args):
        return _fsdk.PDFDoc_RemoveHiddenInfo(self, *args)

    def ImportFromFDF(self, *args):
        return _fsdk.PDFDoc_ImportFromFDF(self, *args)

    def ExportToFDF(self, *args):
        return _fsdk.PDFDoc_ExportToFDF(self, *args)

    def ExportAnnotToFDF(self, *args):
        return _fsdk.PDFDoc_ExportAnnotToFDF(self, *args)

    def ExportFormFieldsToFDF(self, *args):
        return _fsdk.PDFDoc_ExportFormFieldsToFDF(self, *args)

    def GetHeader(self, *args):
        return _fsdk.PDFDoc_GetHeader(self, *args)

    def GetFileVersion(self, *args):
        return _fsdk.PDFDoc_GetFileVersion(self, *args)

    def SetFileVersion(self, *args):
        return _fsdk.PDFDoc_SetFileVersion(self, *args)

    def SetSecurityHandler(self, *args):
        return _fsdk.PDFDoc_SetSecurityHandler(self, *args)

    def GetSecurityHandler(self, *args):
        return _fsdk.PDFDoc_GetSecurityHandler(self, *args)

    def RemoveSecurity(self, *args):
        return _fsdk.PDFDoc_RemoveSecurity(self, *args)

    def GetFontCount(self, *args):
        return _fsdk.PDFDoc_GetFontCount(self, *args)

    def GetFont(self, *args):
        return _fsdk.PDFDoc_GetFont(self, *args)

    def GetOpenAction(self, *args):
        return _fsdk.PDFDoc_GetOpenAction(self, *args)

    def SetOpenAction(self, *args):
        return _fsdk.PDFDoc_SetOpenAction(self, *args)

    def RemoveOpenAction(self, *args):
        return _fsdk.PDFDoc_RemoveOpenAction(self, *args)

    def DoJSOpenAction(self, *args):
        return _fsdk.PDFDoc_DoJSOpenAction(self, *args)

    def IsPortfolio(self, *args):
        return _fsdk.PDFDoc_IsPortfolio(self, *args)

    def GetPageBasicInfo(self, *args):
        return _fsdk.PDFDoc_GetPageBasicInfo(self, *args)

    def GetAllPageBasicInfo(self, *args):
        return _fsdk.PDFDoc_GetAllPageBasicInfo(self, *args)

    def GetEmbeddedFontData(self, *args):
        return _fsdk.PDFDoc_GetEmbeddedFontData(self, *args)

    def CreateDSS(self, *args):
        return _fsdk.PDFDoc_CreateDSS(self, *args)

    def AddTableOfContents(self, *args):
        return _fsdk.PDFDoc_AddTableOfContents(self, *args)

    def SetCacheFile(self, *args):
        return _fsdk.PDFDoc_SetCacheFile(self, *args)

    def StartRecognizeForm(self, *args):
        return _fsdk.PDFDoc_StartRecognizeForm(self, *args)

    def GetPageText(self, *args):
        return _fsdk.PDFDoc_GetPageText(self, *args)

    def AddPagingSealSignature(self, *args):
        return _fsdk.PDFDoc_AddPagingSealSignature(self, *args)

    def StartEmbedAllFonts(self, *args):
        return _fsdk.PDFDoc_StartEmbedAllFonts(self, *args)

    def StartAddTiledWatermark(self, *args):
        return _fsdk.PDFDoc_StartAddTiledWatermark(self, *args)

    def GetAnnotsByIdArray(self, *args):
        return _fsdk.PDFDoc_GetAnnotsByIdArray(self, *args)
PDFDoc_swigregister = _fsdk.PDFDoc_swigregister
PDFDoc_swigregister(PDFDoc)

class GraphicsObjects(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsObjects, name)
    __repr__ = _swig_repr
    e_TextMergeNone = _fsdk.GraphicsObjects_e_TextMergeNone
    e_TextMergeTJY = _fsdk.GraphicsObjects_e_TextMergeTJY
    e_TextMergeBTET = _fsdk.GraphicsObjects_e_TextMergeBTET
    __swig_destroy__ = _fsdk.delete_GraphicsObjects
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_GraphicsObjects(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEmpty(self, *args):
        return _fsdk.GraphicsObjects_IsEmpty(self, *args)

    def __eq__(self, *args):
        return _fsdk.GraphicsObjects___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.GraphicsObjects___ne__(self, *args)

    def GetFirstGraphicsObjectPosition(self, *args):
        return _fsdk.GraphicsObjects_GetFirstGraphicsObjectPosition(self, *args)

    def GetNextGraphicsObjectPosition(self, *args):
        return _fsdk.GraphicsObjects_GetNextGraphicsObjectPosition(self, *args)

    def GetLastGraphicsObjectPosition(self, *args):
        return _fsdk.GraphicsObjects_GetLastGraphicsObjectPosition(self, *args)

    def GetPrevGraphicsObjectPosition(self, *args):
        return _fsdk.GraphicsObjects_GetPrevGraphicsObjectPosition(self, *args)

    def InsertGraphicsObject(self, *args):
        return _fsdk.GraphicsObjects_InsertGraphicsObject(self, *args)

    def RemoveGraphicsObject(self, *args):
        return _fsdk.GraphicsObjects_RemoveGraphicsObject(self, *args)

    def RemoveGraphicsObjectByPosition(self, *args):
        return _fsdk.GraphicsObjects_RemoveGraphicsObjectByPosition(self, *args)

    def MoveGraphicsObjectByPosition(self, *args):
        return _fsdk.GraphicsObjects_MoveGraphicsObjectByPosition(self, *args)

    def GetGraphicsObjectPosition(self, *args):
        return _fsdk.GraphicsObjects_GetGraphicsObjectPosition(self, *args)

    def GetGraphicsObjectCount(self, *args):
        return _fsdk.GraphicsObjects_GetGraphicsObjectCount(self, *args)

    def GetGraphicsObjectIndex(self, *args):
        return _fsdk.GraphicsObjects_GetGraphicsObjectIndex(self, *args)

    def GetGraphicsObject(self, *args):
        return _fsdk.GraphicsObjects_GetGraphicsObject(self, *args)

    def GenerateContent(self, *args):
        return _fsdk.GraphicsObjects_GenerateContent(self, *args)
GraphicsObjects_swigregister = _fsdk.GraphicsObjects_swigregister
GraphicsObjects_swigregister(GraphicsObjects)

class PDFPage(GraphicsObjects):
    __swig_setmethods__ = {}
    for _s in [GraphicsObjects]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFPage, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsObjects]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFPage, name)
    __repr__ = _swig_repr
    e_ParsePageNormal = _fsdk.PDFPage_e_ParsePageNormal
    e_ParsePageTextOnly = _fsdk.PDFPage_e_ParsePageTextOnly
    e_CalcContentsBox = _fsdk.PDFPage_e_CalcContentsBox
    e_CalcDetection = _fsdk.PDFPage_e_CalcDetection
    e_FlattenAll = _fsdk.PDFPage_e_FlattenAll
    e_FlattenNoAnnot = _fsdk.PDFPage_e_FlattenNoAnnot
    e_FlattenNoFormControl = _fsdk.PDFPage_e_FlattenNoFormControl
    e_MediaBox = _fsdk.PDFPage_e_MediaBox
    e_CropBox = _fsdk.PDFPage_e_CropBox
    e_TrimBox = _fsdk.PDFPage_e_TrimBox
    e_ArtBox = _fsdk.PDFPage_e_ArtBox
    e_BleedBox = _fsdk.PDFPage_e_BleedBox
    e_SizeLetter = _fsdk.PDFPage_e_SizeLetter
    e_SizeLegal = _fsdk.PDFPage_e_SizeLegal
    e_SizeA2 = _fsdk.PDFPage_e_SizeA2
    e_SizeA3 = _fsdk.PDFPage_e_SizeA3
    e_SizeA4 = _fsdk.PDFPage_e_SizeA4
    e_SizeA5 = _fsdk.PDFPage_e_SizeA5
    e_SizeA6 = _fsdk.PDFPage_e_SizeA6
    e_SizeB2 = _fsdk.PDFPage_e_SizeB2
    e_SizeB3 = _fsdk.PDFPage_e_SizeB3
    e_SizeB4 = _fsdk.PDFPage_e_SizeB4
    e_SizeB5 = _fsdk.PDFPage_e_SizeB5
    e_SizeB6 = _fsdk.PDFPage_e_SizeB6

    def __init__(self, *args):
        this = _fsdk.new_PDFPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PDFPage
    __del__ = lambda self: None

    def GetDocument(self, *args):
        return _fsdk.PDFPage_GetDocument(self, *args)

    def GetDict(self, *args):
        return _fsdk.PDFPage_GetDict(self, *args)

    def IsParsed(self, *args):
        return _fsdk.PDFPage_IsParsed(self, *args)

    def StartParse(self, *args):
        return _fsdk.PDFPage_StartParse(self, *args)

    def GetIndex(self, *args):
        return _fsdk.PDFPage_GetIndex(self, *args)

    def GetHeight(self, *args):
        return _fsdk.PDFPage_GetHeight(self, *args)

    def GetWidth(self, *args):
        return _fsdk.PDFPage_GetWidth(self, *args)

    def GetRotation(self, *args):
        return _fsdk.PDFPage_GetRotation(self, *args)

    def LoadThumbnail(self, *args):
        return _fsdk.PDFPage_LoadThumbnail(self, *args)

    def GetDisplayMatrix(self, *args):
        return _fsdk.PDFPage_GetDisplayMatrix(self, *args)

    def CalcContentBBox(self, *args):
        return _fsdk.PDFPage_CalcContentBBox(self, *args)

    def GetAnnotCount(self, *args):
        return _fsdk.PDFPage_GetAnnotCount(self, *args)

    def GetAnnot(self, *args):
        return _fsdk.PDFPage_GetAnnot(self, *args)

    def GetAnnotAtPoint(self, *args):
        return _fsdk.PDFPage_GetAnnotAtPoint(self, *args)

    def GetAnnotAtDevicePoint(self, *args):
        return _fsdk.PDFPage_GetAnnotAtDevicePoint(self, *args)

    def GetAnnotsAtPoint(self, *args):
        return _fsdk.PDFPage_GetAnnotsAtPoint(self, *args)

    def GetAnnotsAtDevicePoint(self, *args):
        return _fsdk.PDFPage_GetAnnotsAtDevicePoint(self, *args)

    def AddAnnot(self, *args):
        return _fsdk.PDFPage_AddAnnot(self, *args)

    def RemoveAnnot(self, *args):
        return _fsdk.PDFPage_RemoveAnnot(self, *args)

    def MoveAnnotToFirst(self, *args):
        return _fsdk.PDFPage_MoveAnnotToFirst(self, *args)

    def MoveAnnotToLast(self, *args):
        return _fsdk.PDFPage_MoveAnnotToLast(self, *args)

    def MoveAnnotToPrev(self, *args):
        return _fsdk.PDFPage_MoveAnnotToPrev(self, *args)

    def MoveAnnotToNext(self, *args):
        return _fsdk.PDFPage_MoveAnnotToNext(self, *args)

    def UpdateAnnotList(self, *args):
        return _fsdk.PDFPage_UpdateAnnotList(self, *args)

    def HasTransparency(self, *args):
        return _fsdk.PDFPage_HasTransparency(self, *args)

    def IsScanned(self, *args):
        return _fsdk.PDFPage_IsScanned(self, *args)

    def Flatten(self, *args):
        return _fsdk.PDFPage_Flatten(self, *args)

    def FlattenAnnot(self, *args):
        return _fsdk.PDFPage_FlattenAnnot(self, *args)

    def SetAnnotGroup(self, *args):
        return _fsdk.PDFPage_SetAnnotGroup(self, *args)

    def AddSignature(self, *args):
        return _fsdk.PDFPage_AddSignature(self, *args)

    def AddSignatureWithExistedVDict(self, *args):
        return _fsdk.PDFPage_AddSignatureWithExistedVDict(self, *args)

    def HasWatermark(self, *args):
        return _fsdk.PDFPage_HasWatermark(self, *args)

    def RemoveAllWatermarks(self, *args):
        return _fsdk.PDFPage_RemoveAllWatermarks(self, *args)

    def SetRotation(self, *args):
        return _fsdk.PDFPage_SetRotation(self, *args)

    def SetSize(self, *args):
        return _fsdk.PDFPage_SetSize(self, *args)

    def SetBox(self, *args):
        return _fsdk.PDFPage_SetBox(self, *args)

    def GetBox(self, *args):
        return _fsdk.PDFPage_GetBox(self, *args)

    def GetUserUnitSize(self, *args):
        return _fsdk.PDFPage_GetUserUnitSize(self, *args)

    def SetUserUnitSize(self, *args):
        return _fsdk.PDFPage_SetUserUnitSize(self, *args)

    def Transform(self, *args):
        return _fsdk.PDFPage_Transform(self, *args)

    def Normalize(self, *args):
        return _fsdk.PDFPage_Normalize(self, *args)

    def SetClipRect(self, *args):
        return _fsdk.PDFPage_SetClipRect(self, *args)

    def SetThumbnail(self, *args):
        return _fsdk.PDFPage_SetThumbnail(self, *args)

    def GetGraphicsObjectAtPoint(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectAtPoint(self, *args)

    def GetGraphicsObjectsAtPoint(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectsAtPoint(self, *args)

    def GetGraphicsObjectAtDevicePoint(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectAtDevicePoint(self, *args)

    def GetGraphicsObjectsAtDevicePoint(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectsAtDevicePoint(self, *args)

    def GetGraphicsObjectAtRectangle(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectAtRectangle(self, *args)

    def GetGraphicsObjectsAtRectangle(self, *args):
        return _fsdk.PDFPage_GetGraphicsObjectsAtRectangle(self, *args)

    def AddImage(self, *args):
        return _fsdk.PDFPage_AddImage(self, *args)

    def AddImageFromFilePath(self, *args):
        return _fsdk.PDFPage_AddImageFromFilePath(self, *args)

    def GetAnnots(self, *args):
        return _fsdk.PDFPage_GetAnnots(self, *args)

    def GetResources(self, *args):
        return _fsdk.PDFPage_GetResources(self, *args)

    def GetContents(self, *args):
        return _fsdk.PDFPage_GetContents(self, *args)

    def GetThumb(self, *args):
        return _fsdk.PDFPage_GetThumb(self, *args)

    def GetInheritedAttribute(self, *args):
        return _fsdk.PDFPage_GetInheritedAttribute(self, *args)

    def ClearRenderCache(self, *args):
        return _fsdk.PDFPage_ClearRenderCache(self, *args)

    def GetSuggestedRect(self, *args):
        return _fsdk.PDFPage_GetSuggestedRect(self, *args)

    def AddText(self, *args):
        return _fsdk.PDFPage_AddText(self, *args)

    def CalculateNewRectForText(self, *args):
        return _fsdk.PDFPage_CalculateNewRectForText(self, *args)

    def SplitTextsInRectangle(self, *args):
        return _fsdk.PDFPage_SplitTextsInRectangle(self, *args)
PDFPage_swigregister = _fsdk.PDFPage_swigregister
PDFPage_swigregister(PDFPage)

class SearchCancelCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchCancelCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchCancelCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def NeedToCancelNow(self, *args):
        return _fsdk.SearchCancelCallback_NeedToCancelNow(self, *args)
    __swig_destroy__ = _fsdk.delete_SearchCancelCallback
    __del__ = lambda self: None
SearchCancelCallback_swigregister = _fsdk.SearchCancelCallback_swigregister
SearchCancelCallback_swigregister(SearchCancelCallback)

class TextPageCharInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextPageCharInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextPageCharInfo, name)
    __repr__ = _swig_repr
    e_Unknown = _fsdk.TextPageCharInfo_e_Unknown
    e_Normal = _fsdk.TextPageCharInfo_e_Normal
    e_Generated = _fsdk.TextPageCharInfo_e_Generated
    e_UnUnicode = _fsdk.TextPageCharInfo_e_UnUnicode
    e_Hyphen = _fsdk.TextPageCharInfo_e_Hyphen
    e_ComboWord = _fsdk.TextPageCharInfo_e_ComboWord

    def __init__(self, *args):
        this = _fsdk.new_TextPageCharInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TextPageCharInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TextPageCharInfo___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.TextPageCharInfo_Set(self, *args)
    __swig_setmethods__["font"] = _fsdk.TextPageCharInfo_font_set
    __swig_getmethods__["font"] = _fsdk.TextPageCharInfo_font_get
    if _newclass:
        font = _swig_property(_fsdk.TextPageCharInfo_font_get, _fsdk.TextPageCharInfo_font_set)
    __swig_setmethods__["flag"] = _fsdk.TextPageCharInfo_flag_set
    __swig_getmethods__["flag"] = _fsdk.TextPageCharInfo_flag_get
    if _newclass:
        flag = _swig_property(_fsdk.TextPageCharInfo_flag_get, _fsdk.TextPageCharInfo_flag_set)
    __swig_setmethods__["font_size"] = _fsdk.TextPageCharInfo_font_size_set
    __swig_getmethods__["font_size"] = _fsdk.TextPageCharInfo_font_size_get
    if _newclass:
        font_size = _swig_property(_fsdk.TextPageCharInfo_font_size_get, _fsdk.TextPageCharInfo_font_size_set)
    __swig_setmethods__["origin_x"] = _fsdk.TextPageCharInfo_origin_x_set
    __swig_getmethods__["origin_x"] = _fsdk.TextPageCharInfo_origin_x_get
    if _newclass:
        origin_x = _swig_property(_fsdk.TextPageCharInfo_origin_x_get, _fsdk.TextPageCharInfo_origin_x_set)
    __swig_setmethods__["origin_y"] = _fsdk.TextPageCharInfo_origin_y_set
    __swig_getmethods__["origin_y"] = _fsdk.TextPageCharInfo_origin_y_get
    if _newclass:
        origin_y = _swig_property(_fsdk.TextPageCharInfo_origin_y_get, _fsdk.TextPageCharInfo_origin_y_set)
    __swig_setmethods__["char_box"] = _fsdk.TextPageCharInfo_char_box_set
    __swig_getmethods__["char_box"] = _fsdk.TextPageCharInfo_char_box_get
    if _newclass:
        char_box = _swig_property(_fsdk.TextPageCharInfo_char_box_get, _fsdk.TextPageCharInfo_char_box_set)
    __swig_setmethods__["char_outbox"] = _fsdk.TextPageCharInfo_char_outbox_set
    __swig_getmethods__["char_outbox"] = _fsdk.TextPageCharInfo_char_outbox_get
    if _newclass:
        char_outbox = _swig_property(_fsdk.TextPageCharInfo_char_outbox_get, _fsdk.TextPageCharInfo_char_outbox_set)
    __swig_setmethods__["matrix"] = _fsdk.TextPageCharInfo_matrix_set
    __swig_getmethods__["matrix"] = _fsdk.TextPageCharInfo_matrix_get
    if _newclass:
        matrix = _swig_property(_fsdk.TextPageCharInfo_matrix_get, _fsdk.TextPageCharInfo_matrix_set)
    __swig_destroy__ = _fsdk.delete_TextPageCharInfo
    __del__ = lambda self: None
TextPageCharInfo_swigregister = _fsdk.TextPageCharInfo_swigregister
TextPageCharInfo_swigregister(TextPageCharInfo)

class TextPage(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextPage, name)
    __repr__ = _swig_repr
    e_ParseTextNormal = _fsdk.TextPage_e_ParseTextNormal
    e_ParseTextOutputHyphen = _fsdk.TextPage_e_ParseTextOutputHyphen
    e_ParseTextUseStreamOrder = _fsdk.TextPage_e_ParseTextUseStreamOrder
    e_TextStreamOrder = _fsdk.TextPage_e_TextStreamOrder
    e_TextDisplayOrder = _fsdk.TextPage_e_TextDisplayOrder
    __swig_destroy__ = _fsdk.delete_TextPage
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TextPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TextPage___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TextPage___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TextPage_IsEmpty(self, *args)

    def GetCharCount(self, *args):
        return _fsdk.TextPage_GetCharCount(self, *args)

    def GetCharInfo(self, *args):
        return _fsdk.TextPage_GetCharInfo(self, *args)

    def GetChars(self, *args):
        return _fsdk.TextPage_GetChars(self, *args)

    def GetIndexAtPos(self, *args):
        return _fsdk.TextPage_GetIndexAtPos(self, *args)

    def GetTextInRect(self, *args):
        return _fsdk.TextPage_GetTextInRect(self, *args)

    def GetText(self, *args):
        return _fsdk.TextPage_GetText(self, *args)

    def GetWordAtPos(self, *args):
        return _fsdk.TextPage_GetWordAtPos(self, *args)

    def GetTextRectCount(self, *args):
        return _fsdk.TextPage_GetTextRectCount(self, *args)

    def GetTextRect(self, *args):
        return _fsdk.TextPage_GetTextRect(self, *args)

    def GetBaselineRotation(self, *args):
        return _fsdk.TextPage_GetBaselineRotation(self, *args)

    def GetTextRectArrayByRect(self, *args):
        return _fsdk.TextPage_GetTextRectArrayByRect(self, *args)

    def GetCharRange(self, *args):
        return _fsdk.TextPage_GetCharRange(self, *args)

    def GetTextUnderAnnot(self, *args):
        return _fsdk.TextPage_GetTextUnderAnnot(self, *args)
TextPage_swigregister = _fsdk.TextPage_swigregister
TextPage_swigregister(TextPage)

class TextSearch(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSearch, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextSearch, name)
    __repr__ = _swig_repr
    e_SearchNormal = _fsdk.TextSearch_e_SearchNormal
    e_SearchMatchCase = _fsdk.TextSearch_e_SearchMatchCase
    e_SearchMatchWholeWord = _fsdk.TextSearch_e_SearchMatchWholeWord
    e_SearchConsecutive = _fsdk.TextSearch_e_SearchConsecutive
    e_SearchNotMatchFullWidth = _fsdk.TextSearch_e_SearchNotMatchFullWidth
    __swig_destroy__ = _fsdk.delete_TextSearch
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TextSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TextSearch___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TextSearch___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TextSearch_IsEmpty(self, *args)

    def SetPattern(self, *args):
        return _fsdk.TextSearch_SetPattern(self, *args)

    def SetStartPage(self, *args):
        return _fsdk.TextSearch_SetStartPage(self, *args)

    def SetEndPage(self, *args):
        return _fsdk.TextSearch_SetEndPage(self, *args)

    def SetStartCharacter(self, *args):
        return _fsdk.TextSearch_SetStartCharacter(self, *args)

    def SetSearchFlags(self, *args):
        return _fsdk.TextSearch_SetSearchFlags(self, *args)

    def FindNext(self, *args):
        return _fsdk.TextSearch_FindNext(self, *args)

    def FindPrev(self, *args):
        return _fsdk.TextSearch_FindPrev(self, *args)

    def GetMatchRects(self, *args):
        return _fsdk.TextSearch_GetMatchRects(self, *args)

    def GetMatchPageIndex(self, *args):
        return _fsdk.TextSearch_GetMatchPageIndex(self, *args)

    def GetMatchSentence(self, *args):
        return _fsdk.TextSearch_GetMatchSentence(self, *args)

    def GetMatchSentenceStartIndex(self, *args):
        return _fsdk.TextSearch_GetMatchSentenceStartIndex(self, *args)

    def GetMatchSentenceEndIndex(self, *args):
        return _fsdk.TextSearch_GetMatchSentenceEndIndex(self, *args)

    def GetMatchStartCharIndex(self, *args):
        return _fsdk.TextSearch_GetMatchStartCharIndex(self, *args)

    def GetMatchEndCharIndex(self, *args):
        return _fsdk.TextSearch_GetMatchEndCharIndex(self, *args)
TextSearch_swigregister = _fsdk.TextSearch_swigregister
TextSearch_swigregister(TextSearch)

class TextLink(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextLink, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextLink, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_TextLink
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_TextLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TextLink___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TextLink___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TextLink_IsEmpty(self, *args)

    def GetURI(self, *args):
        return _fsdk.TextLink_GetURI(self, *args)

    def GetStartCharIndex(self, *args):
        return _fsdk.TextLink_GetStartCharIndex(self, *args)

    def GetEndCharIndex(self, *args):
        return _fsdk.TextLink_GetEndCharIndex(self, *args)

    def GetRects(self, *args):
        return _fsdk.TextLink_GetRects(self, *args)
TextLink_swigregister = _fsdk.TextLink_swigregister
TextLink_swigregister(TextLink)

class PageTextLinks(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageTextLinks, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageTextLinks, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PageTextLinks(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PageTextLinks___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PageTextLinks___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PageTextLinks_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_PageTextLinks
    __del__ = lambda self: None

    def GetTextLinkCount(self, *args):
        return _fsdk.PageTextLinks_GetTextLinkCount(self, *args)

    def GetTextLink(self, *args):
        return _fsdk.PageTextLinks_GetTextLink(self, *args)
PageTextLinks_swigregister = _fsdk.PageTextLinks_swigregister
PageTextLinks_swigregister(PageTextLinks)

class ReadingBookmark(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadingBookmark, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadingBookmark, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_ReadingBookmark(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_ReadingBookmark
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.ReadingBookmark___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ReadingBookmark___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.ReadingBookmark_IsEmpty(self, *args)

    def GetTitle(self, *args):
        return _fsdk.ReadingBookmark_GetTitle(self, *args)

    def SetTitle(self, *args):
        return _fsdk.ReadingBookmark_SetTitle(self, *args)

    def GetPageIndex(self, *args):
        return _fsdk.ReadingBookmark_GetPageIndex(self, *args)

    def SetPageIndex(self, *args):
        return _fsdk.ReadingBookmark_SetPageIndex(self, *args)

    def GetDateTime(self, *args):
        return _fsdk.ReadingBookmark_GetDateTime(self, *args)

    def SetDateTime(self, *args):
        return _fsdk.ReadingBookmark_SetDateTime(self, *args)
ReadingBookmark_swigregister = _fsdk.ReadingBookmark_swigregister
ReadingBookmark_swigregister(ReadingBookmark)

class ReflowPage(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReflowPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReflowPage, name)
    __repr__ = _swig_repr
    e_Normal = _fsdk.ReflowPage_e_Normal
    e_WithImage = _fsdk.ReflowPage_e_WithImage
    e_NoTruncate = _fsdk.ReflowPage_e_NoTruncate

    def __init__(self, *args):
        this = _fsdk.new_ReflowPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.ReflowPage___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.ReflowPage___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_ReflowPage
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.ReflowPage_IsEmpty(self, *args)

    def SetScreenSize(self, *args):
        return _fsdk.ReflowPage_SetScreenSize(self, *args)

    def SetScreenMargin(self, *args):
        return _fsdk.ReflowPage_SetScreenMargin(self, *args)

    def SetZoom(self, *args):
        return _fsdk.ReflowPage_SetZoom(self, *args)

    def SetParseFlags(self, *args):
        return _fsdk.ReflowPage_SetParseFlags(self, *args)

    def SetLineSpace(self, *args):
        return _fsdk.ReflowPage_SetLineSpace(self, *args)

    def SetImageScale(self, *args):
        return _fsdk.ReflowPage_SetImageScale(self, *args)

    def SetTopSpace(self, *args):
        return _fsdk.ReflowPage_SetTopSpace(self, *args)

    def StartParse(self, *args):
        return _fsdk.ReflowPage_StartParse(self, *args)

    def GetContentWidth(self, *args):
        return _fsdk.ReflowPage_GetContentWidth(self, *args)

    def GetContentHeight(self, *args):
        return _fsdk.ReflowPage_GetContentHeight(self, *args)

    def GetDisplayMatrix(self, *args):
        return _fsdk.ReflowPage_GetDisplayMatrix(self, *args)

    def GetFocusData(self, *args):
        return _fsdk.ReflowPage_GetFocusData(self, *args)

    def GetFocusPosition(self, *args):
        return _fsdk.ReflowPage_GetFocusPosition(self, *args)

    def IsParsed(self, *args):
        return _fsdk.ReflowPage_IsParsed(self, *args)
ReflowPage_swigregister = _fsdk.ReflowPage_swigregister
ReflowPage_swigregister(ReflowPage)

class Rendition(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rendition, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rendition, name)
    __repr__ = _swig_repr
    e_MediaOptionMustBeHonored = _fsdk.Rendition_e_MediaOptionMustBeHonored
    e_MediaOptionBestEffort = _fsdk.Rendition_e_MediaOptionBestEffort
    e_MediaPermTempNever = _fsdk.Rendition_e_MediaPermTempNever
    e_MediaPermTempExtract = _fsdk.Rendition_e_MediaPermTempExtract
    e_MediaPermTempAccess = _fsdk.Rendition_e_MediaPermTempAccess
    e_MediaPermTempAlways = _fsdk.Rendition_e_MediaPermTempAlways
    e_MediaPlayerMustUsed = _fsdk.Rendition_e_MediaPlayerMustUsed
    e_MediaPlayerAvailable = _fsdk.Rendition_e_MediaPlayerAvailable
    e_MediaPlayerNotUsed = _fsdk.Rendition_e_MediaPlayerNotUsed
    e_MediaPlayerFitStyleMeet = _fsdk.Rendition_e_MediaPlayerFitStyleMeet
    e_MediaPlayerFitStyleSlice = _fsdk.Rendition_e_MediaPlayerFitStyleSlice
    e_MediaPlayerFitStyleFill = _fsdk.Rendition_e_MediaPlayerFitStyleFill
    e_MediaPlayerFitStyleScroll = _fsdk.Rendition_e_MediaPlayerFitStyleScroll
    e_MediaPlayerFitStyleHidden = _fsdk.Rendition_e_MediaPlayerFitStyleHidden
    e_MediaPlayerFitStyleDefault = _fsdk.Rendition_e_MediaPlayerFitStyleDefault
    e_WindowTypeFloating = _fsdk.Rendition_e_WindowTypeFloating
    e_WindowTypeFullScreen = _fsdk.Rendition_e_WindowTypeFullScreen
    e_WindowTypeHidden = _fsdk.Rendition_e_WindowTypeHidden
    e_WindowTypeAnnotRect = _fsdk.Rendition_e_WindowTypeAnnotRect
    e_MonitorSpecifierLargest = _fsdk.Rendition_e_MonitorSpecifierLargest
    e_MonitorSpecifierSmallest = _fsdk.Rendition_e_MonitorSpecifierSmallest
    e_MonitorSpecifierPrimary = _fsdk.Rendition_e_MonitorSpecifierPrimary
    e_MonitorSpecifierGreatestColorDepth = _fsdk.Rendition_e_MonitorSpecifierGreatestColorDepth
    e_MonitorSpecifierGreatestArea = _fsdk.Rendition_e_MonitorSpecifierGreatestArea
    e_MonitorSpecifierGreatestHeight = _fsdk.Rendition_e_MonitorSpecifierGreatestHeight
    e_MonitorSpecifierGreatestWidth = _fsdk.Rendition_e_MonitorSpecifierGreatestWidth
    e_FloatingWindowRelatedWindowDocument = _fsdk.Rendition_e_FloatingWindowRelatedWindowDocument
    e_FloatingWindowRelatedWindowApplication = _fsdk.Rendition_e_FloatingWindowRelatedWindowApplication
    e_FloatingWindowRelatedWindowFullDesktop = _fsdk.Rendition_e_FloatingWindowRelatedWindowFullDesktop
    e_FloatingWindowRelatedWindowMonitor = _fsdk.Rendition_e_FloatingWindowRelatedWindowMonitor
    e_FloatingWindowResizeTypeNo = _fsdk.Rendition_e_FloatingWindowResizeTypeNo
    e_FloatingWindowResizeTypeAspectRatio = _fsdk.Rendition_e_FloatingWindowResizeTypeAspectRatio
    e_FloatingWindowResizeTypeAnyway = _fsdk.Rendition_e_FloatingWindowResizeTypeAnyway
    e_FloatingWindowOffscreenEventNone = _fsdk.Rendition_e_FloatingWindowOffscreenEventNone
    e_FloatingWindowOffscreenEventMoveResize = _fsdk.Rendition_e_FloatingWindowOffscreenEventMoveResize
    e_FloatingWindowOffscreenEventNonViable = _fsdk.Rendition_e_FloatingWindowOffscreenEventNonViable
    __swig_destroy__ = _fsdk.delete_Rendition
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Rendition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Rendition___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Rendition___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Rendition_IsEmpty(self, *args)

    def GetDict(self, *args):
        return _fsdk.Rendition_GetDict(self, *args)

    def GetRenditionName(self, *args):
        return _fsdk.Rendition_GetRenditionName(self, *args)

    def SetRenditionName(self, *args):
        return _fsdk.Rendition_SetRenditionName(self, *args)

    def HasMediaClip(self, *args):
        return _fsdk.Rendition_HasMediaClip(self, *args)

    def GetMediaClipName(self, *args):
        return _fsdk.Rendition_GetMediaClipName(self, *args)

    def SetMediaClipName(self, *args):
        return _fsdk.Rendition_SetMediaClipName(self, *args)

    def GetMediaClipFile(self, *args):
        return _fsdk.Rendition_GetMediaClipFile(self, *args)

    def SetMediaClipFile(self, *args):
        return _fsdk.Rendition_SetMediaClipFile(self, *args)

    def GetMediaClipContentType(self, *args):
        return _fsdk.Rendition_GetMediaClipContentType(self, *args)

    def SetMediaClipContentType(self, *args):
        return _fsdk.Rendition_SetMediaClipContentType(self, *args)

    def GetPermission(self, *args):
        return _fsdk.Rendition_GetPermission(self, *args)

    def SetPermission(self, *args):
        return _fsdk.Rendition_SetPermission(self, *args)

    def GetMediaDescriptions(self, *args):
        return _fsdk.Rendition_GetMediaDescriptions(self, *args)

    def SetMediaDescriptions(self, *args):
        return _fsdk.Rendition_SetMediaDescriptions(self, *args)

    def GetMediaBaseURL(self, *args):
        return _fsdk.Rendition_GetMediaBaseURL(self, *args)

    def SetMediaBaseURL(self, *args):
        return _fsdk.Rendition_SetMediaBaseURL(self, *args)

    def GetMediaPlayerCount(self, *args):
        return _fsdk.Rendition_GetMediaPlayerCount(self, *args)

    def GetMediaPlayer(self, *args):
        return _fsdk.Rendition_GetMediaPlayer(self, *args)

    def AddMediaPlayer(self, *args):
        return _fsdk.Rendition_AddMediaPlayer(self, *args)

    def RemoveMediaPlayer(self, *args):
        return _fsdk.Rendition_RemoveMediaPlayer(self, *args)

    def GetVolume(self, *args):
        return _fsdk.Rendition_GetVolume(self, *args)

    def SetVolume(self, *args):
        return _fsdk.Rendition_SetVolume(self, *args)

    def IsControlBarVisible(self, *args):
        return _fsdk.Rendition_IsControlBarVisible(self, *args)

    def EnableControlBarVisible(self, *args):
        return _fsdk.Rendition_EnableControlBarVisible(self, *args)

    def GetFitStyle(self, *args):
        return _fsdk.Rendition_GetFitStyle(self, *args)

    def SetFitStyle(self, *args):
        return _fsdk.Rendition_SetFitStyle(self, *args)

    def GetDuration(self, *args):
        return _fsdk.Rendition_GetDuration(self, *args)

    def SetDuration(self, *args):
        return _fsdk.Rendition_SetDuration(self, *args)

    def IsAutoPlay(self, *args):
        return _fsdk.Rendition_IsAutoPlay(self, *args)

    def EnableAutoPlay(self, *args):
        return _fsdk.Rendition_EnableAutoPlay(self, *args)

    def GetRepeatCount(self, *args):
        return _fsdk.Rendition_GetRepeatCount(self, *args)

    def SetRepeatCount(self, *args):
        return _fsdk.Rendition_SetRepeatCount(self, *args)

    def GetWindowType(self, *args):
        return _fsdk.Rendition_GetWindowType(self, *args)

    def SetWindowType(self, *args):
        return _fsdk.Rendition_SetWindowType(self, *args)

    def GetBackgroundColor(self, *args):
        return _fsdk.Rendition_GetBackgroundColor(self, *args)

    def SetBackgroundColor(self, *args):
        return _fsdk.Rendition_SetBackgroundColor(self, *args)

    def GetBackgroundOpacity(self, *args):
        return _fsdk.Rendition_GetBackgroundOpacity(self, *args)

    def SetBackgroundOpacity(self, *args):
        return _fsdk.Rendition_SetBackgroundOpacity(self, *args)

    def GetMonitorSpecifier(self, *args):
        return _fsdk.Rendition_GetMonitorSpecifier(self, *args)

    def SetMonitorSpecifier(self, *args):
        return _fsdk.Rendition_SetMonitorSpecifier(self, *args)

    def GetFloatingWindowWidth(self, *args):
        return _fsdk.Rendition_GetFloatingWindowWidth(self, *args)

    def GetFloatingWindowHeight(self, *args):
        return _fsdk.Rendition_GetFloatingWindowHeight(self, *args)

    def SetFloatingWindowSize(self, *args):
        return _fsdk.Rendition_SetFloatingWindowSize(self, *args)

    def GetFloatingWindowRelatedWindowType(self, *args):
        return _fsdk.Rendition_GetFloatingWindowRelatedWindowType(self, *args)

    def SetFloatingWindowRelatedWindowType(self, *args):
        return _fsdk.Rendition_SetFloatingWindowRelatedWindowType(self, *args)

    def GetFloatingWindowPosition(self, *args):
        return _fsdk.Rendition_GetFloatingWindowPosition(self, *args)

    def SetFloatingWindowPosition(self, *args):
        return _fsdk.Rendition_SetFloatingWindowPosition(self, *args)

    def GetFloatingWindowOffscreenEvent(self, *args):
        return _fsdk.Rendition_GetFloatingWindowOffscreenEvent(self, *args)

    def SetFloatingWindowOffscreenEvent(self, *args):
        return _fsdk.Rendition_SetFloatingWindowOffscreenEvent(self, *args)

    def HasFloatingWindowTitleBar(self, *args):
        return _fsdk.Rendition_HasFloatingWindowTitleBar(self, *args)

    def EnableFloatingWindowTitleBar(self, *args):
        return _fsdk.Rendition_EnableFloatingWindowTitleBar(self, *args)

    def HasFloatingWindowCloseButton(self, *args):
        return _fsdk.Rendition_HasFloatingWindowCloseButton(self, *args)

    def EnableFloatingWindowCloseButton(self, *args):
        return _fsdk.Rendition_EnableFloatingWindowCloseButton(self, *args)

    def GetFloatingWindowResizeType(self, *args):
        return _fsdk.Rendition_GetFloatingWindowResizeType(self, *args)

    def SetFloatingWindowResizeType(self, *args):
        return _fsdk.Rendition_SetFloatingWindowResizeType(self, *args)

    def GetFloatingWindowTitles(self, *args):
        return _fsdk.Rendition_GetFloatingWindowTitles(self, *args)

    def SetFloatingWindowTitles(self, *args):
        return _fsdk.Rendition_SetFloatingWindowTitles(self, *args)
Rendition_swigregister = _fsdk.Rendition_swigregister
Rendition_swigregister(Rendition)

class MediaPlayer(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MediaPlayer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_MediaPlayer
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_MediaPlayer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.MediaPlayer___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.MediaPlayer___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.MediaPlayer_IsEmpty(self, *args)

    def GetDict(self, *args):
        return _fsdk.MediaPlayer_GetDict(self, *args)

    def GetSoftwareURI(self, *args):
        return _fsdk.MediaPlayer_GetSoftwareURI(self, *args)

    def SetSoftwareURI(self, *args):
        return _fsdk.MediaPlayer_SetSoftwareURI(self, *args)

    def GetOSIdentifiers(self, *args):
        return _fsdk.MediaPlayer_GetOSIdentifiers(self, *args)

    def SetOSIdentifiers(self, *args):
        return _fsdk.MediaPlayer_SetOSIdentifiers(self, *args)
MediaPlayer_swigregister = _fsdk.MediaPlayer_swigregister
MediaPlayer_swigregister(MediaPlayer)

class PageLabels(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageLabels, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageLabels, name)
    __repr__ = _swig_repr
    e_None = _fsdk.PageLabels_e_None
    e_DecimalNums = _fsdk.PageLabels_e_DecimalNums
    e_UpperRomanNums = _fsdk.PageLabels_e_UpperRomanNums
    e_LowerRomanNums = _fsdk.PageLabels_e_LowerRomanNums
    e_UpperLetters = _fsdk.PageLabels_e_UpperLetters
    e_LowerLetters = _fsdk.PageLabels_e_LowerLetters
    __swig_destroy__ = _fsdk.delete_PageLabels
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PageLabels(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PageLabels___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PageLabels___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PageLabels_IsEmpty(self, *args)

    def GetPageLabelTitle(self, *args):
        return _fsdk.PageLabels_GetPageLabelTitle(self, *args)

    def HasPageLabel(self, *args):
        return _fsdk.PageLabels_HasPageLabel(self, *args)

    def GetPageLabelStyle(self, *args):
        return _fsdk.PageLabels_GetPageLabelStyle(self, *args)

    def GetPageLabelPrefix(self, *args):
        return _fsdk.PageLabels_GetPageLabelPrefix(self, *args)

    def GetPageLabelStart(self, *args):
        return _fsdk.PageLabels_GetPageLabelStart(self, *args)

    def SetPageLabel(self, *args):
        return _fsdk.PageLabels_SetPageLabel(self, *args)

    def RemovePageLabel(self, *args):
        return _fsdk.PageLabels_RemovePageLabel(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PageLabels_RemoveAll(self, *args)

    def GetNumberTree(self, *args):
        return _fsdk.PageLabels_GetNumberTree(self, *args)
PageLabels_swigregister = _fsdk.PageLabels_swigregister
PageLabels_swigregister(PageLabels)

class Metadata(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Metadata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Metadata
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.Metadata___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Metadata___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Metadata_IsEmpty(self, *args)

    def HasKey(self, *args):
        return _fsdk.Metadata_HasKey(self, *args)

    def GetCreationDateTime(self, *args):
        return _fsdk.Metadata_GetCreationDateTime(self, *args)

    def GetModifiedDateTime(self, *args):
        return _fsdk.Metadata_GetModifiedDateTime(self, *args)

    def SetCreationDateTime(self, *args):
        return _fsdk.Metadata_SetCreationDateTime(self, *args)

    def SetModifiedDateTime(self, *args):
        return _fsdk.Metadata_SetModifiedDateTime(self, *args)

    def GetValues(self, *args):
        return _fsdk.Metadata_GetValues(self, *args)

    def SetValues(self, *args):
        return _fsdk.Metadata_SetValues(self, *args)

    def GetCustomerKeys(self, *args):
        return _fsdk.Metadata_GetCustomerKeys(self, *args)

    def RemoveCustomerKey(self, *args):
        return _fsdk.Metadata_RemoveCustomerKey(self, *args)
Metadata_swigregister = _fsdk.Metadata_swigregister
Metadata_swigregister(Metadata)

class Attachments(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attachments, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Attachments, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_Attachments
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_Attachments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Attachments___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Attachments___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Attachments_IsEmpty(self, *args)

    def GetCount(self, *args):
        return _fsdk.Attachments_GetCount(self, *args)

    def GetKey(self, *args):
        return _fsdk.Attachments_GetKey(self, *args)

    def GetEmbeddedFile(self, *args):
        return _fsdk.Attachments_GetEmbeddedFile(self, *args)

    def SetEmbeddedFile(self, *args):
        return _fsdk.Attachments_SetEmbeddedFile(self, *args)

    def AddEmbeddedFile(self, *args):
        return _fsdk.Attachments_AddEmbeddedFile(self, *args)

    def AddFromFilePath(self, *args):
        return _fsdk.Attachments_AddFromFilePath(self, *args)

    def RemoveEmbeddedFile(self, *args):
        return _fsdk.Attachments_RemoveEmbeddedFile(self, *args)

    def RemoveAllEmbeddedFiles(self, *args):
        return _fsdk.Attachments_RemoveAllEmbeddedFiles(self, *args)

    def ExtractEmbeddedFileTo(self, *args):
        return _fsdk.Attachments_ExtractEmbeddedFileTo(self, *args)

    def GetNameTree(self, *args):
        return _fsdk.Attachments_GetNameTree(self, *args)
Attachments_swigregister = _fsdk.Attachments_swigregister
Attachments_swigregister(Attachments)

class DocViewerPrefs(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocViewerPrefs, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DocViewerPrefs, name)
    __repr__ = _swig_repr
    e_PrintScaleNone = _fsdk.DocViewerPrefs_e_PrintScaleNone
    e_PrintScaleAppDefault = _fsdk.DocViewerPrefs_e_PrintScaleAppDefault
    e_HideToolbar = _fsdk.DocViewerPrefs_e_HideToolbar
    e_HideMenubar = _fsdk.DocViewerPrefs_e_HideMenubar
    e_HideWindowUI = _fsdk.DocViewerPrefs_e_HideWindowUI
    e_FitWindow = _fsdk.DocViewerPrefs_e_FitWindow
    e_CenterWindow = _fsdk.DocViewerPrefs_e_CenterWindow
    e_DisplayDocTitle = _fsdk.DocViewerPrefs_e_DisplayDocTitle
    __swig_destroy__ = _fsdk.delete_DocViewerPrefs
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_DocViewerPrefs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.DocViewerPrefs___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.DocViewerPrefs___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.DocViewerPrefs_IsEmpty(self, *args)

    def GetUIDisplayStatus(self, *args):
        return _fsdk.DocViewerPrefs_GetUIDisplayStatus(self, *args)

    def SetUIDisplayStatus(self, *args):
        return _fsdk.DocViewerPrefs_SetUIDisplayStatus(self, *args)

    def GetNonFullScreenPageMode(self, *args):
        return _fsdk.DocViewerPrefs_GetNonFullScreenPageMode(self, *args)

    def SetNonFullScreenPageMode(self, *args):
        return _fsdk.DocViewerPrefs_SetNonFullScreenPageMode(self, *args)

    def GetReadingDirection(self, *args):
        return _fsdk.DocViewerPrefs_GetReadingDirection(self, *args)

    def SetReadingDirection(self, *args):
        return _fsdk.DocViewerPrefs_SetReadingDirection(self, *args)

    def GetViewArea(self, *args):
        return _fsdk.DocViewerPrefs_GetViewArea(self, *args)

    def SetViewArea(self, *args):
        return _fsdk.DocViewerPrefs_SetViewArea(self, *args)

    def GetViewClip(self, *args):
        return _fsdk.DocViewerPrefs_GetViewClip(self, *args)

    def SetViewClip(self, *args):
        return _fsdk.DocViewerPrefs_SetViewClip(self, *args)

    def GetPrintArea(self, *args):
        return _fsdk.DocViewerPrefs_GetPrintArea(self, *args)

    def SetPrintArea(self, *args):
        return _fsdk.DocViewerPrefs_SetPrintArea(self, *args)

    def GetPrintClip(self, *args):
        return _fsdk.DocViewerPrefs_GetPrintClip(self, *args)

    def SetPrintClip(self, *args):
        return _fsdk.DocViewerPrefs_SetPrintClip(self, *args)

    def GetPrintScale(self, *args):
        return _fsdk.DocViewerPrefs_GetPrintScale(self, *args)

    def SetPrintScale(self, *args):
        return _fsdk.DocViewerPrefs_SetPrintScale(self, *args)

    def GetPrintCopies(self, *args):
        return _fsdk.DocViewerPrefs_GetPrintCopies(self, *args)

    def SetPrintCopies(self, *args):
        return _fsdk.DocViewerPrefs_SetPrintCopies(self, *args)

    def GetPrintRange(self, *args):
        return _fsdk.DocViewerPrefs_GetPrintRange(self, *args)

    def SetPrintRange(self, *args):
        return _fsdk.DocViewerPrefs_SetPrintRange(self, *args)

    def GetDict(self, *args):
        return _fsdk.DocViewerPrefs_GetDict(self, *args)
DocViewerPrefs_swigregister = _fsdk.DocViewerPrefs_swigregister
DocViewerPrefs_swigregister(DocViewerPrefs)

class TabOrderMgr(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabOrderMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabOrderMgr, name)
    __repr__ = _swig_repr
    e_None = _fsdk.TabOrderMgr_e_None
    e_Row = _fsdk.TabOrderMgr_e_Row
    e_Column = _fsdk.TabOrderMgr_e_Column
    e_Structure = _fsdk.TabOrderMgr_e_Structure

    def __init__(self, *args):
        this = _fsdk.new_TabOrderMgr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TabOrderMgr___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TabOrderMgr___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.TabOrderMgr_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_TabOrderMgr
    __del__ = lambda self: None

    def Reload(self, *args):
        return _fsdk.TabOrderMgr_Reload(self, *args)

    def GetOrderType(self, *args):
        return _fsdk.TabOrderMgr_GetOrderType(self, *args)

    def SetOrderType(self, *args):
        return _fsdk.TabOrderMgr_SetOrderType(self, *args)

    def GetFirstAnnot(self, *args):
        return _fsdk.TabOrderMgr_GetFirstAnnot(self, *args)

    def GetLastAnnot(self, *args):
        return _fsdk.TabOrderMgr_GetLastAnnot(self, *args)

    def GetNextAnnot(self, *args):
        return _fsdk.TabOrderMgr_GetNextAnnot(self, *args)

    def GetPrevAnnot(self, *args):
        return _fsdk.TabOrderMgr_GetPrevAnnot(self, *args)

    def AdjustStructureOrder(self, *args):
        return _fsdk.TabOrderMgr_AdjustStructureOrder(self, *args)
TabOrderMgr_swigregister = _fsdk.TabOrderMgr_swigregister
TabOrderMgr_swigregister(TabOrderMgr)

class OutputPreview(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPreview, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPreview, name)
    __repr__ = _swig_repr
    e_ShowAll = _fsdk.OutputPreview_e_ShowAll
    e_ShowDeviceCMYK = _fsdk.OutputPreview_e_ShowDeviceCMYK
    e_ShowNotDeviceCMYK = _fsdk.OutputPreview_e_ShowNotDeviceCMYK
    e_ShowICCBasedCMYK = _fsdk.OutputPreview_e_ShowICCBasedCMYK
    e_ShowSpotColor = _fsdk.OutputPreview_e_ShowSpotColor
    e_ShowDeviceCMYKAndSpot = _fsdk.OutputPreview_e_ShowDeviceCMYKAndSpot
    e_ShowNotDeviceCMYKOrSpot = _fsdk.OutputPreview_e_ShowNotDeviceCMYKOrSpot
    e_ShowDeviceN = _fsdk.OutputPreview_e_ShowDeviceN
    e_ShowCMYK = _fsdk.OutputPreview_e_ShowCMYK
    e_ShowRGB = _fsdk.OutputPreview_e_ShowRGB
    e_ShowDeviceRGB = _fsdk.OutputPreview_e_ShowDeviceRGB
    e_ShowICCBasedRGB = _fsdk.OutputPreview_e_ShowICCBasedRGB
    e_ShowGray = _fsdk.OutputPreview_e_ShowGray
    e_ShowDeviceGray = _fsdk.OutputPreview_e_ShowDeviceGray
    e_ShowCalGray = _fsdk.OutputPreview_e_ShowCalGray
    e_ShowCalibrated = _fsdk.OutputPreview_e_ShowCalibrated
    e_ShowLab = _fsdk.OutputPreview_e_ShowLab
    e_ShowDevice = _fsdk.OutputPreview_e_ShowDevice
    e_ShowImages = _fsdk.OutputPreview_e_ShowImages
    e_ShowSolidColor = _fsdk.OutputPreview_e_ShowSolidColor
    e_ShowSmoothShades = _fsdk.OutputPreview_e_ShowSmoothShades
    e_ShowRegistrationColor = _fsdk.OutputPreview_e_ShowRegistrationColor
    e_ShowText = _fsdk.OutputPreview_e_ShowText
    e_ShowLineArt = _fsdk.OutputPreview_e_ShowLineArt
    e_ColorantTypeProcess = _fsdk.OutputPreview_e_ColorantTypeProcess
    e_ColorantTypeSpot = _fsdk.OutputPreview_e_ColorantTypeSpot

    def __init__(self, *args):
        this = _fsdk.new_OutputPreview(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.OutputPreview___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.OutputPreview___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.OutputPreview_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_OutputPreview
    __del__ = lambda self: None

    def SetSimulationProfile(self, *args):
        return _fsdk.OutputPreview_SetSimulationProfile(self, *args)

    def SetShowType(self, *args):
        return _fsdk.OutputPreview_SetShowType(self, *args)

    def GetPlates(self, *args):
        return _fsdk.OutputPreview_GetPlates(self, *args)

    def GetSpotPlateColor(self, *args):
        return _fsdk.OutputPreview_GetSpotPlateColor(self, *args)

    def SetCheckStatus(self, *args):
        return _fsdk.OutputPreview_SetCheckStatus(self, *args)

    def IsChecked(self, *args):
        return _fsdk.OutputPreview_IsChecked(self, *args)

    def EnableSimulateOverprint(self, *args):
        return _fsdk.OutputPreview_EnableSimulateOverprint(self, *args)

    def GeneratePreviewBitmap(self, *args):
        return _fsdk.OutputPreview_GeneratePreviewBitmap(self, *args)
OutputPreview_swigregister = _fsdk.OutputPreview_swigregister
OutputPreview_swigregister(OutputPreview)

class AnnotationSummaryCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationSummaryCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationSummaryCallback, name)
    __repr__ = _swig_repr
    e_AnnotationSummaryStringIDAuthor = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDAuthor
    e_AnnotationSummaryStringIDDate = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDDate
    e_AnnotationSummaryStringIDPage = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDPage
    e_AnnotationSummaryStringIDType = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDType
    e_AnnotationSummaryStringIDDocumentTitle = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDDocumentTitle
    e_AnnotationSummaryStringIDPageTitle = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDPageTitle
    e_AnnotationSummaryStringIDNoAnnotations = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDNoAnnotations
    e_AnnotationSummaryStringIDNumber = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDNumber
    e_AnnotationSummaryStringIDSubject = _fsdk.AnnotationSummaryCallback_e_AnnotationSummaryStringIDSubject

    def Release(self, *args):
        return _fsdk.AnnotationSummaryCallback_Release(self, *args)

    def GetCurrentLocaleID(self, *args):
        return _fsdk.AnnotationSummaryCallback_GetCurrentLocaleID(self, *args)

    def GetLocalFontName(self, *args):
        return _fsdk.AnnotationSummaryCallback_GetLocalFontName(self, *args)

    def LoadString(self, *args):
        return _fsdk.AnnotationSummaryCallback_LoadString(self, *args)

    def __init__(self, *args):
        if self.__class__ == AnnotationSummaryCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_AnnotationSummaryCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_AnnotationSummaryCallback(self)
        return weakref_proxy(self)
AnnotationSummaryCallback_swigregister = _fsdk.AnnotationSummaryCallback_swigregister
AnnotationSummaryCallback_swigregister(AnnotationSummaryCallback)

class AnnotationSummarySettings(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationSummarySettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationSummarySettings, name)
    __repr__ = _swig_repr
    e_SummaryLayoutSeparatePagesWithLine = _fsdk.AnnotationSummarySettings_e_SummaryLayoutSeparatePagesWithLine
    e_SummaryLayoutSinglePageWithLine = _fsdk.AnnotationSummarySettings_e_SummaryLayoutSinglePageWithLine
    e_SummaryLayoutAnnotationOnly = _fsdk.AnnotationSummarySettings_e_SummaryLayoutAnnotationOnly
    e_SummaryLayoutSeparatePagesWithSequenceNumber = _fsdk.AnnotationSummarySettings_e_SummaryLayoutSeparatePagesWithSequenceNumber
    e_SummaryLayoutSinglePageWithSequenceNumber = _fsdk.AnnotationSummarySettings_e_SummaryLayoutSinglePageWithSequenceNumber
    e_TypeSortByAuthor = _fsdk.AnnotationSummarySettings_e_TypeSortByAuthor
    e_TypeSortByDate = _fsdk.AnnotationSummarySettings_e_TypeSortByDate
    e_TypeSortByPage = _fsdk.AnnotationSummarySettings_e_TypeSortByPage
    e_TypeSortByAnnotationType = _fsdk.AnnotationSummarySettings_e_TypeSortByAnnotationType
    e_FontSizeSmall = _fsdk.AnnotationSummarySettings_e_FontSizeSmall
    e_FontSizeMedium = _fsdk.AnnotationSummarySettings_e_FontSizeMedium
    e_FontSizeLarge = _fsdk.AnnotationSummarySettings_e_FontSizeLarge
    __swig_destroy__ = _fsdk.delete_AnnotationSummarySettings
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_AnnotationSummarySettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.AnnotationSummarySettings___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.AnnotationSummarySettings___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.AnnotationSummarySettings_IsEmpty(self, *args)

    def SetSummaryLayout(self, *args):
        return _fsdk.AnnotationSummarySettings_SetSummaryLayout(self, *args)

    def SetSortType(self, *args):
        return _fsdk.AnnotationSummarySettings_SetSortType(self, *args)

    def SetFontSize(self, *args):
        return _fsdk.AnnotationSummarySettings_SetFontSize(self, *args)

    def SetAnnotType(self, *args):
        return _fsdk.AnnotationSummarySettings_SetAnnotType(self, *args)

    def SetFileTitle(self, *args):
        return _fsdk.AnnotationSummarySettings_SetFileTitle(self, *args)

    def SetPageRect(self, *args):
        return _fsdk.AnnotationSummarySettings_SetPageRect(self, *args)

    def SetPageMargin(self, *args):
        return _fsdk.AnnotationSummarySettings_SetPageMargin(self, *args)

    def SetStartPage(self, *args):
        return _fsdk.AnnotationSummarySettings_SetStartPage(self, *args)

    def SetEndPage(self, *args):
        return _fsdk.AnnotationSummarySettings_SetEndPage(self, *args)

    def EnableOutputNoAnnotationPage(self, *args):
        return _fsdk.AnnotationSummarySettings_EnableOutputNoAnnotationPage(self, *args)

    def SetConnectorLineColor(self, *args):
        return _fsdk.AnnotationSummarySettings_SetConnectorLineColor(self, *args)

    def SetConnectorLineOpacity(self, *args):
        return _fsdk.AnnotationSummarySettings_SetConnectorLineOpacity(self, *args)

    def SetAnnotThumbnail(self, *args):
        return _fsdk.AnnotationSummarySettings_SetAnnotThumbnail(self, *args)
AnnotationSummarySettings_swigregister = _fsdk.AnnotationSummarySettings_swigregister
AnnotationSummarySettings_swigregister(AnnotationSummarySettings)

class AnnotationSummary(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationSummary, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationSummary, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_AnnotationSummary
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_AnnotationSummary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.AnnotationSummary___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.AnnotationSummary___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.AnnotationSummary_IsEmpty(self, *args)

    def SetCallback(self, *args):
        return _fsdk.AnnotationSummary_SetCallback(self, *args)

    def StartSummarize(self, *args):
        return _fsdk.AnnotationSummary_StartSummarize(self, *args)
AnnotationSummary_swigregister = _fsdk.AnnotationSummary_swigregister
AnnotationSummary_swigregister(AnnotationSummary)

class PortfolioNode(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortfolioNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortfolioNode, name)
    __repr__ = _swig_repr
    e_TypeUnknown = _fsdk.PortfolioNode_e_TypeUnknown
    e_TypeFolder = _fsdk.PortfolioNode_e_TypeFolder
    e_TypeFile = _fsdk.PortfolioNode_e_TypeFile

    def __init__(self, *args):
        this = _fsdk.new_PortfolioNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PortfolioNode
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.PortfolioNode___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PortfolioNode___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PortfolioNode_IsEmpty(self, *args)

    def GetNodeType(self, *args):
        return _fsdk.PortfolioNode_GetNodeType(self, *args)
PortfolioNode_swigregister = _fsdk.PortfolioNode_swigregister
PortfolioNode_swigregister(PortfolioNode)

class PortfolioNodeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortfolioNodeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortfolioNodeArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_PortfolioNodeArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_PortfolioNodeArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.PortfolioNodeArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.PortfolioNodeArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.PortfolioNodeArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.PortfolioNodeArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.PortfolioNodeArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.PortfolioNodeArray_RemoveAll(self, *args)
PortfolioNodeArray_swigregister = _fsdk.PortfolioNodeArray_swigregister
PortfolioNodeArray_swigregister(PortfolioNodeArray)

class PortfolioFolderNode(PortfolioNode):
    __swig_setmethods__ = {}
    for _s in [PortfolioNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortfolioFolderNode, name, value)
    __swig_getmethods__ = {}
    for _s in [PortfolioNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortfolioFolderNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PortfolioFolderNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PortfolioFolderNode
    __del__ = lambda self: None

    def IsRoot(self, *args):
        return _fsdk.PortfolioFolderNode_IsRoot(self, *args)

    def GetName(self, *args):
        return _fsdk.PortfolioFolderNode_GetName(self, *args)

    def AddFile(self, *args):
        return _fsdk.PortfolioFolderNode_AddFile(self, *args)

    def AddPDFDoc(self, *args):
        return _fsdk.PortfolioFolderNode_AddPDFDoc(self, *args)

    def AddSubFolder(self, *args):
        return _fsdk.PortfolioFolderNode_AddSubFolder(self, *args)

    def RemoveSubNode(self, *args):
        return _fsdk.PortfolioFolderNode_RemoveSubNode(self, *args)

    def GetSortedSubNodes(self, *args):
        return _fsdk.PortfolioFolderNode_GetSortedSubNodes(self, *args)

    def GetModifiedDateTime(self, *args):
        return _fsdk.PortfolioFolderNode_GetModifiedDateTime(self, *args)

    def GetCreationDateTime(self, *args):
        return _fsdk.PortfolioFolderNode_GetCreationDateTime(self, *args)

    def GetDescription(self, *args):
        return _fsdk.PortfolioFolderNode_GetDescription(self, *args)

    def SetDescription(self, *args):
        return _fsdk.PortfolioFolderNode_SetDescription(self, *args)
PortfolioFolderNode_swigregister = _fsdk.PortfolioFolderNode_swigregister
PortfolioFolderNode_swigregister(PortfolioFolderNode)

class PortfolioFileNode(PortfolioNode):
    __swig_setmethods__ = {}
    for _s in [PortfolioNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortfolioFileNode, name, value)
    __swig_getmethods__ = {}
    for _s in [PortfolioNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortfolioFileNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PortfolioFileNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_PortfolioFileNode
    __del__ = lambda self: None

    def GetFileSpec(self, *args):
        return _fsdk.PortfolioFileNode_GetFileSpec(self, *args)

    def GetKeyName(self, *args):
        return _fsdk.PortfolioFileNode_GetKeyName(self, *args)
PortfolioFileNode_swigregister = _fsdk.PortfolioFileNode_swigregister
PortfolioFileNode_swigregister(PortfolioFileNode)

class SchemaField(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaField, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SchemaField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.SchemaField___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SchemaField___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SchemaField_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_SchemaField
    __del__ = lambda self: None

    def GetKeyName(self, *args):
        return _fsdk.SchemaField_GetKeyName(self, *args)

    def SetKeyName(self, *args):
        return _fsdk.SchemaField_SetKeyName(self, *args)

    def GetSubtypeName(self, *args):
        return _fsdk.SchemaField_GetSubtypeName(self, *args)

    def SetSubtypeName(self, *args):
        return _fsdk.SchemaField_SetSubtypeName(self, *args)

    def GetDisplayName(self, *args):
        return _fsdk.SchemaField_GetDisplayName(self, *args)

    def SetDisplayName(self, *args):
        return _fsdk.SchemaField_SetDisplayName(self, *args)

    def IsVisible(self, *args):
        return _fsdk.SchemaField_IsVisible(self, *args)

    def SetVisibility(self, *args):
        return _fsdk.SchemaField_SetVisibility(self, *args)
SchemaField_swigregister = _fsdk.SchemaField_swigregister
SchemaField_swigregister(SchemaField)

class SchemaFieldArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaFieldArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaFieldArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SchemaFieldArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SchemaFieldArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.SchemaFieldArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.SchemaFieldArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.SchemaFieldArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.SchemaFieldArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.SchemaFieldArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.SchemaFieldArray_RemoveAll(self, *args)
SchemaFieldArray_swigregister = _fsdk.SchemaFieldArray_swigregister
SchemaFieldArray_swigregister(SchemaFieldArray)

class Portfolio(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Portfolio, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Portfolio, name)
    __repr__ = _swig_repr
    e_InitialViewUnknownMode = _fsdk.Portfolio_e_InitialViewUnknownMode
    e_InitialViewDetailMode = _fsdk.Portfolio_e_InitialViewDetailMode
    e_InitialViewTileMode = _fsdk.Portfolio_e_InitialViewTileMode
    e_InitialViewHidden = _fsdk.Portfolio_e_InitialViewHidden
    if _newclass:
        CreatePortfolio = staticmethod(_fsdk.Portfolio_CreatePortfolio)
    else:
        CreatePortfolio = _fsdk.Portfolio_CreatePortfolio

    def __init__(self, *args):
        this = _fsdk.new_Portfolio(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Portfolio___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Portfolio___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.Portfolio_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_Portfolio
    __del__ = lambda self: None

    def GetPortfolioPDFDoc(self, *args):
        return _fsdk.Portfolio_GetPortfolioPDFDoc(self, *args)

    def GetRootNode(self, *args):
        return _fsdk.Portfolio_GetRootNode(self, *args)

    def GetInitialViewMode(self, *args):
        return _fsdk.Portfolio_GetInitialViewMode(self, *args)

    def SetInitialViewMode(self, *args):
        return _fsdk.Portfolio_SetInitialViewMode(self, *args)

    def IsSortedInAscending(self, *args):
        return _fsdk.Portfolio_IsSortedInAscending(self, *args)

    def SetSortingOrder(self, *args):
        return _fsdk.Portfolio_SetSortingOrder(self, *args)

    def GetSortingFieldKeyName(self, *args):
        return _fsdk.Portfolio_GetSortingFieldKeyName(self, *args)

    def SetSortingFieldKeyName(self, *args):
        return _fsdk.Portfolio_SetSortingFieldKeyName(self, *args)

    def GetInitialFileSpecKeyName(self, *args):
        return _fsdk.Portfolio_GetInitialFileSpecKeyName(self, *args)

    def SetInitialFileSpecKeyName(self, *args):
        return _fsdk.Portfolio_SetInitialFileSpecKeyName(self, *args)

    def GetSchemaFields(self, *args):
        return _fsdk.Portfolio_GetSchemaFields(self, *args)

    def SetSchemaFields(self, *args):
        return _fsdk.Portfolio_SetSchemaFields(self, *args)
Portfolio_swigregister = _fsdk.Portfolio_swigregister
Portfolio_swigregister(Portfolio)

def Portfolio_CreatePortfolio(*args):
    return _fsdk.Portfolio_CreatePortfolio(*args)
Portfolio_CreatePortfolio = _fsdk.Portfolio_CreatePortfolio

class SnappedPoint(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnappedPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SnappedPoint, name)
    __repr__ = _swig_repr
    e_TypeNone = _fsdk.SnappedPoint_e_TypeNone
    e_TypeEndpoint = _fsdk.SnappedPoint_e_TypeEndpoint
    e_TypeMidpoint = _fsdk.SnappedPoint_e_TypeMidpoint
    e_TypeIntersectionPoint = _fsdk.SnappedPoint_e_TypeIntersectionPoint
    e_TypeNearestPoint = _fsdk.SnappedPoint_e_TypeNearestPoint
    __swig_destroy__ = _fsdk.delete_SnappedPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SnappedPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.SnappedPoint___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SnappedPoint___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SnappedPoint_IsEmpty(self, *args)

    def GetType(self, *args):
        return _fsdk.SnappedPoint_GetType(self, *args)

    def GetPoint(self, *args):
        return _fsdk.SnappedPoint_GetPoint(self, *args)
SnappedPoint_swigregister = _fsdk.SnappedPoint_swigregister
SnappedPoint_swigregister(SnappedPoint)

class SnapPointMgr(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnapPointMgr, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SnapPointMgr, name)
    __repr__ = _swig_repr
    e_FlagEndpoint = _fsdk.SnapPointMgr_e_FlagEndpoint
    e_FlagMidpoint = _fsdk.SnapPointMgr_e_FlagMidpoint
    e_FlagIntersectionPoint = _fsdk.SnapPointMgr_e_FlagIntersectionPoint
    e_FlagNearestPoint = _fsdk.SnapPointMgr_e_FlagNearestPoint

    def __init__(self, *args):
        this = _fsdk.new_SnapPointMgr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.SnapPointMgr___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SnapPointMgr___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SnapPointMgr_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_SnapPointMgr
    __del__ = lambda self: None

    def Reload(self, *args):
        return _fsdk.SnapPointMgr_Reload(self, *args)

    def GetSnappedPointAtPos(self, *args):
        return _fsdk.SnapPointMgr_GetSnappedPointAtPos(self, *args)
SnapPointMgr_swigregister = _fsdk.SnapPointMgr_swigregister
SnapPointMgr_swigregister(SnapPointMgr)

class PSICallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSICallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSICallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.PSICallback_Release(self, *args)

    def Refresh(self, *args):
        return _fsdk.PSICallback_Refresh(self, *args)

    def __init__(self, *args):
        if self.__class__ == PSICallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_PSICallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_PSICallback(self)
        return weakref_proxy(self)
PSICallback_swigregister = _fsdk.PSICallback_swigregister
PSICallback_swigregister(PSICallback)

class PSI(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSI, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PSI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_PSI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PSI___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PSI___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.PSI_IsEmpty(self, *args)
    __swig_destroy__ = _fsdk.delete_PSI
    __del__ = lambda self: None

    def SetCallback(self, *args):
        return _fsdk.PSI_SetCallback(self, *args)

    def SetColor(self, *args):
        return _fsdk.PSI_SetColor(self, *args)

    def SetDiameter(self, *args):
        return _fsdk.PSI_SetDiameter(self, *args)

    def SetOpacity(self, *args):
        return _fsdk.PSI_SetOpacity(self, *args)

    def AddPoint(self, *args):
        return _fsdk.PSI_AddPoint(self, *args)

    def GetContentsRect(self, *args):
        return _fsdk.PSI_GetContentsRect(self, *args)

    def GetBitmap(self, *args):
        return _fsdk.PSI_GetBitmap(self, *args)

    def ConvertToPDFAnnot(self, *args):
        return _fsdk.PSI_ConvertToPDFAnnot(self, *args)
PSI_swigregister = _fsdk.PSI_swigregister
PSI_swigregister(PSI)

class SecurityHandler(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityHandler, name)
    __repr__ = _swig_repr
    e_CipherNone = _fsdk.SecurityHandler_e_CipherNone
    e_CipherRC4 = _fsdk.SecurityHandler_e_CipherRC4
    e_CipherAES = _fsdk.SecurityHandler_e_CipherAES

    def __init__(self, *args):
        this = _fsdk.new_SecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_SecurityHandler
    __del__ = lambda self: None

    def __eq__(self, *args):
        return _fsdk.SecurityHandler___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SecurityHandler___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SecurityHandler_IsEmpty(self, *args)

    def GetSecurityType(self, *args):
        return _fsdk.SecurityHandler_GetSecurityType(self, *args)
SecurityHandler_swigregister = _fsdk.SecurityHandler_swigregister
SecurityHandler_swigregister(SecurityHandler)

class StdEncryptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdEncryptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdEncryptData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_StdEncryptData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.StdEncryptData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.StdEncryptData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.StdEncryptData_Set(self, *args)
    __swig_setmethods__["is_encrypt_metadata"] = _fsdk.StdEncryptData_is_encrypt_metadata_set
    __swig_getmethods__["is_encrypt_metadata"] = _fsdk.StdEncryptData_is_encrypt_metadata_get
    if _newclass:
        is_encrypt_metadata = _swig_property(_fsdk.StdEncryptData_is_encrypt_metadata_get, _fsdk.StdEncryptData_is_encrypt_metadata_set)
    __swig_setmethods__["user_permissions"] = _fsdk.StdEncryptData_user_permissions_set
    __swig_getmethods__["user_permissions"] = _fsdk.StdEncryptData_user_permissions_get
    if _newclass:
        user_permissions = _swig_property(_fsdk.StdEncryptData_user_permissions_get, _fsdk.StdEncryptData_user_permissions_set)
    __swig_setmethods__["cipher"] = _fsdk.StdEncryptData_cipher_set
    __swig_getmethods__["cipher"] = _fsdk.StdEncryptData_cipher_get
    if _newclass:
        cipher = _swig_property(_fsdk.StdEncryptData_cipher_get, _fsdk.StdEncryptData_cipher_set)
    __swig_setmethods__["key_length"] = _fsdk.StdEncryptData_key_length_set
    __swig_getmethods__["key_length"] = _fsdk.StdEncryptData_key_length_get
    if _newclass:
        key_length = _swig_property(_fsdk.StdEncryptData_key_length_get, _fsdk.StdEncryptData_key_length_set)
    __swig_destroy__ = _fsdk.delete_StdEncryptData
    __del__ = lambda self: None
StdEncryptData_swigregister = _fsdk.StdEncryptData_swigregister
StdEncryptData_swigregister(StdEncryptData)

class StdSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StdSecurityHandler, name)
    __repr__ = _swig_repr
    e_ModifyPermission = _fsdk.StdSecurityHandler_e_ModifyPermission
    e_ModifyUserPassword = _fsdk.StdSecurityHandler_e_ModifyUserPassword
    e_ModifyOwnerPassword = _fsdk.StdSecurityHandler_e_ModifyOwnerPassword

    def __init__(self, *args):
        this = _fsdk.new_StdSecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        return _fsdk.StdSecurityHandler_Initialize(self, *args)

    def InitializeW(self, *args):
        return _fsdk.StdSecurityHandler_InitializeW(self, *args)

    def SetAES256ModifyFlags(self, *args):
        return _fsdk.StdSecurityHandler_SetAES256ModifyFlags(self, *args)
    __swig_destroy__ = _fsdk.delete_StdSecurityHandler
    __del__ = lambda self: None
StdSecurityHandler_swigregister = _fsdk.StdSecurityHandler_swigregister
StdSecurityHandler_swigregister(StdSecurityHandler)

class CertificateEncryptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertificateEncryptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CertificateEncryptData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CertificateEncryptData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.CertificateEncryptData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.CertificateEncryptData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.CertificateEncryptData_Set(self, *args)
    __swig_setmethods__["is_encrypt_metadata"] = _fsdk.CertificateEncryptData_is_encrypt_metadata_set
    __swig_getmethods__["is_encrypt_metadata"] = _fsdk.CertificateEncryptData_is_encrypt_metadata_get
    if _newclass:
        is_encrypt_metadata = _swig_property(_fsdk.CertificateEncryptData_is_encrypt_metadata_get, _fsdk.CertificateEncryptData_is_encrypt_metadata_set)
    __swig_setmethods__["cipher"] = _fsdk.CertificateEncryptData_cipher_set
    __swig_getmethods__["cipher"] = _fsdk.CertificateEncryptData_cipher_get
    if _newclass:
        cipher = _swig_property(_fsdk.CertificateEncryptData_cipher_get, _fsdk.CertificateEncryptData_cipher_set)
    __swig_setmethods__["envelopes"] = _fsdk.CertificateEncryptData_envelopes_set
    __swig_getmethods__["envelopes"] = _fsdk.CertificateEncryptData_envelopes_get
    if _newclass:
        envelopes = _swig_property(_fsdk.CertificateEncryptData_envelopes_get, _fsdk.CertificateEncryptData_envelopes_set)
    __swig_destroy__ = _fsdk.delete_CertificateEncryptData
    __del__ = lambda self: None
CertificateEncryptData_swigregister = _fsdk.CertificateEncryptData_swigregister
CertificateEncryptData_swigregister(CertificateEncryptData)

class CertificateSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertificateSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CertificateSecurityHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CertificateSecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        return _fsdk.CertificateSecurityHandler_Initialize(self, *args)
    __swig_destroy__ = _fsdk.delete_CertificateSecurityHandler
    __del__ = lambda self: None
CertificateSecurityHandler_swigregister = _fsdk.CertificateSecurityHandler_swigregister
CertificateSecurityHandler_swigregister(CertificateSecurityHandler)

class DRMEncryptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRMEncryptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DRMEncryptData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_DRMEncryptData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.DRMEncryptData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.DRMEncryptData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.DRMEncryptData_Set(self, *args)
    __swig_setmethods__["is_encrypt_metadata"] = _fsdk.DRMEncryptData_is_encrypt_metadata_set
    __swig_getmethods__["is_encrypt_metadata"] = _fsdk.DRMEncryptData_is_encrypt_metadata_get
    if _newclass:
        is_encrypt_metadata = _swig_property(_fsdk.DRMEncryptData_is_encrypt_metadata_get, _fsdk.DRMEncryptData_is_encrypt_metadata_set)
    __swig_setmethods__["sub_filter"] = _fsdk.DRMEncryptData_sub_filter_set
    __swig_getmethods__["sub_filter"] = _fsdk.DRMEncryptData_sub_filter_get
    if _newclass:
        sub_filter = _swig_property(_fsdk.DRMEncryptData_sub_filter_get, _fsdk.DRMEncryptData_sub_filter_set)
    __swig_setmethods__["cipher"] = _fsdk.DRMEncryptData_cipher_set
    __swig_getmethods__["cipher"] = _fsdk.DRMEncryptData_cipher_get
    if _newclass:
        cipher = _swig_property(_fsdk.DRMEncryptData_cipher_get, _fsdk.DRMEncryptData_cipher_set)
    __swig_setmethods__["key_length"] = _fsdk.DRMEncryptData_key_length_set
    __swig_getmethods__["key_length"] = _fsdk.DRMEncryptData_key_length_get
    if _newclass:
        key_length = _swig_property(_fsdk.DRMEncryptData_key_length_get, _fsdk.DRMEncryptData_key_length_set)
    __swig_setmethods__["is_owner"] = _fsdk.DRMEncryptData_is_owner_set
    __swig_getmethods__["is_owner"] = _fsdk.DRMEncryptData_is_owner_get
    if _newclass:
        is_owner = _swig_property(_fsdk.DRMEncryptData_is_owner_get, _fsdk.DRMEncryptData_is_owner_set)
    __swig_setmethods__["user_permissions"] = _fsdk.DRMEncryptData_user_permissions_set
    __swig_getmethods__["user_permissions"] = _fsdk.DRMEncryptData_user_permissions_get
    if _newclass:
        user_permissions = _swig_property(_fsdk.DRMEncryptData_user_permissions_get, _fsdk.DRMEncryptData_user_permissions_set)
    __swig_destroy__ = _fsdk.delete_DRMEncryptData
    __del__ = lambda self: None
DRMEncryptData_swigregister = _fsdk.DRMEncryptData_swigregister
DRMEncryptData_swigregister(DRMEncryptData)

class DRMSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRMSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRMSecurityHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_DRMSecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        return _fsdk.DRMSecurityHandler_Initialize(self, *args)

    def GetDRMValue(self, *args):
        return _fsdk.DRMSecurityHandler_GetDRMValue(self, *args)

    def SetDRMValue(self, *args):
        return _fsdk.DRMSecurityHandler_SetDRMValue(self, *args)

    def VerifyEncryptionParams(self, *args):
        return _fsdk.DRMSecurityHandler_VerifyEncryptionParams(self, *args)
    __swig_destroy__ = _fsdk.delete_DRMSecurityHandler
    __del__ = lambda self: None
DRMSecurityHandler_swigregister = _fsdk.DRMSecurityHandler_swigregister
DRMSecurityHandler_swigregister(DRMSecurityHandler)

class CustomEncryptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomEncryptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomEncryptData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CustomEncryptData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.CustomEncryptData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.CustomEncryptData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.CustomEncryptData_Set(self, *args)
    __swig_setmethods__["is_encrypt_metadata"] = _fsdk.CustomEncryptData_is_encrypt_metadata_set
    __swig_getmethods__["is_encrypt_metadata"] = _fsdk.CustomEncryptData_is_encrypt_metadata_get
    if _newclass:
        is_encrypt_metadata = _swig_property(_fsdk.CustomEncryptData_is_encrypt_metadata_get, _fsdk.CustomEncryptData_is_encrypt_metadata_set)
    __swig_setmethods__["filter"] = _fsdk.CustomEncryptData_filter_set
    __swig_getmethods__["filter"] = _fsdk.CustomEncryptData_filter_get
    if _newclass:
        filter = _swig_property(_fsdk.CustomEncryptData_filter_get, _fsdk.CustomEncryptData_filter_set)
    __swig_setmethods__["sub_filter"] = _fsdk.CustomEncryptData_sub_filter_set
    __swig_getmethods__["sub_filter"] = _fsdk.CustomEncryptData_sub_filter_get
    if _newclass:
        sub_filter = _swig_property(_fsdk.CustomEncryptData_sub_filter_get, _fsdk.CustomEncryptData_sub_filter_set)
    __swig_destroy__ = _fsdk.delete_CustomEncryptData
    __del__ = lambda self: None
CustomEncryptData_swigregister = _fsdk.CustomEncryptData_swigregister
CustomEncryptData_swigregister(CustomEncryptData)

class CustomSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomSecurityHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_CustomSecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        return _fsdk.CustomSecurityHandler_Initialize(self, *args)
    __swig_destroy__ = _fsdk.delete_CustomSecurityHandler
    __del__ = lambda self: None
CustomSecurityHandler_swigregister = _fsdk.CustomSecurityHandler_swigregister
CustomSecurityHandler_swigregister(CustomSecurityHandler)

class RMSEncryptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMSEncryptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMSEncryptData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RMSEncryptData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.RMSEncryptData___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.RMSEncryptData___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.RMSEncryptData_Set(self, *args)
    __swig_setmethods__["is_encrypt_metadata"] = _fsdk.RMSEncryptData_is_encrypt_metadata_set
    __swig_getmethods__["is_encrypt_metadata"] = _fsdk.RMSEncryptData_is_encrypt_metadata_get
    if _newclass:
        is_encrypt_metadata = _swig_property(_fsdk.RMSEncryptData_is_encrypt_metadata_get, _fsdk.RMSEncryptData_is_encrypt_metadata_set)
    __swig_setmethods__["publish_license"] = _fsdk.RMSEncryptData_publish_license_set
    __swig_getmethods__["publish_license"] = _fsdk.RMSEncryptData_publish_license_get
    if _newclass:
        publish_license = _swig_property(_fsdk.RMSEncryptData_publish_license_get, _fsdk.RMSEncryptData_publish_license_set)
    __swig_setmethods__["server_eul_list"] = _fsdk.RMSEncryptData_server_eul_list_set
    __swig_getmethods__["server_eul_list"] = _fsdk.RMSEncryptData_server_eul_list_get
    if _newclass:
        server_eul_list = _swig_property(_fsdk.RMSEncryptData_server_eul_list_get, _fsdk.RMSEncryptData_server_eul_list_set)
    __swig_setmethods__["irm_version"] = _fsdk.RMSEncryptData_irm_version_set
    __swig_getmethods__["irm_version"] = _fsdk.RMSEncryptData_irm_version_get
    if _newclass:
        irm_version = _swig_property(_fsdk.RMSEncryptData_irm_version_get, _fsdk.RMSEncryptData_irm_version_set)
    __swig_destroy__ = _fsdk.delete_RMSEncryptData
    __del__ = lambda self: None
RMSEncryptData_swigregister = _fsdk.RMSEncryptData_swigregister
RMSEncryptData_swigregister(RMSEncryptData)

class RMSSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMSSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RMSSecurityHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_RMSSecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        return _fsdk.RMSSecurityHandler_Initialize(self, *args)
    __swig_destroy__ = _fsdk.delete_RMSSecurityHandler
    __del__ = lambda self: None
RMSSecurityHandler_swigregister = _fsdk.RMSSecurityHandler_swigregister
RMSSecurityHandler_swigregister(RMSSecurityHandler)

class SecurityCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityCallback, name)
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.SecurityCallback_Release(self, *args)

    def GetSecurityType(self, *args):
        return _fsdk.SecurityCallback_GetSecurityType(self, *args)

    def __init__(self, *args):
        if self.__class__ == SecurityCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_SecurityCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_SecurityCallback(self)
        return weakref_proxy(self)
SecurityCallback_swigregister = _fsdk.SecurityCallback_swigregister
SecurityCallback_swigregister(SecurityCallback)

class CertificateSecurityCallback(SecurityCallback):
    __swig_setmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CertificateSecurityCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CertificateSecurityCallback, name)
    __repr__ = _swig_repr

    def GetSecurityType(self, *args):
        return _fsdk.CertificateSecurityCallback_GetSecurityType(self, *args)

    def GetDecryptionKey(self, *args):
        return _fsdk.CertificateSecurityCallback_GetDecryptionKey(self, *args)

    def __init__(self, *args):
        if self.__class__ == CertificateSecurityCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_CertificateSecurityCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_CertificateSecurityCallback(self)
        return weakref_proxy(self)
CertificateSecurityCallback_swigregister = _fsdk.CertificateSecurityCallback_swigregister
CertificateSecurityCallback_swigregister(CertificateSecurityCallback)

class DRMSecurityCallback(SecurityCallback):
    __swig_setmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRMSecurityCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRMSecurityCallback, name)
    __repr__ = _swig_repr

    def GetSecurityType(self, *args):
        return _fsdk.DRMSecurityCallback_GetSecurityType(self, *args)

    def IsOwner(self, *args):
        return _fsdk.DRMSecurityCallback_IsOwner(self, *args)

    def GetUserPermissions(self, *args):
        return _fsdk.DRMSecurityCallback_GetUserPermissions(self, *args)

    def GetCipherType(self, *args):
        return _fsdk.DRMSecurityCallback_GetCipherType(self, *args)

    def GetKeyLength(self, *args):
        return _fsdk.DRMSecurityCallback_GetKeyLength(self, *args)

    def GetFileID(self, *args):
        return _fsdk.DRMSecurityCallback_GetFileID(self, *args)

    def GetInitialKey(self, *args):
        return _fsdk.DRMSecurityCallback_GetInitialKey(self, *args)

    def __init__(self, *args):
        if self.__class__ == DRMSecurityCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_DRMSecurityCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_DRMSecurityCallback(self)
        return weakref_proxy(self)
DRMSecurityCallback_swigregister = _fsdk.DRMSecurityCallback_swigregister
DRMSecurityCallback_swigregister(DRMSecurityCallback)

class CustomSecurityCallback(SecurityCallback):
    __swig_setmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomSecurityCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomSecurityCallback, name)
    __repr__ = _swig_repr

    def GetSecurityType(self, *args):
        return _fsdk.CustomSecurityCallback_GetSecurityType(self, *args)

    def CreateContext(self, *args):
        return _fsdk.CustomSecurityCallback_CreateContext(self, *args)

    def ReleaseContext(self, *args):
        return _fsdk.CustomSecurityCallback_ReleaseContext(self, *args)

    def GetUserPermissions(self, *args):
        return _fsdk.CustomSecurityCallback_GetUserPermissions(self, *args)

    def IsOwner(self, *args):
        return _fsdk.CustomSecurityCallback_IsOwner(self, *args)

    def GetCipher(self, *args):
        return _fsdk.CustomSecurityCallback_GetCipher(self, *args)

    def GetEncryptKey(self, *args):
        return _fsdk.CustomSecurityCallback_GetEncryptKey(self, *args)

    def GetDecryptedSize(self, *args):
        return _fsdk.CustomSecurityCallback_GetDecryptedSize(self, *args)

    def StartDecryptor(self, *args):
        return _fsdk.CustomSecurityCallback_StartDecryptor(self, *args)

    def DecryptData(self, *args):
        return _fsdk.CustomSecurityCallback_DecryptData(self, *args)

    def FinishDecryptor(self, *args):
        return _fsdk.CustomSecurityCallback_FinishDecryptor(self, *args)

    def GetEncryptedSize(self, *args):
        return _fsdk.CustomSecurityCallback_GetEncryptedSize(self, *args)

    def EncryptData(self, *args):
        return _fsdk.CustomSecurityCallback_EncryptData(self, *args)

    def UseStandardCryptoMethod(self, *args):
        return _fsdk.CustomSecurityCallback_UseStandardCryptoMethod(self, *args)

    def __init__(self, *args):
        if self.__class__ == CustomSecurityCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_CustomSecurityCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_CustomSecurityCallback(self)
        return weakref_proxy(self)
CustomSecurityCallback_swigregister = _fsdk.CustomSecurityCallback_swigregister
CustomSecurityCallback_swigregister(CustomSecurityCallback)

class RMSSecurityCallback(CustomSecurityCallback):
    __swig_setmethods__ = {}
    for _s in [CustomSecurityCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMSSecurityCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomSecurityCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RMSSecurityCallback, name)
    __repr__ = _swig_repr

    def GetSecurityType(self, *args):
        return _fsdk.RMSSecurityCallback_GetSecurityType(self, *args)

    def __init__(self, *args):
        if self.__class__ == RMSSecurityCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_RMSSecurityCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_RMSSecurityCallback(self)
        return weakref_proxy(self)
RMSSecurityCallback_swigregister = _fsdk.RMSSecurityCallback_swigregister
RMSSecurityCallback_swigregister(RMSSecurityCallback)

class SignatureArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SignatureArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SignatureArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.SignatureArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.SignatureArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.SignatureArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.SignatureArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.SignatureArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.SignatureArray_RemoveAll(self, *args)
SignatureArray_swigregister = _fsdk.SignatureArray_swigregister
SignatureArray_swigregister(SignatureArray)

class Signature(Field):
    __swig_setmethods__ = {}
    for _s in [Field]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Signature, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Signature, name)
    __repr__ = _swig_repr
    e_StateUnknown = _fsdk.Signature_e_StateUnknown
    e_StateNoSignData = _fsdk.Signature_e_StateNoSignData
    e_StateUnsigned = _fsdk.Signature_e_StateUnsigned
    e_StateSigned = _fsdk.Signature_e_StateSigned
    e_StateVerifyValid = _fsdk.Signature_e_StateVerifyValid
    e_StateVerifyInvalid = _fsdk.Signature_e_StateVerifyInvalid
    e_StateVerifyErrorData = _fsdk.Signature_e_StateVerifyErrorData
    e_StateVerifyNoSupportWay = _fsdk.Signature_e_StateVerifyNoSupportWay
    e_StateVerifyErrorByteRange = _fsdk.Signature_e_StateVerifyErrorByteRange
    e_StateVerifyChange = _fsdk.Signature_e_StateVerifyChange
    e_StateVerifyIncredible = _fsdk.Signature_e_StateVerifyIncredible
    e_StateVerifyNoChange = _fsdk.Signature_e_StateVerifyNoChange
    e_StateVerifyIssueValid = _fsdk.Signature_e_StateVerifyIssueValid
    e_StateVerifyIssueUnknown = _fsdk.Signature_e_StateVerifyIssueUnknown
    e_StateVerifyIssueRevoke = _fsdk.Signature_e_StateVerifyIssueRevoke
    e_StateVerifyIssueExpire = _fsdk.Signature_e_StateVerifyIssueExpire
    e_StateVerifyIssueUncheck = _fsdk.Signature_e_StateVerifyIssueUncheck
    e_StateVerifyIssueCurrent = _fsdk.Signature_e_StateVerifyIssueCurrent
    e_StateVerifyTimestampNone = _fsdk.Signature_e_StateVerifyTimestampNone
    e_StateVerifyTimestampDoc = _fsdk.Signature_e_StateVerifyTimestampDoc
    e_StateVerifyTimestampValid = _fsdk.Signature_e_StateVerifyTimestampValid
    e_StateVerifyTimestampInvalid = _fsdk.Signature_e_StateVerifyTimestampInvalid
    e_StateVerifyTimestampExpire = _fsdk.Signature_e_StateVerifyTimestampExpire
    e_StateVerifyTimestampIssueUnknown = _fsdk.Signature_e_StateVerifyTimestampIssueUnknown
    e_StateVerifyTimestampIssueValid = _fsdk.Signature_e_StateVerifyTimestampIssueValid
    e_StateVerifyTimestampTimeBefore = _fsdk.Signature_e_StateVerifyTimestampTimeBefore
    e_StateCertCannotGetVRI = _fsdk.Signature_e_StateCertCannotGetVRI
    e_StateVerifyChangeLegal = _fsdk.Signature_e_StateVerifyChangeLegal
    e_StateVerifyChangeIllegal = _fsdk.Signature_e_StateVerifyChangeIllegal
    e_APFlagFoxitFlag = _fsdk.Signature_e_APFlagFoxitFlag
    e_APFlagLabel = _fsdk.Signature_e_APFlagLabel
    e_APFlagReason = _fsdk.Signature_e_APFlagReason
    e_APFlagSigningTime = _fsdk.Signature_e_APFlagSigningTime
    e_APFlagDN = _fsdk.Signature_e_APFlagDN
    e_APFlagLocation = _fsdk.Signature_e_APFlagLocation
    e_APFlagSigner = _fsdk.Signature_e_APFlagSigner
    e_APFlagBitmap = _fsdk.Signature_e_APFlagBitmap
    e_APFlagText = _fsdk.Signature_e_APFlagText
    e_APFlagFoxitEditorFlag = _fsdk.Signature_e_APFlagFoxitEditorFlag
    e_APFlagProducer = _fsdk.Signature_e_APFlagProducer
    e_KeyNameSigner = _fsdk.Signature_e_KeyNameSigner
    e_KeyNameLocation = _fsdk.Signature_e_KeyNameLocation
    e_KeyNameReason = _fsdk.Signature_e_KeyNameReason
    e_KeyNameContactInfo = _fsdk.Signature_e_KeyNameContactInfo
    e_KeyNameDN = _fsdk.Signature_e_KeyNameDN
    e_KeyNameText = _fsdk.Signature_e_KeyNameText
    e_KeyNameProducer = _fsdk.Signature_e_KeyNameProducer
    e_DigestSHA1 = _fsdk.Signature_e_DigestSHA1
    e_DigestSHA256 = _fsdk.Signature_e_DigestSHA256
    e_DigestSHA384 = _fsdk.Signature_e_DigestSHA384
    e_DigestSHA512 = _fsdk.Signature_e_DigestSHA512
    e_SignatureTypeOrdinary = _fsdk.Signature_e_SignatureTypeOrdinary
    e_SignatureTypeTimeStamp = _fsdk.Signature_e_SignatureTypeTimeStamp
    e_SignatureTypePagingSeal = _fsdk.Signature_e_SignatureTypePagingSeal
    e_PAdESLevelNotPAdES = _fsdk.Signature_e_PAdESLevelNotPAdES
    e_PAdESLevelNone = _fsdk.Signature_e_PAdESLevelNone
    e_PAdESLevelBB = _fsdk.Signature_e_PAdESLevelBB
    e_PAdESLevelBT = _fsdk.Signature_e_PAdESLevelBT
    e_PAdESLevelBLT = _fsdk.Signature_e_PAdESLevelBLT
    e_PAdESLevelBLTA = _fsdk.Signature_e_PAdESLevelBLTA
    e_DocPermUnrestricted = _fsdk.Signature_e_DocPermUnrestricted
    e_DocPermNoChangesAllowed = _fsdk.Signature_e_DocPermNoChangesAllowed
    e_DocPermFillingFormAndSigning = _fsdk.Signature_e_DocPermFillingFormAndSigning
    e_DocPermFillingFormSigningAndAnnotating = _fsdk.Signature_e_DocPermFillingFormSigningAndAnnotating
    e_FieldMDPActionNone = _fsdk.Signature_e_FieldMDPActionNone
    e_FieldMDPActionAll = _fsdk.Signature_e_FieldMDPActionAll
    e_FieldMDPActionInclude = _fsdk.Signature_e_FieldMDPActionInclude
    e_FieldMDPActionExclude = _fsdk.Signature_e_FieldMDPActionExclude
    e_LabelNameSigner = _fsdk.Signature_e_LabelNameSigner
    e_LabelNameLocation = _fsdk.Signature_e_LabelNameLocation
    e_LabelNameReason = _fsdk.Signature_e_LabelNameReason
    e_LabelNameSignTime = _fsdk.Signature_e_LabelNameSignTime
    e_LabelNameDN = _fsdk.Signature_e_LabelNameDN
    e_LabelNameProducer = _fsdk.Signature_e_LabelNameProducer

    def __init__(self, *args):
        this = _fsdk.new_Signature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_Signature
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Signature_IsEmpty(self, *args)

    def IsSigned(self, *args):
        return _fsdk.Signature_IsSigned(self, *args)

    def SetDocPermission(self, *args):
        return _fsdk.Signature_SetDocPermission(self, *args)

    def GetDocPermission(self, *args):
        return _fsdk.Signature_GetDocPermission(self, *args)

    def SetFieldMDPActionFields(self, *args):
        return _fsdk.Signature_SetFieldMDPActionFields(self, *args)

    def GetFieldMDPAction(self, *args):
        return _fsdk.Signature_GetFieldMDPAction(self, *args)

    def GetFieldMDPActionFields(self, *args):
        return _fsdk.Signature_GetFieldMDPActionFields(self, *args)

    def EnableIncrementalSaveForFirstSigning(self, *args):
        return _fsdk.Signature_EnableIncrementalSaveForFirstSigning(self, *args)

    def StartSign(self, *args):
        return _fsdk.Signature_StartSign(self, *args)

    def StartVerify(self, *args):
        return _fsdk.Signature_StartVerify(self, *args)

    def GetCertificateInfo(self, *args):
        return _fsdk.Signature_GetCertificateInfo(self, *args)

    def GetByteRangeArray(self, *args):
        return _fsdk.Signature_GetByteRangeArray(self, *args)

    def GetState(self, *args):
        return _fsdk.Signature_GetState(self, *args)

    def ClearSignedData(self, *args):
        return _fsdk.Signature_ClearSignedData(self, *args)

    def GetDocument(self, *args):
        return _fsdk.Signature_GetDocument(self, *args)

    def GetSignedVersionDocument(self, *args):
        return _fsdk.Signature_GetSignedVersionDocument(self, *args)

    def GetAppearanceFlags(self, *args):
        return _fsdk.Signature_GetAppearanceFlags(self, *args)

    def SetAppearanceFlags(self, *args):
        return _fsdk.Signature_SetAppearanceFlags(self, *args)

    def SetAppearanceContent(self, *args):
        return _fsdk.Signature_SetAppearanceContent(self, *args)

    def GetSignTime(self, *args):
        return _fsdk.Signature_GetSignTime(self, *args)

    def SetSignTime(self, *args):
        return _fsdk.Signature_SetSignTime(self, *args)

    def GetFilter(self, *args):
        return _fsdk.Signature_GetFilter(self, *args)

    def SetFilter(self, *args):
        return _fsdk.Signature_SetFilter(self, *args)

    def GetSubFilter(self, *args):
        return _fsdk.Signature_GetSubFilter(self, *args)

    def SetSubFilter(self, *args):
        return _fsdk.Signature_SetSubFilter(self, *args)

    def GetKeyValue(self, *args):
        return _fsdk.Signature_GetKeyValue(self, *args)

    def SetKeyValue(self, *args):
        return _fsdk.Signature_SetKeyValue(self, *args)

    def SetKeyLabel(self, *args):
        return _fsdk.Signature_SetKeyLabel(self, *args)

    def GetKeyLabel(self, *args):
        return _fsdk.Signature_GetKeyLabel(self, *args)

    def GetBitmap(self, *args):
        return _fsdk.Signature_GetBitmap(self, *args)

    def SetBitmap(self, *args):
        return _fsdk.Signature_SetBitmap(self, *args)

    def SetImage(self, *args):
        return _fsdk.Signature_SetImage(self, *args)

    def GetSignatureDict(self, *args):
        return _fsdk.Signature_GetSignatureDict(self, *args)

    def SetDefaultContentsLength(self, *args):
        return _fsdk.Signature_SetDefaultContentsLength(self, *args)

    def GetCertCount(self, *args):
        return _fsdk.Signature_GetCertCount(self, *args)

    def GetCert(self, *args):
        return _fsdk.Signature_GetCert(self, *args)

    def SetCertChain(self, *args):
        return _fsdk.Signature_SetCertChain(self, *args)

    def GetSignatureType(self, *args):
        return _fsdk.Signature_GetSignatureType(self, *args)

    def IsTimeStamp(self, *args):
        return _fsdk.Signature_IsTimeStamp(self, *args)

    def GetPAdESLevel(self, *args):
        return _fsdk.Signature_GetPAdESLevel(self, *args)

    def SetCustomObject(self, *args):
        return _fsdk.Signature_SetCustomObject(self, *args)

    def GetPagingSealGroupElements(self, *args):
        return _fsdk.Signature_GetPagingSealGroupElements(self, *args)

    def GenerateAppearance(self, *args):
        return _fsdk.Signature_GenerateAppearance(self, *args)

    def GetPagingSealSignature(self, *args):
        return _fsdk.Signature_GetPagingSealSignature(self, *args)

    def EnableEmbedFont(self, *args):
        return _fsdk.Signature_EnableEmbedFont(self, *args)
Signature_swigregister = _fsdk.Signature_swigregister
Signature_swigregister(Signature)

class SignatureCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureCallback, name)
    __repr__ = _swig_repr
    e_CertValid = _fsdk.SignatureCallback_e_CertValid
    e_CertExpired = _fsdk.SignatureCallback_e_CertExpired
    e_CertUnsupportType = _fsdk.SignatureCallback_e_CertUnsupportType
    e_CertDataError = _fsdk.SignatureCallback_e_CertDataError
    e_CertInvalidPassword = _fsdk.SignatureCallback_e_CertInvalidPassword
    e_CertInvalidPath = _fsdk.SignatureCallback_e_CertInvalidPath
    e_CertNotSet = _fsdk.SignatureCallback_e_CertNotSet
    e_CertCannotGetPrivateKey = _fsdk.SignatureCallback_e_CertCannotGetPrivateKey

    def Release(self, *args):
        return _fsdk.SignatureCallback_Release(self, *args)

    def StartCalcDigest(self, *args):
        return _fsdk.SignatureCallback_StartCalcDigest(self, *args)

    def ContinueCalcDigest(self, *args):
        return _fsdk.SignatureCallback_ContinueCalcDigest(self, *args)

    def GetDigest(self, *args):
        return _fsdk.SignatureCallback_GetDigest(self, *args)

    def Sign(self, *args):
        return _fsdk.SignatureCallback_Sign(self, *args)

    def VerifySigState(self, *args):
        return _fsdk.SignatureCallback_VerifySigState(self, *args)

    def IsNeedPadData(self, *args):
        return _fsdk.SignatureCallback_IsNeedPadData(self, *args)

    def CheckCertificateValidity(self, *args):
        return _fsdk.SignatureCallback_CheckCertificateValidity(self, *args)

    def __init__(self, *args):
        if self.__class__ == SignatureCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_SignatureCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_SignatureCallback(self)
        return weakref_proxy(self)
SignatureCallback_swigregister = _fsdk.SignatureCallback_swigregister
SignatureCallback_swigregister(SignatureCallback)

class TimeStampServerMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampServerMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampServerMgr, name)
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_fsdk.TimeStampServerMgr_Initialize)
    else:
        Initialize = _fsdk.TimeStampServerMgr_Initialize
    if _newclass:
        Release = staticmethod(_fsdk.TimeStampServerMgr_Release)
    else:
        Release = _fsdk.TimeStampServerMgr_Release
    if _newclass:
        GetServerCount = staticmethod(_fsdk.TimeStampServerMgr_GetServerCount)
    else:
        GetServerCount = _fsdk.TimeStampServerMgr_GetServerCount
    if _newclass:
        GetServer = staticmethod(_fsdk.TimeStampServerMgr_GetServer)
    else:
        GetServer = _fsdk.TimeStampServerMgr_GetServer
    if _newclass:
        GetServerIndex = staticmethod(_fsdk.TimeStampServerMgr_GetServerIndex)
    else:
        GetServerIndex = _fsdk.TimeStampServerMgr_GetServerIndex
    if _newclass:
        GetDefaultServer = staticmethod(_fsdk.TimeStampServerMgr_GetDefaultServer)
    else:
        GetDefaultServer = _fsdk.TimeStampServerMgr_GetDefaultServer
    if _newclass:
        SetDefaultServer = staticmethod(_fsdk.TimeStampServerMgr_SetDefaultServer)
    else:
        SetDefaultServer = _fsdk.TimeStampServerMgr_SetDefaultServer
    if _newclass:
        AddServer = staticmethod(_fsdk.TimeStampServerMgr_AddServer)
    else:
        AddServer = _fsdk.TimeStampServerMgr_AddServer
    if _newclass:
        RemoveServer = staticmethod(_fsdk.TimeStampServerMgr_RemoveServer)
    else:
        RemoveServer = _fsdk.TimeStampServerMgr_RemoveServer

    def __init__(self, *args):
        this = _fsdk.new_TimeStampServerMgr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_TimeStampServerMgr
    __del__ = lambda self: None
TimeStampServerMgr_swigregister = _fsdk.TimeStampServerMgr_swigregister
TimeStampServerMgr_swigregister(TimeStampServerMgr)

def TimeStampServerMgr_Initialize(*args):
    return _fsdk.TimeStampServerMgr_Initialize(*args)
TimeStampServerMgr_Initialize = _fsdk.TimeStampServerMgr_Initialize

def TimeStampServerMgr_Release(*args):
    return _fsdk.TimeStampServerMgr_Release(*args)
TimeStampServerMgr_Release = _fsdk.TimeStampServerMgr_Release

def TimeStampServerMgr_GetServerCount(*args):
    return _fsdk.TimeStampServerMgr_GetServerCount(*args)
TimeStampServerMgr_GetServerCount = _fsdk.TimeStampServerMgr_GetServerCount

def TimeStampServerMgr_GetServer(*args):
    return _fsdk.TimeStampServerMgr_GetServer(*args)
TimeStampServerMgr_GetServer = _fsdk.TimeStampServerMgr_GetServer

def TimeStampServerMgr_GetServerIndex(*args):
    return _fsdk.TimeStampServerMgr_GetServerIndex(*args)
TimeStampServerMgr_GetServerIndex = _fsdk.TimeStampServerMgr_GetServerIndex

def TimeStampServerMgr_GetDefaultServer(*args):
    return _fsdk.TimeStampServerMgr_GetDefaultServer(*args)
TimeStampServerMgr_GetDefaultServer = _fsdk.TimeStampServerMgr_GetDefaultServer

def TimeStampServerMgr_SetDefaultServer(*args):
    return _fsdk.TimeStampServerMgr_SetDefaultServer(*args)
TimeStampServerMgr_SetDefaultServer = _fsdk.TimeStampServerMgr_SetDefaultServer

def TimeStampServerMgr_AddServer(*args):
    return _fsdk.TimeStampServerMgr_AddServer(*args)
TimeStampServerMgr_AddServer = _fsdk.TimeStampServerMgr_AddServer

def TimeStampServerMgr_RemoveServer(*args):
    return _fsdk.TimeStampServerMgr_RemoveServer(*args)
TimeStampServerMgr_RemoveServer = _fsdk.TimeStampServerMgr_RemoveServer

class TimeStampServer(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampServer, name)
    __repr__ = _swig_repr
    e_SendResultSuccess = _fsdk.TimeStampServer_e_SendResultSuccess
    e_SendResultFailToCreateSocket = _fsdk.TimeStampServer_e_SendResultFailToCreateSocket
    e_SendResultFailToConnect = _fsdk.TimeStampServer_e_SendResultFailToConnect
    e_SendResultFailToSendData = _fsdk.TimeStampServer_e_SendResultFailToSendData
    e_SendResultFailToReceiveData = _fsdk.TimeStampServer_e_SendResultFailToReceiveData
    e_SendResultFailToRequest = _fsdk.TimeStampServer_e_SendResultFailToRequest
    e_SendResultFailToGetData = _fsdk.TimeStampServer_e_SendResultFailToGetData
    e_SendResultOutOfMemory = _fsdk.TimeStampServer_e_SendResultOutOfMemory

    def __init__(self, *args):
        this = _fsdk.new_TimeStampServer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.TimeStampServer___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.TimeStampServer___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_TimeStampServer
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.TimeStampServer_IsEmpty(self, *args)

    def SendTimeStampRequest(self, *args):
        return _fsdk.TimeStampServer_SendTimeStampRequest(self, *args)

    def GetTimeStampMessage(self, *args):
        return _fsdk.TimeStampServer_GetTimeStampMessage(self, *args)
TimeStampServer_swigregister = _fsdk.TimeStampServer_swigregister
TimeStampServer_swigregister(TimeStampServer)

class TimeStampCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Release(self, *args):
        return _fsdk.TimeStampCallback_Release(self, *args)

    def SendTimeStampRequest(self, *args):
        return _fsdk.TimeStampCallback_SendTimeStampRequest(self, *args)

    def GetTimeStampMessage(self, *args):
        return _fsdk.TimeStampCallback_GetTimeStampMessage(self, *args)
TimeStampCallback_swigregister = _fsdk.TimeStampCallback_swigregister
TimeStampCallback_swigregister(TimeStampCallback)

class PagingSealConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagingSealConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PagingSealConfig, name)
    __repr__ = _swig_repr
    e_PagingSealPositionLeft = _fsdk.PagingSealConfig_e_PagingSealPositionLeft
    e_PagingSealPositionRight = _fsdk.PagingSealConfig_e_PagingSealPositionRight
    e_PagingSealPositionTop = _fsdk.PagingSealConfig_e_PagingSealPositionTop
    e_PagingSealPositionBottom = _fsdk.PagingSealConfig_e_PagingSealPositionBottom
    e_PagingSealStyleMultipleSignatures = _fsdk.PagingSealConfig_e_PagingSealStyleMultipleSignatures
    e_PagingSealStyleOneSignature = _fsdk.PagingSealConfig_e_PagingSealStyleOneSignature

    def __init__(self, *args):
        this = _fsdk.new_PagingSealConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.PagingSealConfig___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.PagingSealConfig___ne__(self, *args)

    def Set(self, *args):
        return _fsdk.PagingSealConfig_Set(self, *args)
    __swig_setmethods__["paging_seal_position"] = _fsdk.PagingSealConfig_paging_seal_position_set
    __swig_getmethods__["paging_seal_position"] = _fsdk.PagingSealConfig_paging_seal_position_get
    if _newclass:
        paging_seal_position = _swig_property(_fsdk.PagingSealConfig_paging_seal_position_get, _fsdk.PagingSealConfig_paging_seal_position_set)
    __swig_setmethods__["offset"] = _fsdk.PagingSealConfig_offset_set
    __swig_getmethods__["offset"] = _fsdk.PagingSealConfig_offset_get
    if _newclass:
        offset = _swig_property(_fsdk.PagingSealConfig_offset_get, _fsdk.PagingSealConfig_offset_set)
    __swig_setmethods__["first_page_percent"] = _fsdk.PagingSealConfig_first_page_percent_set
    __swig_getmethods__["first_page_percent"] = _fsdk.PagingSealConfig_first_page_percent_get
    if _newclass:
        first_page_percent = _swig_property(_fsdk.PagingSealConfig_first_page_percent_get, _fsdk.PagingSealConfig_first_page_percent_set)
    __swig_setmethods__["is_on_perforation"] = _fsdk.PagingSealConfig_is_on_perforation_set
    __swig_getmethods__["is_on_perforation"] = _fsdk.PagingSealConfig_is_on_perforation_get
    if _newclass:
        is_on_perforation = _swig_property(_fsdk.PagingSealConfig_is_on_perforation_get, _fsdk.PagingSealConfig_is_on_perforation_set)
    __swig_setmethods__["paging_seal_style"] = _fsdk.PagingSealConfig_paging_seal_style_set
    __swig_getmethods__["paging_seal_style"] = _fsdk.PagingSealConfig_paging_seal_style_get
    if _newclass:
        paging_seal_style = _swig_property(_fsdk.PagingSealConfig_paging_seal_style_get, _fsdk.PagingSealConfig_paging_seal_style_set)
    __swig_setmethods__["is_display_multiple_seal"] = _fsdk.PagingSealConfig_is_display_multiple_seal_set
    __swig_getmethods__["is_display_multiple_seal"] = _fsdk.PagingSealConfig_is_display_multiple_seal_get
    if _newclass:
        is_display_multiple_seal = _swig_property(_fsdk.PagingSealConfig_is_display_multiple_seal_get, _fsdk.PagingSealConfig_is_display_multiple_seal_set)
    __swig_setmethods__["page_count_for_each_seal"] = _fsdk.PagingSealConfig_page_count_for_each_seal_set
    __swig_getmethods__["page_count_for_each_seal"] = _fsdk.PagingSealConfig_page_count_for_each_seal_get
    if _newclass:
        page_count_for_each_seal = _swig_property(_fsdk.PagingSealConfig_page_count_for_each_seal_get, _fsdk.PagingSealConfig_page_count_for_each_seal_set)
    __swig_destroy__ = _fsdk.delete_PagingSealConfig
    __del__ = lambda self: None
PagingSealConfig_swigregister = _fsdk.PagingSealConfig_swigregister
PagingSealConfig_swigregister(PagingSealConfig)

class PagingSealSignature(Signature):
    __swig_setmethods__ = {}
    for _s in [Signature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagingSealSignature, name, value)
    __swig_getmethods__ = {}
    for _s in [Signature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PagingSealSignature, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    e_PagingSealAPStateUnknown = _fsdk.PagingSealSignature_e_PagingSealAPStateUnknown
    e_PagingSealAPStateUnsigned = _fsdk.PagingSealSignature_e_PagingSealAPStateUnsigned
    e_PagingSealAPStateSigned = _fsdk.PagingSealSignature_e_PagingSealAPStateSigned
    e_PagingSealAPStateValid = _fsdk.PagingSealSignature_e_PagingSealAPStateValid
    e_PagingSealAPStateInvalid = _fsdk.PagingSealSignature_e_PagingSealAPStateInvalid
    __swig_destroy__ = _fsdk.delete_PagingSealSignature
    __del__ = lambda self: None

    def SetPagingSealConfig(self, *args):
        return _fsdk.PagingSealSignature_SetPagingSealConfig(self, *args)

    def SetAPStateBitmap(self, *args):
        return _fsdk.PagingSealSignature_SetAPStateBitmap(self, *args)

    def GenerateAppearance(self, *args):
        return _fsdk.PagingSealSignature_GenerateAppearance(self, *args)
PagingSealSignature_swigregister = _fsdk.PagingSealSignature_swigregister
PagingSealSignature_swigregister(PagingSealSignature)

class Watermark(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Watermark, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Watermark, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_Watermark(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.Watermark___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.Watermark___ne__(self, *args)
    __swig_destroy__ = _fsdk.delete_Watermark
    __del__ = lambda self: None

    def IsEmpty(self, *args):
        return _fsdk.Watermark_IsEmpty(self, *args)

    def GetWidth(self, *args):
        return _fsdk.Watermark_GetWidth(self, *args)

    def GetHeight(self, *args):
        return _fsdk.Watermark_GetHeight(self, *args)

    def InsertToPage(self, *args):
        return _fsdk.Watermark_InsertToPage(self, *args)
Watermark_swigregister = _fsdk.Watermark_swigregister
Watermark_swigregister(Watermark)

class WatermarkSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WatermarkSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WatermarkSettings, name)
    __repr__ = _swig_repr
    e_FlagASPageContents = _fsdk.WatermarkSettings_e_FlagASPageContents
    e_FlagASAnnot = _fsdk.WatermarkSettings_e_FlagASAnnot
    e_FlagOnTop = _fsdk.WatermarkSettings_e_FlagOnTop
    e_FlagNoPrint = _fsdk.WatermarkSettings_e_FlagNoPrint
    e_FlagInvisible = _fsdk.WatermarkSettings_e_FlagInvisible
    e_FlagShareImageStream = _fsdk.WatermarkSettings_e_FlagShareImageStream
    e_FlagShareTextStream = _fsdk.WatermarkSettings_e_FlagShareTextStream
    e_FlagSharePageStream = _fsdk.WatermarkSettings_e_FlagSharePageStream

    def __init__(self, *args):
        this = _fsdk.new_WatermarkSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.WatermarkSettings_Set(self, *args)
    __swig_setmethods__["position"] = _fsdk.WatermarkSettings_position_set
    __swig_getmethods__["position"] = _fsdk.WatermarkSettings_position_get
    if _newclass:
        position = _swig_property(_fsdk.WatermarkSettings_position_get, _fsdk.WatermarkSettings_position_set)
    __swig_setmethods__["offset_x"] = _fsdk.WatermarkSettings_offset_x_set
    __swig_getmethods__["offset_x"] = _fsdk.WatermarkSettings_offset_x_get
    if _newclass:
        offset_x = _swig_property(_fsdk.WatermarkSettings_offset_x_get, _fsdk.WatermarkSettings_offset_x_set)
    __swig_setmethods__["offset_y"] = _fsdk.WatermarkSettings_offset_y_set
    __swig_getmethods__["offset_y"] = _fsdk.WatermarkSettings_offset_y_get
    if _newclass:
        offset_y = _swig_property(_fsdk.WatermarkSettings_offset_y_get, _fsdk.WatermarkSettings_offset_y_set)
    __swig_setmethods__["flags"] = _fsdk.WatermarkSettings_flags_set
    __swig_getmethods__["flags"] = _fsdk.WatermarkSettings_flags_get
    if _newclass:
        flags = _swig_property(_fsdk.WatermarkSettings_flags_get, _fsdk.WatermarkSettings_flags_set)
    __swig_setmethods__["scale_x"] = _fsdk.WatermarkSettings_scale_x_set
    __swig_getmethods__["scale_x"] = _fsdk.WatermarkSettings_scale_x_get
    if _newclass:
        scale_x = _swig_property(_fsdk.WatermarkSettings_scale_x_get, _fsdk.WatermarkSettings_scale_x_set)
    __swig_setmethods__["scale_y"] = _fsdk.WatermarkSettings_scale_y_set
    __swig_getmethods__["scale_y"] = _fsdk.WatermarkSettings_scale_y_get
    if _newclass:
        scale_y = _swig_property(_fsdk.WatermarkSettings_scale_y_get, _fsdk.WatermarkSettings_scale_y_set)
    __swig_setmethods__["rotation"] = _fsdk.WatermarkSettings_rotation_set
    __swig_getmethods__["rotation"] = _fsdk.WatermarkSettings_rotation_get
    if _newclass:
        rotation = _swig_property(_fsdk.WatermarkSettings_rotation_get, _fsdk.WatermarkSettings_rotation_set)
    __swig_setmethods__["opacity"] = _fsdk.WatermarkSettings_opacity_set
    __swig_getmethods__["opacity"] = _fsdk.WatermarkSettings_opacity_get
    if _newclass:
        opacity = _swig_property(_fsdk.WatermarkSettings_opacity_get, _fsdk.WatermarkSettings_opacity_set)
    __swig_destroy__ = _fsdk.delete_WatermarkSettings
    __del__ = lambda self: None
WatermarkSettings_swigregister = _fsdk.WatermarkSettings_swigregister
WatermarkSettings_swigregister(WatermarkSettings)

class WatermarkTextProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WatermarkTextProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WatermarkTextProperties, name)
    __repr__ = _swig_repr
    e_FontStyleNormal = _fsdk.WatermarkTextProperties_e_FontStyleNormal
    e_FontStyleUnderline = _fsdk.WatermarkTextProperties_e_FontStyleUnderline

    def __init__(self, *args):
        this = _fsdk.new_WatermarkTextProperties(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.WatermarkTextProperties_Set(self, *args)
    __swig_setmethods__["font"] = _fsdk.WatermarkTextProperties_font_set
    __swig_getmethods__["font"] = _fsdk.WatermarkTextProperties_font_get
    if _newclass:
        font = _swig_property(_fsdk.WatermarkTextProperties_font_get, _fsdk.WatermarkTextProperties_font_set)
    __swig_setmethods__["font_size"] = _fsdk.WatermarkTextProperties_font_size_set
    __swig_getmethods__["font_size"] = _fsdk.WatermarkTextProperties_font_size_get
    if _newclass:
        font_size = _swig_property(_fsdk.WatermarkTextProperties_font_size_get, _fsdk.WatermarkTextProperties_font_size_set)
    __swig_setmethods__["color"] = _fsdk.WatermarkTextProperties_color_set
    __swig_getmethods__["color"] = _fsdk.WatermarkTextProperties_color_get
    if _newclass:
        color = _swig_property(_fsdk.WatermarkTextProperties_color_get, _fsdk.WatermarkTextProperties_color_set)
    __swig_setmethods__["font_style"] = _fsdk.WatermarkTextProperties_font_style_set
    __swig_getmethods__["font_style"] = _fsdk.WatermarkTextProperties_font_style_get
    if _newclass:
        font_style = _swig_property(_fsdk.WatermarkTextProperties_font_style_get, _fsdk.WatermarkTextProperties_font_style_set)
    __swig_setmethods__["line_space"] = _fsdk.WatermarkTextProperties_line_space_set
    __swig_getmethods__["line_space"] = _fsdk.WatermarkTextProperties_line_space_get
    if _newclass:
        line_space = _swig_property(_fsdk.WatermarkTextProperties_line_space_get, _fsdk.WatermarkTextProperties_line_space_set)
    __swig_setmethods__["alignment"] = _fsdk.WatermarkTextProperties_alignment_set
    __swig_getmethods__["alignment"] = _fsdk.WatermarkTextProperties_alignment_get
    if _newclass:
        alignment = _swig_property(_fsdk.WatermarkTextProperties_alignment_get, _fsdk.WatermarkTextProperties_alignment_set)
    __swig_destroy__ = _fsdk.delete_WatermarkTextProperties
    __del__ = lambda self: None
WatermarkTextProperties_swigregister = _fsdk.WatermarkTextProperties_swigregister
WatermarkTextProperties_swigregister(WatermarkTextProperties)

class SplitOutputSettingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitOutputSettingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitOutputSettingData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fsdk.new_SplitOutputSettingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        return _fsdk.SplitOutputSettingData_Set(self, *args)
    __swig_setmethods__["output_folder_path"] = _fsdk.SplitOutputSettingData_output_folder_path_set
    __swig_getmethods__["output_folder_path"] = _fsdk.SplitOutputSettingData_output_folder_path_get
    if _newclass:
        output_folder_path = _swig_property(_fsdk.SplitOutputSettingData_output_folder_path_get, _fsdk.SplitOutputSettingData_output_folder_path_set)
    __swig_setmethods__["add_before_or_after_orginal_name"] = _fsdk.SplitOutputSettingData_add_before_or_after_orginal_name_set
    __swig_getmethods__["add_before_or_after_orginal_name"] = _fsdk.SplitOutputSettingData_add_before_or_after_orginal_name_get
    if _newclass:
        add_before_or_after_orginal_name = _swig_property(_fsdk.SplitOutputSettingData_add_before_or_after_orginal_name_get, _fsdk.SplitOutputSettingData_add_before_or_after_orginal_name_set)
    __swig_setmethods__["custom_name"] = _fsdk.SplitOutputSettingData_custom_name_set
    __swig_getmethods__["custom_name"] = _fsdk.SplitOutputSettingData_custom_name_get
    if _newclass:
        custom_name = _swig_property(_fsdk.SplitOutputSettingData_custom_name_get, _fsdk.SplitOutputSettingData_custom_name_set)
    __swig_setmethods__["separator"] = _fsdk.SplitOutputSettingData_separator_set
    __swig_getmethods__["separator"] = _fsdk.SplitOutputSettingData_separator_get
    if _newclass:
        separator = _swig_property(_fsdk.SplitOutputSettingData_separator_get, _fsdk.SplitOutputSettingData_separator_set)
    __swig_setmethods__["is_overwrite"] = _fsdk.SplitOutputSettingData_is_overwrite_set
    __swig_getmethods__["is_overwrite"] = _fsdk.SplitOutputSettingData_is_overwrite_get
    if _newclass:
        is_overwrite = _swig_property(_fsdk.SplitOutputSettingData_is_overwrite_get, _fsdk.SplitOutputSettingData_is_overwrite_set)
    __swig_destroy__ = _fsdk.delete_SplitOutputSettingData
    __del__ = lambda self: None
SplitOutputSettingData_swigregister = _fsdk.SplitOutputSettingData_swigregister
SplitOutputSettingData_swigregister(SplitOutputSettingData)

class SplitDocumentInfo(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitDocumentInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplitDocumentInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SplitDocumentInfo
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SplitDocumentInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):
        return _fsdk.SplitDocumentInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _fsdk.SplitDocumentInfo___ne__(self, *args)

    def IsEmpty(self, *args):
        return _fsdk.SplitDocumentInfo_IsEmpty(self, *args)
SplitDocumentInfo_swigregister = _fsdk.SplitDocumentInfo_swigregister
SplitDocumentInfo_swigregister(SplitDocumentInfo)

class SplitDocumentInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitDocumentInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitDocumentInfoArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SplitDocumentInfoArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SplitDocumentInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.SplitDocumentInfoArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.SplitDocumentInfoArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.SplitDocumentInfoArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.SplitDocumentInfoArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.SplitDocumentInfoArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.SplitDocumentInfoArray_RemoveAll(self, *args)
SplitDocumentInfoArray_swigregister = _fsdk.SplitDocumentInfoArray_swigregister
SplitDocumentInfoArray_swigregister(SplitDocumentInfoArray)

class SplitFileResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitFileResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitFileResult, name)
    __repr__ = _swig_repr
    e_SplitFileSuccess = _fsdk.SplitFileResult_e_SplitFileSuccess
    e_SplitFileErrSizeTooSmall = _fsdk.SplitFileResult_e_SplitFileErrSizeTooSmall
    e_SplitFileErrFileExist = _fsdk.SplitFileResult_e_SplitFileErrFileExist
    e_SplitFileErrAccessDeny = _fsdk.SplitFileResult_e_SplitFileErrAccessDeny

    def __init__(self, *args):
        this = _fsdk.new_SplitFileResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["before_splitting_file_name"] = _fsdk.SplitFileResult_before_splitting_file_name_set
    __swig_getmethods__["before_splitting_file_name"] = _fsdk.SplitFileResult_before_splitting_file_name_get
    if _newclass:
        before_splitting_file_name = _swig_property(_fsdk.SplitFileResult_before_splitting_file_name_get, _fsdk.SplitFileResult_before_splitting_file_name_set)
    __swig_setmethods__["after_split_files_paths"] = _fsdk.SplitFileResult_after_split_files_paths_set
    __swig_getmethods__["after_split_files_paths"] = _fsdk.SplitFileResult_after_split_files_paths_get
    if _newclass:
        after_split_files_paths = _swig_property(_fsdk.SplitFileResult_after_split_files_paths_get, _fsdk.SplitFileResult_after_split_files_paths_set)
    __swig_setmethods__["split_file_state"] = _fsdk.SplitFileResult_split_file_state_set
    __swig_getmethods__["split_file_state"] = _fsdk.SplitFileResult_split_file_state_get
    if _newclass:
        split_file_state = _swig_property(_fsdk.SplitFileResult_split_file_state_get, _fsdk.SplitFileResult_split_file_state_set)
    __swig_destroy__ = _fsdk.delete_SplitFileResult
    __del__ = lambda self: None
SplitFileResult_swigregister = _fsdk.SplitFileResult_swigregister
SplitFileResult_swigregister(SplitFileResult)

class SplitFileResultArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitFileResultArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitFileResultArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fsdk.delete_SplitFileResultArray
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _fsdk.new_SplitFileResultArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSize(self, *args):
        return _fsdk.SplitFileResultArray_GetSize(self, *args)

    def GetAt(self, *args):
        return _fsdk.SplitFileResultArray_GetAt(self, *args)

    def Add(self, *args):
        return _fsdk.SplitFileResultArray_Add(self, *args)

    def RemoveAt(self, *args):
        return _fsdk.SplitFileResultArray_RemoveAt(self, *args)

    def InsertAt(self, *args):
        return _fsdk.SplitFileResultArray_InsertAt(self, *args)

    def RemoveAll(self, *args):
        return _fsdk.SplitFileResultArray_RemoveAll(self, *args)
SplitFileResultArray_swigregister = _fsdk.SplitFileResultArray_swigregister
SplitFileResultArray_swigregister(SplitFileResultArray)

class SplitPDFDocCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitPDFDocCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitPDFDocCallback, name)
    __repr__ = _swig_repr

    def NeedToPause(self, *args):
        return _fsdk.SplitPDFDocCallback_NeedToPause(self, *args)

    def ProgressNotify(self, *args):
        return _fsdk.SplitPDFDocCallback_ProgressNotify(self, *args)

    def ResultNotify(self, *args):
        return _fsdk.SplitPDFDocCallback_ResultNotify(self, *args)

    def __init__(self, *args):
        if self.__class__ == SplitPDFDocCallback:
            _self = None
        else:
            _self = self
        this = _fsdk.new_SplitPDFDocCallback(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_SplitPDFDocCallback
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _fsdk.disown_SplitPDFDocCallback(self)
        return weakref_proxy(self)
SplitPDFDocCallback_swigregister = _fsdk.SplitPDFDocCallback_swigregister
SplitPDFDocCallback_swigregister(SplitPDFDocCallback)

class SplitPDFDoc(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitPDFDoc, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplitPDFDoc, name)
    __repr__ = _swig_repr
    if _newclass:
        StartSplitByFileSize = staticmethod(_fsdk.SplitPDFDoc_StartSplitByFileSize)
    else:
        StartSplitByFileSize = _fsdk.SplitPDFDoc_StartSplitByFileSize

    def __init__(self, *args):
        this = _fsdk.new_SplitPDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fsdk.delete_SplitPDFDoc
    __del__ = lambda self: None
SplitPDFDoc_swigregister = _fsdk.SplitPDFDoc_swigregister
SplitPDFDoc_swigregister(SplitPDFDoc)

def SplitPDFDoc_StartSplitByFileSize(*args):
    return _fsdk.SplitPDFDoc_StartSplitByFileSize(*args)
SplitPDFDoc_StartSplitByFileSize = _fsdk.SplitPDFDoc_StartSplitByFileSize

# This file is compatible with both classic and new-style classes.


