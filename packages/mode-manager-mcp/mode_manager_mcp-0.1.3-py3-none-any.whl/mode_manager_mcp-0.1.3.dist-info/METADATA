Metadata-Version: 2.4
Name: mode-manager-mcp
Version: 0.1.3
Summary: Mode Manager MCP: Server for managing VS Code .chatmode.md and .instructions.md files (GitHub Copilot prompts)
Project-URL: Homepage, https://github.com/NiclasOlofsson/node-manager-mcp
Project-URL: Repository, https://github.com/NiclasOlofsson/node-manager-mcp
Project-URL: Issues, https://github.com/NiclasOlofsson/node-manager-mcp/issues
Project-URL: Documentation, https://github.com/NiclasOlofsson/node-manager-mcp#readme
Author-email: Niclas Olofsson <niclas.olofsson@oatly.com>
License: MIT
License-File: LICENSE
Keywords: chatmode,github-copilot,instruction,mcp,mode-manager,prompts,vscode
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Requires-Dist: mcp>=1.12.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typing-extensions
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# Mode Manager MCP

üß† **Personal AI Memory + VS Code Prompt Management**

Streamlined MCP server that gives AI assistants a **persistent memory** of your preferences and manages VS Code `.chatmode.md` and `.instructions.md` files.

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)

## üéØ Primary Feature: AI Memory

**One tool to rule them all**: `remember()`

- üß† **Personal AI Memory** - Store preferences, facts, and context that AI should remember about you
- üîÑ **Auto-setup** - Creates memory file automatically in your VS Code prompts directory  
- üíæ **Persistent** - Memories are saved as a VS Code instruction file that AI assistants can access
- ‚ö° **Simple** - Just one tool instead of managing multiple complex operations

## üß† Primary Usage: Personal AI Memory

### Store Information About Yourself
Ask Copilot: *"Remember that I prefer Python over JavaScript for backend development"*

### Add Personal Context  
Ask Copilot: *"Remember that I work at Oatly and focus on sustainability projects"*

### Save Preferences
Ask Copilot: *"Remember that I like detailed code comments and use Black for Python formatting"*

### How It Works
1. **First use** - Automatically creates `memory.instructions.md` in your VS Code prompts directory
2. **Each memory** - Adds timestamped entries to your personal memory file
3. **AI access** - Any AI assistant can read your memories when the instruction is active
4. **Persistent** - Memories survive across VS Code sessions and conversations

## üìö The Mode Manager MCP Library

The official library contains **20 curated entries** with proper license attribution:

### Popular Chatmodes
- **Beast Mode 3.1** - Advanced autonomous coding agent
- **AI Architect** - System design and architecture specialist  
- **Code Reviewer** - Comprehensive code review assistant
- **Tech Lead** - Technical leadership and project management
- **Security Expert** - Cybersecurity and secure coding practices

### Professional Instructions
- **Python Developer** - Modern Python patterns and best practices
- **React Developer** - Frontend development with React
- **API Design Guidelines** - RESTful API design principles
- **Git Workflow Standards** - Professional version control practices
- **Testing Strategy** - Comprehensive testing patterns

All entries include:
- üìÑ **License information** (MIT, Apache 2.0, Open Source)
- üë§ **Author attribution** 
- üè∑Ô∏è **Categories and tags**
- üîó **Source links** to original content

## ‚ú® Additional Features

- üìÇ **Manage VS Code prompt files** - Create, edit, and organize chatmodes and instructions
- üìö **Browse the curated library** - Install popular chatmodes and instructions from the community with license attribution
- üîÑ **Keep files updated** - Update chatmodes from source while preserving your custom tool settings
- üõ°Ô∏è **Safe operations** - Automatic backups before any deletions
- ‚öôÔ∏è **Configurable library** - Use the official library or point to your own custom collection

## üöÄ Quick Setup

### 1. Install Hatch

[Hatch](https://hatch.pypa.io/) is a modern Python project manager that handles virtual environments, dependencies, and build processes automatically.

```bash
pip install hatch
```

### 2. Clone and Setup

```bash
git clone https://github.com/NiclasOlofsson/node-manager-mcp.git
cd node-manager-mcp
```

Hatch will automatically create a virtual environment and install dependencies when you run commands.

### 3. Test it works

```bash
hatch run test
```

### 4. Add to VS Code

Copy the example configuration:

```bash
cp mcp-config-example.json .vscode/mcp.json
```

Or manually add to your VS Code MCP settings:

```json
{
  "mcpServers": {
    "mode-manager": {
      "command": "python",
      "args": ["-m", "src.mode_manager_mcp"],
      "cwd": "."
    }
  }
}
```

**Note:** If you're developing on the project, you can also run the server in development mode:
```bash
# Test the server locally
hatch run python -m src.mode_manager_mcp
```

## ‚öôÔ∏è Library Configuration

The server uses the **official Mode Manager MCP Library** by default, but you can configure it to use custom libraries for development or organizational needs.

### Default Library
```
https://raw.githubusercontent.com/NiclasOlofsson/node-manager-mcp/refs/heads/main/library/memory-mode-library.json
```

### Configuration Options

#### Command Line Parameter
```bash
python -m src.mode_manager_mcp --library-url "https://your-custom-library.json"
```

#### Environment Variable
```bash
export MCP_LIBRARY_URL="https://your-custom-library.json"
python -m src.mode_manager_mcp
```

#### VS Code Configuration
```json
{
  "mcpServers": {
    "mode-manager": {
      "command": "python",
      "args": ["-m", "src.mode_manager_mcp", "--library-url", "https://your-custom-library.json"],
      "cwd": "."
    }
  }
}
```

### Common Use Cases

**Development/Testing:**
```bash
# Use a local development library
python -m http.server 8000 --directory ./library
export MCP_LIBRARY_URL="http://localhost:8000/memory-mode-library.json"
```

**Custom Organization Library:**
```bash
# Point to your organization's curated library
export MCP_LIBRARY_URL="https://raw.githubusercontent.com/yourorg/custom-prompts/main/library.json"
```

## üí° Usage Examples

### Browse the Library
Ask Copilot: *"What chatmodes are available in the library?"*

### Install a Popular Chatmode  
Ask Copilot: *"Install Beast Mode 3.1 from the library"*

### Create Your Own
Ask Copilot: *"Create a new chatmode for API testing"*

### Manage Files
Ask Copilot: *"List my current chatmodes"* or *"Update my chatmode from its source"*

## üìÅ Where Files Are Stored

Your prompt files live in VS Code's prompts directory:
- **Windows:** `%APPDATA%\Code\User\prompts`
- **macOS:** `~/Library/Application Support/Code/User/prompts`  
- **Linux:** `~/.config/Code/User/prompts`

## ü§ù Contributing

Want to help improve Mode Manager MCP? Check out [CONTRIBUTING.md](CONTRIBUTING.md) for development setup, coding guidelines, and how to submit changes.

## üìÑ License

MIT License - see [LICENSE](LICENSE) for details.
