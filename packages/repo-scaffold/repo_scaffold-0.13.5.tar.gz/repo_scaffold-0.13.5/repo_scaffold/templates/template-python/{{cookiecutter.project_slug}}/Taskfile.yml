# https://taskfile.dev
version: '3'

vars:
  package_name: {{ cookiecutter.project_slug }}
  python_min_version: &dev_version '{{ cookiecutter.min_python_version }}'
  python_max_version: '{{ cookiecutter.max_python_version }}'
  python_dev_version: *dev_version
  pypi_server_url: {% raw %}'{{.PYPI_SERVER_URL | default "https://pypiserver.shawndeng.cc"}}'{% endraw %}

dotenv: ['.env']

tasks:
  init:
    desc: Initialize the project
    cmds:
      - uv sync
      - uvx pre-commit install

  lint:
    desc: Run linters
    cmds:
      - uvx ruff check --fix .  # 先修复可以自动修复的问题
      - uvx ruff format .       # 然后格式化
      - uvx ruff check .        # 最后再检查一次确保没有遗留问题

  lint:add-noqa:
    desc: Add noqa comments to files
    cmds:
      - uvx ruff check --add-noqa .  # 添加 noqa 注释以忽略特定行的检查
      - task: lint:pre-commit        # 运行 pre-commit 钩子以确保代码风格一致
      - task: lint                   # 重新运行 ruff 检查以确保没有遗漏的错误

  lint:pre-commit:
    desc: Run pre-commit hooks
    cmds:
      - uvx pre-commit run --all-files

  lint:watch:
    desc: Watch files and run linters
    cmds:
      - uvx ruff check --watch .  # 监视文件变化并运行检查

  test:
    desc: Run tests with dev version
    cmds:
      - task: test:version
        vars:
          version: {% raw %}'{{.python_dev_version}}'{% endraw %}

  test:all:
    desc: Run tests with all Python versions
    vars:
      python_versions:
        sh: |
          python3 -c "
          min_ver = {% raw %}'{{.python_min_version}}'{% endraw %}.split('.')
          max_ver = {% raw %}'{{.python_max_version}}'{% endraw %}.split('.')
          for minor in range(int(min_ver[1]), int(max_ver[1]) + 1):
              print(f'{min_ver[0]}.{minor}')
          "
    cmds:
      - for: {% raw %}{var: python_versions, split: "\n", as: version}{% endraw %}
        task: test:version
        vars:
          version: {% raw %}'{{.version}}'{% endraw %}

  test:version:
    desc: Run tests with specific Python version
    cmds:
      - echo "Testing with Python {% raw %}{{.version}}{% endraw %}..."
      - uv run --extra dev --python {% raw %}{{.version}}{% endraw %} pytest --cov={% raw %}{{.package_name}}{% endraw %} --cov-report=xml --cov-report=term-missing -v tests/

  test:watch:
    desc: Watch files and run tests
    cmds:
      - uv run --extra dev ptw --runner "pytest -vx"

{%- if cookiecutter.use_github_actions == 'yes' %}
  docs:
    desc: Build and view documentation
    cmds:
      - uv run --extra docs mkdocs serve

  docs:build:
    desc: Build documentation
    cmds:
      - uv run --extra docs mkdocs build

  deploy:gh-pages:
    desc: Deploy documentation to GitHub Pages
    cmds:
      - uv run --extra docs mkdocs gh-deploy --force
{%- endif %}

  # 构建相关任务
  build:
    desc: Build package distribution files
    cmds:
      - uv build

  # 发布相关任务 - 使用已构建的包
  publish:pypi:
    desc: Publish existing package to PyPI
    cmds:
      - uv publish

  publish:pypi-server:
    desc: Publish existing package to PyPI Server
    env:
      UV_PUBLISH_USERNAME: {% raw %}'{{.PYPI_SERVER_USERNAME}}'{% endraw %}
      UV_PUBLISH_PASSWORD: {% raw %}'{{.PYPI_SERVER_PASSWORD}}'{% endraw %}
      UV_PUBLISH_URL: {% raw %}'{{.pypi_server_url}}'{% endraw %}
    cmds:
      - uv publish dist/*.whl

  publish:all:
    desc: Publish existing package to both PyPI and PyPI Server
    cmds:
      - task: publish:pypi
      - task: publish:pypi-server

  # 组合任务 - 构建并发布
  deploy:pypi:
    desc: Build and deploy to PyPI
    cmds:
      - task: build
      - task: publish:pypi

  deploy:pypi-server:
    desc: Build and deploy to PyPI Server
    cmds:
      - task: build
      - task: publish:pypi-server

  deploy:all:
    desc: Build and deploy to all repositories
    cmds:
      - task: build
      - task: publish:all

  export:deps:
    desc: Export dependencies to requirements.txt
    cmds:
      - uv pip compile pyproject.toml --no-deps --output-file requirements.txt

{%- if cookiecutter.use_podman == 'yes' %}
  compose:up:
    desc: Start services using podman compose
    cmds:
      - podman compose -f container/compose.yaml up

  compose:down:
    desc: Stop services using podman compose
    cmds:
      - podman compose -f container/compose.yaml down

  compose:build:
    desc: Build container images using podman compose
    cmds:
      - podman compose -f container/compose.yaml build

  compose:logs:
    desc: View compose logs
    cmds:
      - podman compose -f container/compose.yaml logs -f

  compose:shell:
    desc: Open shell in the container
    cmds:
      - podman compose -f container/compose.yaml exec {{cookiecutter.project_slug}} /bin/bash
{%- endif %}
