[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llmadventure"
version = "1.0.1"
description = "ðŸŽ® AI-Powered CLI Text Adventure Game - Create infinite stories with LLM"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SoftwareApkDev", email = "softwareapkdev2022@gmail.com"}
]
maintainers = [
    {name = "SoftwareApkDev", email = "softwareapkdev2022@gmail.com"}
]
keywords = [
    "ai", "game", "adventure", "cli", "text-adventure", "gemini", "llm", 
    "rpg", "storytelling", "procedural-generation", "interactive-fiction",
    "terminal-game", "ai-gaming", "machine-learning", "natural-language"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Education",
    "Topic :: Multimedia :: Graphics :: Presentation",
    "Topic :: System :: Systems Administration",
    "Topic :: Terminals",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Framework :: Pytest",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "google-generativeai>=0.3.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "colorama>=0.4.6",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.0.0",
    "asyncio-mqtt>=0.16.0",
    "websockets>=11.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "jinja2>=3.1.0",
    "markdown>=3.5.0",
    "pillow>=10.0.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]
web = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "jinja2>=3.1.0",
    "websockets>=11.0.0",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "langchain>=0.1.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
]
data = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "seaborn>=0.12.0",
]
full = [
    "llmadventure[dev,web,ai,data]"
]

[project.scripts]
llmadventure = "main:main"
llm-adventure = "main:main"
adventure = "main:main"

[project.gui-scripts]
llmadventure-gui = "llmadventure.gui.main:main"

[project.entry-points."llmadventure.plugins"]
example = "llmadventure.plugins.example:ExamplePlugin"
combat_enhanced = "llmadventure.plugins.combat_enhanced:CombatEnhancedPlugin"
story_generator = "llmadventure.plugins.story_generator:StoryGeneratorPlugin"

[project.urls]
Repository = "https://github.com/SoftwareApkDev/llmadventure"

[tool.setuptools.packages.find]
where = ["."]
include = ["llmadventure*"]

[tool.setuptools.package-data]
llmadventure = [
    "data/*.json",
    "data/*.yaml",
    "data/*.txt",
    "templates/*.html",
    "templates/*.txt",
    "static/*.css",
    "static/*.js",
    "static/*.png",
    "static/*.jpg",
    "static/*.svg",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["llmadventure"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.safety]
policy = "strict" 