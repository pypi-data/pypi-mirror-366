# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper
from coingeckopublicapiv3.models.ticker_1 import Ticker1


class CoinsTickers(object):

    """Implementation of the 'CoinsTickers' model.

    Attributes:
        name (str): coin name
        tickers (List[Ticker1]): list of tickers

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "tickers": 'tickers'
    }

    _optionals = [
        'name',
        'tickers',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 tickers=APIHelper.SKIP):
        """Constructor for the CoinsTickers class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if tickers is not APIHelper.SKIP:
            self.tickers = tickers 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        tickers = None
        if dictionary.get('tickers') is not None:
            tickers = [Ticker1.from_dictionary(x) for x in dictionary.get('tickers')]
        else:
            tickers = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   tickers)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'tickers={(self.tickers if hasattr(self, "tickers") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'tickers={(self.tickers if hasattr(self, "tickers") else None)!s})')
