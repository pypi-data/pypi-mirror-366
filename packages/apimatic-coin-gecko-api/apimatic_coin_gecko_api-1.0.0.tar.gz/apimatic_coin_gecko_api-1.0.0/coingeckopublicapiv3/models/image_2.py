# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class Image2(object):

    """Implementation of the 'Image2' model.

    image of the asset platform

    Attributes:
        large (str): The model property of type str.
        small (str): The model property of type str.
        thumb (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "large": 'large',
        "small": 'small',
        "thumb": 'thumb'
    }

    _optionals = [
        'large',
        'small',
        'thumb',
    ]

    def __init__(self,
                 large=APIHelper.SKIP,
                 small=APIHelper.SKIP,
                 thumb=APIHelper.SKIP):
        """Constructor for the Image2 class"""

        # Initialize members of the class
        if large is not APIHelper.SKIP:
            self.large = large 
        if small is not APIHelper.SKIP:
            self.small = small 
        if thumb is not APIHelper.SKIP:
            self.thumb = thumb 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        large = dictionary.get("large") if dictionary.get("large") else APIHelper.SKIP
        small = dictionary.get("small") if dictionary.get("small") else APIHelper.SKIP
        thumb = dictionary.get("thumb") if dictionary.get("thumb") else APIHelper.SKIP
        # Return an object of this model
        return cls(large,
                   small,
                   thumb)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'large={(self.large if hasattr(self, "large") else None)!r}, '
                f'small={(self.small if hasattr(self, "small") else None)!r}, '
                f'thumb={(self.thumb if hasattr(self, "thumb") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'large={(self.large if hasattr(self, "large") else None)!s}, '
                f'small={(self.small if hasattr(self, "small") else None)!s}, '
                f'thumb={(self.thumb if hasattr(self, "thumb") else None)!s})')
