# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from coingeckopublicapiv3.api_helper import APIHelper
from coingeckopublicapiv3.configuration import Server
from coingeckopublicapiv3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from coingeckopublicapiv3.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from coingeckopublicapiv3.models.companies_treasury import CompaniesTreasury


class CompaniesBetaController(BaseController):

    """A Controller to access Endpoints in the coingeckopublicapiv3 API."""
    def __init__(self, config):
        super(CompaniesBetaController, self).__init__(config)

    def companies_public_treasury(self,
                                  coin_id):
        """Does a GET request to /companies/public_treasury/{coin_id}.

        This endpoint allows you **query public companiesâ€™ Bitcoin or Ethereum
        holdings**

        Args:
            coin_id (CoinIdEnum): coin ID

        Returns:
            CompaniesTreasury: Response from the API. Get public companies
                treasury data

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/companies/public_treasury/{coin_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('coin_id')
                            .value(coin_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('apiKeyAuth'), Single('apiKeyQueryParam')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CompaniesTreasury.from_dictionary)
        ).execute()
