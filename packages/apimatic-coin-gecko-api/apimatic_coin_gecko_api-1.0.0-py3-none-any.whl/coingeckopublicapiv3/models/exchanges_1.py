# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class Exchanges1(object):

    """Implementation of the 'Exchanges1' model.

    Attributes:
        id (str): exchange ID
        name (str): exchange name
        market_type (str): exchange market type
        thumb (str): exchange thumb image url
        large (str): exchange large image url

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "market_type": 'market_type',
        "thumb": 'thumb',
        "large": 'large'
    }

    _optionals = [
        'id',
        'name',
        'market_type',
        'thumb',
        'large',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 market_type=APIHelper.SKIP,
                 thumb=APIHelper.SKIP,
                 large=APIHelper.SKIP):
        """Constructor for the Exchanges1 class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if market_type is not APIHelper.SKIP:
            self.market_type = market_type 
        if thumb is not APIHelper.SKIP:
            self.thumb = thumb 
        if large is not APIHelper.SKIP:
            self.large = large 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        market_type = dictionary.get("market_type") if dictionary.get("market_type") else APIHelper.SKIP
        thumb = dictionary.get("thumb") if dictionary.get("thumb") else APIHelper.SKIP
        large = dictionary.get("large") if dictionary.get("large") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   market_type,
                   thumb,
                   large)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'market_type={(self.market_type if hasattr(self, "market_type") else None)!r}, '
                f'thumb={(self.thumb if hasattr(self, "thumb") else None)!r}, '
                f'large={(self.large if hasattr(self, "large") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'market_type={(self.market_type if hasattr(self, "market_type") else None)!s}, '
                f'thumb={(self.thumb if hasattr(self, "thumb") else None)!s}, '
                f'large={(self.large if hasattr(self, "large") else None)!s})')
