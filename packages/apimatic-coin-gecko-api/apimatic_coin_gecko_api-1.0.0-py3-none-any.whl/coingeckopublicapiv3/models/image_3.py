# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class Image3(object):

    """Implementation of the 'Image3' model.

    NFT collection image url

    Attributes:
        small (str): The model property of type str.
        small_2_x (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "small": 'small',
        "small_2_x": 'small_2x'
    }

    _optionals = [
        'small',
        'small_2_x',
    ]

    def __init__(self,
                 small=APIHelper.SKIP,
                 small_2_x=APIHelper.SKIP):
        """Constructor for the Image3 class"""

        # Initialize members of the class
        if small is not APIHelper.SKIP:
            self.small = small 
        if small_2_x is not APIHelper.SKIP:
            self.small_2_x = small_2_x 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        small = dictionary.get("small") if dictionary.get("small") else APIHelper.SKIP
        small_2_x = dictionary.get("small_2x") if dictionary.get("small_2x") else APIHelper.SKIP
        # Return an object of this model
        return cls(small,
                   small_2_x)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'small={(self.small if hasattr(self, "small") else None)!r}, '
                f'small_2_x={(self.small_2_x if hasattr(self, "small_2_x") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'small={(self.small if hasattr(self, "small") else None)!s}, '
                f'small_2_x={(self.small_2_x if hasattr(self, "small_2_x") else None)!s})')
