# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class Market(object):

    """Implementation of the 'Market' model.

    coin ticker exchange

    Attributes:
        name (str): coin ticker exchange name
        identifier (str): coin ticker exchange identifier
        has_trading_incentive (bool): coin ticker exchange trading incentive

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "identifier": 'identifier',
        "has_trading_incentive": 'has_trading_incentive'
    }

    _optionals = [
        'name',
        'identifier',
        'has_trading_incentive',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 identifier=APIHelper.SKIP,
                 has_trading_incentive=APIHelper.SKIP):
        """Constructor for the Market class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if identifier is not APIHelper.SKIP:
            self.identifier = identifier 
        if has_trading_incentive is not APIHelper.SKIP:
            self.has_trading_incentive = has_trading_incentive 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        identifier = dictionary.get("identifier") if dictionary.get("identifier") else APIHelper.SKIP
        has_trading_incentive = dictionary.get("has_trading_incentive") if "has_trading_incentive" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   identifier,
                   has_trading_incentive)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'identifier={(self.identifier if hasattr(self, "identifier") else None)!r}, '
                f'has_trading_incentive={(self.has_trading_incentive if hasattr(self, "has_trading_incentive") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'identifier={(self.identifier if hasattr(self, "identifier") else None)!s}, '
                f'has_trading_incentive={(self.has_trading_incentive if hasattr(self, "has_trading_incentive") else None)!s})')
