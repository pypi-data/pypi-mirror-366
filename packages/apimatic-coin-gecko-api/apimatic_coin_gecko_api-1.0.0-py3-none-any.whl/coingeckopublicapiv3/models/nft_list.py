# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class NFTList(object):

    """Implementation of the 'NFTList' model.

    Attributes:
        id (str): NFT collection ID
        contract_address (str): NFT collection contract address
        name (str): NFT collection name
        asset_platform_id (str): NFT collection asset platform ID
        symbol (str): NFT collection symbol

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "contract_address": 'contract_address',
        "name": 'name',
        "asset_platform_id": 'asset_platform_id',
        "symbol": 'symbol'
    }

    _optionals = [
        'id',
        'contract_address',
        'name',
        'asset_platform_id',
        'symbol',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 contract_address=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 asset_platform_id=APIHelper.SKIP,
                 symbol=APIHelper.SKIP):
        """Constructor for the NFTList class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if contract_address is not APIHelper.SKIP:
            self.contract_address = contract_address 
        if name is not APIHelper.SKIP:
            self.name = name 
        if asset_platform_id is not APIHelper.SKIP:
            self.asset_platform_id = asset_platform_id 
        if symbol is not APIHelper.SKIP:
            self.symbol = symbol 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        contract_address = dictionary.get("contract_address") if dictionary.get("contract_address") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        asset_platform_id = dictionary.get("asset_platform_id") if dictionary.get("asset_platform_id") else APIHelper.SKIP
        symbol = dictionary.get("symbol") if dictionary.get("symbol") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   contract_address,
                   name,
                   asset_platform_id,
                   symbol)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'contract_address={(self.contract_address if hasattr(self, "contract_address") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'asset_platform_id={(self.asset_platform_id if hasattr(self, "asset_platform_id") else None)!r}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'contract_address={(self.contract_address if hasattr(self, "contract_address") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'asset_platform_id={(self.asset_platform_id if hasattr(self, "asset_platform_id") else None)!s}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!s})')
