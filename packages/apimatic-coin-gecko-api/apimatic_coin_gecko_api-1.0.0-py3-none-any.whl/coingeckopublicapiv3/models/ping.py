# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class Ping(object):

    """Implementation of the 'Ping' model.

    Attributes:
        gecko_says (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "gecko_says": 'gecko_says'
    }

    _optionals = [
        'gecko_says',
    ]

    def __init__(self,
                 gecko_says=APIHelper.SKIP):
        """Constructor for the Ping class"""

        # Initialize members of the class
        if gecko_says is not APIHelper.SKIP:
            self.gecko_says = gecko_says 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        gecko_says = dictionary.get("gecko_says") if dictionary.get("gecko_says") else APIHelper.SKIP
        # Return an object of this model
        return cls(gecko_says)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'gecko_says={(self.gecko_says if hasattr(self, "gecko_says") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'gecko_says={(self.gecko_says if hasattr(self, "gecko_says") else None)!s})')
