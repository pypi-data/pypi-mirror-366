# -*- coding: utf-8 -*-

"""
coingeckopublicapiv3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coingeckopublicapiv3.api_helper import APIHelper


class AthDate1(object):

    """Implementation of the 'AthDate1' model.

    NFT collection all time highs date

    Attributes:
        native_currency (datetime): The model property of type datetime.
        usd (datetime): The model property of type datetime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "native_currency": 'native_currency',
        "usd": 'usd'
    }

    _optionals = [
        'native_currency',
        'usd',
    ]

    def __init__(self,
                 native_currency=APIHelper.SKIP,
                 usd=APIHelper.SKIP):
        """Constructor for the AthDate1 class"""

        # Initialize members of the class
        if native_currency is not APIHelper.SKIP:
            self.native_currency = APIHelper.apply_datetime_converter(native_currency, APIHelper.RFC3339DateTime) if native_currency else None 
        if usd is not APIHelper.SKIP:
            self.usd = APIHelper.apply_datetime_converter(usd, APIHelper.RFC3339DateTime) if usd else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        native_currency = APIHelper.RFC3339DateTime.from_value(dictionary.get("native_currency")).datetime if dictionary.get("native_currency") else APIHelper.SKIP
        usd = APIHelper.RFC3339DateTime.from_value(dictionary.get("usd")).datetime if dictionary.get("usd") else APIHelper.SKIP
        # Return an object of this model
        return cls(native_currency,
                   usd)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'native_currency={(self.native_currency if hasattr(self, "native_currency") else None)!r}, '
                f'usd={(self.usd if hasattr(self, "usd") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'native_currency={(self.native_currency if hasattr(self, "native_currency") else None)!s}, '
                f'usd={(self.usd if hasattr(self, "usd") else None)!s})')
