"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

import pathlib

import napari
import numpy
import skimage.measure
import splinebox
from magicgui.widgets import (
    CheckBox,
    Container,
    FloatSpinBox,
    PushButton,
    create_widget,
)
from qtpy.QtWidgets import QFileDialog

import notochoordinates.main as main
from notochoordinates.main import reslice_along_spline


class Notochoords(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        self._selected_points = create_widget(
            label="Annotated points", annotation="napari.layers.Points"
        )

        self._invert_checkbox = CheckBox(
            text="Refine spline? (not yet implemented)"
        )

        self.pixelSizeYXbox = FloatSpinBox(
            label="XY pixel size (µm)", value=0.347
        )
        self.stepSizeZbox = FloatSpinBox(label="Z step size (µm)", value=0.7)

        self.fitbtn = PushButton(text="Fit spline")
        self.fitbtn.clicked.connect(self._fitspline)

        self.savebtn = PushButton(text="Save spline")
        self.savebtn.clicked.connect(self._savespline)

        self.loadbtn = PushButton(text="Load spline")
        self.loadbtn.clicked.connect(self._loadspline)

        self.reslicebtn = PushButton(
            text="Reslice selected layer(s) along spline"
        )
        self.reslicebtn.clicked.connect(self._reslicespline)

        self.polarbtn = PushButton(text="Polar coordinates")
        self.polarbtn.clicked.connect(self._cylindrical_coordinates)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._selected_points,
                self.pixelSizeYXbox,
                self.stepSizeZbox,
                self._invert_checkbox,
                self.fitbtn,
                self.savebtn,
                self.loadbtn,
                self.reslicebtn,
                self.polarbtn,
            ]
        )

        self.p = 300  # half-window for reslice
        self.N = 1000  # number of points for reslicing along spline (this should be set as 1 spatial unit later)

    def _drawspline(self):
        self._viewer.add_points(
            self.spline.eval(numpy.linspace(0, self.spline.M - 1, self.N))
            / self._getVoxelSizeZYX(),
            size=20,
            face_color="r",
            border_color="r",
            name="Spline Points",
        )

    def _getVoxelSizeZYX(self):
        return numpy.array(
            [
                self.stepSizeZbox.value,
                self.pixelSizeYXbox.value,
                self.pixelSizeYXbox.value,
            ]
        )

    def _fitspline(self):

        self.spline = main.fit_spline(
            self._selected_points.value.data, self._getVoxelSizeZYX()
        )

        # now draw it.
        self._drawspline()

        self._selected_points.value.visible = False

    def _savespline(self):
        save_file_path, _ = QFileDialog.getSaveFileName(
            None, "Save spline", "", "JSON Files (*.json)"
        )
        save_file_path = pathlib.Path(save_file_path)
        self.spline.to_json(save_file_path.with_suffix(".json"))

    def _loadspline(self):
        load_file_path, _ = QFileDialog.getOpenFileName(
            None, "Open spline", "", "JSON Files (*.json)"
        )
        self.spline = splinebox.spline_curves.Spline.from_json(load_file_path)
        self._drawspline()

    def _reslicespline(self):
        if self.spline is None:
            pass
        else:
            selected_layers = self._viewer.layers.selection.copy()
            imgs = [selected_layer.data for selected_layer in selected_layers]
            resliced_imgs = reslice_along_spline(
                self.spline, imgs, self._getVoxelSizeZYX()
            )
            for selected_layer, resliced_img in zip(
                selected_layers, resliced_imgs, strict=False
            ):
                self._viewer.add_image(
                    resliced_img, name=selected_layer.name + "-notoreslice"
                )

    def _cylindrical_coordinates(self):
        selected_layers = self._viewer.layers.selection.copy()
        for selected_layer in selected_layers:
            if isinstance(selected_layer, napari.layers.Labels):
                shapeOut = selected_layer.data.shape
                rOut = numpy.zeros(shapeOut, dtype=float)
                lOut = numpy.zeros(shapeOut, dtype=float)
                thetaOut = numpy.zeros(shapeOut, dtype=float)

                region_props = skimage.measure.regionprops_table(
                    selected_layer.data,
                    properties=("label", "centroid", "coords"),
                )

                centroids_px = numpy.stack(
                    [
                        region_props["centroid-0"],
                        region_props["centroid-1"],
                        region_props["centroid-2"],
                    ],
                    axis=-1,
                )
                centroids_um = centroids_px * self._getVoxelSizeZYX()

                cylindrical_coords = main.convert_to_cylindrical_coordinates(
                    centroids_um, self.spline
                )

                for i in range(len(region_props["label"])):
                    coords = region_props["coords"][i]

                    rOut[coords[:, 0], coords[:, 1], coords[:, 2]] = (
                        cylindrical_coords[i, 0]
                    )
                    thetaOut[coords[:, 0], coords[:, 1], coords[:, 2]] = (
                        cylindrical_coords[i, 1]
                    )
                    lOut[coords[:, 0], coords[:, 1], coords[:, 2]] = (
                        cylindrical_coords[i, 2]
                    )

            self._viewer.add_image(rOut, name=selected_layer.name + "-r")
            self._viewer.add_image(lOut, name=selected_layer.name + "-l")
            self._viewer.add_image(
                thetaOut, name=selected_layer.name + "-theta"
            )
