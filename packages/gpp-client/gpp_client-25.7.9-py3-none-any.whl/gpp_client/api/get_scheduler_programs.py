# Generated by ariadne-codegen
# Source: src/queries

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ScienceSubtype


class GetSchedulerPrograms(BaseModel):
    programs: "GetSchedulerProgramsPrograms"


class GetSchedulerProgramsPrograms(BaseModel):
    matches: List["GetSchedulerProgramsProgramsMatches"]


class GetSchedulerProgramsProgramsMatches(BaseModel):
    id: Any
    proposal: Optional["GetSchedulerProgramsProgramsMatchesProposal"]


class GetSchedulerProgramsProgramsMatchesProposal(BaseModel):
    type: "GetSchedulerProgramsProgramsMatchesProposalType"


class GetSchedulerProgramsProgramsMatchesProposalType(BaseModel):
    typename__: Literal[
        "Classical",
        "DemoScience",
        "DirectorsTime",
        "FastTurnaround",
        "LargeProgram",
        "PoorWeather",
        "ProposalType",
        "Queue",
        "SystemVerification",
    ] = Field(alias="__typename")
    science_subtype: ScienceSubtype = Field(alias="scienceSubtype")


GetSchedulerPrograms.model_rebuild()
GetSchedulerProgramsPrograms.model_rebuild()
GetSchedulerProgramsProgramsMatches.model_rebuild()
GetSchedulerProgramsProgramsMatchesProposal.model_rebuild()
