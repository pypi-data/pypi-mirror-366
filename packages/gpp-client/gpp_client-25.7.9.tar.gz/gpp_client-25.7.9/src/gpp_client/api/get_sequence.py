# Generated by ariadne-codegen
# Source: src/queries

from typing import Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    DatasetQaState,
    GcalArc,
    GcalContinuum,
    GcalDiffuser,
    GcalFilter,
    GcalShutter,
    GmosBinning,
    GmosDtax,
    GmosNorthBuiltinFpu,
    GmosNorthFilter,
    GmosNorthGrating,
    GmosRoi,
    GmosSouthBuiltinFpu,
    GmosSouthFilter,
    GmosSouthGrating,
    Instrument,
    ObserveClass,
    StepExecutionState,
    StepType,
)
from .fragments import SchedulerAtomStepNorth, SchedulerAtomStepSouth


class GetSequence(BaseModel):
    observations: "GetSequenceObservations"


class GetSequenceObservations(BaseModel):
    matches: List["GetSequenceObservationsMatches"]


class GetSequenceObservationsMatches(BaseModel):
    id: Any
    execution: "GetSequenceObservationsMatchesExecution"


class GetSequenceObservationsMatchesExecution(BaseModel):
    atom_records: "GetSequenceObservationsMatchesExecutionAtomRecords" = Field(
        alias="atomRecords"
    )
    config: Optional["GetSequenceObservationsMatchesExecutionConfig"]
    digest: Optional["GetSequenceObservationsMatchesExecutionDigest"]


class GetSequenceObservationsMatchesExecutionAtomRecords(BaseModel):
    matches: List["GetSequenceObservationsMatchesExecutionAtomRecordsMatches"]


class GetSequenceObservationsMatchesExecutionAtomRecordsMatches(BaseModel):
    instrument: Instrument
    steps: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesSteps"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesSteps(BaseModel):
    matches: List[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatches"
    ]


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatches(BaseModel):
    execution_state: StepExecutionState = Field(alias="executionState")
    interval: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesInterval"
    ]
    step_config: Union[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesStepConfigStepConfig",
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesStepConfigGcal",
    ] = Field(alias="stepConfig", discriminator="typename__")
    observe_class: ObserveClass = Field(alias="observeClass")
    qa_state: Optional[DatasetQaState] = Field(alias="qaState")
    telescope_config: (
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfig"
    ) = Field(alias="telescopeConfig")
    gmos_north: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorth"
    ] = Field(alias="gmosNorth")
    instrument: Instrument
    gmos_south: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouth"
    ] = Field(alias="gmosSouth")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesInterval(
    BaseModel
):
    duration: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesIntervalDuration"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesIntervalDuration(
    BaseModel
):
    seconds: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesStepConfigStepConfig(
    BaseModel
):
    typename__: Literal["Bias", "Dark", "Science", "SmartGcal", "StepConfig"] = Field(
        alias="__typename"
    )
    step_type: StepType = Field(alias="stepType")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesStepConfigGcal(
    BaseModel
):
    typename__: Literal["Gcal"] = Field(alias="__typename")
    step_type: StepType = Field(alias="stepType")
    continuum: Optional[GcalContinuum]
    arcs: List[GcalArc]
    filter: GcalFilter
    diffuser: GcalDiffuser
    shutter: GcalShutter


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfig(
    BaseModel
):
    offset: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffset"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffset(
    BaseModel
):
    p: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffsetP"
    q: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffsetQ"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffsetP(
    BaseModel
):
    arcseconds: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffsetQ(
    BaseModel
):
    arcseconds: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorth(
    BaseModel
):
    exposure: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthExposure"
    readout: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthReadout"
    dtax: GmosDtax
    roi: GmosRoi
    grating_config: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthGratingConfig"
    ] = Field(alias="gratingConfig")
    filter: Optional[GmosNorthFilter]
    fpu: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthFpu"
    ]
    central_wavelength: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthCentralWavelength"
    ] = Field(alias="centralWavelength")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthExposure(
    BaseModel
):
    seconds: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthReadout(
    BaseModel
):
    x_bin: GmosBinning = Field(alias="xBin")
    y_bin: GmosBinning = Field(alias="yBin")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthGratingConfig(
    BaseModel
):
    grating: GmosNorthGrating
    wavelength: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthGratingConfigWavelength"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthGratingConfigWavelength(
    BaseModel
):
    nanometers: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthFpu(
    BaseModel
):
    builtin: Optional[GmosNorthBuiltinFpu]


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthCentralWavelength(
    BaseModel
):
    nanometers: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouth(
    BaseModel
):
    exposure: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthExposure"
    readout: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthReadout"
    dtax: GmosDtax
    roi: GmosRoi
    grating_config: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthGratingConfig"
    ] = Field(alias="gratingConfig")
    filter: Optional[GmosSouthFilter]
    fpu: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthFpu"
    ]
    central_wavelength: Optional[
        "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthCentralWavelength"
    ] = Field(alias="centralWavelength")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthExposure(
    BaseModel
):
    seconds: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthReadout(
    BaseModel
):
    x_bin: GmosBinning = Field(alias="xBin")
    y_bin: GmosBinning = Field(alias="yBin")


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthGratingConfig(
    BaseModel
):
    grating: GmosSouthGrating
    wavelength: "GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthGratingConfigWavelength"


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthGratingConfigWavelength(
    BaseModel
):
    nanometers: Any


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthFpu(
    BaseModel
):
    builtin: Optional[GmosSouthBuiltinFpu]


class GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthCentralWavelength(
    BaseModel
):
    nanometers: Any


class GetSequenceObservationsMatchesExecutionConfig(BaseModel):
    instrument: Instrument
    gmos_north: Optional["GetSequenceObservationsMatchesExecutionConfigGmosNorth"] = (
        Field(alias="gmosNorth")
    )
    gmos_south: Optional["GetSequenceObservationsMatchesExecutionConfigGmosSouth"] = (
        Field(alias="gmosSouth")
    )


class GetSequenceObservationsMatchesExecutionConfigGmosNorth(BaseModel):
    acquisition: Optional[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisition"
    ]
    science: Optional["GetSequenceObservationsMatchesExecutionConfigGmosNorthScience"]


class GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisition(BaseModel):
    next_atom: (
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionNextAtom"
    ) = Field(alias="nextAtom")
    possible_future: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionPossibleFuture"
    ] = Field(alias="possibleFuture")


class GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionNextAtom(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionNextAtomSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionNextAtomSteps(
    SchedulerAtomStepNorth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionPossibleFuture(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionPossibleFutureSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionPossibleFutureSteps(
    SchedulerAtomStepNorth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosNorthScience(BaseModel):
    next_atom: (
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthScienceNextAtom"
    ) = Field(alias="nextAtom")
    possible_future: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthSciencePossibleFuture"
    ] = Field(alias="possibleFuture")


class GetSequenceObservationsMatchesExecutionConfigGmosNorthScienceNextAtom(BaseModel):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthScienceNextAtomSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosNorthScienceNextAtomSteps(
    SchedulerAtomStepNorth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosNorthSciencePossibleFuture(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosNorthSciencePossibleFutureSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosNorthSciencePossibleFutureSteps(
    SchedulerAtomStepNorth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosSouth(BaseModel):
    acquisition: Optional[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisition"
    ]
    science: Optional["GetSequenceObservationsMatchesExecutionConfigGmosSouthScience"]


class GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisition(BaseModel):
    next_atom: (
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionNextAtom"
    ) = Field(alias="nextAtom")
    possible_future: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionPossibleFuture"
    ] = Field(alias="possibleFuture")


class GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionNextAtom(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionNextAtomSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionNextAtomSteps(
    SchedulerAtomStepSouth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionPossibleFuture(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionPossibleFutureSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionPossibleFutureSteps(
    SchedulerAtomStepSouth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosSouthScience(BaseModel):
    next_atom: (
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthScienceNextAtom"
    ) = Field(alias="nextAtom")
    possible_future: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthSciencePossibleFuture"
    ] = Field(alias="possibleFuture")


class GetSequenceObservationsMatchesExecutionConfigGmosSouthScienceNextAtom(BaseModel):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthScienceNextAtomSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosSouthScienceNextAtomSteps(
    SchedulerAtomStepSouth
):
    pass


class GetSequenceObservationsMatchesExecutionConfigGmosSouthSciencePossibleFuture(
    BaseModel
):
    description: Optional[str]
    observe_class: ObserveClass = Field(alias="observeClass")
    steps: List[
        "GetSequenceObservationsMatchesExecutionConfigGmosSouthSciencePossibleFutureSteps"
    ]


class GetSequenceObservationsMatchesExecutionConfigGmosSouthSciencePossibleFutureSteps(
    SchedulerAtomStepSouth
):
    pass


class GetSequenceObservationsMatchesExecutionDigest(BaseModel):
    setup: "GetSequenceObservationsMatchesExecutionDigestSetup"


class GetSequenceObservationsMatchesExecutionDigestSetup(BaseModel):
    full: "GetSequenceObservationsMatchesExecutionDigestSetupFull"
    reacquisition: "GetSequenceObservationsMatchesExecutionDigestSetupReacquisition"


class GetSequenceObservationsMatchesExecutionDigestSetupFull(BaseModel):
    seconds: Any


class GetSequenceObservationsMatchesExecutionDigestSetupReacquisition(BaseModel):
    seconds: Any


GetSequence.model_rebuild()
GetSequenceObservations.model_rebuild()
GetSequenceObservationsMatches.model_rebuild()
GetSequenceObservationsMatchesExecution.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecords.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatches.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesSteps.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatches.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesInterval.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfig.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesTelescopeConfigOffset.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorth.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosNorthGratingConfig.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouth.model_rebuild()
GetSequenceObservationsMatchesExecutionAtomRecordsMatchesStepsMatchesGmosSouthGratingConfig.model_rebuild()
GetSequenceObservationsMatchesExecutionConfig.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorth.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisition.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionNextAtom.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthAcquisitionPossibleFuture.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthScience.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthScienceNextAtom.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosNorthSciencePossibleFuture.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouth.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisition.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionNextAtom.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthAcquisitionPossibleFuture.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthScience.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthScienceNextAtom.model_rebuild()
GetSequenceObservationsMatchesExecutionConfigGmosSouthSciencePossibleFuture.model_rebuild()
GetSequenceObservationsMatchesExecutionDigest.model_rebuild()
GetSequenceObservationsMatchesExecutionDigestSetup.model_rebuild()
