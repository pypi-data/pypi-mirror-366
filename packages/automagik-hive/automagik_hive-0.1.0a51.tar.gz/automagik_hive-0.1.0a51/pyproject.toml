[project]
name = "automagik-hive"
version = "0.1.0a51"
description = "Automagik Multi-Agent Framework - Extensible Agent Creation System"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    {name = "Automagik", email = "hive@namastex.ai"}
]
keywords = ["ai", "agents", "multi-agent", "framework", "agno"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Production dependencies - organized by function for maintainability
dependencies = [
    # === Core Framework ===
    # Agno bundles: httpx, pydantic, python-dotenv, rich, pyyaml, gitpython, typer
    "agno==1.7.5",
    # === System Utilities ===
    "aiofiles>=24.1.0", # Async file operations
    "jinja2>=3.1.6", # Template rendering
    "markdown>=3.8.2", # Markdown processing
    "watchdog>=6.0.0", # File system monitoring
    "psutil>=5.9.0", # System process utilities
    # === Database Stack ===
    "asyncpg>=0.29.0", # Async PostgreSQL driver
    "pgvector>=0.2.0", # Vector operations for PostgreSQL
    "alembic>=1.16.4", # Database migrations
    "psycopg[binary]>=3.1.0", # PostgreSQL adapter
    "psycopg-pool>=3.1.0", # Connection pooling
    "sqlalchemy>=2.0.0", # ORM and database toolkit
    # === AI Providers ===
    "anthropic>=0.31.0", # Claude/Anthropic API
    "openai>=1.93.2", # OpenAI API (GPT-4, etc.)
    "cohere>=5.15.0", # Cohere API
    "google-generativeai>=0.8.5", # Gemini API
    "google-genai>=1.25.0", # Google AI SDK
    # === Web Framework ===
    "fastapi>=0.116.0", # High-performance web framework
    "uvicorn>=0.35.0", # ASGI server
    "aiohttp>=3.12.14", # Async HTTP client/server
    "requests>=2.32.4", # HTTP library
    # === Observability & Integration ===
    "mcp>=1.10.1", # Model Context Protocol
    "loguru>=0.7.3", # Enhanced logging
    "langwatch>=0.2.9", # LLM monitoring
    "openinference-instrumentation-agno>=0.1.9", # Agno instrumentation
    # === Data Processing ===
    "pandas>=2.3.1", # Data manipulation and analysis
    "docker>=7.1.0",
]

[project.optional-dependencies]
# Development and testing dependencies
dev = [
    # === Testing Framework ===
    "pytest>=8.4.1",             # Testing framework
    "pytest-asyncio>=1.0.0",     # Async testing support
    "pytest-cov>=6.2.1",         # Coverage reporting
    "pytest-mock>=3.14.1",       # Mocking utilities
    "coverage>=7.9.2",           # Code coverage analysis
    "faker>=37.4.2",             # Test data generation
    
    # === Development Tools ===
    "ruff>=0.12.3",              # Fast Python linter and formatter
    "mypy>=1.16.1",              # Static type checking
    
    # === Scenario Testing ===
    "langwatch-scenario>=0.7.8", # LLM scenario testing
]

# Analytics and data science stack (optional, excluded from production Docker)  
analytics = [
    # === Core Data Science ===
    "numpy>=1.24.0",             # Numerical computing
    "pandas>=2.0.0",             # Data manipulation and analysis
    "scipy>=1.16.0",             # Scientific computing
    
    # === Visualization ===
    "matplotlib>=3.10.3",        # Plotting library
    "seaborn>=0.13.2",           # Statistical data visualization
    "plotly>=6.2.0",             # Interactive plotting
    
    # === Machine Learning ===
    "sentence-transformers>=2.2.0", # Sentence embeddings
]

[project.urls]
Homepage = "https://github.com/namastex/automagik-hive"
Repository = "https://github.com/namastex/automagik-hive"
Documentation = "https://docs.automagik.ai"
"Bug Tracker" = "https://github.com/namastex/automagik-hive/issues"

[project.scripts]
automagik-hive = "cli.main:main"
automagik-hive-server = "api.serve:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ============================================================================
# UV Configuration
# ============================================================================
[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "coverage>=7.9.2",
    "ruff>=0.12.3",
    "mypy>=1.16.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "faker>=37.4.2",
]

# UV workspace configuration
[tool.uv.workspace]
members = ["."]

# ============================================================================
# Ruff Configuration (replaces black, isort, flake8, etc.)
# ============================================================================
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    "*.egg-info",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable comprehensive linting rules for code quality and consistency
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    # "COM",  # flake8-commas (disabled due to formatter conflicts)
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy-specific rules
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]

ignore = [
    # Documentation rules (relaxed for development velocity)
    "D100", "D101", "D102", "D103", "D104", "D105", "D107", "D205",
    # Line length handled by formatter
    "E501",
    # Exception message rules (can be overly strict)
    "TRY003", "EM101", "EM102",
    # Import organization (handled by isort settings)
    "E402",
    # Magic value comparisons (common in tests and configuration)
    "PLR2004",
    # Complexity rules (can be overly restrictive for legitimate complex code)
    "PLR0913", "PLR0912", "PLR0915", "PLR0911",
    # Try-else rules (sometimes else block is cleaner without)
    "TRY300",
    # Global statements (legitimate use in configuration)
    "PLW0603",
    # Builtin open (pathlib not always better for simple operations)
    "PTH123",
    # ALPHA RELEASE TEMPORARY IGNORES - TODO: Fix in post-alpha cleanup
    "BLE001",    # Blind except - common in error handling
    "PLC0415",   # Import outside top-level - used for lazy imports
    "ARG001",    # Unused function argument - may be required by interfaces
    "ARG002",    # Unused method argument - may be required by interfaces  
    "ARG003",    # Unused class method argument - may be required by interfaces
    "PTH109",    # os.getcwd - legacy code patterns
    "PTH108",    # os.unlink - legacy code patterns
    "PTH110",    # os.path.exists - legacy code patterns
    "PTH119",    # os.path.basename - legacy code patterns
    "PTH120",    # os.path.dirname - legacy code patterns
    "DTZ005",    # datetime.now without timezone - acceptable for logs
    "TRY301",    # raise-within-try - sometimes necessary
    "PT011",     # pytest-raises-too-broad - acceptable for integration tests
    "G004",      # logging-f-string - acceptable pattern
    "PERF401",   # manual-list-comprehension - readability over micro-optimization
    "PLW2901",   # redefined-loop-name - common in processing pipelines
    "TRY002",    # raise-vanilla-class - sometimes appropriate
    "SLF001",    # private-member-access - needed for testing/debugging
    "B904",      # raise-without-from-inside-except - sometimes appropriate
    "E722",      # bare-except - used in robust error handling
    "F821",      # undefined-name - type checking imports
    "F401",      # unused-import - may be used in dynamic imports
    "F403",      # star-import - used in __init__.py files
    "F811",      # redefined-unused - factory patterns
    "F823",      # undefined-local - development code
    "PTH122",    # os.path.splitext - legacy patterns
    "PTH117",    # os.path.isabs - legacy patterns  
    "PTH100",    # os.path.abspath - legacy patterns
    "PTH103",    # os.makedirs - legacy patterns
    "DTZ006",    # datetime.fromtimestamp - acceptable for logging
    "DTZ003",    # datetime.utcnow - acceptable for logging
    "RUF005",    # list concatenation - readable pattern
    "RUF006",    # asyncio.create_task - fire-and-forget tasks
    "RUF034",    # useless if-else - may be more readable
    "RUF012",    # mutable-class-default - acceptable in some contexts
    "B018",      # useless-expression - development/debugging code
    "B008",      # function-call-in-default-argument - acceptable patterns
    "B017",      # assert-raises-exception - test patterns
    "B019",      # cached-instance-method - performance optimization
    "B023",      # function-uses-loop-variable - sometimes intended
    "B007",      # unused-loop-control-variable - iteration patterns
    "INP001",    # implicit-namespace-package - alembic structure
    "ERA001",    # commented-out-code - examples and documentation
    "SIM102",    # collapsible-if - may be more readable
    "SIM105",    # suppressible-exception - explicit error handling
    "SIM108",    # if-else-block - may be more readable
    "SIM117",    # multiple-with-statements - readability
    "ICN001",    # import-conventions - project-specific naming
    "TRY203",    # useless-try-except - defensive programming
    "TRY004",    # type-check-without-type-error - broad exception handling
    "PYI036",    # bad-exit-annotation - typing patterns
    "UP035",     # deprecated-import - legacy compatibility
    "A001",      # builtin-variable-shadowing - common variable names
    "A002",      # builtin-argument-shadowing - common parameter names
    "N818",      # error-suffix-on-exception-name - naming preference
    "PD901",     # pandas-df-variable-name - acceptable naming
    "PTH112",    # os.path.isdir - legacy patterns
    "PTH202",    # os.path.getsize - legacy patterns  
    "PTH204",    # os.path.getmtime - legacy patterns
    "PTH207",    # glob - legacy patterns
    "PTH208",    # os.listdir - legacy patterns
    # Additional coding pattern rules
    "PLC0206",   # dict-index-missing-items - acceptable patterns
    "PLE1205",   # logging-too-many-args - acceptable logging patterns
    "PLW0602",   # global-variable-not-assigned - configuration patterns
    "PLW1508",   # invalid-envvar-default - acceptable defaults
    "G003",      # logging-string-concat - acceptable logging patterns  
    "G201",      # logging-exc-info - acceptable logging patterns
    "W293",      # blank-line-with-whitespace - formatting preference
    "E721",      # type-comparison - sometimes necessary
    "PT017",     # pytest-assert-in-except - test patterns
    "PTH101",    # os.chmod - system interaction patterns
    "PTH107",    # os.remove - system interaction patterns
    "RUF001",    # ambiguous-unicode-character-string - acceptable usage
    "TRY401",    # verbose-log-message - detailed logging preference
    "T201",      # print statements - acceptable in CLI applications
    "PTH118",    # os.path.join - legacy patterns
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "ARG", "PLC0415", "SLF001", "INP001", "BLE001", "SIM117", "DTZ"]  # Allow imports in functions, private access, namespace packages, broad exceptions, nested with statements, and datetime without timezone for testing
"api/**/*.py" = ["D"]
"ai/**/*.py" = ["D"]
"lib/**/*.py" = ["D"]

[tool.ruff.lint.isort]
known-first-party = ["automagik", "hive", "ai", "api", "lib"]
known-third-party = ["agno", "anthropic", "pydantic", "sqlalchemy", "fastapi", "uvicorn"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# MyPy Configuration (for type checking)
# ============================================================================
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
# Skip imports that have problematic module structures
follow_imports = "skip"

# Exclude problematic third-party modules with duplicate imports
exclude = [
    ".venv/",
    "__pycache__/",
    ".git/",
    "build/",
    "dist/"
]

# External AI and ML dependencies - ignore missing imports and relax typing
[[tool.mypy.overrides]]
module = [
    "agno.*",
    "anthropic.*", 
    "openai.*",
    "cohere.*",
    "google.*",
    "sentence_transformers.*",
    "pgvector.*",
    "asyncpg.*",
    "psycopg.*",
    "alembic.*",
    "langwatch.*",
    "openinference.*",
    "uvicorn.*",
    "aiohttp.*",
    "aiofiles.*",
    "loguru.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "scipy.*"
]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Test files - STRICT TYPE CHECKING ENFORCED FOR GENIE STYLE ENFORCER
[[tool.mypy.overrides]]
module = "tests.*"
strict = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true

# ============================================================================
# Pytest Configuration
# ============================================================================ 
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["ai", "api", "lib"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ============================================================================
# Hatchling Build Configuration
# ============================================================================
[tool.hatch.build.targets.wheel]
packages = ["ai", "api", "lib", "cli", "docker"]

[tool.hatch.build.targets.sdist]
include = [
    "/ai",
    "/api", 
    "/lib",
    "/cli",
    "/docker",
    "/tests",
    "/README.md",
    "/pyproject.toml",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "pathlib>=1.0.1",
    "pip-audit>=2.9.0",
    "safety>=3.6.0",
    "twine>=6.1.0",
    "types-pyyaml>=6.0.12.20250516",
]
