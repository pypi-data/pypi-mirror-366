#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞.
"""

import ast
import sys
from pathlib import Path


def validate_path_resolver_implementation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é PathResolver –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."""
    print("=== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ PathResolver ===")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
    file_path = Path("offers_check_marketplaces/user_data_manager.py")
    if not file_path.exists():
        print("‚ùå –§–∞–π–ª user_data_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    checks = [
        # Requirement 4.1: WHEN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OFFERS_CHECK_DATA_DIR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ THEN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å
        ("OFFERS_CHECK_DATA_DIR", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR"),
        ("os.environ.get('OFFERS_CHECK_DATA_DIR')", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("_resolve_custom_path", "–ú–µ—Ç–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—É—Ç–∏"),
        
        # Requirement 4.2: WHEN —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç THEN –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        ("_ensure_custom_directory_exists", "–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
        ("path.mkdir(parents=True, exist_ok=True)", "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏"),
        
        # Requirement 4.3: WHEN –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ THEN –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        ("_validate_custom_path", "–ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—É—Ç–∏"),
        ("_validate_directory_access", "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
        ("os.access(", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"),
        ("DirectoryCreationError", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
        ("PermissionError", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"),
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        ("validate_and_create_structure", "–ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"),
        ("expanduser", "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—É—Ç–µ–π (~)"),
        ("resolve()", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏"),
    ]
    
    results = []
    for check, description in checks:
        if check in content:
            print(f"‚úì {description}")
            results.append(True)
        else:
            print(f"‚ùå {description} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {check}")
            results.append(False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞ PathResolver
    try:
        tree = ast.parse(content)
        path_resolver_found = False
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef) and node.name == "PathResolver":
                path_resolver_found = True
                print("‚úì –ö–ª–∞—Å—Å PathResolver –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
                methods = [method.name for method in node.body if isinstance(method, ast.FunctionDef)]
                required_methods = [
                    "__init__", "resolve_data_directory", "_resolve_custom_path",
                    "_validate_custom_path", "_ensure_custom_directory_exists",
                    "_validate_directory_access", "validate_and_create_structure"
                ]
                
                for method in required_methods:
                    if method in methods:
                        print(f"‚úì –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
                        results.append(True)
                    else:
                        print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        results.append(False)
                break
        
        if not path_resolver_found:
            print("‚ùå –ö–ª–∞—Å—Å PathResolver –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append(False)
    
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ: {e}")
        return False
    
    success_rate = sum(results) / len(results) * 100
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {success_rate:.1f}% ({sum(results)}/{len(results)})")
    
    return success_rate >= 90


def validate_user_data_manager_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é PathResolver –≤ UserDataManager."""
    print("\n=== –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ UserDataManager ===")
    
    file_path = Path("offers_check_marketplaces/user_data_manager.py")
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ("self.path_resolver = PathResolver(self.platform_detector)", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PathResolver —Å platform_detector"),
        ("custom_path = os.environ.get('OFFERS_CHECK_DATA_DIR')", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ initialize_directories"),
        ("validate_and_create_structure", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—É—Ç–µ–π"),
    ]
    
    results = []
    for check, description in checks:
        if check in content:
            print(f"‚úì {description}")
            results.append(True)
        else:
            print(f"‚ùå {description}")
            results.append(False)
    
    success_rate = sum(results) / len(results) * 100
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {success_rate:.1f}% ({sum(results)}/{len(results)})")
    
    return success_rate >= 80


def validate_error_handling():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫."""
    print("\n=== –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    file_path = Path("offers_check_marketplaces/user_data_manager.py")
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    error_messages = [
        "—è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π",
        "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é",
        "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
        "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å",
        "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ",
        "–ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: chmod 755",
    ]
    
    results = []
    for message in error_messages:
        if message in content:
            print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message}")
            results.append(True)
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            results.append(False)
    
    success_rate = sum(results) / len(results) * 100
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {success_rate:.1f}% ({sum(results)}/{len(results)})")
    
    return success_rate >= 70


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é."""
    print("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR\n")
    
    try:
        path_resolver_ok = validate_path_resolver_implementation()
        integration_ok = validate_user_data_manager_integration()
        error_handling_ok = validate_error_handling()
        
        if path_resolver_ok and integration_ok and error_handling_ok:
            print("\nüéâ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
            print("\n–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            print("- ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR")
            print("- ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
            print("- ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            print("- ‚úì –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
            print("- ‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
            print("- ‚úì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UserDataManager")
            return True
        else:
            print("\n‚ùå –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)