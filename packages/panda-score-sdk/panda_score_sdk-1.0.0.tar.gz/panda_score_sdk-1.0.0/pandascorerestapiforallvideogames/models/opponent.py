# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.opponent_type_enum import OpponentTypeEnum


class Opponent(object):

    """Implementation of the 'Opponent' model.

    Attributes:
        opponent (BasePlayer | BaseTeam): The model property of type
            BasePlayer | BaseTeam.
        mtype (OpponentTypeEnum): The model property of type OpponentTypeEnum.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "opponent": 'opponent',
        "mtype": 'type'
    }

    def __init__(self,
                 opponent=None,
                 mtype=None):
        """Constructor for the Opponent class"""

        # Initialize members of the class
        self.opponent = opponent 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        opponent = APIHelper.deserialize_union_type(UnionTypeLookUp.get('BaseOpponent'), dictionary.get('opponent'), False) if dictionary.get('opponent') is not None else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        # Return an object of this model
        return cls(opponent,
                   mtype)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return UnionTypeLookUp.get('BaseOpponent').validate(dictionary.opponent).is_valid \
                and APIHelper.is_valid_type(value=dictionary.mtype,
                                            type_callable=lambda value: OpponentTypeEnum.validate(value))

        if not isinstance(dictionary, dict):
            return False

        return UnionTypeLookUp.get('BaseOpponent').validate(dictionary.get('opponent')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('type'),
                                        type_callable=lambda value: OpponentTypeEnum.validate(value))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'opponent={self.opponent!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'opponent={self.opponent!s}, '
                f'mtype={self.mtype!s})')
