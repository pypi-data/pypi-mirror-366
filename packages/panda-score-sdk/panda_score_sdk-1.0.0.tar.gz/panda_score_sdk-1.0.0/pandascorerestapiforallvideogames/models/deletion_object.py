# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.videogame_id_enum import VideogameIDEnum


class DeletionObject(object):

    """Implementation of the 'DeletionObject' model.

    Attributes:
        deleted_at (datetime): The model property of type datetime.
        reason (str | IncidentDeletionReasonDeletedEnum): The model property
            of type str | IncidentDeletionReasonDeletedEnum.
        videogame_id (VideogameIDEnum): A videogame ID

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deleted_at": 'deleted_at',
        "reason": 'reason',
        "videogame_id": 'videogame_id'
    }

    def __init__(self,
                 deleted_at=None,
                 reason=None,
                 videogame_id=None):
        """Constructor for the DeletionObject class"""

        # Initialize members of the class
        self.deleted_at = APIHelper.apply_datetime_converter(deleted_at, APIHelper.RFC3339DateTime) if deleted_at else None 
        self.reason = reason 
        self.videogame_id = videogame_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        deleted_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("deleted_at")).datetime if dictionary.get("deleted_at") else None
        reason = APIHelper.deserialize_union_type(UnionTypeLookUp.get('IncidentDeletionReason'), dictionary.get('reason'), False) if dictionary.get('reason') is not None else None
        videogame_id = dictionary.get("videogame_id") if dictionary.get("videogame_id") else None
        # Return an object of this model
        return cls(deleted_at,
                   reason,
                   videogame_id)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.deleted_at,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and UnionTypeLookUp.get('IncidentDeletionReason').validate(dictionary.reason).is_valid \
                and APIHelper.is_valid_type(value=dictionary.videogame_id,
                                            type_callable=lambda value: VideogameIDEnum.validate(value))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('deleted_at'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and UnionTypeLookUp.get('IncidentDeletionReason').validate(dictionary.get('reason')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('videogame_id'),
                                        type_callable=lambda value: VideogameIDEnum.validate(value))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'deleted_at={self.deleted_at!r}, '
                f'reason={self.reason!r}, '
                f'videogame_id={self.videogame_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'deleted_at={self.deleted_at!s}, '
                f'reason={self.reason!s}, '
                f'videogame_id={self.videogame_id!s})')
