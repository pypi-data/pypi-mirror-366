# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.types.union_types.any_of import AnyOf
from apimatic_core.types.union_types.leaf_type import LeafType
from apimatic_core.types.union_types.one_of import OneOf
from apimatic_core.types.union_types.union_type_context import UnionTypeContext as Context
from pandascorerestapiforallvideogames.models.base_player import BasePlayer
from pandascorerestapiforallvideogames.models.base_team import BaseTeam
from pandascorerestapiforallvideogames.models.betting_csgo_game import BettingCSGOGame
from pandascorerestapiforallvideogames.models.betting_dota_2_game import BettingDota2Game
from pandascorerestapiforallvideogames.models.betting_lo_l_game import BettingLoLGame
from pandascorerestapiforallvideogames.models.betting_ow_game import BettingOwGame
from pandascorerestapiforallvideogames.models.betting_pubg_game import BettingPUBGGame
from pandascorerestapiforallvideogames.models.bracket_standing import BracketStanding
from pandascorerestapiforallvideogames.models.deletion_incident import DeletionIncident
from pandascorerestapiforallvideogames.models.group_standing import GroupStanding
from pandascorerestapiforallvideogames.models.incident_deletion_reason_deleted_enum import IncidentDeletionReasonDeletedEnum
from pandascorerestapiforallvideogames.models.incident_of_type_league import IncidentOfTypeLeague
from pandascorerestapiforallvideogames.models.incident_of_type_match import IncidentOfTypeMatch
from pandascorerestapiforallvideogames.models.incident_of_type_player import IncidentOfTypePlayer
from pandascorerestapiforallvideogames.models.incident_of_type_serie import IncidentOfTypeSerie
from pandascorerestapiforallvideogames.models.incident_of_type_team import IncidentOfTypeTeam
from pandascorerestapiforallvideogames.models.incident_of_type_tournament import IncidentOfTypeTournament
from pandascorerestapiforallvideogames.models.league_videogame_codmw import LeagueVideogameCodmw
from pandascorerestapiforallvideogames.models.league_videogame_csgo import LeagueVideogameCSGO
from pandascorerestapiforallvideogames.models.league_videogame_dota_2 import LeagueVideogameDota2
from pandascorerestapiforallvideogames.models.league_videogame_fifa import LeagueVideogameFifa
from pandascorerestapiforallvideogames.models.league_videogame_fortnite import LeagueVideogameFortnite
from pandascorerestapiforallvideogames.models.league_videogame_lo_l import LeagueVideogameLoL
from pandascorerestapiforallvideogames.models.league_videogame_overwatch import LeagueVideogameOverwatch
from pandascorerestapiforallvideogames.models.league_videogame_pubg import LeagueVideogamePUBG
from pandascorerestapiforallvideogames.models.league_videogame_r_6_siege import LeagueVideogameR6siege
from pandascorerestapiforallvideogames.models.league_videogame_rocket_league import LeagueVideogameRocketLeague
from pandascorerestapiforallvideogames.models.league_videogame_valorant import LeagueVideogameValorant
from pandascorerestapiforallvideogames.models.match_player_opponents_object import MatchPlayerOpponentsObject
from pandascorerestapiforallvideogames.models.match_player_result import MatchPlayerResult
from pandascorerestapiforallvideogames.models.match_team_opponents_object import MatchTeamOpponentsObject
from pandascorerestapiforallvideogames.models.match_team_result import MatchTeamResult
from pandascorerestapiforallvideogames.models.page import Page
from pandascorerestapiforallvideogames.models.tournament_player_rosters import TournamentPlayerRosters
from pandascorerestapiforallvideogames.models.tournament_team_rosters import TournamentTeamRosters
from pandascorerestapiforallvideogames.models.videogame_codmw import VideogameCodmw
from pandascorerestapiforallvideogames.models.videogame_csgo import VideogameCSGO
from pandascorerestapiforallvideogames.models.videogame_dota_2 import VideogameDota2
from pandascorerestapiforallvideogames.models.videogame_fifa import VideogameFifa
from pandascorerestapiforallvideogames.models.videogame_id_enum import VideogameIDEnum
from pandascorerestapiforallvideogames.models.videogame_lo_l import VideogameLoL
from pandascorerestapiforallvideogames.models.videogame_overwatch import VideogameOverwatch
from pandascorerestapiforallvideogames.models.videogame_pubg import VideogamePUBG
from pandascorerestapiforallvideogames.models.videogame_r_6_siege import VideogameR6siege
from pandascorerestapiforallvideogames.models.videogame_rocket_league import VideogameRocketLeague
from pandascorerestapiforallvideogames.models.videogame_slug_enum import VideogameSlugEnum
from pandascorerestapiforallvideogames.models.videogame_valorant import VideogameValorant


class UnionTypeLookUp:

    """The `UnionTypeLookUp` class serves as a utility class for 
    storing and managing type combinator templates.It acts as a container for the templates 
    used in handling various data types within the application.

    """
    _templates = {
        'GetAdditionsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'VideogameIDOrSlug': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'NonDeletionIncident': OneOf(
            [
                LeafType(IncidentOfTypeLeague),
                LeafType(IncidentOfTypeMatch),
                LeafType(IncidentOfTypePlayer),
                LeafType(IncidentOfTypeSerie),
                LeafType(IncidentOfTypeTeam),
                LeafType(IncidentOfTypeTournament)
            ],
            Context.create(
               is_array=True
            )
        ),
        'GetChangesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'Incident': OneOf(
            [
                LeafType(IncidentOfTypeLeague),
                LeafType(IncidentOfTypeMatch),
                LeafType(IncidentOfTypePlayer),
                LeafType(IncidentOfTypeSerie),
                LeafType(IncidentOfTypeTeam),
                LeafType(IncidentOfTypeTournament),
                LeafType(DeletionIncident)
            ],
            Context.create(
               is_array=True
            )
        ),
        'GetDeletionsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetIncidentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'LeagueIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'GetLeaguesLeagueIdOrSlugMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesLeagueIdOrSlugMatchesPastPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesLeagueIdOrSlugMatchesRunningPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesLeagueIdOrSlugMatchesUpcomingPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesLeagueIdOrSlugSeriesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLeaguesLeagueIdOrSlugTournamentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetLivesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetMatchesPastPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetMatchesRunningPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetMatchesUpcomingPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'MatchIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'MatchOpponentsObject': OneOf(
            [
                LeafType(MatchTeamOpponentsObject),
                LeafType(MatchPlayerOpponentsObject)
            ]
        ),
        'GetPlayersPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'PlayerIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'GetPlayersPlayerIdOrSlugMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesPastPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesRunningPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesUpcomingPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'SerieIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'GetSeriesSerieIdOrSlugMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesSerieIdOrSlugMatchesPastPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesSerieIdOrSlugMatchesRunningPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesSerieIdOrSlugMatchesUpcomingPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesSerieIdOrSlugPlayersPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetSeriesSerieIdOrSlugTournamentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTeamsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'TeamIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'GetTeamsTeamIdOrSlugLeaguesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTeamsTeamIdOrSlugMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTeamsTeamIdOrSlugSeriesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTeamsTeamIdOrSlugTournamentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsPastPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsRunningPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsUpcomingPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'TournamentIDOrSlug': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ]
        ),
        'GetTournamentsTournamentIdOrSlugBracketsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsTournamentIdOrSlugMatchesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetTournamentsTournamentIdOrSlugPlayersPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'TournamentRosters': OneOf(
            [
                LeafType(TournamentTeamRosters),
                LeafType(TournamentPlayerRosters)
            ]
        ),
        'GetTournamentsTournamentIdOrSlugStandingsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'Standing': OneOf(
            [
                LeafType(BracketStanding),
                LeafType(GroupStanding)
            ],
            Context.create(
               is_array=True
            )
        ),
        'GetTournamentsTournamentIdOrSlugTeamsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'GetVideogamesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'Videogame': OneOf(
            [
                LeafType(VideogameLoL),
                LeafType(VideogameCSGO),
                LeafType(VideogameDota2),
                LeafType(VideogameOverwatch),
                LeafType(VideogamePUBG),
                LeafType(VideogameRocketLeague),
                LeafType(VideogameCodmw),
                LeafType(VideogameR6siege),
                LeafType(VideogameFifa),
                LeafType(VideogameValorant)
            ],
            Context.create(
               is_array=True
            )
        ),
        'VideogameIDOrSlug2': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ]
        ),
        'Videogame2': OneOf(
            [
                LeafType(VideogameLoL),
                LeafType(VideogameCSGO),
                LeafType(VideogameDota2),
                LeafType(VideogameOverwatch),
                LeafType(VideogamePUBG),
                LeafType(VideogameRocketLeague),
                LeafType(VideogameCodmw),
                LeafType(VideogameR6siege),
                LeafType(VideogameFifa),
                LeafType(VideogameValorant)
            ]
        ),
        'VideogameIDOrSlug3': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ]
        ),
        'GetVideogamesVideogameIdOrSlugLeaguesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'VideogameIDOrSlug4': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ]
        ),
        'GetVideogamesVideogameIdOrSlugSeriesPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'VideogameIDOrSlug5': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ]
        ),
        'GetVideogamesVideogameIdOrSlugTournamentsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'VideogameIDOrSlug6': OneOf(
            [
                LeafType(VideogameIDEnum),
                LeafType(VideogameSlugEnum)
            ]
        ),
        'GetVideogamesVideogameIdOrSlugVersionsPage': OneOf(
            [
                LeafType(int),
                LeafType(Page)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'BettingLeagueVideogame': OneOf(
            [
                LeafType(LeagueVideogameLoL),
                LeafType(LeagueVideogameCSGO),
                LeafType(LeagueVideogameDota2),
                LeafType(LeagueVideogameOverwatch),
                LeafType(LeagueVideogamePUBG),
                LeafType(LeagueVideogameFortnite),
                LeafType(LeagueVideogameRocketLeague),
                LeafType(LeagueVideogameCodmw),
                LeafType(LeagueVideogameR6siege),
                LeafType(LeagueVideogameFifa),
                LeafType(LeagueVideogameValorant)
            ]
        ),
        'BettingGame2': AnyOf(
            [
                LeafType(BettingCSGOGame),
                LeafType(BettingDota2Game),
                LeafType(BettingLoLGame),
                LeafType(BettingOwGame),
                LeafType(BettingPUBGGame)
            ],
            Context.create(
               is_array=True
            )
        ),
        'MatchResult2': AnyOf(
            [
                LeafType(MatchTeamResult),
                LeafType(MatchPlayerResult)
            ],
            Context.create(
               is_array=True
            )
        ),
        'IncidentID': AnyOf(
            [
                LeafType(int)
            ]
        ),
        'IncidentDeletionReason': OneOf(
            [
                LeafType(str),
                LeafType(IncidentDeletionReasonDeletedEnum)
            ]
        ),
        'GameID': AnyOf(
            [
                LeafType(int)
            ]
        ),
        'LeagueVideogame': OneOf(
            [
                LeafType(LeagueVideogameLoL),
                LeafType(LeagueVideogameCSGO),
                LeafType(LeagueVideogameDota2),
                LeafType(LeagueVideogameOverwatch),
                LeafType(LeagueVideogamePUBG),
                LeafType(LeagueVideogameRocketLeague),
                LeafType(LeagueVideogameCodmw),
                LeafType(LeagueVideogameR6siege),
                LeafType(LeagueVideogameFifa),
                LeafType(LeagueVideogameValorant)
            ]
        ),
        'BaseOpponent': OneOf(
            [
                LeafType(BasePlayer),
                LeafType(BaseTeam)
            ]
        ),
        'OpponentID': AnyOf(
            [
                LeafType(int)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'TeamIDOrSlug2': OneOf(
            [
                LeafType(int),
                LeafType(str)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        )
    }

    @staticmethod
    def get(name):
        return UnionTypeLookUp._templates[name]

