# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.market import Market


class MatchMarketGame(object):

    """Implementation of the 'MatchMarketGame' model.

    Attributes:
        id (int): A game ID
        markets (List[Market]): The model property of type List[Market].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "markets": 'markets'
    }

    def __init__(self,
                 id=None,
                 markets=None):
        """Constructor for the MatchMarketGame class"""

        # Initialize members of the class
        self.id = id 
        self.markets = markets 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = APIHelper.deserialize_union_type(UnionTypeLookUp.get('GameID'), dictionary.get('id'), False) if dictionary.get('id') is not None else None
        markets = None
        if dictionary.get('markets') is not None:
            markets = [Market.from_dictionary(x) for x in dictionary.get('markets')]
        # Return an object of this model
        return cls(id,
                   markets)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return UnionTypeLookUp.get('GameID').validate(dictionary.id).is_valid \
                and APIHelper.is_valid_type(value=dictionary.markets,
                                            type_callable=lambda value: Market.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return UnionTypeLookUp.get('GameID').validate(dictionary.get('id')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('markets'),
                                        type_callable=lambda value: Market.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'markets={self.markets!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'markets={self.markets!s})')
