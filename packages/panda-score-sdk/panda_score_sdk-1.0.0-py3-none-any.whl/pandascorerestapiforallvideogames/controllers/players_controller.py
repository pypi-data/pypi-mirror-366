# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.configuration import Server
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pandascorerestapiforallvideogames.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from pandascorerestapiforallvideogames.models.player import Player
from pandascorerestapiforallvideogames.models.match import Match
from pandascorerestapiforallvideogames.exceptions.error_400_exception import Error400Exception


class PlayersController(BaseController):

    """A Controller to access Endpoints in the pandascorerestapiforallvideogames API."""
    def __init__(self, config):
        super(PlayersController, self).__init__(config)

    def get_players(self,
                    filter=None,
                    search=None,
                    sort=None,
                    range=None,
                    page=None,
                    per_page=50):
        """Does a GET request to /players.

        List players

        Args:
            filter (FilterOverPlayers, optional): Options to filter results.
                String fields are case sensitive
            search (SearchOverPlayers, optional): Options to search results
            sort (List[SortOverPlayerEnum], optional): Options to sort results
            range (RangeOverPlayers, optional): Options to select results
                within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Player]: Response from the API. A list of players

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/players')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetPlayersPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Player.from_dictionary)
            .local_error('400', 'Bad request', Error400Exception)
            .local_error('401', 'Unauthorized', Error400Exception)
            .local_error('403', 'Forbidden', Error400Exception)
            .local_error('404', 'Not found', Error400Exception)
            .local_error('422', 'Unprocessable Entity', Error400Exception)
        ).execute()

    def get_players_player_id_or_slug(self,
                                      player_id_or_slug):
        """Does a GET request to /players/{player_id_or_slug}.

        Get a single player by ID or by slug

        Args:
            player_id_or_slug (int | str): A player ID or slug

        Returns:
            Player: Response from the API. A player

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/players/{player_id_or_slug}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('player_id_or_slug')
                            .value(player_id_or_slug)
                            .should_encode(True)
                            .validator(lambda value: UnionTypeLookUp.get('PlayerIDOrSlug').validate(value)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Player.from_dictionary)
            .local_error('400', 'Bad request', Error400Exception)
            .local_error('401', 'Unauthorized', Error400Exception)
            .local_error('403', 'Forbidden', Error400Exception)
            .local_error('404', 'Not found', Error400Exception)
            .local_error('422', 'Unprocessable Entity', Error400Exception)
        ).execute()

    def get_players_player_id_or_slug_matches(self,
                                              player_id_or_slug,
                                              filter=None,
                                              search=None,
                                              sort=None,
                                              range=None,
                                              page=None,
                                              per_page=50):
        """Does a GET request to /players/{player_id_or_slug}/matches.

        List matches for the given player. Only matches with detailed stats.
        Available with the plan _Historical data_.

        Args:
            player_id_or_slug (int | str): A player ID or slug
            filter (FilterOverMatches, optional): Options to filter results.
                String fields are case sensitive
            search (SearchOverMatches, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (RangeOverMatches, optional): Options to select results
                within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/players/{player_id_or_slug}/matches')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('player_id_or_slug')
                            .value(player_id_or_slug)
                            .should_encode(True)
                            .validator(lambda value: UnionTypeLookUp.get('PlayerIDOrSlug').validate(value)))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetPlayersPlayerIdOrSlugMatchesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error400Exception)
            .local_error('401', 'Unauthorized', Error400Exception)
            .local_error('403', 'Forbidden', Error400Exception)
            .local_error('404', 'Not found', Error400Exception)
            .local_error('422', 'Unprocessable Entity', Error400Exception)
        ).execute()
