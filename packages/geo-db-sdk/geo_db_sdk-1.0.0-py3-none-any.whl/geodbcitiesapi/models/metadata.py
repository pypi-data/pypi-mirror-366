# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper


class Metadata(object):

    """Implementation of the 'Metadata' model.

    Result metadata (currently only associated with collection results)

    Attributes:
        current_offset (int): The zero-ary offset into the results (0 is the
            first result)
        total_count (int): The total number of results across pages

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "current_offset": 'currentOffset',
        "total_count": 'totalCount'
    }

    _optionals = [
        'current_offset',
        'total_count',
    ]

    def __init__(self,
                 current_offset=APIHelper.SKIP,
                 total_count=APIHelper.SKIP):
        """Constructor for the Metadata class"""

        # Initialize members of the class
        if current_offset is not APIHelper.SKIP:
            self.current_offset = current_offset 
        if total_count is not APIHelper.SKIP:
            self.total_count = total_count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        current_offset = dictionary.get("currentOffset") if dictionary.get("currentOffset") else APIHelper.SKIP
        total_count = dictionary.get("totalCount") if dictionary.get("totalCount") else APIHelper.SKIP
        # Return an object of this model
        return cls(current_offset,
                   total_count)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!r}, '
                f'total_count={(self.total_count if hasattr(self, "total_count") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!s}, '
                f'total_count={(self.total_count if hasattr(self, "total_count") else None)!s})')
