# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from geodbcitiesapi.api_helper import APIHelper
from geodbcitiesapi.configuration import Server
from geodbcitiesapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from geodbcitiesapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from geodbcitiesapi.models.currencies_response import CurrenciesResponse
from geodbcitiesapi.models.languages_response import LanguagesResponse
from geodbcitiesapi.models.locales_response import LocalesResponse
from geodbcitiesapi.models.time_zones_response import TimeZonesResponse
from geodbcitiesapi.models.time_zone_response import TimeZoneResponse
from geodbcitiesapi.models.date_time_response import DateTimeResponse
from geodbcitiesapi.models.time_response import TimeResponse
from geodbcitiesapi.exceptions.base_response_exception import BaseResponseException
from geodbcitiesapi.exceptions.api_exception import APIException


class LocaleController(BaseController):

    """A Controller to access Endpoints in the geodbcitiesapi API."""
    def __init__(self, config):
        super(LocaleController, self).__init__(config)

    def get_currencies_using_get(self,
                                 country_id,
                                 hateoas_mode=True,
                                 limit=10,
                                 offset=0):
        """Does a GET request to /locale/currencies.

        Find currencies, filtering by optional criteria. If no criteria are
        set, you will get back all known currencies.

        Args:
            country_id (str): Currencies for this country id
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results

        Returns:
            CurrenciesResponse: Response from the API. A list of currencies

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/currencies')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('countryId')
                         .value(country_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CurrenciesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_languages_using_get(self,
                                hateoas_mode=True,
                                limit=10,
                                offset=0):
        """Does a GET request to /locale/languages.

        Get all supported languages

        Args:
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results

        Returns:
            LanguagesResponse: Response from the API. A list of languages
                supported by the system

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/languages')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LanguagesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_locales_using_get(self,
                              hateoas_mode=True,
                              limit=10,
                              offset=0):
        """Does a GET request to /locale/locales.

        Get all known locales

        Args:
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results

        Returns:
            LocalesResponse: Response from the API. A list of locales

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/locales')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocalesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_timezones_using_get(self,
                                hateoas_mode=True,
                                limit=10,
                                offset=0):
        """Does a GET request to /locale/timezones.

        Get all known time-zones

        Args:
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results

        Returns:
            TimeZonesResponse: Response from the API. A list of time-zones

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/timezones')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TimeZonesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_time_zone_using_get(self,
                                zone_id):
        """Does a GET request to /locale/timezones/{zoneId}.

        Get time-zone

        Args:
            zone_id (str): A time-zone id

        Returns:
            TimeZoneResponse: Response from the API. A time-zone

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/timezones/{zoneId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('zoneId')
                            .value(zone_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TimeZoneResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_time_zone_date_time_using_get(self,
                                          zone_id):
        """Does a GET request to /locale/timezones/{zoneId}/dateTime.

        Get time-zone date-time

        Args:
            zone_id (str): A time-zone id

        Returns:
            DateTimeResponse: Response from the API. An ISO-6801 date-time

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/timezones/{zoneId}/dateTime')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('zoneId')
                            .value(zone_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DateTimeResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_time_zone_time_using_get(self,
                                     zone_id):
        """Does a GET request to /locale/timezones/{zoneId}/time.

        Get time-zone time

        Args:
            zone_id (str): A time-zone id

        Returns:
            TimeResponse: Response from the API. An ISO-8601 time response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locale/timezones/{zoneId}/time')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('zoneId')
                            .value(zone_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TimeResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()
