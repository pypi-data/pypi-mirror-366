# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper
from geodbcitiesapi.models.error import Error
from geodbcitiesapi.models.link import Link
from geodbcitiesapi.models.metadata import Metadata
from geodbcitiesapi.models.populated_place_summary import PopulatedPlaceSummary


class PopulatedPlacesResponse(object):

    """Implementation of the 'Populated-Places Response' model.

    A list of populated places

    Attributes:
        errors (List[Error]): The model property of type List[Error].
        links (List[Link]): The model property of type List[Link].
        metadata (Metadata): Result metadata (currently only associated with
            collection results)
        data (List[PopulatedPlaceSummary]): The model property of type
            List[PopulatedPlaceSummary].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "errors": 'errors',
        "links": 'links',
        "metadata": 'metadata',
        "data": 'data'
    }

    _optionals = [
        'errors',
        'links',
        'metadata',
        'data',
    ]

    def __init__(self,
                 errors=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the PopulatedPlacesResponse class"""

        # Initialize members of the class
        if errors is not APIHelper.SKIP:
            self.errors = errors 
        if links is not APIHelper.SKIP:
            self.links = links 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        errors = None
        if dictionary.get('errors') is not None:
            errors = [Error.from_dictionary(x) for x in dictionary.get('errors')]
        else:
            errors = APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [Link.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        metadata = Metadata.from_dictionary(dictionary.get('metadata')) if 'metadata' in dictionary.keys() else APIHelper.SKIP
        data = None
        if dictionary.get('data') is not None:
            data = [PopulatedPlaceSummary.from_dictionary(x) for x in dictionary.get('data')]
        else:
            data = APIHelper.SKIP
        # Return an object of this model
        return cls(errors,
                   links,
                   metadata,
                   data)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s})')
