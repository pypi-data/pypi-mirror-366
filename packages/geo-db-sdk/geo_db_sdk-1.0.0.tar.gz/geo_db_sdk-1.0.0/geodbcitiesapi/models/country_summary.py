# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper


class CountrySummary(object):

    """Implementation of the 'Country Summary' model.

    Minimal country info

    Attributes:
        code (str): The ISO-3166 country code
        currency_codes (List[str]): A list of supported ISO-4217 currency codes
        name (str): The country name (varies by languageCode)
        wiki_data_id (str): The country WikiData id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "currency_codes": 'currencyCodes',
        "name": 'name',
        "wiki_data_id": 'wikiDataId'
    }

    _optionals = [
        'code',
        'currency_codes',
        'name',
        'wiki_data_id',
    ]

    def __init__(self,
                 code=APIHelper.SKIP,
                 currency_codes=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 wiki_data_id=APIHelper.SKIP):
        """Constructor for the CountrySummary class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        if currency_codes is not APIHelper.SKIP:
            self.currency_codes = currency_codes 
        if name is not APIHelper.SKIP:
            self.name = name 
        if wiki_data_id is not APIHelper.SKIP:
            self.wiki_data_id = wiki_data_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        currency_codes = dictionary.get("currencyCodes") if dictionary.get("currencyCodes") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        wiki_data_id = dictionary.get("wikiDataId") if dictionary.get("wikiDataId") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   currency_codes,
                   name,
                   wiki_data_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'currency_codes={(self.currency_codes if hasattr(self, "currency_codes") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'currency_codes={(self.currency_codes if hasattr(self, "currency_codes") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!s})')
