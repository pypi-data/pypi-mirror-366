# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper


class CountryRegionDetails(object):

    """Implementation of the 'Country Region Details' model.

    Full country region details

    Attributes:
        capital (str): The region's capital city (varies by languageCode)
        country_code (str): An ISO-3166 country code
        fips_code (str): The FIPS 10-4 region code
        iso_code (str): The ISO region code
        name (str): The region name (varies by languageCode)
        num_cities (int): The number of cities in this region
        wiki_data_id (str): The region WikiData id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "capital": 'capital',
        "country_code": 'countryCode',
        "fips_code": 'fipsCode',
        "iso_code": 'isoCode',
        "name": 'name',
        "num_cities": 'numCities',
        "wiki_data_id": 'wikiDataId'
    }

    _optionals = [
        'capital',
        'country_code',
        'fips_code',
        'iso_code',
        'name',
        'num_cities',
        'wiki_data_id',
    ]

    def __init__(self,
                 capital=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 fips_code=APIHelper.SKIP,
                 iso_code=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 num_cities=APIHelper.SKIP,
                 wiki_data_id=APIHelper.SKIP):
        """Constructor for the CountryRegionDetails class"""

        # Initialize members of the class
        if capital is not APIHelper.SKIP:
            self.capital = capital 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if fips_code is not APIHelper.SKIP:
            self.fips_code = fips_code 
        if iso_code is not APIHelper.SKIP:
            self.iso_code = iso_code 
        if name is not APIHelper.SKIP:
            self.name = name 
        if num_cities is not APIHelper.SKIP:
            self.num_cities = num_cities 
        if wiki_data_id is not APIHelper.SKIP:
            self.wiki_data_id = wiki_data_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        capital = dictionary.get("capital") if dictionary.get("capital") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        fips_code = dictionary.get("fipsCode") if dictionary.get("fipsCode") else APIHelper.SKIP
        iso_code = dictionary.get("isoCode") if dictionary.get("isoCode") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        num_cities = dictionary.get("numCities") if dictionary.get("numCities") else APIHelper.SKIP
        wiki_data_id = dictionary.get("wikiDataId") if dictionary.get("wikiDataId") else APIHelper.SKIP
        # Return an object of this model
        return cls(capital,
                   country_code,
                   fips_code,
                   iso_code,
                   name,
                   num_cities,
                   wiki_data_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'capital={(self.capital if hasattr(self, "capital") else None)!r}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!r}, '
                f'fips_code={(self.fips_code if hasattr(self, "fips_code") else None)!r}, '
                f'iso_code={(self.iso_code if hasattr(self, "iso_code") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'num_cities={(self.num_cities if hasattr(self, "num_cities") else None)!r}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'capital={(self.capital if hasattr(self, "capital") else None)!s}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!s}, '
                f'fips_code={(self.fips_code if hasattr(self, "fips_code") else None)!s}, '
                f'iso_code={(self.iso_code if hasattr(self, "iso_code") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'num_cities={(self.num_cities if hasattr(self, "num_cities") else None)!s}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!s})')
