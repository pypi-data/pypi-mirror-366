# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper
from geodbcitiesapi.models.error import Error


class TimeZoneResponse(object):

    """Implementation of the 'Time-Zone Response' model.

    A time-zone

    Attributes:
        errors (List[Error]): The model property of type List[Error].
        id (str): The time-zone id
        name (str): The time-zone name
        raw_utc_offset_hours (int): The number of hours this time-zone is
            offset from UTC

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "errors": 'errors',
        "id": 'id',
        "name": 'name',
        "raw_utc_offset_hours": 'rawUtcOffsetHours'
    }

    _optionals = [
        'errors',
        'id',
        'name',
        'raw_utc_offset_hours',
    ]

    def __init__(self,
                 errors=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 raw_utc_offset_hours=APIHelper.SKIP):
        """Constructor for the TimeZoneResponse class"""

        # Initialize members of the class
        if errors is not APIHelper.SKIP:
            self.errors = errors 
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if raw_utc_offset_hours is not APIHelper.SKIP:
            self.raw_utc_offset_hours = raw_utc_offset_hours 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        errors = None
        if dictionary.get('errors') is not None:
            errors = [Error.from_dictionary(x) for x in dictionary.get('errors')]
        else:
            errors = APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        raw_utc_offset_hours = dictionary.get("rawUtcOffsetHours") if dictionary.get("rawUtcOffsetHours") else APIHelper.SKIP
        # Return an object of this model
        return cls(errors,
                   id,
                   name,
                   raw_utc_offset_hours)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'raw_utc_offset_hours={(self.raw_utc_offset_hours if hasattr(self, "raw_utc_offset_hours") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'raw_utc_offset_hours={(self.raw_utc_offset_hours if hasattr(self, "raw_utc_offset_hours") else None)!s})')
