# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper
from geodbcitiesapi.models.country_details import CountryDetails
from geodbcitiesapi.models.error import Error


class CountryResponse(object):

    """Implementation of the 'Country Response' model.

    Country details response

    Attributes:
        errors (List[Error]): The model property of type List[Error].
        data (CountryDetails): Full country details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "errors": 'errors',
        "data": 'data'
    }

    _optionals = [
        'errors',
        'data',
    ]

    def __init__(self,
                 errors=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the CountryResponse class"""

        # Initialize members of the class
        if errors is not APIHelper.SKIP:
            self.errors = errors 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        errors = None
        if dictionary.get('errors') is not None:
            errors = [Error.from_dictionary(x) for x in dictionary.get('errors')]
        else:
            errors = APIHelper.SKIP
        data = CountryDetails.from_dictionary(dictionary.get('data')) if 'data' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(errors,
                   data)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'errors={(self.errors if hasattr(self, "errors") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s})')
