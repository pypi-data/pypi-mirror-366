# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper


class Currency(object):

    """Implementation of the 'Currency' model.

    Currency info

    Attributes:
        code (str): The ISO-4217 currency code
        country_codes (List[str]): A list of ISO-3166 country codes of
            countries supporting this currency
        symbol (str): The currency symbol

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "country_codes": 'countryCodes',
        "symbol": 'symbol'
    }

    _optionals = [
        'code',
        'country_codes',
        'symbol',
    ]

    def __init__(self,
                 code=APIHelper.SKIP,
                 country_codes=APIHelper.SKIP,
                 symbol=APIHelper.SKIP):
        """Constructor for the Currency class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        if country_codes is not APIHelper.SKIP:
            self.country_codes = country_codes 
        if symbol is not APIHelper.SKIP:
            self.symbol = symbol 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        country_codes = dictionary.get("countryCodes") if dictionary.get("countryCodes") else APIHelper.SKIP
        symbol = dictionary.get("symbol") if dictionary.get("symbol") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   country_codes,
                   symbol)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'country_codes={(self.country_codes if hasattr(self, "country_codes") else None)!r}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'country_codes={(self.country_codes if hasattr(self, "country_codes") else None)!s}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!s})')
