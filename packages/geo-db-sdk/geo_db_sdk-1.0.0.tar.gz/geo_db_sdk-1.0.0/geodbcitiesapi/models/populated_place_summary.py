# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from geodbcitiesapi.api_helper import APIHelper


class PopulatedPlaceSummary(object):

    """Implementation of the 'PopulatedPlaceSummary' model.

    Minimal populated-place info

    Attributes:
        country (str): The country name (varies by languageCode)
        country_code (str): The ISO-3166 country code
        distance (float): Included if this is the result of a distance query
        id (int): The place GeoDB native id
        latitude (float): The place latittude (-90.0 to 90.0)
        longitude (float): The place longitude (-180.0 to 180.0)
        name (str): The place name (varies by languageCode)
        population (int): The place population
        region (str): The region name (varies by languageCode)
        region_code (str): The ISO or FIPS region code
        mtype (PopulatedPlaceTypeEnum): One of a set of enumerated
            populated-place types known by the service (currently only level-2
            admin divisions and cities)
        wiki_data_id (str): The place WikiData id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country": 'country',
        "country_code": 'countryCode',
        "distance": 'distance',
        "id": 'id',
        "latitude": 'latitude',
        "longitude": 'longitude',
        "name": 'name',
        "population": 'population',
        "region": 'region',
        "region_code": 'regionCode',
        "mtype": 'type',
        "wiki_data_id": 'wikiDataId'
    }

    _optionals = [
        'country',
        'country_code',
        'distance',
        'id',
        'latitude',
        'longitude',
        'name',
        'population',
        'region',
        'region_code',
        'mtype',
        'wiki_data_id',
    ]

    def __init__(self,
                 country=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 distance=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 latitude=APIHelper.SKIP,
                 longitude=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 population=APIHelper.SKIP,
                 region=APIHelper.SKIP,
                 region_code=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 wiki_data_id=APIHelper.SKIP):
        """Constructor for the PopulatedPlaceSummary class"""

        # Initialize members of the class
        if country is not APIHelper.SKIP:
            self.country = country 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if distance is not APIHelper.SKIP:
            self.distance = distance 
        if id is not APIHelper.SKIP:
            self.id = id 
        if latitude is not APIHelper.SKIP:
            self.latitude = latitude 
        if longitude is not APIHelper.SKIP:
            self.longitude = longitude 
        if name is not APIHelper.SKIP:
            self.name = name 
        if population is not APIHelper.SKIP:
            self.population = population 
        if region is not APIHelper.SKIP:
            self.region = region 
        if region_code is not APIHelper.SKIP:
            self.region_code = region_code 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if wiki_data_id is not APIHelper.SKIP:
            self.wiki_data_id = wiki_data_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        distance = dictionary.get("distance") if dictionary.get("distance") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else APIHelper.SKIP
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        population = dictionary.get("population") if dictionary.get("population") else APIHelper.SKIP
        region = dictionary.get("region") if dictionary.get("region") else APIHelper.SKIP
        region_code = dictionary.get("regionCode") if dictionary.get("regionCode") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        wiki_data_id = dictionary.get("wikiDataId") if dictionary.get("wikiDataId") else APIHelper.SKIP
        # Return an object of this model
        return cls(country,
                   country_code,
                   distance,
                   id,
                   latitude,
                   longitude,
                   name,
                   population,
                   region,
                   region_code,
                   mtype,
                   wiki_data_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'country={(self.country if hasattr(self, "country") else None)!r}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!r}, '
                f'distance={(self.distance if hasattr(self, "distance") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'latitude={(self.latitude if hasattr(self, "latitude") else None)!r}, '
                f'longitude={(self.longitude if hasattr(self, "longitude") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'population={(self.population if hasattr(self, "population") else None)!r}, '
                f'region={(self.region if hasattr(self, "region") else None)!r}, '
                f'region_code={(self.region_code if hasattr(self, "region_code") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'country={(self.country if hasattr(self, "country") else None)!s}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!s}, '
                f'distance={(self.distance if hasattr(self, "distance") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'latitude={(self.latitude if hasattr(self, "latitude") else None)!s}, '
                f'longitude={(self.longitude if hasattr(self, "longitude") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'population={(self.population if hasattr(self, "population") else None)!s}, '
                f'region={(self.region if hasattr(self, "region") else None)!s}, '
                f'region_code={(self.region_code if hasattr(self, "region_code") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'wiki_data_id={(self.wiki_data_id if hasattr(self, "wiki_data_id") else None)!s})')
