# -*- coding: utf-8 -*-

"""
geodbcitiesapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from geodbcitiesapi.api_helper import APIHelper
from geodbcitiesapi.configuration import Server
from geodbcitiesapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from geodbcitiesapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from geodbcitiesapi.models.populated_places_response import PopulatedPlacesResponse
from geodbcitiesapi.models.populated_place_response import PopulatedPlaceResponse
from geodbcitiesapi.models.date_time_response import DateTimeResponse
from geodbcitiesapi.models.distance_response import DistanceResponse
from geodbcitiesapi.models.time_response import TimeResponse
from geodbcitiesapi.models.countries_response import CountriesResponse
from geodbcitiesapi.models.country_response import CountryResponse
from geodbcitiesapi.models.country_regions_response import CountryRegionsResponse
from geodbcitiesapi.models.country_region_response import CountryRegionResponse
from geodbcitiesapi.exceptions.base_response_exception import BaseResponseException
from geodbcitiesapi.exceptions.api_exception import APIException


class GeoController(BaseController):

    """A Controller to access Endpoints in the geodbcitiesapi API."""
    def __init__(self, config):
        super(GeoController, self).__init__(config)

    def find_admin_divisions_using_get(self,
                                       location=None,
                                       radius=None,
                                       distance_unit='MI',
                                       country_ids=None,
                                       excluded_country_ids=None,
                                       min_population=None,
                                       max_population=None,
                                       name_prefix=None,
                                       name_prefix_default_lang_results=True,
                                       time_zone_ids=None,
                                       ascii_mode=False,
                                       hateoas_mode=True,
                                       language_code=None,
                                       limit=10,
                                       offset=0,
                                       sort=None,
                                       include_deleted='NONE'):
        """Does a GET request to /geo/adminDivisions.

        Find administrative divisions, filtering by optional criteria. If no
        criteria are set, you will get back all
        known divisions.

        Args:
            location (str, optional): Only places near this location.
                Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/adminDivisions')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_admin_division_using_get(self,
                                     division_id,
                                     ascii_mode=False,
                                     language_code=None):
        """Does a GET request to /geo/adminDivisions/{divisionId}.

        Get the details for a specific administrative division, including
        location coordinates, population, and
        elevation above sea-level (if available).

        Args:
            division_id (str): An admin-division id (either native 'id' or
                'wikiDataId')
            ascii_mode (bool, optional): Display results using ASCII characters
            language_code (str, optional): Display results in this language

        Returns:
            PopulatedPlaceResponse: Response from the API. Populated-place
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/adminDivisions/{divisionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('divisionId')
                            .value(division_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlaceResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_cities_near_admin_division_using_get(self,
                                                  division_id,
                                                  radius=None,
                                                  distance_unit='MI',
                                                  country_ids=None,
                                                  excluded_country_ids=None,
                                                  min_population=None,
                                                  max_population=None,
                                                  name_prefix=None,
                                                  name_prefix_default_lang_results=True,
                                                  time_zone_ids=None,
                                                  types=None,
                                                  ascii_mode=False,
                                                  hateoas_mode=True,
                                                  language_code=None,
                                                  limit=10,
                                                  offset=0,
                                                  sort=None,
                                                  include_deleted='NONE'):
        """Does a GET request to /geo/adminDivisions/{divisionId}/nearbyCities.

        Find cities near the given administrative division, filtering by
        optional criteria. If no criteria are set, you
        will get back all known cities.

        Args:
            division_id (str): An admin-division id (either native 'id' or
                'wikiDataId')
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            types (str, optional): Only places for these types
                (comma-delimited): CITY | ADM2
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/adminDivisions/{divisionId}/nearbyCities')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('divisionId')
                            .value(division_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('types')
                         .value(types))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_divisions_near_admin_division_using_get(self,
                                                     division_id,
                                                     radius=None,
                                                     distance_unit='MI',
                                                     country_ids=None,
                                                     excluded_country_ids=None,
                                                     min_population=None,
                                                     max_population=None,
                                                     name_prefix=None,
                                                     name_prefix_default_lang_results=True,
                                                     time_zone_ids=None,
                                                     ascii_mode=False,
                                                     hateoas_mode=True,
                                                     language_code=None,
                                                     limit=10,
                                                     offset=0,
                                                     sort=None,
                                                     include_deleted='NONE'):
        """Does a GET request to /geo/adminDivisions/{divisionId}/nearbyDivisions.

        Find administrative divisions near the given origin division,
        filtering by optional criteria. If no criteria
        are set, you will get back all known divisions.

        Args:
            division_id (str): An admin-division id (either native 'id' or
                'wikiDataId')
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/adminDivisions/{divisionId}/nearbyDivisions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('divisionId')
                            .value(division_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_cities_using_get(self,
                              location=None,
                              radius=None,
                              distance_unit='MI',
                              country_ids=None,
                              excluded_country_ids=None,
                              min_population=None,
                              max_population=None,
                              name_prefix=None,
                              name_prefix_default_lang_results=True,
                              time_zone_ids=None,
                              types=None,
                              ascii_mode=False,
                              hateoas_mode=True,
                              language_code=None,
                              limit=10,
                              offset=0,
                              sort=None,
                              include_deleted='NONE'):
        """Does a GET request to /geo/cities.

        Find cities, filtering by optional criteria. If no criteria are set,
        you will get back all known cities.

        Args:
            location (str, optional): Only places near this location.
                Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            types (str, optional): Only places for these types
                (comma-delimited): CITY | ADM2
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('types')
                         .value(types))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_city_using_get(self,
                           city_id,
                           ascii_mode=False,
                           language_code=None):
        """Does a GET request to /geo/cities/{cityId}.

        Get the details for a specific city, including location coordinates,
        population, and elevation above sea-level
        (if available).

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')
            ascii_mode (bool, optional): Display results using ASCII characters
            language_code (str, optional): Display results in this language

        Returns:
            PopulatedPlaceResponse: Response from the API. Populated-place
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlaceResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_city_date_time_using_get(self,
                                     city_id):
        """Does a GET request to /geo/cities/{cityId}/dateTime.

        Get city date-time

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')

        Returns:
            DateTimeResponse: Response from the API. An ISO-6801 date-time

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}/dateTime')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DateTimeResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_city_distance_using_get(self,
                                    city_id,
                                    to_city_id,
                                    distance_unit='MI'):
        """Does a GET request to /geo/cities/{cityId}/distance.

        Get distance from the given city

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')
            to_city_id (str): Distance to this city
            distance_unit (str, optional): The unit of distance: MI | KM

        Returns:
            DistanceResponse: Response from the API. A decimal distance (in
                miles or kilometers)

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}/distance')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('toCityId')
                         .value(to_city_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DistanceResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_city_located_in_using_get(self,
                                      city_id,
                                      ascii_mode=False,
                                      language_code=None):
        """Does a GET request to /geo/cities/{cityId}/locatedIn.

        Get the details for the containing populated place (e.g., its county
        or other administrative division), including location coordinates,
        population, and elevation above sea-level
        (if available).

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')
            ascii_mode (bool, optional): Display results using ASCII characters
            language_code (str, optional): Display results in this language

        Returns:
            PopulatedPlaceResponse: Response from the API. Populated-place
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}/locatedIn')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlaceResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_cities_near_city_using_get(self,
                                        city_id,
                                        radius=None,
                                        distance_unit='MI',
                                        country_ids=None,
                                        excluded_country_ids=None,
                                        min_population=None,
                                        max_population=None,
                                        name_prefix=None,
                                        name_prefix_default_lang_results=True,
                                        time_zone_ids=None,
                                        types=None,
                                        ascii_mode=False,
                                        hateoas_mode=True,
                                        language_code=None,
                                        limit=10,
                                        offset=0,
                                        sort=None,
                                        include_deleted='NONE'):
        """Does a GET request to /geo/cities/{cityId}/nearbyCities.

        Find cities near the given origin city, filtering by optional
        criteria. If no criteria are set, you will get
        back all known cities.

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            types (str, optional): Only places for these types
                (comma-delimited): CITY | ADM2
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}/nearbyCities')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('types')
                         .value(types))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_city_time_using_get(self,
                                city_id):
        """Does a GET request to /geo/cities/{cityId}/time.

        Get city time

        Args:
            city_id (str): A city id (either native 'id' or 'wikiDataId')

        Returns:
            TimeResponse: Response from the API. An ISO-8601 time response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/cities/{cityId}/time')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cityId')
                            .value(city_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TimeResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_countries_using_get(self,
                                currency_code=None,
                                name_prefix=None,
                                name_prefix_default_lang_results=True,
                                ascii_mode=False,
                                hateoas_mode=True,
                                language_code=None,
                                limit=10,
                                offset=0,
                                sort=None):
        """Does a GET request to /geo/countries.

        Find countries, filtering by optional criteria. If no criteria are
        set, you will get back all known countries.

        Args:
            currency_code (str, optional): Only countries supporting this
                currency
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort countries.  Format: ±SORT_FIELD 
                where SORT_FIELD = code | name

        Returns:
            CountriesResponse: Response from the API. A list of countries

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('currencyCode')
                         .value(currency_code))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CountriesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def get_country_using_get(self,
                              country_id,
                              ascii_mode=False,
                              language_code=None):
        """Does a GET request to /geo/countries/{countryId}.

        Get the details for a specific country, including number of regions.

        Args:
            country_id (str): An ISO-3166 country code or WikiData id
            ascii_mode (bool, optional): Display results using ASCII characters
            language_code (str, optional): Display results in this language

        Returns:
            CountryResponse: Response from the API. Country detail

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries/{countryId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('countryId')
                            .value(country_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CountryResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_regions_using_get(self,
                              country_id,
                              name_prefix=None,
                              name_prefix_default_lang_results=True,
                              ascii_mode=False,
                              hateoas_mode=True,
                              language_code=None,
                              limit=10,
                              offset=0,
                              sort=None):
        """Does a GET request to /geo/countries/{countryId}/regions.

        Get all regions in a specific country. These could be states,
        provinces, districts, or otherwise major
        political divisions.

        Args:
            country_id (str): An ISO-3166 country code or WikiData id
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort regions.  Format: ±SORT_FIELD 
                where SORT_FIELD = fipsCode | isoCode | name

        Returns:
            CountryRegionsResponse: Response from the API. A list of country
                regions

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries/{countryId}/regions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('countryId')
                            .value(country_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CountryRegionsResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def get_region_using_get(self,
                             country_id,
                             region_code,
                             ascii_mode=False,
                             language_code=None):
        """Does a GET request to /geo/countries/{countryId}/regions/{regionCode}.

        Get the details of a specific country region, including number of
        cities.

        Args:
            country_id (str): An ISO-3166 country code or WikiData id
            region_code (str): An ISO-3166 or FIPS region code
            ascii_mode (bool, optional): Display results using ASCII characters
            language_code (str, optional): Display results in this language

        Returns:
            CountryRegionResponse: Response from the API. Country region
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries/{countryId}/regions/{regionCode}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('countryId')
                            .value(country_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('regionCode')
                            .value(region_code)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CountryRegionResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_region_divisions_using_get(self,
                                        country_id,
                                        region_code,
                                        min_population=None,
                                        max_population=None,
                                        name_prefix=None,
                                        name_prefix_default_lang_results=True,
                                        time_zone_ids=None,
                                        ascii_mode=False,
                                        hateoas_mode=True,
                                        language_code=None,
                                        limit=10,
                                        offset=0,
                                        sort=None,
                                        include_deleted='NONE'):
        """Does a GET request to /geo/countries/{countryId}/regions/{regionCode}/adminDivisions.

        Get the administrative divisions in a specific country region. The
        country and region info is omitted in the
        response.

        Args:
            country_id (str): An ISO-3166 country code or WikiData id
            region_code (str): An ISO-3166 or FIPS region code
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort place results.  'Format:
                ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name
                | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries/{countryId}/regions/{regionCode}/adminDivisions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('countryId')
                            .value(country_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('regionCode')
                            .value(region_code)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_region_cities_using_get(self,
                                     country_id,
                                     region_code,
                                     min_population=None,
                                     max_population=None,
                                     name_prefix=None,
                                     name_prefix_default_lang_results=True,
                                     time_zone_ids=None,
                                     types=None,
                                     ascii_mode=False,
                                     hateoas_mode=True,
                                     language_code=None,
                                     limit=10,
                                     offset=0,
                                     sort=None,
                                     include_deleted='NONE'):
        """Does a GET request to /geo/countries/{countryId}/regions/{regionCode}/cities.

        Get the cities in a specific country region. The country and region
        info is omitted in the response.

        Args:
            country_id (str): An ISO-3166 country code or WikiData id
            region_code (str): An ISO-3166 or FIPS region code
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            types (str, optional): Only places for these types
                (comma-delimited): CITY | ADM2
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort place results.  'Format:
                ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name
                | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/countries/{countryId}/regions/{regionCode}/cities')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('countryId')
                            .value(country_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('regionCode')
                            .value(region_code)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('types')
                         .value(types))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
            .local_error('404', '404 - Not Found', BaseResponseException)
        ).execute()

    def find_cities_near_location_using_get(self,
                                            location_id,
                                            radius=None,
                                            distance_unit='MI',
                                            country_ids=None,
                                            excluded_country_ids=None,
                                            min_population=None,
                                            max_population=None,
                                            name_prefix=None,
                                            name_prefix_default_lang_results=True,
                                            time_zone_ids=None,
                                            types=None,
                                            ascii_mode=False,
                                            hateoas_mode=True,
                                            language_code=None,
                                            limit=10,
                                            offset=0,
                                            sort=None,
                                            include_deleted='NONE'):
        """Does a GET request to /geo/locations/{locationId}/nearbyCities.

        Find cities near the given location, filtering by optional criteria.
        If no criteria are set, you will get back
        all known cities.

        Args:
            location_id (str): A latitude/longitude in ISO-6709 format:
                ±DD.DDDD±DDD.DDDD
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            types (str, optional): Only places for these types
                (comma-delimited): CITY | ADM2
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/locations/{locationId}/nearbyCities')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('locationId')
                            .value(location_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('types')
                         .value(types))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()

    def find_divisions_near_location_using_get(self,
                                               location_id,
                                               radius=None,
                                               distance_unit='MI',
                                               country_ids=None,
                                               excluded_country_ids=None,
                                               min_population=None,
                                               max_population=None,
                                               name_prefix=None,
                                               name_prefix_default_lang_results=True,
                                               time_zone_ids=None,
                                               ascii_mode=False,
                                               hateoas_mode=True,
                                               language_code=None,
                                               limit=10,
                                               offset=0,
                                               sort=None,
                                               include_deleted='NONE'):
        """Does a GET request to /geo/locations/{locationId}/nearbyDivisions.

        Find administrative divisions near the given location, filtering by
        optional criteria. If no criteria are set,
        you will get back all known divisions.

        Args:
            location_id (str): A latitude/longitude in ISO-6709 format:
                ±DD.DDDD±DDD.DDDD
            radius (int, optional): The location radius within which to find
                places
            distance_unit (str, optional): The unit of distance: MI | KM
            country_ids (str, optional): Only places in these countries
                (comma-delimited country codes or WikiData ids)
            excluded_country_ids (str, optional): Only places NOT in these
                countries (comma-delimited country codes or WikiData ids)
            min_population (int, optional): Only places having at least this
                population
            max_population (int, optional): Only places having no more than
                this population
            name_prefix (str, optional): Only entities whose names start with
                this prefix. If languageCode is set, the prefix will be
                matched on the name as it appears in that language.
            name_prefix_default_lang_results (bool, optional): When
                name-prefix matching, whether or not to match on names in the
                default language if a non-default languageCode is set.
            time_zone_ids (str, optional): Only places in these time-zones
                (comma-delimited)
            ascii_mode (bool, optional): Display results using ASCII characters
            hateoas_mode (bool, optional): Include HATEOAS-style links in
                results
            language_code (str, optional): Display results in this language
            limit (int, optional): The maximum number of results to retrieve
            offset (int, optional): The zero-ary offset index into the results
            sort (str, optional): How to sort places.  Format:
                ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode |
                elevation | name | population
            include_deleted (str, optional): Whether to include any divisions
                marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE

        Returns:
            PopulatedPlacesResponse: Response from the API. A list of
                populated places

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/geo/locations/{locationId}/nearbyDivisions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('locationId')
                            .value(location_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('distanceUnit')
                         .value(distance_unit))
            .query_param(Parameter()
                         .key('countryIds')
                         .value(country_ids))
            .query_param(Parameter()
                         .key('excludedCountryIds')
                         .value(excluded_country_ids))
            .query_param(Parameter()
                         .key('minPopulation')
                         .value(min_population))
            .query_param(Parameter()
                         .key('maxPopulation')
                         .value(max_population))
            .query_param(Parameter()
                         .key('namePrefix')
                         .value(name_prefix))
            .query_param(Parameter()
                         .key('namePrefixDefaultLangResults')
                         .value(name_prefix_default_lang_results))
            .query_param(Parameter()
                         .key('timeZoneIds')
                         .value(time_zone_ids))
            .query_param(Parameter()
                         .key('asciiMode')
                         .value(ascii_mode))
            .query_param(Parameter()
                         .key('hateoasMode')
                         .value(hateoas_mode))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('includeDeleted')
                         .value(include_deleted))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('UserSecurity'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PopulatedPlacesResponse.from_dictionary)
            .local_error('400', '400 - Bad Request', BaseResponseException)
            .local_error('401', '401 - Unauthorized', APIException)
            .local_error('403', '403 - Forbidden', BaseResponseException)
        ).execute()
