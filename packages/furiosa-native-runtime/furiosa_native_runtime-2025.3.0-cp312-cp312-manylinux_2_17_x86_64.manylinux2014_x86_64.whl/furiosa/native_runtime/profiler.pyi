from typing import Any, ContextManager, Optional, TypeVar

from pandas import DataFrame

from furiosa.native_runtime.profiler import ProfilerRecordObject, RecordFormat, Resource

class Profiler(ContextManager["Profiler"]):
    _Self = TypeVar("_Self", bound=Profiler)
    def __new__(
        cls,
        resource: Resource = Resource.All,
        format: RecordFormat = RecordFormat.ChromeTrace,
        *,
        kwargs: Optional[dict[str, Any]],
    ) -> Profiler: ...
    def record(self: _Self, name: str) -> ProfilerRecordObject: ...
    def resume(self: _Self): ...
    def pause(self: _Self): ...
    def get_pandas_dataframe(self: _Self) -> DataFrame: ...
    def get_pandas_dataframe_with_filter(self: _Self, column: str, value: str) -> DataFrame: ...
    def get_cpu_pandas_dataframe(self: _Self) -> DataFrame: ...
    def get_npu_pandas_dataframe(self: _Self) -> DataFrame: ...
    def print_npu_operators(self: _Self) -> None: ...
    def print_npu_executions(self: _Self) -> None: ...
    def print_external_operators(self: _Self) -> None: ...
    def print_inferences(self: _Self) -> None: ...
    def print_summary(self: _Self) -> None: ...
    def export_chrome_trace(self: _Self, filename: str) -> None: ...
    def __enter__(self: _Self) -> _Self: ...
    def __exit__(self, type, value, traceback) -> None: ...

profile = Profiler

__all__ = ["profile", "Profiler", "RecordFormat", "ProfilerRecordObject", "Resource"]
