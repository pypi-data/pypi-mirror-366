[tool.poetry]
name = "modapi"
version = "0.2.4"
description = "Unified API for Modbus communication with support for RTU, TCP, and REST APIs"
authors = ["Tom Sapletta <info@softreck.dev>"]
readme = "README.md"
license = "Apache-2.0"
packages = [{include = "modapi"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware :: Hardware Drivers"
]

[tool.poetry.scripts]
modapi = "modapi.__main__:main"
modbus = "modapi.cli:main"

[tool.poetry.dependencies]
python = "^3.10"
python-dotenv = "^1.0.0"
flask = "^2.3.3"
paho-mqtt = "^2.0.0"
requests = "^2.31.0"
pyserial = "^3.5"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.23.0"
pytest-xdist = "^3.4.0"
black = "^24.0.0"
isort = "^5.13.2"
mypy = "^1.8.0"
flake8 = "^7.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=modapi --cov-report=term-missing"
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["flask.*", "pytest"]
ignore_missing_imports = true
