name: Version Bump

on:
  pull_request_target:
    types: [labeled, unlabeled]

jobs:
  version-bump:
    if: |
      github.event.action == 'labeled' && 
      github.event.label.name == 'release' && 
      github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: bump_type
        run: |
          BUMP_TYPE="patch"
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          if echo "$LABELS" | grep -q "major"; then
            BUMP_TYPE="major"
          elif echo "$LABELS" | grep -q "minor"; then
            BUMP_TYPE="minor"
          elif echo "$LABELS" | grep -q "patch"; then
            BUMP_TYPE="patch"
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Bump version
        id: bump_version
        run: |
          bump2version ${{ steps.bump_type.outputs.bump_type }}
          NEW_VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version bump to PR branch
        run: |
          git add pyproject.toml flexfloat/__init__.py .bumpversion.cfg
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git push origin ${{ github.event.pull_request.head.ref }}

      - name: Comment on PR about release process
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üè∑Ô∏è **Release Label Added - Version Bump Complete**
              
              ‚úÖ **Version bumped to**: v${{ steps.bump_version.outputs.new_version }} (${{ steps.bump_type.outputs.bump_type }} release)
              
              üì¶ **What happens when this PR is merged:**
              1. A Git tag \`v${{ steps.bump_version.outputs.new_version }}\` will be created
              2. A GitHub release will be published
              3. The package will be automatically published to PyPI
              4. Release notes will be generated from this PR's title and description
              
              üöÄ **Ready for release!** This PR is now configured for automatic release when merged to main.
              
              To cancel the release, simply remove the \`release\` label.`
            });

  revert-version-bump:
    if: |
      github.event.action == 'unlabeled' && 
      github.event.label.name == 'release' && 
      github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Revert version bump commit
        run: |
          git fetch origin main
          BASE_COMMIT=$(git merge-base HEAD origin/main)
          VERSION_BUMP_COMMITS=()
          for commit in $(git rev-list $BASE_COMMIT..HEAD); do
            COMMIT_MSG=$(git log -1 --pretty=format:"%s" $commit)
            if [[ $COMMIT_MSG == *"Bump version to"* ]] && [[ $COMMIT_MSG == *"[skip ci]"* ]]; then
              VERSION_BUMP_COMMITS+=($commit)
            fi
          done
          if [ ${#VERSION_BUMP_COMMITS[@]} -gt 0 ]; then
            FIRST_VERSION_BUMP=${VERSION_BUMP_COMMITS[-1]}
            RESET_TARGET=$(git rev-parse $FIRST_VERSION_BUMP^)
            git reset --hard $RESET_TARGET
            git push --force-with-lease origin ${{ github.event.pull_request.head.ref }}
            echo "Version bump commits reverted"
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üö´ **Release Cancelled**: The `release` label was removed. Version bump commit has been reverted and this PR will not trigger a release when merged.'
            });
