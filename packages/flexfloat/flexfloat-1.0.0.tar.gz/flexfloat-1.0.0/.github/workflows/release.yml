name: Release

on:
  pull_request:
    types: [closed]

jobs:
  release:
    # Only run if the PR was merged and had the 'release' label
    if: |
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # For trusted publishing to PyPI

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Run tests
        run: |
          pip install -e ".[dev]"
          pytest tests/

      - name: Build package
        run: |
          python -m build

      - name: Create Git tag
        run: |
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the merge commit message
          MERGE_COMMIT_MSG="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          # Determine version bump type from labels
          BUMP_TYPE="patch"
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          if echo "$LABELS" | grep -q "major"; then
            BUMP_TYPE="major"
          elif echo "$LABELS" | grep -q "minor"; then
            BUMP_TYPE="minor"
          elif echo "$LABELS" | grep -q "patch"; then
            BUMP_TYPE="patch"
          fi

          # Create release notes
          cat << EOF > release_notes.md
          ## Changes in v${{ steps.get_version.outputs.version }}

          This release was automatically created from PR #${PR_NUMBER} by @${PR_AUTHOR}.

          **Version bump type**: ${BUMP_TYPE}

          ### Pull Request Details
          **${MERGE_COMMIT_MSG}**

          ${PR_BODY}

          ### Artifacts
          - **Python Wheel**: \`flexfloat-${{ steps.get_version.outputs.version }}-py3-none-any.whl\`
          - **Source Distribution**: \`flexfloat-${{ steps.get_version.outputs.version }}.tar.gz\`

          The package has been automatically published to [PyPI](https://pypi.org/project/flexfloat/${{ steps.get_version.outputs.version }}/).
          EOF

          echo "Release notes generated"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Release v${{ steps.get_version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            ./dist/flexfloat-${{ steps.get_version.outputs.version }}-py3-none-any.whl
            ./dist/flexfloat-${{ steps.get_version.outputs.version }}.tar.gz

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          verbose: true

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš€ **Release Published Successfully!**
              
              **Version**: v${{ steps.get_version.outputs.version }}
              
              **Release**: [View on GitHub](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${{ steps.get_version.outputs.version }})
              
              **PyPI**: [View on PyPI](https://pypi.org/project/flexfloat/${{ steps.get_version.outputs.version }}/)
              
              The package is now available for installation:
              \`\`\`bash
              pip install flexfloat==${{ steps.get_version.outputs.version }}
              \`\`\`
              `
            });
