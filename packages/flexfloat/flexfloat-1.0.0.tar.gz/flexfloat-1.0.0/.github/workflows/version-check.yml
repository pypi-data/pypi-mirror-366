name: Version Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          # Extract versions from different files
          PYPROJECT_VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)
          INIT_VERSION=$(grep -E '^__version__ = ' flexfloat/__init__.py | cut -d'"' -f2)
          BUMPVERSION_VERSION=$(grep -E '^current_version = ' .bumpversion.cfg | cut -d' ' -f3)

          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "flexfloat/__init__.py version: $INIT_VERSION"
          echo ".bumpversion.cfg current_version: $BUMPVERSION_VERSION"

          # Check if versions match
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ] || [ "$PYPROJECT_VERSION" != "$BUMPVERSION_VERSION" ]; then
            echo "[NO] Version mismatch detected!"
            echo "pyproject.toml has version $PYPROJECT_VERSION"
            echo "flexfloat/__init__.py has version $INIT_VERSION"
            echo ".bumpversion.cfg has current_version $BUMPVERSION_VERSION"
            echo "Please ensure all version references are synchronized."
            exit 1
          else
            echo "[OK] All versions are synchronized: $PYPROJECT_VERSION"
          fi

      - name: Validate version format
        run: |
          VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)

          # Check if version follows semantic versioning (X.Y.Z)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "[NO] Version $VERSION does not follow semantic versioning format (X.Y.Z)"
            exit 1
          else
            echo "[OK] Version format is valid: $VERSION"
          fi
