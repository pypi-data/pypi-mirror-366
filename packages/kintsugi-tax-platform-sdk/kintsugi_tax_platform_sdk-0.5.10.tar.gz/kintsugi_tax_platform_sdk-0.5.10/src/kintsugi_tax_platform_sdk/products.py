"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import Nullable, OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, List, Mapping, Optional, Union


class Products(BaseSDK):
    def list(
        self,
        *,
        security: Union[
            models.GetProductsV1ProductsGetSecurity,
            models.GetProductsV1ProductsGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        query: OptionalNullable[str] = UNSET,
        status_in: OptionalNullable[str] = UNSET,
        product_category_in: OptionalNullable[str] = UNSET,
        product_subcategory_in: OptionalNullable[str] = UNSET,
        source_in: OptionalNullable[str] = UNSET,
        order_by: OptionalNullable[str] = UNSET,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageProductRead:
        r"""Get Products

        Retrieve a paginated list of products based on filters and search query.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param query: Search term to filter products by name or other details.
        :param status_in: Filter products by status (comma-separated)
        :param product_category_in: Filter products by category (comma-separated)
        :param product_subcategory_in: Filter products by subcategory (comma-separated)
        :param source_in: Filter products by source (comma-separated)
        :param order_by: Order results by specified fields (comma-separated)
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductsV1ProductsGetRequest(
            query=query,
            status_in=status_in,
            product_category_in=product_category_in,
            product_subcategory_in=product_subcategory_in,
            source_in=source_in,
            order_by=order_by,
            page=page,
            size=size,
            x_organization_id=x_organization_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/products/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductsV1ProductsGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_products_v1_products__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageProductRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        security: Union[
            models.GetProductsV1ProductsGetSecurity,
            models.GetProductsV1ProductsGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        query: OptionalNullable[str] = UNSET,
        status_in: OptionalNullable[str] = UNSET,
        product_category_in: OptionalNullable[str] = UNSET,
        product_subcategory_in: OptionalNullable[str] = UNSET,
        source_in: OptionalNullable[str] = UNSET,
        order_by: OptionalNullable[str] = UNSET,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageProductRead:
        r"""Get Products

        Retrieve a paginated list of products based on filters and search query.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param query: Search term to filter products by name or other details.
        :param status_in: Filter products by status (comma-separated)
        :param product_category_in: Filter products by category (comma-separated)
        :param product_subcategory_in: Filter products by subcategory (comma-separated)
        :param source_in: Filter products by source (comma-separated)
        :param order_by: Order results by specified fields (comma-separated)
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductsV1ProductsGetRequest(
            query=query,
            status_in=status_in,
            product_category_in=product_category_in,
            product_subcategory_in=product_subcategory_in,
            source_in=source_in,
            order_by=order_by,
            page=page,
            size=size,
            x_organization_id=x_organization_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/products/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductsV1ProductsGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_products_v1_products__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageProductRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create(
        self,
        *,
        security: Union[
            models.CreateProductV1ProductsPostSecurity,
            models.CreateProductV1ProductsPostSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        external_id: str,
        name: str,
        product_category: Union[
            models.ProductCreateManualProductCategory,
            models.ProductCreateManualProductCategoryTypedDict,
        ],
        product_subcategory: Union[
            models.ProductCreateManualProductSubcategory,
            models.ProductCreateManualProductSubcategoryTypedDict,
        ],
        tax_exempt: bool,
        description: OptionalNullable[str] = UNSET,
        status: Optional[models.ProductStatusEnum] = None,
        source: Optional[models.SourceEnum] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Create Product

        The Create Product API allows users to manually create a new product
        in the system. This includes specifying product details such as category,
        subcategory, and tax exemption status, etc.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param external_id: A unique external identifier for the product.
        :param name: The name of the product.
        :param product_category: The high-level category of the product.
        :param product_subcategory: The subcategory of the product.
        :param tax_exempt: Specifies whether the product is tax-exempt.
        :param description: A description of the product.
        :param status:
        :param source:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateProductV1ProductsPostRequest(
            x_organization_id=x_organization_id,
            product_create_manual=models.ProductCreateManual(
                external_id=external_id,
                name=name,
                description=description,
                status=status,
                product_category=product_category,
                product_subcategory=product_subcategory,
                tax_exempt=tax_exempt,
                source=source,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v1/products/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreateProductV1ProductsPostSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.product_create_manual,
                False,
                False,
                "json",
                models.ProductCreateManual,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_product_v1_products__post",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_async(
        self,
        *,
        security: Union[
            models.CreateProductV1ProductsPostSecurity,
            models.CreateProductV1ProductsPostSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        external_id: str,
        name: str,
        product_category: Union[
            models.ProductCreateManualProductCategory,
            models.ProductCreateManualProductCategoryTypedDict,
        ],
        product_subcategory: Union[
            models.ProductCreateManualProductSubcategory,
            models.ProductCreateManualProductSubcategoryTypedDict,
        ],
        tax_exempt: bool,
        description: OptionalNullable[str] = UNSET,
        status: Optional[models.ProductStatusEnum] = None,
        source: Optional[models.SourceEnum] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Create Product

        The Create Product API allows users to manually create a new product
        in the system. This includes specifying product details such as category,
        subcategory, and tax exemption status, etc.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param external_id: A unique external identifier for the product.
        :param name: The name of the product.
        :param product_category: The high-level category of the product.
        :param product_subcategory: The subcategory of the product.
        :param tax_exempt: Specifies whether the product is tax-exempt.
        :param description: A description of the product.
        :param status:
        :param source:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateProductV1ProductsPostRequest(
            x_organization_id=x_organization_id,
            product_create_manual=models.ProductCreateManual(
                external_id=external_id,
                name=name,
                description=description,
                status=status,
                product_category=product_category,
                product_subcategory=product_subcategory,
                tax_exempt=tax_exempt,
                source=source,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/products/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreateProductV1ProductsPostSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.product_create_manual,
                False,
                False,
                "json",
                models.ProductCreateManual,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_product_v1_products__post",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get(
        self,
        *,
        security: Union[
            models.GetProductByIDV1ProductsProductIDGetSecurity,
            models.GetProductByIDV1ProductsProductIDGetSecurityTypedDict,
        ],
        product_id: str,
        x_organization_id: Nullable[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Get Product By Id

        The Get Product By ID API retrieves detailed information about
        a single product by its unique ID. This API helps in viewing the specific details
        of a product, including its attributes, status, and categorization.

        :param security:
        :param product_id: The unique identifier for the product you want to retrieve.
        :param x_organization_id: The unique identifier for the organization making the request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductByIDV1ProductsProductIDGetRequest(
            product_id=product_id,
            x_organization_id=x_organization_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/products/{product_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductByIDV1ProductsProductIDGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_product_by_id_v1_products__product_id__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_async(
        self,
        *,
        security: Union[
            models.GetProductByIDV1ProductsProductIDGetSecurity,
            models.GetProductByIDV1ProductsProductIDGetSecurityTypedDict,
        ],
        product_id: str,
        x_organization_id: Nullable[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Get Product By Id

        The Get Product By ID API retrieves detailed information about
        a single product by its unique ID. This API helps in viewing the specific details
        of a product, including its attributes, status, and categorization.

        :param security:
        :param product_id: The unique identifier for the product you want to retrieve.
        :param x_organization_id: The unique identifier for the organization making the request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductByIDV1ProductsProductIDGetRequest(
            product_id=product_id,
            x_organization_id=x_organization_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/products/{product_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductByIDV1ProductsProductIDGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_product_by_id_v1_products__product_id__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        security: Union[
            models.UpdateProductV1ProductsProductIDPutSecurity,
            models.UpdateProductV1ProductsProductIDPutSecurityTypedDict,
        ],
        product_id: str,
        x_organization_id: Nullable[str],
        request_body: Union[models.Product, models.ProductTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Update Product

        The Update Product API allows users to modify the details of
        an existing product identified by its unique product_id

        :param security:
        :param product_id: Unique identifier of the product to be updated.
        :param x_organization_id: The unique identifier for the organization making the request
        :param request_body:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateProductV1ProductsProductIDPutRequest(
            product_id=product_id,
            x_organization_id=x_organization_id,
            request_body=utils.get_pydantic_model(request_body, models.Product),
        )

        req = self._build_request(
            method="PUT",
            path="/v1/products/{product_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdateProductV1ProductsProductIDPutSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body, False, False, "json", models.Product
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_product_v1_products__product_id__put",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        security: Union[
            models.UpdateProductV1ProductsProductIDPutSecurity,
            models.UpdateProductV1ProductsProductIDPutSecurityTypedDict,
        ],
        product_id: str,
        x_organization_id: Nullable[str],
        request_body: Union[models.Product, models.ProductTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ProductRead:
        r"""Update Product

        The Update Product API allows users to modify the details of
        an existing product identified by its unique product_id

        :param security:
        :param product_id: Unique identifier of the product to be updated.
        :param x_organization_id: The unique identifier for the organization making the request
        :param request_body:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateProductV1ProductsProductIDPutRequest(
            product_id=product_id,
            x_organization_id=x_organization_id,
            request_body=utils.get_pydantic_model(request_body, models.Product),
        )

        req = self._build_request_async(
            method="PUT",
            path="/v1/products/{product_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdateProductV1ProductsProductIDPutSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.request_body, False, False, "json", models.Product
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_product_v1_products__product_id__put",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ProductRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcProductsResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcProductsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def list_categories(
        self,
        *,
        security: Union[
            models.GetProductCategoriesV1ProductsCategoriesGetSecurity,
            models.GetProductCategoriesV1ProductsCategoriesGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.ProductCategories]:
        r"""Get Product Categories

        The Get Product Categories API retrieves all
        product categories.  This endpoint helps users understand and select the
        appropriate categories for their products.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductCategoriesV1ProductsCategoriesGetRequest(
            x_organization_id=x_organization_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/products/categories/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductCategoriesV1ProductsCategoriesGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_product_categories_v1_products_categories__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.ProductCategories], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_categories_async(
        self,
        *,
        security: Union[
            models.GetProductCategoriesV1ProductsCategoriesGetSecurity,
            models.GetProductCategoriesV1ProductsCategoriesGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.ProductCategories]:
        r"""Get Product Categories

        The Get Product Categories API retrieves all
        product categories.  This endpoint helps users understand and select the
        appropriate categories for their products.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetProductCategoriesV1ProductsCategoriesGetRequest(
            x_organization_id=x_organization_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/products/categories/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetProductCategoriesV1ProductsCategoriesGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_product_categories_v1_products_categories__get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.ProductCategories], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
