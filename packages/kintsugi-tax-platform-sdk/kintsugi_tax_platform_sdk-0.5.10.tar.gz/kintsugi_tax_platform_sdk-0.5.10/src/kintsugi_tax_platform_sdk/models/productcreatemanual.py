"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productcategoryenum import ProductCategoryEnum
from .productstatusenum import ProductStatusEnum
from .productsubcategoryenum import ProductSubCategoryEnum
from .sourceenum import SourceEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


ProductCreateManualProductCategoryTypedDict = TypeAliasType(
    "ProductCreateManualProductCategoryTypedDict", Union[ProductCategoryEnum, str]
)
r"""The high-level category of the product."""


ProductCreateManualProductCategory = TypeAliasType(
    "ProductCreateManualProductCategory", Union[ProductCategoryEnum, str]
)
r"""The high-level category of the product."""


ProductCreateManualProductSubcategoryTypedDict = TypeAliasType(
    "ProductCreateManualProductSubcategoryTypedDict", Union[ProductSubCategoryEnum, str]
)
r"""The subcategory of the product."""


ProductCreateManualProductSubcategory = TypeAliasType(
    "ProductCreateManualProductSubcategory", Union[ProductSubCategoryEnum, str]
)
r"""The subcategory of the product."""


class ProductCreateManualTypedDict(TypedDict):
    external_id: str
    r"""A unique external identifier for the product."""
    name: str
    r"""The name of the product."""
    product_category: ProductCreateManualProductCategoryTypedDict
    r"""The high-level category of the product."""
    product_subcategory: ProductCreateManualProductSubcategoryTypedDict
    r"""The subcategory of the product."""
    tax_exempt: bool
    r"""Specifies whether the product is tax-exempt."""
    description: NotRequired[Nullable[str]]
    r"""A description of the product."""
    status: NotRequired[ProductStatusEnum]
    source: NotRequired[SourceEnum]


class ProductCreateManual(BaseModel):
    external_id: str
    r"""A unique external identifier for the product."""

    name: str
    r"""The name of the product."""

    product_category: ProductCreateManualProductCategory
    r"""The high-level category of the product."""

    product_subcategory: ProductCreateManualProductSubcategory
    r"""The subcategory of the product."""

    tax_exempt: bool
    r"""Specifies whether the product is tax-exempt."""

    description: OptionalNullable[str] = UNSET
    r"""A description of the product."""

    status: Optional[ProductStatusEnum] = None

    source: Optional[SourceEnum] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "status", "source"]
        nullable_fields = ["description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
