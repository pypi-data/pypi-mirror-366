"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addressstatus import AddressStatus
from .countrycodeenum import CountryCodeEnum
from .sourceenum import SourceEnum
from .statusenum import StatusEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class CustomerCreateTypedDict(TypedDict):
    phone: NotRequired[Nullable[str]]
    r"""Customer's phone number"""
    street_1: NotRequired[Nullable[str]]
    r"""Primary street address."""
    street_2: NotRequired[Nullable[str]]
    r"""Additional street address details, such as an apartment or suite number."""
    city: NotRequired[Nullable[str]]
    r"""City where the customer resides."""
    county: NotRequired[Nullable[str]]
    r"""County or district of the customer."""
    state: NotRequired[Nullable[str]]
    r"""State or province of the customer."""
    postal_code: NotRequired[Nullable[str]]
    r"""ZIP or Postal code of the customer."""
    country: NotRequired[Nullable[CountryCodeEnum]]
    r"""Country code in ISO 3166-1 alpha-2 format"""
    full_address: NotRequired[Nullable[str]]
    r"""Complete address string of the customer, which can be used as an alternative to individual fields."""
    name: NotRequired[Nullable[str]]
    r"""Name of the customer."""
    external_id: NotRequired[Nullable[str]]
    r"""External identifier associated with the customer."""
    status: NotRequired[StatusEnum]
    email: NotRequired[Nullable[str]]
    r"""Customer's email address"""
    source: NotRequired[Nullable[SourceEnum]]
    r"""Source of the customer's record."""
    connection_id: NotRequired[Nullable[str]]
    r"""Identifier for the connection source, if applicable."""
    address_status: NotRequired[AddressStatus]
    registration_number: NotRequired[Nullable[str]]
    r"""Registration number of the customer."""


class CustomerCreate(BaseModel):
    phone: OptionalNullable[str] = UNSET
    r"""Customer's phone number"""

    street_1: OptionalNullable[str] = UNSET
    r"""Primary street address."""

    street_2: OptionalNullable[str] = UNSET
    r"""Additional street address details, such as an apartment or suite number."""

    city: OptionalNullable[str] = UNSET
    r"""City where the customer resides."""

    county: OptionalNullable[str] = UNSET
    r"""County or district of the customer."""

    state: OptionalNullable[str] = UNSET
    r"""State or province of the customer."""

    postal_code: OptionalNullable[str] = UNSET
    r"""ZIP or Postal code of the customer."""

    country: OptionalNullable[CountryCodeEnum] = UNSET
    r"""Country code in ISO 3166-1 alpha-2 format"""

    full_address: OptionalNullable[str] = UNSET
    r"""Complete address string of the customer, which can be used as an alternative to individual fields."""

    name: OptionalNullable[str] = UNSET
    r"""Name of the customer."""

    external_id: OptionalNullable[str] = UNSET
    r"""External identifier associated with the customer."""

    status: Optional[StatusEnum] = None

    email: OptionalNullable[str] = UNSET
    r"""Customer's email address"""

    source: OptionalNullable[SourceEnum] = UNSET
    r"""Source of the customer's record."""

    connection_id: OptionalNullable[str] = UNSET
    r"""Identifier for the connection source, if applicable."""

    address_status: Optional[AddressStatus] = None

    registration_number: OptionalNullable[str] = UNSET
    r"""Registration number of the customer."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "phone",
            "street_1",
            "street_2",
            "city",
            "county",
            "state",
            "postal_code",
            "country",
            "full_address",
            "name",
            "external_id",
            "status",
            "email",
            "source",
            "connection_id",
            "address_status",
            "registration_number",
        ]
        nullable_fields = [
            "phone",
            "street_1",
            "street_2",
            "city",
            "county",
            "state",
            "postal_code",
            "country",
            "full_address",
            "name",
            "external_id",
            "email",
            "source",
            "connection_id",
            "registration_number",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
