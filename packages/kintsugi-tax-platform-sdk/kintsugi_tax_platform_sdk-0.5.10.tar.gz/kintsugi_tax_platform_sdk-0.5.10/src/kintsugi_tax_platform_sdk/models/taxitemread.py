"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .currencyenum import CurrencyEnum
from .jurisdictiontype import JurisdictionType
from .taxitemtypeenum import TaxItemTypeEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class TaxItemReadTypedDict(TypedDict):
    rate: str
    amount: str
    name: str
    r"""Deprecated: use `jurisdiction_type` instead"""
    rule_id: NotRequired[str]
    r"""The rule ID of the tax item"""
    converted_amount: NotRequired[Nullable[str]]
    currency: NotRequired[Nullable[CurrencyEnum]]
    destination_currency: NotRequired[Nullable[CurrencyEnum]]
    external_id: NotRequired[Nullable[str]]
    type: NotRequired[TaxItemTypeEnum]
    jurisdiction_type: NotRequired[Nullable[JurisdictionType]]
    jurisdiction_name: NotRequired[Nullable[str]]


class TaxItemRead(BaseModel):
    rate: str

    amount: str

    name: str
    r"""Deprecated: use `jurisdiction_type` instead"""

    rule_id: Optional[str] = "0000"
    r"""The rule ID of the tax item"""

    converted_amount: OptionalNullable[str] = UNSET

    currency: OptionalNullable[CurrencyEnum] = UNSET

    destination_currency: OptionalNullable[CurrencyEnum] = UNSET

    external_id: OptionalNullable[str] = UNSET

    type: Optional[TaxItemTypeEnum] = None

    jurisdiction_type: OptionalNullable[JurisdictionType] = UNSET

    jurisdiction_name: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "rule_id",
            "converted_amount",
            "currency",
            "destination_currency",
            "external_id",
            "type",
            "jurisdiction_type",
            "jurisdiction_name",
        ]
        nullable_fields = [
            "converted_amount",
            "currency",
            "destination_currency",
            "external_id",
            "jurisdiction_type",
            "jurisdiction_name",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
