"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productcategoryenum import ProductCategoryEnum
from .productstatusenum import ProductStatusEnum
from .productsubcategoryenum import ProductSubCategoryEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class ProductUpdateTypedDict(TypedDict):
    name: str
    r"""Name of the product."""
    product_category: ProductCategoryEnum
    product_subcategory: ProductSubCategoryEnum
    tax_exempt: bool
    r"""Indicates whether the product is tax-exempt."""
    id: NotRequired[Nullable[str]]
    r"""The unique identifier of the product to be updated."""
    external_id: NotRequired[Nullable[str]]
    r"""External identifier provided for the product,
    typically by the source system.
    """
    sku: NotRequired[Nullable[List[str]]]
    description: NotRequired[Nullable[str]]
    r"""Description of the product."""
    status: NotRequired[ProductStatusEnum]
    classification_failed: NotRequired[Nullable[bool]]
    r"""Indicates if the product classification failed."""


class ProductUpdate(BaseModel):
    name: str
    r"""Name of the product."""

    product_category: ProductCategoryEnum

    product_subcategory: ProductSubCategoryEnum

    tax_exempt: bool
    r"""Indicates whether the product is tax-exempt."""

    id: OptionalNullable[str] = UNSET
    r"""The unique identifier of the product to be updated."""

    external_id: OptionalNullable[str] = UNSET
    r"""External identifier provided for the product,
    typically by the source system.
    """

    sku: OptionalNullable[List[str]] = UNSET

    description: OptionalNullable[str] = UNSET
    r"""Description of the product."""

    status: Optional[ProductStatusEnum] = None

    classification_failed: OptionalNullable[bool] = UNSET
    r"""Indicates if the product classification failed."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "external_id",
            "sku",
            "description",
            "status",
            "classification_failed",
        ]
        nullable_fields = [
            "id",
            "external_id",
            "sku",
            "description",
            "classification_failed",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
