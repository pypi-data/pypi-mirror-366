"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countrycodeenum import CountryCodeEnum
from datetime import date
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from kintsugi_tax_platform_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetExemptionsV1ExemptionsGetSecurityTypedDict(TypedDict):
    api_key_header: NotRequired[str]
    http_bearer: NotRequired[str]


class GetExemptionsV1ExemptionsGetSecurity(BaseModel):
    api_key_header: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-API-KEY",
            )
        ),
    ] = None

    http_bearer: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


CountryCodeTypedDict = TypeAliasType(
    "CountryCodeTypedDict", Union[CountryCodeEnum, str]
)


CountryCode = TypeAliasType("CountryCode", Union[CountryCodeEnum, str])


class GetExemptionsV1ExemptionsGetRequestTypedDict(TypedDict):
    x_organization_id: Nullable[str]
    r"""The unique identifier for the organization making the request"""
    search_query: NotRequired[Nullable[str]]
    r"""Search term to filter exemptions by exemption ID, customer name, or customer email"""
    status_in: NotRequired[Nullable[str]]
    r"""Filter exemptions by their status"""
    country_code: NotRequired[Nullable[List[CountryCodeTypedDict]]]
    r"""Country code in ISO 3166-1 alpha-2 format"""
    jurisdiction: NotRequired[Nullable[str]]
    r"""Jurisdiction identifier"""
    start_date: NotRequired[Nullable[date]]
    r"""Start date for filtering exemptions"""
    end_date: NotRequired[Nullable[date]]
    r"""End date for filtering exemptions"""
    customer_id: NotRequired[Nullable[str]]
    r"""Customer ID to filter exemptions"""
    transaction_id: NotRequired[Nullable[str]]
    r"""Transaction ID to filter exemptions"""
    order_by: NotRequired[Nullable[str]]
    r"""Fields to sort by (comma-separated)"""
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetExemptionsV1ExemptionsGetRequest(BaseModel):
    x_organization_id: Annotated[
        Nullable[str],
        pydantic.Field(alias="x-organization-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""The unique identifier for the organization making the request"""

    search_query: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Search term to filter exemptions by exemption ID, customer name, or customer email"""

    status_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter exemptions by their status"""

    country_code: Annotated[
        OptionalNullable[List[CountryCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Country code in ISO 3166-1 alpha-2 format"""

    jurisdiction: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Jurisdiction identifier"""

    start_date: Annotated[
        OptionalNullable[date],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Start date for filtering exemptions"""

    end_date: Annotated[
        OptionalNullable[date],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""End date for filtering exemptions"""

    customer_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Customer ID to filter exemptions"""

    transaction_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Transaction ID to filter exemptions"""

    order_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Fields to sort by (comma-separated)"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "search_query",
            "status__in",
            "country_code",
            "jurisdiction",
            "start_date",
            "end_date",
            "customer_id",
            "transaction_id",
            "order_by",
            "page",
            "size",
        ]
        nullable_fields = [
            "search_query",
            "status__in",
            "country_code",
            "jurisdiction",
            "start_date",
            "end_date",
            "customer_id",
            "transaction_id",
            "order_by",
            "x-organization-id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
