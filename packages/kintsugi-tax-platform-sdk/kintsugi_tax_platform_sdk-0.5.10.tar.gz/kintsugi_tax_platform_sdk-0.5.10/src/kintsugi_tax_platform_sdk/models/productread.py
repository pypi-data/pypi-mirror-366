"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productcategoryenum import ProductCategoryEnum
from .productcodeenum import ProductCodeEnum
from .productstatusenum import ProductStatusEnum
from .productsubcategoryenum import ProductSubCategoryEnum
from .sourceenum import SourceEnum
from kintsugi_tax_platform_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Union
from typing_extensions import TypeAliasType, TypedDict


CodeTypedDict = TypeAliasType("CodeTypedDict", Union[ProductCodeEnum, str])


Code = TypeAliasType("Code", Union[ProductCodeEnum, str])


ProductReadProductCategoryTypedDict = TypeAliasType(
    "ProductReadProductCategoryTypedDict", Union[ProductCategoryEnum, str]
)


ProductReadProductCategory = TypeAliasType(
    "ProductReadProductCategory", Union[ProductCategoryEnum, str]
)


ProductReadProductSubcategoryTypedDict = TypeAliasType(
    "ProductReadProductSubcategoryTypedDict", Union[ProductSubCategoryEnum, str]
)


ProductReadProductSubcategory = TypeAliasType(
    "ProductReadProductSubcategory", Union[ProductSubCategoryEnum, str]
)


class ProductReadTypedDict(TypedDict):
    id: str
    external_id: str
    sku: Nullable[List[str]]
    code: CodeTypedDict
    name: str
    description: Nullable[str]
    status: ProductStatusEnum
    product_category: ProductReadProductCategoryTypedDict
    product_subcategory: ProductReadProductSubcategoryTypedDict
    tax_exempt: bool
    source: SourceEnum
    connection_id: Nullable[str]
    classification_failed: Nullable[bool]


class ProductRead(BaseModel):
    id: str

    external_id: str

    sku: Nullable[List[str]]

    code: Code

    name: str

    description: Nullable[str]

    status: ProductStatusEnum

    product_category: ProductReadProductCategory

    product_subcategory: ProductReadProductSubcategory

    tax_exempt: bool

    source: SourceEnum

    connection_id: Nullable[str]

    classification_failed: Nullable[bool]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "sku",
            "description",
            "connection_id",
            "classification_failed",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
