"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class ValidationAddressTypedDict(TypedDict):
    line1: NotRequired[Nullable[str]]
    r"""Primary address line, such as street name and number"""
    line2: NotRequired[Nullable[str]]
    r"""Additional address details, such as an apartment or suite number"""
    line3: NotRequired[Nullable[str]]
    r"""Additional address details for complex addresses"""
    city: NotRequired[Nullable[str]]
    r"""The city or town name for the address"""
    state: NotRequired[Nullable[str]]
    r"""State, province, or region of the address"""
    country: NotRequired[Nullable[str]]
    r"""Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
    Defaults to 'US'.
    should not be empty. Not validating here as the validation
    structure can be different for different providers
    """
    postal_code: NotRequired[Nullable[str]]
    r"""ZIP or postal code for the address. Can be empty for some locales.
    Not validating here as the validation structure can be different for different providers
    """
    id: NotRequired[Nullable[int]]
    r"""Unique identifier for the request, if applicable"""
    county: NotRequired[Nullable[str]]
    r"""County or district name for the address"""
    full_address: NotRequired[Nullable[str]]
    r"""A complete address string that can be used as an alternative to providing individual fields."""


class ValidationAddress(BaseModel):
    line1: OptionalNullable[str] = UNSET
    r"""Primary address line, such as street name and number"""

    line2: OptionalNullable[str] = UNSET
    r"""Additional address details, such as an apartment or suite number"""

    line3: OptionalNullable[str] = UNSET
    r"""Additional address details for complex addresses"""

    city: OptionalNullable[str] = UNSET
    r"""The city or town name for the address"""

    state: OptionalNullable[str] = UNSET
    r"""State, province, or region of the address"""

    country: OptionalNullable[str] = UNSET
    r"""Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
    Defaults to 'US'.
    should not be empty. Not validating here as the validation
    structure can be different for different providers
    """

    postal_code: Annotated[
        OptionalNullable[str], pydantic.Field(alias="postalCode")
    ] = UNSET
    r"""ZIP or postal code for the address. Can be empty for some locales.
    Not validating here as the validation structure can be different for different providers
    """

    id: OptionalNullable[int] = UNSET
    r"""Unique identifier for the request, if applicable"""

    county: OptionalNullable[str] = UNSET
    r"""County or district name for the address"""

    full_address: OptionalNullable[str] = UNSET
    r"""A complete address string that can be used as an alternative to providing individual fields."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "line1",
            "line2",
            "line3",
            "city",
            "state",
            "country",
            "postalCode",
            "id",
            "county",
            "full_address",
        ]
        nullable_fields = [
            "line1",
            "line2",
            "line3",
            "city",
            "state",
            "country",
            "postalCode",
            "id",
            "county",
            "full_address",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
