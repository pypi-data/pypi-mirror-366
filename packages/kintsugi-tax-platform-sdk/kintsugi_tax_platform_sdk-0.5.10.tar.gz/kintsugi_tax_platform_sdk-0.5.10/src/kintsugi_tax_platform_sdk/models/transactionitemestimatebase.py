"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productcategoryenum import ProductCategoryEnum
from .productsubcategoryenum import ProductSubCategoryEnum
from .sourceenum import SourceEnum
from datetime import datetime
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


QuantityOfTheProductTypedDict = TypeAliasType(
    "QuantityOfTheProductTypedDict", Union[float, str]
)
r"""Defaults to 1.0. The quantity of the item."""


QuantityOfTheProduct = TypeAliasType("QuantityOfTheProduct", Union[float, str])
r"""Defaults to 1.0. The quantity of the item."""


TotalAmountOfThisTransactionItemAfterDiscountsTypedDict = TypeAliasType(
    "TotalAmountOfThisTransactionItemAfterDiscountsTypedDict", Union[float, str]
)
r"""The total amount of the item."""


TotalAmountOfThisTransactionItemAfterDiscounts = TypeAliasType(
    "TotalAmountOfThisTransactionItemAfterDiscounts", Union[float, str]
)
r"""The total amount of the item."""


class TransactionItemEstimateBaseTypedDict(TypedDict):
    date_: datetime
    r"""The date of the transaction item."""
    amount: TotalAmountOfThisTransactionItemAfterDiscountsTypedDict
    r"""The total amount of the item."""
    external_id: NotRequired[Nullable[str]]
    r"""A unique identifier for the transaction item."""
    description: NotRequired[Nullable[str]]
    r"""A description of the item."""
    external_product_id: NotRequired[Nullable[str]]
    r"""External product identifier. If not found and product_subcategory
    and product_category are not provided, an error occurs.
    """
    product_name: NotRequired[Nullable[str]]
    r"""Name of the product. Used if creating a new product."""
    product_description: NotRequired[Nullable[str]]
    r"""Description of the product. Used if creating a new product."""
    product_source: NotRequired[Nullable[SourceEnum]]
    product_subcategory: NotRequired[Nullable[ProductSubCategoryEnum]]
    r"""Subcategory of the product. Required if product_category is used
    in place of external_product_id.
    """
    product_category: NotRequired[Nullable[ProductCategoryEnum]]
    r"""Category of the product. Required if product_subcategory is used
    in place of external_product_id.
    """
    quantity: NotRequired[QuantityOfTheProductTypedDict]
    r"""Defaults to 1.0. The quantity of the item."""
    exempt: NotRequired[bool]
    r"""Defaults to false. Indicates whether the item is exempt from tax."""


class TransactionItemEstimateBase(BaseModel):
    date_: Annotated[datetime, pydantic.Field(alias="date")]
    r"""The date of the transaction item."""

    amount: TotalAmountOfThisTransactionItemAfterDiscounts
    r"""The total amount of the item."""

    external_id: OptionalNullable[str] = UNSET
    r"""A unique identifier for the transaction item."""

    description: OptionalNullable[str] = UNSET
    r"""A description of the item."""

    external_product_id: OptionalNullable[str] = UNSET
    r"""External product identifier. If not found and product_subcategory
    and product_category are not provided, an error occurs.
    """

    product_name: OptionalNullable[str] = UNSET
    r"""Name of the product. Used if creating a new product."""

    product_description: OptionalNullable[str] = UNSET
    r"""Description of the product. Used if creating a new product."""

    product_source: OptionalNullable[SourceEnum] = UNSET

    product_subcategory: OptionalNullable[ProductSubCategoryEnum] = UNSET
    r"""Subcategory of the product. Required if product_category is used
    in place of external_product_id.
    """

    product_category: OptionalNullable[ProductCategoryEnum] = UNSET
    r"""Category of the product. Required if product_subcategory is used
    in place of external_product_id.
    """

    quantity: Optional[QuantityOfTheProduct] = None
    r"""Defaults to 1.0. The quantity of the item."""

    exempt: Optional[bool] = False
    r"""Defaults to false. Indicates whether the item is exempt from tax."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "external_id",
            "description",
            "external_product_id",
            "product_name",
            "product_description",
            "product_source",
            "product_subcategory",
            "product_category",
            "quantity",
            "exempt",
        ]
        nullable_fields = [
            "external_id",
            "description",
            "external_product_id",
            "product_name",
            "product_description",
            "product_source",
            "product_subcategory",
            "product_category",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
