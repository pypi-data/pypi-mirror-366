"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productstatusenum import ProductStatusEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class ProductUpdateV2TypedDict(TypedDict):
    name: str
    status: ProductStatusEnum
    product_category: str
    product_subcategory: str
    tax_exempt: bool
    external_id: NotRequired[Nullable[str]]
    sku: NotRequired[Nullable[List[str]]]
    description: NotRequired[Nullable[str]]
    classification_failed: NotRequired[Nullable[bool]]


class ProductUpdateV2(BaseModel):
    name: str

    status: ProductStatusEnum

    product_category: str

    product_subcategory: str

    tax_exempt: bool

    external_id: OptionalNullable[str] = UNSET

    sku: OptionalNullable[List[str]] = UNSET

    description: OptionalNullable[str] = UNSET

    classification_failed: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["external_id", "sku", "description", "classification_failed"]
        nullable_fields = ["external_id", "sku", "description", "classification_failed"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
