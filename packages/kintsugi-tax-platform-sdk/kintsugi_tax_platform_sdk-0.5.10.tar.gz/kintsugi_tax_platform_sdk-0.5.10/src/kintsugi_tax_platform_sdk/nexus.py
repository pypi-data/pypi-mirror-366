"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import Nullable, OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, Mapping, Optional, Union


class Nexus(BaseSDK):
    def list(
        self,
        *,
        security: Union[
            models.GetNexusForOrgV1NexusGetSecurity,
            models.GetNexusForOrgV1NexusGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        status_in: OptionalNullable[str] = UNSET,
        state_code: OptionalNullable[str] = UNSET,
        country_code_in: OptionalNullable[str] = UNSET,
        order_by: OptionalNullable[str] = UNSET,
        collected_tax_nexus_met: OptionalNullable[bool] = UNSET,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageNexusResponse:
        r"""Get Nexus For Org

        Get a list of all nexuses for the organization.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param status_in:
        :param state_code:
        :param country_code_in:
        :param order_by:
        :param collected_tax_nexus_met:
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetNexusForOrgV1NexusGetRequest(
            status_in=status_in,
            state_code=state_code,
            country_code_in=country_code_in,
            order_by=order_by,
            collected_tax_nexus_met=collected_tax_nexus_met,
            page=page,
            size=size,
            x_organization_id=x_organization_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/nexus",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetNexusForOrgV1NexusGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_nexus_for_org_v1_nexus_get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageNexusResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        security: Union[
            models.GetNexusForOrgV1NexusGetSecurity,
            models.GetNexusForOrgV1NexusGetSecurityTypedDict,
        ],
        x_organization_id: Nullable[str],
        status_in: OptionalNullable[str] = UNSET,
        state_code: OptionalNullable[str] = UNSET,
        country_code_in: OptionalNullable[str] = UNSET,
        order_by: OptionalNullable[str] = UNSET,
        collected_tax_nexus_met: OptionalNullable[bool] = UNSET,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageNexusResponse:
        r"""Get Nexus For Org

        Get a list of all nexuses for the organization.

        :param security:
        :param x_organization_id: The unique identifier for the organization making the request
        :param status_in:
        :param state_code:
        :param country_code_in:
        :param order_by:
        :param collected_tax_nexus_met:
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetNexusForOrgV1NexusGetRequest(
            status_in=status_in,
            state_code=state_code,
            country_code_in=country_code_in,
            order_by=order_by,
            collected_tax_nexus_met=collected_tax_nexus_met,
            page=page,
            size=size,
            x_organization_id=x_organization_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/nexus",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetNexusForOrgV1NexusGetSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_nexus_for_org_v1_nexus_get",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageNexusResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
