"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countrycodeenum import CountryCodeEnum
from .currencyenum import CurrencyEnum
from .customerbasebase import CustomerBaseBase, CustomerBaseBaseTypedDict
from .exemption import Exemption, ExemptionTypedDict
from .exemptionrequired import ExemptionRequired, ExemptionRequiredTypedDict
from .sourceenum import SourceEnum
from .taxliabilitysourceenum import TaxLiabilitySourceEnum
from .transactionaddresspublic import (
    TransactionAddressPublic,
    TransactionAddressPublicTypedDict,
)
from .transactionexemptstatusenum import TransactionExemptStatusEnum
from .transactionimportcustomer import (
    TransactionImportCustomer,
    TransactionImportCustomerTypedDict,
)
from .transactionitembuilder import (
    TransactionItemBuilder,
    TransactionItemBuilderTypedDict,
)
from .transactionrefundstatus import TransactionRefundStatus
from .transactionstatusenum import TransactionStatusEnum
from .transactiontypeenum import TransactionTypeEnum
from datetime import date, datetime
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


TransactionPublicRequestTotalAmountTypedDict = TypeAliasType(
    "TransactionPublicRequestTotalAmountTypedDict", Union[float, str]
)
r"""Total amount of the transaction."""


TransactionPublicRequestTotalAmount = TypeAliasType(
    "TransactionPublicRequestTotalAmount", Union[float, str]
)
r"""Total amount of the transaction."""


TransactionPublicRequestTotalTaxAmountImportedTypedDict = TypeAliasType(
    "TransactionPublicRequestTotalTaxAmountImportedTypedDict", Union[float, str]
)
r"""Imported tax amount."""


TransactionPublicRequestTotalTaxAmountImported = TypeAliasType(
    "TransactionPublicRequestTotalTaxAmountImported", Union[float, str]
)
r"""Imported tax amount."""


TransactionPublicRequestTaxRateImportedTypedDict = TypeAliasType(
    "TransactionPublicRequestTaxRateImportedTypedDict", Union[float, str]
)
r"""Imported tax rate."""


TransactionPublicRequestTaxRateImported = TypeAliasType(
    "TransactionPublicRequestTaxRateImported", Union[float, str]
)
r"""Imported tax rate."""


TransactionPublicRequestTotalTaxAmountCalculatedTypedDict = TypeAliasType(
    "TransactionPublicRequestTotalTaxAmountCalculatedTypedDict", Union[float, str]
)
r"""Calculated tax amount."""


TransactionPublicRequestTotalTaxAmountCalculated = TypeAliasType(
    "TransactionPublicRequestTotalTaxAmountCalculated", Union[float, str]
)
r"""Calculated tax amount."""


TransactionPublicRequestTaxRateCalculatedTypedDict = TypeAliasType(
    "TransactionPublicRequestTaxRateCalculatedTypedDict", Union[float, str]
)
r"""Calculated tax rate."""


TransactionPublicRequestTaxRateCalculated = TypeAliasType(
    "TransactionPublicRequestTaxRateCalculated", Union[float, str]
)
r"""Calculated tax rate."""


TransactionPublicRequestTotalTaxLiabilityAmountTypedDict = TypeAliasType(
    "TransactionPublicRequestTotalTaxLiabilityAmountTypedDict", Union[float, str]
)
r"""Total tax liability amount."""


TransactionPublicRequestTotalTaxLiabilityAmount = TypeAliasType(
    "TransactionPublicRequestTotalTaxLiabilityAmount", Union[float, str]
)
r"""Total tax liability amount."""


TransactionPublicRequestTaxableAmountTypedDict = TypeAliasType(
    "TransactionPublicRequestTaxableAmountTypedDict", Union[float, str]
)
r"""Taxable amount."""


TransactionPublicRequestTaxableAmount = TypeAliasType(
    "TransactionPublicRequestTaxableAmount", Union[float, str]
)
r"""Taxable amount."""


CustomerTypedDict = TypeAliasType(
    "CustomerTypedDict",
    Union[TransactionImportCustomerTypedDict, CustomerBaseBaseTypedDict],
)


Customer = TypeAliasType("Customer", Union[TransactionImportCustomer, CustomerBaseBase])


class TransactionPublicRequestTypedDict(TypedDict):
    organization_id: str
    r"""Unique identifier of the organization."""
    external_id: str
    r"""External identifier of the transaction."""
    date_: datetime
    r"""Transaction date and time"""
    addresses: List[TransactionAddressPublicTypedDict]
    transaction_items: List[TransactionItemBuilderTypedDict]
    customer: CustomerTypedDict
    type: TransactionTypeEnum
    requires_exemption: NotRequired[Nullable[ExemptionRequiredTypedDict]]
    r"""Indicates if transaction requires tax exemption."""
    shop_date: NotRequired[Nullable[date]]
    r"""Transaction date in the shop's local timezone"""
    shop_date_tz: NotRequired[Nullable[str]]
    r"""Timezone of the shop"""
    status: NotRequired[TransactionStatusEnum]
    description: NotRequired[Nullable[str]]
    r"""Description of the transaction."""
    refund_status: NotRequired[Nullable[TransactionRefundStatus]]
    r"""Status of refund, if applicable"""
    total_amount: NotRequired[TransactionPublicRequestTotalAmountTypedDict]
    r"""Total amount of the transaction."""
    customer_id: NotRequired[Nullable[str]]
    r"""Unique identifier of the customer."""
    marketplace: NotRequired[Nullable[bool]]
    r"""Indicates if transaction is marketplace-based."""
    exempt: NotRequired[Nullable[TransactionExemptStatusEnum]]
    r"""Exemption status (e.g., NOT_EXEMPT)"""
    exemptions: NotRequired[Nullable[List[ExemptionTypedDict]]]
    r"""List of exemptions applied (if any)."""
    related_to: NotRequired[Nullable[str]]
    r"""Related transaction identifier."""
    secondary_external_id: NotRequired[Nullable[str]]
    r"""Secondary External Identifier."""
    secondary_source: NotRequired[Nullable[str]]
    r"""Secondary source information"""
    external_friendly_id: NotRequired[Nullable[str]]
    r"""Friendly identifier of the original item."""
    total_tax_amount_imported: NotRequired[
        TransactionPublicRequestTotalTaxAmountImportedTypedDict
    ]
    r"""Imported tax amount."""
    tax_rate_imported: NotRequired[TransactionPublicRequestTaxRateImportedTypedDict]
    r"""Imported tax rate."""
    total_tax_amount_calculated: NotRequired[
        TransactionPublicRequestTotalTaxAmountCalculatedTypedDict
    ]
    r"""Calculated tax amount."""
    tax_rate_calculated: NotRequired[TransactionPublicRequestTaxRateCalculatedTypedDict]
    r"""Calculated tax rate."""
    total_tax_liability_amount: NotRequired[
        TransactionPublicRequestTotalTaxLiabilityAmountTypedDict
    ]
    r"""Total tax liability amount."""
    tax_liability_source: NotRequired[Nullable[TaxLiabilitySourceEnum]]
    r"""Source of tax liability."""
    taxable_amount: NotRequired[TransactionPublicRequestTaxableAmountTypedDict]
    r"""Taxable amount."""
    currency: NotRequired[CurrencyEnum]
    locked: NotRequired[bool]
    r"""Transaction lock status."""
    source: NotRequired[SourceEnum]
    connection_id: NotRequired[Nullable[str]]
    r"""Connection Identifier"""
    filing_id: NotRequired[Nullable[str]]
    r"""Filing identifier."""
    city: NotRequired[Nullable[str]]
    r"""City of the transaction address."""
    county: NotRequired[Nullable[str]]
    r"""County of the transaction address."""
    state: NotRequired[Nullable[str]]
    r"""State of the transaction address."""
    country: NotRequired[Nullable[CountryCodeEnum]]
    r"""Country code (ISO Alpha-2)."""
    postal_code: NotRequired[Nullable[str]]
    r"""Postal code of the transaction."""
    tax_id: NotRequired[Nullable[str]]
    r"""Tax ID associated with the transaction"""


class TransactionPublicRequest(BaseModel):
    organization_id: str
    r"""Unique identifier of the organization."""

    external_id: str
    r"""External identifier of the transaction."""

    date_: Annotated[datetime, pydantic.Field(alias="date")]
    r"""Transaction date and time"""

    addresses: List[TransactionAddressPublic]

    transaction_items: List[TransactionItemBuilder]

    customer: Customer

    type: TransactionTypeEnum

    requires_exemption: OptionalNullable[ExemptionRequired] = UNSET
    r"""Indicates if transaction requires tax exemption."""

    shop_date: OptionalNullable[date] = UNSET
    r"""Transaction date in the shop's local timezone"""

    shop_date_tz: OptionalNullable[str] = UNSET
    r"""Timezone of the shop"""

    status: Optional[TransactionStatusEnum] = None

    description: OptionalNullable[str] = UNSET
    r"""Description of the transaction."""

    refund_status: OptionalNullable[TransactionRefundStatus] = UNSET
    r"""Status of refund, if applicable"""

    total_amount: Optional[TransactionPublicRequestTotalAmount] = None
    r"""Total amount of the transaction."""

    customer_id: OptionalNullable[str] = UNSET
    r"""Unique identifier of the customer."""

    marketplace: OptionalNullable[bool] = UNSET
    r"""Indicates if transaction is marketplace-based."""

    exempt: OptionalNullable[TransactionExemptStatusEnum] = UNSET
    r"""Exemption status (e.g., NOT_EXEMPT)"""

    exemptions: OptionalNullable[List[Exemption]] = UNSET
    r"""List of exemptions applied (if any)."""

    related_to: OptionalNullable[str] = UNSET
    r"""Related transaction identifier."""

    secondary_external_id: OptionalNullable[str] = UNSET
    r"""Secondary External Identifier."""

    secondary_source: OptionalNullable[str] = UNSET
    r"""Secondary source information"""

    external_friendly_id: OptionalNullable[str] = UNSET
    r"""Friendly identifier of the original item."""

    total_tax_amount_imported: Optional[
        TransactionPublicRequestTotalTaxAmountImported
    ] = None
    r"""Imported tax amount."""

    tax_rate_imported: Optional[TransactionPublicRequestTaxRateImported] = None
    r"""Imported tax rate."""

    total_tax_amount_calculated: Optional[
        TransactionPublicRequestTotalTaxAmountCalculated
    ] = None
    r"""Calculated tax amount."""

    tax_rate_calculated: Optional[TransactionPublicRequestTaxRateCalculated] = None
    r"""Calculated tax rate."""

    total_tax_liability_amount: Optional[
        TransactionPublicRequestTotalTaxLiabilityAmount
    ] = None
    r"""Total tax liability amount."""

    tax_liability_source: OptionalNullable[TaxLiabilitySourceEnum] = UNSET
    r"""Source of tax liability."""

    taxable_amount: Optional[TransactionPublicRequestTaxableAmount] = None
    r"""Taxable amount."""

    currency: Optional[CurrencyEnum] = None

    locked: Optional[bool] = False
    r"""Transaction lock status."""

    source: Optional[SourceEnum] = None

    connection_id: OptionalNullable[str] = UNSET
    r"""Connection Identifier"""

    filing_id: OptionalNullable[str] = UNSET
    r"""Filing identifier."""

    city: OptionalNullable[str] = UNSET
    r"""City of the transaction address."""

    county: OptionalNullable[str] = UNSET
    r"""County of the transaction address."""

    state: OptionalNullable[str] = UNSET
    r"""State of the transaction address."""

    country: OptionalNullable[CountryCodeEnum] = UNSET
    r"""Country code (ISO Alpha-2)."""

    postal_code: OptionalNullable[str] = UNSET
    r"""Postal code of the transaction."""

    tax_id: OptionalNullable[str] = UNSET
    r"""Tax ID associated with the transaction"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "requires_exemption",
            "shop_date",
            "shop_date_tz",
            "status",
            "description",
            "refund_status",
            "total_amount",
            "customer_id",
            "marketplace",
            "exempt",
            "exemptions",
            "related_to",
            "secondary_external_id",
            "secondary_source",
            "external_friendly_id",
            "total_tax_amount_imported",
            "tax_rate_imported",
            "total_tax_amount_calculated",
            "tax_rate_calculated",
            "total_tax_liability_amount",
            "tax_liability_source",
            "taxable_amount",
            "currency",
            "locked",
            "source",
            "connection_id",
            "filing_id",
            "city",
            "county",
            "state",
            "country",
            "postal_code",
            "tax_id",
        ]
        nullable_fields = [
            "requires_exemption",
            "shop_date",
            "shop_date_tz",
            "description",
            "refund_status",
            "customer_id",
            "marketplace",
            "exempt",
            "exemptions",
            "related_to",
            "secondary_external_id",
            "secondary_source",
            "external_friendly_id",
            "tax_liability_source",
            "connection_id",
            "filing_id",
            "city",
            "county",
            "state",
            "country",
            "postal_code",
            "tax_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
