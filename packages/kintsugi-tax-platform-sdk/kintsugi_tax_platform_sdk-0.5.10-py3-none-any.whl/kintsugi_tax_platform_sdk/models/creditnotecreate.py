"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .creditnoteitemcreateupdate import (
    CreditNoteItemCreateUpdate,
    CreditNoteItemCreateUpdateTypedDict,
)
from .currencyenum import CurrencyEnum
from .transactionaddressbuilder import (
    TransactionAddressBuilder,
    TransactionAddressBuilderTypedDict,
)
from datetime import datetime
from enum import Enum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class Status(str, Enum):
    r"""Current state of the credit note in its lifecycle."""

    PENDING = "PENDING"
    CANCELLED = "CANCELLED"
    COMMITTED = "COMMITTED"


CreditNoteCreateTotalAmountTypedDict = TypeAliasType(
    "CreditNoteCreateTotalAmountTypedDict", Union[float, str]
)
r"""Total monetary value of the credit note, including all items and taxes."""


CreditNoteCreateTotalAmount = TypeAliasType(
    "CreditNoteCreateTotalAmount", Union[float, str]
)
r"""Total monetary value of the credit note, including all items and taxes."""


CreditNoteCreateTaxAmountImportedTypedDict = TypeAliasType(
    "CreditNoteCreateTaxAmountImportedTypedDict", Union[float, str]
)
r"""Pre-calculated total tax amount for the entire credit note, if provided by the external system."""


CreditNoteCreateTaxAmountImported = TypeAliasType(
    "CreditNoteCreateTaxAmountImported", Union[float, str]
)
r"""Pre-calculated total tax amount for the entire credit note, if provided by the external system."""


CreditNoteCreateTaxRateImportedTypedDict = TypeAliasType(
    "CreditNoteCreateTaxRateImportedTypedDict", Union[float, str]
)
r"""Pre-calculated overall tax rate for the credit note, if provided by the external system."""


CreditNoteCreateTaxRateImported = TypeAliasType(
    "CreditNoteCreateTaxRateImported", Union[float, str]
)
r"""Pre-calculated overall tax rate for the credit note, if provided by the external system."""


CreditNoteCreateTaxableAmountTypedDict = TypeAliasType(
    "CreditNoteCreateTaxableAmountTypedDict", Union[float, str]
)
r"""Total portion of the credit note amount subject to taxation."""


CreditNoteCreateTaxableAmount = TypeAliasType(
    "CreditNoteCreateTaxableAmount", Union[float, str]
)
r"""Total portion of the credit note amount subject to taxation."""


class CreditNoteCreateTypedDict(TypedDict):
    external_id: str
    r"""Unique identifier for the credit note in the external system."""
    date_: datetime
    r"""Date when the credit note was issued or created."""
    status: Status
    r"""Current state of the credit note in its lifecycle."""
    currency: CurrencyEnum
    transaction_items: List[CreditNoteItemCreateUpdateTypedDict]
    r"""Detailed list of individual items included in this credit note."""
    description: NotRequired[Nullable[str]]
    r"""Brief explanation or reason for issuing the credit note."""
    total_amount: NotRequired[CreditNoteCreateTotalAmountTypedDict]
    r"""Total monetary value of the credit note, including all items and taxes."""
    marketplace: NotRequired[Nullable[bool]]
    r"""Indicates whether this credit note is associated with a marketplace transaction."""
    tax_amount_imported: NotRequired[
        Nullable[CreditNoteCreateTaxAmountImportedTypedDict]
    ]
    r"""Pre-calculated total tax amount for the entire credit note, if provided by the external system."""
    tax_rate_imported: NotRequired[Nullable[CreditNoteCreateTaxRateImportedTypedDict]]
    r"""Pre-calculated overall tax rate for the credit note, if provided by the external system."""
    taxable_amount: NotRequired[Nullable[CreditNoteCreateTaxableAmountTypedDict]]
    r"""Total portion of the credit note amount subject to taxation."""
    addresses: NotRequired[Nullable[List[TransactionAddressBuilderTypedDict]]]
    r"""A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction."""


class CreditNoteCreate(BaseModel):
    external_id: str
    r"""Unique identifier for the credit note in the external system."""

    date_: Annotated[datetime, pydantic.Field(alias="date")]
    r"""Date when the credit note was issued or created."""

    status: Status
    r"""Current state of the credit note in its lifecycle."""

    currency: CurrencyEnum

    transaction_items: List[CreditNoteItemCreateUpdate]
    r"""Detailed list of individual items included in this credit note."""

    description: OptionalNullable[str] = UNSET
    r"""Brief explanation or reason for issuing the credit note."""

    total_amount: Optional[CreditNoteCreateTotalAmount] = None
    r"""Total monetary value of the credit note, including all items and taxes."""

    marketplace: OptionalNullable[bool] = UNSET
    r"""Indicates whether this credit note is associated with a marketplace transaction."""

    tax_amount_imported: OptionalNullable[CreditNoteCreateTaxAmountImported] = UNSET
    r"""Pre-calculated total tax amount for the entire credit note, if provided by the external system."""

    tax_rate_imported: OptionalNullable[CreditNoteCreateTaxRateImported] = UNSET
    r"""Pre-calculated overall tax rate for the credit note, if provided by the external system."""

    taxable_amount: OptionalNullable[CreditNoteCreateTaxableAmount] = UNSET
    r"""Total portion of the credit note amount subject to taxation."""

    addresses: OptionalNullable[List[TransactionAddressBuilder]] = UNSET
    r"""A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "total_amount",
            "marketplace",
            "tax_amount_imported",
            "tax_rate_imported",
            "taxable_amount",
            "addresses",
        ]
        nullable_fields = [
            "description",
            "marketplace",
            "tax_amount_imported",
            "tax_rate_imported",
            "taxable_amount",
            "addresses",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
