"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addresstype import AddressType
from .countrycodeenum import CountryCodeEnum
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class TransactionAddressPublicTypedDict(TypedDict):
    r"""Public address class for transaction addresses"""

    type: AddressType
    phone: NotRequired[Nullable[str]]
    r"""Phone number associated with the address."""
    street_1: NotRequired[Nullable[str]]
    r"""Primary street address."""
    street_2: NotRequired[Nullable[str]]
    r"""Additional street address details, such as an apartment or suite number."""
    city: NotRequired[Nullable[str]]
    r"""City where the customer resides."""
    county: NotRequired[Nullable[str]]
    r"""County or district of the customer."""
    state: NotRequired[Nullable[str]]
    r"""State or province of the customer."""
    postal_code: NotRequired[Nullable[str]]
    r"""ZIP or Postal code of the customer."""
    country: NotRequired[Nullable[CountryCodeEnum]]
    r"""Country code in ISO 3166-1 alpha-2 format"""
    full_address: NotRequired[Nullable[str]]
    r"""Complete address string of the customer, which can be used as an alternative to individual fields."""


class TransactionAddressPublic(BaseModel):
    r"""Public address class for transaction addresses"""

    type: AddressType

    phone: OptionalNullable[str] = UNSET
    r"""Phone number associated with the address."""

    street_1: OptionalNullable[str] = UNSET
    r"""Primary street address."""

    street_2: OptionalNullable[str] = UNSET
    r"""Additional street address details, such as an apartment or suite number."""

    city: OptionalNullable[str] = UNSET
    r"""City where the customer resides."""

    county: OptionalNullable[str] = UNSET
    r"""County or district of the customer."""

    state: OptionalNullable[str] = UNSET
    r"""State or province of the customer."""

    postal_code: OptionalNullable[str] = UNSET
    r"""ZIP or Postal code of the customer."""

    country: OptionalNullable[CountryCodeEnum] = UNSET
    r"""Country code in ISO 3166-1 alpha-2 format"""

    full_address: OptionalNullable[str] = UNSET
    r"""Complete address string of the customer, which can be used as an alternative to individual fields."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "phone",
            "street_1",
            "street_2",
            "city",
            "county",
            "state",
            "postal_code",
            "country",
            "full_address",
        ]
        nullable_fields = [
            "phone",
            "street_1",
            "street_2",
            "city",
            "county",
            "state",
            "postal_code",
            "country",
            "full_address",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
