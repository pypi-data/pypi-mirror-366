"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countrycodeenum import CountryCodeEnum
from .transactionstatusenum import TransactionStatusEnum
from datetime import date
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from kintsugi_tax_platform_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetTransactionsV1TransactionsGetSecurityTypedDict(TypedDict):
    api_key_header: NotRequired[str]
    http_bearer: NotRequired[str]


class GetTransactionsV1TransactionsGetSecurity(BaseModel):
    api_key_header: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-API-KEY",
            )
        ),
    ] = None

    http_bearer: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


GetTransactionsV1TransactionsGetCountryTypedDict = TypeAliasType(
    "GetTransactionsV1TransactionsGetCountryTypedDict", Union[CountryCodeEnum, str]
)


GetTransactionsV1TransactionsGetCountry = TypeAliasType(
    "GetTransactionsV1TransactionsGetCountry", Union[CountryCodeEnum, str]
)


class GetTransactionsV1TransactionsGetRequestTypedDict(TypedDict):
    x_organization_id: Nullable[str]
    r"""The unique identifier for the organization making the request"""
    state_code: NotRequired[Nullable[str]]
    r"""Filter transactions by state code."""
    transaction_type: NotRequired[Nullable[str]]
    r"""Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
    PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
    """
    transaction_source: NotRequired[Nullable[str]]
    r"""Filter transactions based on the source."""
    search_query: NotRequired[Nullable[str]]
    r"""Search for transactions using a general query
    (e.g., order ID, customer name).
    """
    country: NotRequired[
        Nullable[List[GetTransactionsV1TransactionsGetCountryTypedDict]]
    ]
    r"""Filter transactions by country code
    (ISO 3166-1 alpha-2 format, e.g., US).
    """
    state: NotRequired[Nullable[str]]
    r"""Filter by full state name (e.g., California)."""
    address_status_in: NotRequired[Nullable[str]]
    r"""Filter by address status (e.g., UNVERIFIED, INVALID,
    PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
    """
    status: NotRequired[Nullable[TransactionStatusEnum]]
    r"""Filter by transaction status (e.g., PENDING, COMMITTED,
    CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
    """
    filing_id: NotRequired[Nullable[str]]
    r"""Retrieve transactions linked to a specific filing ID."""
    order_by: NotRequired[Nullable[str]]
    r"""Sort results based on specified fields.
    Prefix with - for descending order (e.g., -date for newest first).
    """
    date_gte: NotRequired[Nullable[date]]
    r"""Retrieve transactions with a date
    greater than or equal to (YYYY-MM-DD).
    """
    date_lte: NotRequired[Nullable[date]]
    r"""Retrieve transactions with a date
    less than or equal to (YYYY-MM-DD).
    """
    processing_status_in: NotRequired[Nullable[str]]
    r"""Filter transactions based on processing status.
    Multiple values can be passed as a comma-separated list.
    """
    marketplace: NotRequired[Nullable[bool]]
    r"""Filter transactions by marketplace (e.g., AMAZON, EBAY)."""
    exempt_in: NotRequired[Nullable[str]]
    r"""Filter transactions by exemption status.
    Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
    """
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetTransactionsV1TransactionsGetRequest(BaseModel):
    x_organization_id: Annotated[
        Nullable[str],
        pydantic.Field(alias="x-organization-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""The unique identifier for the organization making the request"""

    state_code: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions by state code."""

    transaction_type: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
    PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
    """

    transaction_source: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions based on the source."""

    search_query: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Search for transactions using a general query
    (e.g., order ID, customer name).
    """

    country: Annotated[
        OptionalNullable[List[GetTransactionsV1TransactionsGetCountry]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions by country code
    (ISO 3166-1 alpha-2 format, e.g., US).
    """

    state: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by full state name (e.g., California)."""

    address_status_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="address_status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by address status (e.g., UNVERIFIED, INVALID,
    PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
    """

    status: Annotated[
        OptionalNullable[TransactionStatusEnum],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by transaction status (e.g., PENDING, COMMITTED,
    CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
    """

    filing_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Retrieve transactions linked to a specific filing ID."""

    order_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Sort results based on specified fields.
    Prefix with - for descending order (e.g., -date for newest first).
    """

    date_gte: Annotated[
        OptionalNullable[date],
        pydantic.Field(alias="date__gte"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Retrieve transactions with a date
    greater than or equal to (YYYY-MM-DD).
    """

    date_lte: Annotated[
        OptionalNullable[date],
        pydantic.Field(alias="date__lte"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Retrieve transactions with a date
    less than or equal to (YYYY-MM-DD).
    """

    processing_status_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="processing_status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions based on processing status.
    Multiple values can be passed as a comma-separated list.
    """

    marketplace: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions by marketplace (e.g., AMAZON, EBAY)."""

    exempt_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="exempt__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions by exemption status.
    Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
    """

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "state_code",
            "transaction_type",
            "transaction_source",
            "search_query",
            "country",
            "state",
            "address_status__in",
            "status",
            "filing_id",
            "order_by",
            "date__gte",
            "date__lte",
            "processing_status__in",
            "marketplace",
            "exempt__in",
            "page",
            "size",
        ]
        nullable_fields = [
            "state_code",
            "transaction_type",
            "transaction_source",
            "search_query",
            "country",
            "state",
            "address_status__in",
            "status",
            "filing_id",
            "order_by",
            "date__gte",
            "date__lte",
            "processing_status__in",
            "marketplace",
            "exempt__in",
            "x-organization-id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
