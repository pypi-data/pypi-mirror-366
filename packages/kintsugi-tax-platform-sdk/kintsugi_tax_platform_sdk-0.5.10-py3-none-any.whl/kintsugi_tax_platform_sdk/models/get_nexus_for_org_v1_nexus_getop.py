"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from kintsugi_tax_platform_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from kintsugi_tax_platform_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetNexusForOrgV1NexusGetSecurityTypedDict(TypedDict):
    api_key_header: NotRequired[str]
    http_bearer: NotRequired[str]


class GetNexusForOrgV1NexusGetSecurity(BaseModel):
    api_key_header: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-API-KEY",
            )
        ),
    ] = None

    http_bearer: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


class GetNexusForOrgV1NexusGetRequestTypedDict(TypedDict):
    x_organization_id: Nullable[str]
    r"""The unique identifier for the organization making the request"""
    status_in: NotRequired[Nullable[str]]
    state_code: NotRequired[Nullable[str]]
    country_code_in: NotRequired[Nullable[str]]
    order_by: NotRequired[Nullable[str]]
    collected_tax_nexus_met: NotRequired[Nullable[bool]]
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetNexusForOrgV1NexusGetRequest(BaseModel):
    x_organization_id: Annotated[
        Nullable[str],
        pydantic.Field(alias="x-organization-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""The unique identifier for the organization making the request"""

    status_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    state_code: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    country_code_in: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="country_code__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    order_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    collected_tax_nexus_met: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "status__in",
            "state_code",
            "country_code__in",
            "order_by",
            "collected_tax_nexus_met",
            "page",
            "size",
        ]
        nullable_fields = [
            "status__in",
            "state_code",
            "country_code__in",
            "order_by",
            "collected_tax_nexus_met",
            "x-organization-id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
