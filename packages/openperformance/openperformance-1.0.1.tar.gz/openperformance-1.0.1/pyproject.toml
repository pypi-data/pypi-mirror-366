[build-system]
requires = ["setuptools>=69.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "openperformance"
version = "1.0.1"
description = "Enterprise-grade ML Performance Engineering Platform for optimization, monitoring, and deployment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OpenPerformance Team", email = "team@openperformance.ai"},
]
maintainers = [
    {name = "OpenPerformance Maintainers", email = "maintainers@openperformance.ai"},
]
keywords = ["ml", "performance", "optimization", "monitoring", "deployment", "mlops", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies - see requirements.txt for full list
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer[all]>=0.9.0",
    "numpy>=1.24.0",
    "torch>=2.1.0",
    "sqlalchemy>=2.0.0",
    "redis>=5.0.0",
    "psutil>=5.9.0",
    "openai>=1.20.0",
    "httpx>=0.25.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    # Development dependencies - see dev-requirements.txt for full list
    "pytest>=7.4.0",
    "black>=23.11.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "sphinx>=7.2.0",
]
enterprise = [
    "enterprise-logging>=1.0.0",
    "enterprise-security>=2.0.0",
    "enterprise-monitoring>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/openperformance/openperformance"
Documentation = "https://openperformance.io"
Repository = "https://github.com/openperformance/openperformance.git"
"Bug Tracker" = "https://github.com/openperformance/openperformance/issues"
Changelog = "https://github.com/openperformance/openperformance/blob/main/CHANGELOG.md"

[project.scripts]
openperf = "mlperf.cli.main:app"
mlperf = "mlperf.cli.main:app"
openperf-server = "mlperf.api.main:start_server"
openperf-worker = "mlperf.workers.main:start_worker"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["python"]
include = ["mlperf*"]

[tool.setuptools.package-data]
"mlperf" = ["*.json", "*.yaml", "*.yml", "*.toml"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
  | \.pytest_cache
  | \.ruff_cache
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "DTZ",  # flake8-datetimez
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "NPY",  # numpy-specific rules
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "S104",  # possible binding to all interfaces
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password
    "S107",  # possible hardcoded password
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004"]
"scripts/*" = ["S101", "T201"]
"python/mlperf/cli/*" = ["T201"]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/node_modules/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "tensorflow.*",
    "jax.*",
    "horovod.*",
    "deepspeed.*",
    "mpi4py.*",
    "nvidia_ml_py.*",
    "pynvml.*",
    "transformers.*",
    "accelerate.*",
    "datasets.*",
    "ray.*",
    "dask.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests", "python/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=python.mlperf",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
    "--cov-fail-under=13",
    "--strict-markers",
    "--tb=short",
    "--maxfail=1",
    "-ra",
    "--ignore=node_modules",
    "--ignore=venv",
    "--ignore=.venv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
    "benchmark: marks performance benchmark tests",
    "unit: marks unit tests",
    "e2e: marks end-to-end tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["python/mlperf"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["python/mlperf"]
exclude_dirs = ["tests", "venv", ".venv", "node_modules"]
severity = "medium"
confidence = "medium"
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0622",  # redefined-builtin
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 100

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true