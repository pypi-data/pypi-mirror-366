# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .pentest_service_action import PentestServiceAction
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class PentestGeneralConfig(UniversalBaseModel):
    targets: typing.List[str]
    usernames: typing.Optional[typing.List[str]] = None
    passwords: typing.Optional[typing.List[str]] = None
    username_file: typing.Optional[str] = pydantic.Field(alias="usernameFile", default=None)
    password_file: typing.Optional[str] = pydantic.Field(alias="passwordFile", default=None)
    credentials: typing.Optional[str] = None
    actions: typing.List[PentestServiceAction]
    execute_commands: typing.Optional[typing.List[str]] = pydantic.Field(alias="executeCommands", default=None)
    command_file: typing.Optional[str] = pydantic.Field(alias="commandFile", default=None)
    upload_files: typing.Optional[typing.Dict[str, str]] = pydantic.Field(alias="uploadFiles", default=None)
    download_files: typing.Optional[typing.List[str]] = pydantic.Field(alias="downloadFiles", default=None)
    timeout: int
    retries: int
    threads: typing.Optional[int] = None
    verbose: typing.Optional[bool] = None
    successful_only: typing.Optional[bool] = pydantic.Field(alias="successfulOnly", default=None)
    stop_on_first_success: typing.Optional[bool] = pydantic.Field(alias="stopOnFirstSuccess", default=None)
    continue_on_error: typing.Optional[bool] = pydantic.Field(alias="continueOnError", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
