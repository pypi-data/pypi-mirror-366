# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .......core.pydantic_utilities import UniversalBaseModel
import typing
from .......core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..domaindump.domain_users_result import DomainUsersResult
from ..domaindump.domain_groups_result import DomainGroupsResult
from ..domaindump.domain_computer import DomainComputer
from ..domaindump.domain_controller import DomainController
from ..domaindump.organizational_unit import OrganizationalUnit
from ..domaindump.group_policy_object import GroupPolicyObject
from ..domaindump.domain_trust import DomainTrust


class PentestLdapResult_LdapAuthResult(UniversalBaseModel):
    type: typing.Literal["LdapAuthResult"] = "LdapAuthResult"
    target: str
    domain: str
    successful: bool
    username: str
    message: str
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestLdapResult_DomainDumpResult(UniversalBaseModel):
    type: typing.Literal["DomainDumpResult"] = "DomainDumpResult"
    users: typing.Optional[DomainUsersResult] = None
    groups: typing.Optional[DomainGroupsResult] = None
    computers: typing.Optional[typing.List[DomainComputer]] = None
    domain_controllers: typing.Optional[typing.List[DomainController]] = pydantic.Field(
        alias="domainControllers", default=None
    )
    organizational_units: typing.Optional[typing.List[OrganizationalUnit]] = pydantic.Field(
        alias="organizationalUnits", default=None
    )
    group_policy_objects: typing.Optional[typing.List[GroupPolicyObject]] = pydantic.Field(
        alias="groupPolicyObjects", default=None
    )
    domain_trusts: typing.Optional[typing.List[DomainTrust]] = pydantic.Field(alias="domainTrusts", default=None)
    total_objects: typing.Optional[int] = pydantic.Field(alias="totalObjects", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


PentestLdapResult = typing.Union[PentestLdapResult_LdapAuthResult, PentestLdapResult_DomainDumpResult]
