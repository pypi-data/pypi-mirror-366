# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .spray_password_config import SprayPasswordConfig
from .spray_target_result import SprayTargetResult
from .....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .spray_username_config import SprayUsernameConfig


class SprayReport_Password(UniversalBaseModel):
    type: typing.Literal["password"] = "password"
    config: SprayPasswordConfig
    result: typing.List[SprayTargetResult]
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class SprayReport_Username(UniversalBaseModel):
    type: typing.Literal["username"] = "username"
    config: SprayUsernameConfig
    result: typing.List[SprayTargetResult]
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


SprayReport = typing.Union[SprayReport_Password, SprayReport_Username]
