from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core
import xsigmamodules.Market
import xsigmamodules.Util

class parameter_markovian_hjm_enum(int):
    HULL_WHITE:'parameter_markovian_hjm_enum'
    PICEWISE_CONSTANT:'parameter_markovian_hjm_enum'

class calibrationBlackKarasinskiSettings(xsigmamodules.Util.configData):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationBlackKarasinskiSettings') -> None: ...
    def backward(self) -> bool: ...
    def debug(self) -> bool: ...
    def initialize(self) -> None: ...
    def level_lower_bound(self) -> float: ...
    def level_upper_bound(self) -> float: ...
    def mean_reversion_spead(self) -> float: ...
    def minimum_step(self) -> float: ...
    def pde_grid_size(self) -> int: ...
    def pde_span(self) -> float: ...
    def period(self) -> int: ...
    def printf(rhs:'calibrationBlackKarasinskiSettings') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationBlackKarasinskiSettings': ...
    def read_from_json(file_name:str) -> 'calibrationBlackKarasinskiSettings': ...
    def static_cast(self) -> 'calibrationBlackKarasinskiSettings': ...
    def step(self) -> float: ...
    def tolerance(self) -> float: ...
    def update_bounds(self) -> bool: ...
    def use_adjustement(self) -> bool: ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'calibrationBlackKarasinskiSettings') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationBlackKarasinskiSettings') -> None: ...

class calibrationBlackKarasinskiSettingsBuilder(object):
    def __init__(self) -> None: ...
    def build(self) -> 'calibrationBlackKarasinskiSettings': ...
    def static_cast(self) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_backward(self, val:bool) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_debug(self, val:bool) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_frequency(self, val:str) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_level_lower_bound(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_level_upper_bound(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_mean_reversion_spead(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_minimum_step(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_pde_grid_size(self, val:int) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_pde_span(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_period(self, val:int) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_step(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_tolerance(self, val:float) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_update_bounds(self, val:bool) -> 'calibrationBlackKarasinskiSettingsBuilder': ...
    def with_use_adjustement(self, val:bool) -> 'calibrationBlackKarasinskiSettingsBuilder': ...

class calibrationBlackKarasinskiSettingsId(xsigmamodules.Market.configDataId):
    @overload
    def __init__(self, id:'parameterBlackKarasinskiId') -> None: ...
    @overload
    def __init__(self, __a:'calibrationBlackKarasinskiSettingsId') -> None: ...
    def id(self) -> 'parameterBlackKarasinskiId': ...
    def printf(rhs:'calibrationBlackKarasinskiSettingsId') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationBlackKarasinskiSettingsId': ...
    def read_from_json(file_name:str) -> 'calibrationBlackKarasinskiSettingsId': ...
    def static_cast(self) -> 'calibrationBlackKarasinskiSettingsId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'calibrationBlackKarasinskiSettingsId') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationBlackKarasinskiSettingsId') -> None: ...

class calibrationCheyetteSettings(xsigmamodules.Util.configData):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationCheyetteSettings') -> None: ...
    def debug(self) -> bool: ...
    def initialize(self) -> None: ...
    def printf(rhs:'calibrationCheyetteSettings') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationCheyetteSettings': ...
    def read_from_json(file_name:str) -> 'calibrationCheyetteSettings': ...
    def static_cast(self) -> 'calibrationCheyetteSettings': ...
    def tolerance(self) -> float: ...
    def type(self) -> 'parameter_markovian_hjm_enum': ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'calibrationCheyetteSettings') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationCheyetteSettings') -> None: ...

class calibrationCheyetteSettingsBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationCheyetteSettingsBuilder') -> None: ...
    def build(self) -> 'calibrationCheyetteSettings': ...
    def static_cast(self) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_debug(self, val:bool) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_decay_bounds(self, val:Sequence[float]) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_max_iterations(self, val:int) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_skew_bounds(self, val:Sequence[float]) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_tolerance(self, val:float) -> 'calibrationCheyetteSettingsBuilder': ...
    def with_type(self, val:'parameter_markovian_hjm_enum') -> 'calibrationCheyetteSettingsBuilder': ...
    def with_volatility_bounds(self, val:Sequence[float]) -> 'calibrationCheyetteSettingsBuilder': ...

class calibrationCreditBlackKarasinski(object):
    def initialize(self) -> None: ...
    def static_cast(self) -> 'calibrationCreditBlackKarasinski': ...
    def validate(self) -> None: ...

class calibrationCreditBlackKarasinskiBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationCreditBlackKarasinskiBuilder') -> None: ...
    def build(self) -> 'calibrationCreditBlackKarasinski': ...
    def static_cast(self) -> 'calibrationCreditBlackKarasinskiBuilder': ...
    def with_calibration_settings(self, val:'calibrationBlackKarasinskiSettings') -> 'calibrationCreditBlackKarasinskiBuilder': ...
    def with_correlation_credit_ir(self, val:'matrix_IdE') -> 'calibrationCreditBlackKarasinskiBuilder': ...
    def with_curve(self, val:'survivalCurve') -> 'calibrationCreditBlackKarasinskiBuilder': ...
    def with_ir_parameters(self, val:'parameterMarkovianHjm') -> 'calibrationCreditBlackKarasinskiBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'calibrationCreditBlackKarasinskiBuilder': ...

class calibrationHjmSettings(xsigmamodules.Util.configData):
    def printf(rhs:'calibrationHjmSettings') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationHjmSettings': ...
    def read_from_json(file_name:str) -> 'calibrationHjmSettings': ...
    def solver_option(self) -> 'solverOptions': ...
    def static_cast(self) -> 'calibrationHjmSettings': ...
    def type(self) -> 'parameter_markovian_hjm_enum': ...
    def write_to_binary(file_name:str, rhs:'calibrationHjmSettings') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationHjmSettings') -> None: ...

class calibrationHjmSettingsBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationHjmSettingsBuilder') -> None: ...
    def build(self) -> 'calibrationHjmSettings': ...
    def static_cast(self) -> 'calibrationHjmSettingsBuilder': ...
    def with_calibrate_correlation_flag(self, val:bool=True) -> 'calibrationHjmSettingsBuilder': ...
    def with_calibrate_to_all_target_flag(self, val:bool=True) -> 'calibrationHjmSettingsBuilder': ...
    def with_decay_bounds(self, val:Sequence[float]) -> 'calibrationHjmSettingsBuilder': ...
    def with_number_of_factors(self, val:int) -> 'calibrationHjmSettingsBuilder': ...
    def with_regularization_factor(self, val:float) -> 'calibrationHjmSettingsBuilder': ...
    def with_regularization_flag(self, val:bool=True) -> 'calibrationHjmSettingsBuilder': ...
    def with_solver_options(self, val:'solverOptions') -> 'calibrationHjmSettingsBuilder': ...
    def with_type(self, val:'parameter_markovian_hjm_enum') -> 'calibrationHjmSettingsBuilder': ...
    def with_volatility_bounds(self, val:Sequence[float]) -> 'calibrationHjmSettingsBuilder': ...

class calibrationHjmSettingsId(xsigmamodules.Market.configDataId):
    @overload
    def __init__(self, id:'parameterMarkovianHjmId') -> None: ...
    @overload
    def __init__(self, __a:'calibrationHjmSettingsId') -> None: ...
    def id(self) -> 'parameterMarkovianHjmId': ...
    def printf(rhs:'calibrationHjmSettingsId') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationHjmSettingsId': ...
    def read_from_json(file_name:str) -> 'calibrationHjmSettingsId': ...
    def static_cast(self) -> 'calibrationHjmSettingsId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'calibrationHjmSettingsId') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationHjmSettingsId') -> None: ...

class calibrationIrCheyette(object):
    def __init__(self, valuation_date:'datetime', curve:'discountCurve', targets_config:'calibrationIrTargetsConfiguration', convention:'dayCountConvention') -> None: ...
    def calibrate(self, volatility_surface:'irVolatility', settings:'calibrationCheyetteSettings', parameter_hjm:'parameterMarkovianHjm') -> 'parameterCheyette': ...
    def static_cast(self) -> 'calibrationIrCheyette': ...
    def swaptions(self) -> Tuple['calibrationIrCheyetteSwaption', 'calibrationIrCheyetteSwaption']: ...

class calibrationIrHjm(object):
    def __init__(self, valuation_date:'datetime', targets_config:'calibrationIrTargetsConfiguration') -> None: ...
    def calibrate(self, id:'parameterMarkovianHjmId', settings:'calibrationHjmSettings', curve:'discountCurve', volatility_surface:'irVolatility', correlation_mgr:'correlationManager', strikes:Sequence[float]=..., initial_parameter:'parameterMarkovianHjm'=...) -> 'parameterMarkovianHjm': ...
    def cms_spread_pricing_experimental(valuation_date:'datetime', expiry_date:'datetime', parameter:'parameterMarkovianHjm', discount_crv:'discountCurve', use_forward_measure:bool=True) -> float: ...
    def static_cast(self) -> 'calibrationIrHjm': ...
    def swaptions(self) -> Tuple['calibrationIrSwap', 'calibrationIrSwap']: ...

class calibrationIrTargetsConfiguration(xsigmamodules.Util.configData):
    def cms_tenors(self) -> Tuple[str, str]: ...
    def convention(self) -> 'dayCountConvention': ...
    def coterminal(self) -> str: ...
    def expiries(self) -> Tuple[str, str]: ...
    def frequency(self) -> str: ...
    def include_caplets(self) -> bool: ...
    def include_cms(self) -> bool: ...
    def include_coterminal(self) -> bool: ...
    def printf(rhs:'calibrationIrTargetsConfiguration') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationIrTargetsConfiguration': ...
    def read_from_json(file_name:str) -> 'calibrationIrTargetsConfiguration': ...
    def static_cast(self) -> 'calibrationIrTargetsConfiguration': ...
    def write_to_binary(file_name:str, rhs:'calibrationIrTargetsConfiguration') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationIrTargetsConfiguration') -> None: ...

class calibrationIrTargetsConfigurationBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'calibrationIrTargetsConfigurationBuilder') -> None: ...
    def build(self) -> 'calibrationIrTargetsConfiguration': ...
    def static_cast(self) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_cms_tenors(self, val:Sequence[str]) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_convention(self, val:'dayCountConvention') -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_coterminal(self, val:str) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_expiries(self, val:Sequence[str]) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_frequency(self, val:str) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_include_caplets(self, val:bool) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_include_cms(self, val:bool) -> 'calibrationIrTargetsConfigurationBuilder': ...
    def with_include_coterminal(self, val:bool) -> 'calibrationIrTargetsConfigurationBuilder': ...

class calibrationIrTargetsConfigurationId(xsigmamodules.Market.configDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataIrId') -> None: ...
    @overload
    def __init__(self, __a:'calibrationIrTargetsConfigurationId') -> None: ...
    def id(self) -> 'simulatedMarketDataIrId': ...
    def printf(rhs:'calibrationIrTargetsConfigurationId') -> str: ...
    def read_from_binary(file_name:str) -> 'calibrationIrTargetsConfigurationId': ...
    def read_from_json(file_name:str) -> 'calibrationIrTargetsConfigurationId': ...
    def static_cast(self) -> 'calibrationIrTargetsConfigurationId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'calibrationIrTargetsConfigurationId') -> None: ...
    def write_to_json(file_name:str, rhs:'calibrationIrTargetsConfigurationId') -> None: ...

class correlationManager(xsigmamodules.Market.marketData):
    def id(self, i:int) -> 'simulatedMarketDataId': ...
    def ids(self) -> Tuple['simulatedMarketDataId', 'simulatedMarketDataId']: ...
    def number_of_factors(self, id:'simulatedMarketDataId') -> int: ...
    def pair_correlation_matrix(self, ids1:Sequence['simulatedMarketDataId'], ids2:Sequence['simulatedMarketDataId']) -> 'matrix_IdE': ...
    def printf(rhs:'correlationManager') -> str: ...
    def read_from_binary(file_name:str) -> 'correlationManager': ...
    def read_from_json(file_name:str) -> 'correlationManager': ...
    def static_cast(self) -> 'correlationManager': ...
    def write_to_binary(file_name:str, rhs:'correlationManager') -> None: ...
    def write_to_json(file_name:str, rhs:'correlationManager') -> None: ...

class correlationManagerBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'correlationManagerBuilder') -> None: ...
    def build(self) -> 'correlationManager': ...
    def static_cast(self) -> 'correlationManagerBuilder': ...
    def with_correlation(self, val:'matrix_IdE') -> 'correlationManagerBuilder': ...
    def with_factors(self, val:Sequence[int]) -> 'correlationManagerBuilder': ...
    def with_ids(self, val:Sequence['simulatedMarketDataId']) -> 'correlationManagerBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'correlationManagerBuilder': ...

class correlationManagerId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'correlationManagerId') -> None: ...
    def printf(rhs:'correlationManagerId') -> str: ...
    def read_from_binary(file_name:str) -> 'correlationManagerId': ...
    def read_from_json(file_name:str) -> 'correlationManagerId': ...
    def static_cast(self) -> 'correlationManagerId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'correlationManagerId') -> None: ...
    def write_to_json(file_name:str, rhs:'correlationManagerId') -> None: ...

class dynamicInstruction(xsigmamodules.Util.configData):
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstruction': ...

class dynamicInstructionCreditBlackKarasinski(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionCreditBlackKarasinski') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionCreditBlackKarasinski': ...

class dynamicInstructionCreditExtendedCir(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionCreditExtendedCir') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionCreditExtendedCir': ...

class dynamicInstructionId(xsigmamodules.Market.configDataId):
    def base_curve_id(self) -> 'baseCurveType': ...
    def id(self) -> 'simulatedMarketDataId': ...
    def static_cast(self) -> 'dynamicInstructionId': ...
    def to_string(self) -> str: ...

class dynamicInstructionCreditId(dynamicInstructionId):
    @overload
    def __init__(self, id:'simulatedMarketDataCreditId') -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionCreditId') -> None: ...
    def base_curve_id(self) -> 'baseCurveType': ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'dynamicInstructionCreditId') -> str: ...
    def read_from_binary(file_name:str) -> 'dynamicInstructionCreditId': ...
    def read_from_json(file_name:str) -> 'dynamicInstructionCreditId': ...
    def static_cast(self) -> 'dynamicInstructionCreditId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'dynamicInstructionCreditId') -> None: ...
    def write_to_json(file_name:str, rhs:'dynamicInstructionCreditId') -> None: ...

class dynamicInstructionCreditMarkovianHjm(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionCreditMarkovianHjm') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionCreditMarkovianHjm': ...

class dynamicInstructionEquityId(dynamicInstructionId):
    @overload
    def __init__(self, id:'simulatedMarketDataEquityId') -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionEquityId') -> None: ...
    def base_curve_id(self) -> 'baseCurveType': ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'dynamicInstructionEquityId') -> str: ...
    def read_from_binary(file_name:str) -> 'dynamicInstructionEquityId': ...
    def read_from_json(file_name:str) -> 'dynamicInstructionEquityId': ...
    def static_cast(self) -> 'dynamicInstructionEquityId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'dynamicInstructionEquityId') -> None: ...
    def write_to_json(file_name:str, rhs:'dynamicInstructionEquityId') -> None: ...

class dynamicInstructionEquityLognormal(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionEquityLognormal') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionEquityLognormal': ...

class dynamicInstructionFxId(dynamicInstructionId):
    @overload
    def __init__(self, id:'simulatedMarketDataFxId') -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionFxId') -> None: ...
    def base_curve_id(self) -> 'baseCurveType': ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'dynamicInstructionFxId') -> str: ...
    def read_from_binary(file_name:str) -> 'dynamicInstructionFxId': ...
    def read_from_json(file_name:str) -> 'dynamicInstructionFxId': ...
    def static_cast(self) -> 'dynamicInstructionFxId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'dynamicInstructionFxId') -> None: ...
    def write_to_json(file_name:str, rhs:'dynamicInstructionFxId') -> None: ...

class dynamicInstructionFxLognormal(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionFxLognormal') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionFxLognormal': ...

class dynamicInstructionIrBlackKarasinski(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionIrBlackKarasinski') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionIrBlackKarasinski': ...

class dynamicInstructionIrCheyette(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionIrCheyette') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionIrCheyette': ...

class dynamicInstructionIrExtendedCir(dynamicInstruction):
    def __init__(self) -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionIrExtendedCir': ...

class dynamicInstructionIrId(dynamicInstructionId):
    @overload
    def __init__(self, id:'simulatedMarketDataIrId') -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionIrId') -> None: ...
    def base_curve_id(self) -> 'baseCurveType': ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'dynamicInstructionIrId') -> str: ...
    def read_from_binary(file_name:str) -> 'dynamicInstructionIrId': ...
    def read_from_json(file_name:str) -> 'dynamicInstructionIrId': ...
    def static_cast(self) -> 'dynamicInstructionIrId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'dynamicInstructionIrId') -> None: ...
    def write_to_json(file_name:str, rhs:'dynamicInstructionIrId') -> None: ...

class dynamicInstructionIrMarkovianHjm(dynamicInstruction):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'dynamicInstructionIrMarkovianHjm') -> None: ...
    def number_of_states(self, number_of_factors:int) -> int: ...
    def static_cast(self) -> 'dynamicInstructionIrMarkovianHjm': ...

class lognormalModelWithMhjmIr(object):
    def calibrate(self, calibration_dates:Sequence['datetime'], market_variance:Sequence[float], day_convention:'dayCountConvention') -> 'parameterLognormal': ...
    def static_cast(self) -> 'lognormalModelWithMhjmIr': ...

class lognormalEquityWithMhjmIr(lognormalModelWithMhjmIr):
    @overload
    def __init__(self, valuation_date:'datetime', correlation_matrix:'matrix_IdE', parameter_ir:'parameterMarkovianHjm') -> None: ...
    @overload
    def __init__(self, __a:'lognormalEquityWithMhjmIr') -> None: ...
    def static_cast(self) -> 'lognormalEquityWithMhjmIr': ...

class lognormalEquityWithMhjmIrBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'lognormalEquityWithMhjmIrBuilder') -> None: ...
    def build(self) -> 'lognormalEquityWithMhjmIr': ...
    def static_cast(self) -> 'lognormalEquityWithMhjmIrBuilder': ...
    def with_correlation_matrix(self, val:'matrix_IdE') -> 'lognormalEquityWithMhjmIrBuilder': ...
    def with_parameter_ir(self, val:'parameterMarkovianHjm') -> 'lognormalEquityWithMhjmIrBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'lognormalEquityWithMhjmIrBuilder': ...

class lognormalFxWithMhjmIr(lognormalModelWithMhjmIr):
    @overload
    def __init__(self, valuation_date:'datetime', correlation_matrix:'matrix_IdE', parameter_ir_domestic:'parameterMarkovianHjm', parameter_ir_foreign:'parameterMarkovianHjm') -> None: ...
    @overload
    def __init__(self, __a:'lognormalFxWithMhjmIr') -> None: ...
    def static_cast(self) -> 'lognormalFxWithMhjmIr': ...

class lognormalFxWithMhjmIrBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'lognormalFxWithMhjmIrBuilder') -> None: ...
    def build(self) -> 'lognormalFxWithMhjmIr': ...
    def static_cast(self) -> 'lognormalFxWithMhjmIrBuilder': ...
    def with_correlation_matrix(self, val:'matrix_IdE') -> 'lognormalFxWithMhjmIrBuilder': ...
    def with_parameter_ir_domestic(self, val:'parameterMarkovianHjm') -> 'lognormalFxWithMhjmIrBuilder': ...
    def with_parameter_ir_foreign(self, val:'parameterMarkovianHjm') -> 'lognormalFxWithMhjmIrBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'lognormalFxWithMhjmIrBuilder': ...

class measure(xsigmamodules.Util.configData):
    @overload
    def __init__(self, id:'discountCurveId') -> None: ...
    @overload
    def __init__(self, __a:'measure') -> None: ...
    def id(self) -> 'discountCurveId': ...
    def printf(rhs:'measure') -> str: ...
    def read_from_binary(file_name:str) -> 'measure': ...
    def read_from_json(file_name:str) -> 'measure': ...
    def static_cast(self) -> 'measure': ...
    def write_to_binary(file_name:str, rhs:'measure') -> None: ...
    def write_to_json(file_name:str, rhs:'measure') -> None: ...

class measureId(xsigmamodules.Market.configDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'measureId') -> None: ...
    def printf(rhs:'measureId') -> str: ...
    def read_from_binary(file_name:str) -> 'measureId': ...
    def read_from_json(file_name:str) -> 'measureId': ...
    def static_cast(self) -> 'measureId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'measureId') -> None: ...
    def write_to_json(file_name:str, rhs:'measureId') -> None: ...

class parameterBlackKarasinski(xsigmamodules.Market.marketData):
    def __init__(self, mrs:float, volatilities:MutableSequence[float], volatility_dates:MutableSequence['datetime'], levels_parameter:MutableSequence[float], levels_parameter_dates:MutableSequence['datetime'], convention:'dayCountConvention', time_step_in_days:int=10, number_of_roots:int=8) -> None: ...
    def convention(self) -> 'dayCountConvention': ...
    def levels_parameter(self) -> Tuple[float, float]: ...
    def levels_parameter_dates(self) -> Tuple['datetime', 'datetime']: ...
    def levels_parameter_offset(self, t:'datetime') -> int: ...
    def mean_reversion_speed(self) -> float: ...
    def number_of_factors(self) -> int: ...
    def number_of_roots(self) -> int: ...
    def printf(rhs:'parameterBlackKarasinski') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterBlackKarasinski': ...
    def read_from_json(file_name:str) -> 'parameterBlackKarasinski': ...
    def static_cast(self) -> 'parameterBlackKarasinski': ...
    def time_step_in_days(self) -> int: ...
    def volatilities(self) -> Tuple[float, float]: ...
    def volatility_dates(self) -> Tuple['datetime', 'datetime']: ...
    def write_to_binary(file_name:str, rhs:'parameterBlackKarasinski') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterBlackKarasinski') -> None: ...

class parameterBlackKarasinskiId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataId') -> None: ...
    @overload
    def __init__(self, __a:'parameterBlackKarasinskiId') -> None: ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'parameterBlackKarasinskiId') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterBlackKarasinskiId': ...
    def read_from_json(file_name:str) -> 'parameterBlackKarasinskiId': ...
    def static_cast(self) -> 'parameterBlackKarasinskiId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'parameterBlackKarasinskiId') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterBlackKarasinskiId') -> None: ...

class parameterCheyette(xsigmamodules.Market.marketData):
    def __init__(self, parameters:'parameterMarkovianHjm', skew_parameter:'matrix_IdE', skew_parameter_dates:Sequence['datetime'], long_term_skew_level:float) -> None: ...
    def long_term_skew_level(self) -> float: ...
    def parameters(self) -> 'parameterMarkovianHjm': ...
    def printf(rhs:'parameterCheyette') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterCheyette': ...
    def read_from_json(file_name:str) -> 'parameterCheyette': ...
    def skew_parameter(self) -> 'matrix_IdE': ...
    def skew_parameter_dates(self) -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'parameterCheyette': ...
    def write_to_binary(file_name:str, rhs:'parameterCheyette') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterCheyette') -> None: ...

class parameterCheyetteId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataId') -> None: ...
    @overload
    def __init__(self, __a:'parameterCheyetteId') -> None: ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'parameterCheyetteId') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterCheyetteId': ...
    def read_from_json(file_name:str) -> 'parameterCheyetteId': ...
    def static_cast(self) -> 'parameterCheyetteId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'parameterCheyetteId') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterCheyetteId') -> None: ...

class parameterExtendedCir(xsigmamodules.Market.marketData):
    def __init__(self, mean_reversion_speeds:'matrix_IdE', volatilities:'matrix_IdE', shifts:'matrix_IdE', correlation:'matrix_IdE', mean_reversion_speed_dates:Sequence['datetime'] , volatilities_dates:Sequence['datetime'], shifts_dates:Sequence['datetime'] , day_convention:'dayCountConvention') -> None: ...
    def correlation(self) -> 'matrix_IdE': ...
    def day_convention(self) -> 'dayCountConvention': ...
    def mean_reversion_speed_dates(self) -> Tuple['datetime', 'datetime']: ...
    def mean_reversion_speeds(self) -> 'matrix_IdE': ...
    def number_of_factors(self) -> int: ...
    def printf(rhs:'parameterExtendedCir') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterExtendedCir': ...
    def read_from_json(file_name:str) -> 'parameterExtendedCir': ...
    def shifts(self) -> 'matrix_IdE': ...
    def shifts_dates(self) -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'parameterExtendedCir': ...
    def volatilities(self) -> 'matrix_IdE': ...
    def volatilities_dates(self) -> Tuple['datetime', 'datetime']: ...
    def write_to_binary(file_name:str, rhs:'parameterExtendedCir') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterExtendedCir') -> None: ...

class parameterExtendedCirId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataId') -> None: ...
    @overload
    def __init__(self, __a:'parameterExtendedCirId') -> None: ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'parameterExtendedCirId') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterExtendedCirId': ...
    def read_from_json(file_name:str) -> 'parameterExtendedCirId': ...
    def static_cast(self) -> 'parameterExtendedCirId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'parameterExtendedCirId') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterExtendedCirId') -> None: ...

class parameterLognormal(xsigmamodules.Market.marketData):
    def __init__(self, volatilities:'matrix_IdE', correlation:'matrix_IdE', volatilities_dates:Sequence['datetime'], day_convention:'dayCountConvention') -> None: ...
    def correlation(self) -> 'matrix_IdE': ...
    def day_convention(self) -> 'dayCountConvention': ...
    def number_of_factors(self) -> int: ...
    def printf(rhs:'parameterLognormal') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterLognormal': ...
    def read_from_json(file_name:str) -> 'parameterLognormal': ...
    def static_cast(self) -> 'parameterLognormal': ...
    def volatilities(self) -> 'matrix_IdE': ...
    def volatilities_dates(self) -> Tuple['datetime', 'datetime']: ...
    def write_to_binary(file_name:str, rhs:'parameterLognormal') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterLognormal') -> None: ...

class parameterLognormalId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataId') -> None: ...
    @overload
    def __init__(self, __a:'parameterLognormalId') -> None: ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'parameterLognormalId') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterLognormalId': ...
    def read_from_json(file_name:str) -> 'parameterLognormalId': ...
    def static_cast(self) -> 'parameterLognormalId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'parameterLognormalId') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterLognormalId') -> None: ...

class parameterMarkovianHjm(xsigmamodules.Market.marketData):
    @overload
    def __init__(self, decays:'matrix_IdE', volatilities:'matrix_IdE', correlation:'matrix_IdE', decays_dates:Sequence['datetime'], volatilities_dates:Sequence['datetime'], day_convention:'dayCountConvention', model_type:'parameter_markovian_hjm_enum') -> None: ...
    @overload
    def __init__(self, __a:'parameterMarkovianHjm') -> None: ...
    def correlation(self) -> 'matrix_IdE': ...
    def day_convention(self) -> 'dayCountConvention': ...
    def decays(self) -> 'matrix_IdE': ...
    def decays_dates(self) -> Tuple['datetime', 'datetime']: ...
    def model_type(self) -> 'parameter_markovian_hjm_enum': ...
    def number_of_factors(self) -> int: ...
    def printf(rhs:'parameterMarkovianHjm') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterMarkovianHjm': ...
    def read_from_json(file_name:str) -> 'parameterMarkovianHjm': ...
    def static_cast(self) -> 'parameterMarkovianHjm': ...
    def volatilities(self) -> 'matrix_IdE': ...
    def volatilities_dates(self) -> Tuple['datetime', 'datetime']: ...
    def write_to_binary(file_name:str, rhs:'parameterMarkovianHjm') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterMarkovianHjm') -> None: ...

class parameterMarkovianHjmId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'simulatedMarketDataId') -> None: ...
    @overload
    def __init__(self, __a:'parameterMarkovianHjmId') -> None: ...
    def id(self) -> 'simulatedMarketDataId': ...
    def printf(rhs:'parameterMarkovianHjmId') -> str: ...
    def read_from_binary(file_name:str) -> 'parameterMarkovianHjmId': ...
    def read_from_json(file_name:str) -> 'parameterMarkovianHjmId': ...
    def static_cast(self) -> 'parameterMarkovianHjmId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'parameterMarkovianHjmId') -> None: ...
    def write_to_json(file_name:str, rhs:'parameterMarkovianHjmId') -> None: ...

class pdeManager(object):
    def dates(self) -> Tuple['datetime', 'datetime']: ...
    def dimensions(self) -> Tuple[int, int]: ...
    def pv(self, pvs:MutableSequence[float]) -> None: ...
    def run(self, pricers:Sequence['instrument'], adjustements:Sequence[float] =..., data:Sequence['lifeCycleData']=...) -> None: ...
    def size(self) -> int: ...
    def static_cast(self) -> 'pdeManager': ...

class randomConfig(xsigmamodules.Util.configData):
    def device_type(self) -> 'device_enum': ...
    def full_skip(self) -> bool: ...
    def generator_type(self) -> 'random_enum': ...
    def main_generator_type(self) -> 'random_enum': ...
    def number_of_paths_per_batch(self) -> int: ...
    def orthogonalization(self) -> bool: ...
    def printf(rhs:'randomConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'randomConfig': ...
    def read_from_json(file_name:str) -> 'randomConfig': ...
    def seed(self) -> int: ...
    def set_generator_type(self, type:'random_enum') -> None: ...
    def set_main_generator_type(self, type:'random_enum') -> None: ...
    def static_cast(self) -> 'randomConfig': ...
    def use_shift(self) -> bool: ...
    def write_to_binary(file_name:str, rhs:'randomConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'randomConfig') -> None: ...

class randomConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'randomConfigBuilder') -> None: ...
    def build(self) -> 'randomConfig': ...
    def static_cast(self) -> 'randomConfigBuilder': ...
    def with_device_type(self, val:'device_enum') -> 'randomConfigBuilder': ...
    def with_full_skip(self, val:bool) -> 'randomConfigBuilder': ...
    def with_generator_type(self, val:'random_enum') -> 'randomConfigBuilder': ...
    def with_main_generator_type(self, val:'random_enum') -> 'randomConfigBuilder': ...
    def with_number_of_paths_per_batch(self, val:int) -> 'randomConfigBuilder': ...
    def with_orthogonalization(self, val:bool) -> 'randomConfigBuilder': ...
    def with_seed(self, val:int) -> 'randomConfigBuilder': ...
    def with_use_shift(self, val:bool) -> 'randomConfigBuilder': ...

class randomConfigId(xsigmamodules.Market.configDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'randomConfigId') -> None: ...
    def printf(rhs:'randomConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'randomConfigId': ...
    def read_from_json(file_name:str) -> 'randomConfigId': ...
    def static_cast(self) -> 'randomConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'randomConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'randomConfigId') -> None: ...

class randomManager(object):
    def correlate(self, time_index:int, decomposed_correlation:'matrix_IdE') -> 'matrix_IdE': ...
    def initialize(self) -> None: ...
    def number_of_paths(self) -> int: ...
    def static_cast(self) -> 'randomManager': ...
    def validate(self) -> None: ...

class randomManagerBuilder(object):
    def __init__(self) -> None: ...
    def static_cast(self) -> 'randomManagerBuilder': ...
    def with_batch_index(self, val:int) -> 'randomManagerBuilder': ...
    def with_config(self, val:'randomConfig') -> 'randomManagerBuilder': ...
    def with_number_of_dates(self, val:int) -> 'randomManagerBuilder': ...
    def with_number_of_factors(self, val:int) -> 'randomManagerBuilder': ...

class simulatedMarketData(object):
    def build_simulated_market_data(asset:'diffusion', next:'matrix_IdE', current:'matrix_IdE', simulated_assets:Sequence['marketData']) -> 'marketData': ...
    def convert(id:'simulatedMarketDataId') -> 'dynamicInstructionId': ...
    def static_cast(self) -> 'simulatedMarketData': ...

class simulatedMarketDataId(xsigmamodules.Market.marketDataId):
    def static_cast(self) -> 'simulatedMarketDataId': ...
    def to_string(self) -> str: ...

class simulatedMarketDataCreditId(simulatedMarketDataId):
    @overload
    def __init__(self, id:'defaultId') -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataCreditId') -> None: ...
    def id(self) -> 'defaultId': ...
    def printf(rhs:'simulatedMarketDataCreditId') -> str: ...
    def read_from_binary(file_name:str) -> 'simulatedMarketDataCreditId': ...
    def read_from_json(file_name:str) -> 'simulatedMarketDataCreditId': ...
    def static_cast(self) -> 'simulatedMarketDataCreditId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'simulatedMarketDataCreditId') -> None: ...
    def write_to_json(file_name:str, rhs:'simulatedMarketDataCreditId') -> None: ...

class simulatedMarketDataCreditIdBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataCreditIdBuilder') -> None: ...
    def build(self) -> 'simulatedMarketDataCreditId': ...
    def static_cast(self) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_currency(self, ccy:str) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_discount_definition(self, discount_def:str) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_isda(self, isda:str) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_name(self, name:str) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_restructuring(self, restructuring:str) -> 'simulatedMarketDataCreditIdBuilder': ...
    def with_seniority(self, seniority:str) -> 'simulatedMarketDataCreditIdBuilder': ...

class simulatedMarketDataEquityId(simulatedMarketDataId):
    @overload
    def __init__(self, equity_name:'equityForwardId') -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataEquityId') -> None: ...
    def id(self) -> 'equityForwardId': ...
    def printf(rhs:'simulatedMarketDataEquityId') -> str: ...
    def read_from_binary(file_name:str) -> 'simulatedMarketDataEquityId': ...
    def read_from_json(file_name:str) -> 'simulatedMarketDataEquityId': ...
    def static_cast(self) -> 'simulatedMarketDataEquityId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'simulatedMarketDataEquityId') -> None: ...
    def write_to_json(file_name:str, rhs:'simulatedMarketDataEquityId') -> None: ...

class simulatedMarketDataEquityIdBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataEquityIdBuilder') -> None: ...
    def build(self) -> 'simulatedMarketDataEquityId': ...
    def static_cast(self) -> 'simulatedMarketDataEquityIdBuilder': ...
    def with_currency(self, ccy:str) -> 'simulatedMarketDataEquityIdBuilder': ...
    def with_discount_definition(self, discount_def:str) -> 'simulatedMarketDataEquityIdBuilder': ...
    def with_equity_name(self, equity_name:str) -> 'simulatedMarketDataEquityIdBuilder': ...

class simulatedMarketDataFxId(simulatedMarketDataId):
    @overload
    def __init__(self, id:'fxForwardId') -> None: ...
    @overload
    def __init__(self, domestic_id:'discountCurveId', foreign_id:'discountCurveId') -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataFxId') -> None: ...
    def id(self) -> 'fxForwardId': ...
    def printf(rhs:'simulatedMarketDataFxId') -> str: ...
    def read_from_binary(file_name:str) -> 'simulatedMarketDataFxId': ...
    def read_from_json(file_name:str) -> 'simulatedMarketDataFxId': ...
    def static_cast(self) -> 'simulatedMarketDataFxId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'simulatedMarketDataFxId') -> None: ...
    def write_to_json(file_name:str, rhs:'simulatedMarketDataFxId') -> None: ...

class simulatedMarketDataFxIdBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataFxIdBuilder') -> None: ...
    def build(self) -> 'simulatedMarketDataFxId': ...
    def static_cast(self) -> 'simulatedMarketDataFxIdBuilder': ...
    def with_domestic_currency(self, domestic_ccy:str) -> 'simulatedMarketDataFxIdBuilder': ...
    def with_domestic_discount_definition(self, domestic_discount_def:str) -> 'simulatedMarketDataFxIdBuilder': ...
    def with_foreign_currency(self, foreign_ccy:str) -> 'simulatedMarketDataFxIdBuilder': ...
    def with_foreign_discount_definition(self, foreign_discount_def:str) -> 'simulatedMarketDataFxIdBuilder': ...

class simulatedMarketDataIrId(simulatedMarketDataId):
    @overload
    def __init__(self, id:'discountCurveId') -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataIrId') -> None: ...
    def id(self) -> 'discountCurveId': ...
    def printf(rhs:'simulatedMarketDataIrId') -> str: ...
    def read_from_binary(file_name:str) -> 'simulatedMarketDataIrId': ...
    def read_from_json(file_name:str) -> 'simulatedMarketDataIrId': ...
    def static_cast(self) -> 'simulatedMarketDataIrId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'simulatedMarketDataIrId') -> None: ...
    def write_to_json(file_name:str, rhs:'simulatedMarketDataIrId') -> None: ...

class simulatedMarketDataIrIdBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'simulatedMarketDataIrIdBuilder') -> None: ...
    def build(self) -> 'simulatedMarketDataIrId': ...
    def static_cast(self) -> 'simulatedMarketDataIrIdBuilder': ...
    def with_currency(self, ccy:str) -> 'simulatedMarketDataIrIdBuilder': ...
    def with_discount_definition(self, discount_def:str) -> 'simulatedMarketDataIrIdBuilder': ...

class simulationManager(object):
    def __init__(self, ids:Sequence['simulatedMarketDataId'], market:'anyContainer', simulation_dates:Sequence['datetime']) -> None: ...
    def discount_curve(self, id:'simulatedMarketDataId') -> 'discountCurve': ...
    def equity_forward_market(self, id:'simulatedMarketDataId') -> 'equityForwardMarket': ...
    def fx_forward(self, id:'simulatedMarketDataId') -> 'fxForwardMarket': ...
    def propagate(self, time_index:int) -> None: ...
    def states_initialize(self, batch_index:int=0) -> None: ...
    def static_cast(self) -> 'simulationManager': ...
    def survival_curve(self, id:'simulatedMarketDataId') -> 'survivalCurve': ...

