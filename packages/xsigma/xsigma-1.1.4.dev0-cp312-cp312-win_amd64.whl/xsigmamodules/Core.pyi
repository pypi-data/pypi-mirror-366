from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

class namespace: pass

class FileMode(int): ...

class LogEntryType(int): ...

class Verbosity(int):
    VERBOSITY_0:'Verbosity'
    VERBOSITY_1:'Verbosity'
    VERBOSITY_2:'Verbosity'
    VERBOSITY_3:'Verbosity'
    VERBOSITY_4:'Verbosity'
    VERBOSITY_5:'Verbosity'
    VERBOSITY_6:'Verbosity'
    VERBOSITY_7:'Verbosity'
    VERBOSITY_8:'Verbosity'
    VERBOSITY_9:'Verbosity'
    VERBOSITY_ERROR:'Verbosity'
    VERBOSITY_INFO:'Verbosity'
    VERBOSITY_INVALID:'Verbosity'
    VERBOSITY_MAX:'Verbosity'
    VERBOSITY_OFF:'Verbosity'
    VERBOSITY_TRACE:'Verbosity'
    VERBOSITY_WARNING:'Verbosity'

class device_enum(int):
    CPU:'device_enum'
    CUDA:'device_enum'
    HIP:'device_enum'

APPEND:'FileMode'
END:'LogEntryType'
INSERTED:'LogEntryType'
INVALID:'LogEntryType'
STANDALONE:'LogEntryType'
START:'LogEntryType'
TRUNCATE:'FileMode'

class backTrace(object):
    def print(frames_to_skip:int=0, maximum_number_of_frames:int=64, skip_python_frames:bool=True) -> str: ...
    def set_stack_trace_on_error(enable:int) -> None: ...
    def static_cast(self) -> 'backTrace': ...

class cpuInfo(object):
    def info() -> None: ...
    def static_cast(self) -> 'cpuInfo': ...

class deviceOption(object):
    @overload
    def __init__(self, type:'device_enum', index:int) -> None: ...
    @overload
    def __init__(self, __a:'deviceOption') -> None: ...
    def static_cast(self) -> 'deviceOption': ...
    def type(self) -> 'device_enum': ...

class logger(object):
    class FileMode(int): ...
    class Verbosity(int):
        VERBOSITY_0:'Verbosity'
        VERBOSITY_1:'Verbosity'
        VERBOSITY_2:'Verbosity'
        VERBOSITY_3:'Verbosity'
        VERBOSITY_4:'Verbosity'
        VERBOSITY_5:'Verbosity'
        VERBOSITY_6:'Verbosity'
        VERBOSITY_7:'Verbosity'
        VERBOSITY_8:'Verbosity'
        VERBOSITY_9:'Verbosity'
        VERBOSITY_ERROR:'Verbosity'
        VERBOSITY_INFO:'Verbosity'
        VERBOSITY_INVALID:'Verbosity'
        VERBOSITY_MAX:'Verbosity'
        VERBOSITY_OFF:'Verbosity'
        VERBOSITY_TRACE:'Verbosity'
        VERBOSITY_WARNING:'Verbosity'
    APPEND:'FileMode'
    TRUNCATE:'FileMode'
    @overload
    def ConvertToVerbosity(value:int) -> 'Verbosity': ...
    @overload
    def ConvertToVerbosity(text:str) -> 'Verbosity': ...
    def EndLogToFile(path:str) -> None: ...
    def EndScope(id:str) -> None: ...
    def GetCurrentVerbosityCutoff() -> 'Verbosity': ...
    def GetThreadName() -> str: ...
    def Init() -> None: ...
    def IsEnabled() -> bool: ...
    def Log(verbosity:'Verbosity', fname:str, lineno:int, txt:str) -> None: ...
    def LogToFile(path:str, filemode:'FileMode', verbosity:'Verbosity') -> None: ...
    def RemoveCallback(id:str) -> bool: ...
    def SetInternalVerbosityLevel(level:'Verbosity') -> None: ...
    def SetStderrVerbosity(level:'Verbosity') -> None: ...
    def SetThreadName(name:str) -> None: ...
    def StartScope(verbosity:'Verbosity', id:str, fname:str, lineno:int) -> None: ...
    def static_cast(self) -> 'logger': ...

class resourceFileLocator(object):
    def GetFilenamePath(filename:str) -> str: ...
    @overload
    def Locate(anchor:str, landmark:str, LogVerbosity:'Verbosity', defaultDir:str=...) -> str: ...
    @overload
    def Locate(anchor:str, landmark_prefixes:Sequence[str], landmark:str, LogVerbosity:'Verbosity', defaultDir:str=...) -> str: ...
    def collapse_full_path(dr:str) -> str: ...
    def file_exist(newFileName:str) -> int: ...
    def find_program_path(argv0:str, path:str, error_msg:str) -> bool: ...
    def join_path(path_components:Sequence[str]) -> str: ...
    def library_path_for_symbol_unix(symbolname:str) -> str: ...
    def library_path_for_symbol_win32(fptr:Pointer) -> str: ...
    def program_path(path:str) -> str: ...
    def split_path(anchor:str, path_components:MutableSequence[str]) -> None: ...
    def static_cast(self) -> 'resourceFileLocator': ...

class timeLogEntry(object):
    class LogEntryType(int): ...
    END:'LogEntryType'
    INSERTED:'LogEntryType'
    INVALID:'LogEntryType'
    STANDALONE:'LogEntryType'
    START:'LogEntryType'
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'timeLogEntry') -> None: ...
    def static_cast(self) -> 'timeLogEntry': ...

class timerLog(object):
    def __init__(self) -> None: ...
    def CleanupLog() -> None: ...
    def DumpLog(filename:str) -> None: ...
    def GetCPUTime() -> float: ...
    def GetElapsedTime(self) -> float: ...
    def GetMaxEntries() -> int: ...
    def GetUniversalTime() -> float: ...
    def InsertTimedEvent(event:str, time:float, cpuTicks:int) -> None: ...
    def LoggingOff() -> None: ...
    def LoggingOn() -> None: ...
    def MarkEndEvent(event:str) -> None: ...
    def MarkEvent(event:str) -> None: ...
    def MarkStartEvent(event:str) -> None: ...
    def ResetLog() -> None: ...
    def SetMaxEntries(a:int) -> None: ...
    def StartTimer(self) -> None: ...
    def StopTimer(self) -> None: ...
    def static_cast(self) -> 'timerLog': ...

