from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core
import xsigmamodules.Util
import xsigmamodules.Vectorization

class engine_enum(int):
    ANALATYTIC:'engine_enum'
    PDE:'engine_enum'

class interpolation_wing_time_enum(int):
    CALL_PUT_VARIANCE:'interpolation_wing_time_enum'
    FIXED_STRIKE:'interpolation_wing_time_enum'
    INSTRUMENT_VOL:'interpolation_wing_time_enum'
    MODEL:'interpolation_wing_time_enum'

class volatility_model_enum(int):
    EXTENDED_SVI:'volatility_model_enum'
    INVALID:'volatility_model_enum'
    QUADRATIC_SMILE:'volatility_model_enum'
    SABR_ANALYTIC:'volatility_model_enum'
    SABR_PDE:'volatility_model_enum'
    ZABR_CLASSIC:'volatility_model_enum'
    ZABR_MIXTURE:'volatility_model_enum'

class volatility_model_output_enum(int):
    DENSITY:'volatility_model_output_enum'
    IMPLIED_VOLATILITY:'volatility_model_output_enum'
    INVALID:'volatility_model_output_enum'
    PRICES:'volatility_model_output_enum'

class anyContainer(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, ids:Sequence['anyId'], objects:Sequence['anyObject']) -> None: ...
    @overload
    def __init__(self, __a:'anyContainer') -> None: ...
    def at(self, id:'anyId') -> 'anyObject': ...
    def contains(self, id:'anyId') -> bool: ...
    def discover_recursive(self, id:'anyId') -> 'discoveryResult': ...
    def get(self, id:'anyId') -> 'objectData': ...
    def insert(self, id:'anyId', object:'anyObject') -> None: ...
    def printf(rhs:'anyContainer') -> str: ...
    def read_from_binary(file_name:str) -> 'anyContainer': ...
    def read_from_json(file_name:str) -> 'anyContainer': ...
    def reserve(self, size:int) -> None: ...
    def size(self) -> int: ...
    def static_cast(self) -> 'anyContainer': ...
    def update(self, ids:Sequence['anyId'], objects:Sequence['anyObject']) -> None: ...
    def write_to_binary(file_name:str, rhs:'anyContainer') -> None: ...
    def write_to_json(file_name:str, rhs:'anyContainer') -> None: ...

class anyContainerPrecomputed(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, ids:Sequence['anyId'], objects:Sequence['doubleMapT']) -> None: ...
    @overload
    def __init__(self, size:int) -> None: ...
    @overload
    def __init__(self, __a:'anyContainerPrecomputed') -> None: ...
    def clear(self) -> None: ...
    def printf(rhs:'anyContainerPrecomputed') -> str: ...
    def read_from_binary(file_name:str) -> 'anyContainerPrecomputed': ...
    def read_from_json(file_name:str) -> 'anyContainerPrecomputed': ...
    def set_all_to_zero(self) -> None: ...
    def static_cast(self) -> 'anyContainerPrecomputed': ...
    def update(self, ids:Sequence['anyId'], objects:Sequence['doubleMapT']) -> None: ...
    def write_to_binary(file_name:str, rhs:'anyContainerPrecomputed') -> None: ...
    def write_to_json(file_name:str, rhs:'anyContainerPrecomputed') -> None: ...

class anyDates(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'anyDates') -> None: ...
    def clear(self) -> None: ...
    def date_collections_size(self) -> int: ...
    def date_pair_collections_size(self) -> int: ...
    def date_tenor_collections_size(self) -> int: ...
    @overload
    def hash(date:'datetime') -> int: ...
    @overload
    def hash(from_:'datetime', to:'datetime') -> int: ...
    @overload
    def hash(date:'datetime', lag:str) -> int: ...
    def printf(rhs:'anyDates') -> str: ...
    def read_from_binary(file_name:str) -> 'anyDates': ...
    def read_from_json(file_name:str) -> 'anyDates': ...
    def size(self) -> int: ...
    def static_cast(self) -> 'anyDates': ...
    def write_to_binary(file_name:str, rhs:'anyDates') -> None: ...
    def write_to_json(file_name:str, rhs:'anyDates') -> None: ...

class anyId(object):
    @overload
    def __init__(self, rhs:'marketDataId') -> None: ...
    @overload
    def __init__(self, rhs:'lifeCycleId') -> None: ...
    @overload
    def __init__(self, rhs:'configDataId') -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'anyId') -> None: ...
    def has_generic_builder(self) -> bool: ...
    def hash(self) -> int: ...
    def index(self) -> int: ...
    def printf(rhs:'anyId') -> str: ...
    def read_from_binary(file_name:str) -> 'anyId': ...
    def read_from_json(file_name:str) -> 'anyId': ...
    def static_cast(self) -> 'anyId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'anyId') -> None: ...
    def write_to_json(file_name:str, rhs:'anyId') -> None: ...

class anyObject(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rhs:'marketData') -> None: ...
    @overload
    def __init__(self, rhs:'lifeCycleData') -> None: ...
    @overload
    def __init__(self, rhs:'configData') -> None: ...
    @overload
    def __init__(self, __a:'anyObject') -> None: ...
    def get(self) -> 'objectData': ...
    def index(self) -> int: ...
    def printf(rhs:'anyObject') -> str: ...
    def read_from_binary(file_name:str) -> 'anyObject': ...
    def read_from_json(file_name:str) -> 'anyObject': ...
    def static_cast(self) -> 'anyObject': ...
    def write_to_binary(file_name:str, rhs:'anyObject') -> None: ...
    def write_to_json(file_name:str, rhs:'anyObject') -> None: ...

class atmVolatilityQuote(object):
    def __init__(self, style:'delta_atm_convention_enum', booking:'currency_convention_enum', facing:'currency_convention_enum', reference_expiry:'datetime', expiry:'datetime', volatility:float) -> None: ...
    def booking(self) -> 'currency_convention_enum': ...
    def expiry(self) -> 'datetime': ...
    def facing(self) -> 'currency_convention_enum': ...
    def printf(rhs:'atmVolatilityQuote') -> str: ...
    def read_from_binary(file_name:str) -> 'atmVolatilityQuote': ...
    def read_from_json(file_name:str) -> 'atmVolatilityQuote': ...
    def reference_expiry(self) -> 'datetime': ...
    def static_cast(self) -> 'atmVolatilityQuote': ...
    def style(self) -> 'delta_atm_convention_enum': ...
    def volatility(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'atmVolatilityQuote') -> None: ...
    def write_to_json(file_name:str, rhs:'atmVolatilityQuote') -> None: ...

class objectDataId(object):
    def hash(self) -> int: ...
    def static_cast(self) -> 'objectDataId': ...
    def to_string(self) -> str: ...

class configDataId(objectDataId):
    def static_cast(self) -> 'configDataId': ...
    def to_string(self) -> str: ...

class calendarId(configDataId):
    def __init__(self, id:str) -> None: ...
    def id(self) -> str: ...
    def printf(rhs:'calendarId') -> str: ...
    def read_from_binary(file_name:str) -> 'calendarId': ...
    def read_from_json(file_name:str) -> 'calendarId': ...
    def static_cast(self) -> 'calendarId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'calendarId') -> None: ...
    def write_to_json(file_name:str, rhs:'calendarId') -> None: ...

class currencyCalendarMappingId(configDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'currencyCalendarMappingId') -> None: ...
    def printf(rhs:'currencyCalendarMappingId') -> str: ...
    def read_from_binary(file_name:str) -> 'currencyCalendarMappingId': ...
    def read_from_json(file_name:str) -> 'currencyCalendarMappingId': ...
    def static_cast(self) -> 'currencyCalendarMappingId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'currencyCalendarMappingId') -> None: ...
    def write_to_json(file_name:str, rhs:'currencyCalendarMappingId') -> None: ...

class currencyIborMappingId(configDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'currencyIborMappingId') -> None: ...
    def printf(rhs:'currencyIborMappingId') -> str: ...
    def read_from_binary(file_name:str) -> 'currencyIborMappingId': ...
    def read_from_json(file_name:str) -> 'currencyIborMappingId': ...
    def static_cast(self) -> 'currencyIborMappingId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'currencyIborMappingId') -> None: ...
    def write_to_json(file_name:str, rhs:'currencyIborMappingId') -> None: ...

class currencyMappingConfig(xsigmamodules.Util.configData):
    def initialize(self) -> None: ...
    def insert(self, currency:str, value:str) -> None: ...
    def keys(self) -> Tuple[str, str]: ...
    def printf(rhs:'currencyMappingConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'currencyMappingConfig': ...
    def read_from_json(file_name:str) -> 'currencyMappingConfig': ...
    def static_cast(self) -> 'currencyMappingConfig': ...
    def validate(self) -> None: ...
    def value(self, currency:str) -> str: ...
    def write_to_binary(file_name:str, rhs:'currencyMappingConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'currencyMappingConfig') -> None: ...

class currencyMappingConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'currencyMappingConfigBuilder') -> None: ...
    def build(self) -> 'currencyMappingConfig': ...
    def static_cast(self) -> 'currencyMappingConfigBuilder': ...
    def with_currency_mapping(self, currency:str, value:str) -> 'currencyMappingConfigBuilder': ...
    def with_mapping(self, ccys:Sequence[str], ids:Sequence[str]) -> 'currencyMappingConfigBuilder': ...

class currencyRfrMappingId(configDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'currencyRfrMappingId') -> None: ...
    def printf(rhs:'currencyRfrMappingId') -> str: ...
    def read_from_binary(file_name:str) -> 'currencyRfrMappingId': ...
    def read_from_json(file_name:str) -> 'currencyRfrMappingId': ...
    def static_cast(self) -> 'currencyRfrMappingId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'currencyRfrMappingId') -> None: ...
    def write_to_json(file_name:str, rhs:'currencyRfrMappingId') -> None: ...

class marketData(xsigmamodules.Util.objectData):
    def static_cast(self) -> 'marketData': ...
    def valuation_date(self) -> 'datetime': ...

class datetimesGrid(marketData):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, valuation_date:'datetime', dates:Sequence['datetime']) -> None: ...
    @overload
    def __init__(self, __a:'datetimesGrid') -> None: ...
    def dates(self) -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'datetimesGrid': ...

class marketDataId(objectDataId):
    def static_cast(self) -> 'marketDataId': ...
    def to_string(self) -> str: ...

class datetimesGridId(marketDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'datetimesGridId') -> None: ...
    def printf(rhs:'datetimesGridId') -> str: ...
    def read_from_binary(file_name:str) -> 'datetimesGridId': ...
    def read_from_json(file_name:str) -> 'datetimesGridId': ...
    def static_cast(self) -> 'datetimesGridId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'datetimesGridId') -> None: ...
    def write_to_json(file_name:str, rhs:'datetimesGridId') -> None: ...

class defaultId(marketDataId):
    @overload
    def __init__(self, name:str, curve_name:str, ccy:str, seniority:str, restructuring:str, isda:str) -> None: ...
    @overload
    def __init__(self, __a:'defaultId') -> None: ...
    def curve_id(self) -> 'discountCurveId': ...
    def printf(rhs:'defaultId') -> str: ...
    def read_from_binary(file_name:str) -> 'defaultId': ...
    def read_from_json(file_name:str) -> 'defaultId': ...
    def static_cast(self) -> 'defaultId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'defaultId') -> None: ...
    def write_to_json(file_name:str, rhs:'defaultId') -> None: ...

class discountCurve(marketData):
    @overload
    def df(self, to:'datetime') -> float: ...
    @overload
    def df(self, start:'datetime', end:'datetime') -> float: ...
    def dfs(self, dates:Sequence['datetime']) -> Tuple[float, float]: ...
    def discounting(self, __a:'vector_IdE', __b:'datetime') -> None: ...
    @overload
    def log_df(self, start:'datetime', end:'datetime') -> float: ...
    @overload
    def log_df(self, output:'vector_IdE', from_:'datetime', to:'datetime') -> None: ...
    def log_normalized_money_market(self) -> 'vector_IdE': ...
    def static_cast(self) -> 'discountCurve': ...

class discountCurveComposite(discountCurve):
    @overload
    def __init__(self, valuation_date:'datetime', base_curve:'discountCurve', basis_curve:'discountCurve') -> None: ...
    @overload
    def __init__(self, __a:'discountCurveComposite') -> None: ...
    def base_curve(self) -> 'discountCurve': ...
    def basis_curve(self) -> 'discountCurve': ...
    def df(self, from_:'datetime', to:'datetime') -> float: ...
    def discounting(self, output:'vector_IdE', from_:'datetime') -> None: ...
    @overload
    def log_df(self, from_:'datetime', to:'datetime') -> float: ...
    @overload
    def log_df(self, output:'vector_IdE', from_:'datetime', to:'datetime') -> None: ...
    def log_normalized_money_market(self) -> 'vector_IdE': ...
    def printf(rhs:'discountCurveComposite') -> str: ...
    def read_from_binary(file_name:str) -> 'discountCurveComposite': ...
    def read_from_json(file_name:str) -> 'discountCurveComposite': ...
    def static_cast(self) -> 'discountCurveComposite': ...
    def write_to_binary(file_name:str, rhs:'discountCurveComposite') -> None: ...
    def write_to_json(file_name:str, rhs:'discountCurveComposite') -> None: ...

class discountCurveFlat(discountCurve):
    @overload
    def __init__(self, valuation_date:'datetime', rates:float, convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'discountCurveFlat') -> None: ...
    def convention(self) -> 'dayCountConvention': ...
    def df(self, from_:'datetime', to:'datetime') -> float: ...
    def log_df(self, from_:'datetime', to:'datetime') -> float: ...
    def printf(rhs:'discountCurveFlat') -> str: ...
    def read_from_binary(file_name:str) -> 'discountCurveFlat': ...
    def read_from_json(file_name:str) -> 'discountCurveFlat': ...
    def static_cast(self) -> 'discountCurveFlat': ...
    def write_to_binary(file_name:str, rhs:'discountCurveFlat') -> None: ...
    def write_to_json(file_name:str, rhs:'discountCurveFlat') -> None: ...

class discountCurveId(marketDataId):
    @overload
    def __init__(self, ccy:str, id:str) -> None: ...
    @overload
    def __init__(self, __a:'discountCurveId') -> None: ...
    def ccy(self) -> str: ...
    def id(self) -> 'discountDefinition': ...
    def printf(rhs:'discountCurveId') -> str: ...
    def read_from_binary(file_name:str) -> 'discountCurveId': ...
    def read_from_json(file_name:str) -> 'discountCurveId': ...
    def static_cast(self) -> 'discountCurveId': ...
    def to_string(self) -> str: ...
    def transform_to_forecast_curve_id(self) -> 'forecastCurveId': ...
    def write_to_binary(file_name:str, rhs:'discountCurveId') -> None: ...
    def write_to_json(file_name:str, rhs:'discountCurveId') -> None: ...

class discountCurveInterpolated(discountCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], log_dfs:MutableSequence[float], interpolation_type:'interpolation_enum') -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'discountCurveInterpolated') -> None: ...
    def df(self, start_date:'datetime', end_date:'datetime') -> float: ...
    def log_df(self, start_date:'datetime', end_date:'datetime') -> float: ...
    def printf(rhs:'discountCurveInterpolated') -> str: ...
    def rates_term_structure(self) -> 'interpolatorDouble': ...
    def read_from_binary(file_name:str) -> 'discountCurveInterpolated': ...
    def read_from_json(file_name:str) -> 'discountCurveInterpolated': ...
    def static_cast(self) -> 'discountCurveInterpolated': ...
    def write_to_binary(file_name:str, rhs:'discountCurveInterpolated') -> None: ...
    def write_to_json(file_name:str, rhs:'discountCurveInterpolated') -> None: ...

class discountDefinition(object):
    @overload
    def __init__(self, id:str) -> None: ...
    @overload
    def __init__(self, ccy:str, ccy_base:str, config:'currencyMappingConfig') -> None: ...
    def id(self) -> str: ...
    def printf(rhs:'discountDefinition') -> str: ...
    def read_from_binary(file_name:str) -> 'discountDefinition': ...
    def read_from_json(file_name:str) -> 'discountDefinition': ...
    def static_cast(self) -> 'discountDefinition': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'discountDefinition') -> None: ...
    def write_to_json(file_name:str, rhs:'discountDefinition') -> None: ...
    def xccy_discount_definition(str:str) -> str: ...

class discoveryResult(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'discoveryResult') -> None: ...
    def get_missing_dependency(self) -> 'anyId': ...
    def has_missing_dependencies(self) -> bool: ...
    def has_object(self) -> bool: ...
    def id(self) -> 'anyId': ...
    def is_empty(self) -> bool: ...
    def object(self) -> 'anyObject': ...
    def static_cast(self) -> 'discoveryResult': ...

class equityForwardId(marketDataId):
    @overload
    def __init__(self, equity_name:str, ccy:str, curve_id:str) -> None: ...
    @overload
    def __init__(self, __a:'equityForwardId') -> None: ...
    def curve_id(self) -> 'discountCurveId': ...
    def equity_name(self) -> str: ...
    def printf(rhs:'equityForwardId') -> str: ...
    def read_from_binary(file_name:str) -> 'equityForwardId': ...
    def read_from_json(file_name:str) -> 'equityForwardId': ...
    def static_cast(self) -> 'equityForwardId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'equityForwardId') -> None: ...
    def write_to_json(file_name:str, rhs:'equityForwardId') -> None: ...

class equityForwardMarket(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', spot:float, domestic_curve:'discountCurve') -> None: ...
    @overload
    def __init__(self, __a:'equityForwardMarket') -> None: ...
    def domestic_curve(self) -> 'discountCurve': ...
    @overload
    def forward(self, output:'vector_IdE', end:'datetime') -> None: ...
    @overload
    def forward(self, end:'datetime') -> float: ...
    def printf(rhs:'equityForwardMarket') -> str: ...
    def read_from_binary(file_name:str) -> 'equityForwardMarket': ...
    def read_from_json(file_name:str) -> 'equityForwardMarket': ...
    def spot(self) -> float: ...
    def static_cast(self) -> 'equityForwardMarket': ...
    def write_to_binary(file_name:str, rhs:'equityForwardMarket') -> None: ...
    def write_to_json(file_name:str, rhs:'equityForwardMarket') -> None: ...

class equitySpotId(marketDataId):
    @overload
    def __init__(self, name:str, ccy:str) -> None: ...
    @overload
    def __init__(self, __a:'equitySpotId') -> None: ...
    def ccy(self) -> str: ...
    def name(self) -> str: ...
    def printf(rhs:'equitySpotId') -> str: ...
    def read_from_binary(file_name:str) -> 'equitySpotId': ...
    def read_from_json(file_name:str) -> 'equitySpotId': ...
    def static_cast(self) -> 'equitySpotId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'equitySpotId') -> None: ...
    def write_to_json(file_name:str, rhs:'equitySpotId') -> None: ...

class equitySpotMarket(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', spot:float) -> None: ...
    @overload
    def __init__(self, __a:'equitySpotMarket') -> None: ...
    def printf(rhs:'equitySpotMarket') -> str: ...
    def read_from_binary(file_name:str) -> 'equitySpotMarket': ...
    def read_from_json(file_name:str) -> 'equitySpotMarket': ...
    @overload
    def spot(self, output:'vector_IdE') -> None: ...
    @overload
    def spot(self) -> float: ...
    def static_cast(self) -> 'equitySpotMarket': ...
    def write_to_binary(file_name:str, rhs:'equitySpotMarket') -> None: ...
    def write_to_json(file_name:str, rhs:'equitySpotMarket') -> None: ...

class fixingRatesId(marketDataId):
    @overload
    def __init__(self, ccy:str, index_name:str, frequency:str) -> None: ...
    @overload
    def __init__(self, __a:'fixingRatesId') -> None: ...
    def ccy(self) -> str: ...
    def frequency(self) -> str: ...
    def index_name(self) -> str: ...
    def printf(rhs:'fixingRatesId') -> str: ...
    def read_from_binary(file_name:str) -> 'fixingRatesId': ...
    def read_from_json(file_name:str) -> 'fixingRatesId': ...
    def static_cast(self) -> 'fixingRatesId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fixingRatesId') -> None: ...
    def write_to_json(file_name:str, rhs:'fixingRatesId') -> None: ...

class forecastConfig(xsigmamodules.Util.configData):
    @overload
    def __init__(self, frequency:str, settlement_days:int, roll_convention:'business_day_convention_enum', holiday_list:'calendar', start_roll_convention:'business_day_convention_enum', fixing_holiday_list:'calendar', convention:'day_count_convention_enum') -> None: ...
    @overload
    def __init__(self, frequency:str, settlement_days:int, start_adjustment:'businessDayConvention', end_adjustment:'businessDayConvention', convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'forecastConfig') -> None: ...
    def convention(self) -> 'dayCountConvention': ...
    def end_adjustment(self) -> 'businessDayConvention': ...
    def end_date(self, start_date:'datetime') -> 'datetime': ...
    def frequency(self) -> str: ...
    def printf(rhs:'forecastConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'forecastConfig': ...
    def read_from_json(file_name:str) -> 'forecastConfig': ...
    def start_adjustment(self) -> 'businessDayConvention': ...
    def start_date(self, fixing_date:'datetime') -> 'datetime': ...
    def static_cast(self) -> 'forecastConfig': ...
    def write_to_binary(file_name:str, rhs:'forecastConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastConfig') -> None: ...

class forecastConfigId(configDataId):
    @overload
    def __init__(self, forecast_id:'forecastCurveId') -> None: ...
    @overload
    def __init__(self, __a:'forecastConfigId') -> None: ...
    def forecast_id(self) -> 'forecastCurveId': ...
    def printf(rhs:'forecastConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'forecastConfigId': ...
    def read_from_json(file_name:str) -> 'forecastConfigId': ...
    def static_cast(self) -> 'forecastConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'forecastConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastConfigId') -> None: ...

class forecastCurve(marketData):
    def end_date(self, start_date:'datetime') -> 'datetime': ...
    @overload
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    @overload
    def rate(self, fixing:'datetime') -> float: ...
    def rates(self, output:'vector_IdE', forecast_start:'datetime', forecast_end:'datetime') -> None: ...
    def start_date(self, fixing:'datetime') -> 'datetime': ...
    def static_cast(self) -> 'forecastCurve': ...

class forecastCurveAveraging(forecastCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], config:'forecastConfig') -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveAveraging') -> None: ...
    def printf(rhs:'forecastCurveAveraging') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveAveraging': ...
    def read_from_json(file_name:str) -> 'forecastCurveAveraging': ...
    def static_cast(self) -> 'forecastCurveAveraging': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveAveraging') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveAveraging') -> None: ...

class forecastCurveCompounding(forecastCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], config:'forecastConfig') -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveCompounding') -> None: ...
    def printf(rhs:'forecastCurveCompounding') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveCompounding': ...
    def read_from_json(file_name:str) -> 'forecastCurveCompounding': ...
    def static_cast(self) -> 'forecastCurveCompounding': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveCompounding') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveCompounding') -> None: ...

class forecastCurveFlat(forecastCurve):
    @overload
    def __init__(self, valuation_date:'datetime', rates:float, config:'forecastConfig'=...) -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveFlat') -> None: ...
    def printf(rhs:'forecastCurveFlat') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveFlat': ...
    def read_from_json(file_name:str) -> 'forecastCurveFlat': ...
    def static_cast(self) -> 'forecastCurveFlat': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveFlat') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveFlat') -> None: ...

class forecastCurveFromDf(forecastCurve):
    @overload
    def __init__(self, curve:'discountCurve', config:'forecastConfig') -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveFromDf') -> None: ...
    def printf(rhs:'forecastCurveFromDf') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveFromDf': ...
    def read_from_json(file_name:str) -> 'forecastCurveFromDf': ...
    def static_cast(self) -> 'forecastCurveFromDf': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveFromDf') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveFromDf') -> None: ...

class forecastCurveId(marketDataId):
    @overload
    def __init__(self, ccy:str, index_name:str, frequency:str) -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveId') -> None: ...
    def ccy(self) -> str: ...
    def frequency(self) -> str: ...
    def hash_id(self, discount:'discountCurveId') -> int: ...
    def index_name(self) -> str: ...
    def printf(rhs:'forecastCurveId') -> str: ...
    def read_from_binary(file_name:str) -> 'forecastCurveId': ...
    def read_from_json(file_name:str) -> 'forecastCurveId': ...
    def static_cast(self) -> 'forecastCurveId': ...
    def to_string(self) -> str: ...
    def transform_to_discount_curve_id(self) -> 'discountCurveId': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveId') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveId') -> None: ...

class forecastCurveInterpolated(forecastCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], log_dfs:MutableSequence[float], interpolation_type:'interpolation_enum', config:'forecastConfig') -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveInterpolated') -> None: ...
    def printf(rhs:'forecastCurveInterpolated') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveInterpolated': ...
    def read_from_json(file_name:str) -> 'forecastCurveInterpolated': ...
    def static_cast(self) -> 'forecastCurveInterpolated': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveInterpolated') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveInterpolated') -> None: ...

class forecastCurveSimple(forecastCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], config:'forecastConfig') -> None: ...
    @overload
    def __init__(self, __a:'forecastCurveSimple') -> None: ...
    def printf(rhs:'forecastCurveSimple') -> str: ...
    def rate(self, forecast_start:'datetime', forecast_end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'forecastCurveSimple': ...
    def read_from_json(file_name:str) -> 'forecastCurveSimple': ...
    def static_cast(self) -> 'forecastCurveSimple': ...
    def write_to_binary(file_name:str, rhs:'forecastCurveSimple') -> None: ...
    def write_to_json(file_name:str, rhs:'forecastCurveSimple') -> None: ...

class futureDefaultConventionConfig(xsigmamodules.Util.configData):
    def basis(self) -> 'day_count_convention_enum': ...
    def contract_size(self) -> float: ...
    def end_rolling_convention(self) -> 'business_day_convention_enum': ...
    def end_rolling_days(self) -> int: ...
    def future_type(self) -> 'future_type_enum': ...
    def index(self) -> str: ...
    def index_tenor(self) -> str: ...
    def printf(rhs:'futureDefaultConventionConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'futureDefaultConventionConfig': ...
    def read_from_json(file_name:str) -> 'futureDefaultConventionConfig': ...
    def start_rolling_convention(self) -> 'business_day_convention_enum': ...
    def start_rolling_days(self) -> int: ...
    def static_cast(self) -> 'futureDefaultConventionConfig': ...
    def write_to_binary(file_name:str, rhs:'futureDefaultConventionConfig'): ...
    def write_to_json(file_name:str, rhs:'futureDefaultConventionConfig') -> None: ...

class futureDefaultConventionConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'futureDefaultConventionConfigBuilder') -> None: ...
    def build(self) -> 'futureDefaultConventionConfig': ...
    def static_cast(self) -> 'futureDefaultConventionConfigBuilder': ...
    def with_basis(self, val:'day_count_convention_enum') -> 'futureDefaultConventionConfigBuilder': ...
    def with_contract_size(self, val:float) -> 'futureDefaultConventionConfigBuilder': ...
    def with_end_rolling_convention(self, val:'business_day_convention_enum') -> 'futureDefaultConventionConfigBuilder': ...
    def with_end_rolling_days(self, val:int) -> 'futureDefaultConventionConfigBuilder': ...
    def with_future_type(self, val:'future_type_enum') -> 'futureDefaultConventionConfigBuilder': ...
    def with_index(self, val:str) -> 'futureDefaultConventionConfigBuilder': ...
    def with_index_tenor(self, val:str) -> 'futureDefaultConventionConfigBuilder': ...
    def with_start_rolling_convention(self, val:'business_day_convention_enum') -> 'futureDefaultConventionConfigBuilder': ...
    def with_start_rolling_days(self, val:int) -> 'futureDefaultConventionConfigBuilder': ...

class futureDefaultConventionConfigId(configDataId):
    @overload
    def __init__(self, ccy:str, index_name:str, period:str) -> None: ...
    @overload
    def __init__(self, __a:'futureDefaultConventionConfigId') -> None: ...
    def ccy(self) -> str: ...
    def index_name(self) -> str: ...
    def period(self) -> str: ...
    def printf(rhs:'futureDefaultConventionConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'futureDefaultConventionConfigId': ...
    def read_from_json(file_name:str) -> 'futureDefaultConventionConfigId': ...
    def static_cast(self) -> 'futureDefaultConventionConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'futureDefaultConventionConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'futureDefaultConventionConfigId'): ...

class fxForwardId(marketDataId):
    @overload
    def __init__(self, domestic:'discountCurveId', foreign:'discountCurveId') -> None: ...
    @overload
    def __init__(self, __a:'fxForwardId') -> None: ...
    def domestic_curve_id(self) -> 'discountCurveId': ...
    def foreign_curve_id(self) -> 'discountCurveId': ...
    def printf(rhs:'fxForwardId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxForwardId': ...
    def read_from_json(file_name:str) -> 'fxForwardId': ...
    def static_cast(self) -> 'fxForwardId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxForwardId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxForwardId') -> None: ...

class fxForwardMarket(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', spot:float, domestic_curve:'discountCurve', foreign_curve:'discountCurve') -> None: ...
    @overload
    def __init__(self, __a:'fxForwardMarket') -> None: ...
    def domestic_curve(self) -> 'discountCurve': ...
    def foreign_curve(self) -> 'discountCurve': ...
    @overload
    def forward(self, output:'vector_IdE', end:'datetime') -> None: ...
    @overload
    def forward(self, end:'datetime') -> float: ...
    def printf(rhs:'fxForwardMarket') -> str: ...
    def read_from_binary(file_name:str) -> 'fxForwardMarket': ...
    def read_from_json(file_name:str) -> 'fxForwardMarket': ...
    def spot(self) -> float: ...
    def static_cast(self) -> 'fxForwardMarket': ...
    def write_to_binary(file_name:str, rhs:'fxForwardMarket') -> None: ...
    def write_to_json(file_name:str, rhs:'fxForwardMarket') -> None: ...

class fxSpotId(marketDataId):
    @overload
    def __init__(self, ccy_domestic:str, ccy_foreign:str) -> None: ...
    @overload
    def __init__(self, __a:'fxSpotId') -> None: ...
    def ccy_domestic(self) -> str: ...
    def ccy_foreign(self) -> str: ...
    def printf(rhs:'fxSpotId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxSpotId': ...
    def read_from_json(file_name:str) -> 'fxSpotId': ...
    def static_cast(self) -> 'fxSpotId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxSpotId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxSpotId') -> None: ...

class fxSpotMarket(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', spot:float) -> None: ...
    @overload
    def __init__(self, __a:'fxSpotMarket') -> None: ...
    def printf(rhs:'fxSpotMarket') -> str: ...
    def read_from_binary(file_name:str) -> 'fxSpotMarket': ...
    def read_from_json(file_name:str) -> 'fxSpotMarket': ...
    @overload
    def spot(self, output:'vector_IdE') -> None: ...
    @overload
    def spot(self) -> float: ...
    def static_cast(self) -> 'fxSpotMarket': ...
    def write_to_binary(file_name:str, rhs:'fxSpotMarket') -> None: ...
    def write_to_json(file_name:str, rhs:'fxSpotMarket') -> None: ...

class fxVolatility(marketData):
    def convention(self) -> 'dayCountConvention': ...
    def fx_fwd(self) -> 'fxForwardMarket': ...
    def model(self, expiry:'datetime') -> 'volatilityModel': ...
    def static_cast(self) -> 'fxVolatility': ...

class fxVolatilityCalibrationTargets(marketData):
    def adjustement(self) -> 'business_day_convention_enum': ...
    def atm_vols(self) -> Tuple['atmVolatilityQuote', 'atmVolatilityQuote']: ...
    def convention(self) -> 'day_count_convention_enum': ...
    def holidays(self) -> 'calendar': ...
    def ms_1_vols(self) -> Tuple['strangleVolatilityQuote', 'strangleVolatilityQuote']: ...
    def ms_2_vols(self) -> Tuple['strangleVolatilityQuote', 'strangleVolatilityQuote']: ...
    def printf(rhs:'fxVolatilityCalibrationTargets') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityCalibrationTargets': ...
    def read_from_json(file_name:str) -> 'fxVolatilityCalibrationTargets': ...
    def rr_1_vols(self) -> Tuple['riskReversalVolatilityQuote', 'riskReversalVolatilityQuote']: ...
    def rr_2_vols(self) -> Tuple['riskReversalVolatilityQuote', 'riskReversalVolatilityQuote']: ...
    def static_cast(self) -> 'fxVolatilityCalibrationTargets': ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityCalibrationTargets') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityCalibrationTargets') -> None: ...

class fxVolatilityCalibrationTargetsBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityCalibrationTargetsBuilder') -> None: ...
    def build(self) -> 'fxVolatilityCalibrationTargets': ...
    def static_cast(self) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    @overload
    def with_add_tenor(self, tenor_str:str) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    @overload
    def with_add_tenor(self, t:str) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_booking_convention(self, conv:'currency_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_business_day_convention(self, conv:'business_day_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_clear_tenors(self) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_day_count_convention(self, conv:'day_count_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_delta_atm_convention(self, conv:'delta_atm_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_delta_convention(self, conv:'delta_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_facing_convention(self, conv:'currency_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_holidays(self, cal:'calendar') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_strangle_convention(self, conv:'strangle_convention_enum') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_tenors(self, tenors:Sequence[str]) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_valuation_date(self, date:'datetime') -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_vols_atm(self, vols:Sequence[float]) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_vols_ms10(self, vols:Sequence[float]) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_vols_ms25(self, vols:Sequence[float]) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_vols_rr10(self, vols:Sequence[float]) -> 'fxVolatilityCalibrationTargetsBuilder': ...
    def with_vols_rr25(self, vols:Sequence[float]) -> 'fxVolatilityCalibrationTargetsBuilder': ...

class fxVolatilityCalibrationTargetsId(marketDataId):
    @overload
    def __init__(self, id:'fxVolatilityId') -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityCalibrationTargetsId') -> None: ...
    def printf(rhs:'fxVolatilityCalibrationTargetsId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityCalibrationTargetsId': ...
    def read_from_json(file_name:str) -> 'fxVolatilityCalibrationTargetsId': ...
    def static_cast(self) -> 'fxVolatilityCalibrationTargetsId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityCalibrationTargetsId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityCalibrationTargetsId') -> None: ...

class fxVolatilityExtendedSvi(fxVolatility):
    def printf(rhs:'fxVolatilityExtendedSvi') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityExtendedSvi': ...
    def read_from_json(file_name:str) -> 'fxVolatilityExtendedSvi': ...
    def static_cast(self) -> 'fxVolatilityExtendedSvi': ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityExtendedSvi') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityExtendedSvi') -> None: ...

class fxVolatilityExtendedSviBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityExtendedSviBuilder') -> None: ...
    def build(self) -> 'fxVolatilityExtendedSvi': ...
    def static_cast(self) -> 'fxVolatilityExtendedSviBuilder': ...
    def with_ctrl_call(self, val:float) -> 'fxVolatilityExtendedSviBuilder': ...
    def with_ctrl_put(self, val:float) -> 'fxVolatilityExtendedSviBuilder': ...
    def with_fx_forward(self, val:'fxForwardMarket') -> 'fxVolatilityExtendedSviBuilder': ...
    def with_interpolation_config(self, val:'fxVolatilityInterpolationConfig') -> 'fxVolatilityExtendedSviBuilder': ...
    def with_options(self, val:'solverOptions') -> 'fxVolatilityExtendedSviBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'fxVolatilityExtendedSviBuilder': ...
    def with_volatility_targets(self, val:'fxVolatilityCalibrationTargets'): ...

class fxVolatilityId(marketDataId):
    @overload
    def __init__(self, id:'fxForwardId') -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityId') -> None: ...
    def id(self) -> 'fxForwardId': ...
    def printf(rhs:'fxVolatilityId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityId': ...
    def read_from_json(file_name:str) -> 'fxVolatilityId': ...
    def static_cast(self) -> 'fxVolatilityId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityId') -> None: ...

class fxVolatilityInterpolationConfig(xsigmamodules.Util.configData):
    def interpolation_switching_tenor(self) -> str: ...
    def long_term_interpolation(self) -> 'interpolation_enum': ...
    def printf(rhs:'fxVolatilityInterpolationConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityInterpolationConfig': ...
    def read_from_json(file_name:str) -> 'fxVolatilityInterpolationConfig': ...
    def short_term_interpolation_config(self) -> 'interpolatorMeanRevertingConfig': ...
    def static_cast(self) -> 'fxVolatilityInterpolationConfig': ...
    def wing_capping_config(self) -> 'wingExtrapolationConfig': ...
    def wing_interpolation(self) -> 'interpolation_wing_time_enum': ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityInterpolationConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityInterpolationConfig'): ...

class fxVolatilityInterpolationConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityInterpolationConfigBuilder') -> None: ...
    def build(self) -> 'fxVolatilityInterpolationConfig': ...
    def static_cast(self) -> 'fxVolatilityInterpolationConfigBuilder': ...
    def with_interpolation_switching_tenor(self, t:str) -> 'fxVolatilityInterpolationConfigBuilder': ...
    def with_long_term_interpolation(self, interp:'interpolation_enum') -> 'fxVolatilityInterpolationConfigBuilder': ...
    def with_short_term_interpolation_config(self, config:'interpolatorMeanRevertingConfig') -> 'fxVolatilityInterpolationConfigBuilder': ...
    def with_wing_capping_config(self, config:'wingExtrapolationConfig') -> 'fxVolatilityInterpolationConfigBuilder': ...
    def with_wing_interpolation(self, interp:'interpolation_wing_time_enum') -> 'fxVolatilityInterpolationConfigBuilder': ...

class fxVolatilityInterpolationConfigId(configDataId):
    @overload
    def __init__(self, id:'fxVolatilityId') -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityInterpolationConfigId') -> None: ...
    def printf(rhs:'fxVolatilityInterpolationConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityInterpolationConfigId': ...
    def read_from_json(file_name:str) -> 'fxVolatilityInterpolationConfigId': ...
    def static_cast(self) -> 'fxVolatilityInterpolationConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityInterpolationConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityInterpolationConfigId') -> None: ...

class fxVolatilityModelConfig(xsigmamodules.Util.configData):
    @overload
    def __init__(self, model_type:'volatility_model_enum', options:'solverOptions', ctrl_put:float=1., ctrl_call:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityModelConfig') -> None: ...
    def ctrl_call(self) -> float: ...
    def ctrl_put(self) -> float: ...
    def model_type(self) -> 'volatility_model_enum': ...
    def options(self) -> 'solverOptions': ...
    def printf(rhs:'fxVolatilityModelConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityModelConfig': ...
    def read_from_json(file_name:str) -> 'fxVolatilityModelConfig': ...
    def static_cast(self) -> 'fxVolatilityModelConfig': ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityModelConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityModelConfig') -> None: ...

class fxVolatilityModelConfigId(configDataId):
    @overload
    def __init__(self, id:'fxVolatilityId') -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityModelConfigId') -> None: ...
    def printf(rhs:'fxVolatilityModelConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityModelConfigId': ...
    def read_from_json(file_name:str) -> 'fxVolatilityModelConfigId': ...
    def static_cast(self) -> 'fxVolatilityModelConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityModelConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityModelConfigId') -> None: ...

class fxVolatilityQuadraticSmile(fxVolatility):
    def printf(rhs:'fxVolatilityQuadraticSmile') -> str: ...
    def read_from_binary(file_name:str) -> 'fxVolatilityQuadraticSmile': ...
    def read_from_json(file_name:str) -> 'fxVolatilityQuadraticSmile': ...
    def static_cast(self) -> 'fxVolatilityQuadraticSmile': ...
    def write_to_binary(file_name:str, rhs:'fxVolatilityQuadraticSmile') -> None: ...
    def write_to_json(file_name:str, rhs:'fxVolatilityQuadraticSmile') -> None: ...

class fxVolatilityQuadraticSmileBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'fxVolatilityQuadraticSmileBuilder') -> None: ...
    def build(self) -> 'fxVolatilityQuadraticSmile': ...
    def static_cast(self) -> 'fxVolatilityQuadraticSmileBuilder': ...
    def with_fx_forward(self, val:'fxForwardMarket') -> 'fxVolatilityQuadraticSmileBuilder': ...
    def with_gamma(self, val:float) -> 'fxVolatilityQuadraticSmileBuilder': ...
    def with_interpolation_config(self, val:'fxVolatilityInterpolationConfig') -> 'fxVolatilityQuadraticSmileBuilder': ...
    def with_valuation_date(self, val:'datetime') -> 'fxVolatilityQuadraticSmileBuilder': ...
    def with_volatility_targets(self, val:'fxVolatilityCalibrationTargets'): ...

class impliedVolatilitySmile(object):
    @overload
    def __init__(self, expiry:str, tenor:str, forward:float, strikes:MutableSequence[float], volatilities:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self, __a:'impliedVolatilitySmile') -> None: ...
    def expiry(self) -> str: ...
    def forward(self) -> float: ...
    def printf(rhs:'impliedVolatilitySmile') -> str: ...
    def read_from_binary(file_name:str) -> 'impliedVolatilitySmile': ...
    def read_from_json(file_name:str) -> 'impliedVolatilitySmile': ...
    def static_cast(self) -> 'impliedVolatilitySmile': ...
    def strikes(self) -> Tuple[float, float]: ...
    def tenor(self) -> str: ...
    def volatilities(self) -> Tuple[float, float]: ...
    def write_to_binary(file_name:str, rhs:'impliedVolatilitySmile') -> None: ...
    def write_to_json(file_name:str, rhs:'impliedVolatilitySmile') -> None: ...

class inflationCurve(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', base_date:'datetime', interpolation_type:'interpolation_enum', node_dates:MutableSequence['datetime'], rates:MutableSequence[float], seasonality_adjustment:MutableSequence[float]=..., historic_fixings:'inflationFixing'=...) -> None: ...
    @overload
    def __init__(self, __a:'inflationCurve') -> None: ...
    def cpi(self, to:'datetime', observation_lag:str) -> float: ...
    def printf(rhs:'inflationCurve') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationCurve': ...
    def read_from_json(file_name:str) -> 'inflationCurve': ...
    def static_cast(self) -> 'inflationCurve': ...
    def write_to_binary(file_name:str, rhs:'inflationCurve') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationCurve') -> None: ...

class inflationCurveId(marketDataId):
    @overload
    def __init__(self, ccy:str, id:str) -> None: ...
    @overload
    def __init__(self, __a:'inflationCurveId') -> None: ...
    def ccy(self) -> str: ...
    def index_name(self) -> str: ...
    def printf(rhs:'inflationCurveId') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationCurveId': ...
    def read_from_json(file_name:str) -> 'inflationCurveId': ...
    def static_cast(self) -> 'inflationCurveId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'inflationCurveId') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationCurveId') -> None: ...

class inflationDefaultConventionConfig(xsigmamodules.Util.configData):
    def basis(self) -> 'day_count_convention_enum': ...
    def business_day_convention(self) -> 'business_day_convention_enum': ...
    def day_of_the_month(self) -> int: ...
    def initialize(self) -> None: ...
    def interpolation_type(self) -> 'interpolation_enum': ...
    def observation_lag(self) -> str: ...
    def printf(rhs:'inflationDefaultConventionConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationDefaultConventionConfig': ...
    def read_from_json(file_name:str) -> 'inflationDefaultConventionConfig': ...
    def settlement_days(self) -> int: ...
    def static_cast(self) -> 'inflationDefaultConventionConfig': ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'inflationDefaultConventionConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationDefaultConventionConfig') -> None: ...

class inflationDefaultConventionConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'inflationDefaultConventionConfigBuilder') -> None: ...
    def build(self) -> 'inflationDefaultConventionConfig': ...
    def static_cast(self) -> 'inflationDefaultConventionConfigBuilder': ...
    def with_basis(self, val:'day_count_convention_enum') -> 'inflationDefaultConventionConfigBuilder': ...
    def with_business_day_convention(self, val:'business_day_convention_enum') -> 'inflationDefaultConventionConfigBuilder': ...
    def with_day_of_the_month(self, val:int) -> 'inflationDefaultConventionConfigBuilder': ...
    def with_interpolation_type(self, val:'interpolation_enum') -> 'inflationDefaultConventionConfigBuilder': ...
    def with_observation_lag(self, val:str) -> 'inflationDefaultConventionConfigBuilder': ...
    def with_settlement_days(self, val:int) -> 'inflationDefaultConventionConfigBuilder': ...

class inflationDefaultConventionConfigId(configDataId):
    def __init__(self, id:'inflationCurveId') -> None: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'inflationDefaultConventionConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationDefaultConventionConfigId': ...
    def read_from_json(file_name:str) -> 'inflationDefaultConventionConfigId': ...
    def static_cast(self) -> 'inflationDefaultConventionConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'inflationDefaultConventionConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationDefaultConventionConfigId') -> None: ...

class lifeCycleData(xsigmamodules.Util.objectData):
    def static_cast(self) -> 'lifeCycleData': ...

class inflationFixing(lifeCycleData):
    def cpi(self, date:'datetime') -> float: ...
    def initialize(self) -> None: ...
    def printf(rhs:'inflationFixing') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationFixing': ...
    def read_from_json(file_name:str) -> 'inflationFixing': ...
    def static_cast(self) -> 'inflationFixing': ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'inflationFixing') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationFixing') -> None: ...

class inflationFixingBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'inflationFixingBuilder') -> None: ...
    def build(self) -> 'inflationFixing': ...
    def static_cast(self) -> 'inflationFixingBuilder': ...
    def with_base_date(self, val:'datetime') -> 'inflationFixingBuilder': ...
    def with_historical_data(self, historical_dates:MutableSequence['datetime'], historical_cpi_rates:MutableSequence[float]) -> 'inflationFixingBuilder': ...

class inflationFixingId(configDataId):
    @overload
    def __init__(self, id:'inflationCurveId') -> None: ...
    @overload
    def __init__(self, __a:'inflationFixingId') -> None: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'inflationFixingId') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationFixingId': ...
    def read_from_json(file_name:str) -> 'inflationFixingId': ...
    def static_cast(self) -> 'inflationFixingId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'inflationFixingId') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationFixingId') -> None: ...

class inflationSeasonality(xsigmamodules.Util.configData):
    def printf(rhs:'inflationSeasonality') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationSeasonality': ...
    def read_from_json(file_name:str) -> 'inflationSeasonality': ...
    def seasonality(self) -> Tuple[float, float]: ...
    def static_cast(self) -> 'inflationSeasonality': ...
    def write_to_binary(file_name:str, rhs:'inflationSeasonality') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationSeasonality') -> None: ...

class inflationSeasonalityBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'inflationSeasonalityBuilder') -> None: ...
    def build(self) -> 'inflationSeasonality': ...
    def static_cast(self) -> 'inflationSeasonalityBuilder': ...
    def with_seasonality(self, val:MutableSequence[float]) -> 'inflationSeasonalityBuilder': ...

class inflationSeasonalityId(configDataId):
    @overload
    def __init__(self, id:'inflationCurveId') -> None: ...
    @overload
    def __init__(self, __a:'inflationSeasonalityId') -> None: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'inflationSeasonalityId') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationSeasonalityId': ...
    def read_from_json(file_name:str) -> 'inflationSeasonalityId': ...
    def static_cast(self) -> 'inflationSeasonalityId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'inflationSeasonalityId') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationSeasonalityId') -> None: ...

class interpolatorFixedStrike(object):
    def static_cast(self) -> 'interpolatorFixedStrike': ...

class interpolatorMeanReverting(xsigmamodules.Vectorization.vector_IdE):
    @overload
    def __init__(self, valuation_date:'datetime', atm_dates:MutableSequence['datetime'], atm_var:MutableSequence[float], config:'interpolatorMeanRevertingConfig') -> None: ...
    @overload
    def __init__(self, __a:'interpolatorMeanReverting') -> None: ...
    def derivative(self, __a:'datetime') -> float: ...
    def interpolate(self, x:'datetime') -> float: ...
    def static_cast(self) -> 'interpolatorMeanReverting': ...

class interpolatorMeanRevertingConfig(object):
    def event(self) -> 'events': ...
    def lambda_short(self) -> float: ...
    def offsets(self) -> Tuple[float, float]: ...
    def printf(rhs:'interpolatorMeanRevertingConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'interpolatorMeanRevertingConfig': ...
    def read_from_json(file_name:str) -> 'interpolatorMeanRevertingConfig': ...
    def sigma_initial(self) -> float: ...
    def sigma_limit(self) -> float: ...
    def sigma_short(self) -> float: ...
    def static_cast(self) -> 'interpolatorMeanRevertingConfig': ...
    def weekend_weight(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'interpolatorMeanRevertingConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'interpolatorMeanRevertingConfig'): ...

class interpolatorMeanRevertingConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'interpolatorMeanRevertingConfigBuilder') -> None: ...
    def build(self) -> 'interpolatorMeanRevertingConfig': ...
    def static_cast(self) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_events(self, val:'events') -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_lambda(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_lambda_short(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_offsets(self, val:Sequence[float]) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_sigma_initial(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_sigma_limit(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_sigma_short(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...
    def with_weekend_weight(self, val:float) -> 'interpolatorMeanRevertingConfigBuilder': ...

class interpolatorTanh(object):
    @overload
    def __init__(self, left_limit_value:float, left_threshold:float, right_limit_value:float, right_threshold:float) -> None: ...
    @overload
    def __init__(self, __a:'interpolatorTanh') -> None: ...
    def extrapolate(self, x:float, y:float) -> float: ...
    def static_cast(self) -> 'interpolatorTanh': ...

class irFixingRate(marketData):
    def rate(self, start:'datetime', end:'datetime') -> float: ...
    def static_cast(self) -> 'irFixingRate': ...

class irFixingRateAveraging(irFixingRate):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self, __a:'irFixingRateAveraging') -> None: ...
    def printf(rhs:'irFixingRateAveraging') -> str: ...
    def rate(self, start:'datetime', end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'irFixingRateAveraging': ...
    def read_from_json(file_name:str) -> 'irFixingRateAveraging': ...
    def static_cast(self) -> 'irFixingRateAveraging': ...
    def write_to_binary(file_name:str, rhs:'irFixingRateAveraging') -> None: ...
    def write_to_json(file_name:str, rhs:'irFixingRateAveraging') -> None: ...

class irFixingRateCompounding(irFixingRate):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'irFixingRateCompounding') -> None: ...
    def printf(rhs:'irFixingRateCompounding') -> str: ...
    def rate(self, start:'datetime', end:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'irFixingRateCompounding': ...
    def read_from_json(file_name:str) -> 'irFixingRateCompounding': ...
    def static_cast(self) -> 'irFixingRateCompounding': ...
    def write_to_binary(file_name:str, rhs:'irFixingRateCompounding') -> None: ...
    def write_to_json(file_name:str, rhs:'irFixingRateCompounding') -> None: ...

class irFixingRateId(marketDataId):
    @overload
    def __init__(self, ccy:str, index_name:str, frequency:str) -> None: ...
    @overload
    def __init__(self, __a:'irFixingRateId') -> None: ...
    def ccy(self) -> str: ...
    def frequency(self) -> str: ...
    def index_name(self) -> str: ...
    def printf(rhs:'irFixingRateId') -> str: ...
    def read_from_binary(file_name:str) -> 'irFixingRateId': ...
    def read_from_json(file_name:str) -> 'irFixingRateId': ...
    def static_cast(self) -> 'irFixingRateId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'irFixingRateId') -> None: ...
    def write_to_json(file_name:str, rhs:'irFixingRateId') -> None: ...

class irVolatility(marketData):
    def model(self, expiry:'datetime', maturity:'datetime') -> 'volatilityModel': ...
    def static_cast(self) -> 'irVolatility': ...

class irVolatilityConfig(xsigmamodules.Util.configData):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'irVolatilityConfig') -> None: ...
    def calibrate_atm_only(self) -> bool: ...
    def calibrate_backbone(self) -> bool: ...
    def calibrate_gamma_zabr(self) -> bool: ...
    def calibrate_shift(self) -> bool: ...
    def exclude_outlier_strikes(self) -> bool: ...
    def minimum_forward_shift(self) -> float: ...
    def minimum_vol_threshold(self) -> float: ...
    def model_type(self) -> 'volatility_model_enum': ...
    def optimizer_type(self) -> 'solver_enum': ...
    def pde_size(self) -> int: ...
    def printf(rhs:'irVolatilityConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'irVolatilityConfig': ...
    def read_from_json(file_name:str) -> 'irVolatilityConfig': ...
    def skew_calibration_minimum_number_of_strikes(self) -> int: ...
    def standard_deviation(self) -> float: ...
    def static_cast(self) -> 'irVolatilityConfig': ...
    def strike_interpolation_type(self) -> 'interpolation_enum': ...
    def time_interpolation_type(self) -> 'interpolation_enum': ...
    def time_steps(self) -> int: ...
    def write_to_binary(file_name:str, rhs:'irVolatilityConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'irVolatilityConfig') -> None: ...

class irVolatilityConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'irVolatilityConfigBuilder') -> None: ...
    def build(self) -> 'irVolatilityConfig': ...
    def static_cast(self) -> 'irVolatilityConfigBuilder': ...
    def with_atm_only(self, calibrate_atm_only:bool) -> 'irVolatilityConfigBuilder': ...
    def with_calibrate_backbone(self, val:bool=True) -> 'irVolatilityConfigBuilder': ...
    def with_calibrate_gamma_zabr(self, val:bool=True) -> 'irVolatilityConfigBuilder': ...
    def with_calibrate_shift(self, val:bool=True) -> 'irVolatilityConfigBuilder': ...
    def with_exclude_outlier_strikes(self, val:bool=True) -> 'irVolatilityConfigBuilder': ...
    def with_min_strikes(self, val:int) -> 'irVolatilityConfigBuilder': ...
    def with_minimum_forward_shift(self, val:float) -> 'irVolatilityConfigBuilder': ...
    def with_minimum_vol_threshold(self, val:float) -> 'irVolatilityConfigBuilder': ...
    def with_model_type(self, type:'volatility_model_enum') -> 'irVolatilityConfigBuilder': ...
    def with_optimizer_type(self, type:'solver_enum') -> 'irVolatilityConfigBuilder': ...
    def with_pde_size(self, val:int) -> 'irVolatilityConfigBuilder': ...
    def with_standard_deviation(self, val:float) -> 'irVolatilityConfigBuilder': ...
    def with_strike_interpolation(self, val:'interpolation_enum') -> 'irVolatilityConfigBuilder': ...
    def with_time_interpolation(self, val:'interpolation_enum') -> 'irVolatilityConfigBuilder': ...
    def with_time_steps(self, val:int) -> 'irVolatilityConfigBuilder': ...

class irVolatilityId(marketDataId):
    @overload
    def __init__(self, id:str, ccy:str) -> None: ...
    @overload
    def __init__(self, __a:'irVolatilityId') -> None: ...
    def ccy(self) -> str: ...
    def id(self) -> str: ...
    def printf(rhs:'irVolatilityId') -> str: ...
    def read_from_binary(file_name:str) -> 'irVolatilityId': ...
    def read_from_json(file_name:str) -> 'irVolatilityId': ...
    def static_cast(self) -> 'irVolatilityId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'irVolatilityId') -> None: ...
    def write_to_json(file_name:str, rhs:'irVolatilityId') -> None: ...

class irVolatilitySabr(irVolatility):
    @overload
    def __init__(self, valuation_date:'datetime', interpolator_alpha:'interpolator_2d_I6matrixIdEddE', interpolator_beta:'interpolator_2d_I6matrixIdEddE', interpolator_nu:'interpolator_2d_I6matrixIdEddE', interpolator_rho:'interpolator_2d_I6matrixIdEddE', interpolator_shift:'interpolator_2d_I6matrixIdEddE', interpolator_gamma:'interpolator_2d_I6matrixIdEddE', convention:'dayCountConvention', volatility_config:'irVolatilityConfig') -> None: ...
    @overload
    def __init__(self, data:'volatilityMarketData', volatility_config:'irVolatilityConfig') -> None: ...
    def model(self, expiry:'datetime', maturity:'datetime') -> 'volatilityModel': ...
    def printf(rhs:'irVolatilitySabr') -> str: ...
    def read_from_binary(file_name:str) -> 'irVolatilitySabr': ...
    def read_from_json(file_name:str) -> 'irVolatilitySabr': ...
    def static_cast(self) -> 'irVolatilitySabr': ...
    def write_to_binary(file_name:str, rhs:'irVolatilitySabr') -> None: ...
    def write_to_json(file_name:str, rhs:'irVolatilitySabr') -> None: ...

class lifeCycleId(objectDataId):
    def static_cast(self) -> 'lifeCycleId': ...
    def to_string(self) -> str: ...

class marketRulesConfig(xsigmamodules.Util.configData):
    def adjustement(self) -> 'business_day_convention_enum': ...
    def convention(self) -> 'day_count_convention_enum': ...
    def holidays(self) -> 'calendar': ...
    def initialize(self) -> None: ...
    def printf(rhs:'marketRulesConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'marketRulesConfig': ...
    def read_from_json(file_name:str) -> 'marketRulesConfig': ...
    def settlement_days(self) -> int: ...
    def static_cast(self) -> 'marketRulesConfig': ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'marketRulesConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'marketRulesConfig') -> None: ...

class marketRulesConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'marketRulesConfigBuilder') -> None: ...
    def build(self) -> 'marketRulesConfig': ...
    def static_cast(self) -> 'marketRulesConfigBuilder': ...
    def with_adjustement(self, val:'business_day_convention_enum') -> 'marketRulesConfigBuilder': ...
    def with_convention(self, val:'day_count_convention_enum') -> 'marketRulesConfigBuilder': ...
    def with_holidays(self, val:'calendar') -> 'marketRulesConfigBuilder': ...
    def with_settlement_days(self, val:int) -> 'marketRulesConfigBuilder': ...

class overnightIndex(forecastConfig):
    @overload
    def __init__(self, settlement_days:int, fixing_calendar:'calendar', convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'overnightIndex') -> None: ...
    def static_cast(self) -> 'overnightIndex': ...

class repoCalibrationConfig(xsigmamodules.Util.configData):
    def initialize(self) -> None: ...
    def printf(rhs:'repoCalibrationConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'repoCalibrationConfig': ...
    def read_from_json(file_name:str) -> 'repoCalibrationConfig': ...
    def static_cast(self) -> 'repoCalibrationConfig': ...
    def validate(self) -> None: ...
    def write_to_binary(file_name:str, rhs:'repoCalibrationConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'repoCalibrationConfig') -> None: ...

class repoCalibrationConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'repoCalibrationConfigBuilder') -> None: ...
    def build(self) -> 'repoCalibrationConfig': ...
    def static_cast(self) -> 'repoCalibrationConfigBuilder': ...
    def with_inversion_config(self, val:'volatilityQuoteInversionConfig') -> 'repoCalibrationConfigBuilder': ...
    def with_lower_bound(self, val:float) -> 'repoCalibrationConfigBuilder': ...
    def with_max_iteration(self, val:int) -> 'repoCalibrationConfigBuilder': ...
    def with_tolerance(self, val:float) -> 'repoCalibrationConfigBuilder': ...
    def with_upper_bound(self, val:float) -> 'repoCalibrationConfigBuilder': ...

class repoCurve(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'repoCurve') -> None: ...
    def printf(rhs:'repoCurve') -> str: ...
    def rate(self, start_date:'datetime', end_date:'datetime') -> float: ...
    def read_from_binary(file_name:str) -> 'repoCurve': ...
    def read_from_json(file_name:str) -> 'repoCurve': ...
    def static_cast(self) -> 'repoCurve': ...
    def write_to_binary(file_name:str, rhs:'repoCurve') -> None: ...
    def write_to_json(file_name:str, rhs:'repoCurve') -> None: ...

class riskReversalVolatilityQuote(object):
    def __init__(self, booking:'currency_convention_enum', facing:'currency_convention_enum', delta_type:'delta_convention_enum', reference_expiry:'datetime', expiry:'datetime', delta_level:float, volatility:float) -> None: ...
    def booking(self) -> 'currency_convention_enum': ...
    def delta_level(self) -> float: ...
    def delta_type(self) -> 'delta_convention_enum': ...
    def expiry(self) -> 'datetime': ...
    def facing(self) -> 'currency_convention_enum': ...
    def printf(rhs:'riskReversalVolatilityQuote') -> str: ...
    def read_from_binary(file_name:str) -> 'riskReversalVolatilityQuote': ...
    def read_from_json(file_name:str) -> 'riskReversalVolatilityQuote': ...
    def reference_expiry(self) -> 'datetime': ...
    def static_cast(self) -> 'riskReversalVolatilityQuote': ...
    def volatility(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'riskReversalVolatilityQuote') -> None: ...
    def write_to_json(file_name:str, rhs:'riskReversalVolatilityQuote') -> None: ...

class strangleVolatilityQuote(object):
    def __init__(self, style:'strangle_convention_enum', booking:'currency_convention_enum', facing:'currency_convention_enum', delta_type:'delta_convention_enum', reference_expiry:'datetime', expiry:'datetime', delta_level:float, volatility:float) -> None: ...
    def booking(self) -> 'currency_convention_enum': ...
    def delta_level(self) -> float: ...
    def delta_type(self) -> 'delta_convention_enum': ...
    def expiry(self) -> 'datetime': ...
    def facing(self) -> 'currency_convention_enum': ...
    def printf(rhs:'strangleVolatilityQuote') -> str: ...
    def read_from_binary(file_name:str) -> 'strangleVolatilityQuote': ...
    def read_from_json(file_name:str) -> 'strangleVolatilityQuote': ...
    def reference_expiry(self) -> 'datetime': ...
    def static_cast(self) -> 'strangleVolatilityQuote': ...
    def style(self) -> 'strangle_convention_enum': ...
    def volatility(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'strangleVolatilityQuote') -> None: ...
    def write_to_json(file_name:str, rhs:'strangleVolatilityQuote') -> None: ...

class survivalCurve(marketData):
    @overload
    def log_survival_probability(self, start:'datetime', end:'datetime') -> float: ...
    @overload
    def log_survival_probability(self, output:'vector_IdE', from_:'datetime', to:'datetime') -> None: ...
    def static_cast(self) -> 'survivalCurve': ...
    @overload
    def survival_probability(self, start:'datetime', end:'datetime') -> float: ...
    @overload
    def survival_probability(self, __a:'vector_IdE', __b:'datetime') -> None: ...

class survivalCurveFlat(survivalCurve):
    @overload
    def __init__(self, valuation_date:'datetime', rates:float, convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'survivalCurveFlat') -> None: ...
    def log_survival_probability(self, from_:'datetime', to:'datetime') -> float: ...
    def printf(rhs:'survivalCurveFlat') -> str: ...
    def read_from_binary(file_name:str) -> 'survivalCurveFlat': ...
    def read_from_json(file_name:str) -> 'survivalCurveFlat': ...
    def static_cast(self) -> 'survivalCurveFlat': ...
    def survival_probability(self, from_:'datetime', to:'datetime') -> float: ...
    def write_to_binary(file_name:str, rhs:'survivalCurveFlat') -> None: ...
    def write_to_json(file_name:str, rhs:'survivalCurveFlat') -> None: ...

class survivalCurvePiecewiseConstant(survivalCurve):
    @overload
    def __init__(self, valuation_date:'datetime', dates:MutableSequence['datetime'], rates:MutableSequence[float], convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'survivalCurvePiecewiseConstant') -> None: ...
    def log_survival_probability(self, start_date:'datetime', end_date:'datetime') -> float: ...
    def printf(rhs:'survivalCurvePiecewiseConstant') -> str: ...
    def read_from_binary(file_name:str) -> 'survivalCurvePiecewiseConstant': ...
    def read_from_json(file_name:str) -> 'survivalCurvePiecewiseConstant': ...
    def static_cast(self) -> 'survivalCurvePiecewiseConstant': ...
    def survival_probability(self, start_date:'datetime', end_date:'datetime') -> float: ...
    def write_to_binary(file_name:str, rhs:'survivalCurvePiecewiseConstant') -> None: ...
    def write_to_json(file_name:str, rhs:'survivalCurvePiecewiseConstant') -> None: ...

class swapDefaultConventionConfig(xsigmamodules.Util.configData):
    def business_day_convention(self) -> 'business_day_convention_enum': ...
    def calendar_name(self) -> str: ...
    def fixed_basis(self) -> 'day_count_convention_enum': ...
    def fixed_frequency(self) -> 'frequency_enum': ...
    def fixing_days(self) -> int: ...
    def floating_index(self) -> str: ...
    def forecast_basis(self) -> 'day_count_convention_enum': ...
    def forecast_frequency(self) -> 'frequency_enum': ...
    def printf(rhs:'swapDefaultConventionConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'swapDefaultConventionConfig': ...
    def read_from_json(file_name:str) -> 'swapDefaultConventionConfig': ...
    def settlement_days(self) -> int: ...
    def settlement_days_adjustment(self) -> int: ...
    def static_cast(self) -> 'swapDefaultConventionConfig': ...
    def write_to_binary(file_name:str, rhs:'swapDefaultConventionConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'swapDefaultConventionConfig') -> None: ...

class swapDefaultConventionConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'swapDefaultConventionConfigBuilder') -> None: ...
    def build(self) -> 'swapDefaultConventionConfig': ...
    def static_cast(self) -> 'swapDefaultConventionConfigBuilder': ...
    def with_business_day_convention(self, val:'business_day_convention_enum') -> 'swapDefaultConventionConfigBuilder': ...
    def with_calendar_name(self, val:str) -> 'swapDefaultConventionConfigBuilder': ...
    def with_fixed_basis(self, val:'day_count_convention_enum') -> 'swapDefaultConventionConfigBuilder': ...
    def with_fixed_frequency(self, val:'frequency_enum') -> 'swapDefaultConventionConfigBuilder': ...
    def with_fixing_days(self, val:int) -> 'swapDefaultConventionConfigBuilder': ...
    def with_floating_index(self, val:str) -> 'swapDefaultConventionConfigBuilder': ...
    def with_forecast_basis(self, val:'day_count_convention_enum') -> 'swapDefaultConventionConfigBuilder': ...
    def with_forecast_frequency(self, val:'frequency_enum') -> 'swapDefaultConventionConfigBuilder': ...
    def with_settlement_days(self, val:int) -> 'swapDefaultConventionConfigBuilder': ...

class swapDefaultConventionConfigId(configDataId):
    def __init__(self, ccy:str, index_type:str) -> None: ...
    def ccy(self) -> str: ...
    def index_type(self) -> 'index_enum': ...
    def printf(rhs:'swapDefaultConventionConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'swapDefaultConventionConfigId': ...
    def read_from_json(file_name:str) -> 'swapDefaultConventionConfigId': ...
    def static_cast(self) -> 'swapDefaultConventionConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'swapDefaultConventionConfigId'): ...
    def write_to_json(file_name:str, rhs:'swapDefaultConventionConfigId') -> None: ...

class valuationDatetime(marketData):
    @overload
    def __init__(self, date:'datetime') -> None: ...
    @overload
    def __init__(self, __a:'valuationDatetime') -> None: ...
    def static_cast(self) -> 'valuationDatetime': ...

class valuationDatetimeId(marketDataId):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'valuationDatetimeId') -> None: ...
    def printf(rhs:'valuationDatetimeId') -> str: ...
    def read_from_binary(file_name:str) -> 'valuationDatetimeId': ...
    def read_from_json(file_name:str) -> 'valuationDatetimeId': ...
    def static_cast(self) -> 'valuationDatetimeId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'valuationDatetimeId') -> None: ...
    def write_to_json(file_name:str, rhs:'valuationDatetimeId') -> None: ...

class volatilityMarketData(marketData):
    @overload
    def __init__(self, valuation_date:'datetime', market_rules:'marketRulesConfig', data:MutableSequence['impliedVolatilitySmile']) -> None: ...
    @overload
    def __init__(self, __a:'volatilityMarketData') -> None: ...
    def data(self) -> Tuple['impliedVolatilitySmile', 'impliedVolatilitySmile']: ...
    def market_rules(self) -> 'marketRulesConfig': ...
    def printf(rhs:'volatilityMarketData') -> str: ...
    def read_from_binary(file_name:str) -> 'volatilityMarketData': ...
    def read_from_json(file_name:str) -> 'volatilityMarketData': ...
    def static_cast(self) -> 'volatilityMarketData': ...
    def write_to_binary(file_name:str, rhs:'volatilityMarketData') -> None: ...
    def write_to_json(file_name:str, rhs:'volatilityMarketData') -> None: ...

class volatilityModel(object):
    @overload
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:'implied_volatility_enum') -> float: ...
    @overload
    def implied_volatility(self, outputs:'vector_IdE', strikes:'vector_IdE', forward:float, expiry:float, type:'implied_volatility_enum') -> None: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...
    def static_cast(self) -> 'volatilityModel': ...

class volatilityModelExtendedSvi(volatilityModel):
    def __init__(self, anchor_strike:float, ctrl_put:float, ctrl_call:float, atm:float, skew:float, smile:float, put:float, call:float) -> None: ...
    def calibrate(strikes:'vector_IdE', market_vols:'vector_IdE', forward:float, expiry:float, options:'solverOptions', ctrl_put:float, ctrl_call:float, intial_guess:'volatilityModelExtendedSvi'=...) -> 'volatilityModelExtendedSvi': ...
    @overload
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:'implied_volatility_enum') -> float: ...
    @overload
    def implied_volatility(self, outputs:'vector_IdE', strikes:'vector_IdE', forward:float, expiry:float, type:'implied_volatility_enum') -> None: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...
    def sensitivities(self, expiry:float, strikes:'vector_IdE', vols:'vector_IdE', atm_sensitivity:'vector_IdE', skew_sensitivity:'vector_IdE', smile_sensitivity:'vector_IdE', put_sensitivity:'vector_IdE', call_sensitivity:'vector_IdE', strike_sensitivity:'vector_IdE', anchor_strike_sensitivity:'vector_IdE', atm2_sensitivity:'vector_IdE', anchor_strike2_sensitivity:'vector_IdE', strike2_sensitivity:'vector_IdE') -> None: ...
    def static_cast(self) -> 'volatilityModelExtendedSvi': ...

class volatilityModelPde(volatilityModel):
    def density(self) -> 'vector_IdE': ...
    def expiry(self) -> float: ...
    def forward(self) -> float: ...
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:'implied_volatility_enum') -> float: ...
    def integral_inverse_volatility(self, forward:float, strike:float) -> float: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...
    def sigma(self, strike:float) -> float: ...
    def sigma_prime(self, strike:float) -> float: ...
    def static_cast(self) -> 'volatilityModelPde': ...
    def strikes(self) -> 'vector_IdE': ...
    def transform_to_strike(self, forward:float, z:float) -> float: ...

class volatilityModelPdeClassic(volatilityModelPde):
    @overload
    def __init__(self, forward:float, expiry:float, alpha:float, beta:float, nu:float, rho:float, shift:float, N:int, timesteps:int, min_strikes:float, max_strikes:float, use_uniforme_strike_grid:bool=False) -> None: ...
    @overload
    def __init__(self, __a:'volatilityModelPdeClassic') -> None: ...
    def alpha(self) -> float: ...
    def beta(self) -> float: ...
    def calibrate(market_vols:Sequence[float], calibration_strikes:Sequence[float], initial_values:'volatilityModel', volatility_config:'irVolatilityConfig') -> 'volatilityModel': ...
    def h(self) -> float: ...
    def integral_inverse_volatility(self, shifted_forward:float, strike:float) -> float: ...
    def rho(self) -> float: ...
    def shift(self) -> float: ...
    def sigma(self, strike:float) -> float: ...
    def sigma_prime(self, strike:float) -> float: ...
    def static_cast(self) -> 'volatilityModelPdeClassic': ...
    def transform_to_strike(self, shifted_forward:float, z:float) -> float: ...
    def vol_of_vol(self) -> float: ...

class volatilityModelSabr(volatilityModel):
    @overload
    def __init__(self, alpha:float, beta:float, rho:float, nu:float, shift:float, is_skew_dampening:bool=True) -> None: ...
    @overload
    def __init__(self, __a:'volatilityModelSabr') -> None: ...
    def alpha(self) -> float: ...
    def beta(self) -> float: ...
    def calibrate(market_vols:Sequence[float], strikes:Sequence[float], forward:float, expiry:float, initial_guess:'volatilityModelSabr', volatility_config:'irVolatilityConfig', is_skew_dampening:bool): ...
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:'implied_volatility_enum') -> float: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...
    def rho(self) -> float: ...
    def shift(self) -> float: ...
    def static_cast(self) -> 'volatilityModelSabr': ...
    def vol_of_vol(self) -> float: ...

class volatilityModelZabr(volatilityModel):
    def expiry(self) -> float: ...
    def forward(self) -> float: ...
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:'implied_volatility_enum') -> float: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...
    def print(self) -> None: ...
    def sigma(self, strike:float) -> float: ...
    def static_cast(self) -> 'volatilityModelZabr': ...
    def strikes(self) -> 'vector_IdE': ...
    def values(self) -> 'vector_IdE': ...

class volatilityModelZabrClassic(volatilityModelZabr):
    def __init__(self, forward:float, expiry:float, zabr_output_type:'volatility_model_output_enum', interpolation_type:'interpolation_enum', pde_size:int, standard_deviation:float, alpha:float, beta:float, rho:float, nu:float, shift:float, gamma:float) -> None: ...
    def alpha(self) -> float: ...
    def beta(self) -> float: ...
    def gamma(self) -> float: ...
    def print(self) -> None: ...
    def rho(self) -> float: ...
    def shift(self) -> float: ...
    def sigma(self, strike:float) -> float: ...
    def static_cast(self) -> 'volatilityModelZabrClassic': ...
    def vol_of_vol(self) -> float: ...

class volatilityModelZabrMixture(volatilityModelZabr):
    def __init__(self, forward:float, expiry:float, zabr_output_type:'volatility_model_output_enum', interpolation_type:'interpolation_enum', pde_size:int, alpha:float, beta1:float, beta2:float, d:float, asymptotic_volatilty_low:float, vol_of_vol:float, rho:float, gamma:float=1.0, high_strike_transition:float=0.3, low_strike_transition:float=0.02, forward_cut_off:float=0.02, smothing_factor:float=0.001, low_volatility_cap:float=0.5, exponent:float=0.25, delta:float=0.01) -> None: ...
    def print(self) -> None: ...
    def sigma(self, strike:float) -> float: ...
    def static_cast(self) -> 'volatilityModelZabrMixture': ...
    def strike_grid(output:MutableSequence[float], expiry:float, fwd:float, n:int, calibration_strikes:Sequence[float]=..., m:int=8, alpha:float=0.01, beta:float=0.5, rho:float=0., vol_of_vol:float=1.2, vol_of_vol_lower:float=0.1, vol_of_vol_decay:float=1., vol_of_vol_power:float=1., displacement:float=-0.02, fwd_ref:float=0.1, fwd_decay:float=-12.0, p_min:float=0.01, p_max:float=0.9999, tolerance:float=1.E-7) -> None: ...

class volatilityQuoteInversionConfig(object):
    @overload
    def __init__(self, market_rules:'marketRulesConfig', cutoff_tenor:str, tolerance:float, invert_in_the_money:bool, max_iterations:int, mid_vol_source:'mid_volatility_source_enum', engine:'engine_enum') -> None: ...
    @overload
    def __init__(self, __a:'volatilityQuoteInversionConfig') -> None: ...
    def cutoff_tenor(self) -> str: ...
    def engine(self) -> 'engine_enum': ...
    def invert_in_the_money(self) -> bool: ...
    def market_rules(self) -> 'marketRulesConfig': ...
    def max_iterations(self) -> int: ...
    def mid_volatility_source(self) -> 'mid_volatility_source_enum': ...
    def printf(rhs:'volatilityQuoteInversionConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'volatilityQuoteInversionConfig': ...
    def read_from_json(file_name:str) -> 'volatilityQuoteInversionConfig': ...
    def static_cast(self) -> 'volatilityQuoteInversionConfig': ...
    def tolerance(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'volatilityQuoteInversionConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'volatilityQuoteInversionConfig') -> None: ...

class wingExtrapolationConfig(object):
    def delta(self) -> float: ...
    def max_volatility_multiplier(self) -> float: ...
    def printf(rhs:'wingExtrapolationConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'wingExtrapolationConfig': ...
    def read_from_json(file_name:str) -> 'wingExtrapolationConfig': ...
    def static_cast(self) -> 'wingExtrapolationConfig': ...
    def volatility_multiplier(self) -> float: ...
    def write_to_binary(file_name:str, rhs:'wingExtrapolationConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'wingExtrapolationConfig') -> None: ...

class wingExtrapolationConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'wingExtrapolationConfigBuilder') -> None: ...
    def build(self) -> 'wingExtrapolationConfig': ...
    def static_cast(self) -> 'wingExtrapolationConfigBuilder': ...
    def with_delta(self, val:float) -> 'wingExtrapolationConfigBuilder': ...
    def with_max_volatility_multiplier(self, val:float) -> 'wingExtrapolationConfigBuilder': ...
    def with_volatility_multiplier(self, val:float) -> 'wingExtrapolationConfigBuilder': ...

class xccyDefaultConventionConfig(xsigmamodules.Util.configData):
    def benchmark_rate(self) -> str: ...
    def business_day_convention(self) -> 'business_day_convention_enum': ...
    def calendar_name(self) -> str: ...
    def currency(self) -> str: ...
    def day_count_convention(self) -> 'day_count_convention_enum': ...
    def payment_frequency(self) -> 'frequency_enum': ...
    def printf(rhs:'xccyDefaultConventionConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'xccyDefaultConventionConfig': ...
    def read_from_json(file_name:str) -> 'xccyDefaultConventionConfig': ...
    def settlement_days(self) -> int: ...
    def static_cast(self) -> 'xccyDefaultConventionConfig': ...
    def write_to_binary(file_name:str, rhs:'xccyDefaultConventionConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'xccyDefaultConventionConfig') -> None: ...

class xccyDefaultConventionConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'xccyDefaultConventionConfigBuilder') -> None: ...
    def build(self) -> 'xccyDefaultConventionConfig': ...
    def static_cast(self) -> 'xccyDefaultConventionConfigBuilder': ...
    def with_benchmark_rate(self, val:str) -> 'xccyDefaultConventionConfigBuilder': ...
    def with_business_day_convention(self, val:'business_day_convention_enum') -> 'xccyDefaultConventionConfigBuilder': ...
    def with_calendar_name(self, val:str) -> 'xccyDefaultConventionConfigBuilder': ...
    def with_currency(self, val:str) -> 'xccyDefaultConventionConfigBuilder': ...
    def with_day_count_convention(self, val:'day_count_convention_enum') -> 'xccyDefaultConventionConfigBuilder': ...
    def with_payment_frequency(self, val:'frequency_enum') -> 'xccyDefaultConventionConfigBuilder': ...
    def with_settlement_days(self, val:int) -> 'xccyDefaultConventionConfigBuilder': ...

class xccyDefaultConventionConfigId(configDataId):
    def __init__(self, ccy:str) -> None: ...
    def ccy(self) -> str: ...
    def printf(rhs:'xccyDefaultConventionConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'xccyDefaultConventionConfigId': ...
    def read_from_json(file_name:str) -> 'xccyDefaultConventionConfigId': ...
    def static_cast(self) -> 'xccyDefaultConventionConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'xccyDefaultConventionConfigId'): ...
    def write_to_json(file_name:str, rhs:'xccyDefaultConventionConfigId') -> None: ...

