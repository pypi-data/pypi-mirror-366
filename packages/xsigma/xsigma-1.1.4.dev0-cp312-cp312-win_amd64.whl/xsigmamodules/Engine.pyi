from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core
import xsigmamodules.Market
import xsigmamodules.Util

class calibration_grid_enum(int):
    BESPOKED:'calibration_grid_enum'
    INSTRUMENT:'calibration_grid_enum'
    INVALID:'calibration_grid_enum'
    MERGED:'calibration_grid_enum'
    REPLACED:'calibration_grid_enum'

class curveCalibration(object):
    def calibrate(self) -> None: ...
    def calibration_summary(self) -> str: ...
    def debug(self) -> None: ...
    def node_dates(self, id:'anyId') -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'curveCalibration': ...

class curveCalibrationConfig(xsigmamodules.Util.configData):
    def printf(rhs:'curveCalibrationConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationConfig': ...
    def read_from_json(file_name:str) -> 'curveCalibrationConfig': ...
    def static_cast(self) -> 'curveCalibrationConfig': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationConfig') -> None: ...

class curveCalibrationConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationConfigBuilder') -> None: ...
    def build(self) -> 'curveCalibrationConfig': ...
    def static_cast(self) -> 'curveCalibrationConfigBuilder': ...
    def with_bootstrap_stdev(self, val:float) -> 'curveCalibrationConfigBuilder': ...
    def with_date_mode(self, date_mode:'calibration_grid_enum') -> 'curveCalibrationConfigBuilder': ...
    def with_interpolation1(self, interp:'interpolation_enum') -> 'curveCalibrationConfigBuilder': ...
    def with_interpolation2(self, interp:'interpolation_enum') -> 'curveCalibrationConfigBuilder': ...
    def with_parameter_lower_bound(self, val:float) -> 'curveCalibrationConfigBuilder': ...
    def with_parameter_upper_bound(self, val:float) -> 'curveCalibrationConfigBuilder': ...
    def with_smoothing_weight(self, val:float) -> 'curveCalibrationConfigBuilder': ...
    def with_solver_options(self, val:'solverOptions') -> 'curveCalibrationConfigBuilder': ...
    def with_use_bootstrapping(self, use:bool=True) -> 'curveCalibrationConfigBuilder': ...

class curveCalibrationConfigId(xsigmamodules.Market.configDataId):
    def __init__(self, ccy:str, index:str) -> None: ...
    def printf(rhs:'curveCalibrationConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationConfigId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationConfigId': ...
    def static_cast(self) -> 'curveCalibrationConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationConfigId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationConfigId') -> None: ...

class curveCalibrationData(object):
    @overload
    def __init__(self, index_info:str, asset_info:str, output_type:'option_output_enum', trade_infos:Sequence[str], values:Sequence[float], weights:Sequence[float]=...) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationData') -> None: ...
    def asset_info(self) -> str: ...
    def index_info(self) -> str: ...
    def output_type(self) -> 'option_output_enum': ...
    def printf(rhs:'curveCalibrationData') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationData': ...
    def read_from_json(file_name:str) -> 'curveCalibrationData': ...
    def static_cast(self) -> 'curveCalibrationData': ...
    def trade_infos(self) -> Tuple[str, str]: ...
    def values(self) -> Tuple[float, float]: ...
    def weights(self) -> Tuple[float, float]: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationData') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationData') -> None: ...

class curveCalibrationDataArray(xsigmamodules.Market.marketData):
    @overload
    def __init__(self, valuation_date:'datetime', data:MutableSequence['curveCalibrationData']) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationDataArray') -> None: ...
    def asset_data(self, asset:str) -> 'curveCalibrationData': ...
    def data(self) -> Tuple['curveCalibrationData', 'curveCalibrationData']: ...
    def printf(rhs:'curveCalibrationDataArray') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDataArray': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDataArray': ...
    def static_cast(self) -> 'curveCalibrationDataArray': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDataArray') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDataArray') -> None: ...

class curveCalibrationDataInflationId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'inflationCurveId', ccy_base:str) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationDataInflationId') -> None: ...
    def ccy_base(self) -> str: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'curveCalibrationDataInflationId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDataInflationId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDataInflationId': ...
    def static_cast(self) -> 'curveCalibrationDataInflationId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDataInflationId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDataInflationId'): ...

class curveCalibrationDataRatesId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, ccy:str, ccy_base:str) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationDataRatesId') -> None: ...
    def ccy(self) -> str: ...
    def ccy_base(self) -> str: ...
    def printf(rhs:'curveCalibrationDataRatesId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDataRatesId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDataRatesId': ...
    def static_cast(self) -> 'curveCalibrationDataRatesId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDataRatesId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDataRatesId') -> None: ...

class curveCalibrationDates(object):
    @overload
    def __init__(self, valution_date:'datetime', dates:Sequence['datetime'], instrument_dates:Sequence['datetime'], type:'calibration_grid_enum') -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationDates') -> None: ...
    def node_dates(self) -> Tuple['datetime', 'datetime']: ...
    def printf(rhs:'curveCalibrationDates') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDates': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDates': ...
    def smoothing_index(self) -> Tuple[int, int]: ...
    def static_cast(self) -> 'curveCalibrationDates': ...
    def switching_date(self) -> 'datetime': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDates') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDates') -> None: ...

class curveCalibrationDatesConfig(xsigmamodules.Util.configData):
    def dates(self) -> Tuple['datetime', 'datetime']: ...
    def printf(rhs:'curveCalibrationDatesConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDatesConfig': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDatesConfig': ...
    def static_cast(self) -> 'curveCalibrationDatesConfig': ...
    def values(self) -> Tuple[float, float]: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDatesConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDatesConfig') -> None: ...

class curveCalibrationDatesConfigBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationDatesConfigBuilder') -> None: ...
    def build(self) -> 'curveCalibrationDatesConfig': ...
    def static_cast(self) -> 'curveCalibrationDatesConfigBuilder': ...
    def with_dates_and_values(self, dates:Sequence['datetime'], values:Sequence[float]) -> 'curveCalibrationDatesConfigBuilder': ...
    def with_tenors_and_values(self, central_bank_tenors:Sequence[str], values:Sequence[float]) -> 'curveCalibrationDatesConfigBuilder': ...

class curveCalibrationDatesConfigId(xsigmamodules.Market.configDataId):
    def __init__(self, ccy:str) -> None: ...
    def ccy(self) -> str: ...
    def printf(rhs:'curveCalibrationDatesConfigId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationDatesConfigId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationDatesConfigId': ...
    def static_cast(self) -> 'curveCalibrationDatesConfigId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationDatesConfigId'): ...
    def write_to_json(file_name:str, rhs:'curveCalibrationDatesConfigId') -> None: ...

class curveCalibrationInstrument(object):
    @overload
    def __init__(self, forecast_id:'forecastCurveId', config:'curveCalibrationInstrumentConfig', data:'curveCalibrationData', holiday_list:'calendar') -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationInstrument') -> None: ...
    def config(self) -> 'curveCalibrationInstrumentConfig': ...
    def forecast_id(self) -> 'forecastCurveId': ...
    def printf(rhs:'curveCalibrationInstrument') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationInstrument': ...
    def read_from_json(file_name:str) -> 'curveCalibrationInstrument': ...
    def static_cast(self) -> 'curveCalibrationInstrument': ...
    def target_type(self) -> 'asset_type_enum': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationInstrument') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationInstrument') -> None: ...

class curveCalibrationInstrumentConfig(xsigmamodules.Util.configData):
    @overload
    def __init__(self, index_type:str, ccy:str, index_name:str, index_tenor:str, discount_id:'discountDefinition', frequency:str) -> None: ...
    @overload
    def __init__(self, index_type:str, ccy:str, index_name:str, index_tenor:str, discount_id:'discountDefinition', frequency:str, ccy_base:str, index_name_base:str, index_tenor_base:str, discount_id_base:'discountDefinition', frequency_base:str, inverted:bool) -> None: ...
    @overload
    def __init__(self, index_type:str, forecast_id:'forecastCurveId', discount_id:'discountDefinition', frequency:str) -> None: ...
    def ccy(self) -> str: ...
    def ccy_base(self) -> str: ...
    def discount_id(self) -> 'discountDefinition': ...
    def discount_id_base(self) -> 'discountDefinition': ...
    def frequency(self) -> str: ...
    def frequency_base(self) -> str: ...
    def index_name(self) -> str: ...
    def index_name_base(self) -> str: ...
    def index_tenor(self) -> str: ...
    def index_tenor_base(self) -> str: ...
    def index_type(self) -> str: ...
    def inverted(self) -> bool: ...
    def printf(rhs:'curveCalibrationInstrumentConfig') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationInstrumentConfig': ...
    def read_from_json(file_name:str) -> 'curveCalibrationInstrumentConfig': ...
    def static_cast(self) -> 'curveCalibrationInstrumentConfig': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationInstrumentConfig') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationInstrumentConfig') -> None: ...

class curveCalibrationInstrumentFactory(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationInstrumentFactory') -> None: ...
    def static_cast(self) -> 'curveCalibrationInstrumentFactory': ...

class curveCalibrationInstrumentsInflationId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'inflationCurveId', ccy_base:str) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationInstrumentsInflationId') -> None: ...
    def ccy_base(self) -> str: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'curveCalibrationInstrumentsInflationId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationInstrumentsInflationId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationInstrumentsInflationId': ...
    def static_cast(self) -> 'curveCalibrationInstrumentsInflationId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationInstrumentsInflationId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationInstrumentsInflationId') -> None: ...

class curveCalibrationInstrumentsMarket(xsigmamodules.Market.marketData):
    @overload
    def __init__(self, valuation_date:'datetime', instruments:MutableSequence['curveCalibrationInstrument']) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationInstrumentsMarket') -> None: ...
    def asset_class(self) -> 'asset_class_enum': ...
    def instruments(self) -> Tuple['curveCalibrationInstrument', 'curveCalibrationInstrument']: ...
    def printf(rhs:'curveCalibrationInstrumentsMarket') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationInstrumentsMarket': ...
    def read_from_json(file_name:str) -> 'curveCalibrationInstrumentsMarket': ...
    def static_cast(self) -> 'curveCalibrationInstrumentsMarket': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationInstrumentsMarket') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationInstrumentsMarket') -> None: ...

class curveCalibrationInstrumentsRatesId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'discountCurveId', ccy_base:str) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationInstrumentsRatesId') -> None: ...
    def ccy_base(self) -> str: ...
    def id(self) -> 'discountCurveId': ...
    def printf(rhs:'curveCalibrationInstrumentsRatesId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationInstrumentsRatesId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationInstrumentsRatesId': ...
    def static_cast(self) -> 'curveCalibrationInstrumentsRatesId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationInstrumentsRatesId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationInstrumentsRatesId') -> None: ...

class curveCalibrationTargetStructure(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationTargetStructure') -> None: ...
    def printf(rhs:'curveCalibrationTargetStructure') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationTargetStructure': ...
    def read_from_json(file_name:str) -> 'curveCalibrationTargetStructure': ...
    def static_cast(self) -> 'curveCalibrationTargetStructure': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationTargetStructure') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationTargetStructure'): ...

class curveCalibrationTargets(xsigmamodules.Market.marketData):
    def asset_class(self) -> 'asset_class_enum': ...
    def base_curve(self, forecast_id:'forecastCurveId', rfr:str) -> 'forecastCurveId': ...
    def printf(rhs:'curveCalibrationTargets') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationTargets': ...
    def read_from_json(file_name:str) -> 'curveCalibrationTargets': ...
    def static_cast(self) -> 'curveCalibrationTargets': ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationTargets') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationTargets') -> None: ...

class curveCalibrationTargetsInflationId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'inflationCurveId', ccy_base:str): ...
    @overload
    def __init__(self, __a:'curveCalibrationTargetsInflationId') -> None: ...
    def ccy_base(self) -> str: ...
    def id(self) -> 'inflationCurveId': ...
    def printf(rhs:'curveCalibrationTargetsInflationId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationTargetsInflationId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationTargetsInflationId': ...
    def static_cast(self) -> 'curveCalibrationTargetsInflationId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationTargetsInflationId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationTargetsInflationId') -> None: ...

class curveCalibrationTargetsRatesId(xsigmamodules.Market.marketDataId):
    @overload
    def __init__(self, id:'discountCurveId', ccy_base:str) -> None: ...
    @overload
    def __init__(self, id:'forecastCurveId', ccy_base:str) -> None: ...
    @overload
    def __init__(self, __a:'curveCalibrationTargetsRatesId') -> None: ...
    def ccy_base(self) -> str: ...
    def id(self) -> 'discountCurveId': ...
    def printf(rhs:'curveCalibrationTargetsRatesId') -> str: ...
    def read_from_binary(file_name:str) -> 'curveCalibrationTargetsRatesId': ...
    def read_from_json(file_name:str) -> 'curveCalibrationTargetsRatesId': ...
    def static_cast(self) -> 'curveCalibrationTargetsRatesId': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'curveCalibrationTargetsRatesId') -> None: ...
    def write_to_json(file_name:str, rhs:'curveCalibrationTargetsRatesId') -> None: ...

