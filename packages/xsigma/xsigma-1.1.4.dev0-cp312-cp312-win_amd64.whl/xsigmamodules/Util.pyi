from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core

class accrual_convention_enum(int):
    ADJUSTED:'accrual_convention_enum'
    INVALID:'accrual_convention_enum'
    UNADJUSTED:'accrual_convention_enum'
    UNADJUSTED_FIRST:'accrual_convention_enum'
    UNADJUSTED_FIRST_AND_LAST:'accrual_convention_enum'
    UNADJUSTED_LAST:'accrual_convention_enum'

class business_day_convention_enum(int):
    CDS_IMM_ADJ:'business_day_convention_enum'
    FIRST_BDAY:'business_day_convention_enum'
    FIRST_BUSINESS_DAY:'business_day_convention_enum'
    FIRST_DAY:'business_day_convention_enum'
    FOLLOWING:'business_day_convention_enum'
    FX_FORWARD:'business_day_convention_enum'
    INVALID:'business_day_convention_enum'
    ISRAELI:'business_day_convention_enum'
    KOREAN:'business_day_convention_enum'
    LAST_BDAY:'business_day_convention_enum'
    LAST_BUSINESS_DAY:'business_day_convention_enum'
    LAST_DAY:'business_day_convention_enum'
    MODIFIED_FOLLOWING:'business_day_convention_enum'
    MODIFIED_PRECEDING:'business_day_convention_enum'
    NEXT_THURSDAY:'business_day_convention_enum'
    PRECEDING:'business_day_convention_enum'
    UNADJUSTED:'business_day_convention_enum'

class business_day_imm_enum(int):
    IMM:'business_day_imm_enum'
    IMM_AUD:'business_day_imm_enum'
    IMM_CAD:'business_day_imm_enum'
    IMM_CDS:'business_day_imm_enum'
    IMM_NZD:'business_day_imm_enum'

class contract_output_format(int):
    C_MMM:'contract_output_format'
    C_MMMYY:'contract_output_format'
    C_M_:'contract_output_format'
    C_M_YY:'contract_output_format'
    DATE:'contract_output_format'

class currency_convention_enum(int):
    DOMESTIC:'currency_convention_enum'
    FOREIGN:'currency_convention_enum'

class day_count_convention_enum(int):
    ACT_1230D:'day_count_convention_enum'
    ACT_29:'day_count_convention_enum'
    ACT_360:'day_count_convention_enum'
    ACT_364:'day_count_convention_enum'
    ACT_365:'day_count_convention_enum'
    ACT_3656:'day_count_convention_enum'
    ACT_365_25:'day_count_convention_enum'
    ACT_365_A:'day_count_convention_enum'
    ACT_ACT:'day_count_convention_enum'
    BUS_252:'day_count_convention_enum'
    B_1_1:'day_count_convention_enum'
    B_1_2:'day_count_convention_enum'
    B_1_4:'day_count_convention_enum'
    B_30E_360:'day_count_convention_enum'
    B_30G_360:'day_count_convention_enum'
    B_30U_360:'day_count_convention_enum'
    B_30_360:'day_count_convention_enum'
    B_30_360_1:'day_count_convention_enum'
    FIXED_360:'day_count_convention_enum'
    INVALID:'day_count_convention_enum'
    ISMA:'day_count_convention_enum'
    NL_365:'day_count_convention_enum'

class delta_atm_convention_enum(int):
    FORWARD:'delta_atm_convention_enum'
    SPOT:'delta_atm_convention_enum'
    ZERO_DELTA_STRADDLE:'delta_atm_convention_enum'

class delta_convention_enum(int):
    FORWARD:'delta_convention_enum'
    SPOT:'delta_convention_enum'

class delta_quote_enum(int):
    DOMESTIC_DOMESTIC:'delta_quote_enum'
    DOMESTIC_FOREING:'delta_quote_enum'
    FOREING_DOMESTIC:'delta_quote_enum'
    FOREING_FOREING:'delta_quote_enum'

class frequency_enum(int):
    ANNUAL:'frequency_enum'
    BIMONTHLY:'frequency_enum'
    BIWEEKLY:'frequency_enum'
    DAILY:'frequency_enum'
    FOURMONTHLY:'frequency_enum'
    FOURWEEKLY:'frequency_enum'
    INVALID:'frequency_enum'
    MONTHLY:'frequency_enum'
    QUARTERLY:'frequency_enum'
    SEMI_ANNUAL:'frequency_enum'
    WEEKLY:'frequency_enum'

class future_convention_enum(int):
    B:'future_convention_enum'
    BMF:'future_convention_enum'
    BMF_DOL:'future_convention_enum'
    BUND:'future_convention_enum'
    BUND_OPT:'future_convention_enum'
    BUND_OPT_1W:'future_convention_enum'
    BUND_OPT_2W:'future_convention_enum'
    BUND_OPT_3W:'future_convention_enum'
    BUND_OPT_4W:'future_convention_enum'
    BUND_OPT_5W:'future_convention_enum'
    B_OPT:'future_convention_enum'
    CGB:'future_convention_enum'
    CGB_CFFEX:'future_convention_enum'
    DAP:'future_convention_enum'
    DATEEXPR:'future_convention_enum'
    EOM:'future_convention_enum'
    EOQ:'future_convention_enum'
    EOY:'future_convention_enum'
    ESTR:'future_convention_enum'
    ESTR3M:'future_convention_enum'
    EUR_OPT:'future_convention_enum'
    FFUND:'future_convention_enum'
    GILT:'future_convention_enum'
    HSX:'future_convention_enum'
    IB30D:'future_convention_enum'
    IGB:'future_convention_enum'
    IMM:'future_convention_enum'
    IMM20_CDS_3M:'future_convention_enum'
    IMM20_CDS_6M:'future_convention_enum'
    IMM_20:'future_convention_enum'
    IMM_AUD:'future_convention_enum'
    IMM_AUD_15:'future_convention_enum'
    IMM_CAD:'future_convention_enum'
    IMM_FMG:'future_convention_enum'
    IMM_NZD:'future_convention_enum'
    IMM_TGB:'future_convention_enum'
    IRMC:'future_convention_enum'
    IRMC_CME:'future_convention_enum'
    JGB:'future_convention_enum'
    JGBMini:'future_convention_enum'
    JGB_OPT:'future_convention_enum'
    KTB:'future_convention_enum'
    LAST:'future_convention_enum'
    NONE:'future_convention_enum'
    SGX_FX:'future_convention_enum'
    SGX_FX_ME:'future_convention_enum'
    SGX_SORA:'future_convention_enum'
    SOFR:'future_convention_enum'
    SOFR3M:'future_convention_enum'
    SOM:'future_convention_enum'
    SONIA:'future_convention_enum'
    SONIA3M:'future_convention_enum'
    SOQ:'future_convention_enum'
    STER_OPT:'future_convention_enum'
    SXS5BPI:'future_convention_enum'
    TBILL:'future_convention_enum'
    TONA3M:'future_convention_enum'
    TOTEM:'future_convention_enum'
    UST:'future_convention_enum'
    USTShort:'future_convention_enum'
    UST_OPT:'future_convention_enum'
    UST_OPT_1MO:'future_convention_enum'
    UST_OPT_1W:'future_convention_enum'
    UST_OPT_1WE:'future_convention_enum'
    UST_OPT_2MO:'future_convention_enum'
    UST_OPT_2W:'future_convention_enum'
    UST_OPT_2WE:'future_convention_enum'
    UST_OPT_3MO:'future_convention_enum'
    UST_OPT_3W:'future_convention_enum'
    UST_OPT_3WE:'future_convention_enum'
    UST_OPT_4MO:'future_convention_enum'
    UST_OPT_4W:'future_convention_enum'
    UST_OPT_4WE:'future_convention_enum'
    UST_OPT_5MO:'future_convention_enum'
    UST_OPT_5W:'future_convention_enum'
    UST_OPT_5WE:'future_convention_enum'
    _1FRI:'future_convention_enum'
    _2FRI:'future_convention_enum'
    _2THU:'future_convention_enum'
    _3FRI:'future_convention_enum'
    _3THU:'future_convention_enum'

class future_date_enum(int):
    FDT_EXPIRY:'future_date_enum'
    FDT_FIRST_DELIVERY:'future_date_enum'
    FDT_FIRST_NOTICE:'future_date_enum'
    FDT_FIXING_START_DATE:'future_date_enum'
    FDT_LAST_TRADING:'future_date_enum'

class future_type_enum(int):
    ARITHMETIC_AVERAGE:'future_type_enum'
    COMPOUNDING:'future_type_enum'
    SIMPLE:'future_type_enum'

class implied_volatility_enum(int):
    LOG_NORMAL:'implied_volatility_enum'
    NORMAL:'implied_volatility_enum'
    PARAMETRIC:'implied_volatility_enum'

class index_enum(int):
    BOND:'index_enum'
    BONDBROKERPRICE:'index_enum'
    CMD:'index_enum'
    CMS:'index_enum'
    CMSFB:'index_enum'
    CMT:'index_enum'
    COMPINDEX:'index_enum'
    COUPONBOND:'index_enum'
    CREDIT:'index_enum'
    DV01:'index_enum'
    DYNA:'index_enum'
    DYNAAD:'index_enum'
    ECONDATA:'index_enum'
    EQ:'index_enum'
    FUT:'index_enum'
    FUTADJUST:'index_enum'
    FX:'index_enum'
    IBOR:'index_enum'
    IBORFB:'index_enum'
    INFLATION:'index_enum'
    LIBORFXADJUST:'index_enum'
    MKTTA:'index_enum'
    MUNI:'index_enum'
    MUNIBONDYIELD:'index_enum'
    OISCMS:'index_enum'
    OISFXADJUST:'index_enum'
    RFR:'index_enum'
    SWAPTION:'index_enum'
    TNAP:'index_enum'
    UNDEF:'index_enum'
    ZEROCOUPON:'index_enum'

class iso_date_enum(int):
    ISO8601_DATE:'iso_date_enum'
    ISO8601_DATETIME:'iso_date_enum'
    ISO8601_DATETIME_MILLIS:'iso_date_enum'
    ISO8601_TIME:'iso_date_enum'
    ISO8601_TIME_MILLIS:'iso_date_enum'

class mid_volatility_source_enum(int):
    PREMIUM:'mid_volatility_source_enum'
    VOLATILITY:'mid_volatility_source_enum'

class month_enum(int):
    APRIL:'month_enum'
    AUGUST:'month_enum'
    DECEMBER:'month_enum'
    FEBRUARY:'month_enum'
    INVALID:'month_enum'
    JANUARY:'month_enum'
    JULY:'month_enum'
    JUNE:'month_enum'
    MARCH:'month_enum'
    MAY:'month_enum'
    NOVEMBER:'month_enum'
    OCTOBER:'month_enum'
    SEPTEMBER:'month_enum'

class option_enum(int):
    CALL:'option_enum'
    PRICES:'option_enum'
    PUT:'option_enum'

class option_exercice_enum(int):
    AMERICAN:'option_exercice_enum'
    EUROPEAN:'option_exercice_enum'

class option_output_enum(int):
    DV01:'option_output_enum'
    PAR:'option_output_enum'
    PV:'option_output_enum'

class repo_calibration_enum(int):
    FORWARD_WITH_AVERAGED_REPO:'repo_calibration_enum'
    FORWARD_WITH_TRANSFORMED_REPO:'repo_calibration_enum'
    IMPLIED_FORWARD:'repo_calibration_enum'
    INPUT_FORWARD:'repo_calibration_enum'
    INPUT_FORWARD_ANCHORING:'repo_calibration_enum'

class repo_extrapolation_enum(int):
    FLAT_SPREAD:'repo_extrapolation_enum'
    NO_SPREAD:'repo_extrapolation_enum'

class schedule_dates_enum(int): ...

class strangle_convention_enum(int):
    MARKET:'strangle_convention_enum'
    THEORETICAL:'strangle_convention_enum'

class stub_period_enum(int):
    LONG:'stub_period_enum'
    SHORT:'stub_period_enum'

class stub_placement_enum(int):
    BACK:'stub_placement_enum'
    FRONT:'stub_placement_enum'

class tenor_unit(int):
    BUSINESS_DAY:'tenor_unit'
    DAY:'tenor_unit'
    INVALID:'tenor_unit'
    MONTH:'tenor_unit'
    WEEK:'tenor_unit'
    YEAR:'tenor_unit'

class week_day_enum(int):
    FRIDAY:'week_day_enum'
    INVALID:'week_day_enum'
    MONDAY:'week_day_enum'
    SATURDAY:'week_day_enum'
    SUNDAY:'week_day_enum'
    THURSDAY:'week_day_enum'
    TUESDAY:'week_day_enum'
    WEDNESDAY:'week_day_enum'

class weekend_type_enum(int):
    FRIDAY_SATURDAY:'weekend_type_enum'
    FRIDAY_SATURDAY_SUNDAY:'weekend_type_enum'
    INVALID:'weekend_type_enum'
    NONE:'weekend_type_enum'
    SATURDAY:'weekend_type_enum'
    SATURDAY_SUNDAY:'weekend_type_enum'
    SUNDAY:'weekend_type_enum'
    THURSDAY_FRIDAY:'weekend_type_enum'
    THURSDAY_FRIDAY_SATURDAY:'weekend_type_enum'
    THURSDAY_FRIDAY_SATURDAY_SUNDAY:'weekend_type_enum'
    THURSDAY_FRIDAY_SUNDAY:'weekend_type_enum'

class bachelier(object):
    def delta(forward:float, strike:float, expiry:float, volatility:float, numeraire:float, is_call:float) -> float: ...
    def gamma(forward:float, strike:float, expiry:float, volatility:float, numeraire:float) -> float: ...
    def implied_volatility(forward:float, strike:float, expiry:float, price:float, numeraire:float, is_call:float) -> float: ...
    def price(forward:float, strike:float, expiry:float, volatility:float, numerair:float, is_call:float) -> float: ...
    def static_cast(self) -> 'bachelier': ...
    def vega(forward:float, strike:float, expiry:float, volatility:float, numeraire:float) -> float: ...

class blackScholes(object):
    def delta(forward:float, strike:float, expiry:float, volatility:float, is_call:float) -> float: ...
    def density(forward:float, strike:float, expiry:float, volatility:float, dvol_dK:float, d2vol_dK2:float) -> float: ...
    def gamma(forward:float, strike:float, expiry:float, volatility:float) -> float: ...
    def implied_volatility(forward:float, strike:float, expiry:float, price:float, numeraire:float, call_or_put:float, tolerance:float=..., max_iteration:int=20) -> float: ...
    def price(forward:float, strike:float, expiry:float, volatility:float, numeraire:float, is_call:float) -> float: ...
    def probability(forward:float, strike:float, expiry:float, volatility:float, dvol_dK:float) -> float: ...
    def static_cast(self) -> 'blackScholes': ...
    def strike_from_delta(delta:float, forward:float, expiry:float, volatility:float, is_call:float, type:'delta_quote_enum') -> float: ...
    def vega(forward:float, strike:float, expiry:float, volatility:float): ...

class businessDayConvention(object):
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def advance(self, d:'datetime', t:str, end_of_month:bool=False) -> 'datetime': ...
    def static_cast(self) -> 'businessDayConvention': ...

class businessDayConventionFromConvention(businessDayConvention):
    @overload
    def __init__(self, convention:'business_day_convention_enum'=..., holidays:'calendar'=...) -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionFromConvention') -> None: ...
    def adjust(self, d:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionFromConvention') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionFromConvention': ...
    def read_from_json(file_name:str) -> 'businessDayConventionFromConvention': ...
    def static_cast(self) -> 'businessDayConventionFromConvention': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionFromConvention') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionFromConvention') -> None: ...

class businessDayConventionWeekday(businessDayConvention):
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def static_cast(self) -> 'businessDayConventionWeekday': ...

class businessDayConventionRollAfterWeekDay(businessDayConventionWeekday):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, month_day:int, weekday:'week_day_enum') -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollAfterWeekDay') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollAfterWeekDay') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollAfterWeekDay': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollAfterWeekDay': ...
    def static_cast(self) -> 'businessDayConventionRollAfterWeekDay': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollAfterWeekDay') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollAfterWeekDay') -> None: ...

class businessDayConventionRollBeforeWeekDay(businessDayConventionWeekday):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, month_day:int, weekday:'week_day_enum') -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollBeforeWeekDay') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollBeforeWeekDay') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollBeforeWeekDay': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollBeforeWeekDay': ...
    def static_cast(self) -> 'businessDayConventionRollBeforeWeekDay': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollBeforeWeekDay') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollBeforeWeekDay') -> None: ...

class businessDayConventionRollDay(businessDayConvention):
    @overload
    def __init__(self, roll_day:int, ignore_leap_years:bool) -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollDay') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollDay') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollDay': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollDay': ...
    def static_cast(self) -> 'businessDayConventionRollDay': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollDay') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollDay') -> None: ...

class businessDayConventionRollLastWeekDay(businessDayConventionWeekday):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, weekday:'week_day_enum') -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollLastWeekDay') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollLastWeekDay') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollLastWeekDay': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollLastWeekDay': ...
    def static_cast(self) -> 'businessDayConventionRollLastWeekDay': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollLastWeekDay') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollLastWeekDay') -> None: ...

class businessDayConventionRollNthWeekday(businessDayConventionWeekday):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, n:int, weekday:'week_day_enum') -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollNthWeekday') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollNthWeekday') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollNthWeekday': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollNthWeekday': ...
    def static_cast(self) -> 'businessDayConventionRollNthWeekday': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollNthWeekday') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollNthWeekday') -> None: ...

class businessDayConventionRollSameWeekDay(businessDayConventionWeekday):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, weekday:'week_day_enum') -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionRollSameWeekDay') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionRollSameWeekDay') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionRollSameWeekDay': ...
    def read_from_json(file_name:str) -> 'businessDayConventionRollSameWeekDay': ...
    def static_cast(self) -> 'businessDayConventionRollSameWeekDay': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionRollSameWeekDay') -> None: ...
    def write_to_json(file_name:str, rhs:'businessDayConventionRollSameWeekDay') -> None: ...

class businessDayConventionSequence(businessDayConvention):
    @overload
    def __init__(self, adjustments:MutableSequence['businessDayConvention']=...) -> None: ...
    @overload
    def __init__(self, __a:'businessDayConventionSequence') -> None: ...
    def adjust(self, base_date:'datetime') -> 'datetime': ...
    def printf(rhs:'businessDayConventionSequence') -> str: ...
    def read_from_binary(file_name:str) -> 'businessDayConventionSequence': ...
    def read_from_json(file_name:str) -> 'businessDayConventionSequence': ...
    def static_cast(self) -> 'businessDayConventionSequence': ...
    def write_to_binary(file_name:str, rhs:'businessDayConventionSequence'): ...
    def write_to_json(file_name:str, rhs:'businessDayConventionSequence') -> None: ...

class objectData(object):
    def static_cast(self) -> 'objectData': ...

class configData(objectData):
    def static_cast(self) -> 'configData': ...

class calendar(configData):
    @overload
    def __init__(self, weekend_type:'weekend_type_enum'=..., dates:Sequence['datetime'] =...) -> None: ...
    @overload
    def __init__(self, cal1:'calendar', cal2:'calendar') -> None: ...
    @overload
    def __init__(self, __a:'calendar') -> None: ...
    def add_business_days(self, from_:'datetime', number_of_business_days:int) -> 'datetime': ...
    def has_holidays(self) -> bool: ...
    def has_weekends(self) -> bool: ...
    def is_business_day(self, date:'datetime') -> bool: ...
    def is_leap_year(year:int) -> bool: ...
    def is_weekend(self, date:'datetime') -> bool: ...
    def next_business_day(self, date:'datetime') -> 'datetime': ...
    def number_of_business_days(self, from_date:'datetime', to_date:'datetime') -> int: ...
    def number_of_business_days_in_year(self, year:int) -> int: ...
    def previous_business_day(self, date:'datetime') -> 'datetime': ...
    def printf(rhs:'calendar') -> str: ...
    def read_from_binary(file_name:str) -> 'calendar': ...
    def read_from_json(file_name:str) -> 'calendar': ...
    def static_cast(self) -> 'calendar': ...
    def write_to_binary(file_name:str, rhs:'calendar') -> None: ...
    def write_to_json(file_name:str, rhs:'calendar') -> None: ...

class currency(object):
    @overload
    def __init__(self, ccy:str) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'currency') -> None: ...
    def ccy(self) -> str: ...
    def printf(rhs:'currency') -> str: ...
    def read_from_binary(file_name:str) -> 'currency': ...
    def read_from_json(file_name:str) -> 'currency': ...
    def static_cast(self) -> 'currency': ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:'currency') -> None: ...
    def write_to_json(file_name:str, rhs:'currency') -> None: ...

class datetime(object):
    @overload
    def __init__(self, data:float=...) -> None: ...
    @overload
    def __init__(self, __a:'datetime') -> None: ...
    def as_float(self) -> float: ...
    def day_fraction(self) -> float: ...
    def invalid(self) -> bool: ...
    def next_or_same(self, wd:'week_day_enum') -> 'datetime': ...
    def previous_or_same(self, wd:'week_day_enum') -> 'datetime': ...
    def serial(self) -> int: ...
    def static_cast(self) -> 'datetime': ...
    def to_string(self) -> str: ...
    def week_day(self) -> 'week_day_enum': ...

class datetimeHelper(object):
    def add_tenor(d:'datetime', t:str, multiplier:int=1) -> 'datetime': ...
    def credit_imm_date(d:'datetime', months_in_period:int=3, day_of_month:int=20) -> 'datetime': ...
    def is_date(str:str) -> bool: ...
    def is_leap_year(year:int) -> bool: ...
    def is_same_day(d:int, roll_day:int) -> bool: ...
    def is_weekend(date:'datetime', weekend_type:'weekend_type_enum') -> bool: ...
    def month_length(month:int, leap_year:bool) -> int: ...
    def nearst_imm_dates(start_date:'datetime', months_in_period:int=3, day_of_week:'week_day_enum'=..., n:int=3, is_week:bool=True) -> 'datetime': ...
    def next_imm_date(start_date:'datetime', months_in_period:int=3, day_of_week:'week_day_enum'=..., n:int=3, is_week:bool=True) -> 'datetime': ...
    def static_cast(self) -> 'datetimeHelper': ...

class dayCountConvention(object):
    @overload
    def __init__(self, type:'day_count_convention_enum'=..., holiday_list:'calendar'=...) -> None: ...
    @overload
    def __init__(self, __a:'dayCountConvention') -> None: ...
    def fraction(self, start:'datetime', end:'datetime') -> float: ...
    def holiday_list(self) -> 'calendar': ...
    def printf(rhs:'dayCountConvention') -> str: ...
    def read_from_binary(file_name:str) -> 'dayCountConvention': ...
    def read_from_json(file_name:str) -> 'dayCountConvention': ...
    def static_cast(self) -> 'dayCountConvention': ...
    def write_to_binary(file_name:str, rhs:'dayCountConvention') -> None: ...
    def write_to_json(file_name:str, rhs:'dayCountConvention') -> None: ...

class events(object):
    @overload
    def __init__(self, dates:MutableSequence['datetime'], weights:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'events') -> None: ...
    def add_event(self, date:'datetime', weight:float) -> None: ...
    def clear(self) -> None: ...
    def empty(self) -> bool: ...
    def event_dates(self) -> Tuple['datetime', 'datetime']: ...
    def event_weights(self) -> Tuple[float, float]: ...
    def printf(rhs:'events') -> str: ...
    def read_from_binary(file_name:str) -> 'events': ...
    def read_from_json(file_name:str) -> 'events': ...
    def remove_event(self, index:int) -> None: ...
    def reserve(self, capacity:int) -> None: ...
    def shrink_to_fit(self) -> None: ...
    def size(self) -> int: ...
    def sort_by_date(self) -> None: ...
    def static_cast(self) -> 'events': ...
    def write_to_binary(file_name:str, rhs:'events') -> None: ...
    def write_to_json(file_name:str, rhs:'events') -> None: ...

class futureConvention(object):
    @overload
    def __init__(self, roll_conv:'business_day_convention_enum', ref_info_date:'datetime') -> None: ...
    @overload
    def __init__(self, __a:'futureConvention') -> None: ...
    @overload
    def expiry(self, ref_date:'datetime', period_months:int, date_type:'future_date_enum'=...) -> 'datetime': ...
    @overload
    def expiry(self, ref_date:'datetime', period_label:str, date_type:'future_date_enum') -> 'datetime': ...
    def holiday_code(conv:'future_convention_enum') -> str: ...
    def static_cast(self) -> 'futureConvention': ...

class holidayGenerators(object):
    def create_calendar(calendar_name:str, from_year:int, to_year:int) -> 'calendar': ...
    def holidays_list(calendar_name:str, from_year:int, to_year:int) -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'holidayGenerators': ...

class key(object):
    @overload
    def __init__(self, name:str) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'key') -> None: ...
    @overload
    def hash(self) -> int: ...
    @overload
    def hash(a:str, b:int) -> int: ...
    def static_cast(self) -> 'key': ...
    def to_string(self) -> str: ...

class sabrAnalytics(object):
    def alpha(sigma_atm:float, forward:float, T:float, beta:float, nu:float, rho:float) -> float: ...
    def build_strike_grid_uniform(strikes:MutableSequence[float], j0:int, forward:float, N:int, min_strike:float, max_strike:float) -> None: ...
    def build_strike_transformed_grid(output:MutableSequence[float], j0:int, h:float, alpha:float, rho:float, vol_of_vol:float, N:int, z_min:float, z_max:float) -> None: ...
    def invers_x_sabr(rho:float, x:float) -> float: ...
    def normal_volatility(forward:float, strike:float, expiryTime:float, alpha:float, beta:float, nu:float, rho:float) -> float: ...
    def static_cast(self) -> 'sabrAnalytics': ...
    def x_sabr(rho:float, xi:float) -> float: ...

class schedule(object):
    @overload
    def __init__(self, accrual_dates:MutableSequence['datetime'], payment_dates:MutableSequence['datetime'], fixing_dates:MutableSequence['datetime'], forcast_start_dates:MutableSequence['datetime'], forcast_end_dates:MutableSequence['datetime'], dcf:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self, parameters:'scheduleParameters', flag:int) -> None: ...
    @overload
    def __init__(self, __a:'schedule') -> None: ...
    def accrual_dates(self) -> Tuple['datetime', 'datetime']: ...
    def day_count_fractions(self) -> Tuple[float, float]: ...
    def fixing_dates(self) -> Tuple['datetime', 'datetime']: ...
    def forcast_end_dates(self) -> Tuple['datetime', 'datetime']: ...
    def forcast_start_dates(self) -> Tuple['datetime', 'datetime']: ...
    @overload
    def generate_unadjusted_grid(output:MutableSequence['datetime'], from_:'datetime', to:'datetime', period:str) -> None: ...
    @overload
    def generate_unadjusted_grid(output:MutableSequence['datetime'], from_:'datetime', to:'datetime', period:'business_day_imm_enum') -> None: ...
    def payment_dates(self) -> Tuple['datetime', 'datetime']: ...
    def printf(rhs:'schedule') -> str: ...
    def read_from_binary(file_name:str) -> 'schedule': ...
    def read_from_json(file_name:str) -> 'schedule': ...
    def static_cast(self) -> 'schedule': ...
    def write_to_binary(file_name:str, rhs:'schedule') -> None: ...
    def write_to_json(file_name:str, rhs:'schedule') -> None: ...

class scheduleParameters(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'scheduleParameters') -> None: ...
    def holiday(self, holiday_list:'calendar') -> 'calendar': ...
    def printf(rhs:'scheduleParameters') -> str: ...
    def read_from_binary(file_name:str) -> 'scheduleParameters': ...
    def read_from_json(file_name:str) -> 'scheduleParameters': ...
    def roll_convention(self, convention:'business_day_convention_enum') -> 'business_day_convention_enum': ...
    def static_cast(self) -> 'scheduleParameters': ...
    def write_to_binary(file_name:str, rhs:'scheduleParameters') -> None: ...
    def write_to_json(file_name:str, rhs:'scheduleParameters') -> None: ...

class scheduleParametersBuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'scheduleParametersBuilder') -> None: ...
    def build(self) -> 'scheduleParameters': ...
    def static_cast(self) -> 'scheduleParametersBuilder': ...
    def with_accrual_convention(self, convention:'accrual_convention_enum'): ...
    def with_business_day_convention(self, convention:'business_day_convention_enum') -> 'scheduleParametersBuilder': ...
    def with_day_count_basis(self, basis:'day_count_convention_enum') -> 'scheduleParametersBuilder': ...
    def with_day_of_week(self, day:'week_day_enum') -> 'scheduleParametersBuilder': ...
    def with_effective_date(self, date:'datetime') -> 'scheduleParametersBuilder': ...
    def with_end_roll_date(self, date:'datetime') -> 'scheduleParametersBuilder': ...
    def with_first_roll_date(self, date:'datetime') -> 'scheduleParametersBuilder': ...
    def with_fixing_days_adjustment(self, days:int) -> 'scheduleParametersBuilder': ...
    def with_fixing_holiday_list(self, holidays:'calendar') -> 'scheduleParametersBuilder': ...
    def with_forecast_frequency(self, freq:str) -> 'scheduleParametersBuilder': ...
    def with_forecast_holiday_list(self, holidays:'calendar') -> 'scheduleParametersBuilder': ...
    def with_forecast_roll_convention(self, convention:'business_day_convention_enum') -> 'scheduleParametersBuilder': ...
    def with_forecast_start_roll_convention(self, convention:'business_day_convention_enum') -> 'scheduleParametersBuilder': ...
    @overload
    def with_frequency(self, freq:'frequency_enum') -> 'scheduleParametersBuilder': ...
    @overload
    def with_frequency(self, freq:str) -> 'scheduleParametersBuilder': ...
    def with_holiday_list(self, holidays:'calendar') -> 'scheduleParametersBuilder': ...
    def with_ignore_leap_years(self, ignore:bool=True) -> 'scheduleParametersBuilder': ...
    def with_imm_type(self, imm:'business_day_imm_enum') -> 'scheduleParametersBuilder': ...
    def with_maturity_date(self, date:'datetime') -> 'scheduleParametersBuilder': ...
    def with_pay_in_advance(self, advance:bool=True) -> 'scheduleParametersBuilder': ...
    def with_payment_days_adjustment(self, days:int) -> 'scheduleParametersBuilder': ...
    def with_payment_holiday_list(self, holidays:'calendar') -> 'scheduleParametersBuilder': ...
    def with_payment_roll_convention(self, convention:'business_day_convention_enum') -> 'scheduleParametersBuilder': ...
    def with_rolling_day(self, day:int) -> 'scheduleParametersBuilder': ...
    def with_short_tenor_roll_convention(self, convention:'business_day_convention_enum') -> 'scheduleParametersBuilder': ...
    def with_stub_info(self, stub:'stub') -> 'scheduleParametersBuilder': ...
    def with_use_eom_rule(self, use_eom:bool=True) -> 'scheduleParametersBuilder': ...
    def with_use_imm_rule(self, use_imm:bool=True) -> 'scheduleParametersBuilder': ...
    def with_week_of_month(self, week:int) -> 'scheduleParametersBuilder': ...

class sigmaVolatilityInspired(object):
    @overload
    def __init__(self, fwd:float, atm_sigma:float, skew:float, smil:float) -> None: ...
    @overload
    def __init__(self, __a:'sigmaVolatilityInspired') -> None: ...
    def calibrate(self, market_vols:'vector_IdE', strikes:'vector_IdE') -> 'sigmaVolatilityInspired': ...
    def static_cast(self) -> 'sigmaVolatilityInspired': ...
    @overload
    def svi(self, strike:float) -> float: ...
    @overload
    def svi(self, vols:'vector_IdE', strikes:'vector_IdE') -> None: ...
    def svi_with_sensitivities(self, strikes:'vector_IdE', vols:'vector_IdE', atm_sensitivity:'vector_IdE', skew_sensitivity:'vector_IdE', smile_sensitivity:'vector_IdE', strike_sensitivity:'vector_IdE', forward_sensitivity:'vector_IdE', atm2_sensitivity:'vector_IdE', forward2_sensitivity:'vector_IdE', strike2_sensitivity:'vector_IdE') -> None: ...

class stub(object):
    @overload
    def __init__(self, placement:'stub_placement_enum', period:'stub_period_enum') -> None: ...
    @overload
    def __init__(self, placement:'stub_placement_enum', minimum_period:str) -> None: ...
    @overload
    def __init__(self, __a:'stub') -> None: ...
    def minimum_period(self) -> str: ...
    def minimum_tenor(self, frequency:str) -> str: ...
    def period(self) -> 'stub_period_enum': ...
    def placement(self) -> 'stub_placement_enum': ...
    def static_cast(self) -> 'stub': ...

class surfaceTermStructure(object):
    @overload
    def __init__(self, x:MutableSequence['datetime'], y:MutableSequence['datetime'], z:'matrix_IdE') -> None: ...
    @overload
    def __init__(self, __a:'surfaceTermStructure') -> None: ...
    def at(self, t1:'datetime', t2:'datetime') -> float: ...
    def printf(rhs:'surfaceTermStructure') -> str: ...
    def read_from_binary(file_name:str) -> 'surfaceTermStructure': ...
    def read_from_json(file_name:str) -> 'surfaceTermStructure': ...
    def static_cast(self) -> 'surfaceTermStructure': ...
    def write_to_binary(file_name:str, rhs:'surfaceTermStructure') -> None: ...
    def write_to_json(file_name:str, rhs:'surfaceTermStructure') -> None: ...

class tenor(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, n:int, type:'tenor_unit') -> None: ...
    @overload
    def __init__(self, t:str) -> None: ...
    @overload
    def __init__(self, n:int, freq:'frequency_enum') -> None: ...
    @overload
    def __init__(self, freq:'frequency_enum') -> None: ...
    @overload
    def __init__(self, __a:'tenor') -> None: ...
    def compare(self, rhs:str) -> int: ...
    def empty(self) -> bool: ...
    def has_same_units(self, rhs:str) -> bool: ...
    def is_month_based_interval(self) -> bool: ...
    def n(self) -> int: ...
    def static_cast(self) -> 'tenor': ...
    def to_string(self) -> str: ...
    def unit(self) -> 'tenor_unit': ...

class yearMonthDay(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, d:'datetime') -> None: ...
    @overload
    def __init__(self, y:int, m:int, d:int) -> None: ...
    @overload
    def __init__(self, str:str, ref_date:'datetime'=...) -> None: ...
    @overload
    def __init__(self, __a:'yearMonthDay') -> None: ...
    def Day(self) -> int: ...
    def Month(self) -> int: ...
    def Year(self) -> int: ...
    def is_end_of_month(self, ignore_leap_years:bool=False) -> bool: ...
    def month_length(self, ignore_leap_years:bool=False) -> int: ...
    def normalize(self) -> None: ...
    def static_cast(self) -> 'yearMonthDay': ...
    def to_datetime(self) -> 'datetime': ...
    @overload
    def to_string(self, format:'iso_date_enum'=...) -> str: ...
    @overload
    def to_string(self, format:str) -> str: ...
    def week_day(self) -> 'week_day_enum': ...

