from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core
import xsigmamodules.Market

class asset_class_enum(int):
    COMMODITY:'asset_class_enum'
    CREDIT:'asset_class_enum'
    EQUITY:'asset_class_enum'
    FX:'asset_class_enum'
    INFLATION:'asset_class_enum'
    INVALID:'asset_class_enum'
    RATES:'asset_class_enum'

class asset_type_enum(int):
    CROSSCURRENCYBASISSWAP:'asset_type_enum'
    CROSSCURRENCYSWAP:'asset_type_enum'
    DEPOSIT:'asset_type_enum'
    FRA:'asset_type_enum'
    FUTURE:'asset_type_enum'
    FXFORWARD:'asset_type_enum'
    INFLATIONANNUITYSWAP:'asset_type_enum'
    INFLATIONBONDSPREAD:'asset_type_enum'
    INFLATIONFUTURE:'asset_type_enum'
    INFLATIONREALRATESWAP:'asset_type_enum'
    INFLATIONYOYSWAP:'asset_type_enum'
    INFLATIONZEROCOUPONSWAP:'asset_type_enum'
    INVALID:'asset_type_enum'
    IRBASISSWAP:'asset_type_enum'
    IRFLY:'asset_type_enum'
    IRSPREAD:'asset_type_enum'
    IRSWAP:'asset_type_enum'
    IRTERMDEPOSIT:'asset_type_enum'
    MTMCROSSCURRENCYBASISSWAP:'asset_type_enum'

class buy_sell_enum(int):
    BUY:'buy_sell_enum'
    INVALID:'buy_sell_enum'
    SELL:'buy_sell_enum'

class swap_clearing_house_enum(int):
    ASX:'swap_clearing_house_enum'
    BMF:'swap_clearing_house_enum'
    CCIL:'swap_clearing_house_enum'
    CC_G:'swap_clearing_house_enum'
    CDCC:'swap_clearing_house_enum'
    CME:'swap_clearing_house_enum'
    DTCC:'swap_clearing_house_enum'
    ECC:'swap_clearing_house_enum'
    EUREX:'swap_clearing_house_enum'
    HKEX:'swap_clearing_house_enum'
    ICE:'swap_clearing_house_enum'
    INVALID:'swap_clearing_house_enum'
    JSCC:'swap_clearing_house_enum'
    KDPW:'swap_clearing_house_enum'
    KRX:'swap_clearing_house_enum'
    LCH:'swap_clearing_house_enum'
    NASDAQ:'swap_clearing_house_enum'
    OCC:'swap_clearing_house_enum'
    OME:'swap_clearing_house_enum'
    SGX:'swap_clearing_house_enum'
    SHCH:'swap_clearing_house_enum'
    TAIFEX:'swap_clearing_house_enum'

class FRA(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'FRA') -> None: ...
    def asset_class(self) -> 'asset_class_enum': ...
    def business_day_convention(self) -> 'businessDayConvention': ...
    def buy_sell_enum(self) -> 'buy_sell_enum': ...
    def calendar(self) -> 'calendar': ...
    def clearing_house(self) -> 'swap_clearing_house_enum': ...
    def clearing_legally_binding(self) -> float: ...
    def convention(self) -> 'dayCountConvention': ...
    def fee(self) -> float: ...
    def fee_currency(self) -> str: ...
    def fee_payment_date(self) -> 'datetime': ...
    def fixed_rate(self) -> float: ...
    def frequency(self) -> str: ...
    def name(self) -> str: ...
    def notional_amount(self) -> float: ...
    def notional_currency(self) -> str: ...
    def payment_delay(self) -> str: ...
    def rate_option(self) -> str: ...
    def spread(self) -> float: ...
    def static_cast(self) -> 'FRA': ...
    def type(self) -> 'asset_type_enum': ...

class FRABuilder(object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a:'FRABuilder') -> None: ...
    def static_cast(self) -> 'FRABuilder': ...

class bermudanStrikesLifeCycle(xsigmamodules.Market.lifeCycleData):
    @overload
    def __init__(self, n:int, strike:float) -> None: ...
    @overload
    def __init__(self, __a:'bermudanStrikesLifeCycle') -> None: ...
    @overload
    def excution_boundary_strikes(self, index:int) -> float: ...
    @overload
    def excution_boundary_strikes(self) -> Tuple[float, float]: ...
    def static_cast(self) -> 'bermudanStrikesLifeCycle': ...

class calibrationIrSpread(object):
    @overload
    def __init__(self, expiry:'datetime', long_maturity:'datetime', short_maturity:'datetime', fixed_rate:float, frequency:str, convention:'dayCountConvention', long_weight:float=1., short_weight:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'calibrationIrSpread') -> None: ...
    def effective_date(self) -> 'datetime': ...
    def hessian(self, output:'matrix_IdE', price_aad:float, integral_decays:'matrix_IdE', dfs:Sequence[float]) -> None: ...
    def long_swap(self) -> 'calibrationIrSwap': ...
    def long_weight(self) -> float: ...
    def price(self, strike:float, dfs:Sequence[float]) -> float: ...
    def short_swap(self) -> 'calibrationIrSwap': ...
    def short_weight(self) -> float: ...
    def static_cast(self) -> 'calibrationIrSpread': ...

class calibrationIrSwap(object):
    @overload
    def __init__(self, effective_date:'datetime', maturity:'datetime', fixed_rate:float, frequency:str, convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'calibrationIrSwap') -> None: ...
    def annuity(self, dfs:Sequence[float]) -> float: ...
    def effective_date(self) -> 'datetime': ...
    def fixed_leg_instrument(self) -> 'fixedLeg': ...
    def float_leg_instrument(self) -> 'floatLeg': ...
    def gradient(output:'vector_IdE', integral_decays:'matrix_IdE', log_dfs_aad:Sequence[float]) -> None: ...
    def hessian(self, output:'matrix_IdE', value_aad:float, G:'matrix_IdE', dfs:Sequence[float]) -> None: ...
    def maturity(self) -> 'datetime': ...
    def price(self, fixed_rate:float, dfs:Sequence[float]) -> float: ...
    def static_cast(self) -> 'calibrationIrSwap': ...
    def swap_rate(self, dfs:Sequence[float]) -> float: ...
    def update_dates_indexing(self, all_dates:Sequence['datetime']) -> None: ...

class priceable(object):
    def discount_id(self) -> 'anyId': ...
    def effective_date(self) -> 'datetime': ...
    def maturity(self) -> 'datetime': ...
    def static_cast(self) -> 'priceable': ...

class crossCurrencyBasisSwap(priceable):
    @overload
    def __init__(self, base_discount_id:'discountCurveId', term_discount_id:'discountCurveId', base_forecast_id:'forecastCurveId', term_forecast_id:'forecastCurveId', fx_id:'fxSpotId', effective_date:'datetime', maturity_date:'datetime', base_float_leg:'floatLeg', base_fixed_leg:'fixedLeg', term_float_leg:'floatLeg', basis_spread:float=0.) -> None: ...
    @overload
    def __init__(self, __a:'crossCurrencyBasisSwap') -> None: ...
    def static_cast(self) -> 'crossCurrencyBasisSwap': ...

class crossCurrencySwap(priceable):
    @overload
    def __init__(self, base_discount_id:'discountCurveId', term_discount_id:'discountCurveId', term_forecast_id:'forecastCurveId', fx_id:'fxSpotId', effective_date:'datetime', maturity_date:'datetime', base_fixed_leg:'fixedLeg', term_float_leg:'floatLeg', fixed_rate:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'crossCurrencySwap') -> None: ...
    def static_cast(self) -> 'crossCurrencySwap': ...

class deposit(priceable):
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', valuation_date:'datetime', period:str, holiday_list:'calendar', config:'swapDefaultConventionConfig') -> None: ...
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', effective_date:'datetime', payment_date:'datetime') -> None: ...
    @overload
    def __init__(self, __a:'deposit') -> None: ...
    def static_cast(self) -> 'deposit': ...

class leg(object):
    def day_count_fractions(self) -> Tuple[float, float]: ...
    def fixing_dates(self) -> Tuple['datetime', 'datetime']: ...
    def forcast_end_dates(self) -> Tuple['datetime', 'datetime']: ...
    def forcast_start_dates(self) -> Tuple['datetime', 'datetime']: ...
    def hash_forecast_dates(self) -> Tuple[int, int]: ...
    def hash_payment_dates(self) -> Tuple[int, int]: ...
    def payment_dates(self) -> Tuple['datetime', 'datetime']: ...
    def static_cast(self) -> 'leg': ...

class fixedLeg(leg):
    @overload
    def __init__(self, config:'scheduleParameters') -> None: ...
    @overload
    def __init__(self, payment_dates:MutableSequence['datetime'], dcfs:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self, __a:'fixedLeg') -> None: ...
    def printf(rhs:'fixedLeg') -> str: ...
    def read_from_binary(file_name:str) -> 'fixedLeg': ...
    def read_from_json(file_name:str) -> 'fixedLeg': ...
    def static_cast(self) -> 'fixedLeg': ...
    def write_to_binary(file_name:str, rhs:'fixedLeg') -> None: ...
    def write_to_json(file_name:str, rhs:'fixedLeg') -> None: ...

class fixedLegWithLag(leg):
    @overload
    def __init__(self, config:'scheduleParameters', observation_lag:str, use_day_count_fraction:bool) -> None: ...
    @overload
    def __init__(self, payment_dates:MutableSequence['datetime'], dcfs:MutableSequence[float], observation_lag:str, use_day_count_fraction:bool) -> None: ...
    @overload
    def __init__(self, __a:'fixedLegWithLag') -> None: ...
    def hash_payment_lag_dates(self) -> Tuple[int, int]: ...
    def observation_lag(self) -> str: ...
    def printf(rhs:'fixedLegWithLag') -> str: ...
    def read_from_binary(file_name:str) -> 'fixedLegWithLag': ...
    def read_from_json(file_name:str) -> 'fixedLegWithLag': ...
    def static_cast(self) -> 'fixedLegWithLag': ...
    def write_to_binary(file_name:str, rhs:'fixedLegWithLag') -> None: ...
    def write_to_json(file_name:str, rhs:'fixedLegWithLag') -> None: ...

class floatLeg(leg):
    @overload
    def __init__(self, fixing_dates:MutableSequence['datetime'], start_dates:MutableSequence['datetime'], end_dates:MutableSequence['datetime'], payment_dates:MutableSequence['datetime'], dcfs:MutableSequence[float]) -> None: ...
    @overload
    def __init__(self, config:'scheduleParameters') -> None: ...
    @overload
    def __init__(self, __a:'floatLeg') -> None: ...
    def printf(rhs:'floatLeg') -> str: ...
    def read_from_binary(file_name:str) -> 'floatLeg': ...
    def read_from_json(file_name:str) -> 'floatLeg': ...
    def static_cast(self) -> 'floatLeg': ...
    def write_to_binary(file_name:str, rhs:'floatLeg') -> None: ...
    def write_to_json(file_name:str, rhs:'floatLeg') -> None: ...

class future(priceable):
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', valuation_date:'datetime', period:str, holiday_list:'calendar', config:'futureDefaultConventionConfig') -> None: ...
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', effective_date:'datetime', payment_date:'datetime') -> None: ...
    @overload
    def __init__(self, __a:'future') -> None: ...
    def printf(rhs:'future') -> str: ...
    def read_from_binary(file_name:str) -> 'future': ...
    def read_from_json(file_name:str) -> 'future': ...
    def static_cast(self) -> 'future': ...
    def write_to_binary(file_name:str, rhs:'future') -> None: ...
    def write_to_json(file_name:str, rhs:'future') -> None: ...

class fxForward(priceable):
    @overload
    def __init__(self, base_curve_id:'discountCurveId', term_curve_id:'discountCurveId', fx_id:'fxSpotId', effective_date:'datetime', maturity:'datetime', point_size:float=1.0): ...
    @overload
    def __init__(self, __a:'fxForward') -> None: ...
    def printf(rhs:'fxForward') -> str: ...
    def read_from_binary(file_name:str) -> 'fxForward': ...
    def read_from_json(file_name:str) -> 'fxForward': ...
    def static_cast(self) -> 'fxForward': ...
    def write_to_binary(file_name:str, rhs:'fxForward') -> None: ...
    def write_to_json(file_name:str, rhs:'fxForward') -> None: ...

class inflationPriceable(priceable):
    def lag(self) -> str: ...
    def static_cast(self) -> 'inflationPriceable': ...

class inflationBond(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', payment_date:'datetime', discount:'discountCurveId', index:'inflationCurveId', inflation_leg:'fixedLegWithLag', fixed_coupon:float, redemption_valueg:float) -> None: ...
    @overload
    def __init__(self, __a:'inflationBond') -> None: ...
    def printf(rhs:'inflationBond') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationBond': ...
    def read_from_json(file_name:str) -> 'inflationBond': ...
    def static_cast(self) -> 'inflationBond': ...
    def write_to_binary(file_name:str, rhs:'inflationBond') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationBond') -> None: ...

class inflationBondSpread(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', payment_date:'datetime', discount:'discountCurveId', index:'inflationCurveId', fixed_leg_with_lag:'fixedLegWithLag', observation_lag:str, fixed_coupon:float, spread:float=0.) -> None: ...
    @overload
    def __init__(self, __a:'inflationBondSpread') -> None: ...
    def printf(rhs:'inflationBondSpread') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationBondSpread': ...
    def read_from_json(file_name:str) -> 'inflationBondSpread': ...
    def static_cast(self) -> 'inflationBondSpread': ...
    def write_to_binary(file_name:str, rhs:'inflationBondSpread') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationBondSpread') -> None: ...

class inflationFuture(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', payment_date:'datetime', discount:'discountCurveId', index:'inflationCurveId', convention:'dayCountConvention', observation_lag:str) -> None: ...
    @overload
    def __init__(self, __a:'inflationFuture') -> None: ...
    def printf(rhs:'inflationFuture') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationFuture': ...
    def read_from_json(file_name:str) -> 'inflationFuture': ...
    def static_cast(self) -> 'inflationFuture': ...
    def write_to_binary(file_name:str, rhs:'inflationFuture') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationFuture') -> None: ...

class inflationRealRateSwap(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', maturity:'datetime', discount:'discountCurveId', inflation_index:'inflationCurveId', forecast_index:'forecastCurveId', inflation_leg:'fixedLegWithLag', ir_leg:'floatLeg', coupon:float=1.0) -> None: ...
    @overload
    def __init__(self, __a:'inflationRealRateSwap') -> None: ...
    def printf(rhs:'inflationRealRateSwap') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationRealRateSwap': ...
    def read_from_json(file_name:str) -> 'inflationRealRateSwap': ...
    def static_cast(self) -> 'inflationRealRateSwap': ...
    def write_to_binary(file_name:str, rhs:'inflationRealRateSwap') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationRealRateSwap') -> None: ...

class inflationYoySwap(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', maturity:'datetime', discount:'discountCurveId', index:'inflationCurveId', inflation_leg:'fixedLegWithLag', ir_leg:'fixedLeg', fixed_coupon:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'inflationYoySwap') -> None: ...
    def printf(rhs:'inflationYoySwap') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationYoySwap': ...
    def read_from_json(file_name:str) -> 'inflationYoySwap': ...
    def static_cast(self) -> 'inflationYoySwap': ...
    def write_to_binary(file_name:str, rhs:'inflationYoySwap') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationYoySwap') -> None: ...

class inflationZeroCouponSwap(inflationPriceable):
    @overload
    def __init__(self, effective_date:'datetime', payment_date:'datetime', discount:'discountCurveId', index:'inflationCurveId', convention:'dayCountConvention', observation_lag:str, fixed_rate:float=1., frequency:'frequency_enum'=...) -> None: ...
    @overload
    def __init__(self, __a:'inflationZeroCouponSwap') -> None: ...
    def observation_lag(self) -> str: ...
    def printf(rhs:'inflationZeroCouponSwap') -> str: ...
    def read_from_binary(file_name:str) -> 'inflationZeroCouponSwap': ...
    def read_from_json(file_name:str) -> 'inflationZeroCouponSwap': ...
    def static_cast(self) -> 'inflationZeroCouponSwap': ...
    def write_to_binary(file_name:str, rhs:'inflationZeroCouponSwap') -> None: ...
    def write_to_json(file_name:str, rhs:'inflationZeroCouponSwap') -> None: ...

class instrument(object):
    def expiry(self) -> 'datetime': ...
    def make_life_cycle_data(self) -> 'lifeCycleData': ...
    def maturity(self) -> 'datetime': ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def size(self) -> int: ...
    def static_cast(self) -> 'instrument': ...

class instrumentBermudanSwaption(instrument):
    @overload
    def __init__(self, is_call:bool, strike:float, event_dates:Sequence['datetime'], curve:'discountCurve', expiries:Sequence['datetime'], maturity:'datetime', frequency:str, convention:'dayCountConvention') -> None: ...
    @overload
    def __init__(self, __a:'instrumentBermudanSwaption') -> None: ...
    def make_life_cycle_data(self) -> 'lifeCycleData': ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def size(self) -> int: ...
    def static_cast(self) -> 'instrumentBermudanSwaption': ...
    def swaptoins(self) -> Tuple['instrumentIrSwaption', 'instrumentIrSwaption']: ...

class instrumentCreditBond(instrument):
    def __init__(self, expiry:'datetime', maturity:'datetime', convention:'dayCountConvention', is_adp:bool=False) -> None: ...
    def convention(self) -> 'dayCountConvention': ...
    def maturity(self) -> 'datetime': ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def static_cast(self) -> 'instrumentCreditBond': ...

class instrumentFutures(instrument):
    @overload
    def __init__(self, settlement_date:'datetime', adjustement:'businessDayConvention', maturity:str, settlement_days:int=0) -> None: ...
    @overload
    def __init__(self, settlement_date:'datetime', maturity:'datetime') -> None: ...
    def maturity(self) -> 'datetime': ...
    def price(self, settlement_date:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def settlement_date(self) -> 'datetime': ...
    def size(self) -> int: ...
    def static_cast(self) -> 'instrumentFutures': ...

class instrumentIrBond(instrument):
    def __init__(self, expiry:'datetime', maturity:'datetime', convention:'dayCountConvention') -> None: ...
    def convention(self) -> 'dayCountConvention': ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def static_cast(self) -> 'instrumentIrBond': ...

class instrumentIrDeposit(instrument):
    @overload
    def __init__(self, settlement_date:'datetime', settlement_days:int, adjustement:'businessDayConvention', maturity:str) -> None: ...
    @overload
    def __init__(self, settlement_date:'datetime', maturity:'datetime') -> None: ...
    def maturity(self) -> 'datetime': ...
    def price(self, settlement_date:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def settlement_date(self) -> 'datetime': ...
    def static_cast(self) -> 'instrumentIrDeposit': ...

class instrumentIrSpreadOption(instrument):
    @overload
    def __init__(self, is_call:bool, expiry:'datetime', short_maturity:'datetime', long_maturity:'datetime', frequency:str, convention:'dayCountConvention', strikes:Sequence[float]) -> None: ...
    @overload
    def __init__(self, __a:'instrumentIrSpreadOption') -> None: ...
    def is_call(self) -> bool: ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def size(self) -> int: ...
    def spread(self) -> 'calibrationIrSpread': ...
    def static_cast(self) -> 'instrumentIrSpreadOption': ...
    def strikes(self) -> Tuple[float, float]: ...

class instrumentIrSwap(instrument):
    @overload
    def __init__(self, settlement_date:'datetime', settlement_days:int, adjustement:'businessDayConvention', maturity:str) -> None: ...
    @overload
    def __init__(self, settlement_date:'datetime', maturity:'datetime') -> None: ...
    def price(self, settlement_date:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def settlement_date(self) -> 'datetime': ...
    def static_cast(self) -> 'instrumentIrSwap': ...

class instrumentIrSwaption(instrument):
    @overload
    def __init__(self, is_call:bool, curve:'discountCurve', expiry:'datetime', maturity:'datetime', frequency:str, convention:'dayCountConvention', strikes:Sequence[float]=..., is_ratios:bool=True) -> None: ...
    @overload
    def __init__(self, __a:'instrumentIrSwaption') -> None: ...
    def all_dates(self) -> Tuple['datetime', 'datetime']: ...
    def annuity(self) -> float: ...
    def expiry_double(self) -> float: ...
    def is_call(self) -> bool: ...
    def price(self, expiry:'datetime', mkt_data:Sequence['marketData'], output:'tensor_IdE') -> None: ...
    def size(self) -> int: ...
    def static_cast(self) -> 'instrumentIrSwaption': ...
    def strikes(self) -> Tuple[float, float]: ...
    def swap(self) -> 'calibrationIrSwap': ...
    def swap_rate(self) -> float: ...

class irBasisSwap(priceable):
    @overload
    def __init__(self, discount:'discountCurveId', index_left:'forecastCurveId', index_right:'forecastCurveId', effective_date:'datetime', maturity:'datetime', fixed_left_leg:'fixedLeg', float_left_leg:'floatLeg', float_right_leg:'floatLeg', fixed_rateg:float=0.) -> None: ...
    @overload
    def __init__(self, __a:'irBasisSwap') -> None: ...
    def static_cast(self) -> 'irBasisSwap': ...

class irFly(priceable):
    @overload
    def __init__(self, effective_date:'datetime', maturity:'datetime', swap_left:'irSwap', swap_center:'irSwap', swap_right:'irSwap') -> None: ...
    @overload
    def __init__(self, __a:'irFly') -> None: ...
    def static_cast(self) -> 'irFly': ...

class irSpread(priceable):
    @overload
    def __init__(self, effective_date:'datetime', maturity:'datetime', swap_left:'irSwap', swap_right:'irSwap', fixed_rate:float=0., long_weight:float=1., short_weight:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'irSpread') -> None: ...
    def static_cast(self) -> 'irSpread': ...

class irSwap(priceable):
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', effective_date:'datetime', maturity:'datetime', pay_leg:'leg', receive_leg:'leg', fixed_rate:float=1.0) -> None: ...
    @overload
    def __init__(self, __a:'irSwap') -> None: ...
    def printf(rhs:'irSwap') -> str: ...
    def read_from_binary(file_name:str) -> 'irSwap': ...
    def read_from_json(file_name:str) -> 'irSwap': ...
    def static_cast(self) -> 'irSwap': ...
    def write_to_binary(file_name:str, rhs:'irSwap') -> None: ...
    def write_to_json(file_name:str, rhs:'irSwap') -> None: ...

class irTermDeposit(priceable):
    @overload
    def __init__(self, discount:'discountCurveId', index:'forecastCurveId', effective_date:'datetime', maturity:'datetime', fixed_rate:float, fixed_leg:'fixedLeg', float_leg:'floatLeg') -> None: ...
    @overload
    def __init__(self, __a:'irTermDeposit') -> None: ...
    def static_cast(self) -> 'irTermDeposit': ...

class mtmCrossCurrencyBasisSwap(priceable):
    @overload
    def __init__(self, base_discount_id:'discountCurveId', term_discount_id:'discountCurveId', base_forecast_id:'forecastCurveId', term_forecast_id:'forecastCurveId', fx_id:'fxSpotId', effective_date:'datetime', maturity_date:'datetime', base_float_leg:'floatLeg', base_fixed_leg:'fixedLeg', term_float_leg:'floatLeg', basis_spread:float=1.) -> None: ...
    @overload
    def __init__(self, __a:'mtmCrossCurrencyBasisSwap') -> None: ...
    def static_cast(self) -> 'mtmCrossCurrencyBasisSwap': ...

class portfolio(object):
    def __init__(self, instruments:Sequence['priceable'], output_types:MutableSequence['optionOutputEnum']) -> None: ...
    def price(self, market:'anyContainer') -> Tuple[float, float]: ...
    def static_cast(self) -> 'portfolio': ...

class tradeInfoData(object):
    @overload
    def __init__(self, trade_info:str) -> None: ...
    @overload
    def __init__(self, __a:'tradeInfoData') -> None: ...
    def adjust_date(from_:'datetime', period:str, holiday_list:'calendar', business_day_convention:'business_day_convention_enum') -> 'datetime': ...
    def asset_type(self) -> 'asset_type_enum': ...
    def expiry(self) -> str: ...
    def extract_maturities(input:str, separator:str=..., maxNumbers:int=4) -> Tuple[int, int]: ...
    def period(self) -> str: ...
    def start_date_not_adjusted(self, valuation_date:'datetime') -> 'datetime': ...
    def static_cast(self) -> 'tradeInfoData': ...

