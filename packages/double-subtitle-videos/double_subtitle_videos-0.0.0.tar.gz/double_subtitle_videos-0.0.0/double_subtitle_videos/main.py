import os
import subprocess
import tempfile
from pathlib import Path
from typing import Iterable, Dict

os.environ["translators_default_region"] = "EN"

import translators
import typer
import webvtt
import yt_dlp


__all__ = ["translate_subtitles", "watch", "launch_player", "ensure_all_files"]


def _get_url_info(
    url: str,
) -> Dict:
    ydl_opts = {
        "cookiesfrombrowser": ("chrome",),
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        return ydl.extract_info(url, download=False)


def _download_url(
    url: str,
    foreign_language: str,
    use_autogenerated_captions: bool,
):
    ydl_opts = {
        "writesubtitles": True,
        "subtitleslangs": [foreign_language],
        "writeautomaticsub": use_autogenerated_captions,
        "cookiesfrombrowser": ("chrome",),
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])


def translate_subtitles(
    subtitles_path: str | Path,
    foreign_language: str,
    native_language: str,
) -> webvtt.WebVTT:
    delimiter = "\n" * 3
    subtitles = webvtt.read(subtitles_path)
    subtitle_texts = [caption.text.replace("&nbsp;", "") for caption in subtitles]

    translated = []
    for chunk in _chunk_subtitles(subtitle_texts, delimiter):
        merged_chunk = delimiter.join(chunk)
        translated_chunk = translators.translate_text(
            merged_chunk,
            translator="google",
            from_language=foreign_language,
            to_language=native_language,
        )
        translated += translated_chunk.split(delimiter)

    assert len(subtitles) == len(translated)
    for caption, new_text in zip(iter(subtitles), translated):
        caption.lines = new_text.splitlines()

    return subtitles


def _chunk_subtitles(
    subtitle_texts: Iterable[str],
    delimiter: str,
):
    chunk, char_count = [], 0
    for txt in subtitle_texts:
        if (
            char_count + len(txt) + (len(chunk) - 1) * len(delimiter)
            > translators.server.GoogleV2().input_limit
        ):
            yield chunk
            chunk, char_count = [], 0
        chunk.append(txt)
        char_count += len(txt)
    if chunk:
        yield chunk


def watch(
    url: str,
    save_dir: str,
    foreign_language: str,
    native_language: str = "en",
    use_autogenerated_captions: bool = False,
):
    """
    Download, double subtitle, and watch a video at specified url.

    Args:
        url: youtube URL to display with two sets of subtitles.
        save_dir: Location to save video/subtitles.
        foreign_language: Language e.g. "fr"
        native_language: Language for subtitles. Currently must be english i.e. "en"
        use_autogenerated_captions: Whether to use youtube created captions for foreign language
    """

    vid_dir = ensure_all_files(
        url, save_dir, foreign_language, native_language, use_autogenerated_captions
    )
    launch_player(vid_dir, foreign_language, native_language)


def launch_player(
    vid_dir: Path,
    foreign_language: str,
    native_language: str,
):
    video_path = _get_file_with_filetype(vid_dir, "webm")
    os.chdir(vid_dir)
    with tempfile.NamedTemporaryFile() as fp:
        fp.write(b"UP cycle secondary-sid")
        fp.flush()
        subprocess.run(
            f'mpv --sub-files={foreign_language}.vtt:{native_language}.vtt --secondary-sid=2 --input-conf="{fp.name}" "{video_path}"',
            shell=True,
        )


class NativeSubtitlesNotFoundException(Exception):
    pass


def ensure_all_files(
    url: str,
    save_dir: str,
    foreign_language: str,
    native_language: str,
    use_autogenerated_captions: bool,
) -> Path:
    info = _get_url_info(url)
    assert info["language"] == foreign_language
    if not use_autogenerated_captions and (foreign_language not in info["subtitles"]):
        raise NativeSubtitlesNotFoundException(
            f'Language "{foreign_language}" not found as subtitle in video: {url}'
        )
    video_dir = Path(save_dir) / info["title"]
    video_dir.mkdir(parents=True, exist_ok=True)
    os.chdir(video_dir)

    _download_url(url, foreign_language, use_autogenerated_captions)
    foreign_subtitles_path = _get_file_with_filetype(
        video_dir, f"{foreign_language}.vtt"
    )
    native_subtitles = translate_subtitles(
        foreign_subtitles_path, foreign_language, native_language
    )
    native_subtitles_path = video_dir / f"{native_language}.vtt"
    native_subtitles.save(str(native_subtitles_path))

    foreign_subtitles_path.rename(video_dir / f"{foreign_language}.vtt")

    return video_dir


def _get_file_with_filetype(
    dir_path: Path,
    filetype: str,
) -> Path:
    files = list(dir_path.glob(f"*.{filetype}"))
    assert len(files) == 1
    return files[0]


if __name__ == "__main__":
    typer.run(watch)
