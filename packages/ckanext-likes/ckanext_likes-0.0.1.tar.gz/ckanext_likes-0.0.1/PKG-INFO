Metadata-Version: 2.1
Name: ckanext-likes
Version: 0.0.1
Author-email: DataShades <datashades@linkdigital.com.au>, Sergey Motornyuk <sergey.motornyuk@linkdigital.com.au>
Maintainer-email: DataShades <datashades@linkdigital.com.au>
License: MIT
Project-URL: Homepage, https://github.com/DataShades/ckanext-likes
Keywords: CKAN
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Requires-Python: >=3.1
Description-Content-Type: text/markdown

[![Tests](https://github.com/DataShades/ckanext-likes/actions/workflows/tests.yml/badge.svg)](https://github.com/DataShades/ckanext-likes/actions/workflows/test.yml)

# ckanext-likes

A CKAN extension that enables users to like any object with a unique ID,
promoting engagement across datasets, resources, organizations, and more.

## Overview

This CKAN extension introduces a flexible and reusable "like" functionality
that can be attached to any CKAN object with a unique identifier. Whether it's
datasets, resources, organizations, groups, or custom entities introduced by
other extensions, this plugin allows users to express appreciation or endorse
content directly within the CKAN interface.

Key features include:

* Universal Compatibility: Works with any CKAN object that has a unique ID,
  including datasets, resources, organizations, users, or even custom content
  types.

* ful API Support: Exposes endpoints to like/unlike objects and retrieve like
  counts, enabling integration with third-party systems or frontend
  customizations.

* Customizable UI Widgets: Provides simple templates and frontend snippets that
  can be embedded anywhere in CKAN themes to display like buttons and counters.

* User Tracking & Anti-Spam: Ties likes to user accounts to prevent duplicate
  voting and support analytics.


This extension can be a powerful tool to highlight popular datasets, promote
community curation, and enhance overall user interaction on your CKAN portal.

## Installation

Compatibility with core CKAN versions:

| CKAN version | Compatible? |
|--------------|-------------|
| <= 2.10      | No          |
| >= 2.11      | Yes         |


Install the extension from [PyPI](https://pypi.org/project/ckanext-likes):

```sh
pip install ckanext-likes
```

Add `likes` to the list of CKAN plugins and apply database migrations:

```sh
ckan db upgrade -p likes
```


## Usage

Add like-widget on any page and it will automatically initialize and update
likes for the specified object:

```jinja
{%
    snippet "likes/snippets/widget.html",
    object_id=OBJECT_ID, object_type=OBJECT_TYPE, inline=true
%}
```

`inline` flag renders widget with 0 likes. When the widget appears in the
viewport for the first time, it updates the value via AJAX request and listens
for the user clicks, handling like/un-like events and re-rendering icon and
counter.

If you want to update counters as soon as page loads, add
`inline_trigger="load"` argument to the snippet call. This is not recommended
if you have a lot of widgets on the page, such as like-buttons agains every
comment in the comments thread.

```jinja
{%
    snippet "likes/snippets/widget.html",
    object_id=OBJECT_ID, object_type=OBJECT_TYPE, inline=true, inline_trigger="load"
%}
```

If you already know the number of likes for the object and whether current
visitor has already liked the object, specify these parameters as `count` and
`liked` arguments for the snippet, instead of the `inline=true`. In this case,
widget won't perform additional requests to the backend during initialization:

```jinja
{%
    snippet "likes/snippets/widget.html",
    object_id=OBJECT_ID, object_type=OBJECT_TYPE, count=100, liked=true
%}
```
