[project]
name = "solanab-jup-python-sdk"
version = "2.0.7"
description = "High-performance sync/async Python SDK for Jupiter Exchange APIs, powered by curl_cffi."
authors = [
    { name = "Fiji", email = "charismoutafidis@gmail.com" },
    { name = "solanab", email = "whiredj@gmail.com" },
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.9"
keywords = ["solana", "jupiter", "sdk"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.11.3",
    "curl-cffi>=0.12",
    "solders>=0.26.0",
    "base58>=2.1.1",
    "python-dotenv>=1.1.1",
]

[project.urls]
homepage = "https://github.com/solanab/jup-python-sdk"
repository = "https://github.com/solanab/jup-python-sdk"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "ruff>=0.8.0",
    "pyright>=1.1.0",
    "pre-commit>=4.1.0",
    "pytest-cov>=6.1.1",
    "bandit>=1.7",
    "pytest-asyncio>=0.23.7",
    "pip-audit>=2.8.0",
    "python-dotenv>=1.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["jup_python_sdk"]


[tool.ruff]
line-length = 120
target-version = "py39"
# Support all Python versions from 3.9 to 3.13

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings (包含 trailing whitespace)
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger (替代 debug-statements)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff 特定规则
]
ignore = [
    "E501",   # line too long (由 formatter 处理)
    "RUF006", # Store async task reference (fire-and-forget tasks)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "standard"  # 使用标准模式，避免与 ruff 重复检查

# 核心类型检查
reportGeneralTypeIssues = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true

# 关闭与 ruff 重复的检查
reportMissingImports = false  # ruff: F401
reportUnusedImport = false  # ruff: F401
reportUnusedClass = false  # ruff: F841
reportUnusedFunction = false  # ruff: F841
reportUnusedVariable = false  # ruff: F841
reportDuplicateImport = false  # ruff: F811

# 关闭过于严格的类型检查
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportUntypedFunctionDecorator = false
reportMissingTypeStubs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
pythonpath = ["."]

[tool.coverage.run]
source = ["jup_python_sdk"]
omit = ["*/tests/*", "*/examples/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = ["pyright>=1.1.403", "ruff>=0.12.4"]
