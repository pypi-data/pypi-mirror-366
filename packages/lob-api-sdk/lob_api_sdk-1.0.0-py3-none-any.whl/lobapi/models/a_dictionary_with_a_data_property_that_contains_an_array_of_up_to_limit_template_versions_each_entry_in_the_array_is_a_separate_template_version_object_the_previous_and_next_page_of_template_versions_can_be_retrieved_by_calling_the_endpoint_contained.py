# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.datum_9 import Datum9


class ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplateVersionsEachEntryInTheArrayIsASeparateTemplateVersionObjectThePreviousAndNextPageOfTemplateVersionsCanBeRetrievedByCallingTheEndpointContained(object):

    """Implementation of the 'A dictionary with a data property that contains an array of up to `limit` template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained' model.

    Attributes:
        data (List[Datum9]): The model property of type List[Datum9].
        object (str): The model property of type str.
        count (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "data": 'data',
        "object": 'object',
        "count": 'count'
    }

    def __init__(self,
                 data=None,
                 object=None,
                 count=None):
        """Constructor for the ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplateVersionsEachEntryInTheArrayIsASeparateTemplateVersionObjectThePreviousAndNextPageOfTemplateVersionsCanBeRetrievedByCallingTheEndpointContained class"""

        # Initialize members of the class
        self.data = data 
        self.object = object 
        self.count = count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        data = None
        if dictionary.get('data') is not None:
            data = [Datum9.from_dictionary(x) for x in dictionary.get('data')]
        object = dictionary.get("object") if dictionary.get("object") else None
        count = dictionary.get("count") if dictionary.get("count") else None
        # Return an object of this model
        return cls(data,
                   object,
                   count)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'data={self.data!r}, '
                f'object={self.object!r}, '
                f'count={self.count!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'data={self.data!s}, '
                f'object={self.object!s}, '
                f'count={self.count!s})')
