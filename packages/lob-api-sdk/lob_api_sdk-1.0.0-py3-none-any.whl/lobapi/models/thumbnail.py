# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Thumbnail(object):

    """Implementation of the 'Thumbnail' model.

    Attributes:
        small (str): The model property of type str.
        medium (str): The model property of type str.
        large (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "small": 'small',
        "medium": 'medium',
        "large": 'large'
    }

    def __init__(self,
                 small=None,
                 medium=None,
                 large=None):
        """Constructor for the Thumbnail class"""

        # Initialize members of the class
        self.small = small 
        self.medium = medium 
        self.large = large 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        small = dictionary.get("small") if dictionary.get("small") else None
        medium = dictionary.get("medium") if dictionary.get("medium") else None
        large = dictionary.get("large") if dictionary.get("large") else None
        # Return an object of this model
        return cls(small,
                   medium,
                   large)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'small={self.small!r}, '
                f'medium={self.medium!r}, '
                f'large={self.large!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'small={self.small!s}, '
                f'medium={self.medium!s}, '
                f'large={self.large!s})')
