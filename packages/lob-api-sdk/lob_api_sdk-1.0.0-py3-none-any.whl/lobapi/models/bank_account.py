# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BankAccount(object):

    """Implementation of the 'BankAccount' model.

    Attributes:
        id (str): The model property of type str.
        description (str): The model property of type str.
        metadata (Any): The model property of type Any.
        routing_number (str): The model property of type str.
        account_number (str): The model property of type str.
        signatory (str): The model property of type str.
        bank_name (str): The model property of type str.
        verified (bool): The model property of type bool.
        account_type (str): The model property of type str.
        date_created (str): The model property of type str.
        date_modified (str): The model property of type str.
        object (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "description": 'description',
        "metadata": 'metadata',
        "routing_number": 'routing_number',
        "account_number": 'account_number',
        "signatory": 'signatory',
        "bank_name": 'bank_name',
        "verified": 'verified',
        "account_type": 'account_type',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "object": 'object'
    }

    def __init__(self,
                 id=None,
                 description=None,
                 metadata=None,
                 routing_number=None,
                 account_number=None,
                 signatory=None,
                 bank_name=None,
                 verified=None,
                 account_type=None,
                 date_created=None,
                 date_modified=None,
                 object=None):
        """Constructor for the BankAccount class"""

        # Initialize members of the class
        self.id = id 
        self.description = description 
        self.metadata = metadata 
        self.routing_number = routing_number 
        self.account_number = account_number 
        self.signatory = signatory 
        self.bank_name = bank_name 
        self.verified = verified 
        self.account_type = account_type 
        self.date_created = date_created 
        self.date_modified = date_modified 
        self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        routing_number = dictionary.get("routing_number") if dictionary.get("routing_number") else None
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else None
        signatory = dictionary.get("signatory") if dictionary.get("signatory") else None
        bank_name = dictionary.get("bank_name") if dictionary.get("bank_name") else None
        verified = dictionary.get("verified") if "verified" in dictionary.keys() else None
        account_type = dictionary.get("account_type") if dictionary.get("account_type") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        # Return an object of this model
        return cls(id,
                   description,
                   metadata,
                   routing_number,
                   account_number,
                   signatory,
                   bank_name,
                   verified,
                   account_type,
                   date_created,
                   date_modified,
                   object)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'description={self.description!r}, '
                f'metadata={self.metadata!r}, '
                f'routing_number={self.routing_number!r}, '
                f'account_number={self.account_number!r}, '
                f'signatory={self.signatory!r}, '
                f'bank_name={self.bank_name!r}, '
                f'verified={self.verified!r}, '
                f'account_type={self.account_type!r}, '
                f'date_created={self.date_created!r}, '
                f'date_modified={self.date_modified!r}, '
                f'object={self.object!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'description={self.description!s}, '
                f'metadata={self.metadata!s}, '
                f'routing_number={self.routing_number!s}, '
                f'account_number={self.account_number!s}, '
                f'signatory={self.signatory!s}, '
                f'bank_name={self.bank_name!s}, '
                f'verified={self.verified!s}, '
                f'account_type={self.account_type!s}, '
                f'date_created={self.date_created!s}, '
                f'date_modified={self.date_modified!s}, '
                f'object={self.object!s})')
