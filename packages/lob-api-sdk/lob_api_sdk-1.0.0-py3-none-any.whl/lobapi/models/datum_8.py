# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.published_version import PublishedVersion
from lobapi.models.version import Version


class Datum8(object):

    """Implementation of the 'Datum8' model.

    Attributes:
        id (str): The model property of type str.
        description (str): The model property of type str.
        versions (List[Version]): The model property of type List[Version].
        published_version (PublishedVersion): The model property of type
            PublishedVersion.
        metadata (Any): The model property of type Any.
        date_created (str): The model property of type str.
        date_modified (str): The model property of type str.
        object (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "description": 'description',
        "versions": 'versions',
        "published_version": 'published_version',
        "metadata": 'metadata',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "object": 'object'
    }

    def __init__(self,
                 id=None,
                 description=None,
                 versions=None,
                 published_version=None,
                 metadata=None,
                 date_created=None,
                 date_modified=None,
                 object=None):
        """Constructor for the Datum8 class"""

        # Initialize members of the class
        self.id = id 
        self.description = description 
        self.versions = versions 
        self.published_version = published_version 
        self.metadata = metadata 
        self.date_created = date_created 
        self.date_modified = date_modified 
        self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        versions = None
        if dictionary.get('versions') is not None:
            versions = [Version.from_dictionary(x) for x in dictionary.get('versions')]
        published_version = PublishedVersion.from_dictionary(dictionary.get('published_version')) if dictionary.get('published_version') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        # Return an object of this model
        return cls(id,
                   description,
                   versions,
                   published_version,
                   metadata,
                   date_created,
                   date_modified,
                   object)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'description={self.description!r}, '
                f'versions={self.versions!r}, '
                f'published_version={self.published_version!r}, '
                f'metadata={self.metadata!r}, '
                f'date_created={self.date_created!r}, '
                f'date_modified={self.date_modified!r}, '
                f'object={self.object!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'description={self.description!s}, '
                f'versions={self.versions!s}, '
                f'published_version={self.published_version!s}, '
                f'metadata={self.metadata!s}, '
                f'date_created={self.date_created!s}, '
                f'date_modified={self.date_modified!s}, '
                f'object={self.object!s})')
