# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.api_helper import APIHelper
from lobapi.models.bank_account import BankAccount
from lobapi.models.mfrom import From
from lobapi.models.thumbnail import Thumbnail
from lobapi.models.to_1 import To1


class Datum4(object):

    """Implementation of the 'Datum4' model.

    Attributes:
        id (str): The model property of type str.
        description (str): The model property of type str.
        metadata (Any): The model property of type Any.
        check_number (int): The model property of type int.
        memo (str): The model property of type str.
        amount (float): The model property of type float.
        url (str): The model property of type str.
        to (To1): The model property of type To1.
        mfrom (From): The model property of type From.
        bank_account (BankAccount): The model property of type BankAccount.
        carrier (str): The model property of type str.
        tracking_events (List[str]): The model property of type List[str].
        thumbnails (List[Thumbnail]): The model property of type
            List[Thumbnail].
        expected_delivery_date (str): The model property of type str.
        mail_type (str): The model property of type str.
        date_created (str): The model property of type str.
        date_modified (str): The model property of type str.
        send_date (str): The model property of type str.
        object (str): The model property of type str.
        merge_variables (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "description": 'description',
        "metadata": 'metadata',
        "check_number": 'check_number',
        "memo": 'memo',
        "amount": 'amount',
        "url": 'url',
        "to": 'to',
        "mfrom": 'from',
        "bank_account": 'bank_account',
        "carrier": 'carrier',
        "tracking_events": 'tracking_events',
        "thumbnails": 'thumbnails',
        "expected_delivery_date": 'expected_delivery_date',
        "mail_type": 'mail_type',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "send_date": 'send_date',
        "object": 'object',
        "merge_variables": 'merge_variables'
    }

    _optionals = [
        'merge_variables',
    ]

    _nullables = [
        'merge_variables',
    ]

    def __init__(self,
                 id=None,
                 description=None,
                 metadata=None,
                 check_number=None,
                 memo=None,
                 amount=None,
                 url=None,
                 to=None,
                 mfrom=None,
                 bank_account=None,
                 carrier=None,
                 tracking_events=None,
                 thumbnails=None,
                 expected_delivery_date=None,
                 mail_type=None,
                 date_created=None,
                 date_modified=None,
                 send_date=None,
                 object=None,
                 merge_variables=APIHelper.SKIP):
        """Constructor for the Datum4 class"""

        # Initialize members of the class
        self.id = id 
        self.description = description 
        self.metadata = metadata 
        self.check_number = check_number 
        self.memo = memo 
        self.amount = amount 
        self.url = url 
        self.to = to 
        self.mfrom = mfrom 
        self.bank_account = bank_account 
        self.carrier = carrier 
        self.tracking_events = tracking_events 
        self.thumbnails = thumbnails 
        self.expected_delivery_date = expected_delivery_date 
        self.mail_type = mail_type 
        self.date_created = date_created 
        self.date_modified = date_modified 
        self.send_date = send_date 
        self.object = object 
        if merge_variables is not APIHelper.SKIP:
            self.merge_variables = merge_variables 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        check_number = dictionary.get("check_number") if dictionary.get("check_number") else None
        memo = dictionary.get("memo") if dictionary.get("memo") else None
        amount = dictionary.get("amount") if dictionary.get("amount") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        to = To1.from_dictionary(dictionary.get('to')) if dictionary.get('to') else None
        mfrom = From.from_dictionary(dictionary.get('from')) if dictionary.get('from') else None
        bank_account = BankAccount.from_dictionary(dictionary.get('bank_account')) if dictionary.get('bank_account') else None
        carrier = dictionary.get("carrier") if dictionary.get("carrier") else None
        tracking_events = dictionary.get("tracking_events") if dictionary.get("tracking_events") else None
        thumbnails = None
        if dictionary.get('thumbnails') is not None:
            thumbnails = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnails')]
        expected_delivery_date = dictionary.get("expected_delivery_date") if dictionary.get("expected_delivery_date") else None
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        send_date = dictionary.get("send_date") if dictionary.get("send_date") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        merge_variables = dictionary.get("merge_variables") if "merge_variables" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   description,
                   metadata,
                   check_number,
                   memo,
                   amount,
                   url,
                   to,
                   mfrom,
                   bank_account,
                   carrier,
                   tracking_events,
                   thumbnails,
                   expected_delivery_date,
                   mail_type,
                   date_created,
                   date_modified,
                   send_date,
                   object,
                   merge_variables)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'description={self.description!r}, '
                f'metadata={self.metadata!r}, '
                f'check_number={self.check_number!r}, '
                f'memo={self.memo!r}, '
                f'amount={self.amount!r}, '
                f'url={self.url!r}, '
                f'to={self.to!r}, '
                f'mfrom={self.mfrom!r}, '
                f'bank_account={self.bank_account!r}, '
                f'carrier={self.carrier!r}, '
                f'tracking_events={self.tracking_events!r}, '
                f'thumbnails={self.thumbnails!r}, '
                f'expected_delivery_date={self.expected_delivery_date!r}, '
                f'mail_type={self.mail_type!r}, '
                f'date_created={self.date_created!r}, '
                f'date_modified={self.date_modified!r}, '
                f'send_date={self.send_date!r}, '
                f'object={self.object!r}, '
                f'merge_variables={(self.merge_variables if hasattr(self, "merge_variables") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'description={self.description!s}, '
                f'metadata={self.metadata!s}, '
                f'check_number={self.check_number!s}, '
                f'memo={self.memo!s}, '
                f'amount={self.amount!s}, '
                f'url={self.url!s}, '
                f'to={self.to!s}, '
                f'mfrom={self.mfrom!s}, '
                f'bank_account={self.bank_account!s}, '
                f'carrier={self.carrier!s}, '
                f'tracking_events={self.tracking_events!s}, '
                f'thumbnails={self.thumbnails!s}, '
                f'expected_delivery_date={self.expected_delivery_date!s}, '
                f'mail_type={self.mail_type!s}, '
                f'date_created={self.date_created!s}, '
                f'date_modified={self.date_modified!s}, '
                f'send_date={self.send_date!s}, '
                f'object={self.object!s}, '
                f'merge_variables={(self.merge_variables if hasattr(self, "merge_variables") else None)!s})')
