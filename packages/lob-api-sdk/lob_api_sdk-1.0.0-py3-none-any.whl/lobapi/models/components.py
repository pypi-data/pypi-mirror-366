# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Components(object):

    """Implementation of the 'Components' model.

    Attributes:
        primary_number (str): The model property of type str.
        street_name (str): The model property of type str.
        city (str): The model property of type str.
        state (str): The model property of type str.
        postal_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_number": 'primary_number',
        "street_name": 'street_name',
        "city": 'city',
        "state": 'state',
        "postal_code": 'postal_code'
    }

    def __init__(self,
                 primary_number=None,
                 street_name=None,
                 city=None,
                 state=None,
                 postal_code=None):
        """Constructor for the Components class"""

        # Initialize members of the class
        self.primary_number = primary_number 
        self.street_name = street_name 
        self.city = city 
        self.state = state 
        self.postal_code = postal_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_number = dictionary.get("primary_number") if dictionary.get("primary_number") else None
        street_name = dictionary.get("street_name") if dictionary.get("street_name") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else None
        # Return an object of this model
        return cls(primary_number,
                   street_name,
                   city,
                   state,
                   postal_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'primary_number={self.primary_number!r}, '
                f'street_name={self.street_name!r}, '
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'postal_code={self.postal_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'primary_number={self.primary_number!s}, '
                f'street_name={self.street_name!s}, '
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'postal_code={self.postal_code!s})')
