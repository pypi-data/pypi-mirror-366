# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ColumnMapping1(object):

    """Implementation of the 'ColumnMapping1' model.

    Attributes:
        name (str): The model property of type str.
        address_line_1 (str): The model property of type str.
        address_line_2 (str): The model property of type str.
        address_city (str): The model property of type str.
        address_state (str): The model property of type str.
        addess_zip (str): The model property of type str.
        metadata (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "address_line_1": 'address_line1',
        "address_line_2": 'address_line2',
        "address_city": 'address_city',
        "address_state": 'address_state',
        "addess_zip": 'addess_zip',
        "metadata": 'metadata'
    }

    def __init__(self,
                 name=None,
                 address_line_1=None,
                 address_line_2=None,
                 address_city=None,
                 address_state=None,
                 addess_zip=None,
                 metadata=None):
        """Constructor for the ColumnMapping1 class"""

        # Initialize members of the class
        self.name = name 
        self.address_line_1 = address_line_1 
        self.address_line_2 = address_line_2 
        self.address_city = address_city 
        self.address_state = address_state 
        self.addess_zip = addess_zip 
        self.metadata = metadata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        address_line_1 = dictionary.get("address_line1") if dictionary.get("address_line1") else None
        address_line_2 = dictionary.get("address_line2") if dictionary.get("address_line2") else None
        address_city = dictionary.get("address_city") if dictionary.get("address_city") else None
        address_state = dictionary.get("address_state") if dictionary.get("address_state") else None
        addess_zip = dictionary.get("addess_zip") if dictionary.get("addess_zip") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        # Return an object of this model
        return cls(name,
                   address_line_1,
                   address_line_2,
                   address_city,
                   address_state,
                   addess_zip,
                   metadata)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'address_line_1={self.address_line_1!r}, '
                f'address_line_2={self.address_line_2!r}, '
                f'address_city={self.address_city!r}, '
                f'address_state={self.address_state!r}, '
                f'addess_zip={self.addess_zip!r}, '
                f'metadata={self.metadata!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'address_line_1={self.address_line_1!s}, '
                f'address_line_2={self.address_line_2!s}, '
                f'address_city={self.address_city!s}, '
                f'address_state={self.address_state!s}, '
                f'addess_zip={self.addess_zip!s}, '
                f'metadata={self.metadata!s})')
