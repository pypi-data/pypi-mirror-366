# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.api_helper import APIHelper
from lobapi.models.from_4 import From4
from lobapi.models.to_7 import To7


class Datum6(object):

    """Implementation of the 'Datum6' model.

    Attributes:
        id (str): The model property of type str.
        description (str): The model property of type str.
        metadata (Any): The model property of type Any.
        to (To7): The model property of type To7.
        url (str): The model property of type str.
        carrier (str): The model property of type str.
        front_template_id (str): The model property of type str.
        back_template_id (str): The model property of type str.
        front_template_version_id (str): The model property of type str.
        back_template_version_id (str): The model property of type str.
        date_created (str): The model property of type str.
        date_modified (str): The model property of type str.
        send_date (str): The model property of type str.
        object (str): The model property of type str.
        mfrom (From4): The model property of type From4.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "description": 'description',
        "metadata": 'metadata',
        "to": 'to',
        "url": 'url',
        "carrier": 'carrier',
        "front_template_id": 'front_template_id',
        "back_template_id": 'back_template_id',
        "front_template_version_id": 'front_template_version_id',
        "back_template_version_id": 'back_template_version_id',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "send_date": 'send_date',
        "object": 'object',
        "mfrom": 'from'
    }

    _optionals = [
        'mfrom',
    ]

    _nullables = [
        'description',
        'front_template_id',
        'back_template_id',
        'front_template_version_id',
        'back_template_version_id',
    ]

    def __init__(self,
                 id=None,
                 description=None,
                 metadata=None,
                 to=None,
                 url=None,
                 carrier=None,
                 front_template_id=None,
                 back_template_id=None,
                 front_template_version_id=None,
                 back_template_version_id=None,
                 date_created=None,
                 date_modified=None,
                 send_date=None,
                 object=None,
                 mfrom=APIHelper.SKIP):
        """Constructor for the Datum6 class"""

        # Initialize members of the class
        self.id = id 
        self.description = description 
        self.metadata = metadata 
        self.to = to 
        self.url = url 
        self.carrier = carrier 
        self.front_template_id = front_template_id 
        self.back_template_id = back_template_id 
        self.front_template_version_id = front_template_version_id 
        self.back_template_version_id = back_template_version_id 
        self.date_created = date_created 
        self.date_modified = date_modified 
        self.send_date = send_date 
        self.object = object 
        if mfrom is not APIHelper.SKIP:
            self.mfrom = mfrom 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        to = To7.from_dictionary(dictionary.get('to')) if dictionary.get('to') else None
        url = dictionary.get("url") if dictionary.get("url") else None
        carrier = dictionary.get("carrier") if dictionary.get("carrier") else None
        front_template_id = dictionary.get("front_template_id") if dictionary.get("front_template_id") else None
        back_template_id = dictionary.get("back_template_id") if dictionary.get("back_template_id") else None
        front_template_version_id = dictionary.get("front_template_version_id") if dictionary.get("front_template_version_id") else None
        back_template_version_id = dictionary.get("back_template_version_id") if dictionary.get("back_template_version_id") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        send_date = dictionary.get("send_date") if dictionary.get("send_date") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        mfrom = From4.from_dictionary(dictionary.get('from')) if 'from' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   description,
                   metadata,
                   to,
                   url,
                   carrier,
                   front_template_id,
                   back_template_id,
                   front_template_version_id,
                   back_template_version_id,
                   date_created,
                   date_modified,
                   send_date,
                   object,
                   mfrom)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'description={self.description!r}, '
                f'metadata={self.metadata!r}, '
                f'to={self.to!r}, '
                f'url={self.url!r}, '
                f'carrier={self.carrier!r}, '
                f'front_template_id={self.front_template_id!r}, '
                f'back_template_id={self.back_template_id!r}, '
                f'front_template_version_id={self.front_template_version_id!r}, '
                f'back_template_version_id={self.back_template_version_id!r}, '
                f'date_created={self.date_created!r}, '
                f'date_modified={self.date_modified!r}, '
                f'send_date={self.send_date!r}, '
                f'object={self.object!r}, '
                f'mfrom={(self.mfrom if hasattr(self, "mfrom") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'description={self.description!s}, '
                f'metadata={self.metadata!s}, '
                f'to={self.to!s}, '
                f'url={self.url!s}, '
                f'carrier={self.carrier!s}, '
                f'front_template_id={self.front_template_id!s}, '
                f'back_template_id={self.back_template_id!s}, '
                f'front_template_version_id={self.front_template_version_id!s}, '
                f'back_template_version_id={self.back_template_version_id!s}, '
                f'date_created={self.date_created!s}, '
                f'date_modified={self.date_modified!s}, '
                f'send_date={self.send_date!s}, '
                f'object={self.object!s}, '
                f'mfrom={(self.mfrom if hasattr(self, "mfrom") else None)!s})')
