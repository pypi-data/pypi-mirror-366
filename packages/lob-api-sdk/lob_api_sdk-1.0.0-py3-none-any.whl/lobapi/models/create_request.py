# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.column_mapping_1 import ColumnMapping1


class CreateRequest(object):

    """Implementation of the 'CreateRequest' model.

    Attributes:
        campaign_id (str): The model property of type str.
        column_mapping (ColumnMapping1): The model property of type
            ColumnMapping1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "campaign_id": 'campaignId',
        "column_mapping": 'columnMapping'
    }

    def __init__(self,
                 campaign_id=None,
                 column_mapping=None):
        """Constructor for the CreateRequest class"""

        # Initialize members of the class
        self.campaign_id = campaign_id 
        self.column_mapping = column_mapping 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        campaign_id = dictionary.get("campaignId") if dictionary.get("campaignId") else None
        column_mapping = ColumnMapping1.from_dictionary(dictionary.get('columnMapping')) if dictionary.get('columnMapping') else None
        # Return an object of this model
        return cls(campaign_id,
                   column_mapping)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'campaign_id={self.campaign_id!r}, '
                f'column_mapping={self.column_mapping!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'campaign_id={self.campaign_id!s}, '
                f'column_mapping={self.column_mapping!s})')
