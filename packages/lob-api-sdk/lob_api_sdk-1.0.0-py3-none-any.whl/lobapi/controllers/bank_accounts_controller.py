# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_a_bank_account_object import ReturnsABankAccountObject
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_bank_accounts_each_entry_in_the_array_is_a_separate_bank_account_the_previous_and_next_page_of_bank_accounts_can_be_retrieved_by_calling_the_endpoint_contained_in_the_previous_ur import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitBankAccountsEachEntryInTheArrayIsASeparateBankAccountThePreviousAndNextPageOfBankAccountsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUr
from lobapi.models.returns_true_if_the_delete_was_successful import ReturnsTrueIfTheDeleteWasSuccessful
from lobapi.exceptions.error_exception import ErrorException


class BankAccountsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(BankAccountsController, self).__init__(config)

    def creates_a_new_bank_account(self,
                                   idempotency_key,
                                   routing_number,
                                   account_number,
                                   account_type,
                                   signatory):
        """Does a POST request to /bank_accounts.

        Creates a new bank_account with the provided properties.

        Args:
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            routing_number (int): (required) Must be a valid US routing number
                of 9 characters.
            account_number (int): (required) Must be no longer than 17
                characters.
            account_type (str): (required) The type of entity that holds the
                account. Must be either company or individual
            signatory (str): (required) The signatory associated with your
                account. Must be no longer than 30 characters. This name will
                be printed on checks created with this bank account. If you
                prefer to use a custom signature image on your checks instead,
                please create your bank account from the Dashboard.

        Returns:
            ReturnsABankAccountObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bank_accounts')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('routing_number')
                        .value(routing_number))
            .form_param(Parameter()
                        .key('account_number')
                        .value(account_number))
            .form_param(Parameter()
                        .key('account_type')
                        .value(account_type))
            .form_param(Parameter()
                        .key('signatory')
                        .value(signatory))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsABankAccountObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list_all_bank_accounts(self):
        """Does a GET request to /bank_accounts.

        Returns a list of your bank_accounts. The bank_accounts are returned
        sorted by creation date, with the most recently created bank_accounts
        appearing first.

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitBankAccou
                ntsEachEntryInTheArrayIsASeparateBankAccountThePreviousAndNextP
                ageOfBankAccountsCanBeRetrievedByCallingTheEndpointContainedInT
                hePreviousUr: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bank_accounts')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitBankAccountsEachEntryInTheArrayIsASeparateBankAccountThePreviousAndNextPageOfBankAccountsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUr.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def retrieve_bank_account_with_given_id(self,
                                            bank_id):
        """Does a GET request to /bank_accounts/{bank_id}.

        Retrieves the details of an existing bank_account. You need only
        supply the unique bank_account identifier that was returned upon
        bank_account creation.

        Args:
            bank_id (str): (Required) id of the bank_account

        Returns:
            ReturnsABankAccountObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bank_accounts/{bank_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsABankAccountObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def verify_a_bank_account(self,
                              bank_id,
                              idempotency_key,
                              amounts):
        """Does a POST request to /bank_accounts/{bank_id}/verify.

        Verify a bank account in order to create a check.

        Args:
            bank_id (str): (Required) id of the bank account to be verified
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            amounts (List[int]): (Required) In live mode, an array containing
                the two micro deposits (in cents) placed in the bank account.
                In test mode, no micro deposits will be placed, so any two
                integers between 1 and 100 will work.

        Returns:
            ReturnsABankAccountObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bank_accounts/{bank_id}/verify')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('amounts')
                        .value(amounts))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsABankAccountObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def delete_a_bank_account(self,
                              bank_id):
        """Does a DELETE request to /bank_accounts/{bank_id}.

        Permanently deletes a bank account. It cannot be undone.

        Args:
            bank_id (str): (Required) id of the bank_account

        Returns:
            ReturnsTrueIfTheDeleteWasSuccessful: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bank_accounts/{bank_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('bank_id')
                            .value(bank_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTrueIfTheDeleteWasSuccessful.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
