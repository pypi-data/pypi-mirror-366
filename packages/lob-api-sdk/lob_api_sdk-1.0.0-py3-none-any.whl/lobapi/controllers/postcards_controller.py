# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_a_postcard_object import ReturnsAPostcardObject
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_postcards_each_entry_in_the_array_is_a_separate_postcard_the_previous_and_next_page_of_postcards_can_be_retrieved_by_calling_the_endpoint_contained_in_the_previous_url_and_next import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitPostcardsEachEntryInTheArrayIsASeparatePostcardThePreviousAndNextPageOfPostcardsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext
from lobapi.models.returns_true_if_the_delete_was_successful import ReturnsTrueIfTheDeleteWasSuccessful
from lobapi.exceptions.error_exception import ErrorException


class PostcardsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(PostcardsController, self).__init__(config)

    def creates_a_new_postcard_object(self,
                                      description,
                                      to,
                                      front,
                                      back):
        """Does a POST request to /postcards.

        Creates a new postcard given information

        Args:
            description (str): (optional) An internal description that
                identifies this resource. Must be no longer than 255
                characters.
            to (str): (required) Must either be an address ID or an inline
                object with correct address parameters. If an object is used,
                an address will be created, corrected, and standardized for
                free whenever possible using our US Address Verification
                engine (if it is a US address), and returned back with an ID.
                Depending on your Print & Mail Edition, US addresses may also
                be run additionally through National Change of Address (NCOA).
                Non-US addresses will be standardized into uppercase only. If
                a US address used does not meet your accountâ€™s US Mail
                Strictness Setting, the request will fail. Read more here.
            front (str): (required) The artwork to use as the front of your
                postcard. Accepts an HTML string of under 10,000 characters,
                the ID of a saved HTML template, or a remote URL or a local
                upload of an HTML, PDF, PNG, or JPG file. Remote URLs have a
                20 MB file size limit and must be downloaded within 40
                seconds. HTML files passed as remote URLs or local file
                uploads have no character limit. HTML merge variables should
                not include delimiting whitespace. PDF, PNG, and JPGs must be
                sized at 4.25"x6.25", 6.25"x9.25", or 6.25"x11.25" at 300 DPI,
                while supplied HTML will be rendered to the specified size.
                See here for HTML examples.
            back (str): (required) The artwork to use as the back of your
                postcard. Accepts an HTML string of under 10,000 characters,
                the ID of a saved HTML template, or a remote URL or a local
                upload of an HTML, PDF, PNG, or JPG file. Remote URLs have a
                20 MB file size limit and must be downloaded within 40
                seconds. HTML files passed as remote URLs or local file
                uploads have no character limit. HTML merge variables should
                not include delimiting whitespace. PDF, PNG, and JPGs must be
                sized at 4.25"x6.25", 6.25"x9.25", or 6.25"x11.25" at 300 DPI,
                while supplied HTML will be rendered to the specified size. Be
                sure to leave room for address and postage information by
                following the templates provided here: 4x6 template, 6x9
                template, 6x11 template. See here for HTML examples.

        Returns:
            ReturnsAPostcardObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/postcards')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('to')
                        .value(to))
            .form_param(Parameter()
                        .key('front')
                        .value(front))
            .form_param(Parameter()
                        .key('back')
                        .value(back))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAPostcardObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list_all_postcards(self):
        """Does a GET request to /postcards.

        Returns a list of your postcards. The addresses are returned sorted by
        creation date, with the most recently created addresses appearing
        first.

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitPostcards
                EachEntryInTheArrayIsASeparatePostcardThePreviousAndNextPageOfP
                ostcardsCanBeRetrievedByCallingTheEndpointContainedInThePreviou
                sUrlAndNext: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/postcards')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitPostcardsEachEntryInTheArrayIsASeparatePostcardThePreviousAndNextPageOfPostcardsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def retrieve_postcard_with_given_id(self,
                                        psc_id):
        """Does a GET request to /postcards/{psc_id}.

        Retrieves the details of an existing postcard. You need only supply
        the unique customer identifier that was returned upon postcard
        creation.

        Args:
            psc_id (str): (Required) id of the postcard

        Returns:
            ReturnsAPostcardObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/postcards/{psc_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('psc_id')
                            .value(psc_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAPostcardObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def cancels_postcard_with_given_id(self,
                                       psc_id):
        """Does a DELETE request to /postcards/{psc_id}.

        Completely removes a postcard from production. This can only be done
        if the postcard has a `send_date` and the `send_date` has not yet
        passed. If the postcard is successfully canceled, you will not be
        charged for it. Read more on [cancellation
        windows](https://docs.lob.com/#cancellation) and
        [scheduling](https://docs.lob.com/#scheduled). Scheduling and
        cancellation is a premium feature. Upgrade to the appropriate Print &
        Mail Edition to gain access.

        Args:
            psc_id (str): (Required) id of the postcard

        Returns:
            ReturnsTrueIfTheDeleteWasSuccessful: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/postcards/{psc_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('psc_id')
                            .value(psc_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTrueIfTheDeleteWasSuccessful.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
