# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.utilities.file_wrapper import FileWrapper
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.an_array_of_matching_uploads_each_entry_in_the_array_is_a_separate_upload import AnArrayOfMatchingUploadsEachEntryInTheArrayIsASeparateUpload
from lobapi.models.upload_created_successfully import UploadCreatedSuccessfully
from lobapi.models.returns_an_upload_object import ReturnsAnUploadObject
from lobapi.models.successful_response import SuccessfulResponse
from lobapi.exceptions.validation_error_exception import ValidationErrorException
from lobapi.exceptions.error_exception import ErrorException


class CampaignUploadsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(CampaignUploadsController, self).__init__(config)

    def list(self,
             campaign_id,
             accept):
        """Does a GET request to /uploads.

        Returns a list of your uploads. Optionally, filter uploads by campaign.

        Args:
            campaign_id (str): The request query parameter.
            accept (str): The request header parameter.

        Returns:
            List[AnArrayOfMatchingUploadsEachEntryInTheArrayIsASeparateUpload]:
                Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('campaignId')
                         .value(campaign_id))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AnArrayOfMatchingUploadsEachEntryInTheArrayIsASeparateUpload.from_dictionary)
        ).execute()

    def create(self,
               accept,
               body):
        """Does a POST request to /uploads.

        Creates a new upload with the provided properties

        Args:
            accept (str): The request header parameter.
            body (CreateRequest): The request body parameter.

        Returns:
            UploadCreatedSuccessfully: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadCreatedSuccessfully.from_dictionary)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', ValidationErrorException)
        ).execute()

    def retrieve(self,
                 upl_id,
                 accept):
        """Does a GET request to /uploads/{upl_id}.

        Retrieves the details of an existing upload. You need only supply the
        unique upload identifier that was returned upon upload creation.

        Args:
            upl_id (str): (Required) id of the upload
            accept (str): The request header parameter.

        Returns:
            ReturnsAnUploadObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAnUploadObject.from_dictionary)
            .local_error('404', 'Not Found', ErrorException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', ValidationErrorException)
        ).execute()

    def update(self,
               upl_id,
               accept,
               body):
        """Does a PATCH request to /uploads/{upl_id}.

        Update the details of an existing upload. You need only supply the
        unique identifier that was returned upon upload creation.

        Args:
            upl_id (str): (Required) id of the upload
            accept (str): The request header parameter.
            body (UpdateRequest): The request body parameter.

        Returns:
            ReturnsAnUploadObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAnUploadObject.from_dictionary)
            .local_error('404', 'Not Found', ErrorException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', ValidationErrorException)
        ).execute()

    def delete(self,
               upl_id):
        """Does a DELETE request to /uploads/{upl_id}.

        Delete an existing upload. You need only supply the unique identifier
        that was returned upon upload creation.

        Args:
            upl_id (str): (Required) id of the upload

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads/{upl_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def upload_file(self,
                    upl_id,
                    accept,
                    file):
        """Does a POST request to /uploads/{upl_id}/file.

        Upload an audience file and associate it with an upload.

        Args:
            upl_id (str): (Required) ID of the upload
            accept (str): The request header parameter.
            file (typing.BinaryIO): The request form parameter.

        Returns:
            SuccessfulResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/uploads/{upl_id}/file')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('upl_id')
                            .value(upl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessfulResponse.from_dictionary)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', ValidationErrorException)
        ).execute()
