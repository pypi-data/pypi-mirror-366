# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_a_check_object import ReturnsACheckObject
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_checks_each_entry_in_the_array_is_a_separate_check_the_previous_and_next_page_of_checks_can_be_retrieved_by_calling_the_endpoint_contained_in_the_previous_url_and_next_url_fie import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitChecksEachEntryInTheArrayIsASeparateCheckThePreviousAndNextPageOfChecksCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNextUrlFie
from lobapi.models.returns_true_if_the_delete_was_successful import ReturnsTrueIfTheDeleteWasSuccessful
from lobapi.exceptions.error_exception import ErrorException


class ChecksController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(ChecksController, self).__init__(config)

    def creates_a_new_check(self,
                            idempotency_key,
                            to,
                            mfrom,
                            bank_account,
                            amount):
        """Does a POST request to /checks.

        Creates a new check with the provided properties.

        Args:
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            to (str): (required) Must either be an address ID or an inline
                object with correct address parameters. Checks cannot be sent
                internationally (address_country must be US). The total string
                of the sum of address_line1 and address_line2 must be no
                longer than 50 characters combined. If an object is used, an
                address will be created, corrected, and standardized for free
                whenever possible using our US Address Verification engine,
                and returned back with an ID. Depending on your Print & Mail
                Edition, addresses may also be run additionally through
                National Change of Address (NCOA). If an address used does not
                meet your accountâ€™s US Mail Strictness Setting, the request
                will fail. Read more here.
            mfrom (str): (required) Must either be an address ID or an inline
                object with correct address parameters. Must be a US address.
                All addresses will be standardized into uppercase without
                being modified by verification.
            bank_account (str): (required) Must be a bank account ID. Only
                verified bank accounts may be used.
            amount (int): (required) A number that specifies the payment
                amount to be sent in dollars. Amounts will be rounded to 2
                decimal places and must be less than $1,000,000 (1000000).

        Returns:
            ReturnsACheckObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/checks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('to')
                        .value(to))
            .form_param(Parameter()
                        .key('from')
                        .value(mfrom))
            .form_param(Parameter()
                        .key('bank_account')
                        .value(bank_account))
            .form_param(Parameter()
                        .key('amount')
                        .value(amount))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsACheckObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list_all_checks(self):
        """Does a GET request to /checks.

        Returns a list of your checks. The checks are returned sorted by
        creation date, with the most recently created checks appearing first.

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitChecksEac
                hEntryInTheArrayIsASeparateCheckThePreviousAndNextPageOfChecksC
                anBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNe
                xtUrlFie: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/checks')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitChecksEachEntryInTheArrayIsASeparateCheckThePreviousAndNextPageOfChecksCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNextUrlFie.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def retrieve_check_with_given_id(self,
                                     chk_id):
        """Does a GET request to /checks/{chk_id}.

        Retrieves the details of an existing check. You need only supply the
        unique check identifier that was returned upon check creation.

        Args:
            chk_id (str): (Required) id of the check

        Returns:
            ReturnsACheckObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/checks/{chk_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('chk_id')
                            .value(chk_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsACheckObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def cancel_a_check(self,
                       chk_id):
        """Does a DELETE request to /checks/{chk_id}.

        Completely removes a check from production. This can only be done if
        the check has a `send_date` and the `send_date` has not yet passed. If
        the check is successfully canceled, you will not be charged for it.
        Read more on [cancellation
        windows](https://docs.lob.com/#cancellation) and
        [scheduling](https://docs.lob.com/#scheduled). Scheduling and
        cancellation is a premium feature. Upgrade to the appropriate Print &
        Mail Edition to gain access.

        Args:
            chk_id (str): (Required) id of the check

        Returns:
            ReturnsTrueIfTheDeleteWasSuccessful: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/checks/{chk_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('chk_id')
                            .value(chk_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTrueIfTheDeleteWasSuccessful.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
