# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single


class CardsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(CardsController, self).__init__(config)

    def create_a_new_card(self,
                          front,
                          description,
                          size,
                          back):
        """Does a POST request to /cards.

        Args:
            front (str): A PDF template for the front of the card
            description (str): Description of the card.
            size (str): The size of the card - Enum: "3.375x2.125"
                "2.125x3.375"
            back (str): A PDF template for the back of the card

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/cards')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('front')
                        .value(front))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('size')
                        .value(size))
            .form_param(Parameter()
                        .key('back')
                        .value(back))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).execute()

    def list_of_your_cards(self):
        """Does a GET request to /cards.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/cards')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('basic'))
        ).execute()

    def retrieve_a_card_with_a_given_id(self,
                                        card_id):
        """Does a GET request to /cards/{card_id}.

        Args:
            card_id (str): id of the card

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/cards/{card_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('card_id')
                            .value(card_id)
                            .should_encode(True))
            .auth(Single('basic'))
        ).execute()

    def update_card_with_given_id(self,
                                  card_id,
                                  description,
                                  auto_reorder):
        """Does a POST request to /cards/{card_id}.

        Args:
            card_id (str): id of the card
            description (str): Description of the card
            auto_reorder (bool): Allows for auto reordering

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/cards/{card_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('card_id')
                            .value(card_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('auto_reorder')
                        .value(auto_reorder))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).execute()

    def delete_a_card_with_given_id(self,
                                    card_id):
        """Does a DELETE request to /cards/{card_id}.

        Args:
            card_id (str): id of the card

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/cards/{card_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('card_id')
                            .value(card_id)
                            .should_encode(True))
            .auth(Single('basic'))
        ).execute()
