# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.campaign_created_successfully import CampaignCreatedSuccessfully
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_campaigns_each_entry_in_the_array_is_a_separate_campaign_the_previous_and_next_page_of_campaigns_can_be_retrieved_by_calling_the_endpoint_contained_in_the_previous_url_and_next import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitCampaignsEachEntryInTheArrayIsASeparateCampaignThePreviousAndNextPageOfCampaignsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext
from lobapi.models.returns_a_campaign_object import ReturnsACampaignObject
from lobapi.models.deleted_the_campaign import DeletedTheCampaign
from lobapi.exceptions.error_exception import ErrorException


class CampaignsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(CampaignsController, self).__init__(config)

    def create(self,
               x_lang_output,
               accept,
               name,
               schedule_type):
        """Does a POST request to /campaigns.

        Creates a new campaign with the provided properties

        Args:
            x_lang_output (str): * `native` - Translate response to the native
                language of the country in the request * `match` - match the
                response to the language in the request  Default response is
                in English.
            accept (str): The request header parameter.
            name (str): (Required) Name of the campaign.
            schedule_type (str): (Required) How the campaign should be
                scheduled. One of targeted_delivery, immediate, or
                scheduled_send_date

        Returns:
            CampaignCreatedSuccessfully: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/campaigns')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('x-lang-output')
                          .value(x_lang_output))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('schedule_type')
                        .value(schedule_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignCreatedSuccessfully.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list(self,
             accept):
        """Does a GET request to /campaigns.

        Returns a list of your campaigns. The campaigns are returned sorted by
        creation date, with the most recently created campaigns appearing
        first.

        Args:
            accept (str): The request header parameter.

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitCampaigns
                EachEntryInTheArrayIsASeparateCampaignThePreviousAndNextPageOfC
                ampaignsCanBeRetrievedByCallingTheEndpointContainedInThePreviou
                sUrlAndNext: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/campaigns')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitCampaignsEachEntryInTheArrayIsASeparateCampaignThePreviousAndNextPageOfCampaignsCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext.from_dictionary)
        ).execute()

    def retrieve(self,
                 cmp_id,
                 accept):
        """Does a GET request to /campaigns/{cmp_id}.

        Retrieves the details of an existing campaign. You need only supply
        the unique campaign identifier that was returned upon campaign
        creation.

        Args:
            cmp_id (str): (Required) id of the campaign
            accept (str): The request header parameter.

        Returns:
            ReturnsACampaignObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/campaigns/{cmp_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('cmp_id')
                            .value(cmp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsACampaignObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def update(self,
               cmp_id,
               accept):
        """Does a PATCH request to /campaigns/{cmp_id}.

        Update the details of an existing campaign. You need only supply the
        unique identifier that was returned upon campaign creation.

        Args:
            cmp_id (str): (Required) id of the campaign
            accept (str): The request header parameter.

        Returns:
            ReturnsACampaignObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/campaigns/{cmp_id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('cmp_id')
                            .value(cmp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsACampaignObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def delete(self,
               cmp_id,
               accept):
        """Does a DELETE request to /campaigns/{cmp_id}.

        Delete an existing campaign. You need only supply the unique
        identifier that was returned upon campaign creation.

        Args:
            cmp_id (str): (Required) id of the campaign
            accept (str): The request header parameter.

        Returns:
            DeletedTheCampaign: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/campaigns/{cmp_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('cmp_id')
                            .value(cmp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeletedTheCampaign.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
