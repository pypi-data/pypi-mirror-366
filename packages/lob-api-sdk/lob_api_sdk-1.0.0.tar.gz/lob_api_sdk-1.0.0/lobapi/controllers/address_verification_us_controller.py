# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_aus_autocompletion_object import ReturnsAUSAutocompletionObject
from lobapi.models.returns_aus_verification_object import ReturnsAUSVerificationObject
from lobapi.models.returns_an_us_verification_object import ReturnsAnUSVerificationObject
from lobapi.models.returns_a_zip_lookup_object_if_a_valid_zip_was_provided import ReturnsAZipLookupObjectIfAValidZipWasProvided
from lobapi.exceptions.error_exception import ErrorException


class AddressVerificationUSController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(AddressVerificationUSController, self).__init__(config)

    def autocomplete_a_partial_us_address(self,
                                          address_prefix,
                                          city):
        """Does a POST request to /us_autocompletions.

        Given an address prefix consisting of a partial primary line, as well
        as optional input of city, state, and zip code, this functionality
        returns up to 10 full US address suggestions. Not all of them will
        turn out to be valid addresses.

        Args:
            address_prefix (int): (required Only accepts numbers and street
                names in an alphanumeric format.
            city (str): (optional) input used to filter suggestions. Case
                insensitive, and does not match partial abbreviations.

        Returns:
            ReturnsAUSAutocompletionObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/us_autocompletions')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('address_prefix')
                        .value(address_prefix))
            .form_param(Parameter()
                        .key('city')
                        .value(city))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAUSAutocompletionObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def verify_a_us_or_us_territory_address_with_a_live_api_key(self,
                                                                case,
                                                                primary_line,
                                                                zip_code):
        """Does a POST request to /us_verifications.

        Verify a US or US territory address _with a live API key_. The address
        can be in components (e.g. `primary_line` is "185 Berry Street",
        `zip_code` is "94107") or as a single string (e.g. "185 Berry Street
        94107"), but not as both. Requests using a test API key validate
        required fields but return empty values unless specific `primary_line`
        values are provided.

        Args:
            case (str): (optional) Casing of the verified address. Possible
                values are `upper` and `proper` for uppercased (e.g. "PO BOX")
                and proper-cased (e.g. "PO Box"), respectively. Only affects
                `recipient`, `primary_line`, `secondary_line`, `urbanization`,
                and `last_line`. Default casing is `upper`.
            primary_line (str): (required) If not using the address property
            zip_code (int): The request form parameter.

        Returns:
            ReturnsAUSVerificationObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/us_verifications')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('case')
                         .value(case))
            .form_param(Parameter()
                        .key('primary_line')
                        .value(primary_line))
            .form_param(Parameter()
                        .key('zip_code')
                        .value(zip_code))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAUSVerificationObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def verify_in_bulk_a_list_of_us_or_us_territory_address_with_a_live_api_key(self,
                                                                                case,
                                                                                body):
        """Does a POST request to /bulk/us_verifications.

        Verify a list of US or US territory addresses _with a live API key_.
        Requests to this endpoint with a test API key will return a dummy
        response based on the primary line you input.

        Args:
            case (str): Casing of the verified address. Possible values are
                `upper` and `proper` for uppercased (e.g. "PO BOX") and
                proper-cased (e.g. "PO Box"), respectively. Only affects
                `recipient`, `primary_line`, `secondary_line`, `urbanization`,
                and `last_line`. Default casing is `upper`.
            body (VerifyInBulkAListOfUSOrUSTerritoryAddressWithALiveAPIKeyReque
                st): The request body parameter.

        Returns:
            ReturnsAnUSVerificationObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bulk/us_verifications')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('case')
                         .value(case))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAnUSVerificationObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def zip_lookups_based_on_information_pertaining_to_a_given_zip_code(self,
                                                                        zip_code):
        """Does a POST request to /us_zip_lookups.

        Returns information about a ZIP code

        Args:
            zip_code (int): (Required) A 5-digit ZIP code.

        Returns:
            ReturnsAZipLookupObjectIfAValidZipWasProvided: Response from the
                API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/us_zip_lookups')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('zip_code')
                        .value(zip_code))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsAZipLookupObjectIfAValidZipWasProvided.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
