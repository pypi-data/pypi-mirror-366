# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_the_template_version_with_the_given_template_and_version_ids import ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_template_versions_each_entry_in_the_array_is_a_separate_template_version_object_the_previous_and_next_page_of_template_versions_can_be_retrieved_by_calling_the_endpoint_contained import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplateVersionsEachEntryInTheArrayIsASeparateTemplateVersionObjectThePreviousAndNextPageOfTemplateVersionsCanBeRetrievedByCallingTheEndpointContained
from lobapi.models.returns_true_if_the_delete_was_successful import ReturnsTrueIfTheDeleteWasSuccessful
from lobapi.exceptions.error_exception import ErrorException


class TemplateVersionsController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(TemplateVersionsController, self).__init__(config)

    def creates_a_new_template_version_object(self,
                                              tmpl_id,
                                              idempotency_key,
                                              html):
        """Does a POST request to /templates/{tmpl_id}/versions.

        Creates a new template version attached to the specified template.

        Args:
            tmpl_id (str): (Required) id of the template
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            html (str): (required) An HTML string of less than 100,000
                characters. See here for guidance on designing HTML templates.
                Please see endpoint specific documentation for any other
                product-specific HTML details. Newly created versions will not
                be published until the published_version of the template is
                updated. Merge variables should not include delimiting
                whitespace. If there is a syntax error within your variable
                names within your HTML, then an error will be thrown, e.g.
                using a {{#users}} opening tag without the corresponding
                closing tag {{/users}}.

        Returns:
            ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds:
                Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/versions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('html')
                        .value(html))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list_all_template_versions(self,
                                   tmpl_id):
        """Does a GET request to /templates/{tmpl_id}/versions.

        Returns a list of template versions for the passed `template_id`. The
        template versions are sorted by creation date, with the most recently
        created appearing first.

        Args:
            tmpl_id (str): (Required) id of the template

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplateV
                ersionsEachEntryInTheArrayIsASeparateTemplateVersionObjectThePr
                eviousAndNextPageOfTemplateVersionsCanBeRetrievedByCallingTheEn
                dpointContained: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/versions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplateVersionsEachEntryInTheArrayIsASeparateTemplateVersionObjectThePreviousAndNextPageOfTemplateVersionsCanBeRetrievedByCallingTheEndpointContained.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def retrieve_template_version_with_given_template_and_version_ids(self,
                                                                      tmpl_id,
                                                                      vrsn_id):
        """Does a GET request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Retrieves the template version with the given template and version ids.

        Args:
            tmpl_id (str): (Required) id of the template
            vrsn_id (str): (Required) id of the template_version

        Returns:
            ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds:
                Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def updates_the_template_version_with_given_template_and_version_ids(self,
                                                                         tmpl_id,
                                                                         vrsn_id,
                                                                         idempotency_key,
                                                                         description):
        """Does a POST request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Retrieves the template version with the given template and version ids.

        Args:
            tmpl_id (str): (Required) id of the template
            vrsn_id (str): (Required) id of the template_version
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            description (str): (optional) An internal description that
                identifies this resource. Must be no longer than 255
                characters.

        Returns:
            ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds:
                Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTheTemplateVersionWithTheGivenTemplateAndVersionIds.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def deletes_the_template_version_with_given_template_and_version_ids_if_possible(self,
                                                                                     tmpl_id,
                                                                                     vrsn_id):
        """Does a DELETE request to /templates/{tmpl_id}/versions/{vrsn_id}.

        Permanently deletes a template version. A template's
        `published_version` can not be deleted.

        Args:
            tmpl_id (str): (Required) id of the template
            vrsn_id (str): (Required) id of the template_version

        Returns:
            ReturnsTrueIfTheDeleteWasSuccessful: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/versions/{vrsn_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('vrsn_id')
                            .value(vrsn_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTrueIfTheDeleteWasSuccessful.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
