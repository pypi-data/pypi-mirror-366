# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lobapi.api_helper import APIHelper
from lobapi.configuration import Server
from lobapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lobapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from lobapi.models.returns_a_template_object import ReturnsATemplateObject
from lobapi.models.a_dictionary_with_a_data_property_that_contains_an_array_of_up_to_limit_templates_each_entry_in_the_array_is_a_separate_template_the_previous_and_next_page_of_templates_can_be_retrieved_by_calling_the_endpoint_contained_in_the_previous_url_and_next import ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplatesEachEntryInTheArrayIsASeparateTemplateThePreviousAndNextPageOfTemplatesCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext
from lobapi.models.returns_true_if_the_delete_was_successful import ReturnsTrueIfTheDeleteWasSuccessful
from lobapi.exceptions.error_exception import ErrorException


class TemplatesController(BaseController):

    """A Controller to access Endpoints in the lobapi API."""
    def __init__(self, config):
        super(TemplatesController, self).__init__(config)

    def creates_a_new_template_object(self,
                                      idempotency_key,
                                      html):
        """Does a POST request to /templates.

        Creates a new template given information

        Args:
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            html (str): (Required) An HTML string of less than 100,000
                characters to be used as the published_version of this
                template. See here for guidance on designing HTML templates.
                Please see endpoint specific documentation for any other
                product-specific HTML details. Merge variables should not
                include delimiting whitespace. If there is a syntax error with
                your variable names within your HTML, then an error will be
                thrown, e.g. using a {{#users}} opening tag without the
                corresponding closing tag {{/users}}.

        Returns:
            ReturnsATemplateObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('html')
                        .value(html))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsATemplateObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def list_all_templates(self):
        """Does a GET request to /templates.

        Returns a list of your templates. The templates are returned sorted by
        creation date, with the most recently created templates appearing
        first.

        Returns:
            ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplates
                EachEntryInTheArrayIsASeparateTemplateThePreviousAndNextPageOfT
                emplatesCanBeRetrievedByCallingTheEndpointContainedInThePreviou
                sUrlAndNext: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ADictionaryWithADataPropertyThatContainsAnArrayOfUpToLimitTemplatesEachEntryInTheArrayIsASeparateTemplateThePreviousAndNextPageOfTemplatesCanBeRetrievedByCallingTheEndpointContainedInThePreviousUrlAndNext.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def retrieve_template_with_given_id(self,
                                        tmpl_id):
        """Does a GET request to /templates/{tmpl_id}.

        Retrieves the details of an existing template. You need only supply
        the unique template identifier that was returned upon template
        creation.

        Args:
            tmpl_id (str): (Required) id of the template

        Returns:
            ReturnsATemplateObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsATemplateObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def compile_the_template_into_html(self,
                                       tmpl_id):
        """Does a GET request to /templates/{tmpl_id}/compile.

        Compiles a template with passed in merge variables into html.

        Args:
            tmpl_id (str): (Required) id of the template

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}/compile')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def update_description_and_or_published_version_of_a_template(self,
                                                                  tmpl_id,
                                                                  idempotency_key,
                                                                  description):
        """Does a POST request to /templates/{tmpl_id}.

        Updates the description and/or published version of the template with
        the given id. To update the template's html, create a new version of
        the template.

        Args:
            tmpl_id (str): (Required) id of the template
            idempotency_key (str): A string of no longer than 256 characters
                that uniquely identifies this resource. For more help
                integrating idempotency keys, refer to our [implementation
                guide](https://www.lob.com/guides#idempotent_request).
            description (str): (optional) An internal description that
                identifies this resource. Must be no longer than 255
                characters.

        Returns:
            ReturnsATemplateObject: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Idempotency-Key')
                          .value(idempotency_key))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsATemplateObject.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()

    def deletes_template_with_given_id(self,
                                       tmpl_id):
        """Does a DELETE request to /templates/{tmpl_id}.

        Deletes the details of an existing template. You need only supply the
        unique customer identifier that was returned upon template creation.

        Args:
            tmpl_id (str): (Required) id of the template

        Returns:
            ReturnsTrueIfTheDeleteWasSuccessful: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/templates/{tmpl_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('tmpl_id')
                            .value(tmpl_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnsTrueIfTheDeleteWasSuccessful.from_dictionary)
            .local_error('500', 'Internal Server Error', ErrorException)
        ).execute()
