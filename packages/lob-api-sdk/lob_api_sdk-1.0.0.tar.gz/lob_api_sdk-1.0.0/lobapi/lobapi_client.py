# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from lobapi.configuration import Configuration
from lobapi.controllers.base_controller import BaseController
from lobapi.configuration import Environment
from lobapi.http.auth.basic_auth import BasicAuth
from lobapi.controllers.addresses_controller import AddressesController
from lobapi.controllers.address_verification_intl_controller\
    import AddressVerificationIntlController
from lobapi.controllers.address_verification_us_controller\
    import AddressVerificationUSController
from lobapi.controllers.bank_accounts_controller import BankAccountsController
from lobapi.controllers.billing_groups_controller\
    import BillingGroupsController
from lobapi.controllers.campaigns_controller import CampaignsController
from lobapi.controllers.campaign_creatives_controller\
    import CampaignCreativesController
from lobapi.controllers.campaign_uploads_controller\
    import CampaignUploadsController
from lobapi.controllers.cards_controller import CardsController
from lobapi.controllers.card_orders_controller import CardOrdersController
from lobapi.controllers.checks_controller import ChecksController
from lobapi.controllers.letters_controller import LettersController
from lobapi.controllers.postcards_controller import PostcardsController
from lobapi.controllers.reverse_geocode_controller\
    import ReverseGeocodeController
from lobapi.controllers.self_mailers_controller import SelfMailersController
from lobapi.controllers.templates_controller import TemplatesController
from lobapi.controllers.template_versions_controller\
    import TemplateVersionsController
from lobapi.controllers.zipcode_controller import ZipcodeController


class LobapiClient(object):
    @LazyProperty
    def addresses(self):
        return AddressesController(self.global_configuration)

    @LazyProperty
    def address_verification_intl(self):
        return AddressVerificationIntlController(self.global_configuration)

    @LazyProperty
    def address_verification_us(self):
        return AddressVerificationUSController(self.global_configuration)

    @LazyProperty
    def bank_accounts(self):
        return BankAccountsController(self.global_configuration)

    @LazyProperty
    def billing_groups(self):
        return BillingGroupsController(self.global_configuration)

    @LazyProperty
    def campaigns(self):
        return CampaignsController(self.global_configuration)

    @LazyProperty
    def campaign_creatives(self):
        return CampaignCreativesController(self.global_configuration)

    @LazyProperty
    def campaign_uploads(self):
        return CampaignUploadsController(self.global_configuration)

    @LazyProperty
    def cards(self):
        return CardsController(self.global_configuration)

    @LazyProperty
    def card_orders(self):
        return CardOrdersController(self.global_configuration)

    @LazyProperty
    def checks(self):
        return ChecksController(self.global_configuration)

    @LazyProperty
    def letters(self):
        return LettersController(self.global_configuration)

    @LazyProperty
    def postcards(self):
        return PostcardsController(self.global_configuration)

    @LazyProperty
    def reverse_geocode(self):
        return ReverseGeocodeController(self.global_configuration)

    @LazyProperty
    def self_mailers(self):
        return SelfMailersController(self.global_configuration)

    @LazyProperty
    def templates(self):
        return TemplatesController(self.global_configuration)

    @LazyProperty
    def template_versions(self):
        return TemplateVersionsController(self.global_configuration)

    @LazyProperty
    def zipcode(self):
        return ZipcodeController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, username=None,
                 password=None, basic_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, username=username, password=password,
            basic_auth_credentials=basic_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['basic']}
        self.auth_managers['basic'] = BasicAuth(
            self.config.basic_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

