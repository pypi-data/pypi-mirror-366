# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.column_mapping_2 import ColumnMapping2


class UpdateRequest(object):

    """Implementation of the 'UpdateRequest' model.

    Attributes:
        column_mapping (ColumnMapping2): The model property of type
            ColumnMapping2.
        state (str): The model property of type str.
        original_filename (str): The model property of type str.
        overwrite_column_mapping (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "column_mapping": 'columnMapping',
        "state": 'state',
        "original_filename": 'originalFilename',
        "overwrite_column_mapping": 'overwriteColumnMapping'
    }

    def __init__(self,
                 column_mapping=None,
                 state=None,
                 original_filename=None,
                 overwrite_column_mapping=None):
        """Constructor for the UpdateRequest class"""

        # Initialize members of the class
        self.column_mapping = column_mapping 
        self.state = state 
        self.original_filename = original_filename 
        self.overwrite_column_mapping = overwrite_column_mapping 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        column_mapping = ColumnMapping2.from_dictionary(dictionary.get('columnMapping')) if dictionary.get('columnMapping') else None
        state = dictionary.get("state") if dictionary.get("state") else None
        original_filename = dictionary.get("originalFilename") if dictionary.get("originalFilename") else None
        overwrite_column_mapping = dictionary.get("overwriteColumnMapping") if "overwriteColumnMapping" in dictionary.keys() else None
        # Return an object of this model
        return cls(column_mapping,
                   state,
                   original_filename,
                   overwrite_column_mapping)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'column_mapping={self.column_mapping!r}, '
                f'state={self.state!r}, '
                f'original_filename={self.original_filename!r}, '
                f'overwrite_column_mapping={self.overwrite_column_mapping!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'column_mapping={self.column_mapping!s}, '
                f'state={self.state!s}, '
                f'original_filename={self.original_filename!s}, '
                f'overwrite_column_mapping={self.overwrite_column_mapping!s})')
