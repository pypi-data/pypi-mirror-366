# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class City(object):

    """Implementation of the 'City' model.

    Attributes:
        city (str): The model property of type str.
        state (str): The model property of type str.
        county (str): The model property of type str.
        county_fips (str): The model property of type str.
        preferred (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "city": 'city',
        "state": 'state',
        "county": 'county',
        "county_fips": 'county_fips',
        "preferred": 'preferred'
    }

    def __init__(self,
                 city=None,
                 state=None,
                 county=None,
                 county_fips=None,
                 preferred=None):
        """Constructor for the City class"""

        # Initialize members of the class
        self.city = city 
        self.state = state 
        self.county = county 
        self.county_fips = county_fips 
        self.preferred = preferred 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        county = dictionary.get("county") if dictionary.get("county") else None
        county_fips = dictionary.get("county_fips") if dictionary.get("county_fips") else None
        preferred = dictionary.get("preferred") if "preferred" in dictionary.keys() else None
        # Return an object of this model
        return cls(city,
                   state,
                   county,
                   county_fips,
                   preferred)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'county={self.county!r}, '
                f'county_fips={self.county_fips!r}, '
                f'preferred={self.preferred!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'county={self.county!s}, '
                f'county_fips={self.county_fips!s}, '
                f'preferred={self.preferred!s})')
