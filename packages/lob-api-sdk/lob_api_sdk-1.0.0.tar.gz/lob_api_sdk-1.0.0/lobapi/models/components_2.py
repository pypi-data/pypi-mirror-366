# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Components2(object):

    """Implementation of the 'Components2' model.

    Attributes:
        primary_number (str): The model property of type str.
        street_predirection (str): The model property of type str.
        street_name (str): The model property of type str.
        street_suffix (str): The model property of type str.
        street_postdirection (str): The model property of type str.
        secondary_designator (str): The model property of type str.
        secondary_number (str): The model property of type str.
        pmb_designator (str): The model property of type str.
        pmb_number (str): The model property of type str.
        extra_secondary_designator (str): The model property of type str.
        extra_secondary_number (str): The model property of type str.
        city (str): The model property of type str.
        state (str): The model property of type str.
        zip_code (str): The model property of type str.
        zip_code_plus_4 (str): The model property of type str.
        zip_code_type (str): The model property of type str.
        delivery_point_barcode (str): The model property of type str.
        address_type (str): The model property of type str.
        record_type (str): The model property of type str.
        default_building_address (bool): The model property of type bool.
        county (str): The model property of type str.
        county_fips (str): The model property of type str.
        carrier_route (str): The model property of type str.
        carrier_route_type (str): The model property of type str.
        latitude (float): The model property of type float.
        longitude (float): The model property of type float.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_number": 'primary_number',
        "street_predirection": 'street_predirection',
        "street_name": 'street_name',
        "street_suffix": 'street_suffix',
        "street_postdirection": 'street_postdirection',
        "secondary_designator": 'secondary_designator',
        "secondary_number": 'secondary_number',
        "pmb_designator": 'pmb_designator',
        "pmb_number": 'pmb_number',
        "extra_secondary_designator": 'extra_secondary_designator',
        "extra_secondary_number": 'extra_secondary_number',
        "city": 'city',
        "state": 'state',
        "zip_code": 'zip_code',
        "zip_code_plus_4": 'zip_code_plus_4',
        "zip_code_type": 'zip_code_type',
        "delivery_point_barcode": 'delivery_point_barcode',
        "address_type": 'address_type',
        "record_type": 'record_type',
        "default_building_address": 'default_building_address',
        "county": 'county',
        "county_fips": 'county_fips',
        "carrier_route": 'carrier_route',
        "carrier_route_type": 'carrier_route_type',
        "latitude": 'latitude',
        "longitude": 'longitude'
    }

    def __init__(self,
                 primary_number=None,
                 street_predirection=None,
                 street_name=None,
                 street_suffix=None,
                 street_postdirection=None,
                 secondary_designator=None,
                 secondary_number=None,
                 pmb_designator=None,
                 pmb_number=None,
                 extra_secondary_designator=None,
                 extra_secondary_number=None,
                 city=None,
                 state=None,
                 zip_code=None,
                 zip_code_plus_4=None,
                 zip_code_type=None,
                 delivery_point_barcode=None,
                 address_type=None,
                 record_type=None,
                 default_building_address=None,
                 county=None,
                 county_fips=None,
                 carrier_route=None,
                 carrier_route_type=None,
                 latitude=None,
                 longitude=None):
        """Constructor for the Components2 class"""

        # Initialize members of the class
        self.primary_number = primary_number 
        self.street_predirection = street_predirection 
        self.street_name = street_name 
        self.street_suffix = street_suffix 
        self.street_postdirection = street_postdirection 
        self.secondary_designator = secondary_designator 
        self.secondary_number = secondary_number 
        self.pmb_designator = pmb_designator 
        self.pmb_number = pmb_number 
        self.extra_secondary_designator = extra_secondary_designator 
        self.extra_secondary_number = extra_secondary_number 
        self.city = city 
        self.state = state 
        self.zip_code = zip_code 
        self.zip_code_plus_4 = zip_code_plus_4 
        self.zip_code_type = zip_code_type 
        self.delivery_point_barcode = delivery_point_barcode 
        self.address_type = address_type 
        self.record_type = record_type 
        self.default_building_address = default_building_address 
        self.county = county 
        self.county_fips = county_fips 
        self.carrier_route = carrier_route 
        self.carrier_route_type = carrier_route_type 
        self.latitude = latitude 
        self.longitude = longitude 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_number = dictionary.get("primary_number") if dictionary.get("primary_number") else None
        street_predirection = dictionary.get("street_predirection") if dictionary.get("street_predirection") else None
        street_name = dictionary.get("street_name") if dictionary.get("street_name") else None
        street_suffix = dictionary.get("street_suffix") if dictionary.get("street_suffix") else None
        street_postdirection = dictionary.get("street_postdirection") if dictionary.get("street_postdirection") else None
        secondary_designator = dictionary.get("secondary_designator") if dictionary.get("secondary_designator") else None
        secondary_number = dictionary.get("secondary_number") if dictionary.get("secondary_number") else None
        pmb_designator = dictionary.get("pmb_designator") if dictionary.get("pmb_designator") else None
        pmb_number = dictionary.get("pmb_number") if dictionary.get("pmb_number") else None
        extra_secondary_designator = dictionary.get("extra_secondary_designator") if dictionary.get("extra_secondary_designator") else None
        extra_secondary_number = dictionary.get("extra_secondary_number") if dictionary.get("extra_secondary_number") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        zip_code_plus_4 = dictionary.get("zip_code_plus_4") if dictionary.get("zip_code_plus_4") else None
        zip_code_type = dictionary.get("zip_code_type") if dictionary.get("zip_code_type") else None
        delivery_point_barcode = dictionary.get("delivery_point_barcode") if dictionary.get("delivery_point_barcode") else None
        address_type = dictionary.get("address_type") if dictionary.get("address_type") else None
        record_type = dictionary.get("record_type") if dictionary.get("record_type") else None
        default_building_address = dictionary.get("default_building_address") if "default_building_address" in dictionary.keys() else None
        county = dictionary.get("county") if dictionary.get("county") else None
        county_fips = dictionary.get("county_fips") if dictionary.get("county_fips") else None
        carrier_route = dictionary.get("carrier_route") if dictionary.get("carrier_route") else None
        carrier_route_type = dictionary.get("carrier_route_type") if dictionary.get("carrier_route_type") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        # Return an object of this model
        return cls(primary_number,
                   street_predirection,
                   street_name,
                   street_suffix,
                   street_postdirection,
                   secondary_designator,
                   secondary_number,
                   pmb_designator,
                   pmb_number,
                   extra_secondary_designator,
                   extra_secondary_number,
                   city,
                   state,
                   zip_code,
                   zip_code_plus_4,
                   zip_code_type,
                   delivery_point_barcode,
                   address_type,
                   record_type,
                   default_building_address,
                   county,
                   county_fips,
                   carrier_route,
                   carrier_route_type,
                   latitude,
                   longitude)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'primary_number={self.primary_number!r}, '
                f'street_predirection={self.street_predirection!r}, '
                f'street_name={self.street_name!r}, '
                f'street_suffix={self.street_suffix!r}, '
                f'street_postdirection={self.street_postdirection!r}, '
                f'secondary_designator={self.secondary_designator!r}, '
                f'secondary_number={self.secondary_number!r}, '
                f'pmb_designator={self.pmb_designator!r}, '
                f'pmb_number={self.pmb_number!r}, '
                f'extra_secondary_designator={self.extra_secondary_designator!r}, '
                f'extra_secondary_number={self.extra_secondary_number!r}, '
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'zip_code={self.zip_code!r}, '
                f'zip_code_plus_4={self.zip_code_plus_4!r}, '
                f'zip_code_type={self.zip_code_type!r}, '
                f'delivery_point_barcode={self.delivery_point_barcode!r}, '
                f'address_type={self.address_type!r}, '
                f'record_type={self.record_type!r}, '
                f'default_building_address={self.default_building_address!r}, '
                f'county={self.county!r}, '
                f'county_fips={self.county_fips!r}, '
                f'carrier_route={self.carrier_route!r}, '
                f'carrier_route_type={self.carrier_route_type!r}, '
                f'latitude={self.latitude!r}, '
                f'longitude={self.longitude!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'primary_number={self.primary_number!s}, '
                f'street_predirection={self.street_predirection!s}, '
                f'street_name={self.street_name!s}, '
                f'street_suffix={self.street_suffix!s}, '
                f'street_postdirection={self.street_postdirection!s}, '
                f'secondary_designator={self.secondary_designator!s}, '
                f'secondary_number={self.secondary_number!s}, '
                f'pmb_designator={self.pmb_designator!s}, '
                f'pmb_number={self.pmb_number!s}, '
                f'extra_secondary_designator={self.extra_secondary_designator!s}, '
                f'extra_secondary_number={self.extra_secondary_number!s}, '
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'zip_code={self.zip_code!s}, '
                f'zip_code_plus_4={self.zip_code_plus_4!s}, '
                f'zip_code_type={self.zip_code_type!s}, '
                f'delivery_point_barcode={self.delivery_point_barcode!s}, '
                f'address_type={self.address_type!s}, '
                f'record_type={self.record_type!s}, '
                f'default_building_address={self.default_building_address!s}, '
                f'county={self.county!s}, '
                f'county_fips={self.county_fips!s}, '
                f'carrier_route={self.carrier_route!s}, '
                f'carrier_route_type={self.carrier_route_type!s}, '
                f'latitude={self.latitude!s}, '
                f'longitude={self.longitude!s})')
