# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Detail(object):

    """Implementation of the 'Detail' model.

    Attributes:
        loc (List[str]): The model property of type List[str].
        msg (str): The model property of type str.
        mtype (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "loc": 'loc',
        "msg": 'msg',
        "mtype": 'type'
    }

    def __init__(self,
                 loc=None,
                 msg=None,
                 mtype=None):
        """Constructor for the Detail class"""

        # Initialize members of the class
        self.loc = loc 
        self.msg = msg 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        loc = dictionary.get("loc") if dictionary.get("loc") else None
        msg = dictionary.get("msg") if dictionary.get("msg") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        # Return an object of this model
        return cls(loc,
                   msg,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'loc={self.loc!r}, '
                f'msg={self.msg!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'loc={self.loc!s}, '
                f'msg={self.msg!s}, '
                f'mtype={self.mtype!s})')
