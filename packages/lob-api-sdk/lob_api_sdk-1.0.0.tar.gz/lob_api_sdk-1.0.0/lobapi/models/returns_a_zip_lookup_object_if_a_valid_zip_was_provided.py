# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.city import City


class ReturnsAZipLookupObjectIfAValidZipWasProvided(object):

    """Implementation of the 'Returns a zip lookup object if a valid zip was provided.' model.

    Attributes:
        cities (List[City]): The model property of type List[City].
        id (str): The model property of type str.
        object (str): The model property of type str.
        zip_code (str): The model property of type str.
        zip_code_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cities": 'cities',
        "id": 'id',
        "object": 'object',
        "zip_code": 'zip_code',
        "zip_code_type": 'zip_code_type'
    }

    def __init__(self,
                 cities=None,
                 id=None,
                 object=None,
                 zip_code=None,
                 zip_code_type=None):
        """Constructor for the ReturnsAZipLookupObjectIfAValidZipWasProvided class"""

        # Initialize members of the class
        self.cities = cities 
        self.id = id 
        self.object = object 
        self.zip_code = zip_code 
        self.zip_code_type = zip_code_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        cities = None
        if dictionary.get('cities') is not None:
            cities = [City.from_dictionary(x) for x in dictionary.get('cities')]
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        zip_code_type = dictionary.get("zip_code_type") if dictionary.get("zip_code_type") else None
        # Return an object of this model
        return cls(cities,
                   id,
                   object,
                   zip_code,
                   zip_code_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'cities={self.cities!r}, '
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'zip_code={self.zip_code!r}, '
                f'zip_code_type={self.zip_code_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'cities={self.cities!s}, '
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'zip_code={self.zip_code!s}, '
                f'zip_code_type={self.zip_code_type!s})')
