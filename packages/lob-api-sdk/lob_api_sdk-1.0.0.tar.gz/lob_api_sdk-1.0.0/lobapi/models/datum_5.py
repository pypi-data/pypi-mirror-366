# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.from_4 import From4
from lobapi.models.thumbnail import Thumbnail
from lobapi.models.to_4 import To4


class Datum5(object):

    """Implementation of the 'Datum5' model.

    Attributes:
        id (str): The model property of type str.
        description (str): The model property of type str.
        metadata (Any): The model property of type Any.
        to (To4): The model property of type To4.
        mfrom (From4): The model property of type From4.
        color (bool): The model property of type bool.
        double_sided (bool): The model property of type bool.
        address_placement (str): The model property of type str.
        return_envelope (bool): The model property of type bool.
        perforated_page (str): The model property of type str.
        extra_service (str): The model property of type str.
        custom_envelope (str): The model property of type str.
        mail_type (str): The model property of type str.
        url (str): The model property of type str.
        merge_variables (str): The model property of type str.
        carrier (str): The model property of type str.
        tracking_number (str): The model property of type str.
        tracking_events (List[str]): The model property of type List[str].
        thumbnails (List[Thumbnail]): The model property of type
            List[Thumbnail].
        expected_delivery_date (str): The model property of type str.
        date_created (str): The model property of type str.
        date_modified (str): The model property of type str.
        send_date (str): The model property of type str.
        object (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "description": 'description',
        "metadata": 'metadata',
        "to": 'to',
        "mfrom": 'from',
        "color": 'color',
        "double_sided": 'double_sided',
        "address_placement": 'address_placement',
        "return_envelope": 'return_envelope',
        "perforated_page": 'perforated_page',
        "extra_service": 'extra_service',
        "custom_envelope": 'custom_envelope',
        "mail_type": 'mail_type',
        "url": 'url',
        "merge_variables": 'merge_variables',
        "carrier": 'carrier',
        "tracking_number": 'tracking_number',
        "tracking_events": 'tracking_events',
        "thumbnails": 'thumbnails',
        "expected_delivery_date": 'expected_delivery_date',
        "date_created": 'date_created',
        "date_modified": 'date_modified',
        "send_date": 'send_date',
        "object": 'object'
    }

    _nullables = [
        'perforated_page',
        'extra_service',
        'custom_envelope',
        'merge_variables',
        'tracking_number',
    ]

    def __init__(self,
                 id=None,
                 description=None,
                 metadata=None,
                 to=None,
                 mfrom=None,
                 color=None,
                 double_sided=None,
                 address_placement=None,
                 return_envelope=None,
                 perforated_page=None,
                 extra_service=None,
                 custom_envelope=None,
                 mail_type=None,
                 url=None,
                 merge_variables=None,
                 carrier=None,
                 tracking_number=None,
                 tracking_events=None,
                 thumbnails=None,
                 expected_delivery_date=None,
                 date_created=None,
                 date_modified=None,
                 send_date=None,
                 object=None):
        """Constructor for the Datum5 class"""

        # Initialize members of the class
        self.id = id 
        self.description = description 
        self.metadata = metadata 
        self.to = to 
        self.mfrom = mfrom 
        self.color = color 
        self.double_sided = double_sided 
        self.address_placement = address_placement 
        self.return_envelope = return_envelope 
        self.perforated_page = perforated_page 
        self.extra_service = extra_service 
        self.custom_envelope = custom_envelope 
        self.mail_type = mail_type 
        self.url = url 
        self.merge_variables = merge_variables 
        self.carrier = carrier 
        self.tracking_number = tracking_number 
        self.tracking_events = tracking_events 
        self.thumbnails = thumbnails 
        self.expected_delivery_date = expected_delivery_date 
        self.date_created = date_created 
        self.date_modified = date_modified 
        self.send_date = send_date 
        self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        to = To4.from_dictionary(dictionary.get('to')) if dictionary.get('to') else None
        mfrom = From4.from_dictionary(dictionary.get('from')) if dictionary.get('from') else None
        color = dictionary.get("color") if "color" in dictionary.keys() else None
        double_sided = dictionary.get("double_sided") if "double_sided" in dictionary.keys() else None
        address_placement = dictionary.get("address_placement") if dictionary.get("address_placement") else None
        return_envelope = dictionary.get("return_envelope") if "return_envelope" in dictionary.keys() else None
        perforated_page = dictionary.get("perforated_page") if dictionary.get("perforated_page") else None
        extra_service = dictionary.get("extra_service") if dictionary.get("extra_service") else None
        custom_envelope = dictionary.get("custom_envelope") if dictionary.get("custom_envelope") else None
        mail_type = dictionary.get("mail_type") if dictionary.get("mail_type") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        merge_variables = dictionary.get("merge_variables") if dictionary.get("merge_variables") else None
        carrier = dictionary.get("carrier") if dictionary.get("carrier") else None
        tracking_number = dictionary.get("tracking_number") if dictionary.get("tracking_number") else None
        tracking_events = dictionary.get("tracking_events") if dictionary.get("tracking_events") else None
        thumbnails = None
        if dictionary.get('thumbnails') is not None:
            thumbnails = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnails')]
        expected_delivery_date = dictionary.get("expected_delivery_date") if dictionary.get("expected_delivery_date") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        send_date = dictionary.get("send_date") if dictionary.get("send_date") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        # Return an object of this model
        return cls(id,
                   description,
                   metadata,
                   to,
                   mfrom,
                   color,
                   double_sided,
                   address_placement,
                   return_envelope,
                   perforated_page,
                   extra_service,
                   custom_envelope,
                   mail_type,
                   url,
                   merge_variables,
                   carrier,
                   tracking_number,
                   tracking_events,
                   thumbnails,
                   expected_delivery_date,
                   date_created,
                   date_modified,
                   send_date,
                   object)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'description={self.description!r}, '
                f'metadata={self.metadata!r}, '
                f'to={self.to!r}, '
                f'mfrom={self.mfrom!r}, '
                f'color={self.color!r}, '
                f'double_sided={self.double_sided!r}, '
                f'address_placement={self.address_placement!r}, '
                f'return_envelope={self.return_envelope!r}, '
                f'perforated_page={self.perforated_page!r}, '
                f'extra_service={self.extra_service!r}, '
                f'custom_envelope={self.custom_envelope!r}, '
                f'mail_type={self.mail_type!r}, '
                f'url={self.url!r}, '
                f'merge_variables={self.merge_variables!r}, '
                f'carrier={self.carrier!r}, '
                f'tracking_number={self.tracking_number!r}, '
                f'tracking_events={self.tracking_events!r}, '
                f'thumbnails={self.thumbnails!r}, '
                f'expected_delivery_date={self.expected_delivery_date!r}, '
                f'date_created={self.date_created!r}, '
                f'date_modified={self.date_modified!r}, '
                f'send_date={self.send_date!r}, '
                f'object={self.object!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'description={self.description!s}, '
                f'metadata={self.metadata!s}, '
                f'to={self.to!s}, '
                f'mfrom={self.mfrom!s}, '
                f'color={self.color!s}, '
                f'double_sided={self.double_sided!s}, '
                f'address_placement={self.address_placement!s}, '
                f'return_envelope={self.return_envelope!s}, '
                f'perforated_page={self.perforated_page!s}, '
                f'extra_service={self.extra_service!s}, '
                f'custom_envelope={self.custom_envelope!s}, '
                f'mail_type={self.mail_type!s}, '
                f'url={self.url!s}, '
                f'merge_variables={self.merge_variables!s}, '
                f'carrier={self.carrier!s}, '
                f'tracking_number={self.tracking_number!s}, '
                f'tracking_events={self.tracking_events!s}, '
                f'thumbnails={self.thumbnails!s}, '
                f'expected_delivery_date={self.expected_delivery_date!s}, '
                f'date_created={self.date_created!s}, '
                f'date_modified={self.date_modified!s}, '
                f'send_date={self.send_date!s}, '
                f'object={self.object!s})')
