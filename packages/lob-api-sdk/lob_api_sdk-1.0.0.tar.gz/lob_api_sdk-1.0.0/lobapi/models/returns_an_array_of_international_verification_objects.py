# -*- coding: utf-8 -*-

"""
lobapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lobapi.models.address_1 import Address1


class ReturnsAnArrayOfInternationalVerificationObjects(object):

    """Implementation of the 'Returns an array of international verification objects.' model.

    Attributes:
        addresses (List[Address1]): The model property of type List[Address1].
        errors (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "addresses": 'addresses',
        "errors": 'errors'
    }

    def __init__(self,
                 addresses=None,
                 errors=None):
        """Constructor for the ReturnsAnArrayOfInternationalVerificationObjects class"""

        # Initialize members of the class
        self.addresses = addresses 
        self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [Address1.from_dictionary(x) for x in dictionary.get('addresses')]
        errors = dictionary.get("errors") if "errors" in dictionary.keys() else None
        # Return an object of this model
        return cls(addresses,
                   errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'addresses={self.addresses!r}, '
                f'errors={self.errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'addresses={self.addresses!s}, '
                f'errors={self.errors!s})')
