"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmountTypedDict = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmountTypedDict",
    Union[float, str],
)
r"""The amount of WETH to unwrap."""


CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmount = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmount",
    Union[float, str],
)
r"""The amount of WETH to unwrap."""


class CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestTypedDict(
    TypedDict
):
    r"""Request model for unwrapping WETH back to native ETH."""

    amount: CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmountTypedDict
    r"""The amount of WETH to unwrap."""
    chain: CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["UNWRAP_WETH"]


class CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequest(
    BaseModel
):
    r"""Request model for unwrapping WETH back to native ETH."""

    amount: (
        CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestAmount
    )
    r"""The amount of WETH to unwrap."""

    chain: CompassAPIBackendModelsGenericTransactRequestUnwrapWethUnwrapWethRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["UNWRAP_WETH"]],
            AfterValidator(validate_const("UNWRAP_WETH")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "UNWRAP_WETH"
