"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .feeenum import FeeEnum
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenInTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenInTypedDict",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token to sell.."""


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenIn = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenIn",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token to sell.."""


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOutTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOutTypedDict",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token to buy.."""


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOut = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOut",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token to buy.."""


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountInTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountInTypedDict",
    Union[float, str],
)
r"""The amount of the `token_in` to sell"""


CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountIn = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountIn",
    Union[float, str],
)
r"""The amount of the `token_in` to sell"""


class CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTypedDict(
    TypedDict
):
    r"""Request model for selling exactly an amount of tokens."""

    token_in: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenInTypedDict
    r"""The symbol or address of the token to sell.."""
    token_out: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOutTypedDict
    r"""The symbol or address of the token to buy.."""
    fee: FeeEnum
    r"""The transaction fee of a Uniswap pool in bips.

    Uniswap supports 4 different fee levels.
    """
    amount_in: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountInTypedDict
    r"""The amount of the `token_in` to sell"""
    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed."""
    chain: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["UNISWAP_SELL_EXACTLY"]


class CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequest(
    BaseModel
):
    r"""Request model for selling exactly an amount of tokens."""

    token_in: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenIn
    r"""The symbol or address of the token to sell.."""

    token_out: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestTokenOut
    r"""The symbol or address of the token to buy.."""

    fee: FeeEnum
    r"""The transaction fee of a Uniswap pool in bips.

    Uniswap supports 4 different fee levels.
    """

    amount_in: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestAmountIn
    r"""The amount of the `token_in` to sell"""

    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed."""

    chain: CompassAPIBackendModelsUniswapTransactSwapRequestSellExactlyUniswapSellExactlyRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["UNISWAP_SELL_EXACTLY"]],
            AfterValidator(validate_const("UNISWAP_SELL_EXACTLY")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "UNISWAP_SELL_EXACTLY"
