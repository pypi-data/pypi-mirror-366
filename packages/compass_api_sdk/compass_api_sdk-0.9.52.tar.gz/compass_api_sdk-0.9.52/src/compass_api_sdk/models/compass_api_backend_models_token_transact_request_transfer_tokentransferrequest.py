"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmountTypedDict = TypeAliasType(
    "CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmountTypedDict",
    Union[float, str],
)
r"""Amount of token to transfer"""


CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmount = (
    TypeAliasType(
        "CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmount",
        Union[float, str],
    )
)
r"""Amount of token to transfer"""


CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestTokenTypedDict = TypeAliasType(
    "CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestTokenTypedDict",
    Union[TokenEnum, str],
)
r"""The symbol of the token to transfer.."""


CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestToken = (
    TypeAliasType(
        "CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestToken",
        Union[TokenEnum, str],
    )
)
r"""The symbol of the token to transfer.."""


class CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestTypedDict(
    TypedDict
):
    r"""Request model for transferring ETH or ERC20 tokens."""

    amount: CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmountTypedDict
    r"""Amount of token to transfer"""
    token: CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestTokenTypedDict
    r"""The symbol of the token to transfer.."""
    to: str
    r"""The recipient of the tokens."""
    chain: CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["TOKEN_TRANSFER"]


class CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequest(
    BaseModel
):
    r"""Request model for transferring ETH or ERC20 tokens."""

    amount: (
        CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestAmount
    )
    r"""Amount of token to transfer"""

    token: CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestToken
    r"""The symbol of the token to transfer.."""

    to: str
    r"""The recipient of the tokens."""

    chain: CompassAPIBackendModelsTokenTransactRequestTransferTokenTransferRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["TOKEN_TRANSFER"]],
            AfterValidator(validate_const("TOKEN_TRANSFER")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "TOKEN_TRANSFER"
