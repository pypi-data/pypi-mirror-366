"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenInTypedDict = (
    TypeAliasType(
        "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenInTypedDict",
        Union[TokenEnum, str],
    )
)
r"""The symbol or address of the token that is to be sold."""


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenIn = TypeAliasType(
    "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenIn",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token that is to be sold."""


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOutTypedDict = TypeAliasType(
    "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOutTypedDict",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token that is to be bought."""


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOut = TypeAliasType(
    "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOut",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token that is to be bought."""


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmountTypedDict = (
    TypeAliasType(
        "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmountTypedDict",
        Union[float, str],
    )
)
r"""The amount of token_in to be sold."""


CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmount = TypeAliasType(
    "CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmount",
    Union[float, str],
)
r"""The amount of token_in to be sold."""


class CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestChain(str, Enum):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTypedDict(TypedDict):
    token_in: (
        CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenInTypedDict
    )
    r"""The symbol or address of the token that is to be sold."""
    token_out: (
        CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOutTypedDict
    )
    r"""The symbol or address of the token that is to be bought."""
    amount: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmountTypedDict
    r"""The amount of token_in to be sold."""
    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed."""
    chain: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["ODOS_SWAP"]


class CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequest(BaseModel):
    token_in: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenIn
    r"""The symbol or address of the token that is to be sold."""

    token_out: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestTokenOut
    r"""The symbol or address of the token that is to be bought."""

    amount: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestAmount
    r"""The amount of token_in to be sold."""

    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed."""

    chain: CompassAPIBackendModelsSwapTransactRequestOdosOdosSwapRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["ODOS_SWAP"]], AfterValidator(validate_const("ODOS_SWAP"))
        ],
        pydantic.Field(alias="action_type"),
    ] = "ODOS_SWAP"
