"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestTokenTypedDict = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestTokenTypedDict",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token for which the allowance is set.."""


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestToken = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestToken",
    Union[TokenEnum, str],
)
r"""The symbol or address of the token for which the allowance is set.."""


class CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractEnum(
    str, Enum
):
    AAVE_V3_POOL = "AaveV3Pool"
    AERODROME_BASIC_ROUTER = "AerodromeBasicRouter"
    AERODROME_SLIPSTREAM_ROUTER = "AerodromeSlipstreamRouter"
    AERODROME_SLIPSTREAM_NONFUNGIBLE_POSITION_MANAGER = (
        "AerodromeSlipstreamNonfungiblePositionManager"
    )
    UNISWAP_V3_ROUTER = "UniswapV3Router"
    UNISWAP_V3_NFT_POSITION_MANAGER = "UniswapV3NFTPositionManager"
    MORPHO = "Morpho"
    SKY_DAI_USDS_CONVERTER = "SkyDaiUsdsConverter"
    SKY_USDC_USDS_CONVERTER = "SkyUsdcUsdsConverter"
    SKY_USDS_VAULT = "SkyUsdsVault"
    PENDLE_ROUTER = "PendleRouter"
    ODOS_ROUTER = "OdosRouter"


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnionTypedDict = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnionTypedDict",
    Union[
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractEnum,
        str,
    ],
)
r"""The name or address of the contract to set spending allowance for."""


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnion = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnion",
    Union[
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractEnum,
        str,
    ],
)
r"""The name or address of the contract to set spending allowance for."""


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmountTypedDict = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmountTypedDict",
    Union[float, str],
)
r"""The amount to set the allowance to."""


CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmount = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmount",
    Union[float, str],
)
r"""The amount to set the allowance to."""


class CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestTypedDict(
    TypedDict
):
    r"""Request model for increasing token allowance for a contract."""

    token: CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestTokenTypedDict
    r"""The symbol or address of the token for which the allowance is set.."""
    contract: CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnionTypedDict
    r"""The name or address of the contract to set spending allowance for."""
    amount: CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmountTypedDict
    r"""The amount to set the allowance to."""
    chain: (
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestChain
    )
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["SET_ALLOWANCE"]


class CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequest(
    BaseModel
):
    r"""Request model for increasing token allowance for a contract."""

    token: (
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestToken
    )
    r"""The symbol or address of the token for which the allowance is set.."""

    contract: CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestContractUnion
    r"""The name or address of the contract to set spending allowance for."""

    amount: (
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestAmount
    )
    r"""The amount to set the allowance to."""

    chain: (
        CompassAPIBackendModelsGenericTransactRequestAllowanceSetAllowanceRequestChain
    )

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["SET_ALLOWANCE"]],
            AfterValidator(validate_const("SET_ALLOWANCE")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "SET_ALLOWANCE"
