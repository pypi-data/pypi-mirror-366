"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmountTypedDict = TypeAliasType(
    "CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmountTypedDict",
    Union[float, str],
)
r"""The amount of ETH to wrap."""


CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmount = (
    TypeAliasType(
        "CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmount",
        Union[float, str],
    )
)
r"""The amount of ETH to wrap."""


class CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestTypedDict(
    TypedDict
):
    r"""Request model for wrapping ETH into WETH."""

    amount: CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmountTypedDict
    r"""The amount of ETH to wrap."""
    chain: CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["WRAP_ETH"]


class CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequest(BaseModel):
    r"""Request model for wrapping ETH into WETH."""

    amount: CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestAmount
    r"""The amount of ETH to wrap."""

    chain: CompassAPIBackendModelsGenericTransactRequestWrapEthWrapEthRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["WRAP_ETH"]], AfterValidator(validate_const("WRAP_ETH"))
        ],
        pydantic.Field(alias="action_type"),
    ] = "WRAP_ETH"
