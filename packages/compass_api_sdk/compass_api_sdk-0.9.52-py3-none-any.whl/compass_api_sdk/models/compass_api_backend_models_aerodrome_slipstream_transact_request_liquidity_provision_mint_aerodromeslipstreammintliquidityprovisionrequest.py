"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0DesiredTypedDict = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0DesiredTypedDict",
    Union[float, str],
)
r"""The desired amount of the first token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired",
    Union[float, str],
)
r"""The desired amount of the first token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1DesiredTypedDict = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1DesiredTypedDict",
    Union[float, str],
)
r"""The desired amount of the second token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired",
    Union[float, str],
)
r"""The desired amount of the second token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0MinTypedDict = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0MinTypedDict",
    Union[float, str],
)
r"""The minimum amount of the first token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min",
    Union[float, str],
)
r"""The minimum amount of the first token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1MinTypedDict = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1MinTypedDict",
    Union[float, str],
)
r"""The minimum amount of the second token to deposit"""


CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min = TypeAliasType(
    "CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min",
    Union[float, str],
)
r"""The minimum amount of the second token to deposit"""


class CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestChain(
    str, Enum
):
    BASE = "base"


class CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestTypedDict(
    TypedDict
):
    r"""Request model for minting a new liquidity position."""

    token0: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    token1: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    tick_spacing: int
    r"""The tick spacing of the pool"""
    tick_lower: int
    r"""The lower tick of the range to mint the position in"""
    tick_upper: int
    r"""The upper tick of the range to mint the position in"""
    amount0_desired: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0DesiredTypedDict
    r"""The desired amount of the first token to deposit"""
    amount1_desired: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1DesiredTypedDict
    r"""The desired amount of the second token to deposit"""
    amount0_min: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0MinTypedDict
    r"""The minimum amount of the first token to deposit"""
    amount1_min: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1MinTypedDict
    r"""The minimum amount of the second token to deposit"""
    chain: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION"]
    recipient: NotRequired[Nullable[str]]
    r"""The address that will receive the LP tokens"""


class CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequest(
    BaseModel
):
    r"""Request model for minting a new liquidity position."""

    token0: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    token1: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    tick_spacing: int
    r"""The tick spacing of the pool"""

    tick_lower: int
    r"""The lower tick of the range to mint the position in"""

    tick_upper: int
    r"""The upper tick of the range to mint the position in"""

    amount0_desired: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired
    r"""The desired amount of the first token to deposit"""

    amount1_desired: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired
    r"""The desired amount of the second token to deposit"""

    amount0_min: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min
    r"""The minimum amount of the first token to deposit"""

    amount1_min: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min
    r"""The minimum amount of the second token to deposit"""

    chain: CompassAPIBackendModelsAerodromeSlipstreamTransactRequestLiquidityProvisionMintAerodromeSlipstreamMintLiquidityProvisionRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION"]],
            AfterValidator(
                validate_const("AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION")
            ),
        ],
        pydantic.Field(alias="action_type"),
    ] = "AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION"

    recipient: OptionalNullable[str] = UNSET
    r"""The address that will receive the LP tokens"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["action_type", "recipient"]
        nullable_fields = ["recipient"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
