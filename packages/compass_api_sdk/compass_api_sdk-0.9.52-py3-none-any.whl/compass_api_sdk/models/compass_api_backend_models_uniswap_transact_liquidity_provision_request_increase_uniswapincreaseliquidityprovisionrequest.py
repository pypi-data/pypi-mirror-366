"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0DesiredTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0DesiredTypedDict",
    Union[float, str],
)
r"""The desired amount of the first token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Desired = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Desired",
    Union[float, str],
)
r"""The desired amount of the first token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1DesiredTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1DesiredTypedDict",
    Union[float, str],
)
r"""The desired amount of the second token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Desired = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Desired",
    Union[float, str],
)
r"""The desired amount of the second token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0MinTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0MinTypedDict",
    Union[float, str],
)
r"""The minimum amount of the first token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Min = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Min",
    Union[float, str],
)
r"""The minimum amount of the first token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1MinTypedDict = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1MinTypedDict",
    Union[float, str],
)
r"""The minimum amount of the second token to deposit"""


CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Min = TypeAliasType(
    "CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Min",
    Union[float, str],
)
r"""The minimum amount of the second token to deposit"""


class CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestChain(
    str, Enum
):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestTypedDict(
    TypedDict
):
    r"""Request model for increasing liquidity provision in Uniswap V3."""

    token_id: int
    r"""Token ID of the NFT representing the liquidity provisioned position."""
    amount0_desired: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0DesiredTypedDict
    r"""The desired amount of the first token to deposit"""
    amount1_desired: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1DesiredTypedDict
    r"""The desired amount of the second token to deposit"""
    amount0_min: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0MinTypedDict
    r"""The minimum amount of the first token to deposit"""
    amount1_min: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1MinTypedDict
    r"""The minimum amount of the second token to deposit"""
    chain: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestChain
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["UNISWAP_ADD_LIQUIDITY"]


class CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequest(
    BaseModel
):
    r"""Request model for increasing liquidity provision in Uniswap V3."""

    token_id: int
    r"""Token ID of the NFT representing the liquidity provisioned position."""

    amount0_desired: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Desired
    r"""The desired amount of the first token to deposit"""

    amount1_desired: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Desired
    r"""The desired amount of the second token to deposit"""

    amount0_min: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount0Min
    r"""The minimum amount of the first token to deposit"""

    amount1_min: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestAmount1Min
    r"""The minimum amount of the second token to deposit"""

    chain: CompassAPIBackendModelsUniswapTransactLiquidityProvisionRequestIncreaseUniswapIncreaseLiquidityProvisionRequestChain

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["UNISWAP_ADD_LIQUIDITY"]],
            AfterValidator(validate_const("UNISWAP_ADD_LIQUIDITY")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "UNISWAP_ADD_LIQUIDITY"
