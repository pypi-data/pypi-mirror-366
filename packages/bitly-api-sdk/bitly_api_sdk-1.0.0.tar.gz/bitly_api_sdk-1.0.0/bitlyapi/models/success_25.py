# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.link_click import LinkClick


class SUCCESS25(object):

    """Implementation of the 'SUCCESS25' model.

    Attributes:
        units (int): The model property of type int.
        unit_reference (str): The model property of type str.
        unit (str): The model property of type str.
        link_clicks (List[LinkClick]): The model property of type
            List[LinkClick].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "units": 'units',
        "unit_reference": 'unit_reference',
        "unit": 'unit',
        "link_clicks": 'link_clicks'
    }

    def __init__(self,
                 units=None,
                 unit_reference=None,
                 unit=None,
                 link_clicks=None):
        """Constructor for the SUCCESS25 class"""

        # Initialize members of the class
        self.units = units 
        self.unit_reference = unit_reference 
        self.unit = unit 
        self.link_clicks = link_clicks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        units = dictionary.get("units") if dictionary.get("units") else None
        unit_reference = dictionary.get("unit_reference") if dictionary.get("unit_reference") else None
        unit = dictionary.get("unit") if dictionary.get("unit") else None
        link_clicks = None
        if dictionary.get('link_clicks') is not None:
            link_clicks = [LinkClick.from_dictionary(x) for x in dictionary.get('link_clicks')]
        # Return an object of this model
        return cls(units,
                   unit_reference,
                   unit,
                   link_clicks)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'units={self.units!r}, '
                f'unit_reference={self.unit_reference!r}, '
                f'unit={self.unit!r}, '
                f'link_clicks={self.link_clicks!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'units={self.units!s}, '
                f'unit_reference={self.unit_reference!s}, '
                f'unit={self.unit!s}, '
                f'link_clicks={self.link_clicks!s})')
