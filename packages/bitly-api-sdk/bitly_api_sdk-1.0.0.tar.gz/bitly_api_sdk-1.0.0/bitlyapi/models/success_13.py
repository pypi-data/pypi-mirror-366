# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.link import Link
from bitlyapi.models.sorted_link import SortedLink


class SUCCESS13(object):

    """Implementation of the 'SUCCESS13' model.

    Attributes:
        sorted_links (List[SortedLink]): The model property of type
            List[SortedLink].
        links (List[Link]): The model property of type List[Link].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sorted_links": 'sorted_links',
        "links": 'links'
    }

    def __init__(self,
                 sorted_links=None,
                 links=None):
        """Constructor for the SUCCESS13 class"""

        # Initialize members of the class
        self.sorted_links = sorted_links 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sorted_links = None
        if dictionary.get('sorted_links') is not None:
            sorted_links = [SortedLink.from_dictionary(x) for x in dictionary.get('sorted_links')]
        links = None
        if dictionary.get('links') is not None:
            links = [Link.from_dictionary(x) for x in dictionary.get('links')]
        # Return an object of this model
        return cls(sorted_links,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sorted_links={self.sorted_links!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sorted_links={self.sorted_links!s}, '
                f'links={self.links!s})')
