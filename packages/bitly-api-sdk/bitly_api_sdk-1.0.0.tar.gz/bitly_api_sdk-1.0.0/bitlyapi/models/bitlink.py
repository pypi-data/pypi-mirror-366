# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.archived import Archived
from bitlyapi.models.client_id import ClientId
from bitlyapi.models.created_at import CreatedAt
from bitlyapi.models.created_by import CreatedBy
from bitlyapi.models.custom_bitlinks import CustomBitlinks
from bitlyapi.models.deeplinks import Deeplinks
from bitlyapi.models.id import Id
from bitlyapi.models.is_deleted import IsDeleted
from bitlyapi.models.launchpad_ids import LaunchpadIds
from bitlyapi.models.link import Link
from bitlyapi.models.long_url import LongUrl
from bitlyapi.models.references_15 import References15
from bitlyapi.models.tags import Tags
from bitlyapi.models.title import Title


class Bitlink(object):

    """Implementation of the 'Bitlink' model.

    Attributes:
        references (References15): The model property of type References15.
        archived (Archived): The model property of type Archived.
        is_deleted (IsDeleted): The model property of type IsDeleted.
        tags (Tags): The model property of type Tags.
        created_at (CreatedAt): The model property of type CreatedAt.
        title (Title): The model property of type Title.
        deeplinks (Deeplinks): The model property of type Deeplinks.
        created_by (CreatedBy): The model property of type CreatedBy.
        long_url (LongUrl): The model property of type LongUrl.
        client_id (ClientId): The model property of type ClientId.
        custom_bitlinks (CustomBitlinks): The model property of type
            CustomBitlinks.
        link (Link): The model property of type Link.
        launchpad_ids (LaunchpadIds): The model property of type LaunchpadIds.
        id (Id): The model property of type Id.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "references": 'references',
        "archived": 'archived',
        "is_deleted": 'is_deleted',
        "tags": 'tags',
        "created_at": 'created_at',
        "title": 'title',
        "deeplinks": 'deeplinks',
        "created_by": 'created_by',
        "long_url": 'long_url',
        "client_id": 'client_id',
        "custom_bitlinks": 'custom_bitlinks',
        "link": 'link',
        "launchpad_ids": 'launchpad_ids',
        "id": 'id'
    }

    def __init__(self,
                 references=None,
                 archived=None,
                 is_deleted=None,
                 tags=None,
                 created_at=None,
                 title=None,
                 deeplinks=None,
                 created_by=None,
                 long_url=None,
                 client_id=None,
                 custom_bitlinks=None,
                 link=None,
                 launchpad_ids=None,
                 id=None):
        """Constructor for the Bitlink class"""

        # Initialize members of the class
        self.references = references 
        self.archived = archived 
        self.is_deleted = is_deleted 
        self.tags = tags 
        self.created_at = created_at 
        self.title = title 
        self.deeplinks = deeplinks 
        self.created_by = created_by 
        self.long_url = long_url 
        self.client_id = client_id 
        self.custom_bitlinks = custom_bitlinks 
        self.link = link 
        self.launchpad_ids = launchpad_ids 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        references = References15.from_dictionary(dictionary.get('references')) if dictionary.get('references') else None
        archived = Archived.from_dictionary(dictionary.get('archived')) if dictionary.get('archived') else None
        is_deleted = IsDeleted.from_dictionary(dictionary.get('is_deleted')) if dictionary.get('is_deleted') else None
        tags = Tags.from_dictionary(dictionary.get('tags')) if dictionary.get('tags') else None
        created_at = CreatedAt.from_dictionary(dictionary.get('created_at')) if dictionary.get('created_at') else None
        title = Title.from_dictionary(dictionary.get('title')) if dictionary.get('title') else None
        deeplinks = Deeplinks.from_dictionary(dictionary.get('deeplinks')) if dictionary.get('deeplinks') else None
        created_by = CreatedBy.from_dictionary(dictionary.get('created_by')) if dictionary.get('created_by') else None
        long_url = LongUrl.from_dictionary(dictionary.get('long_url')) if dictionary.get('long_url') else None
        client_id = ClientId.from_dictionary(dictionary.get('client_id')) if dictionary.get('client_id') else None
        custom_bitlinks = CustomBitlinks.from_dictionary(dictionary.get('custom_bitlinks')) if dictionary.get('custom_bitlinks') else None
        link = Link.from_dictionary(dictionary.get('link')) if dictionary.get('link') else None
        launchpad_ids = LaunchpadIds.from_dictionary(dictionary.get('launchpad_ids')) if dictionary.get('launchpad_ids') else None
        id = Id.from_dictionary(dictionary.get('id')) if dictionary.get('id') else None
        # Return an object of this model
        return cls(references,
                   archived,
                   is_deleted,
                   tags,
                   created_at,
                   title,
                   deeplinks,
                   created_by,
                   long_url,
                   client_id,
                   custom_bitlinks,
                   link,
                   launchpad_ids,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!r}, '
                f'archived={self.archived!r}, '
                f'is_deleted={self.is_deleted!r}, '
                f'tags={self.tags!r}, '
                f'created_at={self.created_at!r}, '
                f'title={self.title!r}, '
                f'deeplinks={self.deeplinks!r}, '
                f'created_by={self.created_by!r}, '
                f'long_url={self.long_url!r}, '
                f'client_id={self.client_id!r}, '
                f'custom_bitlinks={self.custom_bitlinks!r}, '
                f'link={self.link!r}, '
                f'launchpad_ids={self.launchpad_ids!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!s}, '
                f'archived={self.archived!s}, '
                f'is_deleted={self.is_deleted!s}, '
                f'tags={self.tags!s}, '
                f'created_at={self.created_at!s}, '
                f'title={self.title!s}, '
                f'deeplinks={self.deeplinks!s}, '
                f'created_by={self.created_by!s}, '
                f'long_url={self.long_url!s}, '
                f'client_id={self.client_id!s}, '
                f'custom_bitlinks={self.custom_bitlinks!s}, '
                f'link={self.link!s}, '
                f'launchpad_ids={self.launchpad_ids!s}, '
                f'id={self.id!s})')
