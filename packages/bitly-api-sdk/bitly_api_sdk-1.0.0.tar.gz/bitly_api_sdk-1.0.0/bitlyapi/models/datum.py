# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum(object):

    """Implementation of the 'Datum' model.

    Attributes:
        count (int): The model property of type int.
        ts (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "count": 'count',
        "ts": 'ts'
    }

    def __init__(self,
                 count=None,
                 ts=None):
        """Constructor for the Datum class"""

        # Initialize members of the class
        self.count = count 
        self.ts = ts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        count = dictionary.get("count") if dictionary.get("count") else None
        ts = dictionary.get("ts") if dictionary.get("ts") else None
        # Return an object of this model
        return cls(count,
                   ts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'count={self.count!r}, '
                f'ts={self.ts!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'count={self.count!s}, '
                f'ts={self.ts!s})')
