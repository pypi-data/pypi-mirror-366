# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ShortenALinkRequest(object):

    """Implementation of the 'Shorten a Link Request' model.

    Attributes:
        group_guid (str): The model property of type str.
        domain (str): The model property of type str.
        long_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_guid": 'group_guid',
        "domain": 'domain',
        "long_url": 'long_url'
    }

    def __init__(self,
                 group_guid=None,
                 domain=None,
                 long_url=None):
        """Constructor for the ShortenALinkRequest class"""

        # Initialize members of the class
        self.group_guid = group_guid 
        self.domain = domain 
        self.long_url = long_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        domain = dictionary.get("domain") if dictionary.get("domain") else None
        long_url = dictionary.get("long_url") if dictionary.get("long_url") else None
        # Return an object of this model
        return cls(group_guid,
                   domain,
                   long_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!r}, '
                f'domain={self.domain!r}, '
                f'long_url={self.long_url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!s}, '
                f'domain={self.domain!s}, '
                f'long_url={self.long_url!s})')
