# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class References11(object):

    """Implementation of the 'References11' model.

    Attributes:
        ut_0 (str): The model property of type str.
        dolore (str): The model property of type str.
        aliquip_934 (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ut_0": 'ut0',
        "dolore": 'dolore',
        "aliquip_934": 'aliquip_934'
    }

    def __init__(self,
                 ut_0=None,
                 dolore=None,
                 aliquip_934=None):
        """Constructor for the References11 class"""

        # Initialize members of the class
        self.ut_0 = ut_0 
        self.dolore = dolore 
        self.aliquip_934 = aliquip_934 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        ut_0 = dictionary.get("ut0") if dictionary.get("ut0") else None
        dolore = dictionary.get("dolore") if dictionary.get("dolore") else None
        aliquip_934 = dictionary.get("aliquip_934") if dictionary.get("aliquip_934") else None
        # Return an object of this model
        return cls(ut_0,
                   dolore,
                   aliquip_934)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'ut_0={self.ut_0!r}, '
                f'dolore={self.dolore!r}, '
                f'aliquip_934={self.aliquip_934!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'ut_0={self.ut_0!s}, '
                f'dolore={self.dolore!s}, '
                f'aliquip_934={self.aliquip_934!s})')
