# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.email import Email


class SUCCESS45(object):

    """Implementation of the 'SUCCESS45' model.

    Attributes:
        login (str): The model property of type str.
        is_active (bool): The model property of type bool.
        created (str): The model property of type str.
        modified (str): The model property of type str.
        is_2_fa_enabled (bool): The model property of type bool.
        name (str): The model property of type str.
        emails (List[Email]): The model property of type List[Email].
        is_sso_user (bool): The model property of type bool.
        default_group_guid (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "login": 'login',
        "is_active": 'is_active',
        "created": 'created',
        "modified": 'modified',
        "is_2_fa_enabled": 'is_2fa_enabled',
        "name": 'name',
        "emails": 'emails',
        "is_sso_user": 'is_sso_user',
        "default_group_guid": 'default_group_guid'
    }

    def __init__(self,
                 login=None,
                 is_active=None,
                 created=None,
                 modified=None,
                 is_2_fa_enabled=None,
                 name=None,
                 emails=None,
                 is_sso_user=None,
                 default_group_guid=None):
        """Constructor for the SUCCESS45 class"""

        # Initialize members of the class
        self.login = login 
        self.is_active = is_active 
        self.created = created 
        self.modified = modified 
        self.is_2_fa_enabled = is_2_fa_enabled 
        self.name = name 
        self.emails = emails 
        self.is_sso_user = is_sso_user 
        self.default_group_guid = default_group_guid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        login = dictionary.get("login") if dictionary.get("login") else None
        is_active = dictionary.get("is_active") if "is_active" in dictionary.keys() else None
        created = dictionary.get("created") if dictionary.get("created") else None
        modified = dictionary.get("modified") if dictionary.get("modified") else None
        is_2_fa_enabled = dictionary.get("is_2fa_enabled") if "is_2fa_enabled" in dictionary.keys() else None
        name = dictionary.get("name") if dictionary.get("name") else None
        emails = None
        if dictionary.get('emails') is not None:
            emails = [Email.from_dictionary(x) for x in dictionary.get('emails')]
        is_sso_user = dictionary.get("is_sso_user") if "is_sso_user" in dictionary.keys() else None
        default_group_guid = dictionary.get("default_group_guid") if dictionary.get("default_group_guid") else None
        # Return an object of this model
        return cls(login,
                   is_active,
                   created,
                   modified,
                   is_2_fa_enabled,
                   name,
                   emails,
                   is_sso_user,
                   default_group_guid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'login={self.login!r}, '
                f'is_active={self.is_active!r}, '
                f'created={self.created!r}, '
                f'modified={self.modified!r}, '
                f'is_2_fa_enabled={self.is_2_fa_enabled!r}, '
                f'name={self.name!r}, '
                f'emails={self.emails!r}, '
                f'is_sso_user={self.is_sso_user!r}, '
                f'default_group_guid={self.default_group_guid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'login={self.login!s}, '
                f'is_active={self.is_active!s}, '
                f'created={self.created!s}, '
                f'modified={self.modified!s}, '
                f'is_2_fa_enabled={self.is_2_fa_enabled!s}, '
                f'name={self.name!s}, '
                f'emails={self.emails!s}, '
                f'is_sso_user={self.is_sso_user!s}, '
                f'default_group_guid={self.default_group_guid!s})')
