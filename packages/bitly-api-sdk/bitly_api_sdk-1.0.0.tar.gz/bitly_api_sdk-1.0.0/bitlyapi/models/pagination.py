# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Pagination(object):

    """Implementation of the 'Pagination' model.

    Attributes:
        total (int): The model property of type int.
        size (int): The model property of type int.
        prev (str): The model property of type str.
        page (int): The model property of type int.
        next (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total": 'total',
        "size": 'size',
        "prev": 'prev',
        "page": 'page',
        "next": 'next'
    }

    def __init__(self,
                 total=None,
                 size=None,
                 prev=None,
                 page=None,
                 next=None):
        """Constructor for the Pagination class"""

        # Initialize members of the class
        self.total = total 
        self.size = size 
        self.prev = prev 
        self.page = page 
        self.next = next 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        total = dictionary.get("total") if dictionary.get("total") else None
        size = dictionary.get("size") if dictionary.get("size") else None
        prev = dictionary.get("prev") if dictionary.get("prev") else None
        page = dictionary.get("page") if dictionary.get("page") else None
        next = dictionary.get("next") if dictionary.get("next") else None
        # Return an object of this model
        return cls(total,
                   size,
                   prev,
                   page,
                   next)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'total={self.total!r}, '
                f'size={self.size!r}, '
                f'prev={self.prev!r}, '
                f'page={self.page!r}, '
                f'next={self.next!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'total={self.total!s}, '
                f'size={self.size!s}, '
                f'prev={self.prev!s}, '
                f'page={self.page!s}, '
                f'next={self.next!s})')
