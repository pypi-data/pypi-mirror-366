# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Email(object):

    """Implementation of the 'Email' model.

    Attributes:
        is_primary (bool): The model property of type bool.
        is_verified (bool): The model property of type bool.
        email (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_primary": 'is_primary',
        "is_verified": 'is_verified',
        "email": 'email'
    }

    def __init__(self,
                 is_primary=None,
                 is_verified=None,
                 email=None):
        """Constructor for the Email class"""

        # Initialize members of the class
        self.is_primary = is_primary 
        self.is_verified = is_verified 
        self.email = email 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        is_primary = dictionary.get("is_primary") if "is_primary" in dictionary.keys() else None
        is_verified = dictionary.get("is_verified") if "is_verified" in dictionary.keys() else None
        email = dictionary.get("email") if dictionary.get("email") else None
        # Return an object of this model
        return cls(is_primary,
                   is_verified,
                   email)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'is_primary={self.is_primary!r}, '
                f'is_verified={self.is_verified!r}, '
                f'email={self.email!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'is_primary={self.is_primary!s}, '
                f'is_verified={self.is_verified!s}, '
                f'email={self.email!s})')
