# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.bsds import Bsds
from bitlyapi.models.created import Created
from bitlyapi.models.guid import Guid
from bitlyapi.models.is_active import IsActive
from bitlyapi.models.modified import Modified
from bitlyapi.models.name import Name
from bitlyapi.models.role import Role
from bitlyapi.models.tier import Tier
from bitlyapi.models.tier_display_name import TierDisplayName
from bitlyapi.models.tier_family import TierFamily


class Organization(object):

    """Implementation of the 'Organization' model.

    Attributes:
        name (Name): The model property of type Name.
        bsds (Bsds): The model property of type Bsds.
        created (Created): The model property of type Created.
        is_active (IsActive): The model property of type IsActive.
        modified (Modified): The model property of type Modified.
        tier_display_name (TierDisplayName): The model property of type
            TierDisplayName.
        tier_family (TierFamily): The model property of type TierFamily.
        tier (Tier): The model property of type Tier.
        role (Role): The model property of type Role.
        guid (Guid): The model property of type Guid.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "bsds": 'bsds',
        "created": 'created',
        "is_active": 'is_active',
        "modified": 'modified',
        "tier_display_name": 'tier_display_name',
        "tier_family": 'tier_family',
        "tier": 'tier',
        "role": 'role',
        "guid": 'guid'
    }

    def __init__(self,
                 name=None,
                 bsds=None,
                 created=None,
                 is_active=None,
                 modified=None,
                 tier_display_name=None,
                 tier_family=None,
                 tier=None,
                 role=None,
                 guid=None):
        """Constructor for the Organization class"""

        # Initialize members of the class
        self.name = name 
        self.bsds = bsds 
        self.created = created 
        self.is_active = is_active 
        self.modified = modified 
        self.tier_display_name = tier_display_name 
        self.tier_family = tier_family 
        self.tier = tier 
        self.role = role 
        self.guid = guid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        bsds = Bsds.from_dictionary(dictionary.get('bsds')) if dictionary.get('bsds') else None
        created = Created.from_dictionary(dictionary.get('created')) if dictionary.get('created') else None
        is_active = IsActive.from_dictionary(dictionary.get('is_active')) if dictionary.get('is_active') else None
        modified = Modified.from_dictionary(dictionary.get('modified')) if dictionary.get('modified') else None
        tier_display_name = TierDisplayName.from_dictionary(dictionary.get('tier_display_name')) if dictionary.get('tier_display_name') else None
        tier_family = TierFamily.from_dictionary(dictionary.get('tier_family')) if dictionary.get('tier_family') else None
        tier = Tier.from_dictionary(dictionary.get('tier')) if dictionary.get('tier') else None
        role = Role.from_dictionary(dictionary.get('role')) if dictionary.get('role') else None
        guid = Guid.from_dictionary(dictionary.get('guid')) if dictionary.get('guid') else None
        # Return an object of this model
        return cls(name,
                   bsds,
                   created,
                   is_active,
                   modified,
                   tier_display_name,
                   tier_family,
                   tier,
                   role,
                   guid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'bsds={self.bsds!r}, '
                f'created={self.created!r}, '
                f'is_active={self.is_active!r}, '
                f'modified={self.modified!r}, '
                f'tier_display_name={self.tier_display_name!r}, '
                f'tier_family={self.tier_family!r}, '
                f'tier={self.tier!r}, '
                f'role={self.role!r}, '
                f'guid={self.guid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'bsds={self.bsds!s}, '
                f'created={self.created!s}, '
                f'is_active={self.is_active!s}, '
                f'modified={self.modified!s}, '
                f'tier_display_name={self.tier_display_name!s}, '
                f'tier_family={self.tier_family!s}, '
                f'tier={self.tier!s}, '
                f'role={self.role!s}, '
                f'guid={self.guid!s})')
