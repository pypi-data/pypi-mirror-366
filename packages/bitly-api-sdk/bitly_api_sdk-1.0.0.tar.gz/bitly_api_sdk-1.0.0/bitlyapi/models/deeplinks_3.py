# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.app_guid import AppGuid
from bitlyapi.models.app_uri_path import AppUriPath
from bitlyapi.models.bitlink_5 import Bitlink5
from bitlyapi.models.brand_guid import BrandGuid
from bitlyapi.models.created import Created
from bitlyapi.models.guid import Guid
from bitlyapi.models.install_type import InstallType
from bitlyapi.models.install_url import InstallUrl
from bitlyapi.models.modified import Modified
from bitlyapi.models.os import Os


class Deeplinks3(object):

    """Implementation of the 'Deeplinks3' model.

    Attributes:
        bitlink (Bitlink5): The model property of type Bitlink5.
        install_url (InstallUrl): The model property of type InstallUrl.
        created (Created): The model property of type Created.
        app_uri_path (AppUriPath): The model property of type AppUriPath.
        modified (Modified): The model property of type Modified.
        install_type (InstallType): The model property of type InstallType.
        app_guid (AppGuid): The model property of type AppGuid.
        guid (Guid): The model property of type Guid.
        os (Os): The model property of type Os.
        brand_guid (BrandGuid): The model property of type BrandGuid.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bitlink": 'bitlink',
        "install_url": 'install_url',
        "created": 'created',
        "app_uri_path": 'app_uri_path',
        "modified": 'modified',
        "install_type": 'install_type',
        "app_guid": 'app_guid',
        "guid": 'guid',
        "os": 'os',
        "brand_guid": 'brand_guid'
    }

    def __init__(self,
                 bitlink=None,
                 install_url=None,
                 created=None,
                 app_uri_path=None,
                 modified=None,
                 install_type=None,
                 app_guid=None,
                 guid=None,
                 os=None,
                 brand_guid=None):
        """Constructor for the Deeplinks3 class"""

        # Initialize members of the class
        self.bitlink = bitlink 
        self.install_url = install_url 
        self.created = created 
        self.app_uri_path = app_uri_path 
        self.modified = modified 
        self.install_type = install_type 
        self.app_guid = app_guid 
        self.guid = guid 
        self.os = os 
        self.brand_guid = brand_guid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bitlink = Bitlink5.from_dictionary(dictionary.get('bitlink')) if dictionary.get('bitlink') else None
        install_url = InstallUrl.from_dictionary(dictionary.get('install_url')) if dictionary.get('install_url') else None
        created = Created.from_dictionary(dictionary.get('created')) if dictionary.get('created') else None
        app_uri_path = AppUriPath.from_dictionary(dictionary.get('app_uri_path')) if dictionary.get('app_uri_path') else None
        modified = Modified.from_dictionary(dictionary.get('modified')) if dictionary.get('modified') else None
        install_type = InstallType.from_dictionary(dictionary.get('install_type')) if dictionary.get('install_type') else None
        app_guid = AppGuid.from_dictionary(dictionary.get('app_guid')) if dictionary.get('app_guid') else None
        guid = Guid.from_dictionary(dictionary.get('guid')) if dictionary.get('guid') else None
        os = Os.from_dictionary(dictionary.get('os')) if dictionary.get('os') else None
        brand_guid = BrandGuid.from_dictionary(dictionary.get('brand_guid')) if dictionary.get('brand_guid') else None
        # Return an object of this model
        return cls(bitlink,
                   install_url,
                   created,
                   app_uri_path,
                   modified,
                   install_type,
                   app_guid,
                   guid,
                   os,
                   brand_guid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bitlink={self.bitlink!r}, '
                f'install_url={self.install_url!r}, '
                f'created={self.created!r}, '
                f'app_uri_path={self.app_uri_path!r}, '
                f'modified={self.modified!r}, '
                f'install_type={self.install_type!r}, '
                f'app_guid={self.app_guid!r}, '
                f'guid={self.guid!r}, '
                f'os={self.os!r}, '
                f'brand_guid={self.brand_guid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bitlink={self.bitlink!s}, '
                f'install_url={self.install_url!s}, '
                f'created={self.created!s}, '
                f'app_uri_path={self.app_uri_path!s}, '
                f'modified={self.modified!s}, '
                f'install_type={self.install_type!s}, '
                f'app_guid={self.app_guid!s}, '
                f'guid={self.guid!s}, '
                f'os={self.os!s}, '
                f'brand_guid={self.brand_guid!s})')
