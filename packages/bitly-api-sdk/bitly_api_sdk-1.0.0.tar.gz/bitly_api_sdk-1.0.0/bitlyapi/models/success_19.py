# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.override import Override


class SUCCESS19(object):

    """Implementation of the 'SUCCESS19' model.

    Attributes:
        overrides (List[Override]): The model property of type List[Override].
        total_count (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "overrides": 'overrides',
        "total_count": 'total_count'
    }

    def __init__(self,
                 overrides=None,
                 total_count=None):
        """Constructor for the SUCCESS19 class"""

        # Initialize members of the class
        self.overrides = overrides 
        self.total_count = total_count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        overrides = None
        if dictionary.get('overrides') is not None:
            overrides = [Override.from_dictionary(x) for x in dictionary.get('overrides')]
        total_count = dictionary.get("total_count") if dictionary.get("total_count") else None
        # Return an object of this model
        return cls(overrides,
                   total_count)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'overrides={self.overrides!r}, '
                f'total_count={self.total_count!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'overrides={self.overrides!s}, '
                f'total_count={self.total_count!s})')
