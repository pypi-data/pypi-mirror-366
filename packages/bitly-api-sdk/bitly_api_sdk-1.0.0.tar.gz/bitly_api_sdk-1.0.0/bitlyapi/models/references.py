# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class References(object):

    """Implementation of the 'References' model.

    Attributes:
        nisi_52 (str): The model property of type str.
        ameta_6 (str): The model property of type str.
        laborumab_6 (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "nisi_52": 'nisi52',
        "ameta_6": 'ameta6',
        "laborumab_6": 'laborumab6'
    }

    def __init__(self,
                 nisi_52=None,
                 ameta_6=None,
                 laborumab_6=None):
        """Constructor for the References class"""

        # Initialize members of the class
        self.nisi_52 = nisi_52 
        self.ameta_6 = ameta_6 
        self.laborumab_6 = laborumab_6 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        nisi_52 = dictionary.get("nisi52") if dictionary.get("nisi52") else None
        ameta_6 = dictionary.get("ameta6") if dictionary.get("ameta6") else None
        laborumab_6 = dictionary.get("laborumab6") if dictionary.get("laborumab6") else None
        # Return an object of this model
        return cls(nisi_52,
                   ameta_6,
                   laborumab_6)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'nisi_52={self.nisi_52!r}, '
                f'ameta_6={self.ameta_6!r}, '
                f'laborumab_6={self.laborumab_6!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'nisi_52={self.nisi_52!s}, '
                f'ameta_6={self.ameta_6!s}, '
                f'laborumab_6={self.laborumab_6!s})')
