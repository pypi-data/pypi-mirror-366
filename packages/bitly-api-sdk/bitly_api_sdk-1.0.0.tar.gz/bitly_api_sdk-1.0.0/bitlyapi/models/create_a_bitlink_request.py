# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.deeplink_3 import Deeplink3


class CreateABitlinkRequest(object):

    """Implementation of the 'Create a Bitlink Request' model.

    Attributes:
        domain (str): The model property of type str.
        title (str): The model property of type str.
        group_guid (str): The model property of type str.
        tags (List[str]): The model property of type List[str].
        deeplinks (List[Deeplink3]): The model property of type
            List[Deeplink3].
        long_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "domain": 'domain',
        "title": 'title',
        "group_guid": 'group_guid',
        "tags": 'tags',
        "deeplinks": 'deeplinks',
        "long_url": 'long_url'
    }

    def __init__(self,
                 domain=None,
                 title=None,
                 group_guid=None,
                 tags=None,
                 deeplinks=None,
                 long_url=None):
        """Constructor for the CreateABitlinkRequest class"""

        # Initialize members of the class
        self.domain = domain 
        self.title = title 
        self.group_guid = group_guid 
        self.tags = tags 
        self.deeplinks = deeplinks 
        self.long_url = long_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        domain = dictionary.get("domain") if dictionary.get("domain") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        tags = dictionary.get("tags") if dictionary.get("tags") else None
        deeplinks = None
        if dictionary.get('deeplinks') is not None:
            deeplinks = [Deeplink3.from_dictionary(x) for x in dictionary.get('deeplinks')]
        long_url = dictionary.get("long_url") if dictionary.get("long_url") else None
        # Return an object of this model
        return cls(domain,
                   title,
                   group_guid,
                   tags,
                   deeplinks,
                   long_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'domain={self.domain!r}, '
                f'title={self.title!r}, '
                f'group_guid={self.group_guid!r}, '
                f'tags={self.tags!r}, '
                f'deeplinks={self.deeplinks!r}, '
                f'long_url={self.long_url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'domain={self.domain!s}, '
                f'title={self.title!s}, '
                f'group_guid={self.group_guid!s}, '
                f'tags={self.tags!s}, '
                f'deeplinks={self.deeplinks!s}, '
                f'long_url={self.long_url!s})')
