# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class UpdateGroupPreferencesRequest(object):

    """Implementation of the 'Update Group Preferences Request' model.

    Attributes:
        group_guid (str): The model property of type str.
        domain_preference (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_guid": 'group_guid',
        "domain_preference": 'domain_preference'
    }

    def __init__(self,
                 group_guid=None,
                 domain_preference=None):
        """Constructor for the UpdateGroupPreferencesRequest class"""

        # Initialize members of the class
        self.group_guid = group_guid 
        self.domain_preference = domain_preference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        domain_preference = dictionary.get("domain_preference") if dictionary.get("domain_preference") else None
        # Return an object of this model
        return cls(group_guid,
                   domain_preference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!r}, '
                f'domain_preference={self.domain_preference!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!s}, '
                f'domain_preference={self.domain_preference!s})')
