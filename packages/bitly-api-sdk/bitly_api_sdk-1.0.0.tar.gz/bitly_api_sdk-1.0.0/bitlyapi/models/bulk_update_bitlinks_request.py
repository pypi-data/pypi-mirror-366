# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BulkUpdateBitlinksRequest(object):

    """Implementation of the 'Bulk update bitlinks Request' model.

    Attributes:
        action (str): The model property of type str.
        links (List[str]): The model property of type List[str].
        add_tags (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action": 'action',
        "links": 'links',
        "add_tags": 'add_tags'
    }

    def __init__(self,
                 action=None,
                 links=None,
                 add_tags=None):
        """Constructor for the BulkUpdateBitlinksRequest class"""

        # Initialize members of the class
        self.action = action 
        self.links = links 
        self.add_tags = add_tags 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        action = dictionary.get("action") if dictionary.get("action") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        add_tags = dictionary.get("add_tags") if dictionary.get("add_tags") else None
        # Return an object of this model
        return cls(action,
                   links,
                   add_tags)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'action={self.action!r}, '
                f'links={self.links!r}, '
                f'add_tags={self.add_tags!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'action={self.action!s}, '
                f'links={self.links!s}, '
                f'add_tags={self.add_tags!s})')
