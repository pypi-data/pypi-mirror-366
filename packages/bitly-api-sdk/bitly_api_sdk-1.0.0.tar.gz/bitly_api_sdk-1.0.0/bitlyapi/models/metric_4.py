# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.city import City
from bitlyapi.models.clicks import Clicks
from bitlyapi.models.country import Country
from bitlyapi.models.region import Region
from bitlyapi.models.subregion import Subregion


class Metric4(object):

    """Implementation of the 'Metric4' model.

    Attributes:
        city (City): The model property of type City.
        region (Region): The model property of type Region.
        subregion (Subregion): The model property of type Subregion.
        clicks (Clicks): The model property of type Clicks.
        country (Country): The model property of type Country.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "city": 'city',
        "region": 'region',
        "subregion": 'subregion',
        "clicks": 'clicks',
        "country": 'country'
    }

    def __init__(self,
                 city=None,
                 region=None,
                 subregion=None,
                 clicks=None,
                 country=None):
        """Constructor for the Metric4 class"""

        # Initialize members of the class
        self.city = city 
        self.region = region 
        self.subregion = subregion 
        self.clicks = clicks 
        self.country = country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        city = City.from_dictionary(dictionary.get('city')) if dictionary.get('city') else None
        region = Region.from_dictionary(dictionary.get('region')) if dictionary.get('region') else None
        subregion = Subregion.from_dictionary(dictionary.get('subregion')) if dictionary.get('subregion') else None
        clicks = Clicks.from_dictionary(dictionary.get('clicks')) if dictionary.get('clicks') else None
        country = Country.from_dictionary(dictionary.get('country')) if dictionary.get('country') else None
        # Return an object of this model
        return cls(city,
                   region,
                   subregion,
                   clicks,
                   country)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'city={self.city!r}, '
                f'region={self.region!r}, '
                f'subregion={self.subregion!r}, '
                f'clicks={self.clicks!r}, '
                f'country={self.country!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'city={self.city!s}, '
                f'region={self.region!s}, '
                f'subregion={self.subregion!s}, '
                f'clicks={self.clicks!s}, '
                f'country={self.country!s})')
