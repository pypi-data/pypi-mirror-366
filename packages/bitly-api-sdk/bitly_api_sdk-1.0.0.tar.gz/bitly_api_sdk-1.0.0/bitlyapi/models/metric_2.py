# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.clicks import Clicks
from bitlyapi.models.device_type import DeviceType


class Metric2(object):

    """Implementation of the 'Metric2' model.

    Attributes:
        clicks (Clicks): The model property of type Clicks.
        device_type (DeviceType): The model property of type DeviceType.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "clicks": 'clicks',
        "device_type": 'device_type'
    }

    def __init__(self,
                 clicks=None,
                 device_type=None):
        """Constructor for the Metric2 class"""

        # Initialize members of the class
        self.clicks = clicks 
        self.device_type = device_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        clicks = Clicks.from_dictionary(dictionary.get('clicks')) if dictionary.get('clicks') else None
        device_type = DeviceType.from_dictionary(dictionary.get('device_type')) if dictionary.get('device_type') else None
        # Return an object of this model
        return cls(clicks,
                   device_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'clicks={self.clicks!r}, '
                f'device_type={self.device_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'clicks={self.clicks!s}, '
                f'device_type={self.device_type!s})')
