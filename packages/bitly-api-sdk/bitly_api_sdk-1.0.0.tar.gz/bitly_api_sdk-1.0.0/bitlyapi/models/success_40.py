# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.bitlink import Bitlink
from bitlyapi.models.bitlink_history import BitlinkHistory


class SUCCESS40(object):

    """Implementation of the 'SUCCESS40' model.

    Attributes:
        bitlink (Bitlink): The model property of type Bitlink.
        bitlink_history (List[BitlinkHistory]): The model property of type
            List[BitlinkHistory].
        custom_bitlink (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bitlink": 'bitlink',
        "bitlink_history": 'bitlink_history',
        "custom_bitlink": 'custom_bitlink'
    }

    def __init__(self,
                 bitlink=None,
                 bitlink_history=None,
                 custom_bitlink=None):
        """Constructor for the SUCCESS40 class"""

        # Initialize members of the class
        self.bitlink = bitlink 
        self.bitlink_history = bitlink_history 
        self.custom_bitlink = custom_bitlink 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bitlink = Bitlink.from_dictionary(dictionary.get('bitlink')) if dictionary.get('bitlink') else None
        bitlink_history = None
        if dictionary.get('bitlink_history') is not None:
            bitlink_history = [BitlinkHistory.from_dictionary(x) for x in dictionary.get('bitlink_history')]
        custom_bitlink = dictionary.get("custom_bitlink") if dictionary.get("custom_bitlink") else None
        # Return an object of this model
        return cls(bitlink,
                   bitlink_history,
                   custom_bitlink)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bitlink={self.bitlink!r}, '
                f'bitlink_history={self.bitlink_history!r}, '
                f'custom_bitlink={self.custom_bitlink!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bitlink={self.bitlink!s}, '
                f'bitlink_history={self.bitlink_history!s}, '
                f'custom_bitlink={self.custom_bitlink!s})')
