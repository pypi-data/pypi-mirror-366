# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.referrer import Referrer


class ReferrersByDomain(object):

    """Implementation of the 'ReferrersByDomain' model.

    Attributes:
        referrers (List[Referrer]): The model property of type List[Referrer].
        network (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "referrers": 'referrers',
        "network": 'network'
    }

    def __init__(self,
                 referrers=None,
                 network=None):
        """Constructor for the ReferrersByDomain class"""

        # Initialize members of the class
        self.referrers = referrers 
        self.network = network 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        referrers = None
        if dictionary.get('referrers') is not None:
            referrers = [Referrer.from_dictionary(x) for x in dictionary.get('referrers')]
        network = dictionary.get("network") if dictionary.get("network") else None
        # Return an object of this model
        return cls(referrers,
                   network)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'referrers={self.referrers!r}, '
                f'network={self.network!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'referrers={self.referrers!s}, '
                f'network={self.network!s})')
