# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.key import Key
from bitlyapi.models.value import Value


class Metric(object):

    """Implementation of the 'Metric' model.

    Attributes:
        value (Value): The model property of type Value.
        key (Key): The model property of type Key.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "value": 'value',
        "key": 'key'
    }

    def __init__(self,
                 value=None,
                 key=None):
        """Constructor for the Metric class"""

        # Initialize members of the class
        self.value = value 
        self.key = key 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        value = Value.from_dictionary(dictionary.get('value')) if dictionary.get('value') else None
        key = Key.from_dictionary(dictionary.get('key')) if dictionary.get('key') else None
        # Return an object of this model
        return cls(value,
                   key)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!r}, '
                f'key={self.key!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!s}, '
                f'key={self.key!s})')
