# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success import SUCCESS
from bitlyapi.models.success_1 import SUCCESS1
from bitlyapi.models.success_2 import SUCCESS2
from bitlyapi.models.success_3 import SUCCESS3
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException


class OrganizationGuidController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(OrganizationGuidController, self).__init__(config)

    def retrieve_an_organization(self,
                                 organization_guid,
                                 accept):
        """Does a GET request to /organizations/{organization_guid}.

        Retrive details for the specified organization.

        Args:
            organization_guid (str): (Required) A GUID for a Bitly organization
            accept (str): The request header parameter.

        Returns:
            SUCCESS: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/organizations/{organization_guid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('organization_guid')
                            .value(organization_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_shorten_counts_for_an_organization(self,
                                               unit,
                                               units,
                                               unit_reference,
                                               organization_guid,
                                               accept):
        """Does a GET request to /organizations/{organization_guid}/shorten_counts.

        Returns the shorten counts for a specific organization over a
        specified time period.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            organization_guid (str): (Required) A GUID for a Bitly organization
            accept (str): The request header parameter.

        Returns:
            SUCCESS1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/organizations/{organization_guid}/shorten_counts')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('organization_guid')
                            .value(organization_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS1.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_plan_limits(self,
                        organization_guid,
                        accept):
        """Does a GET request to /organizations/{organization_guid}/plan_limits.

        Returns all plan limits and counts available for an organization.

        Args:
            organization_guid (str): (Required) A GUID for a Bitly organization
            accept (str): The request header parameter.

        Returns:
            SUCCESS2: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/organizations/{organization_guid}/plan_limits')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('organization_guid')
                            .value(organization_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS2.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_webhooks(self,
                     organization_guid,
                     accept):
        """Does a GET request to /organizations/{organization_guid}/webhooks.

        Fetch all webhooks available for an Organization

        Args:
            organization_guid (str): (Required) A GUID for a Bitly organization
            accept (str): The request header parameter.

        Returns:
            SUCCESS3: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/organizations/{organization_guid}/webhooks')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('organization_guid')
                            .value(organization_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS3.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
