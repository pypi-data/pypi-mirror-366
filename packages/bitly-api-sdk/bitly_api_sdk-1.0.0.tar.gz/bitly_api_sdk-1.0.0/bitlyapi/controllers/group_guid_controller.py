# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_14 import SUCCESS14
from bitlyapi.models.success_15 import SUCCESS15
from bitlyapi.models.success_16 import SUCCESS16
from bitlyapi.models.success_17 import SUCCESS17
from bitlyapi.models.success_18 import SUCCESS18
from bitlyapi.models.success_19 import SUCCESS19
from bitlyapi.models.success_20 import SUCCESS20
from bitlyapi.models.success_22 import SUCCESS22
from bitlyapi.models.success_1 import SUCCESS1
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException


class GroupGuidController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(GroupGuidController, self).__init__(config)

    def update_a_group(self,
                       group_guid,
                       accept,
                       body):
        """Does a PATCH request to /groups/{group_guid}.

        Updates the details of a group.

        Args:
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.
            body (UpdateAGroupRequest): The request body parameter.

        Returns:
            SUCCESS14: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS14.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_a_group(self,
                         group_guid,
                         accept):
        """Does a GET request to /groups/{group_guid}.

        Returns details for a group.

        Args:
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS15: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS15.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_click_metrics_for_a_group_by_referring_networks(self,
                                                            group_guid,
                                                            accept):
        """Does a GET request to /groups/{group_guid}/referring_networks.

        Returns metrics by referring networks for the specified group's links.

        Args:
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/referring_networks')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_tags_by_group(self,
                               group_guid,
                               accept):
        """Does a GET request to /groups/{group_guid}/tags.

        Returns the tags currently used in the specified group. Maximum 1000.

        Args:
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS17: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/tags')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS17.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_clicks_by_group(self,
                            unit,
                            units,
                            unit_reference,
                            group_guid,
                            accept):
        """Does a GET request to /groups/{group_guid}/clicks.

        get number of clicks on bitlinks in a group

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS18: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/clicks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS18.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def group_overrides(self,
                        group_guid,
                        created_after,
                        limit,
                        offset,
                        bsd,
                        group_guid_template,
                        accept):
        """Does a GET request to /groups/{group_guid}/overrides.

        retrieves all account overrides matching specified group_guid and bsd
        query filters.

        Args:
            group_guid (str): GUIDs for a Bitly group
            created_after (int): Timestamp as an integer unix epoch
            limit (int): limit the amount of results returned
            offset (int): set the starting index of the result set
            bsd (str): a branded short domains to filter results
            group_guid_template (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS19: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/overrides')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('group_guid')
                         .value(group_guid))
            .query_param(Parameter()
                         .key('created_after')
                         .value(created_after))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('bsd')
                         .value(bsd))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid_template)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS19.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_click_metrics_for_a_group_by_device_type(self,
                                                     unit,
                                                     units,
                                                     size,
                                                     unit_reference,
                                                     group_guid,
                                                     accept):
        """Does a GET request to /groups/{group_guid}/devices.

        Returns the device types generating click traffic to the specified
        group's links.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS20: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/devices')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS20.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_click_metrics_for_a_group_by_country(self,
                                                 unit,
                                                 units,
                                                 size,
                                                 unit_reference,
                                                 group_guid,
                                                 accept):
        """Does a GET request to /groups/{group_guid}/countries.

        Returns the geographic origins of click traffic by country for the
        specified group.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/countries')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_click_metrics_for_a_group_by_city(self,
                                              unit,
                                              units,
                                              size,
                                              unit_reference,
                                              group_guid,
                                              accept):
        """Does a GET request to /groups/{group_guid}/cities.

        Returns the geographic origins of click traffic by city for the
        specified group.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS22: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/cities')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS22.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_group_shorten_counts(self,
                                      unit,
                                      units,
                                      unit_reference,
                                      group_guid,
                                      accept):
        """Does a GET request to /groups/{group_guid}/shorten_counts.

        Returns all the shorten counts for a group.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/shorten_counts')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS1.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
