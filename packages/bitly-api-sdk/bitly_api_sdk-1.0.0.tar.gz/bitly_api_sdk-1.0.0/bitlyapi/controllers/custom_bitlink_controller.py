# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_40 import SUCCESS40
from bitlyapi.models.success_16 import SUCCESS16
from bitlyapi.models.success_25 import SUCCESS25
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException
from bitlyapi.exceptions.gone_exception import GONEException


class CustomBitlinkController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(CustomBitlinkController, self).__init__(config)

    def update_custom_bitlink(self,
                              custom_bitlink,
                              accept,
                              body):
        """Does a PATCH request to /custom_bitlinks/{custom_bitlink}.

        Move a keyword (or custom back-half) to a different Bitlink (domains
        must match).

        Args:
            custom_bitlink (str): (Required) A Custom Bitlink made of the
                domain and keyword
            accept (str): The request header parameter.
            body (UpdateCustomBitlinkRequest): The request body parameter.

        Returns:
            SUCCESS40: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/custom_bitlinks/{custom_bitlink}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('custom_bitlink')
                            .value(custom_bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS40.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_custom_bitlink(self,
                                custom_bitlink,
                                accept):
        """Does a GET request to /custom_bitlinks/{custom_bitlink}.

        Returns the details and history of the specified link.

        Args:
            custom_bitlink (str): (Required) A Custom Bitlink made of the
                domain and keyword
            accept (str): The request header parameter.

        Returns:
            SUCCESS40: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/custom_bitlinks/{custom_bitlink}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('custom_bitlink')
                            .value(custom_bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS40.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_custom_bitlink_by_destination(self,
                                                        unit,
                                                        units,
                                                        unit_reference,
                                                        custom_bitlink,
                                                        accept):
        """Does a GET request to /custom_bitlinks/{custom_bitlink}/clicks_by_destination.

        Returns click metrics for the specified link by its historical
        destinations.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            custom_bitlink (str): (Required) A Custom Bitlink made of the
                domain and keyword
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/custom_bitlinks/{custom_bitlink}/clicks_by_destination')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('custom_bitlink')
                            .value(custom_bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_clicks_for_a_custom_bitlink_s_entire_history(self,
                                                         unit,
                                                         units,
                                                         unit_reference,
                                                         custom_bitlink,
                                                         accept):
        """Does a GET request to /custom_bitlinks/{custom_bitlink}/clicks.

        Returns the click counts for the specified link. This returns an array
        with clicks based on a date.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            custom_bitlink (str): (Required) A Custom Bitlink made of the
                domain and keyword
            accept (str): The request header parameter.

        Returns:
            SUCCESS25: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/custom_bitlinks/{custom_bitlink}/clicks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('custom_bitlink')
                            .value(custom_bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS25.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
