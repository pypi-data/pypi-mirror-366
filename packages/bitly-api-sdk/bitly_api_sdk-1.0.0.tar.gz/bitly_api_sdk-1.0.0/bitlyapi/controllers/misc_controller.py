# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_52 import SUCCESS52
from bitlyapi.models.success_53 import SUCCESS53
from bitlyapi.models.success_54 import SUCCESS54
from bitlyapi.models.success_55 import SUCCESS55
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.expectationfailed_exception import EXPECTATIONFAILEDException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.toomanyrequests_exception import TOOMANYREQUESTSException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.gone_exception import GONEException


class MiscController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(MiscController, self).__init__(config)

    def shorten_a_link(self,
                       accept,
                       body):
        """Does a POST request to /shorten.

        Converts a long url to a Bitlink. You may see errors returned from
        this endpoint - "BRANDED_LINK_MONTHLY_LIMIT_EXCEEDED" occurs if you
        have shortened more links than your account is configured for for the
        month, and "DNS_CONFIGURATION_ERROR" occurs if you are attempting to
        shorten links against a custom domain which doesn't have DNS properly
        configured.

        Args:
            accept (str): The request header parameter.
            body (ShortenALinkRequest): The request body parameter.

        Returns:
            SUCCESS52: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shorten')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS52.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('417', 'Expectation Failed', EXPECTATIONFAILEDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('429', 'Too Many Requests', TOOMANYREQUESTSException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def expand_a_bitlink(self,
                         accept,
                         body):
        """Does a POST request to /expand.

        Returns the short link and long URL for the specified link.

        Args:
            accept (str): The request header parameter.
            body (ExpandABitlinkRequest): The request body parameter.

        Returns:
            SUCCESS53: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/expand')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS53.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_bs_ds(self,
                  accept):
        """Does a GET request to /bsds.

        Fetch all Branded Short Domains

        Args:
            accept (str): The request header parameter.

        Returns:
            SUCCESS54: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bsds')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS54.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_o_auth_app(self,
                            client_id,
                            accept):
        """Does a GET request to /apps/{client_id}.

        Retrieve the details for the provided OAuth App client ID

        Args:
            client_id (str): (Required) The client ID of an OAuth app
            accept (str): The request header parameter.

        Returns:
            SUCCESS55: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/apps/{client_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('client_id')
                            .value(client_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS55.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
