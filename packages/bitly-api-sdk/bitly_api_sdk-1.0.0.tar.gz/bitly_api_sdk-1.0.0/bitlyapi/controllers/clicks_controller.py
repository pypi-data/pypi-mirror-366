# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_25 import SUCCESS25
from bitlyapi.models.success_26 import SUCCESS26
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException


class ClicksController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(ClicksController, self).__init__(config)

    def get_clicks_for_a_bitlink(self,
                                 unit,
                                 units,
                                 unit_reference,
                                 bitlink,
                                 accept):
        """Does a GET request to /bitlinks/{bitlink}/clicks.

        Returns the click counts for the specified link in an array based on a
        date.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS25: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/clicks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS25.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_a_clicks_summary_for_a_bitlink(self,
                                           unit,
                                           units,
                                           unit_reference,
                                           bitlink,
                                           accept):
        """Does a GET request to /bitlinks/{bitlink}/clicks/summary.

        Returns the click counts for the specified link rolled up into a
        single field.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS26: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/clicks/summary')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS26.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
