# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_48 import SUCCESS48
from bitlyapi.models.success_51 import SUCCESS51
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException


class ChannelsController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(ChannelsController, self).__init__(config)

    def create_channel(self,
                       accept,
                       body):
        """Does a POST request to /channels.

        Creates a new channel.

        Args:
            accept (str): The request header parameter.
            body (CreateChannelRequest): The request body parameter.

        Returns:
            SUCCESS48: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/channels')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS48.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_channels(self,
                          group_guid,
                          campaign_guid,
                          accept):
        """Does a GET request to /channels.

        Returns the channels available to a user.

        Args:
            group_guid (str): A GUID for a Bitly group
            campaign_guid (str): A GUID for a Bitly campaign
            accept (str): The request header parameter.

        Returns:
            SUCCESS51: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/channels')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('group_guid')
                         .value(group_guid))
            .query_param(Parameter()
                         .key('campaign_guid')
                         .value(campaign_guid))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS51.from_dictionary)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
