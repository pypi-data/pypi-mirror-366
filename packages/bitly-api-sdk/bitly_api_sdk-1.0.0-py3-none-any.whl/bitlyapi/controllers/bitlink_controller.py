# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_27 import SUCCESS27
from bitlyapi.models.success_16 import SUCCESS16
from bitlyapi.models.success_31 import SUCCESS31
from bitlyapi.models.success_22 import SUCCESS22
from bitlyapi.models.success_20 import SUCCESS20
from bitlyapi.models.success_34 import SUCCESS34
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.gone_exception import GONEException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException


class BitlinkController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(BitlinkController, self).__init__(config)

    def update_a_bitlink(self,
                         bitlink,
                         accept,
                         body):
        """Does a PATCH request to /bitlinks/{bitlink}.

        Updates fields in the specified link.

        Args:
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.
            body (UpdateABitlinkRequest): The request body parameter.

        Returns:
            SUCCESS27: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS27.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_a_bitlink(self,
                           bitlink,
                           accept):
        """Does a GET request to /bitlinks/{bitlink}.

        Returns information for the specified link.

        Args:
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS27: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS27.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_bitlink_by_country(self,
                                             unit,
                                             units,
                                             size,
                                             unit_reference,
                                             bitlink,
                                             accept):
        """Does a GET request to /bitlinks/{bitlink}/countries.

        Returns the country origins of click traffic for the specified link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/countries')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_bitlink_by_referring_domains(self,
                                                       unit,
                                                       units,
                                                       size,
                                                       unit_reference,
                                                       bitlink,
                                                       accept):
        """Does a GET request to /bitlinks/{bitlink}/referring_domains.

        Returns the referring domain click counts for the specified link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/referring_domains')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_a_qr_code(self,
                      color,
                      exclude_bitly_logo,
                      image_format,
                      bitlink,
                      accept):
        """Does a GET request to /bitlinks/{bitlink}/qr.

        Generates a QR code for a Bitlink.

        Args:
            color (str): A color denoted in hexidecimal RGB format
            exclude_bitly_logo (bool): Removes the Bitly logo from the center
                of the generated QR image
            image_format (str): Determines the image format of the returned QR
                code
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS31: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/qr')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .query_param(Parameter()
                         .key('exclude_bitly_logo')
                         .value(exclude_bitly_logo))
            .query_param(Parameter()
                         .key('image_format')
                         .value(image_format))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS31.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
        ).execute()

    def get_metrics_for_a_bitlink_by_city(self,
                                          unit,
                                          units,
                                          size,
                                          unit_reference,
                                          bitlink,
                                          accept):
        """Does a GET request to /bitlinks/{bitlink}/cities.

        Returns the city origins of click traffic for the specified link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS22: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/cities')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS22.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_bitlink_by_device_type(self,
                                                 unit,
                                                 units,
                                                 size,
                                                 unit_reference,
                                                 bitlink,
                                                 accept):
        """Does a GET request to /bitlinks/{bitlink}/devices.

        Returns the device types generating click traffic to the specified
        link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS20: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/devices')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS20.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_bitlink_by_referrers_by_domain(self,
                                                         unit,
                                                         units,
                                                         size,
                                                         unit_reference,
                                                         bitlink,
                                                         accept):
        """Does a GET request to /bitlinks/{bitlink}/referrers_by_domains.

        Returns click metrics grouped by referrers for the specified link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS34: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/referrers_by_domains')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS34.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def get_metrics_for_a_bitlink_by_referrers(self,
                                               unit,
                                               units,
                                               size,
                                               unit_reference,
                                               bitlink,
                                               accept):
        """Does a GET request to /bitlinks/{bitlink}/referrers.

        Returns referrer click counts for the specified link.

        Args:
            unit (str): (Required) A unit of time
            units (int): (Required) An integer representing the time units to
                query data for. pass -1 to return all units of time.
            size (int): The quantity of items to be be returned
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            bitlink (str): (Required) A Bitlink made of the domain and hash
            accept (str): The request header parameter.

        Returns:
            SUCCESS16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks/{bitlink}/referrers')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .template_param(Parameter()
                            .key('bitlink')
                            .value(bitlink)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS16.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('410', 'Gone', GONEException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
