# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bitlyapi.api_helper import APIHelper
from bitlyapi.configuration import Server
from bitlyapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from bitlyapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from bitlyapi.models.success_11 import SUCCESS11
from bitlyapi.models.success_12 import SUCCESS12
from bitlyapi.models.success_13 import SUCCESS13
from bitlyapi.models.success_36 import SUCCESS36
from bitlyapi.exceptions.forbidden_exception import FORBIDDENException
from bitlyapi.exceptions.notfound_exception import NOTFOUNDException
from bitlyapi.exceptions.internalerror_exception import INTERNALERRORException
from bitlyapi.exceptions.temporarilyunavailable_exception import TEMPORARILYUNAVAILABLEException
from bitlyapi.exceptions.badrequest_exception import BADREQUESTException
from bitlyapi.exceptions.unprocessableentity_exception import UNPROCESSABLEENTITYException
from bitlyapi.exceptions.upgraderequired_exception import UPGRADEREQUIREDException
from bitlyapi.exceptions.expectationfailed_exception import EXPECTATIONFAILEDException
from bitlyapi.exceptions.toomanyrequests_exception import TOOMANYREQUESTSException


class BitlinksController(BaseController):

    """A Controller to access Endpoints in the bitlyapi API."""
    def __init__(self, config):
        super(BitlinksController, self).__init__(config)

    def retrieve_bitlinks_by_group(self,
                                   size,
                                   page,
                                   keyword,
                                   query,
                                   created_before,
                                   created_after,
                                   modified_after,
                                   archived,
                                   deeplinks,
                                   domain_deeplinks,
                                   campaign_guid,
                                   channel_guid,
                                   custom_bitlink,
                                   tags,
                                   launchpad_ids,
                                   encoding_login,
                                   group_guid,
                                   accept):
        """Does a GET request to /groups/{group_guid}/bitlinks.

        Returns a paginated collection of Bitlinks for a group.

        Args:
            size (int): The quantity of items to be be returned
            page (int): Integer specifying the numbered result at which to
                start
            keyword (str): Custom keyword to filter on history entries
            query (str): the value that you would like to search
            created_before (int): Timestamp as an integer unix epoch
            created_after (int): Timestamp as an integer unix epoch
            modified_after (int): Timestamp as an integer unix epoch
            archived (str): Whether or not to include archived bitlinks
            deeplinks (str): Filter to only Bitlinks that contain deeplinks
            domain_deeplinks (str): Filter to only Bitlinks that contain
                deeplinks configured with a custom domain
            campaign_guid (str): Filter to return only links for the given
                campaign GUID, can be provided
            channel_guid (str): Filter to return only links for the given
                channel GUID, can be provided, overrides all other parameters
            custom_bitlink (str): The request query parameter.
            tags (str): filter by given tags
            launchpad_ids (str): filter by launchpad id
            encoding_login (str): Filter by the login of the authenticated
                user that created the Bitlink
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.

        Returns:
            SUCCESS11: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/bitlinks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('keyword')
                         .value(keyword))
            .query_param(Parameter()
                         .key('query')
                         .value(query))
            .query_param(Parameter()
                         .key('created_before')
                         .value(created_before))
            .query_param(Parameter()
                         .key('created_after')
                         .value(created_after))
            .query_param(Parameter()
                         .key('modified_after')
                         .value(modified_after))
            .query_param(Parameter()
                         .key('archived')
                         .value(archived))
            .query_param(Parameter()
                         .key('deeplinks')
                         .value(deeplinks))
            .query_param(Parameter()
                         .key('domain_deeplinks')
                         .value(domain_deeplinks))
            .query_param(Parameter()
                         .key('campaign_guid')
                         .value(campaign_guid))
            .query_param(Parameter()
                         .key('channel_guid')
                         .value(channel_guid))
            .query_param(Parameter()
                         .key('custom_bitlink')
                         .value(custom_bitlink))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('launchpad_ids')
                         .value(launchpad_ids))
            .query_param(Parameter()
                         .key('encoding_login')
                         .value(encoding_login))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS11.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def bulk_update_bitlinks(self,
                             group_guid,
                             accept,
                             body):
        """Does a PATCH request to /groups/{group_guid}/bitlinks.

        Bulk update can add or remove tags or archive up to 100 links at a
        time; The response includes a list of bitlink ids that were updated.

        Args:
            group_guid (str): (Required) A GUID for a Bitly group
            accept (str): The request header parameter.
            body (BulkUpdateBitlinksRequest): The request body parameter.

        Returns:
            SUCCESS12: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/bitlinks')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS12.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def retrieve_sorted_bitlinks_for_group(self,
                                           unit,
                                           units,
                                           unit_reference,
                                           size,
                                           group_guid,
                                           sort,
                                           accept):
        """Does a GET request to /groups/{group_guid}/bitlinks/{sort}.

        Returns a list of Bitlinks sorted by group.

        Args:
            unit (str): A unit of time
            units (int): An integer representing the time units to query data
                for. pass -1 to return all units of time.
            unit_reference (str): An ISO-8601 timestamp, indicating the most
                recent time for which to pull metrics. Will default to current
                time. Timestamp values should be url encoded (i.e. replace '+'
                with '%2B' and ':' with '%3A'; 2022-02-02T15:53:02+0000
                becomes 2022-02-02T15%3A53%3A02%2B0000)
            size (int): The quantity of items to be be returned
            group_guid (str): (Required) A GUID for a Bitly group
            sort (str): (Required) The type of sorting that you would like to
                do
            accept (str): The request header parameter.

        Returns:
            SUCCESS13: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/groups/{group_guid}/bitlinks/{sort}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('unit')
                         .value(unit))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('unit_reference')
                         .value(unit_reference))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .template_param(Parameter()
                            .key('group_guid')
                            .value(group_guid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sort')
                            .value(sort)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS13.from_dictionary)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()

    def create_a_bitlink(self,
                         accept,
                         body):
        """Does a POST request to /bitlinks.

        Converts a long url to a Bitlink and sets additional parameters. You
        may see errors returned from this endpoint -
        "BRANDED_LINK_MONTHLY_LIMIT_EXCEEDED" occurs if you have shortened
        more links than your account is configured for for the month, and
        "DNS_CONFIGURATION_ERROR" occurs if you are attempting to shorten
        links against a custom domain which doesn't have DNS properly
        configured.

        Args:
            accept (str): The request header parameter.
            body (CreateABitlinkRequest): The request body parameter.

        Returns:
            SUCCESS36: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/bitlinks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SUCCESS36.from_dictionary)
            .local_error('400', 'Bad Request', BADREQUESTException)
            .local_error('402', 'Payment Required', UPGRADEREQUIREDException)
            .local_error('403', 'Forbidden', FORBIDDENException)
            .local_error('404', 'Not Found', NOTFOUNDException)
            .local_error('417', 'Expectation Failed', EXPECTATIONFAILEDException)
            .local_error('422', 'Unprocessable Entity (WebDAV) (RFC 4918)', UNPROCESSABLEENTITYException)
            .local_error('429', 'Too Many Requests', TOOMANYREQUESTSException)
            .local_error('500', 'Internal Server Error', INTERNALERRORException)
            .local_error('503', 'Service Unavailable', TEMPORARILYUNAVAILABLEException)
        ).execute()
