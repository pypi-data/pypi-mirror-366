# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from bitlyapi.configuration import Configuration
from bitlyapi.controllers.base_controller import BaseController
from bitlyapi.configuration import Environment
from bitlyapi.http.auth.o_auth_2 import OAuth2
from bitlyapi.controllers.organization_guid_controller\
    import OrganizationGuidController
from bitlyapi.controllers.organizations_controller\
    import OrganizationsController
from bitlyapi.controllers.campaign_guid_controller\
    import CampaignGuidController
from bitlyapi.controllers.campaigns_controller import CampaignsController
from bitlyapi.controllers.preferences_controller import PreferencesController
from bitlyapi.controllers.bitlinks_controller import BitlinksController
from bitlyapi.controllers.group_guid_controller import GroupGuidController
from bitlyapi.controllers.groups_controller import GroupsController
from bitlyapi.controllers.clicks_controller import ClicksController
from bitlyapi.controllers.bitlink_controller import BitlinkController
from bitlyapi.controllers.webhook_guid_controller import WebhookGuidController
from bitlyapi.controllers.webhooks_controller import WebhooksController
from bitlyapi.controllers.custom_bitlink_controller\
    import CustomBitlinkController
from bitlyapi.controllers.custom_bitlinks_controller\
    import CustomBitlinksController
from bitlyapi.controllers.user_controller import UserController
from bitlyapi.controllers.channel_guid_controller import ChannelGuidController
from bitlyapi.controllers.channels_controller import ChannelsController
from bitlyapi.controllers.misc_controller import MiscController


class BitlyapiClient(object):
    @LazyProperty
    def organization_guid(self):
        return OrganizationGuidController(self.global_configuration)

    @LazyProperty
    def organizations(self):
        return OrganizationsController(self.global_configuration)

    @LazyProperty
    def campaign_guid(self):
        return CampaignGuidController(self.global_configuration)

    @LazyProperty
    def campaigns(self):
        return CampaignsController(self.global_configuration)

    @LazyProperty
    def preferences(self):
        return PreferencesController(self.global_configuration)

    @LazyProperty
    def bitlinks(self):
        return BitlinksController(self.global_configuration)

    @LazyProperty
    def group_guid(self):
        return GroupGuidController(self.global_configuration)

    @LazyProperty
    def groups(self):
        return GroupsController(self.global_configuration)

    @LazyProperty
    def clicks(self):
        return ClicksController(self.global_configuration)

    @LazyProperty
    def bitlink(self):
        return BitlinkController(self.global_configuration)

    @LazyProperty
    def webhook_guid(self):
        return WebhookGuidController(self.global_configuration)

    @LazyProperty
    def webhooks(self):
        return WebhooksController(self.global_configuration)

    @LazyProperty
    def custom_bitlink(self):
        return CustomBitlinkController(self.global_configuration)

    @LazyProperty
    def custom_bitlinks(self):
        return CustomBitlinksController(self.global_configuration)

    @LazyProperty
    def user(self):
        return UserController(self.global_configuration)

    @LazyProperty
    def channel_guid(self):
        return ChannelGuidController(self.global_configuration)

    @LazyProperty
    def channels(self):
        return ChannelsController(self.global_configuration)

    @LazyProperty
    def misc(self):
        return MiscController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['bearer']}
        self.auth_managers['bearer'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

