# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.created import Created
from bitlyapi.models.created_by import CreatedBy
from bitlyapi.models.description import Description
from bitlyapi.models.group_guid import GroupGuid
from bitlyapi.models.guid import Guid
from bitlyapi.models.modified import Modified
from bitlyapi.models.name import Name


class Campaign(object):

    """Implementation of the 'Campaign' model.

    Attributes:
        name (Name): The model property of type Name.
        created (Created): The model property of type Created.
        group_guid (GroupGuid): The model property of type GroupGuid.
        modified (Modified): The model property of type Modified.
        created_by (CreatedBy): The model property of type CreatedBy.
        guid (Guid): The model property of type Guid.
        description (Description): The model property of type Description.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "created": 'created',
        "group_guid": 'group_guid',
        "modified": 'modified',
        "created_by": 'created_by',
        "guid": 'guid',
        "description": 'description'
    }

    def __init__(self,
                 name=None,
                 created=None,
                 group_guid=None,
                 modified=None,
                 created_by=None,
                 guid=None,
                 description=None):
        """Constructor for the Campaign class"""

        # Initialize members of the class
        self.name = name 
        self.created = created 
        self.group_guid = group_guid 
        self.modified = modified 
        self.created_by = created_by 
        self.guid = guid 
        self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        created = Created.from_dictionary(dictionary.get('created')) if dictionary.get('created') else None
        group_guid = GroupGuid.from_dictionary(dictionary.get('group_guid')) if dictionary.get('group_guid') else None
        modified = Modified.from_dictionary(dictionary.get('modified')) if dictionary.get('modified') else None
        created_by = CreatedBy.from_dictionary(dictionary.get('created_by')) if dictionary.get('created_by') else None
        guid = Guid.from_dictionary(dictionary.get('guid')) if dictionary.get('guid') else None
        description = Description.from_dictionary(dictionary.get('description')) if dictionary.get('description') else None
        # Return an object of this model
        return cls(name,
                   created,
                   group_guid,
                   modified,
                   created_by,
                   guid,
                   description)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'created={self.created!r}, '
                f'group_guid={self.group_guid!r}, '
                f'modified={self.modified!r}, '
                f'created_by={self.created_by!r}, '
                f'guid={self.guid!r}, '
                f'description={self.description!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'created={self.created!s}, '
                f'group_guid={self.group_guid!s}, '
                f'modified={self.modified!s}, '
                f'created_by={self.created_by!s}, '
                f'guid={self.guid!s}, '
                f'description={self.description!s})')
