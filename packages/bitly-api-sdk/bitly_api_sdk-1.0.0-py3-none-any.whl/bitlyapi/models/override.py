# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.created import Created
from bitlyapi.models.group_guid import GroupGuid
from bitlyapi.models.id import Id
from bitlyapi.models.link import Link
from bitlyapi.models.modified import Modified
from bitlyapi.models.rules import Rules
from bitlyapi.models.version import Version


class Override(object):

    """Implementation of the 'Override' model.

    Attributes:
        created (Created): The model property of type Created.
        rules (Rules): The model property of type Rules.
        group_guid (GroupGuid): The model property of type GroupGuid.
        modified (Modified): The model property of type Modified.
        version (Version): The model property of type Version.
        link (Link): The model property of type Link.
        id (Id): The model property of type Id.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created": 'created',
        "rules": 'rules',
        "group_guid": 'group_guid',
        "modified": 'modified',
        "version": 'version',
        "link": 'link',
        "id": 'id'
    }

    def __init__(self,
                 created=None,
                 rules=None,
                 group_guid=None,
                 modified=None,
                 version=None,
                 link=None,
                 id=None):
        """Constructor for the Override class"""

        # Initialize members of the class
        self.created = created 
        self.rules = rules 
        self.group_guid = group_guid 
        self.modified = modified 
        self.version = version 
        self.link = link 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        created = Created.from_dictionary(dictionary.get('created')) if dictionary.get('created') else None
        rules = Rules.from_dictionary(dictionary.get('rules')) if dictionary.get('rules') else None
        group_guid = GroupGuid.from_dictionary(dictionary.get('group_guid')) if dictionary.get('group_guid') else None
        modified = Modified.from_dictionary(dictionary.get('modified')) if dictionary.get('modified') else None
        version = Version.from_dictionary(dictionary.get('version')) if dictionary.get('version') else None
        link = Link.from_dictionary(dictionary.get('link')) if dictionary.get('link') else None
        id = Id.from_dictionary(dictionary.get('id')) if dictionary.get('id') else None
        # Return an object of this model
        return cls(created,
                   rules,
                   group_guid,
                   modified,
                   version,
                   link,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'created={self.created!r}, '
                f'rules={self.rules!r}, '
                f'group_guid={self.group_guid!r}, '
                f'modified={self.modified!r}, '
                f'version={self.version!r}, '
                f'link={self.link!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'created={self.created!s}, '
                f'rules={self.rules!s}, '
                f'group_guid={self.group_guid!s}, '
                f'modified={self.modified!s}, '
                f'version={self.version!s}, '
                f'link={self.link!s}, '
                f'id={self.id!s})')
