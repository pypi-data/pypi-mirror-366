# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.references_6 import References6


class SUCCESS15(object):

    """Implementation of the 'SUCCESS15' model.

    Attributes:
        references (References6): The model property of type References6.
        name (str): The model property of type str.
        bsds (List[str]): The model property of type List[str].
        created (str): The model property of type str.
        is_active (bool): The model property of type bool.
        modified (str): The model property of type str.
        organization_guid (str): The model property of type str.
        role (str): The model property of type str.
        guid (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "references": 'references',
        "name": 'name',
        "bsds": 'bsds',
        "created": 'created',
        "is_active": 'is_active',
        "modified": 'modified',
        "organization_guid": 'organization_guid',
        "role": 'role',
        "guid": 'guid'
    }

    def __init__(self,
                 references=None,
                 name=None,
                 bsds=None,
                 created=None,
                 is_active=None,
                 modified=None,
                 organization_guid=None,
                 role=None,
                 guid=None):
        """Constructor for the SUCCESS15 class"""

        # Initialize members of the class
        self.references = references 
        self.name = name 
        self.bsds = bsds 
        self.created = created 
        self.is_active = is_active 
        self.modified = modified 
        self.organization_guid = organization_guid 
        self.role = role 
        self.guid = guid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        references = References6.from_dictionary(dictionary.get('references')) if dictionary.get('references') else None
        name = dictionary.get("name") if dictionary.get("name") else None
        bsds = dictionary.get("bsds") if dictionary.get("bsds") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        is_active = dictionary.get("is_active") if "is_active" in dictionary.keys() else None
        modified = dictionary.get("modified") if dictionary.get("modified") else None
        organization_guid = dictionary.get("organization_guid") if dictionary.get("organization_guid") else None
        role = dictionary.get("role") if dictionary.get("role") else None
        guid = dictionary.get("guid") if dictionary.get("guid") else None
        # Return an object of this model
        return cls(references,
                   name,
                   bsds,
                   created,
                   is_active,
                   modified,
                   organization_guid,
                   role,
                   guid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!r}, '
                f'name={self.name!r}, '
                f'bsds={self.bsds!r}, '
                f'created={self.created!r}, '
                f'is_active={self.is_active!r}, '
                f'modified={self.modified!r}, '
                f'organization_guid={self.organization_guid!r}, '
                f'role={self.role!r}, '
                f'guid={self.guid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!s}, '
                f'name={self.name!s}, '
                f'bsds={self.bsds!s}, '
                f'created={self.created!s}, '
                f'is_active={self.is_active!s}, '
                f'modified={self.modified!s}, '
                f'organization_guid={self.organization_guid!s}, '
                f'role={self.role!s}, '
                f'guid={self.guid!s})')
