# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.count import Count
from bitlyapi.models.description import Description
from bitlyapi.models.limit import Limit
from bitlyapi.models.name import Name


class PlanLimit(object):

    """Implementation of the 'PlanLimit' model.

    Attributes:
        count (Count): The model property of type Count.
        limit (Limit): The model property of type Limit.
        name (Name): The model property of type Name.
        description (Description): The model property of type Description.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "count": 'count',
        "limit": 'limit',
        "name": 'name',
        "description": 'description'
    }

    def __init__(self,
                 count=None,
                 limit=None,
                 name=None,
                 description=None):
        """Constructor for the PlanLimit class"""

        # Initialize members of the class
        self.count = count 
        self.limit = limit 
        self.name = name 
        self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        count = Count.from_dictionary(dictionary.get('count')) if dictionary.get('count') else None
        limit = Limit.from_dictionary(dictionary.get('limit')) if dictionary.get('limit') else None
        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        description = Description.from_dictionary(dictionary.get('description')) if dictionary.get('description') else None
        # Return an object of this model
        return cls(count,
                   limit,
                   name,
                   description)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'count={self.count!r}, '
                f'limit={self.limit!r}, '
                f'name={self.name!r}, '
                f'description={self.description!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'count={self.count!s}, '
                f'limit={self.limit!s}, '
                f'name={self.name!s}, '
                f'description={self.description!s})')
