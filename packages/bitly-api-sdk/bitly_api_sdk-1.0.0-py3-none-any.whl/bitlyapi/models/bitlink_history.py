# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BitlinkHistory(object):

    """Implementation of the 'BitlinkHistory' model.

    Attributes:
        hash (str): The model property of type str.
        uuid (str): The model property of type str.
        keyword (str): The model property of type str.
        created (str): The model property of type str.
        group_guid (str): The model property of type str.
        first_created (str): The model property of type str.
        is_active (bool): The model property of type bool.
        long_url (str): The model property of type str.
        deactivated (str): The model property of type str.
        bsd (str): The model property of type str.
        login (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "hash": 'hash',
        "uuid": 'uuid',
        "keyword": 'keyword',
        "created": 'created',
        "group_guid": 'group_guid',
        "first_created": 'first_created',
        "is_active": 'is_active',
        "long_url": 'long_url',
        "deactivated": 'deactivated',
        "bsd": 'bsd',
        "login": 'login'
    }

    def __init__(self,
                 hash=None,
                 uuid=None,
                 keyword=None,
                 created=None,
                 group_guid=None,
                 first_created=None,
                 is_active=None,
                 long_url=None,
                 deactivated=None,
                 bsd=None,
                 login=None):
        """Constructor for the BitlinkHistory class"""

        # Initialize members of the class
        self.hash = hash 
        self.uuid = uuid 
        self.keyword = keyword 
        self.created = created 
        self.group_guid = group_guid 
        self.first_created = first_created 
        self.is_active = is_active 
        self.long_url = long_url 
        self.deactivated = deactivated 
        self.bsd = bsd 
        self.login = login 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        hash = dictionary.get("hash") if dictionary.get("hash") else None
        uuid = dictionary.get("uuid") if dictionary.get("uuid") else None
        keyword = dictionary.get("keyword") if dictionary.get("keyword") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        first_created = dictionary.get("first_created") if dictionary.get("first_created") else None
        is_active = dictionary.get("is_active") if "is_active" in dictionary.keys() else None
        long_url = dictionary.get("long_url") if dictionary.get("long_url") else None
        deactivated = dictionary.get("deactivated") if dictionary.get("deactivated") else None
        bsd = dictionary.get("bsd") if dictionary.get("bsd") else None
        login = dictionary.get("login") if dictionary.get("login") else None
        # Return an object of this model
        return cls(hash,
                   uuid,
                   keyword,
                   created,
                   group_guid,
                   first_created,
                   is_active,
                   long_url,
                   deactivated,
                   bsd,
                   login)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'hash={self.hash!r}, '
                f'uuid={self.uuid!r}, '
                f'keyword={self.keyword!r}, '
                f'created={self.created!r}, '
                f'group_guid={self.group_guid!r}, '
                f'first_created={self.first_created!r}, '
                f'is_active={self.is_active!r}, '
                f'long_url={self.long_url!r}, '
                f'deactivated={self.deactivated!r}, '
                f'bsd={self.bsd!r}, '
                f'login={self.login!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'hash={self.hash!s}, '
                f'uuid={self.uuid!s}, '
                f'keyword={self.keyword!s}, '
                f'created={self.created!s}, '
                f'group_guid={self.group_guid!s}, '
                f'first_created={self.first_created!s}, '
                f'is_active={self.is_active!s}, '
                f'long_url={self.long_url!s}, '
                f'deactivated={self.deactivated!s}, '
                f'bsd={self.bsd!s}, '
                f'login={self.login!s})')
