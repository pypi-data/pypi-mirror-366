# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class UpdateWebhookRequest(object):

    """Implementation of the 'Update Webhook Request' model.

    Attributes:
        guid (str): The model property of type str.
        name (str): The model property of type str.
        url (str): The model property of type str.
        group_guid (str): The model property of type str.
        is_active (bool): The model property of type bool.
        organization_guid (str): The model property of type str.
        client_id (str): The model property of type str.
        client_secret (str): The model property of type str.
        oauth_url (str): The model property of type str.
        event (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "guid": 'guid',
        "name": 'name',
        "url": 'url',
        "group_guid": 'group_guid',
        "is_active": 'is_active',
        "organization_guid": 'organization_guid',
        "client_id": 'client_id',
        "client_secret": 'client_secret',
        "oauth_url": 'oauth_url',
        "event": 'event'
    }

    def __init__(self,
                 guid=None,
                 name=None,
                 url=None,
                 group_guid=None,
                 is_active=None,
                 organization_guid=None,
                 client_id=None,
                 client_secret=None,
                 oauth_url=None,
                 event=None):
        """Constructor for the UpdateWebhookRequest class"""

        # Initialize members of the class
        self.guid = guid 
        self.name = name 
        self.url = url 
        self.group_guid = group_guid 
        self.is_active = is_active 
        self.organization_guid = organization_guid 
        self.client_id = client_id 
        self.client_secret = client_secret 
        self.oauth_url = oauth_url 
        self.event = event 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        guid = dictionary.get("guid") if dictionary.get("guid") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        is_active = dictionary.get("is_active") if "is_active" in dictionary.keys() else None
        organization_guid = dictionary.get("organization_guid") if dictionary.get("organization_guid") else None
        client_id = dictionary.get("client_id") if dictionary.get("client_id") else None
        client_secret = dictionary.get("client_secret") if dictionary.get("client_secret") else None
        oauth_url = dictionary.get("oauth_url") if dictionary.get("oauth_url") else None
        event = dictionary.get("event") if dictionary.get("event") else None
        # Return an object of this model
        return cls(guid,
                   name,
                   url,
                   group_guid,
                   is_active,
                   organization_guid,
                   client_id,
                   client_secret,
                   oauth_url,
                   event)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'guid={self.guid!r}, '
                f'name={self.name!r}, '
                f'url={self.url!r}, '
                f'group_guid={self.group_guid!r}, '
                f'is_active={self.is_active!r}, '
                f'organization_guid={self.organization_guid!r}, '
                f'client_id={self.client_id!r}, '
                f'client_secret={self.client_secret!r}, '
                f'oauth_url={self.oauth_url!r}, '
                f'event={self.event!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'guid={self.guid!s}, '
                f'name={self.name!s}, '
                f'url={self.url!s}, '
                f'group_guid={self.group_guid!s}, '
                f'is_active={self.is_active!s}, '
                f'organization_guid={self.organization_guid!s}, '
                f'client_id={self.client_id!s}, '
                f'client_secret={self.client_secret!s}, '
                f'oauth_url={self.oauth_url!s}, '
                f'event={self.event!s})')
