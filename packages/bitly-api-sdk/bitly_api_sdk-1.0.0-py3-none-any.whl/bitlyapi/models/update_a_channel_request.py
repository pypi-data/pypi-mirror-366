# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.bitlink_3 import Bitlink3


class UpdateAChannelRequest(object):

    """Implementation of the 'Update a Channel Request' model.

    Attributes:
        group_guid (str): The model property of type str.
        guid (str): The model property of type str.
        name (str): The model property of type str.
        modified (str): The model property of type str.
        created (str): The model property of type str.
        bitlinks (List[Bitlink3]): The model property of type List[Bitlink3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_guid": 'group_guid',
        "guid": 'guid',
        "name": 'name',
        "modified": 'modified',
        "created": 'created',
        "bitlinks": 'bitlinks'
    }

    def __init__(self,
                 group_guid=None,
                 guid=None,
                 name=None,
                 modified=None,
                 created=None,
                 bitlinks=None):
        """Constructor for the UpdateAChannelRequest class"""

        # Initialize members of the class
        self.group_guid = group_guid 
        self.guid = guid 
        self.name = name 
        self.modified = modified 
        self.created = created 
        self.bitlinks = bitlinks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        group_guid = dictionary.get("group_guid") if dictionary.get("group_guid") else None
        guid = dictionary.get("guid") if dictionary.get("guid") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        modified = dictionary.get("modified") if dictionary.get("modified") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        bitlinks = None
        if dictionary.get('bitlinks') is not None:
            bitlinks = [Bitlink3.from_dictionary(x) for x in dictionary.get('bitlinks')]
        # Return an object of this model
        return cls(group_guid,
                   guid,
                   name,
                   modified,
                   created,
                   bitlinks)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!r}, '
                f'guid={self.guid!r}, '
                f'name={self.name!r}, '
                f'modified={self.modified!r}, '
                f'created={self.created!r}, '
                f'bitlinks={self.bitlinks!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'group_guid={self.group_guid!s}, '
                f'guid={self.guid!s}, '
                f'name={self.name!s}, '
                f'modified={self.modified!s}, '
                f'created={self.created!s}, '
                f'bitlinks={self.bitlinks!s})')
