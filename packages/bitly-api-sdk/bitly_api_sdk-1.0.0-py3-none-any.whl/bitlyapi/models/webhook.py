# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.client_id import ClientId
from bitlyapi.models.client_secret import ClientSecret
from bitlyapi.models.created import Created
from bitlyapi.models.deactivated import Deactivated
from bitlyapi.models.event import Event
from bitlyapi.models.fetch_tags import FetchTags
from bitlyapi.models.group_guid import GroupGuid
from bitlyapi.models.guid import Guid
from bitlyapi.models.is_active import IsActive
from bitlyapi.models.modified import Modified
from bitlyapi.models.modified_by import ModifiedBy
from bitlyapi.models.name import Name
from bitlyapi.models.oauth_url import OauthUrl
from bitlyapi.models.organization_guid import OrganizationGuid
from bitlyapi.models.status import Status
from bitlyapi.models.url import Url


class Webhook(object):

    """Implementation of the 'Webhook' model.

    Attributes:
        status (Status): The model property of type Status.
        modified_by (ModifiedBy): The model property of type ModifiedBy.
        name (Name): The model property of type Name.
        created (Created): The model property of type Created.
        url (Url): The model property of type Url.
        deactivated (Deactivated): The model property of type Deactivated.
        fetch_tags (FetchTags): The model property of type FetchTags.
        is_active (IsActive): The model property of type IsActive.
        modified (Modified): The model property of type Modified.
        organization_guid (OrganizationGuid): The model property of type
            OrganizationGuid.
        client_id (ClientId): The model property of type ClientId.
        group_guid (GroupGuid): The model property of type GroupGuid.
        client_secret (ClientSecret): The model property of type ClientSecret.
        oauth_url (OauthUrl): The model property of type OauthUrl.
        guid (Guid): The model property of type Guid.
        event (Event): The model property of type Event.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "modified_by": 'modified_by',
        "name": 'name',
        "created": 'created',
        "url": 'url',
        "deactivated": 'deactivated',
        "fetch_tags": 'fetch_tags',
        "is_active": 'is_active',
        "modified": 'modified',
        "organization_guid": 'organization_guid',
        "client_id": 'client_id',
        "group_guid": 'group_guid',
        "client_secret": 'client_secret',
        "oauth_url": 'oauth_url',
        "guid": 'guid',
        "event": 'event'
    }

    def __init__(self,
                 status=None,
                 modified_by=None,
                 name=None,
                 created=None,
                 url=None,
                 deactivated=None,
                 fetch_tags=None,
                 is_active=None,
                 modified=None,
                 organization_guid=None,
                 client_id=None,
                 group_guid=None,
                 client_secret=None,
                 oauth_url=None,
                 guid=None,
                 event=None):
        """Constructor for the Webhook class"""

        # Initialize members of the class
        self.status = status 
        self.modified_by = modified_by 
        self.name = name 
        self.created = created 
        self.url = url 
        self.deactivated = deactivated 
        self.fetch_tags = fetch_tags 
        self.is_active = is_active 
        self.modified = modified 
        self.organization_guid = organization_guid 
        self.client_id = client_id 
        self.group_guid = group_guid 
        self.client_secret = client_secret 
        self.oauth_url = oauth_url 
        self.guid = guid 
        self.event = event 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        status = Status.from_dictionary(dictionary.get('status')) if dictionary.get('status') else None
        modified_by = ModifiedBy.from_dictionary(dictionary.get('modified_by')) if dictionary.get('modified_by') else None
        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        created = Created.from_dictionary(dictionary.get('created')) if dictionary.get('created') else None
        url = Url.from_dictionary(dictionary.get('url')) if dictionary.get('url') else None
        deactivated = Deactivated.from_dictionary(dictionary.get('deactivated')) if dictionary.get('deactivated') else None
        fetch_tags = FetchTags.from_dictionary(dictionary.get('fetch_tags')) if dictionary.get('fetch_tags') else None
        is_active = IsActive.from_dictionary(dictionary.get('is_active')) if dictionary.get('is_active') else None
        modified = Modified.from_dictionary(dictionary.get('modified')) if dictionary.get('modified') else None
        organization_guid = OrganizationGuid.from_dictionary(dictionary.get('organization_guid')) if dictionary.get('organization_guid') else None
        client_id = ClientId.from_dictionary(dictionary.get('client_id')) if dictionary.get('client_id') else None
        group_guid = GroupGuid.from_dictionary(dictionary.get('group_guid')) if dictionary.get('group_guid') else None
        client_secret = ClientSecret.from_dictionary(dictionary.get('client_secret')) if dictionary.get('client_secret') else None
        oauth_url = OauthUrl.from_dictionary(dictionary.get('oauth_url')) if dictionary.get('oauth_url') else None
        guid = Guid.from_dictionary(dictionary.get('guid')) if dictionary.get('guid') else None
        event = Event.from_dictionary(dictionary.get('event')) if dictionary.get('event') else None
        # Return an object of this model
        return cls(status,
                   modified_by,
                   name,
                   created,
                   url,
                   deactivated,
                   fetch_tags,
                   is_active,
                   modified,
                   organization_guid,
                   client_id,
                   group_guid,
                   client_secret,
                   oauth_url,
                   guid,
                   event)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'status={self.status!r}, '
                f'modified_by={self.modified_by!r}, '
                f'name={self.name!r}, '
                f'created={self.created!r}, '
                f'url={self.url!r}, '
                f'deactivated={self.deactivated!r}, '
                f'fetch_tags={self.fetch_tags!r}, '
                f'is_active={self.is_active!r}, '
                f'modified={self.modified!r}, '
                f'organization_guid={self.organization_guid!r}, '
                f'client_id={self.client_id!r}, '
                f'group_guid={self.group_guid!r}, '
                f'client_secret={self.client_secret!r}, '
                f'oauth_url={self.oauth_url!r}, '
                f'guid={self.guid!r}, '
                f'event={self.event!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'status={self.status!s}, '
                f'modified_by={self.modified_by!s}, '
                f'name={self.name!s}, '
                f'created={self.created!s}, '
                f'url={self.url!s}, '
                f'deactivated={self.deactivated!s}, '
                f'fetch_tags={self.fetch_tags!s}, '
                f'is_active={self.is_active!s}, '
                f'modified={self.modified!s}, '
                f'organization_guid={self.organization_guid!s}, '
                f'client_id={self.client_id!s}, '
                f'group_guid={self.group_guid!s}, '
                f'client_secret={self.client_secret!s}, '
                f'oauth_url={self.oauth_url!s}, '
                f'guid={self.guid!s}, '
                f'event={self.event!s})')
