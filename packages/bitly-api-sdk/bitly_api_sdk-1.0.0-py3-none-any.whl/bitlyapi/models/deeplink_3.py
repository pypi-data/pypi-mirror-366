# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Deeplink3(object):

    """Implementation of the 'Deeplink3' model.

    Attributes:
        app_uri_path (str): The model property of type str.
        install_type (str): The model property of type str.
        install_url (str): The model property of type str.
        app_id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app_uri_path": 'app_uri_path',
        "install_type": 'install_type',
        "install_url": 'install_url',
        "app_id": 'app_id'
    }

    def __init__(self,
                 app_uri_path=None,
                 install_type=None,
                 install_url=None,
                 app_id=None):
        """Constructor for the Deeplink3 class"""

        # Initialize members of the class
        self.app_uri_path = app_uri_path 
        self.install_type = install_type 
        self.install_url = install_url 
        self.app_id = app_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        app_uri_path = dictionary.get("app_uri_path") if dictionary.get("app_uri_path") else None
        install_type = dictionary.get("install_type") if dictionary.get("install_type") else None
        install_url = dictionary.get("install_url") if dictionary.get("install_url") else None
        app_id = dictionary.get("app_id") if dictionary.get("app_id") else None
        # Return an object of this model
        return cls(app_uri_path,
                   install_type,
                   install_url,
                   app_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'app_uri_path={self.app_uri_path!r}, '
                f'install_type={self.install_type!r}, '
                f'install_url={self.install_url!r}, '
                f'app_id={self.app_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'app_uri_path={self.app_uri_path!s}, '
                f'install_type={self.install_type!s}, '
                f'install_url={self.install_url!s}, '
                f'app_id={self.app_id!s})')
