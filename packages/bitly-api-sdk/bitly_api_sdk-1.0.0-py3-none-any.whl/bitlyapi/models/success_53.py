# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class SUCCESS53(object):

    """Implementation of the 'SUCCESS53' model.

    Attributes:
        long_url (str): The model property of type str.
        created_at (str): The model property of type str.
        link (str): The model property of type str.
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "long_url": 'long_url',
        "created_at": 'created_at',
        "link": 'link',
        "id": 'id'
    }

    def __init__(self,
                 long_url=None,
                 created_at=None,
                 link=None,
                 id=None):
        """Constructor for the SUCCESS53 class"""

        # Initialize members of the class
        self.long_url = long_url 
        self.created_at = created_at 
        self.link = link 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        long_url = dictionary.get("long_url") if dictionary.get("long_url") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        link = dictionary.get("link") if dictionary.get("link") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(long_url,
                   created_at,
                   link,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'long_url={self.long_url!r}, '
                f'created_at={self.created_at!r}, '
                f'link={self.link!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'long_url={self.long_url!s}, '
                f'created_at={self.created_at!s}, '
                f'link={self.link!s}, '
                f'id={self.id!s})')
