# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.deeplink import Deeplink
from bitlyapi.models.references_7 import References7


class UpdateABitlinkRequest(object):

    """Implementation of the 'Update a Bitlink Request' model.

    Attributes:
        references (References7): The model property of type References7.
        archived (bool): The model property of type bool.
        is_deleted (bool): The model property of type bool.
        tags (List[str]): The model property of type List[str].
        created_at (str): The model property of type str.
        title (str): The model property of type str.
        deeplinks (List[Deeplink]): The model property of type List[Deeplink].
        created_by (str): The model property of type str.
        long_url (str): The model property of type str.
        client_id (str): The model property of type str.
        custom_bitlinks (List[str]): The model property of type List[str].
        link (str): The model property of type str.
        launchpad_ids (List[str]): The model property of type List[str].
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "references": 'references',
        "archived": 'archived',
        "is_deleted": 'is_deleted',
        "tags": 'tags',
        "created_at": 'created_at',
        "title": 'title',
        "deeplinks": 'deeplinks',
        "created_by": 'created_by',
        "long_url": 'long_url',
        "client_id": 'client_id',
        "custom_bitlinks": 'custom_bitlinks',
        "link": 'link',
        "launchpad_ids": 'launchpad_ids',
        "id": 'id'
    }

    def __init__(self,
                 references=None,
                 archived=None,
                 is_deleted=None,
                 tags=None,
                 created_at=None,
                 title=None,
                 deeplinks=None,
                 created_by=None,
                 long_url=None,
                 client_id=None,
                 custom_bitlinks=None,
                 link=None,
                 launchpad_ids=None,
                 id=None):
        """Constructor for the UpdateABitlinkRequest class"""

        # Initialize members of the class
        self.references = references 
        self.archived = archived 
        self.is_deleted = is_deleted 
        self.tags = tags 
        self.created_at = created_at 
        self.title = title 
        self.deeplinks = deeplinks 
        self.created_by = created_by 
        self.long_url = long_url 
        self.client_id = client_id 
        self.custom_bitlinks = custom_bitlinks 
        self.link = link 
        self.launchpad_ids = launchpad_ids 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        references = References7.from_dictionary(dictionary.get('references')) if dictionary.get('references') else None
        archived = dictionary.get("archived") if "archived" in dictionary.keys() else None
        is_deleted = dictionary.get("is_deleted") if "is_deleted" in dictionary.keys() else None
        tags = dictionary.get("tags") if dictionary.get("tags") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        deeplinks = None
        if dictionary.get('deeplinks') is not None:
            deeplinks = [Deeplink.from_dictionary(x) for x in dictionary.get('deeplinks')]
        created_by = dictionary.get("created_by") if dictionary.get("created_by") else None
        long_url = dictionary.get("long_url") if dictionary.get("long_url") else None
        client_id = dictionary.get("client_id") if dictionary.get("client_id") else None
        custom_bitlinks = dictionary.get("custom_bitlinks") if dictionary.get("custom_bitlinks") else None
        link = dictionary.get("link") if dictionary.get("link") else None
        launchpad_ids = dictionary.get("launchpad_ids") if dictionary.get("launchpad_ids") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(references,
                   archived,
                   is_deleted,
                   tags,
                   created_at,
                   title,
                   deeplinks,
                   created_by,
                   long_url,
                   client_id,
                   custom_bitlinks,
                   link,
                   launchpad_ids,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!r}, '
                f'archived={self.archived!r}, '
                f'is_deleted={self.is_deleted!r}, '
                f'tags={self.tags!r}, '
                f'created_at={self.created_at!r}, '
                f'title={self.title!r}, '
                f'deeplinks={self.deeplinks!r}, '
                f'created_by={self.created_by!r}, '
                f'long_url={self.long_url!r}, '
                f'client_id={self.client_id!r}, '
                f'custom_bitlinks={self.custom_bitlinks!r}, '
                f'link={self.link!r}, '
                f'launchpad_ids={self.launchpad_ids!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!s}, '
                f'archived={self.archived!s}, '
                f'is_deleted={self.is_deleted!s}, '
                f'tags={self.tags!s}, '
                f'created_at={self.created_at!s}, '
                f'title={self.title!s}, '
                f'deeplinks={self.deeplinks!s}, '
                f'created_by={self.created_by!s}, '
                f'long_url={self.long_url!s}, '
                f'client_id={self.client_id!s}, '
                f'custom_bitlinks={self.custom_bitlinks!s}, '
                f'link={self.link!s}, '
                f'launchpad_ids={self.launchpad_ids!s}, '
                f'id={self.id!s})')
