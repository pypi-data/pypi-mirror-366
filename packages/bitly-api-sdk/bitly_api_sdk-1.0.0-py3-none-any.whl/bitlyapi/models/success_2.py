# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.plan_limit import PlanLimit
from bitlyapi.models.references_1 import References1


class SUCCESS2(object):

    """Implementation of the 'SUCCESS2' model.

    Attributes:
        references (References1): The model property of type References1.
        organization_guid (str): The model property of type str.
        plan_limits (List[PlanLimit]): The model property of type
            List[PlanLimit].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "references": 'references',
        "organization_guid": 'organization_guid',
        "plan_limits": 'plan_limits'
    }

    def __init__(self,
                 references=None,
                 organization_guid=None,
                 plan_limits=None):
        """Constructor for the SUCCESS2 class"""

        # Initialize members of the class
        self.references = references 
        self.organization_guid = organization_guid 
        self.plan_limits = plan_limits 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        references = References1.from_dictionary(dictionary.get('references')) if dictionary.get('references') else None
        organization_guid = dictionary.get("organization_guid") if dictionary.get("organization_guid") else None
        plan_limits = None
        if dictionary.get('plan_limits') is not None:
            plan_limits = [PlanLimit.from_dictionary(x) for x in dictionary.get('plan_limits')]
        # Return an object of this model
        return cls(references,
                   organization_guid,
                   plan_limits)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!r}, '
                f'organization_guid={self.organization_guid!r}, '
                f'plan_limits={self.plan_limits!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'references={self.references!s}, '
                f'organization_guid={self.organization_guid!s}, '
                f'plan_limits={self.plan_limits!s})')
