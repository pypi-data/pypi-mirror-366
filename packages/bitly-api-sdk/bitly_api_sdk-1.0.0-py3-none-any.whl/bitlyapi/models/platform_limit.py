# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from bitlyapi.models.method import Method


class PlatformLimit(object):

    """Implementation of the 'PlatformLimit' model.

    Attributes:
        endpoint (str): The model property of type str.
        methods (List[Method]): The model property of type List[Method].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "endpoint": 'endpoint',
        "methods": 'methods'
    }

    def __init__(self,
                 endpoint=None,
                 methods=None):
        """Constructor for the PlatformLimit class"""

        # Initialize members of the class
        self.endpoint = endpoint 
        self.methods = methods 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        endpoint = dictionary.get("endpoint") if dictionary.get("endpoint") else None
        methods = None
        if dictionary.get('methods') is not None:
            methods = [Method.from_dictionary(x) for x in dictionary.get('methods')]
        # Return an object of this model
        return cls(endpoint,
                   methods)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'endpoint={self.endpoint!r}, '
                f'methods={self.methods!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'endpoint={self.endpoint!s}, '
                f'methods={self.methods!s})')
