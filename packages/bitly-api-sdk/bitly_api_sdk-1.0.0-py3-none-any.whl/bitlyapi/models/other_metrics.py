# -*- coding: utf-8 -*-

"""
bitlyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OtherMetrics(object):

    """Implementation of the 'OtherMetrics' model.

    Attributes:
        other_city_clicks (int): The model property of type int.
        no_city_clicks (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "other_city_clicks": 'other_city_clicks',
        "no_city_clicks": 'no_city_clicks'
    }

    def __init__(self,
                 other_city_clicks=None,
                 no_city_clicks=None):
        """Constructor for the OtherMetrics class"""

        # Initialize members of the class
        self.other_city_clicks = other_city_clicks 
        self.no_city_clicks = no_city_clicks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        other_city_clicks = dictionary.get("other_city_clicks") if dictionary.get("other_city_clicks") else None
        no_city_clicks = dictionary.get("no_city_clicks") if dictionary.get("no_city_clicks") else None
        # Return an object of this model
        return cls(other_city_clicks,
                   no_city_clicks)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'other_city_clicks={self.other_city_clicks!r}, '
                f'no_city_clicks={self.no_city_clicks!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'other_city_clicks={self.other_city_clicks!s}, '
                f'no_city_clicks={self.no_city_clicks!s})')
