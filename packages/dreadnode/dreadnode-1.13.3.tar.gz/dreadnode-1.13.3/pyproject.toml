[project]
name = "dreadnode"
version = "1.13.3"
description = "Dreadnode SDK"
requires-python = ">=3.10,<3.14"

[tool.poetry]
name = "dreadnode"
version = "1.13.3"
description = "Dreadnode SDK"
authors = ["Nick Landers <monoxgas@gmail.com>"]
repository = "https://github.com/dreadnode/sdk"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
pydantic = "^2.9.2"
httpx = "^0.28.0"
logfire = ">=3.5.3,<=3.20.0"
python-ulid = "^3.0.0"
coolname = "^2.2.0"
pandas = "^2.2.3"
fsspec = { version = ">=2023.1.0,<=2025.3.0", extras = [
    "s3",
] } # Pinned for datasets compatibility
cyclopts = "^3.22.2"

transformers = { version = "^4.41.0", optional = true }
soundfile = { version = "^0.13.1", optional = true }
moviepy = { version = "^2.1.2", optional = true }
pillow = { version = "^11.2.1", optional = true }
rigging = "^3.2.1"

[tool.poetry.extras]
training = ["transformers"]
multimodal = ["pillow", "soundfile", "moviepy"]
all = ["multimodal", "training"]

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
ruff = "^0.11.6"
pre-commit = "^4.0.0"
pytest = "^8.3.3"
pytest-asyncio = "^0.26.0"
types-protobuf = "^5.29.1.20250208"
pandas-stubs = "^2.2.3.250308"
types-requests = "^2.32.0.20250306"
typer = "^0.15.2"
datasets = "^3.5.0"
pyarrow = "^19.0.1"
markdown = "^3.8.2"
markdownify = "^1.1.0"
mkdocstrings-python = "^1.16.12"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=42", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
packages = ["src"]

[project.scripts]
dreadnode = 'dreadnode.__main__:run'
dn = 'dreadnode.__main__:run'

[tool.poetry.plugins."pipx.run"]
dreadnode = 'dreadnode.__main__:run'

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
strict = true
python_version = "3.10"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.coverage.run]
branch = true
source = ["scripts"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
    "*.ipynb", # jupyter notebooks
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E501",    # line too long (we make best effort)
    "TRY003",  # long messages in exception classes
    "EM",      # picky message construction for exceptions
    "C90",     # mccabe complexity
    "A002",    # shadowing built-in
    "D",       # docstrings
    "ANN",     # annotations (handled by mypy)
    "PLR0913", # too many arguments
    "ERA001",  # commented out code
    "FIX002",  # contains todo, consider fixing
    "COM812",  # disabled for formatting
    "ISC001",  # disabled for formatting
]

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.lint.extend-per-file-ignores]
".hooks/**/*.py" = [
    "ARG001", # temporary for rigging decorators
    "T201",   # printing is fine for hooks
]
"tests/**/*.py" = [
    "INP001", # namespace not required for pytest
    "S101",   # asserts allowed in tests...
    "SLF001", # allow access to private members
]
