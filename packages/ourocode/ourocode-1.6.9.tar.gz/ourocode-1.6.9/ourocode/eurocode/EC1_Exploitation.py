from math import *

import forallpeople as si
from handcalcs.decorator import handcalc

from ourocode.eurocode.A0_Projet import Projet


class Exploitation(Projet):
    CATEGORIE = list(Projet._data_from_csv(Projet, "exploitation.csv").index)
    def __init__(self, categorie: str=CATEGORIE, **kwargs):
        """Créer une classe permettant la définition des charges d'exploitation selon l'EN 1991-1-1 et son AN.
        Cette classe est hérité de la classe Projet du module A0_Projet.py

        Args:
            categorie (str, optional): Catégorie d'exploitation avec pour exemple : "A_plancher", pour un plancher d'habitation.
        """
        super().__init__(**kwargs)
        self.categorie = categorie

    @property
    def cat_exploitation(self):
        """Retourne le dataframe de la catégorie d'exploitation choisi
        """
        file = "exploitation.csv"
        df = self._data_from_csv(file)
        return df.loc[self.categorie]
    
    
    @property
    def qk(self):
        """Retourne la charge linéique de la catégorie d'exploitation définit.
        """
        return self.cat_exploitation["qk (kN/m²)"] * si.kN/si.m**2
    
    
    @property
    def Qk(self):
        """Retourne la charge ponctuelle à appliquer aux endroits les plus défavorables du modèle.
        """
        return self.cat_exploitation["Qk (kN)"] * si.kN
    
    
    def alpha_A(self, A: float):
        """Retourne le coefficient de réduction de charge à appliquer à la valeur qk selon l'EN 1991-1-1 et son AN §6.2.1(4) et 6.3.1.2(10).
        Cela concernent les catégories d'usage suivantes: A, B, C3, D1, F.

        Args:
            A (float): Aire chargée en m²

        Returns:
            float: coef. de réduction
        """
        A = A * si.m**2
        A_0 = 3.5 * si.m**2
        q_k = self.qk

        if self.categorie in ("A_plancher", "A_escalier", "A_balcons", "B", "C3", "D1", "F"):
            @handcalc(override="short", precision=2, jupyter_display=self.JUPYTER_DISPLAY, left="\[", right="\]")
            def val():
                alpha_A = min(0.77 + A_0 / A, 1) #EN 1991-1-1 et son AN §6.2.1(4) et 6.3.1.2(10)
                q_k_alpha_A = q_k * alpha_A
                return alpha_A
            return val()
        else:
            print("La catégorie n'a pas de réduction possible par le coefficient alphaA.")
            return False


    def alpha_n(self, n: int):
        """Retourne le coefficient de réduction de charge pour les poteaux et les murs, à multiplier par la charge d'exploitation totale apportée 
        par plusieurs étages selon l'EN 1991-1-1 et son AN §6.2.2(2) et 6.3.1.2(11).
        Cela concernent les catégories d'usage suivantes: A, B, C3, D1, F.

        Args:
            n (int): le nombre d'étages (> 2) au-dessus des éléments structuraux chargés de la même catégorie

        Returns:
            float: coef. de réduction
        """
        if n > 2:
            if self.categorie in ("B", "F"):
                @handcalc(override="short", precision=2, jupyter_display=self.JUPYTER_DISPLAY, left="\[", right="\]")
                def val():
                    alpha_n = 0.7 + 0.8 / n #EN 1991-1-1 §6.2.2(2) et 6.3.1.2(11)
                    return alpha_n
                return val()
            
            elif self.categorie in ("A_plancher", "A_escalier", "A_balcons"):
                @handcalc(override="short", precision=2, jupyter_display=self.JUPYTER_DISPLAY, left="\[", right="\]")
                def val():
                    alpha_n = 0.5 + 1.36 / n #EN 1991-1-1 §6.2.2(2) et 6.3.1.2(11)
                    return alpha_n
                return val()
            
        print("La catégorie n'a pas de réduction possible par le coefficient alpha_n.")
        return False

    

if __name__ == "__main__":
    expl = Exploitation("A_plancher")
    print(expl.alpha_n(3))