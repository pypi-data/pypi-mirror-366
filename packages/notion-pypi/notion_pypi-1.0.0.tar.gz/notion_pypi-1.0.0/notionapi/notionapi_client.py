# -*- coding: utf-8 -*-

"""
notionapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from notionapi.configuration import Configuration
from notionapi.controllers.base_controller import BaseController
from notionapi.configuration import Environment
from notionapi.http.auth.o_auth_2 import OAuth2
from notionapi.controllers.users_controller import UsersController
from notionapi.controllers.databases_controller import DatabasesController
from notionapi.controllers.pages_controller import PagesController
from notionapi.controllers.blocks_controller import BlocksController
from notionapi.controllers.search_controller import SearchController
from notionapi.controllers.comments_controller import CommentsController


class NotionapiClient(object):
    @LazyProperty
    def users(self):
        return UsersController(self.global_configuration)

    @LazyProperty
    def databases(self):
        return DatabasesController(self.global_configuration)

    @LazyProperty
    def pages(self):
        return PagesController(self.global_configuration)

    @LazyProperty
    def blocks(self):
        return BlocksController(self.global_configuration)

    @LazyProperty
    def search(self):
        return SearchController(self.global_configuration)

    @LazyProperty
    def comments(self):
        return CommentsController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['bearerAuth']}
        self.auth_managers['bearerAuth'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

