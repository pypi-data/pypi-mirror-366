# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum16(object):

    """Implementation of the 'Datum16' model.

    Attributes:
        id (str): The model property of type str.
        gmt (str): The model property of type str.
        city_id (str): The model property of type str.
        iata_code (str): The model property of type str.
        country_iso_2 (str): The model property of type str.
        geoname_id (str): The model property of type str.
        latitude (str): The model property of type str.
        longitude (str): The model property of type str.
        city_name (str): The model property of type str.
        timezone (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "gmt": 'gmt',
        "city_id": 'city_id',
        "iata_code": 'iata_code',
        "country_iso_2": 'country_iso2',
        "geoname_id": 'geoname_id',
        "latitude": 'latitude',
        "longitude": 'longitude',
        "city_name": 'city_name',
        "timezone": 'timezone'
    }

    _nullables = [
        'gmt',
        'geoname_id',
    ]

    def __init__(self,
                 id=None,
                 gmt=None,
                 city_id=None,
                 iata_code=None,
                 country_iso_2=None,
                 geoname_id=None,
                 latitude=None,
                 longitude=None,
                 city_name=None,
                 timezone=None):
        """Constructor for the Datum16 class"""

        # Initialize members of the class
        self.id = id 
        self.gmt = gmt 
        self.city_id = city_id 
        self.iata_code = iata_code 
        self.country_iso_2 = country_iso_2 
        self.geoname_id = geoname_id 
        self.latitude = latitude 
        self.longitude = longitude 
        self.city_name = city_name 
        self.timezone = timezone 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        gmt = dictionary.get("gmt") if dictionary.get("gmt") else None
        city_id = dictionary.get("city_id") if dictionary.get("city_id") else None
        iata_code = dictionary.get("iata_code") if dictionary.get("iata_code") else None
        country_iso_2 = dictionary.get("country_iso2") if dictionary.get("country_iso2") else None
        geoname_id = dictionary.get("geoname_id") if dictionary.get("geoname_id") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        city_name = dictionary.get("city_name") if dictionary.get("city_name") else None
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else None
        # Return an object of this model
        return cls(id,
                   gmt,
                   city_id,
                   iata_code,
                   country_iso_2,
                   geoname_id,
                   latitude,
                   longitude,
                   city_name,
                   timezone)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'gmt={self.gmt!r}, '
                f'city_id={self.city_id!r}, '
                f'iata_code={self.iata_code!r}, '
                f'country_iso_2={self.country_iso_2!r}, '
                f'geoname_id={self.geoname_id!r}, '
                f'latitude={self.latitude!r}, '
                f'longitude={self.longitude!r}, '
                f'city_name={self.city_name!r}, '
                f'timezone={self.timezone!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'gmt={self.gmt!s}, '
                f'city_id={self.city_id!s}, '
                f'iata_code={self.iata_code!s}, '
                f'country_iso_2={self.country_iso_2!s}, '
                f'geoname_id={self.geoname_id!s}, '
                f'latitude={self.latitude!s}, '
                f'longitude={self.longitude!s}, '
                f'city_name={self.city_name!s}, '
                f'timezone={self.timezone!s})')
