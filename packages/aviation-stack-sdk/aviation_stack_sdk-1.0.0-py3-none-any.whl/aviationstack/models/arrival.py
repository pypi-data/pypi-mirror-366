# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Arrival(object):

    """Implementation of the 'Arrival' model.

    Attributes:
        airport (str): The model property of type str.
        timezone (str): The model property of type str.
        iata (str): The model property of type str.
        icao (str): The model property of type str.
        terminal (str): The model property of type str.
        gate (str): The model property of type str.
        baggage (str): The model property of type str.
        delay (str): The model property of type str.
        scheduled (str): The model property of type str.
        estimated (str): The model property of type str.
        actual (str): The model property of type str.
        estimated_runway (str): The model property of type str.
        actual_runway (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "airport": 'airport',
        "timezone": 'timezone',
        "iata": 'iata',
        "icao": 'icao',
        "terminal": 'terminal',
        "gate": 'gate',
        "baggage": 'baggage',
        "delay": 'delay',
        "scheduled": 'scheduled',
        "estimated": 'estimated',
        "actual": 'actual',
        "estimated_runway": 'estimated_runway',
        "actual_runway": 'actual_runway'
    }

    _nullables = [
        'airport',
        'timezone',
        'terminal',
        'gate',
        'baggage',
        'delay',
        'actual',
        'estimated_runway',
        'actual_runway',
    ]

    def __init__(self,
                 airport=None,
                 timezone=None,
                 iata=None,
                 icao=None,
                 terminal=None,
                 gate=None,
                 baggage=None,
                 delay=None,
                 scheduled=None,
                 estimated=None,
                 actual=None,
                 estimated_runway=None,
                 actual_runway=None):
        """Constructor for the Arrival class"""

        # Initialize members of the class
        self.airport = airport 
        self.timezone = timezone 
        self.iata = iata 
        self.icao = icao 
        self.terminal = terminal 
        self.gate = gate 
        self.baggage = baggage 
        self.delay = delay 
        self.scheduled = scheduled 
        self.estimated = estimated 
        self.actual = actual 
        self.estimated_runway = estimated_runway 
        self.actual_runway = actual_runway 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        airport = dictionary.get("airport") if dictionary.get("airport") else None
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else None
        iata = dictionary.get("iata") if dictionary.get("iata") else None
        icao = dictionary.get("icao") if dictionary.get("icao") else None
        terminal = dictionary.get("terminal") if dictionary.get("terminal") else None
        gate = dictionary.get("gate") if dictionary.get("gate") else None
        baggage = dictionary.get("baggage") if dictionary.get("baggage") else None
        delay = dictionary.get("delay") if dictionary.get("delay") else None
        scheduled = dictionary.get("scheduled") if dictionary.get("scheduled") else None
        estimated = dictionary.get("estimated") if dictionary.get("estimated") else None
        actual = dictionary.get("actual") if dictionary.get("actual") else None
        estimated_runway = dictionary.get("estimated_runway") if dictionary.get("estimated_runway") else None
        actual_runway = dictionary.get("actual_runway") if dictionary.get("actual_runway") else None
        # Return an object of this model
        return cls(airport,
                   timezone,
                   iata,
                   icao,
                   terminal,
                   gate,
                   baggage,
                   delay,
                   scheduled,
                   estimated,
                   actual,
                   estimated_runway,
                   actual_runway)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'airport={self.airport!r}, '
                f'timezone={self.timezone!r}, '
                f'iata={self.iata!r}, '
                f'icao={self.icao!r}, '
                f'terminal={self.terminal!r}, '
                f'gate={self.gate!r}, '
                f'baggage={self.baggage!r}, '
                f'delay={self.delay!r}, '
                f'scheduled={self.scheduled!r}, '
                f'estimated={self.estimated!r}, '
                f'actual={self.actual!r}, '
                f'estimated_runway={self.estimated_runway!r}, '
                f'actual_runway={self.actual_runway!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'airport={self.airport!s}, '
                f'timezone={self.timezone!s}, '
                f'iata={self.iata!s}, '
                f'icao={self.icao!s}, '
                f'terminal={self.terminal!s}, '
                f'gate={self.gate!s}, '
                f'baggage={self.baggage!s}, '
                f'delay={self.delay!s}, '
                f'scheduled={self.scheduled!s}, '
                f'estimated={self.estimated!s}, '
                f'actual={self.actual!s}, '
                f'estimated_runway={self.estimated_runway!s}, '
                f'actual_runway={self.actual_runway!s})')
