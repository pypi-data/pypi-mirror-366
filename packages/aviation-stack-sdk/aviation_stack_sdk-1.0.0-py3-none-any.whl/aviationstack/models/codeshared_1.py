# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from aviationstack.api_helper import APIHelper


class Codeshared1(object):

    """Implementation of the 'Codeshared1' model.

    Attributes:
        airline_name (str): The model property of type str.
        airline_iata (str): The model property of type str.
        airline_icao (str): The model property of type str.
        flight_number (str): The model property of type str.
        flight_iata (str): The model property of type str.
        flight_icao (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "airline_name": 'airline_name',
        "airline_iata": 'airline_iata',
        "airline_icao": 'airline_icao',
        "flight_number": 'flight_number',
        "flight_iata": 'flight_iata',
        "flight_icao": 'flight_icao'
    }

    def __init__(self,
                 airline_name=None,
                 airline_iata=None,
                 airline_icao=None,
                 flight_number=None,
                 flight_iata=None,
                 flight_icao=None):
        """Constructor for the Codeshared1 class"""

        # Initialize members of the class
        self.airline_name = airline_name 
        self.airline_iata = airline_iata 
        self.airline_icao = airline_icao 
        self.flight_number = flight_number 
        self.flight_iata = flight_iata 
        self.flight_icao = flight_icao 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        airline_name = dictionary.get("airline_name") if dictionary.get("airline_name") else None
        airline_iata = dictionary.get("airline_iata") if dictionary.get("airline_iata") else None
        airline_icao = dictionary.get("airline_icao") if dictionary.get("airline_icao") else None
        flight_number = dictionary.get("flight_number") if dictionary.get("flight_number") else None
        flight_iata = dictionary.get("flight_iata") if dictionary.get("flight_iata") else None
        flight_icao = dictionary.get("flight_icao") if dictionary.get("flight_icao") else None
        # Return an object of this model
        return cls(airline_name,
                   airline_iata,
                   airline_icao,
                   flight_number,
                   flight_iata,
                   flight_icao)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.airline_name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.airline_iata,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.airline_icao,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.flight_number,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.flight_iata,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.flight_icao,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('airline_name'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('airline_iata'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('airline_icao'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('flight_number'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('flight_iata'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('flight_icao'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'airline_name={self.airline_name!r}, '
                f'airline_iata={self.airline_iata!r}, '
                f'airline_icao={self.airline_icao!r}, '
                f'flight_number={self.flight_number!r}, '
                f'flight_iata={self.flight_iata!r}, '
                f'flight_icao={self.flight_icao!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'airline_name={self.airline_name!s}, '
                f'airline_iata={self.airline_iata!s}, '
                f'airline_icao={self.airline_icao!s}, '
                f'flight_number={self.flight_number!s}, '
                f'flight_iata={self.flight_iata!s}, '
                f'flight_icao={self.flight_icao!s})')
