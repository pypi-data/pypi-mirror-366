# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Arrival4(object):

    """Implementation of the 'Arrival4' model.

    Attributes:
        airport (str): The model property of type str.
        timezone (str): The model property of type str.
        iata (str): The model property of type str.
        icao (str): The model property of type str.
        terminal (str): The model property of type str.
        time (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "airport": 'airport',
        "timezone": 'timezone',
        "iata": 'iata',
        "icao": 'icao',
        "terminal": 'terminal',
        "time": 'time'
    }

    _nullables = [
        'airport',
        'timezone',
        'icao',
        'terminal',
        'time',
    ]

    def __init__(self,
                 airport=None,
                 timezone=None,
                 iata=None,
                 icao=None,
                 terminal=None,
                 time=None):
        """Constructor for the Arrival4 class"""

        # Initialize members of the class
        self.airport = airport 
        self.timezone = timezone 
        self.iata = iata 
        self.icao = icao 
        self.terminal = terminal 
        self.time = time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        airport = dictionary.get("airport") if dictionary.get("airport") else None
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else None
        iata = dictionary.get("iata") if dictionary.get("iata") else None
        icao = dictionary.get("icao") if dictionary.get("icao") else None
        terminal = dictionary.get("terminal") if dictionary.get("terminal") else None
        time = dictionary.get("time") if dictionary.get("time") else None
        # Return an object of this model
        return cls(airport,
                   timezone,
                   iata,
                   icao,
                   terminal,
                   time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'airport={self.airport!r}, '
                f'timezone={self.timezone!r}, '
                f'iata={self.iata!r}, '
                f'icao={self.icao!r}, '
                f'terminal={self.terminal!r}, '
                f'time={self.time!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'airport={self.airport!s}, '
                f'timezone={self.timezone!s}, '
                f'iata={self.iata!s}, '
                f'icao={self.icao!s}, '
                f'terminal={self.terminal!s}, '
                f'time={self.time!s})')
