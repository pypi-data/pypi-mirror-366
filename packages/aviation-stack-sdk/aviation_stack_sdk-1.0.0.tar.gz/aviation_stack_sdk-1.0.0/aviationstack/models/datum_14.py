# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum14(object):

    """Implementation of the 'Datum14' model.

    Attributes:
        id (str): The model property of type str.
        tax_id (str): The model property of type str.
        tax_name (str): The model property of type str.
        iata_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "tax_id": 'tax_id',
        "tax_name": 'tax_name',
        "iata_code": 'iata_code'
    }

    def __init__(self,
                 id=None,
                 tax_id=None,
                 tax_name=None,
                 iata_code=None):
        """Constructor for the Datum14 class"""

        # Initialize members of the class
        self.id = id 
        self.tax_id = tax_id 
        self.tax_name = tax_name 
        self.iata_code = iata_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        tax_id = dictionary.get("tax_id") if dictionary.get("tax_id") else None
        tax_name = dictionary.get("tax_name") if dictionary.get("tax_name") else None
        iata_code = dictionary.get("iata_code") if dictionary.get("iata_code") else None
        # Return an object of this model
        return cls(id,
                   tax_id,
                   tax_name,
                   iata_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'tax_id={self.tax_id!r}, '
                f'tax_name={self.tax_name!r}, '
                f'iata_code={self.iata_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'tax_id={self.tax_id!s}, '
                f'tax_name={self.tax_name!s}, '
                f'iata_code={self.iata_code!s})')
