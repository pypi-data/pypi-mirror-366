Metadata-Version: 2.4
Name: tsdeque
Version: 1.0.1
Summary: Thread-safe double-ended queue
Author-email: kotmarkot <andrey.patrusov@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/PATRUSOV/python-thread-safe-deque
Keywords: deque,thread-safe,concurrency,multithreading,queue
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Dynamic: license-file

# tsdeque ‚Äî Thread-Safe Deque with Task Tracking ‚öôÔ∏è

---

## English

**tsdeque** is a thread-safe, double-ended queue implementation with built-in task tracking and threshold-based event notifications. Designed for multi-threaded environments, it ensures safe concurrent access and precise control over queue size and task completion status.

### Features
- Thread-safe double-ended queue (`deque`) operations  
- Support for max size limitation with blocking `put` operations  
- Task counting with `task_done()` and `join()` methods, similar to `queue.Queue`  
- Threshold events triggered on hitting min/max counts  
- Customizable blocking timeouts on put/get operations  
- Designed with performance and correctness in mind  

### Installation
```bash
pip install tsdeque
````

### Usage example

```python
from tsdeque import ThreadSafeDeque

deque = ThreadSafeDeque(maxsize=5)
deque.put("item")
item = deque.get()
deque.task_done()
deque.join()
```

### Testing üß™

Run tests with:

```bash
python -m pytest
```

---

## –†—É—Å—Å–∫–∏–π

**tsdeque** ‚Äî –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –æ—á–µ—Ä–µ–¥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–¥–∞—á.

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

* –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –æ—á–µ—Ä–µ–¥—å—é (`deque`)
* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É —Å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ `put`
* –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á —Å –º–µ—Ç–æ–¥–∞–º–∏ `task_done()` –∏ `join()`, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ `queue.Queue`
* –°–æ–±—ã—Ç–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
* –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install tsdeque
```

### –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

```python
from tsdeque import ThreadSafeDeque

deque = ThreadSafeDeque(maxsize=5)
deque.put("item")
item = deque.get()
deque.task_done()
deque.join()
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üß™

–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:

```bash
python -m pytest
```

---
