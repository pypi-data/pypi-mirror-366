#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from datetime import timedelta
from mesh.macro import mpi, spi
from typing import Dict, List

@spi("mpi")
class Pipeline(ABC):

    @abstractmethod
    @mpi("mesh.chan.peek")
    async def peek(self, topic: str) -> bytes:
        """
        Peek
        Retrieves, but does not remove, the head of this queue,
        or returns None if this queue is empty.
        """
        pass

    @abstractmethod
    @mpi("mesh.chan.pop")
    async def pop(self, timeout: timedelta, topic: str) -> bytes:
        """
        Pop
        Retrieves and removes the head of this queue,
        or returns None if this queue is empty.
        """
        pass

    @abstractmethod
    @mpi("mesh.chan.push")
    async def push(self, payload: bytes, metadata: Dict[str, str], topic: str) -> None:
        """
        Push
        Inserts the specified element into this queue if it is possible to do
        so immediately without violating capacity restrictions.
        When using a capacity-restricted queue, this method is generally
        preferable to add, which can fail to insert an element only
        by throwing an exception.
        """
        pass

    @abstractmethod
    @mpi("mesh.chan.release")
    async def release(self, timeout: timedelta, topic: str) -> None:
        """
        Release the channel session.
        """
        pass
