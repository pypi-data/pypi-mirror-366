#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from typing import Dict, List

@spi("mpi")
class Cryptor(ABC):

    @abstractmethod
    @mpi("mesh.crypt.encrypt")
    async def encrypt(self, buf: bytes, keys: Dict[str, bytes]) -> bytes:
        """
        Encrypt binary to encrypted binary.
        """
        pass

    @abstractmethod
    @mpi("mesh.crypt.decrypt")
    async def decrypt(self, buf: bytes, keys: Dict[str, bytes]) -> bytes:
        """
        Decrypt binary to decrypted binary.
        """
        pass

    @abstractmethod
    @mpi("mesh.crypt.hash")
    async def hash(self, buf: bytes, keys: Dict[str, bytes]) -> bytes:
        """
        Hash compute the hash value.
        """
        pass

    @abstractmethod
    @mpi("mesh.crypt.sign")
    async def sign(self, buf: bytes, keys: Dict[str, bytes]) -> bytes:
        """
        Sign compute the signature value.
        """
        pass

    @abstractmethod
    @mpi("mesh.crypt.verify")
    async def verify(self, buf: bytes, keys: Dict[str, bytes]) -> bool:
        """
        Verify the signature value.
        """
        pass
