#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from mesh.types import Versions
from typing import Dict, List

@spi("mpi")
class Builtin(ABC):

    @abstractmethod
    @mpi("${mesh.name}.builtin.doc")
    async def doc(self, name: str, formatter: str) -> str:
        """
        Doc export the documents.
        
        Parameters:
        name      - mesh.name
        formatter - document formatter
        formatted - document
        Returns:
        formatted document
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.builtin.version")
    async def version(self,) -> Versions:
        """
        Version will get the builtin application version.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.builtin.debug")
    async def debug(self, features: Dict[str, str]) -> None:
        """
        Debug set the application log level.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.builtin.stats")
    async def stats(self, features: List[str]) -> Dict[str, str]:
        """
        Stats will collect health check stats.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.builtin.fallback")
    async def fallback(self,) -> None:
        """
        Fallback is fallback service
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.builtin.dump")
    async def dump(self, names: List[str]) -> Dict[str, str]:
        """
        Dump the application data.
        """
        pass


class Hodor(ABC):

    @abstractmethod
    async def stats(self, features: List[str]) -> Dict[str, str]:
        """
        Stats collect the system, application, process or thread status etc.
        """
        pass

    @abstractmethod
    async def debug(self, features: Dict[str, str]) -> None:
        """
        Debug set the debug features.
        """
        pass

    @abstractmethod
    async def dump(self,) -> str:
        """
        Dump the application data.
        """
        pass
