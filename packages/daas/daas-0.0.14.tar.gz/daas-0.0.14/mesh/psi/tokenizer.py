#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from datetime import timedelta
from mesh.macro import mpi, spi
from mesh.types import AccessCode, AccessGrant, AccessID, AccessToken, Captcha, Credential, Session
from typing import Dict

@spi("mpi")
class Tokenizer(ABC):

    @abstractmethod
    @mpi("mesh.captcha.apply")
    async def captcha(self, kind: str, features: Dict[str, str]) -> Captcha:
        """
        Captcha apply a graphics captcha.
        """
        pass

    @abstractmethod
    @mpi("mesh.captcha.match")
    async def matches(self, mno: str, value: str) -> bool:
        """
        Matches a graphics captcha value.
        """
        pass

    @abstractmethod
    @mpi("mesh.trust.apply")
    async def apply(self, kind: str, duration: timedelta) -> str:
        """
        Apply
        """
        pass

    @abstractmethod
    @mpi("mesh.trust.verify")
    async def verify(self, token: str) -> bool:
        """
        Verify
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.quickauth")
    async def quickauth(self, credential: Credential) -> AccessToken:
        """
        Quickauth OAuth2 quick authorize, contains grant code and code authorize.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.grant")
    async def grant(self, credential: Credential) -> AccessGrant:
        """
        Grant OAuth2 code grant.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.accept")
    async def accept(self, code: str) -> AccessCode:
        """
        Accept OAuth2 accept grant code.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.reject")
    async def reject(self, code: str) -> None:
        """
        Reject OAuth2 reject grant code.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.authorize")
    async def authorize(self, code: str) -> AccessToken:
        """
        Authorize OAuth2 code authorize.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.authenticate")
    async def authenticate(self, token: str) -> AccessID:
        """
        Authenticate OAuth2 authenticate.
        """
        pass

    @abstractmethod
    @mpi("mesh.oauth2.refresh")
    async def refresh(self, token: str) -> AccessToken:
        """
        Refresh OAuth2 auth token refresh.
        """
        pass


@spi("mpi")
class TokenProvider(ABC):

    @abstractmethod
    @mpi("${mesh.name}.session.obtain")
    async def provide(self, token: str) -> Session:
        """
        Provide
        """
        pass
