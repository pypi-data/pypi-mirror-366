#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod

from mesh.macro import mpi, spi

from mesh.types import CacheBody

from typing import List


@spi("mesh")
class Cache(ABC):

    @abstractmethod
    @mpi("mesh.cache.get")
    async def get(self, key: str) -> CacheBody:
        """
        Get the value from cache.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.put")
    async def put(self, cell: CacheBody) -> None:
        """
        Put the value to cache.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.remove")
    async def remove(self, key: str) -> None:
        """
        Remove the cache value.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.incr")
    async def incr(self, key: str, value: int) -> int:
        """
        Incr the cache of expire time.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.decr")
    async def decr(self, key: str, value: int) -> int:
        """
        Decr the cache of expire time.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.keys")
    async def keys(self, pattern: str) -> List[str]:
        """
        Keys the cache key set.
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.hget")
    async def hget(self, key: str, name: str) -> CacheBody:
        """
        HGet get value in hash
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.hset")
    async def hset(self, key: str, cell: CacheBody) -> None:
        """
        HSet put value in hash
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.hdel")
    async def hdel(self, key: str, name: str) -> None:
        """
        HDel put value in hash
        """
        pass

    @abstractmethod
    @mpi("mesh.cache.hkeys")
    async def hkeys(self, key: str) -> List[str]:
        """
        HKeys get the hash keys
        """
        pass
