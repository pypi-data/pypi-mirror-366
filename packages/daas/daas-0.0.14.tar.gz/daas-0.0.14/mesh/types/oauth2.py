#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from mesh.macro import idx, serializable
from typing import Dict, List

@serializable
class Captcha:

    @idx(index = 0, name = "mno")
    def mno(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "kind")
    def kind(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "mime")
    def mime(self) -> bytes:
        """
        """
        return b''

    @idx(index = 3, name = "text")
    def text(self) -> str:
        """
        """
        return ""



@serializable
class Credential:

    @idx(index = 0, name = "client_id")
    def client_id(self) -> str:
        """
        OAuth client id
        """
        return ""

    @idx(index = 1, name = "client_key")
    def client_key(self) -> str:
        """
        OAuth client key
        """
        return ""

    @idx(index = 2, name = "username")
    def username(self) -> str:
        """
        OAuth authorize username
        """
        return ""

    @idx(index = 3, name = "password")
    def password(self) -> str:
        """
        OAuth authorize password
        """
        return ""

    @idx(index = 4, name = "captcha")
    def captcha(self) -> str:
        """
        OAuth authorize captcha
        """
        return ""



@serializable
class AccessToken:

    @idx(index = 0, name = "token")
    def token(self) -> str:
        """
        OAuth access token
        """
        return ""

    @idx(index = 1, name = "type")
    def kind(self) -> str:
        """
        OAuth access token type
        """
        return ""

    @idx(index = 2, name = "expires_at")
    def expires_at(self) -> int:
        """
        OAuth access token expires time in mills
        """
        return 0

    @idx(index = 3, name = "scope")
    def scope(self) -> str:
        """
        OAuth access token scope
        """
        return ""

    @idx(index = 4, name = "refresh_token")
    def refresh_token(self) -> str:
        """
        OAuth access token refresh token
        """
        return ""



@serializable
class AccessGrant:

    @idx(index = 0, name = "code")
    def code(self) -> str:
        """
        OAuth grant code
        """
        return ""



@serializable
class AccessCode:

    @idx(index = 0, name = "code")
    def code(self) -> str:
        """
        OAuth authorize code
        """
        return ""

    @idx(index = 1, name = "redirect_uri")
    def redirect_uri(self) -> str:
        """
        OAuth authorize redirect uri
        """
        return ""



@serializable
class AccessID:

    @idx(index = 0, name = "client_id")
    def client_id(self) -> str:
        """
        OAuth client id
        """
        return ""

    @idx(index = 1, name = "user_id")
    def user_id(self) -> str:
        """
        OAuth user id
        """
        return ""

    @idx(index = 2, name = "expires_at")
    def expires_at(self) -> int:
        """
        OAuth access token expires time in mills
        """
        return 0



@serializable
class Session:

    @idx(index = 0, name = "token")
    def token(self) -> str:
        """
        Authenticate token
        """
        return ""

    @idx(index = 1, name = "userid")
    def userid(self) -> str:
        """
        User id
        """
        return ""

    @idx(index = 2, name = "username")
    def username(self) -> str:
        """
        User name
        """
        return ""

    @idx(index = 3, name = "nickname")
    def nickname(self) -> str:
        """
        Nick name
        """
        return ""

    @idx(index = 4, name = "avatar")
    def avatar(self) -> str:
        """
        User avatar uri
        """
        return ""

    @idx(index = 5, name = "mobile")
    def mobile(self) -> str:
        """
        User contact mobile
        """
        return ""

    @idx(index = 6, name = "mail")
    def mail(self) -> str:
        """
        User contact mail
        """
        return ""

    @idx(index = 7, name = "dept_id")
    def dept_id(self) -> str:
        """
        User department id
        """
        return ""

    @idx(index = 8, name = "mdc")
    def mdc(self) -> str:
        """
        User mdc
        """
        return ""

    @idx(index = 9, name = "inst_ids")
    def inst_ids(self) -> List[str]:
        """
        User institution id
        """
        pass

    @idx(index = 10, name = "attrs")
    def attrs(self) -> List[str]:
        """
        User attributes
        """
        pass

    @idx(index = 11, name = "raw")
    def raw(self) -> Dict[str, str]:
        """
        User extension dict info
        """
        pass

