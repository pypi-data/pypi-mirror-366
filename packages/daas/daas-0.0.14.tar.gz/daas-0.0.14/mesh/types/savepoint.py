#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from datetime import timedelta
from mesh.macro import idx, serializable
from typing import Any, Dict

@serializable
class DtxDefinition:

    @idx(index = 0, name = "xid")
    def xid(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "timeout")
    def timeout(self) -> timedelta:
        """
        """
        return timedelta(milliseconds=0)

    @idx(index = 2, name = "schema")
    def schema(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "flags")
    def flags(self) -> int:
        """
        """
        return 0



@serializable
class DtxBranch:

    @idx(index = 0, name = "xid")
    def xid(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "schema")
    def schema(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "grammar")
    def grammar(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "expr")
    def expr(self) -> str:
        """
        """
        return ""

    @idx(index = 4, name = "args")
    def args(self) -> Dict[str, Any]:
        """
        """
        pass

    @idx(index = 5, name = "flags")
    def flags(self) -> int:
        """
        """
        return 0

