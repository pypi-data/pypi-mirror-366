#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from datetime import datetime
from mesh.macro import Stacktrace, T, idx, serializable
from typing import Any, Dict, List, Generic

@serializable
class Paging:

    @idx(index = 0, name = "sid")
    def sid(self) -> str:
        """
        Session ID
        """
        return ""

    @idx(index = 1, name = "index")
    def index(self) -> int:
        """
        Start index
        """
        return 0

    @idx(index = 2, name = "limit")
    def limit(self) -> int:
        """
        Start limit
        """
        return 0

    @idx(index = 3, name = "factor")
    def factor(self) -> Dict[str, Any]:
        """
        Paging factor
        """
        pass

    @idx(index = 4, name = "order")
    def order(self) -> str:
        """
        Sort order
        """
        return ""



@serializable
class Page(Generic[T]):

    @idx(index = 0, name = "sid")
    def sid(self) -> str:
        """
        Session ID
        """
        return ""

    @idx(index = 1, name = "index")
    def index(self) -> int:
        """
        Start index
        """
        return 0

    @idx(index = 2, name = "limit")
    def limit(self) -> int:
        """
        Start limit
        """
        return 0

    @idx(index = 3, name = "total")
    def total(self) -> int:
        """
        Start total
        """
        return 0

    @idx(index = 4, name = "next")
    def next(self) -> bool:
        """
        Has next
        """
        return False

    @idx(index = 5, name = "data")
    def data(self) -> List[T]:
        """
        Index data
        """
        pass



@serializable
class DataLord:

    @idx(index = 0, name = "node_id")
    def node_id(self) -> str:
        """
        节点编码
        """
        return ""

    @idx(index = 1, name = "node_name")
    def node_name(self) -> str:
        """
        节点名称
        """
        return ""

    @idx(index = 2, name = "inst_id")
    def inst_id(self) -> str:
        """
        机构编码
        """
        return ""

    @idx(index = 3, name = "inst_name")
    def inst_name(self) -> str:
        """
        机构名称
        """
        return ""



@serializable
class Mani:

    @idx(index = 0, name = "status")
    def status(self) -> int:
        """
        状态
        """
        return 0

    @idx(index = 1, name = "create_at")
    def create_at(self) -> datetime | None:
        """
        创建时间
        """
        return None

    @idx(index = 2, name = "update_at")
    def update_at(self) -> datetime | None:
        """
        更新时间
        """
        return None

    @idx(index = 3, name = "create_by")
    def create_by(self) -> str:
        """
        创建人
        """
        return ""

    @idx(index = 4, name = "update_by")
    def update_by(self) -> str:
        """
        更新人
        """
        return ""



@serializable
class Cause(Stacktrace):

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        Cause name
        """
        return ""

    @idx(index = 1, name = "pos")
    def pos(self) -> str:
        """
        Cause position
        """
        return ""

    @idx(index = 2, name = "text")
    def text(self) -> str:
        """
        Cause descriptor
        """
        return ""

    @idx(index = 3, name = "buff")
    def buff(self) -> bytes:
        """
        Cause stack
        """
        return b''



@serializable
class Topic:

    @idx(index = 0, name = "topic")
    def topic(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "code")
    def code(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "group")
    def group(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "sets")
    def sets(self) -> str:
        """
        """
        return ""

