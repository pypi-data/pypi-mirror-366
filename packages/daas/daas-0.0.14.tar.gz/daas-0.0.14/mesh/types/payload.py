#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from mesh.macro import idx, serializable
from mesh.types.builtin import Cause
from typing import Any, Dict, List

@serializable
class Inbound:

    @idx(index = 0, name = "arguments")
    def arguments(self) -> List[Any]:
        """
        Invoke parameters
        """
        pass

    @idx(index = 1, name = "attachments")
    def attachments(self) -> Dict[str, str]:
        """
        Invoke attachments
        """
        return {}



@serializable
class Outbound:

    @idx(index = 0, name = "code")
    def code(self) -> str:
        """
        Result code
        """
        return ""

    @idx(index = 1, name = "message")
    def message(self) -> str:
        """
        Result message
        """
        return ""

    @idx(index = 2, name = "cause")
    def cause(self) -> Cause:
        """
        Service cause stacktrace
        """
        pass

    @idx(index = 3, name = "content")
    def content(self) -> Any:
        """
        Service response content
        """
        return None

