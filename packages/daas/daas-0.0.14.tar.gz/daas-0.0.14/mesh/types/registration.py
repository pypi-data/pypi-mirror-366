#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from mesh.macro import T, idx, serializable
from typing import Dict, List, Generic

@serializable
class URC:

    @idx(index = 0, name = "version")
    def version(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "proto")
    def proto(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "codec")
    def codec(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "mdc")
    def mdc(self) -> str:
        """
        """
        return ""

    @idx(index = 4, name = "zone")
    def zone(self) -> str:
        """
        """
        return ""

    @idx(index = 5, name = "cluster")
    def cluster(self) -> str:
        """
        """
        return ""

    @idx(index = 6, name = "cell")
    def cell(self) -> str:
        """
        """
        return ""

    @idx(index = 7, name = "group")
    def group(self) -> str:
        """
        """
        return ""

    @idx(index = 8, name = "address")
    def address(self) -> str:
        """
        """
        return ""



@serializable
class Reference(URC):

    @idx(index = 0, name = "urn")
    def urn(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "namespace")
    def namespace(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "name")
    def name(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "flags")
    def flags(self) -> int:
        """
        Service flag 1 asyncable 2 encrypt 4 communal
        """
        return 0

    @idx(index = 4, name = "timeout")
    def timeout(self) -> int:
        """
        """
        return 0

    @idx(index = 5, name = "retries")
    def retries(self) -> int:
        """
        """
        return 0



@serializable
class Service(URC):

    @idx(index = 0, name = "urn")
    def urn(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "namespace")
    def namespace(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "name")
    def name(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "flags")
    def flags(self) -> int:
        """
        Service flag 1 asyncable 2 encrypt 4 communal 8
        """
        return 0

    @idx(index = 4, name = "timeout")
    def timeout(self) -> int:
        """
        """
        return 0

    @idx(index = 5, name = "retries")
    def retries(self) -> int:
        """
        """
        return 0

    @idx(index = 6, name = "sets")
    def sets(self) -> str:
        """
        """
        return ""

    @idx(index = 7, name = "kind")
    def kind(self) -> str:
        """
        """
        return ""

    @idx(index = 8, name = "lang")
    def lang(self) -> str:
        """
        """
        return ""

    @idx(index = 9, name = "attrs")
    def attrs(self) -> Dict[str, str]:
        """
        """
        return {}



@serializable
class Metadata:

    @idx(index = 0, name = "references")
    def references(self) -> List[Reference]:
        """
        """
        pass

    @idx(index = 1, name = "services")
    def services(self) -> List[Service]:
        """
        """
        pass



@serializable
class Registration(Generic[T]):

    @idx(index = 0, name = "instance_id")
    def instance_id(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "name")
    def name(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "kind")
    def kind(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "address")
    def address(self) -> str:
        """
        """
        return ""

    @idx(index = 4, name = "content")
    def content(self) -> T | None:
        """
        """
        return None

    @idx(index = 5, name = "timestamp")
    def timestamp(self) -> int:
        """
        """
        return 0

    @idx(index = 6, name = "attachments")
    def attachments(self) -> Dict[str, str]:
        """
        """
        return {}

