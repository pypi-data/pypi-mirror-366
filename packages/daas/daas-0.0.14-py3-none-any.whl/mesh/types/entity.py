#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from datetime import datetime
from mesh.macro import idx, serializable
from typing import List

@serializable
class Body:

    @idx(index = 0, name = "codec")
    def codec(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "schema")
    def schema(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "buffer")
    def buffer(self) -> bytes:
        """
        """
        return b''



@serializable
class CacheBody:

    @idx(index = 0, name = "version")
    def version(self) -> str:
        """
        Cache version
        """
        return ""

    @idx(index = 1, name = "entity")
    def entity(self) -> Body:
        """
        Cache entity
        """
        pass

    @idx(index = 2, name = "timestamp")
    def timestamp(self) -> int:
        """
        Cache timestamp
        """
        return 0

    @idx(index = 3, name = "duration")
    def duration(self) -> int:
        """
        Cache expired duration
        """
        return 0

    @idx(index = 4, name = "key")
    def key(self) -> str:
        """
        Cache key
        """
        return ""



@serializable
class Entry:

    @idx(index = 0, name = "key")
    def key(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "value")
    def value(self) -> Body:
        """
        """
        pass

    @idx(index = 2, name = "update_at")
    def update_at(self) -> datetime | None:
        """
        """
        return None



@serializable
class FileEntry:

    @idx(index = 0, name = "mno")
    def mno(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "kind")
    def kind(self) -> str:
        """
        0 æ–‡ä»¶/1 ç›®å½•
        """
        return ""

    @idx(index = 2, name = "mime")
    def mime(self) -> bytes:
        """
        """
        return b''

    @idx(index = 3, name = "text")
    def text(self) -> str:
        """
        """
        return ""

