#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from mesh.macro import idx, serializable
from typing import Dict, List

@serializable
class Worker:

    @idx(index = 0, name = "no")
    def no(self) -> str:
        """
        Worker identity
        """
        return ""

    @idx(index = 1, name = "name")
    def name(self) -> str:
        """
        Worker name
        """
        return ""

    @idx(index = 2, name = "alias")
    def alias(self) -> str:
        """
        Worker alias
        """
        return ""



@serializable
class WorkIntent:

    @idx(index = 0, name = "bno")
    def bno(self) -> str:
        """
        Business code
        """
        return ""

    @idx(index = 1, name = "cno")
    def cno(self) -> str:
        """
        Workflow chart code
        """
        return ""

    @idx(index = 2, name = "context")
    def context(self) -> Dict[str, str]:
        """
        Workflow context
        """
        return {}

    @idx(index = 3, name = "applier")
    def applier(self) -> Worker:
        """
        Workflow applier
        """
        pass



@serializable
class WorkVertex:

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        Workflow name
        """
        return ""

    @idx(index = 1, name = "alias")
    def alias(self) -> str:
        """
        Workflow alias
        """
        return ""

    @idx(index = 2, name = "attrs")
    def attrs(self) -> Dict[str, str]:
        """
        Workflow vertex attributes
        """
        return {}

    @idx(index = 3, name = "kind")
    def kind(self) -> int:
        """
        Workflow vertex kind
        """
        return 0

    @idx(index = 4, name = "group")
    def group(self) -> str:
        """
        Workflow review group code
        """
        return ""



@serializable
class WorkSide:

    @idx(index = 0, name = "src")
    def src(self) -> str:
        """
        Workflow side src name
        """
        return ""

    @idx(index = 1, name = "dst")
    def dst(self) -> str:
        """
        Workflow side dst name
        """
        return ""

    @idx(index = 2, name = "condition")
    def condition(self) -> str:
        """
        Workflow side condition
        """
        return ""



@serializable
class WorkChart:

    @idx(index = 0, name = "cno")
    def cno(self) -> str:
        """
        Workflow chart code
        """
        return ""

    @idx(index = 1, name = "name")
    def name(self) -> str:
        """
        Workflow name
        """
        return ""

    @idx(index = 2, name = "vertices")
    def vertices(self) -> List[WorkVertex]:
        """
        Workflow vertices
        """
        pass

    @idx(index = 3, name = "sides")
    def sides(self) -> List[WorkSide]:
        """
        Workflow sides
        """
        pass

    @idx(index = 4, name = "status")
    def status(self) -> int:
        """
        Workflow status
        """
        return 0

    @idx(index = 5, name = "maintainer")
    def maintainer(self) -> Worker:
        """
        Workflow maintainer
        """
        pass



@serializable
class WorkTask:

    @idx(index = 0, name = "vertex")
    def vertex(self) -> WorkVertex:
        """
        Workflow vertex
        """
        pass

    @idx(index = 1, name = "reviewers")
    def reviewers(self) -> List[Worker]:
        """
        Workflow vertex reviewers
        """
        pass

    @idx(index = 2, name = "status")
    def status(self) -> int:
        """
        Workflow vertex status
        """
        return 0

    @idx(index = 3, name = "context")
    def context(self) -> Dict[str, str]:
        """
        Workflow context
        """
        return {}



@serializable
class WorkRoutine:

    @idx(index = 0, name = "rno")
    def rno(self) -> str:
        """
        Workflow routine code
        """
        return ""

    @idx(index = 1, name = "bno")
    def bno(self) -> str:
        """
        Business code
        """
        return ""

    @idx(index = 2, name = "context")
    def context(self) -> Dict[str, str]:
        """
        Workflow context
        """
        return {}

    @idx(index = 3, name = "status")
    def status(self) -> int:
        """
        Workflow status
        """
        return 0

    @idx(index = 4, name = "chart")
    def chart(self) -> WorkChart:
        """
        Workflow chart
        """
        pass

    @idx(index = 5, name = "tasks")
    def tasks(self) -> List[WorkTask]:
        """
        Workflow tasks
        """
        pass



@serializable
class WorkGroup:

    @idx(index = 0, name = "no")
    def no(self) -> str:
        """
        Work group identity
        """
        return ""

    @idx(index = 1, name = "name")
    def name(self) -> str:
        """
        Work group name
        """
        return ""

    @idx(index = 2, name = "status")
    def status(self) -> int:
        """
        Workflow group status
        """
        return 0

    @idx(index = 3, name = "workers")
    def workers(self) -> List[Worker]:
        """
        Work group workers
        """
        pass



@serializable
class WorkContext:

    @idx(index = 0, name = "rno")
    def rno(self) -> str:
        """
        Workflow routine code
        """
        return ""

    @idx(index = 1, name = "bno")
    def bno(self) -> str:
        """
        Business code
        """
        return ""

    @idx(index = 2, name = "cno")
    def cno(self) -> str:
        """
        Workflow chart code
        """
        return ""

    @idx(index = 3, name = "context")
    def context(self) -> Dict[str, str]:
        """
        Workflow context
        """
        return {}

    @idx(index = 4, name = "vertex")
    def vertex(self) -> WorkVertex:
        """
        Workflow vertex
        """
        pass

    @idx(index = 5, name = "task")
    def task(self) -> WorkTask:
        """
        Workflow task
        """
        pass

    @idx(index = 6, name = "applier")
    def applier(self) -> Worker:
        """
        Workflow applier
        """
        pass

    @idx(index = 7, name = "reviewer")
    def reviewer(self) -> Worker:
        """
        Workflow reviewer
        """
        pass

