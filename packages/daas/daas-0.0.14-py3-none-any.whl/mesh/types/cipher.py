#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from mesh.macro import idx, serializable
from typing import Dict, List

@serializable
class CRL:

    @idx(index = 0, name = "suite")
    def suite(self) -> str:
        """
        Resource suite
        """
        return ""

    @idx(index = 1, name = "project")
    def project(self) -> str:
        """
        Resource project
        """
        return ""

    @idx(index = 2, name = "name")
    def name(self) -> str:
        """
        Resource name
        """
        return ""

    @idx(index = 3, name = "version")
    def version(self) -> str:
        """
        Resource version
        """
        return ""



@serializable
class CipherHello:

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "proto")
    def proto(self) -> str:
        """
        ReAnonymize/ReCipher/Homomorphic
        """
        return ""

    @idx(index = 2, name = "algo")
    def algo(self) -> str:
        """
        SM2/RSA2/BFV etc.
        """
        return ""

    @idx(index = 3, name = "parties")
    def parties(self) -> List[str]:
        """
        """
        pass

    @idx(index = 4, name = "message")
    def message(self) -> str:
        """
        """
        return ""



@serializable
class CipherSuite:

    @idx(index = 0, name = "suite")
    def suite(self) -> str:
        """
        Handshake suite
        """
        return ""

    @idx(index = 1, name = "csr")
    def csr(self) -> bytes:
        """
        Cipher sign request
        """
        return b''



@serializable
class CipherKeygen:

    @idx(index = 0, name = "hello")
    def hello(self) -> CipherHello:
        """
        """
        pass

    @idx(index = 1, name = "suite")
    def suite(self) -> CipherSuite:
        """
        """
        pass

    @idx(index = 2, name = "local")
    def local(self) -> str:
        """
        Local party
        """
        return ""



@serializable
class CipherRegen(CipherKeygen):

    @idx(index = 0, name = "keys")
    def keys(self) -> Dict[str, bytes]:
        """
        Generate keys
        """
        pass



@serializable
class CipherKey:

    @idx(index = 0, name = "keys")
    def keys(self) -> Dict[str, bytes]:
        """
        Generate keys
        """
        pass



@serializable
class CipherEntity:

    @idx(index = 0, name = "suite")
    def suite(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "body")
    def body(self) -> bytes:
        """
        """
        return b''



@serializable
class CipherTxEntity(CipherEntity):

    @idx(index = 0, name = "re_key")
    def re_key(self) -> bytes:
        """
        """
        return b''



@serializable
class CipherObject:

    @idx(index = 0, name = "code")
    def code(self) -> str:
        """
        """
        return ""

    @idx(index = 1, name = "name")
    def name(self) -> str:
        """
        """
        return ""

    @idx(index = 2, name = "memo")
    def memo(self) -> str:
        """
        """
        return ""

    @idx(index = 3, name = "uri")
    def uri(self) -> str:
        """
        """
        return ""

    @idx(index = 4, name = "level")
    def level(self) -> str:
        """
        Confidential level
        """
        return ""

    @idx(index = 5, name = "node_id")
    def node_id(self) -> str:
        """
        """
        return ""

    @idx(index = 6, name = "inst_id")
    def inst_id(self) -> str:
        """
        """
        return ""

    @idx(index = 7, name = "raw")
    def raw(self) -> str:
        """
        """
        return ""

