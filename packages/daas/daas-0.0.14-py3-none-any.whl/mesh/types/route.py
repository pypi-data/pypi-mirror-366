#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from datetime import datetime
from mesh.macro import idx, serializable
from typing import List

@serializable
class Route:

    @idx(index = 0, name = "sid")
    def sid(self) -> str:
        """
        源头编号
        """
        return ""

    @idx(index = 1, name = "did")
    def did(self) -> str:
        """
        目标编号
        """
        return ""

    @idx(index = 2, name = "name")
    def name(self) -> str:
        """
        名称
        """
        return ""

    @idx(index = 3, name = "kind")
    def kind(self) -> str:
        """
        类型:static/dynamic
        """
        return ""

    @idx(index = 4, name = "pattern")
    def pattern(self) -> str:
        """
        网络模式:did://;dns://domain?zone=&kind=A,AAAA,TXT,CNAME,NS,MX,SRV,CAA,SOA&text=&ttl=&provider=&pid=
        """
        return ""

    @idx(index = 5, name = "address")
    def address(self) -> str:
        """
        服务地址
        """
        return ""

    @idx(index = 6, name = "memo")
    def memo(self) -> str:
        """
        说明
        """
        return ""

    @idx(index = 7, name = "rank")
    def rank(self) -> int:
        """
        优先等级
        """
        return 0

    @idx(index = 8, name = "tags")
    def tags(self) -> str:
        """
        标签
        """
        return ""

    @idx(index = 9, name = "expire_at")
    def expire_at(self) -> datetime | None:
        """
        过期时间
        """
        return None

    @idx(index = 10, name = "upstream")
    def upstream(self) -> int:
        """
        上行带宽Mbps
        """
        return 0

    @idx(index = 11, name = "downstream")
    def downstream(self) -> int:
        """
        下行带宽Mbps
        """
        return 0

    @idx(index = 12, name = "host_root")
    def host_root(self) -> str:
        """
        根证书
        """
        return ""

    @idx(index = 13, name = "host_crt")
    def host_crt(self) -> str:
        """
        证书
        """
        return ""

    @idx(index = 14, name = "host_key")
    def host_key(self) -> str:
        """
        私钥
        """
        return ""

    @idx(index = 15, name = "guest_root")
    def guest_root(self) -> str:
        """
        对端根证书
        """
        return ""

    @idx(index = 16, name = "raw")
    def raw(self) -> str:
        """
        JSON信息
        """
        return ""

    @idx(index = 17, name = "status")
    def status(self) -> int:
        """
        状态
        """
        return 0

    @idx(index = 18, name = "create_at")
    def create_at(self) -> datetime | None:
        """
        创建时间
        """
        return None

    @idx(index = 19, name = "update_at")
    def update_at(self) -> datetime | None:
        """
        更新时间
        """
        return None

    @idx(index = 20, name = "create_by")
    def create_by(self) -> str:
        """
        创建人
        """
        return ""

    @idx(index = 21, name = "update_by")
    def update_by(self) -> str:
        """
        更新人
        """
        return ""



@serializable
class DynamicRoute:

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        Route name
        """
        return ""

    @idx(index = 1, name = "matcher")
    def matcher(self) -> str:
        """
        Route matcher
        """
        return ""

    @idx(index = 2, name = "backend")
    def backend(self) -> List[str]:
        """
        Route backend
        """
        pass

    @idx(index = 3, name = "priority")
    def priority(self) -> int:
        """
        Route priority
        """
        return 0

    @idx(index = 4, name = "proxy")
    def proxy(self) -> str:
        """
        Route proxy
        """
        return ""

    @idx(index = 5, name = "crt")
    def crt(self) -> str:
        """
        Route certificate
        """
        return ""

    @idx(index = 6, name = "key")
    def key(self) -> str:
        """
        Route private key
        """
        return ""

    @idx(index = 7, name = "ca")
    def ca(self) -> str:
        """
        Route CA certificate
        """
        return ""



@serializable
class DynamicServer:

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        Route name
        """
        return ""

    @idx(index = 1, name = "kind")
    def kind(self) -> str:
        """
        Server kind, Reverse/Forward/TCPReverse/TCPForward
        """
        return ""

    @idx(index = 2, name = "listen")
    def listen(self) -> List[str]:
        """
        Route listen address, e.g.
        """
        pass

    @idx(index = 3, name = "routes")
    def routes(self) -> List[DynamicRoute]:
        """
        Route rules
        """
        pass



@serializable
class Matcher:

    @idx(index = 0, name = "expr")
    def expr(self) -> str:
        """
        匹配表达式
        """
        return ""

    @idx(index = 1, name = "value")
    def value(self) -> str:
        """
        匹配值
        """
        return ""



@serializable
class Netlist:

    @idx(index = 0, name = "name")
    def name(self) -> str:
        """
        名称
        """
        return ""

    @idx(index = 1, name = "kind")
    def kind(self) -> str:
        """
        类型:whitelist/blacklist
        """
        return ""

    @idx(index = 2, name = "layer")
    def layer(self) -> str:
        """
        协议:L4/L7
        """
        return ""

    @idx(index = 3, name = "priority")
    def priority(self) -> int:
        """
        优先级
        """
        return 0

    @idx(index = 4, name = "status")
    def status(self) -> int:
        """
        状态 1启用 2禁用
        """
        return 0

    @idx(index = 5, name = "memo")
    def memo(self) -> str:
        """
        说明
        """
        return ""

    @idx(index = 6, name = "matchers")
    def matchers(self) -> List[Matcher]:
        """
        匹配规则
        """
        pass

