#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from typing import List, Type, Any

from mesh.codec import Codec, Json
from mesh.macro import mpi, spi, T, ServiceLoader
from mesh.tool import Objects
from mesh.types import Entry, Body, Paging, Page


@spi("mesh")
class KV(ABC):

    @abstractmethod
    @mpi("mesh.kv.get")
    async def get(self, key: str) -> Body:
        """
        Get the value from kv store.
        """
        pass

    @abstractmethod
    @mpi("mesh.kv.put")
    async def put(self, key: str, value: Body) -> None:
        """
        Put the value to kv store.
        """
        pass

    @abstractmethod
    @mpi("mesh.kv.remove")
    async def remove(self, key: str) -> None:
        """
        Remove the kv store.
        """
        pass

    @abstractmethod
    @mpi("mesh.kv.keys")
    async def keys(self, pattern: str) -> List[str]:
        """
        Keys with the pattern of kv store.
        """
        pass

    @abstractmethod
    @mpi("mesh.kv.index")
    async def index(self, index: Paging) -> Page[Entry]:
        """
        Index the kv for webui
        """
        pass

    async def get_with_type(self, key: str, kind: Type[T]) -> T:
        """
        Get by codec.
        :param key:
        :param kind:
        :return:
        """
        body = await self.get(key)
        return self._try_read_object(body, kind) if body else None

    async def put_object(self, key: str, value: Any):
        """
        Put by codec.
        :param key:
        :param value:
        :return:
        """
        await self.put(key, Objects.wrap(value))

    def _try_read_object(self, body: Body, kind: Type[T]) -> T:
        return self._load_codec(body.codec()).decode(body.buffer, kind) if body.buffer else None

    @staticmethod
    def _load_codec(name: str) -> type[Codec]:
        if not name or name == "":
            return ServiceLoader.load(Codec).get(Json)
        return ServiceLoader.load(Codec).get(name)
