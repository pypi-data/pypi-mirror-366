#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from mesh.types import Environ, Page, Paging, Route, Versions
from typing import List

@spi("mpi")
class Network(ABC):

    @abstractmethod
    @mpi("mesh.net.environ")
    async def environ(self,) -> Environ:
        """
        Environ Get the meth network environment fixed information.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.accessible")
    async def accessible(self, route: Route) -> bool:
        """
        Accessible Check the mesh network is accessible.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.refresh")
    async def refresh(self, routes: List[Route]) -> None:
        """
        Refresh the routes to mesh network.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.route")
    async def route(self, mdc: str) -> Route:
        """
        Route the network edge route.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.routes")
    async def routes(self,) -> List[Route]:
        """
        Routes the network edge routes.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.disable")
    async def disable(self, mdc: str) -> None:
        """
        Disable the network
        """
        pass

    @abstractmethod
    @mpi("mesh.net.enable")
    async def enable(self, mdc: str) -> None:
        """
        Enable the network
        """
        pass

    @abstractmethod
    @mpi("mesh.net.index")
    async def index(self, index: Paging) -> Page[Route]:
        """
        Index the network edges
        """
        pass

    @abstractmethod
    @mpi("mesh.net.version")
    async def version(self, mdc: str) -> Versions:
        """
        Version
        Network environment version.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.exports")
    async def exports(self, mdc: str) -> str:
        """
        Exports the weave certificate.
        """
        pass

    @abstractmethod
    @mpi("mesh.net.imports")
    async def imports(self, crt: str) -> None:
        """
        Imports the weave certificate.
        """
        pass
