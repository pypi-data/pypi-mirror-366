#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from mesh.types import CipherEntity, CipherHello, CipherKey, CipherKeygen, CipherObject, CipherRegen, CipherSuite, CipherTxEntity, Keys, Page, Paging
from typing import List

@spi("mpi")
class CipherEconomy(ABC):

    @abstractmethod
    @mpi("${mesh.name}.cipher.handshake")
    async def handshake(self, hello: CipherHello) -> str:
        """
        Handshake negotiate multiparty cipher keys.
        
        Parameters:
        - hello: hello
        Returns:
        - string cipher group
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.collect")
    async def collect(self, obj: CipherObject) -> int:
        """
        Collect cipher objects with group. Asyncable can be invoked by multi times.
        
        Parameters:
        - obj: obj
        Returns:
        - int 1 for success, 0 for failed
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.encrypt")
    async def serve(self, suite: str) -> str:
        """
        Serve will Encrypt or Anonymize
        """
        pass

    @abstractmethod
    @mpi("mesh.rec.deposit")
    async def deposit(self, rco: CipherObject) -> str:
        """
        Deposit cipher object deposit
        """
        pass

    @abstractmethod
    @mpi("mesh.rec.objects")
    async def objects(self, index: Paging) -> Page[CipherObject]:
        """
        Objects cipher object index
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.keys")
    async def keys(self, idx: Paging) -> Page[Keys]:
        """
        Keys key index
        """
        pass

    @abstractmethod
    @mpi("mesh.rec.invoke")
    async def invoke(self, index: Paging) -> bytes:
        """
        Invoke
        """
        pass


@spi("mpi")
class CipherProvider(ABC):

    @abstractmethod
    @mpi("${mesh.name}.cipher.suite")
    async def suite(self, hello: CipherHello) -> CipherSuite:
        """
        Suite
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.keygen")
    async def keygen(self, keygen: CipherKeygen) -> CipherKey:
        """
        Keygen
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.regen")
    async def regen(self, keygen: CipherRegen) -> CipherKey:
        """
        Regen
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.encode")
    async def encode(self, explain: CipherEntity) -> bytes:
        """
        Encode
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.decode")
    async def decode(self, cipher: CipherEntity) -> bytes:
        """
        Decode
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.cipher.recode")
    async def recode(self, cipher: CipherTxEntity) -> bytes:
        """
        Recode
        """
        pass


@spi("mpi")
class ObjectProvider(ABC):

    @abstractmethod
    async def serve(self,) -> str:
        """
        """
        pass
