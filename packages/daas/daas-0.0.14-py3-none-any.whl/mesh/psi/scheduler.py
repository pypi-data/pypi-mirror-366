#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from datetime import timedelta
from mesh.macro import mpi, spi
from mesh.types import Timeout, Topic
from typing import List

@spi("mpi")
class Scheduler(ABC):

    @abstractmethod
    @mpi("mesh.schedule.timeout")
    async def timeout(self, timeout: Timeout, duration: timedelta) -> str:
        """
        Timeout
        Schedules the specified {@link Timeout} for one-time execution after the specified delay.
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.cron")
    async def cron(self, cron: str, topic: Topic) -> str:
        """
        Cron
        Schedules with the cron expression. "0 * * 1-3 * ? *"
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.period")
    async def period(self, duration: timedelta, topic: Topic) -> str:
        """
        Period
        schedule with fixed duration.
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.dump")
    async def dump(self,) -> List[str]:
        """
        Dump max is 1000 items
        Releases all resources acquired by this {@link Scheduler} and cancels all
        tasks which were scheduled but not executed yet.
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.cancel")
    async def cancel(self, task_id: str) -> bool:
        """
        Cancel
        Attempts to cancel the {@link tech.firmer.mesh.types.Timeout} associated with this handle.
        If the task has been executed or cancelled already, it will return with
        no side effect.
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.stop")
    async def stop(self, task_id: str) -> bool:
        """
        Stop
        Attempts to stop the {@link tech.firmer.mesh.types.Timeout} associated with this handle.
        If the task has been executed or cancelled already, it will return with
        no side effect.
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.emit")
    async def emit(self, topic: Topic) -> None:
        """
        Emit the scheduler topic
        """
        pass

    @abstractmethod
    @mpi("mesh.schedule.shutdown")
    async def shutdown(self, duration: timedelta) -> None:
        """
        Shutdown the scheduler
        """
        pass
