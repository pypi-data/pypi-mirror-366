#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from mesh.types import Page, Paging, WorkChart, WorkGroup, WorkIntent, WorkVertex

@spi("mpi")
class Workflow(ABC):

    @abstractmethod
    @mpi("mesh.workflow.mass")
    async def mass(self, group: WorkGroup) -> str:
        """
        Mass workflow work in group.
        Return workflow code
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.groups")
    async def groups(self, index: Paging) -> Page[WorkGroup]:
        """
        Groups page workflow review groups.
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.compile")
    async def compile(self, chart: WorkChart) -> str:
        """
        Compile workflow in engine.
        Return workflow code
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.index")
    async def index(self, index: Paging) -> Page[WorkChart]:
        """
        Index workflows.
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.submit")
    async def submit(self, intent: WorkIntent) -> str:
        """
        Submit workflow.
        Return workflow instance code
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.take")
    async def take(self, vertex: WorkVertex) -> None:
        """
        Take action on workflow instance.
        """
        pass

    @abstractmethod
    @mpi("mesh.workflow.routines")
    async def routines(self, index: Paging) -> Page[WorkVertex]:
        """
        Routines infer workflow instance as routine.
        """
        pass
