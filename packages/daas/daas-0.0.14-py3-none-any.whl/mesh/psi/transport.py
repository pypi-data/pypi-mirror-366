#
# Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
# Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
#

# Code generated by mesh; DO NOT EDIT.

from abc import ABC, abstractmethod
from mesh.macro import mpi, spi
from mesh.types import Packet
from typing import List

@spi("mpi")
class Transporter(ABC):

    @abstractmethod
    @mpi("${mesh.name}.tcp.attach")
    async def attach(self, uri: str, pdc: str) -> str:
        """
        Attach the tcp over transport with uri and partner mdc.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.tcp.detach")
    async def detach(self, descriptor: str) -> None:
        """
        Detach the tcp over transport with descriptor.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.tcp.scan")
    async def scan(self, rid: str, h: int, limit: int) -> List[Packet]:
        """
        Scan packets with ref and header in all buckets.
        
        Parameters:
        rid - reference node id for exclude in scan set.
        h - types.TCPHeader
        
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.tcp.write")
    async def write(self, packet: Packet) -> None:
        """
        Write packet to bucket.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.tcp.read")
    async def read(self, bucket: str, limit: int) -> List[Packet]:
        """
        Read packets in bucket.
        """
        pass

    @abstractmethod
    @mpi("${mesh.name}.tcp.clean")
    async def clean(self, buckets: List[str]) -> None:
        """
        Clean all packets in buckets.
        """
        pass
