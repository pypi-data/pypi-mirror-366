[tool.poetry]
name = "setup-selenium-testing"
version = "1.0.4"
description = "Setup Selenium for automation testing"
authors = ["Marcel Wilson <trenchrats+pypi@gmail.com>"]
license = "MIT"
repository = "https://github.com/bandophahita/setup_selenium"
#documentation = ""
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
packages = [{include = "setup_selenium"}]


[tool.poetry.dependencies]
python = "^3.9"
selenium = ">=4.7.0"
semantic-version = "*"
typing-extensions = "*"

# extras
pytest = {version="*", optional = true}
black = {version="*", optional = true}
mypy = {version="*", optional = true}
ruff = {version = ">=0.8.0", optional = true}
tox = {version="*", optional = true}

[tool.poetry.extras]
dev = [
    "pytest",
    "black",
    "mypy",
    "ruff",
    "tox",
]
test = [
    "pytest",
    "tox",
]


[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"


# LINTER CONFIGURATION & GUIDELINES 
# There is no rule that says linter configurations MUST be put in the pyproject.toml
# This is partially because not all tools support it.  That said with the move to ruff,
# this file felt like the logical place to keep any documentations regarding how or why
# configurations are the way they are.

# The general rule:
# "Linters should help, not hinder."
# If the inclination on a rule is to add a whole bunch of exceptions in various places,
# perhaps that rule should not be run regularly.


[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "docker-compose-dev.yaml",
    "docker-compose-pro.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
]
output-format = "concise"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "C90", # mccabe
    "FBT",  # flake8-boolean-trap
    "G", # flake8-logging-format
    "N", # pep8 naming -- dear lord, leave this off
    "PTH", # flake8-use-pathlib (unclear if we NEED to do this) 
    "SLF", # flake8-self (accessing private members)
    
    # NOT OPTIONAL. MUST REMAIN AS SET
    # these are all completely unnecessary 
    "B028", # No explicit `stacklevel` keyword argument found in logging
    "COM812",  # missing trailing comma
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D202", # no blank lines after docstring
    "D203", # one-blank-line-before-class
    "D204", # blank line required after docstring
    "D205", # blank line between summary and description
    "D212", # Multi-line summary should start at the first line
    "D400", # First line should end with a period
    "D401", # imperative mood
    "D404", # First word of the docstring should not be "This"
    "D405", # Section name should be properly capitalized
    "D406", # Section name should end with a newline 
    "D407", # Missing dashed underline after section
    "D411", # Missing blank line before section
    "D412", # No blank lines allowed between a section header and its content
    "D415", # First line should end with punctuation
    "E501",   # line too long -- black will take care of this for us
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PLC0414", # useless-import-alias
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "S101", # use of assert
    "TC006",  # cast wants str for types (blech!)

    # 3.9 compatibility
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

extend-safe-fixes = [
    "ANN201", "ANN202", "ANN204",
    "B011",
    "C419",
    "E711", # Comparison to `None` should be `cond is None`
    "EM101", "EM102",
    "PLR1714",
    "PT003", "PT006", "PT018",
    "RET504",
    "RSE102",
    "SIM102", "SIM103", "SIM105", "SIM108", "SIM110",
    "TCH001", "TCH002", "TCH003", "TCH004",
    "TID252", #absolute import over relative
    "TRY400",
    "UP007",
    "UP040",
    "W291",

]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = [
    "D",  # we don't need public-API-polished docstrings in tests.
    "FBT",  # using a boolean as a test object is useful!
    "PLR",  # likewise using specific numbers and strings in tests.
    "INP001",  # implicit namespace package
]
[tool.ruff.lint.flake8-annotations]
# ignore returns types for functions that implicity or explicitly only return None
suppress-none-returning = true
allow-star-arg-any = true
#mypy-init-return = true


[tool.black]
line-length = 88
target-version = ['py311']

# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
)

'''
