from tsal.core.symbols import TSALOp

SPARK_TO_OPCODE = {
    "ignite": TSALOp.INIT,
    "start": TSALOp.INIT,
    "boot": TSALOp.INIT,
    "connect": TSALOp.MESH,
    "join": TSALOp.MESH,
    "link": TSALOp.MESH,
    "align": TSALOp.PHI,
    "optimize": TSALOp.PHI,
    "flow": TSALOp.PHI,
    "turn": TSALOp.ROT,
    "rotate": TSALOp.ROT,
    "flip": TSALOp.ROT,
    "define": TSALOp.BOUND,
    "limit": TSALOp.BOUND,
    "constrain": TSALOp.BOUND,
    "move": TSALOp.FLOW,
    "push": TSALOp.FLOW,
    "carry": TSALOp.FLOW,
    "seek": TSALOp.SEEK,
    "ask": TSALOp.SEEK,
    "query": TSALOp.SEEK,
    "scan": TSALOp.SEEK,
    "evolve": TSALOp.SPIRAL,
    "spiral": TSALOp.SPIRAL,
    "climb": TSALOp.SPIRAL,
    "loop": TSALOp.CYCLE,
    "retry": TSALOp.CYCLE,
    "cycle": TSALOp.CYCLE,
    "create": TSALOp.FORGE,
    "forge": TSALOp.FORGE,
    "synthesize": TSALOp.FORGE,
    "match": TSALOp.SYNC,
    "sync": TSALOp.SYNC,
    "balance": TSALOp.SYNC,
    "mask": TSALOp.MASK,
    "hide": TSALOp.MASK,
    "invert": TSALOp.MASK,
    "shift": TSALOp.MASK,
    "lock": TSALOp.CRYST,
    "preserve": TSALOp.CRYST,
    "store": TSALOp.CRYST,
    "analyze": TSALOp.SPEC,
    "color": TSALOp.SPEC,
    "spectrum": TSALOp.SPEC,
    "repair": TSALOp.BLOOM,
    "heal": TSALOp.BLOOM,
    "transform": TSALOp.BLOOM,
    "save": TSALOp.SAVE,
    "remember": TSALOp.SAVE,
    "write": TSALOp.SAVE,
}

def translate_spark_word(word: str):
    return SPARK_TO_OPCODE.get(word.lower())
