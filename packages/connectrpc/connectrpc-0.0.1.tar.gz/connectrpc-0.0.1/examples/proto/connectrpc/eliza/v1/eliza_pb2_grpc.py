# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from examples.proto.connectrpc.eliza.v1 import eliza_pb2 as examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in examples/proto/connectrpc/eliza/v1/eliza_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ElizaServiceStub(object):
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Say = channel.unary_unary(
                '/connectrpc.eliza.v1.ElizaService/Say',
                request_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayRequest.SerializeToString,
                response_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayResponse.FromString,
                _registered_method=True)
        self.Converse = channel.stream_stream(
                '/connectrpc.eliza.v1.ElizaService/Converse',
                request_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseRequest.SerializeToString,
                response_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseResponse.FromString,
                _registered_method=True)
        self.Introduce = channel.unary_stream(
                '/connectrpc.eliza.v1.ElizaService/Introduce',
                request_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceRequest.SerializeToString,
                response_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceResponse.FromString,
                _registered_method=True)
        self.Reflect = channel.stream_unary(
                '/connectrpc.eliza.v1.ElizaService/Reflect',
                request_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectRequest.SerializeToString,
                response_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectResponse.FromString,
                _registered_method=True)


class ElizaServiceServicer(object):
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    def Say(self, request, context):
        """Say is a unary RPC. Eliza responds to the prompt with a single sentence.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Converse(self, request_iterator, context):
        """Converse is a bidirectional RPC. The caller may exchange multiple
        back-and-forth messages with Eliza over a long-lived connection. Eliza
        responds to each ConverseRequest with a ConverseResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Introduce(self, request, context):
        """Introduce is a server streaming RPC. Given the caller's name, Eliza
        returns a stream of sentences to introduce itself.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reflect(self, request_iterator, context):
        """Reflect is a client streaming RPC. Given a stream of sentences, Eliza
        returns a single sentence that reflects the input back to the caller.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElizaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Say': grpc.unary_unary_rpc_method_handler(
                    servicer.Say,
                    request_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayRequest.FromString,
                    response_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayResponse.SerializeToString,
            ),
            'Converse': grpc.stream_stream_rpc_method_handler(
                    servicer.Converse,
                    request_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseRequest.FromString,
                    response_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseResponse.SerializeToString,
            ),
            'Introduce': grpc.unary_stream_rpc_method_handler(
                    servicer.Introduce,
                    request_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceRequest.FromString,
                    response_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceResponse.SerializeToString,
            ),
            'Reflect': grpc.stream_unary_rpc_method_handler(
                    servicer.Reflect,
                    request_deserializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectRequest.FromString,
                    response_serializer=examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'connectrpc.eliza.v1.ElizaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('connectrpc.eliza.v1.ElizaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ElizaService(object):
    """ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
    for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
    the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
    superficiality of human-computer communication. DOCTOR simulates a
    psychotherapist, and is commonly found as an Easter egg in emacs
    distributions.
    """

    @staticmethod
    def Say(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/connectrpc.eliza.v1.ElizaService/Say',
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayRequest.SerializeToString,
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.SayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Converse(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/connectrpc.eliza.v1.ElizaService/Converse',
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseRequest.SerializeToString,
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ConverseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Introduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/connectrpc.eliza.v1.ElizaService/Introduce',
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceRequest.SerializeToString,
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.IntroduceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reflect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/connectrpc.eliza.v1.ElizaService/Reflect',
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectRequest.SerializeToString,
            examples_dot_proto_dot_connectrpc_dot_eliza_dot_v1_dot_eliza__pb2.ReflectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
